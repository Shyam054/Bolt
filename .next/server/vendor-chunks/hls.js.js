/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hls.js";
exports.ids = ["vendor-chunks/hls.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/hls.js/dist/hls.js":
/*!*****************************************!*\
  !*** ./node_modules/hls.js/dist/hls.js ***!
  \*****************************************/
/***/ ((module) => {

eval("(function __HLS_WORKER_BUNDLE__(__IN_WORKER__){\n(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n})(this, (function () { 'use strict';\n\n  function _construct(t, e, r) {\n    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n    var o = [null];\n    o.push.apply(o, e);\n    var p = new (t.bind.apply(t, o))();\n    return r && _setPrototypeOf(p, r.prototype), p;\n  }\n  function _defineProperties(e, r) {\n    for (var t = 0; t < r.length; t++) {\n      var o = r[t];\n      o.enumerable = o.enumerable || false, o.configurable = true, \"value\" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n  }\n  function _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n      writable: false\n    }), e;\n  }\n  function _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n      value: t,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    }) : e[r] = t, e;\n  }\n  function _extends() {\n    return _extends = Object.assign ? Object.assign.bind() : function (n) {\n      for (var e = 1; e < arguments.length; e++) {\n        var t = arguments[e];\n        for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n      }\n      return n;\n    }, _extends.apply(null, arguments);\n  }\n  function _getPrototypeOf(t) {\n    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    }, _getPrototypeOf(t);\n  }\n  function _inheritsLoose(t, o) {\n    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);\n  }\n  function _isNativeFunction(t) {\n    try {\n      return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n    } catch (n) {\n      return \"function\" == typeof t;\n    }\n  }\n  function _isNativeReflectConstruct() {\n    try {\n      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (t) {}\n    return (_isNativeReflectConstruct = function () {\n      return !!t;\n    })();\n  }\n  function ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n      var o = Object.getOwnPropertySymbols(e);\n      r && (o = o.filter(function (r) {\n        return Object.getOwnPropertyDescriptor(e, r).enumerable;\n      })), t.push.apply(t, o);\n    }\n    return t;\n  }\n  function _objectSpread2(e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var t = null != arguments[r] ? arguments[r] : {};\n      r % 2 ? ownKeys(Object(t), true).forEach(function (r) {\n        _defineProperty(e, r, t[r]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n      });\n    }\n    return e;\n  }\n  function _setPrototypeOf(t, e) {\n    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n      return t.__proto__ = e, t;\n    }, _setPrototypeOf(t, e);\n  }\n  function _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n      var i = e.call(t, r);\n      if (\"object\" != typeof i) return i;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n  }\n  function _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n  }\n  function _wrapNativeSuper(t) {\n    var r = \"function\" == typeof Map ? new Map() : void 0;\n    return _wrapNativeSuper = function (t) {\n      if (null === t || !_isNativeFunction(t)) return t;\n      if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n      if (void 0 !== r) {\n        if (r.has(t)) return r.get(t);\n        r.set(t, Wrapper);\n      }\n      function Wrapper() {\n        return _construct(t, arguments, _getPrototypeOf(this).constructor);\n      }\n      return Wrapper.prototype = Object.create(t.prototype, {\n        constructor: {\n          value: Wrapper,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      }), _setPrototypeOf(Wrapper, t);\n    }, _wrapNativeSuper(t);\n  }\n\n  /**\n   * Generate a random v4 UUID\n   *\n   * @returns A random v4 UUID\n   *\n   * @group Utils\n   *\n   * @beta\n   */\n  function uuid() {\n    try {\n      return crypto.randomUUID();\n    } catch (error) {\n      try {\n        var url = URL.createObjectURL(new Blob());\n        var _uuid = url.toString();\n        URL.revokeObjectURL(url);\n        return _uuid.slice(_uuid.lastIndexOf('/') + 1);\n      } catch (error) {\n        var dt = new Date().getTime();\n        var _uuid2 = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n          var r = (dt + Math.random() * 16) % 16 | 0;\n          dt = Math.floor(dt / 16);\n          return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n        });\n        return _uuid2;\n      }\n    }\n  }\n\n  function getDefaultExportFromCjs (x) {\n  \treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n  }\n\n  var eventemitter3 = {exports: {}};\n\n  var hasRequiredEventemitter3;\n\n  function requireEventemitter3 () {\n  \tif (hasRequiredEventemitter3) return eventemitter3.exports;\n  \thasRequiredEventemitter3 = 1;\n  \t(function (module) {\n\n  \t\tvar has = Object.prototype.hasOwnProperty\n  \t\t  , prefix = '~';\n\n  \t\t/**\n  \t\t * Constructor to create a storage for our `EE` objects.\n  \t\t * An `Events` instance is a plain object whose properties are event names.\n  \t\t *\n  \t\t * @constructor\n  \t\t * @private\n  \t\t */\n  \t\tfunction Events() {}\n\n  \t\t//\n  \t\t// We try to not inherit from `Object.prototype`. In some engines creating an\n  \t\t// instance in this way is faster than calling `Object.create(null)` directly.\n  \t\t// If `Object.create(null)` is not supported we prefix the event names with a\n  \t\t// character to make sure that the built-in object properties are not\n  \t\t// overridden or used as an attack vector.\n  \t\t//\n  \t\tif (Object.create) {\n  \t\t  Events.prototype = Object.create(null);\n\n  \t\t  //\n  \t\t  // This hack is needed because the `__proto__` property is still inherited in\n  \t\t  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  \t\t  //\n  \t\t  if (!new Events().__proto__) prefix = false;\n  \t\t}\n\n  \t\t/**\n  \t\t * Representation of a single event listener.\n  \t\t *\n  \t\t * @param {Function} fn The listener function.\n  \t\t * @param {*} context The context to invoke the listener with.\n  \t\t * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n  \t\t * @constructor\n  \t\t * @private\n  \t\t */\n  \t\tfunction EE(fn, context, once) {\n  \t\t  this.fn = fn;\n  \t\t  this.context = context;\n  \t\t  this.once = once || false;\n  \t\t}\n\n  \t\t/**\n  \t\t * Add a listener for a given event.\n  \t\t *\n  \t\t * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n  \t\t * @param {(String|Symbol)} event The event name.\n  \t\t * @param {Function} fn The listener function.\n  \t\t * @param {*} context The context to invoke the listener with.\n  \t\t * @param {Boolean} once Specify if the listener is a one-time listener.\n  \t\t * @returns {EventEmitter}\n  \t\t * @private\n  \t\t */\n  \t\tfunction addListener(emitter, event, fn, context, once) {\n  \t\t  if (typeof fn !== 'function') {\n  \t\t    throw new TypeError('The listener must be a function');\n  \t\t  }\n\n  \t\t  var listener = new EE(fn, context || emitter, once)\n  \t\t    , evt = prefix ? prefix + event : event;\n\n  \t\t  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  \t\t  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  \t\t  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  \t\t  return emitter;\n  \t\t}\n\n  \t\t/**\n  \t\t * Clear event by name.\n  \t\t *\n  \t\t * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n  \t\t * @param {(String|Symbol)} evt The Event name.\n  \t\t * @private\n  \t\t */\n  \t\tfunction clearEvent(emitter, evt) {\n  \t\t  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  \t\t  else delete emitter._events[evt];\n  \t\t}\n\n  \t\t/**\n  \t\t * Minimal `EventEmitter` interface that is molded against the Node.js\n  \t\t * `EventEmitter` interface.\n  \t\t *\n  \t\t * @constructor\n  \t\t * @public\n  \t\t */\n  \t\tfunction EventEmitter() {\n  \t\t  this._events = new Events();\n  \t\t  this._eventsCount = 0;\n  \t\t}\n\n  \t\t/**\n  \t\t * Return an array listing the events for which the emitter has registered\n  \t\t * listeners.\n  \t\t *\n  \t\t * @returns {Array}\n  \t\t * @public\n  \t\t */\n  \t\tEventEmitter.prototype.eventNames = function eventNames() {\n  \t\t  var names = []\n  \t\t    , events\n  \t\t    , name;\n\n  \t\t  if (this._eventsCount === 0) return names;\n\n  \t\t  for (name in (events = this._events)) {\n  \t\t    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  \t\t  }\n\n  \t\t  if (Object.getOwnPropertySymbols) {\n  \t\t    return names.concat(Object.getOwnPropertySymbols(events));\n  \t\t  }\n\n  \t\t  return names;\n  \t\t};\n\n  \t\t/**\n  \t\t * Return the listeners registered for a given event.\n  \t\t *\n  \t\t * @param {(String|Symbol)} event The event name.\n  \t\t * @returns {Array} The registered listeners.\n  \t\t * @public\n  \t\t */\n  \t\tEventEmitter.prototype.listeners = function listeners(event) {\n  \t\t  var evt = prefix ? prefix + event : event\n  \t\t    , handlers = this._events[evt];\n\n  \t\t  if (!handlers) return [];\n  \t\t  if (handlers.fn) return [handlers.fn];\n\n  \t\t  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n  \t\t    ee[i] = handlers[i].fn;\n  \t\t  }\n\n  \t\t  return ee;\n  \t\t};\n\n  \t\t/**\n  \t\t * Return the number of listeners listening to a given event.\n  \t\t *\n  \t\t * @param {(String|Symbol)} event The event name.\n  \t\t * @returns {Number} The number of listeners.\n  \t\t * @public\n  \t\t */\n  \t\tEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  \t\t  var evt = prefix ? prefix + event : event\n  \t\t    , listeners = this._events[evt];\n\n  \t\t  if (!listeners) return 0;\n  \t\t  if (listeners.fn) return 1;\n  \t\t  return listeners.length;\n  \t\t};\n\n  \t\t/**\n  \t\t * Calls each of the listeners registered for a given event.\n  \t\t *\n  \t\t * @param {(String|Symbol)} event The event name.\n  \t\t * @returns {Boolean} `true` if the event had listeners, else `false`.\n  \t\t * @public\n  \t\t */\n  \t\tEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  \t\t  var evt = prefix ? prefix + event : event;\n\n  \t\t  if (!this._events[evt]) return false;\n\n  \t\t  var listeners = this._events[evt]\n  \t\t    , len = arguments.length\n  \t\t    , args\n  \t\t    , i;\n\n  \t\t  if (listeners.fn) {\n  \t\t    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n  \t\t    switch (len) {\n  \t\t      case 1: return listeners.fn.call(listeners.context), true;\n  \t\t      case 2: return listeners.fn.call(listeners.context, a1), true;\n  \t\t      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n  \t\t      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n  \t\t      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n  \t\t      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n  \t\t    }\n\n  \t\t    for (i = 1, args = new Array(len -1); i < len; i++) {\n  \t\t      args[i - 1] = arguments[i];\n  \t\t    }\n\n  \t\t    listeners.fn.apply(listeners.context, args);\n  \t\t  } else {\n  \t\t    var length = listeners.length\n  \t\t      , j;\n\n  \t\t    for (i = 0; i < length; i++) {\n  \t\t      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n  \t\t      switch (len) {\n  \t\t        case 1: listeners[i].fn.call(listeners[i].context); break;\n  \t\t        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n  \t\t        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n  \t\t        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n  \t\t        default:\n  \t\t          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n  \t\t            args[j - 1] = arguments[j];\n  \t\t          }\n\n  \t\t          listeners[i].fn.apply(listeners[i].context, args);\n  \t\t      }\n  \t\t    }\n  \t\t  }\n\n  \t\t  return true;\n  \t\t};\n\n  \t\t/**\n  \t\t * Add a listener for a given event.\n  \t\t *\n  \t\t * @param {(String|Symbol)} event The event name.\n  \t\t * @param {Function} fn The listener function.\n  \t\t * @param {*} [context=this] The context to invoke the listener with.\n  \t\t * @returns {EventEmitter} `this`.\n  \t\t * @public\n  \t\t */\n  \t\tEventEmitter.prototype.on = function on(event, fn, context) {\n  \t\t  return addListener(this, event, fn, context, false);\n  \t\t};\n\n  \t\t/**\n  \t\t * Add a one-time listener for a given event.\n  \t\t *\n  \t\t * @param {(String|Symbol)} event The event name.\n  \t\t * @param {Function} fn The listener function.\n  \t\t * @param {*} [context=this] The context to invoke the listener with.\n  \t\t * @returns {EventEmitter} `this`.\n  \t\t * @public\n  \t\t */\n  \t\tEventEmitter.prototype.once = function once(event, fn, context) {\n  \t\t  return addListener(this, event, fn, context, true);\n  \t\t};\n\n  \t\t/**\n  \t\t * Remove the listeners of a given event.\n  \t\t *\n  \t\t * @param {(String|Symbol)} event The event name.\n  \t\t * @param {Function} fn Only remove the listeners that match this function.\n  \t\t * @param {*} context Only remove the listeners that have this context.\n  \t\t * @param {Boolean} once Only remove one-time listeners.\n  \t\t * @returns {EventEmitter} `this`.\n  \t\t * @public\n  \t\t */\n  \t\tEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  \t\t  var evt = prefix ? prefix + event : event;\n\n  \t\t  if (!this._events[evt]) return this;\n  \t\t  if (!fn) {\n  \t\t    clearEvent(this, evt);\n  \t\t    return this;\n  \t\t  }\n\n  \t\t  var listeners = this._events[evt];\n\n  \t\t  if (listeners.fn) {\n  \t\t    if (\n  \t\t      listeners.fn === fn &&\n  \t\t      (!once || listeners.once) &&\n  \t\t      (!context || listeners.context === context)\n  \t\t    ) {\n  \t\t      clearEvent(this, evt);\n  \t\t    }\n  \t\t  } else {\n  \t\t    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n  \t\t      if (\n  \t\t        listeners[i].fn !== fn ||\n  \t\t        (once && !listeners[i].once) ||\n  \t\t        (context && listeners[i].context !== context)\n  \t\t      ) {\n  \t\t        events.push(listeners[i]);\n  \t\t      }\n  \t\t    }\n\n  \t\t    //\n  \t\t    // Reset the array, or remove it completely if we have no more listeners.\n  \t\t    //\n  \t\t    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n  \t\t    else clearEvent(this, evt);\n  \t\t  }\n\n  \t\t  return this;\n  \t\t};\n\n  \t\t/**\n  \t\t * Remove all listeners, or those of the specified event.\n  \t\t *\n  \t\t * @param {(String|Symbol)} [event] The event name.\n  \t\t * @returns {EventEmitter} `this`.\n  \t\t * @public\n  \t\t */\n  \t\tEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  \t\t  var evt;\n\n  \t\t  if (event) {\n  \t\t    evt = prefix ? prefix + event : event;\n  \t\t    if (this._events[evt]) clearEvent(this, evt);\n  \t\t  } else {\n  \t\t    this._events = new Events();\n  \t\t    this._eventsCount = 0;\n  \t\t  }\n\n  \t\t  return this;\n  \t\t};\n\n  \t\t//\n  \t\t// Alias methods names because people roll like that.\n  \t\t//\n  \t\tEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n  \t\tEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  \t\t//\n  \t\t// Expose the prefix.\n  \t\t//\n  \t\tEventEmitter.prefixed = prefix;\n\n  \t\t//\n  \t\t// Allow `EventEmitter` to be imported as module namespace.\n  \t\t//\n  \t\tEventEmitter.EventEmitter = EventEmitter;\n\n  \t\t//\n  \t\t// Expose the module.\n  \t\t//\n  \t\t{\n  \t\t  module.exports = EventEmitter;\n  \t\t} \n  \t} (eventemitter3));\n  \treturn eventemitter3.exports;\n  }\n\n  var eventemitter3Exports = requireEventemitter3();\n  var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);\n\n  var urlToolkit = {exports: {}};\n\n  var hasRequiredUrlToolkit;\n\n  function requireUrlToolkit () {\n  \tif (hasRequiredUrlToolkit) return urlToolkit.exports;\n  \thasRequiredUrlToolkit = 1;\n  \t(function (module, exports) {\n  \t\t// see https://tools.ietf.org/html/rfc1808\n\n  \t\t(function (root) {\n  \t\t  var URL_REGEX =\n  \t\t    /^(?=((?:[a-zA-Z0-9+\\-.]+:)?))\\1(?=((?:\\/\\/[^\\/?#]*)?))\\2(?=((?:(?:[^?#\\/]*\\/)*[^;?#\\/]*)?))\\3((?:;[^?#]*)?)(\\?[^#]*)?(#[^]*)?$/;\n  \t\t  var FIRST_SEGMENT_REGEX = /^(?=([^\\/?#]*))\\1([^]*)$/;\n  \t\t  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  \t\t  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n\n  \t\t  var URLToolkit = {\n  \t\t    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n  \t\t    // E.g\n  \t\t    // With opts.alwaysNormalize = false (default, spec compliant)\n  \t\t    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n  \t\t    // With opts.alwaysNormalize = true (not spec compliant)\n  \t\t    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n  \t\t    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n  \t\t      opts = opts || {};\n  \t\t      // remove any remaining space and CRLF\n  \t\t      baseURL = baseURL.trim();\n  \t\t      relativeURL = relativeURL.trim();\n  \t\t      if (!relativeURL) {\n  \t\t        // 2a) If the embedded URL is entirely empty, it inherits the\n  \t\t        // entire base URL (i.e., is set equal to the base URL)\n  \t\t        // and we are done.\n  \t\t        if (!opts.alwaysNormalize) {\n  \t\t          return baseURL;\n  \t\t        }\n  \t\t        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n  \t\t        if (!basePartsForNormalise) {\n  \t\t          throw new Error('Error trying to parse base URL.');\n  \t\t        }\n  \t\t        basePartsForNormalise.path = URLToolkit.normalizePath(\n  \t\t          basePartsForNormalise.path\n  \t\t        );\n  \t\t        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n  \t\t      }\n  \t\t      var relativeParts = URLToolkit.parseURL(relativeURL);\n  \t\t      if (!relativeParts) {\n  \t\t        throw new Error('Error trying to parse relative URL.');\n  \t\t      }\n  \t\t      if (relativeParts.scheme) {\n  \t\t        // 2b) If the embedded URL starts with a scheme name, it is\n  \t\t        // interpreted as an absolute URL and we are done.\n  \t\t        if (!opts.alwaysNormalize) {\n  \t\t          return relativeURL;\n  \t\t        }\n  \t\t        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n  \t\t        return URLToolkit.buildURLFromParts(relativeParts);\n  \t\t      }\n  \t\t      var baseParts = URLToolkit.parseURL(baseURL);\n  \t\t      if (!baseParts) {\n  \t\t        throw new Error('Error trying to parse base URL.');\n  \t\t      }\n  \t\t      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n  \t\t        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n  \t\t        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n  \t\t        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n  \t\t        baseParts.netLoc = pathParts[1];\n  \t\t        baseParts.path = pathParts[2];\n  \t\t      }\n  \t\t      if (baseParts.netLoc && !baseParts.path) {\n  \t\t        baseParts.path = '/';\n  \t\t      }\n  \t\t      var builtParts = {\n  \t\t        // 2c) Otherwise, the embedded URL inherits the scheme of\n  \t\t        // the base URL.\n  \t\t        scheme: baseParts.scheme,\n  \t\t        netLoc: relativeParts.netLoc,\n  \t\t        path: null,\n  \t\t        params: relativeParts.params,\n  \t\t        query: relativeParts.query,\n  \t\t        fragment: relativeParts.fragment,\n  \t\t      };\n  \t\t      if (!relativeParts.netLoc) {\n  \t\t        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n  \t\t        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n  \t\t        // (if any) of the base URL.\n  \t\t        builtParts.netLoc = baseParts.netLoc;\n  \t\t        // 4) If the embedded URL path is preceded by a slash \"/\", the\n  \t\t        // path is not relative and we skip to Step 7.\n  \t\t        if (relativeParts.path[0] !== '/') {\n  \t\t          if (!relativeParts.path) {\n  \t\t            // 5) If the embedded URL path is empty (and not preceded by a\n  \t\t            // slash), then the embedded URL inherits the base URL path\n  \t\t            builtParts.path = baseParts.path;\n  \t\t            // 5a) if the embedded URL's <params> is non-empty, we skip to\n  \t\t            // step 7; otherwise, it inherits the <params> of the base\n  \t\t            // URL (if any) and\n  \t\t            if (!relativeParts.params) {\n  \t\t              builtParts.params = baseParts.params;\n  \t\t              // 5b) if the embedded URL's <query> is non-empty, we skip to\n  \t\t              // step 7; otherwise, it inherits the <query> of the base\n  \t\t              // URL (if any) and we skip to step 7.\n  \t\t              if (!relativeParts.query) {\n  \t\t                builtParts.query = baseParts.query;\n  \t\t              }\n  \t\t            }\n  \t\t          } else {\n  \t\t            // 6) The last segment of the base URL's path (anything\n  \t\t            // following the rightmost slash \"/\", or the entire path if no\n  \t\t            // slash is present) is removed and the embedded URL's path is\n  \t\t            // appended in its place.\n  \t\t            var baseURLPath = baseParts.path;\n  \t\t            var newPath =\n  \t\t              baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +\n  \t\t              relativeParts.path;\n  \t\t            builtParts.path = URLToolkit.normalizePath(newPath);\n  \t\t          }\n  \t\t        }\n  \t\t      }\n  \t\t      if (builtParts.path === null) {\n  \t\t        builtParts.path = opts.alwaysNormalize\n  \t\t          ? URLToolkit.normalizePath(relativeParts.path)\n  \t\t          : relativeParts.path;\n  \t\t      }\n  \t\t      return URLToolkit.buildURLFromParts(builtParts);\n  \t\t    },\n  \t\t    parseURL: function (url) {\n  \t\t      var parts = URL_REGEX.exec(url);\n  \t\t      if (!parts) {\n  \t\t        return null;\n  \t\t      }\n  \t\t      return {\n  \t\t        scheme: parts[1] || '',\n  \t\t        netLoc: parts[2] || '',\n  \t\t        path: parts[3] || '',\n  \t\t        params: parts[4] || '',\n  \t\t        query: parts[5] || '',\n  \t\t        fragment: parts[6] || '',\n  \t\t      };\n  \t\t    },\n  \t\t    normalizePath: function (path) {\n  \t\t      // The following operations are\n  \t\t      // then applied, in order, to the new path:\n  \t\t      // 6a) All occurrences of \"./\", where \".\" is a complete path\n  \t\t      // segment, are removed.\n  \t\t      // 6b) If the path ends with \".\" as a complete path segment,\n  \t\t      // that \".\" is removed.\n  \t\t      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n  \t\t      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n  \t\t      // complete path segment not equal to \"..\", are removed.\n  \t\t      // Removal of these path segments is performed iteratively,\n  \t\t      // removing the leftmost matching pattern on each iteration,\n  \t\t      // until no matching pattern remains.\n  \t\t      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n  \t\t      // complete path segment not equal to \"..\", that\n  \t\t      // \"<segment>/..\" is removed.\n  \t\t      while (\n  \t\t        path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length\n  \t\t      ) {}\n  \t\t      return path.split('').reverse().join('');\n  \t\t    },\n  \t\t    buildURLFromParts: function (parts) {\n  \t\t      return (\n  \t\t        parts.scheme +\n  \t\t        parts.netLoc +\n  \t\t        parts.path +\n  \t\t        parts.params +\n  \t\t        parts.query +\n  \t\t        parts.fragment\n  \t\t      );\n  \t\t    },\n  \t\t  };\n\n  \t\t  module.exports = URLToolkit;\n  \t\t})(); \n  \t} (urlToolkit));\n  \treturn urlToolkit.exports;\n  }\n\n  var urlToolkitExports = requireUrlToolkit();\n\n  // https://caniuse.com/mdn-javascript_builtins_number_isfinite\n  var isFiniteNumber = Number.isFinite || function (value) {\n    return typeof value === 'number' && isFinite(value);\n  };\n\n  // https://caniuse.com/mdn-javascript_builtins_number_issafeinteger\n  var isSafeInteger = Number.isSafeInteger || function (value) {\n    return typeof value === 'number' && Math.abs(value) <= MAX_SAFE_INTEGER;\n  };\n  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\n  var ErrorTypes = /*#__PURE__*/function (ErrorTypes) {\n    // Identifier for a network error (loading error / timeout ...)\n    ErrorTypes[\"NETWORK_ERROR\"] = \"networkError\";\n    // Identifier for a media Error (video/parsing/mediasource error)\n    ErrorTypes[\"MEDIA_ERROR\"] = \"mediaError\";\n    // EME (encrypted media extensions) errors\n    ErrorTypes[\"KEY_SYSTEM_ERROR\"] = \"keySystemError\";\n    // Identifier for a mux Error (demuxing/remuxing)\n    ErrorTypes[\"MUX_ERROR\"] = \"muxError\";\n    // Identifier for all other errors\n    ErrorTypes[\"OTHER_ERROR\"] = \"otherError\";\n    return ErrorTypes;\n  }({});\n  var ErrorDetails = /*#__PURE__*/function (ErrorDetails) {\n    ErrorDetails[\"KEY_SYSTEM_NO_KEYS\"] = \"keySystemNoKeys\";\n    ErrorDetails[\"KEY_SYSTEM_NO_ACCESS\"] = \"keySystemNoAccess\";\n    ErrorDetails[\"KEY_SYSTEM_NO_SESSION\"] = \"keySystemNoSession\";\n    ErrorDetails[\"KEY_SYSTEM_NO_CONFIGURED_LICENSE\"] = \"keySystemNoConfiguredLicense\";\n    ErrorDetails[\"KEY_SYSTEM_LICENSE_REQUEST_FAILED\"] = \"keySystemLicenseRequestFailed\";\n    ErrorDetails[\"KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED\"] = \"keySystemServerCertificateRequestFailed\";\n    ErrorDetails[\"KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED\"] = \"keySystemServerCertificateUpdateFailed\";\n    ErrorDetails[\"KEY_SYSTEM_SESSION_UPDATE_FAILED\"] = \"keySystemSessionUpdateFailed\";\n    ErrorDetails[\"KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED\"] = \"keySystemStatusOutputRestricted\";\n    ErrorDetails[\"KEY_SYSTEM_STATUS_INTERNAL_ERROR\"] = \"keySystemStatusInternalError\";\n    ErrorDetails[\"KEY_SYSTEM_DESTROY_MEDIA_KEYS_ERROR\"] = \"keySystemDestroyMediaKeysError\";\n    ErrorDetails[\"KEY_SYSTEM_DESTROY_CLOSE_SESSION_ERROR\"] = \"keySystemDestroyCloseSessionError\";\n    ErrorDetails[\"KEY_SYSTEM_DESTROY_REMOVE_SESSION_ERROR\"] = \"keySystemDestroyRemoveSessionError\";\n    // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n    ErrorDetails[\"MANIFEST_LOAD_ERROR\"] = \"manifestLoadError\";\n    // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n    ErrorDetails[\"MANIFEST_LOAD_TIMEOUT\"] = \"manifestLoadTimeOut\";\n    // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}\n    ErrorDetails[\"MANIFEST_PARSING_ERROR\"] = \"manifestParsingError\";\n    // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}\n    ErrorDetails[\"MANIFEST_INCOMPATIBLE_CODECS_ERROR\"] = \"manifestIncompatibleCodecsError\";\n    // Identifier for a level which contains no fragments - data: { url: faulty URL, reason: \"no fragments found in level\", level: index of the bad level }\n    ErrorDetails[\"LEVEL_EMPTY_ERROR\"] = \"levelEmptyError\";\n    // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n    ErrorDetails[\"LEVEL_LOAD_ERROR\"] = \"levelLoadError\";\n    // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n    ErrorDetails[\"LEVEL_LOAD_TIMEOUT\"] = \"levelLoadTimeOut\";\n    // Identifier for a level parse error - data: { url : faulty URL, error: Error, reason: error message }\n    ErrorDetails[\"LEVEL_PARSING_ERROR\"] = \"levelParsingError\";\n    // Identifier for a level switch error - data: { level : faulty level Id, event : error description}\n    ErrorDetails[\"LEVEL_SWITCH_ERROR\"] = \"levelSwitchError\";\n    // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n    ErrorDetails[\"AUDIO_TRACK_LOAD_ERROR\"] = \"audioTrackLoadError\";\n    // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n    ErrorDetails[\"AUDIO_TRACK_LOAD_TIMEOUT\"] = \"audioTrackLoadTimeOut\";\n    // Identifier for a subtitle track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n    ErrorDetails[\"SUBTITLE_LOAD_ERROR\"] = \"subtitleTrackLoadError\";\n    // Identifier for a subtitle track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n    ErrorDetails[\"SUBTITLE_TRACK_LOAD_TIMEOUT\"] = \"subtitleTrackLoadTimeOut\";\n    // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n    ErrorDetails[\"FRAG_LOAD_ERROR\"] = \"fragLoadError\";\n    // Identifier for fragment load timeout error - data: { frag : fragment object}\n    ErrorDetails[\"FRAG_LOAD_TIMEOUT\"] = \"fragLoadTimeOut\";\n    // Identifier for a fragment decryption error event - data: {id : demuxer Id,frag: fragment object, reason : parsing error description }\n    ErrorDetails[\"FRAG_DECRYPT_ERROR\"] = \"fragDecryptError\";\n    // Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }\n    // will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release\n    ErrorDetails[\"FRAG_PARSING_ERROR\"] = \"fragParsingError\";\n    // Identifier for a fragment or part load skipped because of a GAP tag or attribute\n    ErrorDetails[\"FRAG_GAP\"] = \"fragGap\";\n    // Identifier for a remux alloc error event - data: { id : demuxer Id, frag : fragment object, bytes : nb of bytes on which allocation failed , reason : error text }\n    ErrorDetails[\"REMUX_ALLOC_ERROR\"] = \"remuxAllocError\";\n    // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n    ErrorDetails[\"KEY_LOAD_ERROR\"] = \"keyLoadError\";\n    // Identifier for decrypt key load timeout error - data: { frag : fragment object}\n    ErrorDetails[\"KEY_LOAD_TIMEOUT\"] = \"keyLoadTimeOut\";\n    // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : { error : exception , mimeType : mimeType }\n    ErrorDetails[\"BUFFER_ADD_CODEC_ERROR\"] = \"bufferAddCodecError\";\n    // Triggered when source buffer(s) could not be created using level (manifest CODECS attribute), parsed media, or best guess codec(s) - data: { reason : error reason }\n    ErrorDetails[\"BUFFER_INCOMPATIBLE_CODECS_ERROR\"] = \"bufferIncompatibleCodecsError\";\n    // Identifier for a buffer append error - data: append error description\n    ErrorDetails[\"BUFFER_APPEND_ERROR\"] = \"bufferAppendError\";\n    // Identifier for a buffer appending error event - data: appending error description\n    ErrorDetails[\"BUFFER_APPENDING_ERROR\"] = \"bufferAppendingError\";\n    // Identifier for a buffer stalled error event\n    ErrorDetails[\"BUFFER_STALLED_ERROR\"] = \"bufferStalledError\";\n    // Identifier for a buffer full event\n    ErrorDetails[\"BUFFER_FULL_ERROR\"] = \"bufferFullError\";\n    // Identifier for a buffer seek over hole event\n    ErrorDetails[\"BUFFER_SEEK_OVER_HOLE\"] = \"bufferSeekOverHole\";\n    // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)\n    ErrorDetails[\"BUFFER_NUDGE_ON_STALL\"] = \"bufferNudgeOnStall\";\n    // Identifier for a Interstitial Asset List load error - data: { url: faulty URL, response: { code: error code, text: error text } }\n    ErrorDetails[\"ASSET_LIST_LOAD_ERROR\"] = \"assetListLoadError\";\n    // Identifier for a Interstitial Asset List load timeout - data: { url: faulty URL, response: { code: error code, text: error text } }\n    ErrorDetails[\"ASSET_LIST_LOAD_TIMEOUT\"] = \"assetListLoadTimeout\";\n    // Identifier for a Interstitial Asset List parsing error - data: { url : faulty URL, reason : error reason, response : { code: error code, text: error text }}\n    ErrorDetails[\"ASSET_LIST_PARSING_ERROR\"] = \"assetListParsingError\";\n    // Identifier for a Interstitial Asset List parsing error - data: { url : faulty URL, reason : error reason, response : { code: error code, text: error text }}\n    ErrorDetails[\"INTERSTITIAL_ASSET_ITEM_ERROR\"] = \"interstitialAssetItemError\";\n    // Identifier for an internal exception happening inside hls.js while handling an event\n    ErrorDetails[\"INTERNAL_EXCEPTION\"] = \"internalException\";\n    // Identifier for an internal call to abort a loader\n    ErrorDetails[\"INTERNAL_ABORTED\"] = \"aborted\";\n    // Triggered when attachMedia fails\n    ErrorDetails[\"ATTACH_MEDIA_ERROR\"] = \"attachMediaError\";\n    // Uncategorized error\n    ErrorDetails[\"UNKNOWN\"] = \"unknown\";\n    return ErrorDetails;\n  }({});\n\n  var Events = /*#__PURE__*/function (Events) {\n    // Fired before MediaSource is attaching to media element\n    Events[\"MEDIA_ATTACHING\"] = \"hlsMediaAttaching\";\n    // Fired when MediaSource has been successfully attached to media element\n    Events[\"MEDIA_ATTACHED\"] = \"hlsMediaAttached\";\n    // Fired before detaching MediaSource from media element\n    Events[\"MEDIA_DETACHING\"] = \"hlsMediaDetaching\";\n    // Fired when MediaSource has been detached from media element\n    Events[\"MEDIA_DETACHED\"] = \"hlsMediaDetached\";\n    // Fired when HTMLMediaElement dispatches \"ended\" event, or stalls at end of VOD program\n    Events[\"MEDIA_ENDED\"] = \"hlsMediaEnded\";\n    // Fired after playback stall is resolved with playing, seeked, or ended event following BUFFER_STALLED_ERROR\n    Events[\"STALL_RESOLVED\"] = \"hlsStallResolved\";\n    // Fired when the buffer is going to be reset\n    Events[\"BUFFER_RESET\"] = \"hlsBufferReset\";\n    // Fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}\n    Events[\"BUFFER_CODECS\"] = \"hlsBufferCodecs\";\n    // fired when sourcebuffers have been created - data: { tracks : tracks }\n    Events[\"BUFFER_CREATED\"] = \"hlsBufferCreated\";\n    // fired when we append a segment to the buffer - data: { segment: segment object }\n    Events[\"BUFFER_APPENDING\"] = \"hlsBufferAppending\";\n    // fired when we are done with appending a media segment to the buffer - data : { parent : segment parent that triggered BUFFER_APPENDING, pending : nb of segments waiting for appending for this segment parent}\n    Events[\"BUFFER_APPENDED\"] = \"hlsBufferAppended\";\n    // fired when the stream is finished and we want to notify the media buffer that there will be no more data - data: { }\n    Events[\"BUFFER_EOS\"] = \"hlsBufferEos\";\n    // fired when all buffers are full to the end of the program, after calling MediaSource.endOfStream() (unless restricted)\n    Events[\"BUFFERED_TO_END\"] = \"hlsBufferedToEnd\";\n    // fired when the media buffer should be flushed - data { startOffset, endOffset }\n    Events[\"BUFFER_FLUSHING\"] = \"hlsBufferFlushing\";\n    // fired when the media buffer has been flushed - data: { }\n    Events[\"BUFFER_FLUSHED\"] = \"hlsBufferFlushed\";\n    // fired to signal that a manifest loading starts - data: { url : manifestURL}\n    Events[\"MANIFEST_LOADING\"] = \"hlsManifestLoading\";\n    // fired after manifest has been loaded - data: { levels : [available quality levels], audioTracks : [ available audio tracks ], url : manifestURL, stats : LoaderStats }\n    Events[\"MANIFEST_LOADED\"] = \"hlsManifestLoaded\";\n    // fired after manifest has been parsed - data: { levels : [available quality levels], firstLevel : index of first quality level appearing in Manifest}\n    Events[\"MANIFEST_PARSED\"] = \"hlsManifestParsed\";\n    // fired when a level switch is requested - data: { level : id of new level }\n    Events[\"LEVEL_SWITCHING\"] = \"hlsLevelSwitching\";\n    // fired when a level switch is effective - data: { level : id of new level }\n    Events[\"LEVEL_SWITCHED\"] = \"hlsLevelSwitched\";\n    // fired when a level playlist loading starts - data: { url : level URL, level : id of level being loaded}\n    Events[\"LEVEL_LOADING\"] = \"hlsLevelLoading\";\n    // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : LoaderStats }\n    Events[\"LEVEL_LOADED\"] = \"hlsLevelLoaded\";\n    // fired when a level's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, level : id of updated level }\n    Events[\"LEVEL_UPDATED\"] = \"hlsLevelUpdated\";\n    // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }\n    Events[\"LEVEL_PTS_UPDATED\"] = \"hlsLevelPtsUpdated\";\n    // fired to notify that levels have changed after removing a level - data: { levels : [available quality levels] }\n    Events[\"LEVELS_UPDATED\"] = \"hlsLevelsUpdated\";\n    // fired to notify that audio track lists has been updated - data: { audioTracks : audioTracks }\n    Events[\"AUDIO_TRACKS_UPDATED\"] = \"hlsAudioTracksUpdated\";\n    // fired when an audio track switching is requested - data: { id : audio track id }\n    Events[\"AUDIO_TRACK_SWITCHING\"] = \"hlsAudioTrackSwitching\";\n    // fired when an audio track switch actually occurs - data: { id : audio track id }\n    Events[\"AUDIO_TRACK_SWITCHED\"] = \"hlsAudioTrackSwitched\";\n    // fired when an audio track loading starts - data: { url : audio track URL, id : audio track id }\n    Events[\"AUDIO_TRACK_LOADING\"] = \"hlsAudioTrackLoading\";\n    // fired when an audio track loading finishes - data: { details : levelDetails object, id : audio track id, stats : LoaderStats }\n    Events[\"AUDIO_TRACK_LOADED\"] = \"hlsAudioTrackLoaded\";\n    // fired when an audio tracks's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, id : track id }\n    Events[\"AUDIO_TRACK_UPDATED\"] = \"hlsAudioTrackUpdated\";\n    // fired to notify that subtitle track lists has been updated - data: { subtitleTracks : subtitleTracks }\n    Events[\"SUBTITLE_TRACKS_UPDATED\"] = \"hlsSubtitleTracksUpdated\";\n    // fired to notify that subtitle tracks were cleared as a result of stopping the media\n    Events[\"SUBTITLE_TRACKS_CLEARED\"] = \"hlsSubtitleTracksCleared\";\n    // fired when an subtitle track switch occurs - data: { id : subtitle track id }\n    Events[\"SUBTITLE_TRACK_SWITCH\"] = \"hlsSubtitleTrackSwitch\";\n    // fired when a subtitle track loading starts - data: { url : subtitle track URL, id : subtitle track id }\n    Events[\"SUBTITLE_TRACK_LOADING\"] = \"hlsSubtitleTrackLoading\";\n    // fired when a subtitle track loading finishes - data: { details : levelDetails object, id : subtitle track id, stats : LoaderStats }\n    Events[\"SUBTITLE_TRACK_LOADED\"] = \"hlsSubtitleTrackLoaded\";\n    // fired when a subtitle  racks's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, id : track id }\n    Events[\"SUBTITLE_TRACK_UPDATED\"] = \"hlsSubtitleTrackUpdated\";\n    // fired when a subtitle fragment has been processed - data: { success : boolean, frag : the processed frag }\n    Events[\"SUBTITLE_FRAG_PROCESSED\"] = \"hlsSubtitleFragProcessed\";\n    // fired when a set of VTTCues to be managed externally has been parsed - data: { type: string, track: string, cues: [ VTTCue ] }\n    Events[\"CUES_PARSED\"] = \"hlsCuesParsed\";\n    // fired when a text track to be managed externally is found - data: { tracks: [ { label: string, kind: string, default: boolean } ] }\n    Events[\"NON_NATIVE_TEXT_TRACKS_FOUND\"] = \"hlsNonNativeTextTracksFound\";\n    // fired when the first timestamp is found - data: { id : demuxer id, initPTS: initPTS, timescale: timescale, frag : fragment object }\n    Events[\"INIT_PTS_FOUND\"] = \"hlsInitPtsFound\";\n    // fired when a fragment loading starts - data: { frag : fragment object }\n    Events[\"FRAG_LOADING\"] = \"hlsFragLoading\";\n    // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded } }\n    // FRAG_LOAD_PROGRESS = 'hlsFragLoadProgress',\n    // Identifier for fragment load aborting for emergency switch down - data: { frag : fragment object }\n    Events[\"FRAG_LOAD_EMERGENCY_ABORTED\"] = \"hlsFragLoadEmergencyAborted\";\n    // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : LoaderStats }\n    Events[\"FRAG_LOADED\"] = \"hlsFragLoaded\";\n    // fired when a fragment has finished decrypting - data: { id : demuxer id, frag: fragment object, payload : fragment payload, stats : { tstart, tdecrypt } }\n    Events[\"FRAG_DECRYPTED\"] = \"hlsFragDecrypted\";\n    // fired when Init Segment has been extracted from fragment - data: { id : demuxer id, frag: fragment object, moov : moov MP4 box, codecs : codecs found while parsing fragment }\n    Events[\"FRAG_PARSING_INIT_SEGMENT\"] = \"hlsFragParsingInitSegment\";\n    // fired when parsing sei text is completed - data: { id : demuxer id, frag: fragment object, samples : [ sei samples pes ] }\n    Events[\"FRAG_PARSING_USERDATA\"] = \"hlsFragParsingUserdata\";\n    // fired when parsing id3 is completed - data: { id : demuxer id, frag: fragment object, samples : [ id3 samples pes ] }\n    Events[\"FRAG_PARSING_METADATA\"] = \"hlsFragParsingMetadata\";\n    // fired when data have been extracted from fragment - data: { id : demuxer id, frag: fragment object, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}\n    // FRAG_PARSING_DATA = 'hlsFragParsingData',\n    // fired when fragment parsing is completed - data: { id : demuxer id, frag: fragment object }\n    Events[\"FRAG_PARSED\"] = \"hlsFragParsed\";\n    // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id, frag : fragment object, stats : LoaderStats }\n    Events[\"FRAG_BUFFERED\"] = \"hlsFragBuffered\";\n    // fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }\n    Events[\"FRAG_CHANGED\"] = \"hlsFragChanged\";\n    // Identifier for a FPS drop event - data: { currentDropped, currentDecoded, totalDroppedFrames }\n    Events[\"FPS_DROP\"] = \"hlsFpsDrop\";\n    // triggered when FPS drop triggers auto level capping - data: { level, droppedLevel }\n    Events[\"FPS_DROP_LEVEL_CAPPING\"] = \"hlsFpsDropLevelCapping\";\n    // triggered when maxAutoLevel changes - data { autoLevelCapping, levels, maxAutoLevel, minAutoLevel, maxHdcpLevel }\n    Events[\"MAX_AUTO_LEVEL_UPDATED\"] = \"hlsMaxAutoLevelUpdated\";\n    // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }\n    Events[\"ERROR\"] = \"hlsError\";\n    // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example - data: { }\n    Events[\"DESTROYING\"] = \"hlsDestroying\";\n    // fired when a decrypt key loading starts - data: { frag : fragment object }\n    Events[\"KEY_LOADING\"] = \"hlsKeyLoading\";\n    // fired when a decrypt key loading is completed - data: { frag : fragment object, keyInfo : KeyLoaderInfo }\n    Events[\"KEY_LOADED\"] = \"hlsKeyLoaded\";\n    // deprecated; please use BACK_BUFFER_REACHED - data : { bufferEnd: number }\n    Events[\"LIVE_BACK_BUFFER_REACHED\"] = \"hlsLiveBackBufferReached\";\n    // fired when the back buffer is reached as defined by the backBufferLength config option - data : { bufferEnd: number }\n    Events[\"BACK_BUFFER_REACHED\"] = \"hlsBackBufferReached\";\n    // fired after steering manifest has been loaded - data: { steeringManifest: SteeringManifest object, url: steering manifest URL }\n    Events[\"STEERING_MANIFEST_LOADED\"] = \"hlsSteeringManifestLoaded\";\n    // fired when asset list has begun loading\n    Events[\"ASSET_LIST_LOADING\"] = \"hlsAssetListLoading\";\n    // fired when a valid asset list is loaded\n    Events[\"ASSET_LIST_LOADED\"] = \"hlsAssetListLoaded\";\n    // fired when the list of Interstitial Events and Interstitial Schedule is updated\n    Events[\"INTERSTITIALS_UPDATED\"] = \"hlsInterstitialsUpdated\";\n    // fired when the buffer reaches an Interstitial Schedule boundary (both Primary segments and Interstitial Assets)\n    Events[\"INTERSTITIALS_BUFFERED_TO_BOUNDARY\"] = \"hlsInterstitialsBufferedToBoundary\";\n    // fired when a player instance for an Interstitial Asset has been created\n    Events[\"INTERSTITIAL_ASSET_PLAYER_CREATED\"] = \"hlsInterstitialAssetPlayerCreated\";\n    // Interstitial playback started\n    Events[\"INTERSTITIAL_STARTED\"] = \"hlsInterstitialStarted\";\n    // InterstitialAsset playback started\n    Events[\"INTERSTITIAL_ASSET_STARTED\"] = \"hlsInterstitialAssetStarted\";\n    // InterstitialAsset playback ended\n    Events[\"INTERSTITIAL_ASSET_ENDED\"] = \"hlsInterstitialAssetEnded\";\n    // InterstitialAsset playback errored\n    Events[\"INTERSTITIAL_ASSET_ERROR\"] = \"hlsInterstitialAssetError\";\n    // Interstitial playback ended\n    Events[\"INTERSTITIAL_ENDED\"] = \"hlsInterstitialEnded\";\n    // Interstitial schedule resumed primary playback\n    Events[\"INTERSTITIALS_PRIMARY_RESUMED\"] = \"hlsInterstitialsPrimaryResumed\";\n    // Interstitial players dispatch this event when playout limit is reached\n    Events[\"PLAYOUT_LIMIT_REACHED\"] = \"hlsPlayoutLimitReached\";\n    // Event DateRange cue \"enter\" event dispatched\n    Events[\"EVENT_CUE_ENTER\"] = \"hlsEventCueEnter\";\n    return Events;\n  }({});\n\n  /**\n   * Defines each Event type and payload by Event name. Used in {@link hls.js#HlsEventEmitter} to strongly type the event listener API.\n   */\n\n  var PlaylistContextType = {\n    MANIFEST: \"manifest\",\n    LEVEL: \"level\",\n    AUDIO_TRACK: \"audioTrack\",\n    SUBTITLE_TRACK: \"subtitleTrack\"\n  };\n  var PlaylistLevelType = {\n    MAIN: \"main\",\n    AUDIO: \"audio\",\n    SUBTITLE: \"subtitle\"\n  };\n\n  /*\n   * compute an Exponential Weighted moving average\n   * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n   *  - heavily inspired from shaka-player\n   */\n  var EWMA = /*#__PURE__*/function () {\n    //  About half of the estimated value will be from the last |halfLife| samples by weight.\n    function EWMA(halfLife, estimate, weight) {\n      if (estimate === void 0) {\n        estimate = 0;\n      }\n      if (weight === void 0) {\n        weight = 0;\n      }\n      this.halfLife = void 0;\n      this.alpha_ = void 0;\n      this.estimate_ = void 0;\n      this.totalWeight_ = void 0;\n      this.halfLife = halfLife;\n      // Larger values of alpha expire historical data more slowly.\n      this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;\n      this.estimate_ = estimate;\n      this.totalWeight_ = weight;\n    }\n    var _proto = EWMA.prototype;\n    _proto.sample = function sample(weight, value) {\n      var adjAlpha = Math.pow(this.alpha_, weight);\n      this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;\n      this.totalWeight_ += weight;\n    };\n    _proto.getTotalWeight = function getTotalWeight() {\n      return this.totalWeight_;\n    };\n    _proto.getEstimate = function getEstimate() {\n      if (this.alpha_) {\n        var zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);\n        if (zeroFactor) {\n          return this.estimate_ / zeroFactor;\n        }\n      }\n      return this.estimate_;\n    };\n    return EWMA;\n  }();\n\n  var EwmaBandWidthEstimator = /*#__PURE__*/function () {\n    function EwmaBandWidthEstimator(slow, fast, defaultEstimate, defaultTTFB) {\n      if (defaultTTFB === void 0) {\n        defaultTTFB = 100;\n      }\n      this.defaultEstimate_ = void 0;\n      this.minWeight_ = void 0;\n      this.minDelayMs_ = void 0;\n      this.slow_ = void 0;\n      this.fast_ = void 0;\n      this.defaultTTFB_ = void 0;\n      this.ttfb_ = void 0;\n      this.defaultEstimate_ = defaultEstimate;\n      this.minWeight_ = 0.001;\n      this.minDelayMs_ = 50;\n      this.slow_ = new EWMA(slow);\n      this.fast_ = new EWMA(fast);\n      this.defaultTTFB_ = defaultTTFB;\n      this.ttfb_ = new EWMA(slow);\n    }\n    var _proto = EwmaBandWidthEstimator.prototype;\n    _proto.update = function update(slow, fast) {\n      var slow_ = this.slow_,\n        fast_ = this.fast_,\n        ttfb_ = this.ttfb_;\n      if (slow_.halfLife !== slow) {\n        this.slow_ = new EWMA(slow, slow_.getEstimate(), slow_.getTotalWeight());\n      }\n      if (fast_.halfLife !== fast) {\n        this.fast_ = new EWMA(fast, fast_.getEstimate(), fast_.getTotalWeight());\n      }\n      if (ttfb_.halfLife !== slow) {\n        this.ttfb_ = new EWMA(slow, ttfb_.getEstimate(), ttfb_.getTotalWeight());\n      }\n    };\n    _proto.sample = function sample(durationMs, numBytes) {\n      durationMs = Math.max(durationMs, this.minDelayMs_);\n      var numBits = 8 * numBytes;\n      // weight is duration in seconds\n      var durationS = durationMs / 1000;\n      // value is bandwidth in bits/s\n      var bandwidthInBps = numBits / durationS;\n      this.fast_.sample(durationS, bandwidthInBps);\n      this.slow_.sample(durationS, bandwidthInBps);\n    };\n    _proto.sampleTTFB = function sampleTTFB(ttfb) {\n      // weight is frequency curve applied to TTFB in seconds\n      // (longer times have less weight with expected input under 1 second)\n      var seconds = ttfb / 1000;\n      var weight = Math.sqrt(2) * Math.exp(-Math.pow(seconds, 2) / 2);\n      this.ttfb_.sample(weight, Math.max(ttfb, 5));\n    };\n    _proto.canEstimate = function canEstimate() {\n      return this.fast_.getTotalWeight() >= this.minWeight_;\n    };\n    _proto.getEstimate = function getEstimate() {\n      if (this.canEstimate()) {\n        // console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));\n        // console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));\n        // Take the minimum of these two estimates.  This should have the effect of\n        // adapting down quickly, but up more slowly.\n        return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());\n      } else {\n        return this.defaultEstimate_;\n      }\n    };\n    _proto.getEstimateTTFB = function getEstimateTTFB() {\n      if (this.ttfb_.getTotalWeight() >= this.minWeight_) {\n        return this.ttfb_.getEstimate();\n      } else {\n        return this.defaultTTFB_;\n      }\n    };\n    _proto.destroy = function destroy() {};\n    return _createClass(EwmaBandWidthEstimator, [{\n      key: \"defaultEstimate\",\n      get: function get() {\n        return this.defaultEstimate_;\n      }\n    }]);\n  }();\n\n  var Logger = function Logger(label, logger) {\n    this.trace = void 0;\n    this.debug = void 0;\n    this.log = void 0;\n    this.warn = void 0;\n    this.info = void 0;\n    this.error = void 0;\n    var lb = \"[\" + label + \"]:\";\n    this.trace = noop;\n    this.debug = logger.debug.bind(null, lb);\n    this.log = logger.log.bind(null, lb);\n    this.warn = logger.warn.bind(null, lb);\n    this.info = logger.info.bind(null, lb);\n    this.error = logger.error.bind(null, lb);\n  };\n  var noop = function noop() {};\n  var fakeLogger = {\n    trace: noop,\n    debug: noop,\n    log: noop,\n    warn: noop,\n    info: noop,\n    error: noop\n  };\n  function createLogger() {\n    return _extends({}, fakeLogger);\n  }\n\n  // let lastCallTime;\n  // function formatMsgWithTimeInfo(type, msg) {\n  //   const now = Date.now();\n  //   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';\n  //   lastCallTime = now;\n  //   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';\n  //   return msg;\n  // }\n\n  function consolePrintFn(type, id) {\n    var func = self.console[type];\n    return func ? func.bind(self.console, (id ? '[' + id + '] ' : '') + \"[\" + type + \"] >\") : noop;\n  }\n  function getLoggerFn(key, debugConfig, id) {\n    return debugConfig[key] ? debugConfig[key].bind(debugConfig) : consolePrintFn(key, id);\n  }\n  var exportedLogger = createLogger();\n  function enableLogs(debugConfig, context, id) {\n    // check that console is available\n    var newLogger = createLogger();\n    if (typeof console === 'object' && debugConfig === true || typeof debugConfig === 'object') {\n      var keys = [\n      // Remove out from list here to hard-disable a log-level\n      // 'trace',\n      'debug', 'log', 'info', 'warn', 'error'];\n      keys.forEach(function (key) {\n        newLogger[key] = getLoggerFn(key, debugConfig, id);\n      });\n      // Some browsers don't allow to use bind on console object anyway\n      // fallback to default if needed\n      try {\n        newLogger.log(\"Debug logs enabled for \\\"\" + context + \"\\\" in hls.js version \" + \"1.6.5\");\n      } catch (e) {\n        /* log fn threw an exception. All logger methods are no-ops. */\n        return createLogger();\n      }\n      // global exported logger uses the same functions as new logger without `id`\n      keys.forEach(function (key) {\n        exportedLogger[key] = getLoggerFn(key, debugConfig);\n      });\n    } else {\n      // Reset global exported logger\n      _extends(exportedLogger, newLogger);\n    }\n    return newLogger;\n  }\n  var logger = exportedLogger;\n\n  function getMediaSource(preferManagedMediaSource) {\n    if (preferManagedMediaSource === void 0) {\n      preferManagedMediaSource = true;\n    }\n    if (typeof self === 'undefined') return undefined;\n    var mms = (preferManagedMediaSource || !self.MediaSource) && self.ManagedMediaSource;\n    return mms || self.MediaSource || self.WebKitMediaSource;\n  }\n  function isManagedMediaSource(source) {\n    return typeof self !== 'undefined' && source === self.ManagedMediaSource;\n  }\n  function isCompatibleTrackChange(currentTracks, requiredTracks) {\n    var trackNames = Object.keys(currentTracks);\n    var requiredTrackNames = Object.keys(requiredTracks);\n    var trackCount = trackNames.length;\n    var requiredTrackCount = requiredTrackNames.length;\n    return !trackCount || !requiredTrackCount || trackCount === requiredTrackCount && !trackNames.some(function (name) {\n      return requiredTrackNames.indexOf(name) === -1;\n    });\n  }\n\n  // http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197\n  // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\n  /* utf.js - UTF-8 <=> UTF-16 convertion\n   *\n   * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n   * Version: 1.0\n   * LastModified: Dec 25 1999\n   * This library is free.  You can redistribute it and/or modify it.\n   */\n  /**\n   * Converts a UTF-8 array to a string.\n   *\n   * @param array - The UTF-8 array to convert\n   *\n   * @returns The string\n   *\n   * @group Utils\n   *\n   * @beta\n   */\n  function utf8ArrayToStr(array, exitOnNull) {\n    if (exitOnNull === void 0) {\n      exitOnNull = false;\n    }\n    if (typeof TextDecoder !== 'undefined') {\n      var decoder = new TextDecoder('utf-8');\n      var decoded = decoder.decode(array);\n      if (exitOnNull) {\n        // grab up to the first null\n        var idx = decoded.indexOf('\\0');\n        return idx !== -1 ? decoded.substring(0, idx) : decoded;\n      }\n      // remove any null characters\n      return decoded.replace(/\\0/g, '');\n    }\n    var len = array.length;\n    var c;\n    var char2;\n    var char3;\n    var out = '';\n    var i = 0;\n    while (i < len) {\n      c = array[i++];\n      if (c === 0x00 && exitOnNull) {\n        return out;\n      } else if (c === 0x00 || c === 0x03) {\n        // If the character is 3 (END_OF_TEXT) or 0 (NULL) then skip it\n        continue;\n      }\n      switch (c >> 4) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c);\n          break;\n        case 12:\n        case 13:\n          // 110x xxxx   10xx xxxx\n          char2 = array[i++];\n          out += String.fromCharCode((c & 0x1f) << 6 | char2 & 0x3f);\n          break;\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          char2 = array[i++];\n          char3 = array[i++];\n          out += String.fromCharCode((c & 0x0f) << 12 | (char2 & 0x3f) << 6 | (char3 & 0x3f) << 0);\n          break;\n      }\n    }\n    return out;\n  }\n\n  /**\n   *  hex dump helper class\n   */\n\n  var Hex = {\n    hexDump: function hexDump(array) {\n      var str = '';\n      for (var i = 0; i < array.length; i++) {\n        var h = array[i].toString(16);\n        if (h.length < 2) {\n          h = '0' + h;\n        }\n        str += h;\n      }\n      return str;\n    }\n  };\n\n  var LoadStats = function LoadStats() {\n    this.aborted = false;\n    this.loaded = 0;\n    this.retry = 0;\n    this.total = 0;\n    this.chunkCount = 0;\n    this.bwEstimate = 0;\n    this.loading = {\n      start: 0,\n      first: 0,\n      end: 0\n    };\n    this.parsing = {\n      start: 0,\n      end: 0\n    };\n    this.buffering = {\n      start: 0,\n      first: 0,\n      end: 0\n    };\n  };\n\n  var ElementaryStreamTypes = {\n    AUDIO: \"audio\",\n    VIDEO: \"video\",\n    AUDIOVIDEO: \"audiovideo\"\n  };\n  var BaseSegment = /*#__PURE__*/function () {\n    function BaseSegment(base) {\n      this._byteRange = null;\n      this._url = null;\n      this._stats = null;\n      this._streams = null;\n      // baseurl is the URL to the playlist\n      this.base = void 0;\n      // relurl is the portion of the URL that comes from inside the playlist.\n      this.relurl = void 0;\n      if (typeof base === 'string') {\n        base = {\n          url: base\n        };\n      }\n      this.base = base;\n      makeEnumerable(this, 'stats');\n    }\n\n    // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array\n    var _proto = BaseSegment.prototype;\n    _proto.setByteRange = function setByteRange(value, previous) {\n      var params = value.split('@', 2);\n      var start;\n      if (params.length === 1) {\n        start = (previous == null ? void 0 : previous.byteRangeEndOffset) || 0;\n      } else {\n        start = parseInt(params[1]);\n      }\n      this._byteRange = [start, parseInt(params[0]) + start];\n    };\n    _proto.clearElementaryStreamInfo = function clearElementaryStreamInfo() {\n      var elementaryStreams = this.elementaryStreams;\n      elementaryStreams[ElementaryStreamTypes.AUDIO] = null;\n      elementaryStreams[ElementaryStreamTypes.VIDEO] = null;\n      elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO] = null;\n    };\n    return _createClass(BaseSegment, [{\n      key: \"baseurl\",\n      get: function get() {\n        return this.base.url;\n      }\n    }, {\n      key: \"byteRange\",\n      get: function get() {\n        if (this._byteRange === null) {\n          return [];\n        }\n        return this._byteRange;\n      }\n    }, {\n      key: \"byteRangeStartOffset\",\n      get: function get() {\n        return this.byteRange[0];\n      }\n    }, {\n      key: \"byteRangeEndOffset\",\n      get: function get() {\n        return this.byteRange[1];\n      }\n    }, {\n      key: \"elementaryStreams\",\n      get: function get() {\n        if (this._streams === null) {\n          var _this$_streams;\n          this._streams = (_this$_streams = {}, _this$_streams[ElementaryStreamTypes.AUDIO] = null, _this$_streams[ElementaryStreamTypes.VIDEO] = null, _this$_streams[ElementaryStreamTypes.AUDIOVIDEO] = null, _this$_streams);\n        }\n        return this._streams;\n      },\n      set: function set(value) {\n        this._streams = value;\n      }\n    }, {\n      key: \"hasStats\",\n      get: function get() {\n        return this._stats !== null;\n      }\n    }, {\n      key: \"hasStreams\",\n      get: function get() {\n        return this._streams !== null;\n      }\n    }, {\n      key: \"stats\",\n      get: function get() {\n        if (this._stats === null) {\n          this._stats = new LoadStats();\n        }\n        return this._stats;\n      },\n      set: function set(value) {\n        this._stats = value;\n      }\n    }, {\n      key: \"url\",\n      get: function get() {\n        if (!this._url && this.baseurl && this.relurl) {\n          this._url = urlToolkitExports.buildAbsoluteURL(this.baseurl, this.relurl, {\n            alwaysNormalize: true\n          });\n        }\n        return this._url || '';\n      },\n      set: function set(value) {\n        this._url = value;\n      }\n    }]);\n  }();\n  function isMediaFragment(frag) {\n    return frag.sn !== 'initSegment';\n  }\n\n  /**\n   * Object representing parsed data from an HLS Segment. Found in {@link hls.js#LevelDetails.fragments}.\n   */\n  var Fragment = /*#__PURE__*/function (_BaseSegment2) {\n    function Fragment(type, base) {\n      var _this;\n      _this = _BaseSegment2.call(this, base) || this;\n      _this._decryptdata = null;\n      _this._programDateTime = null;\n      _this._ref = null;\n      // Approximate bit rate of the fragment expressed in bits per second (bps) as indicated by the last EXT-X-BITRATE (kbps) tag\n      _this._bitrate = void 0;\n      _this.rawProgramDateTime = null;\n      _this.tagList = [];\n      // EXTINF has to be present for a m3u8 to be considered valid\n      _this.duration = 0;\n      // sn notates the sequence number for a segment, and if set to a string can be 'initSegment'\n      _this.sn = 0;\n      // levelkeys are the EXT-X-KEY tags that apply to this segment for decryption\n      // core difference from the private field _decryptdata is the lack of the initialized IV\n      // _decryptdata will set the IV for this segment based on the segment number in the fragment\n      _this.levelkeys = void 0;\n      // A string representing the fragment type\n      _this.type = void 0;\n      // A reference to the loader. Set while the fragment is loading, and removed afterwards. Used to abort fragment loading\n      _this.loader = null;\n      // A reference to the key loader. Set while the key is loading, and removed afterwards. Used to abort key loading\n      _this.keyLoader = null;\n      // The level/track index to which the fragment belongs\n      _this.level = -1;\n      // The continuity counter of the fragment\n      _this.cc = 0;\n      // The starting Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.\n      _this.startPTS = void 0;\n      // The ending Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.\n      _this.endPTS = void 0;\n      // The starting Decode Time Stamp (DTS) of the fragment. Set after transmux complete.\n      _this.startDTS = void 0;\n      // The ending Decode Time Stamp (DTS) of the fragment. Set after transmux complete.\n      _this.endDTS = void 0;\n      // The start time of the fragment, as listed in the manifest. Updated after transmux complete.\n      _this.start = 0;\n      // The offset time (seconds) of the fragment from the start of the Playlist\n      _this.playlistOffset = 0;\n      // Set by `updateFragPTSDTS` in level-helper\n      _this.deltaPTS = void 0;\n      // The maximum starting Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.\n      _this.maxStartPTS = void 0;\n      // The minimum ending Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.\n      _this.minEndPTS = void 0;\n      // Init Segment bytes (unset for media segments)\n      _this.data = void 0;\n      // A flag indicating whether the segment was downloaded in order to test bitrate, and was not buffered\n      _this.bitrateTest = false;\n      // #EXTINF  segment title\n      _this.title = null;\n      // The Media Initialization Section for this segment\n      _this.initSegment = null;\n      // Fragment is the last fragment in the media playlist\n      _this.endList = void 0;\n      // Fragment is marked by an EXT-X-GAP tag indicating that it does not contain media data and should not be loaded\n      _this.gap = void 0;\n      // Deprecated\n      _this.urlId = 0;\n      _this.type = type;\n      return _this;\n    }\n    _inheritsLoose(Fragment, _BaseSegment2);\n    var _proto2 = Fragment.prototype;\n    _proto2.addStart = function addStart(value) {\n      this.setStart(this.start + value);\n    };\n    _proto2.setStart = function setStart(value) {\n      this.start = value;\n      if (this._ref) {\n        this._ref.start = value;\n      }\n    };\n    _proto2.setDuration = function setDuration(value) {\n      this.duration = value;\n      if (this._ref) {\n        this._ref.duration = value;\n      }\n    };\n    _proto2.setKeyFormat = function setKeyFormat(keyFormat) {\n      if (this.levelkeys) {\n        var key = this.levelkeys[keyFormat];\n        if (key && !this._decryptdata) {\n          this._decryptdata = key.getDecryptData(this.sn);\n        }\n      }\n    };\n    _proto2.abortRequests = function abortRequests() {\n      var _this$loader, _this$keyLoader;\n      (_this$loader = this.loader) == null ? void 0 : _this$loader.abort();\n      (_this$keyLoader = this.keyLoader) == null ? void 0 : _this$keyLoader.abort();\n    };\n    _proto2.setElementaryStreamInfo = function setElementaryStreamInfo(type, startPTS, endPTS, startDTS, endDTS, partial) {\n      if (partial === void 0) {\n        partial = false;\n      }\n      var elementaryStreams = this.elementaryStreams;\n      var info = elementaryStreams[type];\n      if (!info) {\n        elementaryStreams[type] = {\n          startPTS: startPTS,\n          endPTS: endPTS,\n          startDTS: startDTS,\n          endDTS: endDTS,\n          partial: partial\n        };\n        return;\n      }\n      info.startPTS = Math.min(info.startPTS, startPTS);\n      info.endPTS = Math.max(info.endPTS, endPTS);\n      info.startDTS = Math.min(info.startDTS, startDTS);\n      info.endDTS = Math.max(info.endDTS, endDTS);\n    };\n    return _createClass(Fragment, [{\n      key: \"byteLength\",\n      get: function get() {\n        if (this.hasStats) {\n          var total = this.stats.total;\n          if (total) {\n            return total;\n          }\n        }\n        if (this.byteRange) {\n          var start = this.byteRange[0];\n          var end = this.byteRange[1];\n          if (isFiniteNumber(start) && isFiniteNumber(end)) {\n            return end - start;\n          }\n        }\n        return null;\n      }\n    }, {\n      key: \"bitrate\",\n      get: function get() {\n        if (this.byteLength) {\n          return this.byteLength * 8 / this.duration;\n        }\n        if (this._bitrate) {\n          return this._bitrate;\n        }\n        return null;\n      },\n      set: function set(value) {\n        this._bitrate = value;\n      }\n    }, {\n      key: \"decryptdata\",\n      get: function get() {\n        var levelkeys = this.levelkeys;\n        if (!levelkeys && !this._decryptdata) {\n          return null;\n        }\n        if (!this._decryptdata && this.levelkeys && !this.levelkeys.NONE) {\n          var key = this.levelkeys.identity;\n          if (key) {\n            this._decryptdata = key.getDecryptData(this.sn);\n          } else {\n            var keyFormats = Object.keys(this.levelkeys);\n            if (keyFormats.length === 1) {\n              return this._decryptdata = this.levelkeys[keyFormats[0]].getDecryptData(this.sn);\n            }\n          }\n        }\n        return this._decryptdata;\n      }\n    }, {\n      key: \"end\",\n      get: function get() {\n        return this.start + this.duration;\n      }\n    }, {\n      key: \"endProgramDateTime\",\n      get: function get() {\n        if (this.programDateTime === null) {\n          return null;\n        }\n        var duration = !isFiniteNumber(this.duration) ? 0 : this.duration;\n        return this.programDateTime + duration * 1000;\n      }\n    }, {\n      key: \"encrypted\",\n      get: function get() {\n        var _this$_decryptdata;\n        // At the m3u8-parser level we need to add support for manifest signalled keyformats\n        // when we want the fragment to start reporting that it is encrypted.\n        // Currently, keyFormat will only be set for identity keys\n        if ((_this$_decryptdata = this._decryptdata) != null && _this$_decryptdata.encrypted) {\n          return true;\n        } else if (this.levelkeys) {\n          var keyFormats = Object.keys(this.levelkeys);\n          var len = keyFormats.length;\n          if (len > 1 || len === 1 && this.levelkeys[keyFormats[0]].encrypted) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"programDateTime\",\n      get: function get() {\n        if (this._programDateTime === null && this.rawProgramDateTime) {\n          this.programDateTime = Date.parse(this.rawProgramDateTime);\n        }\n        return this._programDateTime;\n      },\n      set: function set(value) {\n        if (!isFiniteNumber(value)) {\n          this._programDateTime = this.rawProgramDateTime = null;\n          return;\n        }\n        this._programDateTime = value;\n      }\n    }, {\n      key: \"ref\",\n      get: function get() {\n        if (!isMediaFragment(this)) {\n          return null;\n        }\n        if (!this._ref) {\n          this._ref = {\n            base: this.base,\n            start: this.start,\n            duration: this.duration,\n            sn: this.sn,\n            programDateTime: this.programDateTime\n          };\n        }\n        return this._ref;\n      }\n    }]);\n  }(BaseSegment);\n\n  /**\n   * Object representing parsed data from an HLS Partial Segment. Found in {@link hls.js#LevelDetails.partList}.\n   */\n  var Part = /*#__PURE__*/function (_BaseSegment3) {\n    function Part(partAttrs, frag, base, index, previous) {\n      var _this2;\n      _this2 = _BaseSegment3.call(this, base) || this;\n      _this2.fragOffset = 0;\n      _this2.duration = 0;\n      _this2.gap = false;\n      _this2.independent = false;\n      _this2.relurl = void 0;\n      _this2.fragment = void 0;\n      _this2.index = void 0;\n      _this2.duration = partAttrs.decimalFloatingPoint('DURATION');\n      _this2.gap = partAttrs.bool('GAP');\n      _this2.independent = partAttrs.bool('INDEPENDENT');\n      _this2.relurl = partAttrs.enumeratedString('URI');\n      _this2.fragment = frag;\n      _this2.index = index;\n      var byteRange = partAttrs.enumeratedString('BYTERANGE');\n      if (byteRange) {\n        _this2.setByteRange(byteRange, previous);\n      }\n      if (previous) {\n        _this2.fragOffset = previous.fragOffset + previous.duration;\n      }\n      return _this2;\n    }\n    _inheritsLoose(Part, _BaseSegment3);\n    return _createClass(Part, [{\n      key: \"start\",\n      get: function get() {\n        return this.fragment.start + this.fragOffset;\n      }\n    }, {\n      key: \"end\",\n      get: function get() {\n        return this.start + this.duration;\n      }\n    }, {\n      key: \"loaded\",\n      get: function get() {\n        var elementaryStreams = this.elementaryStreams;\n        return !!(elementaryStreams.audio || elementaryStreams.video || elementaryStreams.audiovideo);\n      }\n    }]);\n  }(BaseSegment);\n  function getOwnPropertyDescriptorFromPrototypeChain(object, property) {\n    var prototype = Object.getPrototypeOf(object);\n    if (prototype) {\n      var propertyDescriptor = Object.getOwnPropertyDescriptor(prototype, property);\n      if (propertyDescriptor) {\n        return propertyDescriptor;\n      }\n      return getOwnPropertyDescriptorFromPrototypeChain(prototype, property);\n    }\n  }\n  function makeEnumerable(object, property) {\n    var d = getOwnPropertyDescriptorFromPrototypeChain(object, property);\n    if (d) {\n      d.enumerable = true;\n      Object.defineProperty(object, property, d);\n    }\n  }\n\n  var UINT32_MAX$1 = Math.pow(2, 32) - 1;\n  var push = [].push;\n\n  // We are using fixed track IDs for driving the MP4 remuxer\n  // instead of following the TS PIDs.\n  // There is no reason not to do this and some browsers/SourceBuffer-demuxers\n  // may not like if there are TrackID \"switches\"\n  // See https://github.com/video-dev/hls.js/issues/1331\n  // Here we are mapping our internal track types to constant MP4 track IDs\n  // With MSE currently one can only have one track of each, and we are muxing\n  // whatever video/audio rendition in them.\n  var RemuxerTrackIdConfig = {\n    video: 1,\n    audio: 2,\n    id3: 3,\n    text: 4\n  };\n  function bin2str(data) {\n    return String.fromCharCode.apply(null, data);\n  }\n  function readUint16(buffer, offset) {\n    var val = buffer[offset] << 8 | buffer[offset + 1];\n    return val < 0 ? 65536 + val : val;\n  }\n  function readUint32(buffer, offset) {\n    var val = readSint32(buffer, offset);\n    return val < 0 ? 4294967296 + val : val;\n  }\n  function readUint64(buffer, offset) {\n    var result = readUint32(buffer, offset);\n    result *= Math.pow(2, 32);\n    result += readUint32(buffer, offset + 4);\n    return result;\n  }\n  function readSint32(buffer, offset) {\n    return buffer[offset] << 24 | buffer[offset + 1] << 16 | buffer[offset + 2] << 8 | buffer[offset + 3];\n  }\n  function writeUint32(buffer, offset, value) {\n    buffer[offset] = value >> 24;\n    buffer[offset + 1] = value >> 16 & 0xff;\n    buffer[offset + 2] = value >> 8 & 0xff;\n    buffer[offset + 3] = value & 0xff;\n  }\n\n  // Find \"moof\" box\n  function hasMoofData(data) {\n    var end = data.byteLength;\n    for (var i = 0; i < end;) {\n      var size = readUint32(data, i);\n      if (size > 8 && data[i + 4] === 0x6d && data[i + 5] === 0x6f && data[i + 6] === 0x6f && data[i + 7] === 0x66) {\n        return true;\n      }\n      i = size > 1 ? i + size : end;\n    }\n    return false;\n  }\n\n  // Find the data for a box specified by its path\n  function findBox(data, path) {\n    var results = [];\n    if (!path.length) {\n      // short-circuit the search for empty paths\n      return results;\n    }\n    var end = data.byteLength;\n    for (var i = 0; i < end;) {\n      var size = readUint32(data, i);\n      var type = bin2str(data.subarray(i + 4, i + 8));\n      var endbox = size > 1 ? i + size : end;\n      if (type === path[0]) {\n        if (path.length === 1) {\n          // this is the end of the path and we've found the box we were\n          // looking for\n          results.push(data.subarray(i + 8, endbox));\n        } else {\n          // recursively search for the next box along the path\n          var subresults = findBox(data.subarray(i + 8, endbox), path.slice(1));\n          if (subresults.length) {\n            push.apply(results, subresults);\n          }\n        }\n      }\n      i = endbox;\n    }\n\n    // we've finished searching all of data\n    return results;\n  }\n  function parseSegmentIndex(sidx) {\n    var references = [];\n    var version = sidx[0];\n\n    // set initial offset, we skip the reference ID (not needed)\n    var index = 8;\n    var timescale = readUint32(sidx, index);\n    index += 4;\n    var earliestPresentationTime = 0;\n    var firstOffset = 0;\n    if (version === 0) {\n      earliestPresentationTime = readUint32(sidx, index);\n      firstOffset = readUint32(sidx, index + 4);\n      index += 8;\n    } else {\n      earliestPresentationTime = readUint64(sidx, index);\n      firstOffset = readUint64(sidx, index + 8);\n      index += 16;\n    }\n\n    // skip reserved\n    index += 2;\n    var startByte = sidx.length + firstOffset;\n    var referencesCount = readUint16(sidx, index);\n    index += 2;\n    for (var i = 0; i < referencesCount; i++) {\n      var referenceIndex = index;\n      var referenceInfo = readUint32(sidx, referenceIndex);\n      referenceIndex += 4;\n      var referenceSize = referenceInfo & 0x7fffffff;\n      var referenceType = (referenceInfo & 0x80000000) >>> 31;\n      if (referenceType === 1) {\n        logger.warn('SIDX has hierarchical references (not supported)');\n        return null;\n      }\n      var subsegmentDuration = readUint32(sidx, referenceIndex);\n      referenceIndex += 4;\n      references.push({\n        referenceSize: referenceSize,\n        subsegmentDuration: subsegmentDuration,\n        // unscaled\n        info: {\n          duration: subsegmentDuration / timescale,\n          start: startByte,\n          end: startByte + referenceSize - 1\n        }\n      });\n      startByte += referenceSize;\n\n      // Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits\n      // for |sapDelta|.\n      referenceIndex += 4;\n\n      // skip to next ref\n      index = referenceIndex;\n    }\n    return {\n      earliestPresentationTime: earliestPresentationTime,\n      timescale: timescale,\n      version: version,\n      referencesCount: referencesCount,\n      references: references\n    };\n  }\n\n  /**\n   * Parses an MP4 initialization segment and extracts stream type and\n   * timescale values for any declared tracks. Timescale values indicate the\n   * number of clock ticks per second to assume for time-based values\n   * elsewhere in the MP4.\n   *\n   * To determine the start time of an MP4, you need two pieces of\n   * information: the timescale unit and the earliest base media decode\n   * time. Multiple timescales can be specified within an MP4 but the\n   * base media decode time is always expressed in the timescale from\n   * the media header box for the track:\n   * ```\n   * moov > trak > mdia > mdhd.timescale\n   * moov > trak > mdia > hdlr\n   * ```\n   * @param initSegment the bytes of the init segment\n   * @returns a hash of track type to timescale values or null if\n   * the init segment is malformed.\n   */\n\n  function parseInitSegment(initSegment) {\n    var result = [];\n    var traks = findBox(initSegment, ['moov', 'trak']);\n    for (var i = 0; i < traks.length; i++) {\n      var trak = traks[i];\n      var tkhd = findBox(trak, ['tkhd'])[0];\n      if (tkhd) {\n        var version = tkhd[0];\n        var trackId = readUint32(tkhd, version === 0 ? 12 : 20);\n        var mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n        if (mdhd) {\n          version = mdhd[0];\n          var timescale = readUint32(mdhd, version === 0 ? 12 : 20);\n          var hdlr = findBox(trak, ['mdia', 'hdlr'])[0];\n          if (hdlr) {\n            var hdlrType = bin2str(hdlr.subarray(8, 12));\n            var type = {\n              soun: ElementaryStreamTypes.AUDIO,\n              vide: ElementaryStreamTypes.VIDEO\n            }[hdlrType];\n            // Parse codec details\n            var stsdBox = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n            var stsd = parseStsd(stsdBox);\n            if (type) {\n              // Add 'audio', 'video', and 'audiovideo' track records that will map to SourceBuffers\n              result[trackId] = {\n                timescale: timescale,\n                type: type,\n                stsd: stsd\n              };\n              result[type] = _objectSpread2({\n                timescale: timescale,\n                id: trackId\n              }, stsd);\n            } else {\n              // Add 'meta' and other track records required by `offsetStartDTS`\n              result[trackId] = {\n                timescale: timescale,\n                type: hdlrType,\n                stsd: stsd\n              };\n            }\n          }\n        }\n      }\n    }\n    var trex = findBox(initSegment, ['moov', 'mvex', 'trex']);\n    trex.forEach(function (trex) {\n      var trackId = readUint32(trex, 4);\n      var track = result[trackId];\n      if (track) {\n        track.default = {\n          duration: readUint32(trex, 12),\n          flags: readUint32(trex, 20)\n        };\n      }\n    });\n    return result;\n  }\n  function parseStsd(stsd) {\n    var sampleEntries = stsd.subarray(8);\n    var sampleEntriesEnd = sampleEntries.subarray(8 + 78);\n    var fourCC = bin2str(sampleEntries.subarray(4, 8));\n    var codec = fourCC;\n    var supplemental;\n    var encrypted = fourCC === 'enca' || fourCC === 'encv';\n    if (encrypted) {\n      var encBox = findBox(sampleEntries, [fourCC])[0];\n      var encBoxChildren = encBox.subarray(fourCC === 'enca' ? 28 : 78);\n      var sinfs = findBox(encBoxChildren, ['sinf']);\n      sinfs.forEach(function (sinf) {\n        var schm = findBox(sinf, ['schm'])[0];\n        if (schm) {\n          var scheme = bin2str(schm.subarray(4, 8));\n          if (scheme === 'cbcs' || scheme === 'cenc') {\n            var frma = findBox(sinf, ['frma'])[0];\n            if (frma) {\n              // for encrypted content codec fourCC will be in frma\n              codec = bin2str(frma);\n            }\n          }\n        }\n      });\n    }\n    var codecFourCC = codec;\n    switch (codec) {\n      case 'avc1':\n      case 'avc2':\n      case 'avc3':\n      case 'avc4':\n        {\n          // extract profile + compatibility + level out of avcC box\n          var avcCBox = findBox(sampleEntriesEnd, ['avcC'])[0];\n          if (avcCBox && avcCBox.length > 3) {\n            codec += '.' + toHex(avcCBox[1]) + toHex(avcCBox[2]) + toHex(avcCBox[3]);\n            supplemental = parseSupplementalDoViCodec(codecFourCC === 'avc1' ? 'dva1' : 'dvav', sampleEntriesEnd);\n          }\n          break;\n        }\n      case 'mp4a':\n        {\n          var codecBox = findBox(sampleEntries, [fourCC])[0];\n          var esdsBox = findBox(codecBox.subarray(28), ['esds'])[0];\n          if (esdsBox && esdsBox.length > 7) {\n            var i = 4;\n            // ES Descriptor tag\n            if (esdsBox[i++] !== 0x03) {\n              break;\n            }\n            i = skipBERInteger(esdsBox, i);\n            i += 2; // skip es_id;\n            var flags = esdsBox[i++];\n            if (flags & 0x80) {\n              i += 2; // skip dependency es_id\n            }\n            if (flags & 0x40) {\n              i += esdsBox[i++]; // skip URL\n            }\n            // Decoder config descriptor\n            if (esdsBox[i++] !== 0x04) {\n              break;\n            }\n            i = skipBERInteger(esdsBox, i);\n            var objectType = esdsBox[i++];\n            if (objectType === 0x40) {\n              codec += '.' + toHex(objectType);\n            } else {\n              break;\n            }\n            i += 12;\n            // Decoder specific info\n            if (esdsBox[i++] !== 0x05) {\n              break;\n            }\n            i = skipBERInteger(esdsBox, i);\n            var firstByte = esdsBox[i++];\n            var audioObjectType = (firstByte & 0xf8) >> 3;\n            if (audioObjectType === 31) {\n              audioObjectType += 1 + ((firstByte & 0x7) << 3) + ((esdsBox[i] & 0xe0) >> 5);\n            }\n            codec += '.' + audioObjectType;\n          }\n          break;\n        }\n      case 'hvc1':\n      case 'hev1':\n        {\n          var hvcCBox = findBox(sampleEntriesEnd, ['hvcC'])[0];\n          if (hvcCBox && hvcCBox.length > 12) {\n            var profileByte = hvcCBox[1];\n            var profileSpace = ['', 'A', 'B', 'C'][profileByte >> 6];\n            var generalProfileIdc = profileByte & 0x1f;\n            var profileCompat = readUint32(hvcCBox, 2);\n            var tierFlag = (profileByte & 0x20) >> 5 ? 'H' : 'L';\n            var levelIDC = hvcCBox[12];\n            var constraintIndicator = hvcCBox.subarray(6, 12);\n            codec += '.' + profileSpace + generalProfileIdc;\n            codec += '.' + reverse32BitInt(profileCompat).toString(16).toUpperCase();\n            codec += '.' + tierFlag + levelIDC;\n            var constraintString = '';\n            for (var _i = constraintIndicator.length; _i--;) {\n              var _byte = constraintIndicator[_i];\n              if (_byte || constraintString) {\n                var encodedByte = _byte.toString(16).toUpperCase();\n                constraintString = '.' + encodedByte + constraintString;\n              }\n            }\n            codec += constraintString;\n          }\n          supplemental = parseSupplementalDoViCodec(codecFourCC == 'hev1' ? 'dvhe' : 'dvh1', sampleEntriesEnd);\n          break;\n        }\n      case 'dvh1':\n      case 'dvhe':\n      case 'dvav':\n      case 'dva1':\n      case 'dav1':\n        {\n          codec = parseSupplementalDoViCodec(codec, sampleEntriesEnd) || codec;\n          break;\n        }\n      case 'vp09':\n        {\n          var vpcCBox = findBox(sampleEntriesEnd, ['vpcC'])[0];\n          if (vpcCBox && vpcCBox.length > 6) {\n            var profile = vpcCBox[4];\n            var level = vpcCBox[5];\n            var bitDepth = vpcCBox[6] >> 4 & 0x0f;\n            codec += '.' + addLeadingZero(profile) + '.' + addLeadingZero(level) + '.' + addLeadingZero(bitDepth);\n          }\n          break;\n        }\n      case 'av01':\n        {\n          var av1CBox = findBox(sampleEntriesEnd, ['av1C'])[0];\n          if (av1CBox && av1CBox.length > 2) {\n            var _profile = av1CBox[1] >>> 5;\n            var _level = av1CBox[1] & 0x1f;\n            var _tierFlag = av1CBox[2] >>> 7 ? 'H' : 'M';\n            var highBitDepth = (av1CBox[2] & 0x40) >> 6;\n            var twelveBit = (av1CBox[2] & 0x20) >> 5;\n            var _bitDepth = _profile === 2 && highBitDepth ? twelveBit ? 12 : 10 : highBitDepth ? 10 : 8;\n            var monochrome = (av1CBox[2] & 0x10) >> 4;\n            var chromaSubsamplingX = (av1CBox[2] & 0x08) >> 3;\n            var chromaSubsamplingY = (av1CBox[2] & 0x04) >> 2;\n            var chromaSamplePosition = av1CBox[2] & 0x03;\n            // TODO: parse color_description_present_flag\n            // default it to BT.709/limited range for now\n            // more info https://aomediacodec.github.io/av1-isobmff/#av1codecconfigurationbox-syntax\n            var colorPrimaries = 1;\n            var transferCharacteristics = 1;\n            var matrixCoefficients = 1;\n            var videoFullRangeFlag = 0;\n            codec += '.' + _profile + '.' + addLeadingZero(_level) + _tierFlag + '.' + addLeadingZero(_bitDepth) + '.' + monochrome + '.' + chromaSubsamplingX + chromaSubsamplingY + chromaSamplePosition + '.' + addLeadingZero(colorPrimaries) + '.' + addLeadingZero(transferCharacteristics) + '.' + addLeadingZero(matrixCoefficients) + '.' + videoFullRangeFlag;\n            supplemental = parseSupplementalDoViCodec('dav1', sampleEntriesEnd);\n          }\n          break;\n        }\n    }\n    return {\n      codec: codec,\n      encrypted: encrypted,\n      supplemental: supplemental\n    };\n  }\n  function parseSupplementalDoViCodec(fourCC, sampleEntriesEnd) {\n    var dvvCResult = findBox(sampleEntriesEnd, ['dvvC']); // used by DoVi Profile 8 to 10\n    var dvXCBox = dvvCResult.length ? dvvCResult[0] : findBox(sampleEntriesEnd, ['dvcC'])[0]; // used by DoVi Profiles up to 7 and 20\n    if (dvXCBox) {\n      var doViProfile = dvXCBox[2] >> 1 & 0x7f;\n      var doViLevel = dvXCBox[2] << 5 & 0x20 | dvXCBox[3] >> 3 & 0x1f;\n      return fourCC + '.' + addLeadingZero(doViProfile) + '.' + addLeadingZero(doViLevel);\n    }\n  }\n  function reverse32BitInt(val) {\n    var result = 0;\n    for (var i = 0; i < 32; i++) {\n      result |= (val >> i & 1) << 32 - 1 - i;\n    }\n    return result >>> 0;\n  }\n  function skipBERInteger(bytes, i) {\n    var limit = i + 5;\n    while (bytes[i++] & 0x80 && i < limit) {\n      /* do nothing */\n    }\n    return i;\n  }\n  function toHex(x) {\n    return ('0' + x.toString(16).toUpperCase()).slice(-2);\n  }\n  function addLeadingZero(num) {\n    return (num < 10 ? '0' : '') + num;\n  }\n  function patchEncyptionData(initSegment, decryptdata) {\n    if (!initSegment || !decryptdata) {\n      return initSegment;\n    }\n    var keyId = decryptdata.keyId;\n    if (keyId && decryptdata.isCommonEncryption) {\n      var traks = findBox(initSegment, ['moov', 'trak']);\n      traks.forEach(function (trak) {\n        var stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n\n        // skip the sample entry count\n        var sampleEntries = stsd.subarray(8);\n        var encBoxes = findBox(sampleEntries, ['enca']);\n        var isAudio = encBoxes.length > 0;\n        if (!isAudio) {\n          encBoxes = findBox(sampleEntries, ['encv']);\n        }\n        encBoxes.forEach(function (enc) {\n          var encBoxChildren = isAudio ? enc.subarray(28) : enc.subarray(78);\n          var sinfBoxes = findBox(encBoxChildren, ['sinf']);\n          sinfBoxes.forEach(function (sinf) {\n            var tenc = parseSinf(sinf);\n            if (tenc) {\n              // Look for default key id (keyID offset is always 8 within the tenc box):\n              var tencKeyId = tenc.subarray(8, 24);\n              if (!tencKeyId.some(function (b) {\n                return b !== 0;\n              })) {\n                logger.log(\"[eme] Patching keyId in 'enc\" + (isAudio ? 'a' : 'v') + \">sinf>>tenc' box: \" + Hex.hexDump(tencKeyId) + \" -> \" + Hex.hexDump(keyId));\n                tenc.set(keyId, 8);\n              }\n            }\n          });\n        });\n      });\n    }\n    return initSegment;\n  }\n  function parseSinf(sinf) {\n    var schm = findBox(sinf, ['schm'])[0];\n    if (schm) {\n      var scheme = bin2str(schm.subarray(4, 8));\n      if (scheme === 'cbcs' || scheme === 'cenc') {\n        return findBox(sinf, ['schi', 'tenc'])[0];\n      }\n    }\n    return null;\n  }\n\n  /*\n    For Reference:\n    aligned(8) class TrackFragmentHeaderBox\n             extends FullBox(‘tfhd’, 0, tf_flags){\n       unsigned int(32)  track_ID;\n       // all the following are optional fields\n       unsigned int(64)  base_data_offset;\n       unsigned int(32)  sample_description_index;\n       unsigned int(32)  default_sample_duration;\n       unsigned int(32)  default_sample_size;\n       unsigned int(32)  default_sample_flags\n    }\n   */\n\n  function getSampleData(data, initData, logger) {\n    var tracks = {};\n    var trafs = findBox(data, ['moof', 'traf']);\n    for (var i = 0; i < trafs.length; i++) {\n      var traf = trafs[i];\n      // There is only one tfhd & trun per traf\n      // This is true for CMAF style content, and we should perhaps check the ftyp\n      // and only look for a single trun then, but for ISOBMFF we should check\n      // for multiple track runs.\n      var tfhd = findBox(traf, ['tfhd'])[0];\n      // get the track id from the tfhd\n      var id = readUint32(tfhd, 4);\n      var track = initData[id];\n      if (!track) {\n        continue;\n      }\n      var trackTimes = tracks[id] || (tracks[id] = {\n        start: NaN,\n        duration: 0,\n        sampleCount: 0,\n        timescale: track.timescale,\n        type: track.type\n      });\n      // get start DTS\n      var tfdt = findBox(traf, ['tfdt'])[0];\n      if (tfdt) {\n        var version = tfdt[0];\n        var baseTime = readUint32(tfdt, 4);\n        if (version === 1) {\n          // If value is too large, assume signed 64-bit. Negative track fragment decode times are invalid, but they exist in the wild.\n          // This prevents large values from being used for initPTS, which can cause playlist sync issues.\n          // https://github.com/video-dev/hls.js/issues/5303\n          if (baseTime === UINT32_MAX$1) {\n            logger.warn(\"[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time\");\n          } else {\n            baseTime *= UINT32_MAX$1 + 1;\n            baseTime += readUint32(tfdt, 8);\n          }\n        }\n        if (isFiniteNumber(baseTime) && (!isFiniteNumber(trackTimes.start) || baseTime < trackTimes.start)) {\n          trackTimes.start = baseTime;\n        }\n      }\n      var trackDefault = track.default;\n      var tfhdFlags = readUint32(tfhd, 0) | (trackDefault == null ? void 0 : trackDefault.flags);\n      var defaultSampleDuration = (trackDefault == null ? void 0 : trackDefault.duration) || 0;\n      if (tfhdFlags & 0x000008) {\n        // 0x000008 indicates the presence of the default_sample_duration field\n        if (tfhdFlags & 0x000002) {\n          // 0x000002 indicates the presence of the sample_description_index field, which precedes default_sample_duration\n          // If present, the default_sample_duration exists at byte offset 12\n          defaultSampleDuration = readUint32(tfhd, 12);\n        } else {\n          // Otherwise, the duration is at byte offset 8\n          defaultSampleDuration = readUint32(tfhd, 8);\n        }\n      }\n      var truns = findBox(traf, ['trun']);\n      var sampleDTS = trackTimes.start || 0;\n      var rawDuration = 0;\n      var sampleDuration = defaultSampleDuration;\n      for (var j = 0; j < truns.length; j++) {\n        var trun = truns[j];\n        var sampleCount = readUint32(trun, 4);\n        var sampleIndex = trackTimes.sampleCount;\n        trackTimes.sampleCount += sampleCount;\n        // Get duration from samples\n        var dataOffsetPresent = trun[3] & 0x01;\n        var firstSampleFlagsPresent = trun[3] & 0x04;\n        var sampleDurationPresent = trun[2] & 0x01;\n        var sampleSizePresent = trun[2] & 0x02;\n        var sampleFlagsPresent = trun[2] & 0x04;\n        var sampleCompositionTimeOffsetPresent = trun[2] & 0x08;\n        var offset = 8;\n        var remaining = sampleCount;\n        if (dataOffsetPresent) {\n          offset += 4;\n        }\n        if (firstSampleFlagsPresent && sampleCount) {\n          var isNonSyncSample = trun[offset + 1] & 0x01;\n          if (!isNonSyncSample && trackTimes.keyFrameIndex === undefined) {\n            trackTimes.keyFrameIndex = sampleIndex;\n          }\n          offset += 4;\n          if (sampleDurationPresent) {\n            sampleDuration = readUint32(trun, offset);\n            offset += 4;\n          } else {\n            sampleDuration = defaultSampleDuration;\n          }\n          if (sampleSizePresent) {\n            offset += 4;\n          }\n          if (sampleCompositionTimeOffsetPresent) {\n            offset += 4;\n          }\n          sampleDTS += sampleDuration;\n          rawDuration += sampleDuration;\n          remaining--;\n        }\n        while (remaining--) {\n          if (sampleDurationPresent) {\n            sampleDuration = readUint32(trun, offset);\n            offset += 4;\n          } else {\n            sampleDuration = defaultSampleDuration;\n          }\n          if (sampleSizePresent) {\n            offset += 4;\n          }\n          if (sampleFlagsPresent) {\n            var _isNonSyncSample = trun[offset + 1] & 0x01;\n            if (!_isNonSyncSample) {\n              if (trackTimes.keyFrameIndex === undefined) {\n                trackTimes.keyFrameIndex = trackTimes.sampleCount - (remaining + 1);\n                trackTimes.keyFrameStart = sampleDTS;\n              }\n            }\n            offset += 4;\n          }\n          if (sampleCompositionTimeOffsetPresent) {\n            offset += 4;\n          }\n          sampleDTS += sampleDuration;\n          rawDuration += sampleDuration;\n        }\n        if (!rawDuration && defaultSampleDuration) {\n          rawDuration += defaultSampleDuration * sampleCount;\n        }\n      }\n      trackTimes.duration += rawDuration;\n    }\n    if (!Object.keys(tracks).some(function (trackId) {\n      return tracks[trackId].duration;\n    })) {\n      // If duration samples are not available in the traf use sidx subsegment_duration\n      var sidxMinStart = Infinity;\n      var sidxMaxEnd = 0;\n      var sidxs = findBox(data, ['sidx']);\n      for (var _i2 = 0; _i2 < sidxs.length; _i2++) {\n        var sidx = parseSegmentIndex(sidxs[_i2]);\n        if (sidx != null && sidx.references) {\n          sidxMinStart = Math.min(sidxMinStart, sidx.earliestPresentationTime / sidx.timescale);\n          var subSegmentDuration = sidx.references.reduce(function (dur, ref) {\n            return dur + ref.info.duration || 0;\n          }, 0);\n          sidxMaxEnd = Math.max(sidxMaxEnd, subSegmentDuration + sidx.earliestPresentationTime / sidx.timescale);\n        }\n      }\n      if (sidxMaxEnd && isFiniteNumber(sidxMaxEnd)) {\n        Object.keys(tracks).forEach(function (trackId) {\n          if (!tracks[trackId].duration) {\n            tracks[trackId].duration = sidxMaxEnd * tracks[trackId].timescale - tracks[trackId].start;\n          }\n        });\n      }\n    }\n    return tracks;\n  }\n\n  // TODO: Remove `offsetStartDTS` in favor of using `timestampOffset` (issue #5715)\n  function offsetStartDTS(initData, fmp4, timeOffset) {\n    findBox(fmp4, ['moof', 'traf']).forEach(function (traf) {\n      findBox(traf, ['tfhd']).forEach(function (tfhd) {\n        // get the track id from the tfhd\n        var id = readUint32(tfhd, 4);\n        var track = initData[id];\n        if (!track) {\n          return;\n        }\n        // assume a 90kHz clock if no timescale was specified\n        var timescale = track.timescale || 90e3;\n        // get the base media decode time from the tfdt\n        findBox(traf, ['tfdt']).forEach(function (tfdt) {\n          var version = tfdt[0];\n          var offset = timeOffset * timescale;\n          if (offset) {\n            var baseMediaDecodeTime = readUint32(tfdt, 4);\n            if (version === 0) {\n              baseMediaDecodeTime -= offset;\n              baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);\n              writeUint32(tfdt, 4, baseMediaDecodeTime);\n            } else {\n              baseMediaDecodeTime *= Math.pow(2, 32);\n              baseMediaDecodeTime += readUint32(tfdt, 8);\n              baseMediaDecodeTime -= offset;\n              baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);\n              var upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX$1 + 1));\n              var lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX$1 + 1));\n              writeUint32(tfdt, 4, upper);\n              writeUint32(tfdt, 8, lower);\n            }\n          }\n        });\n      });\n    });\n  }\n\n  // TODO: Check if the last moof+mdat pair is part of the valid range\n  function segmentValidRange(data) {\n    var segmentedRange = {\n      valid: null,\n      remainder: null\n    };\n    var moofs = findBox(data, ['moof']);\n    if (moofs.length < 2) {\n      segmentedRange.remainder = data;\n      return segmentedRange;\n    }\n    var last = moofs[moofs.length - 1];\n    // Offset by 8 bytes; findBox offsets the start by as much\n    segmentedRange.valid = data.slice(0, last.byteOffset - 8);\n    segmentedRange.remainder = data.slice(last.byteOffset - 8);\n    return segmentedRange;\n  }\n  function appendUint8Array(data1, data2) {\n    var temp = new Uint8Array(data1.length + data2.length);\n    temp.set(data1);\n    temp.set(data2, data1.length);\n    return temp;\n  }\n  function parseSamples(timeOffset, track) {\n    var seiSamples = [];\n    var videoData = track.samples;\n    var timescale = track.timescale;\n    var trackId = track.id;\n    var isHEVCFlavor = false;\n    var moofs = findBox(videoData, ['moof']);\n    moofs.map(function (moof) {\n      var moofOffset = moof.byteOffset - 8;\n      var trafs = findBox(moof, ['traf']);\n      trafs.map(function (traf) {\n        // get the base media decode time from the tfdt\n        var baseTime = findBox(traf, ['tfdt']).map(function (tfdt) {\n          var version = tfdt[0];\n          var result = readUint32(tfdt, 4);\n          if (version === 1) {\n            result *= Math.pow(2, 32);\n            result += readUint32(tfdt, 8);\n          }\n          return result / timescale;\n        })[0];\n        if (baseTime !== undefined) {\n          timeOffset = baseTime;\n        }\n        return findBox(traf, ['tfhd']).map(function (tfhd) {\n          var id = readUint32(tfhd, 4);\n          var tfhdFlags = readUint32(tfhd, 0) & 0xffffff;\n          var baseDataOffsetPresent = (tfhdFlags & 0x000001) !== 0;\n          var sampleDescriptionIndexPresent = (tfhdFlags & 0x000002) !== 0;\n          var defaultSampleDurationPresent = (tfhdFlags & 0x000008) !== 0;\n          var defaultSampleDuration = 0;\n          var defaultSampleSizePresent = (tfhdFlags & 0x000010) !== 0;\n          var defaultSampleSize = 0;\n          var defaultSampleFlagsPresent = (tfhdFlags & 0x000020) !== 0;\n          var tfhdOffset = 8;\n          if (id === trackId) {\n            if (baseDataOffsetPresent) {\n              tfhdOffset += 8;\n            }\n            if (sampleDescriptionIndexPresent) {\n              tfhdOffset += 4;\n            }\n            if (defaultSampleDurationPresent) {\n              defaultSampleDuration = readUint32(tfhd, tfhdOffset);\n              tfhdOffset += 4;\n            }\n            if (defaultSampleSizePresent) {\n              defaultSampleSize = readUint32(tfhd, tfhdOffset);\n              tfhdOffset += 4;\n            }\n            if (defaultSampleFlagsPresent) {\n              tfhdOffset += 4;\n            }\n            if (track.type === 'video') {\n              isHEVCFlavor = isHEVC(track.codec);\n            }\n            findBox(traf, ['trun']).map(function (trun) {\n              var version = trun[0];\n              var flags = readUint32(trun, 0) & 0xffffff;\n              var dataOffsetPresent = (flags & 0x000001) !== 0;\n              var dataOffset = 0;\n              var firstSampleFlagsPresent = (flags & 0x000004) !== 0;\n              var sampleDurationPresent = (flags & 0x000100) !== 0;\n              var sampleDuration = 0;\n              var sampleSizePresent = (flags & 0x000200) !== 0;\n              var sampleSize = 0;\n              var sampleFlagsPresent = (flags & 0x000400) !== 0;\n              var sampleCompositionOffsetsPresent = (flags & 0x000800) !== 0;\n              var compositionOffset = 0;\n              var sampleCount = readUint32(trun, 4);\n              var trunOffset = 8; // past version, flags, and sample count\n\n              if (dataOffsetPresent) {\n                dataOffset = readUint32(trun, trunOffset);\n                trunOffset += 4;\n              }\n              if (firstSampleFlagsPresent) {\n                trunOffset += 4;\n              }\n              var sampleOffset = dataOffset + moofOffset;\n              for (var ix = 0; ix < sampleCount; ix++) {\n                if (sampleDurationPresent) {\n                  sampleDuration = readUint32(trun, trunOffset);\n                  trunOffset += 4;\n                } else {\n                  sampleDuration = defaultSampleDuration;\n                }\n                if (sampleSizePresent) {\n                  sampleSize = readUint32(trun, trunOffset);\n                  trunOffset += 4;\n                } else {\n                  sampleSize = defaultSampleSize;\n                }\n                if (sampleFlagsPresent) {\n                  trunOffset += 4;\n                }\n                if (sampleCompositionOffsetsPresent) {\n                  if (version === 0) {\n                    compositionOffset = readUint32(trun, trunOffset);\n                  } else {\n                    compositionOffset = readSint32(trun, trunOffset);\n                  }\n                  trunOffset += 4;\n                }\n                if (track.type === ElementaryStreamTypes.VIDEO) {\n                  var naluTotalSize = 0;\n                  while (naluTotalSize < sampleSize) {\n                    var naluSize = readUint32(videoData, sampleOffset);\n                    sampleOffset += 4;\n                    if (isSEIMessage(isHEVCFlavor, videoData[sampleOffset])) {\n                      var data = videoData.subarray(sampleOffset, sampleOffset + naluSize);\n                      parseSEIMessageFromNALu(data, isHEVCFlavor ? 2 : 1, timeOffset + compositionOffset / timescale, seiSamples);\n                    }\n                    sampleOffset += naluSize;\n                    naluTotalSize += naluSize + 4;\n                  }\n                }\n                timeOffset += sampleDuration / timescale;\n              }\n            });\n          }\n        });\n      });\n    });\n    return seiSamples;\n  }\n  function isHEVC(codec) {\n    if (!codec) {\n      return false;\n    }\n    var baseCodec = codec.substring(0, 4);\n    return baseCodec === 'hvc1' || baseCodec === 'hev1' ||\n    // Dolby Vision\n    baseCodec === 'dvh1' || baseCodec === 'dvhe';\n  }\n  function isSEIMessage(isHEVCFlavor, naluHeader) {\n    if (isHEVCFlavor) {\n      var naluType = naluHeader >> 1 & 0x3f;\n      return naluType === 39 || naluType === 40;\n    } else {\n      var _naluType = naluHeader & 0x1f;\n      return _naluType === 6;\n    }\n  }\n  function parseSEIMessageFromNALu(unescapedData, headerSize, pts, samples) {\n    var data = discardEPB(unescapedData);\n    var seiPtr = 0;\n    // skip nal header\n    seiPtr += headerSize;\n    var payloadType = 0;\n    var payloadSize = 0;\n    var b = 0;\n    while (seiPtr < data.length) {\n      payloadType = 0;\n      do {\n        if (seiPtr >= data.length) {\n          break;\n        }\n        b = data[seiPtr++];\n        payloadType += b;\n      } while (b === 0xff);\n\n      // Parse payload size.\n      payloadSize = 0;\n      do {\n        if (seiPtr >= data.length) {\n          break;\n        }\n        b = data[seiPtr++];\n        payloadSize += b;\n      } while (b === 0xff);\n      var leftOver = data.length - seiPtr;\n      // Create a variable to process the payload\n      var payPtr = seiPtr;\n\n      // Increment the seiPtr to the end of the payload\n      if (payloadSize < leftOver) {\n        seiPtr += payloadSize;\n      } else if (payloadSize > leftOver) {\n        // Some type of corruption has happened?\n        logger.error(\"Malformed SEI payload. \" + payloadSize + \" is too small, only \" + leftOver + \" bytes left to parse.\");\n        // We might be able to parse some data, but let's be safe and ignore it.\n        break;\n      }\n      if (payloadType === 4) {\n        var countryCode = data[payPtr++];\n        if (countryCode === 181) {\n          var providerCode = readUint16(data, payPtr);\n          payPtr += 2;\n          if (providerCode === 49) {\n            var userStructure = readUint32(data, payPtr);\n            payPtr += 4;\n            if (userStructure === 0x47413934) {\n              var userDataType = data[payPtr++];\n\n              // Raw CEA-608 bytes wrapped in CEA-708 packet\n              if (userDataType === 3) {\n                var firstByte = data[payPtr++];\n                var totalCCs = 0x1f & firstByte;\n                var enabled = 0x40 & firstByte;\n                var totalBytes = enabled ? 2 + totalCCs * 3 : 0;\n                var byteArray = new Uint8Array(totalBytes);\n                if (enabled) {\n                  byteArray[0] = firstByte;\n                  for (var i = 1; i < totalBytes; i++) {\n                    byteArray[i] = data[payPtr++];\n                  }\n                }\n                samples.push({\n                  type: userDataType,\n                  payloadType: payloadType,\n                  pts: pts,\n                  bytes: byteArray\n                });\n              }\n            }\n          }\n        }\n      } else if (payloadType === 5) {\n        if (payloadSize > 16) {\n          var uuidStrArray = [];\n          for (var _i3 = 0; _i3 < 16; _i3++) {\n            var _b = data[payPtr++].toString(16);\n            uuidStrArray.push(_b.length == 1 ? '0' + _b : _b);\n            if (_i3 === 3 || _i3 === 5 || _i3 === 7 || _i3 === 9) {\n              uuidStrArray.push('-');\n            }\n          }\n          var length = payloadSize - 16;\n          var userDataBytes = new Uint8Array(length);\n          for (var _i4 = 0; _i4 < length; _i4++) {\n            userDataBytes[_i4] = data[payPtr++];\n          }\n          samples.push({\n            payloadType: payloadType,\n            pts: pts,\n            uuid: uuidStrArray.join(''),\n            userData: utf8ArrayToStr(userDataBytes),\n            userDataBytes: userDataBytes\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * remove Emulation Prevention bytes from a RBSP\n   */\n  function discardEPB(data) {\n    var length = data.byteLength;\n    var EPBPositions = [];\n    var i = 1;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        EPBPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (EPBPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    var newLength = length - EPBPositions.length;\n    var newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === EPBPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        EPBPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n    return newData;\n  }\n  function parseEmsg(data) {\n    var version = data[0];\n    var schemeIdUri = '';\n    var value = '';\n    var timeScale = 0;\n    var presentationTimeDelta = 0;\n    var presentationTime = 0;\n    var eventDuration = 0;\n    var id = 0;\n    var offset = 0;\n    if (version === 0) {\n      while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n        schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n        offset += 1;\n      }\n      schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n      while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n        value += bin2str(data.subarray(offset, offset + 1));\n        offset += 1;\n      }\n      value += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n      timeScale = readUint32(data, 12);\n      presentationTimeDelta = readUint32(data, 16);\n      eventDuration = readUint32(data, 20);\n      id = readUint32(data, 24);\n      offset = 28;\n    } else if (version === 1) {\n      offset += 4;\n      timeScale = readUint32(data, offset);\n      offset += 4;\n      var leftPresentationTime = readUint32(data, offset);\n      offset += 4;\n      var rightPresentationTime = readUint32(data, offset);\n      offset += 4;\n      presentationTime = Math.pow(2, 32) * leftPresentationTime + rightPresentationTime;\n      if (!isSafeInteger(presentationTime)) {\n        presentationTime = Number.MAX_SAFE_INTEGER;\n        logger.warn('Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box');\n      }\n      eventDuration = readUint32(data, offset);\n      offset += 4;\n      id = readUint32(data, offset);\n      offset += 4;\n      while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n        schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n        offset += 1;\n      }\n      schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n      while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n        value += bin2str(data.subarray(offset, offset + 1));\n        offset += 1;\n      }\n      value += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n    var payload = data.subarray(offset, data.byteLength);\n    return {\n      schemeIdUri: schemeIdUri,\n      value: value,\n      timeScale: timeScale,\n      presentationTime: presentationTime,\n      presentationTimeDelta: presentationTimeDelta,\n      eventDuration: eventDuration,\n      id: id,\n      payload: payload\n    };\n  }\n  function mp4Box(type) {\n    for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      payload[_key - 1] = arguments[_key];\n    }\n    var len = payload.length;\n    var size = 8;\n    var i = len;\n    while (i--) {\n      size += payload[i].byteLength;\n    }\n    var result = new Uint8Array(size);\n    result[0] = size >> 24 & 0xff;\n    result[1] = size >> 16 & 0xff;\n    result[2] = size >> 8 & 0xff;\n    result[3] = size & 0xff;\n    result.set(type, 4);\n    for (i = 0, size = 8; i < len; i++) {\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n    return result;\n  }\n  function mp4pssh(systemId, keyids, data) {\n    if (systemId.byteLength !== 16) {\n      throw new RangeError('Invalid system id');\n    }\n    var version;\n    var kids;\n    {\n      version = 0;\n      kids = new Uint8Array();\n    }\n    var kidCount;\n    if (version > 0) {\n      kidCount = new Uint8Array(4);\n      if (keyids.length > 0) {\n        new DataView(kidCount.buffer).setUint32(0, keyids.length, false);\n      }\n    } else {\n      kidCount = new Uint8Array();\n    }\n    var dataSize = new Uint8Array(4);\n    if (data && data.byteLength > 0) {\n      new DataView(dataSize.buffer).setUint32(0, data.byteLength, false);\n    }\n    return mp4Box([112, 115, 115, 104], new Uint8Array([version, 0x00, 0x00, 0x00 // Flags\n    ]), systemId,\n    // 16 bytes\n    kidCount, kids, dataSize, data || new Uint8Array());\n  }\n  function parseMultiPssh(initData) {\n    var results = [];\n    if (initData instanceof ArrayBuffer) {\n      var length = initData.byteLength;\n      var offset = 0;\n      while (offset + 32 < length) {\n        var view = new DataView(initData, offset);\n        var pssh = parsePssh(view);\n        results.push(pssh);\n        offset += pssh.size;\n      }\n    }\n    return results;\n  }\n  function parsePssh(view) {\n    var size = view.getUint32(0);\n    var offset = view.byteOffset;\n    var length = view.byteLength;\n    if (length < size) {\n      return {\n        offset: offset,\n        size: length\n      };\n    }\n    var type = view.getUint32(4);\n    if (type !== 0x70737368) {\n      return {\n        offset: offset,\n        size: size\n      };\n    }\n    var version = view.getUint32(8) >>> 24;\n    if (version !== 0 && version !== 1) {\n      return {\n        offset: offset,\n        size: size\n      };\n    }\n    var buffer = view.buffer;\n    var systemId = Hex.hexDump(new Uint8Array(buffer, offset + 12, 16));\n    var dataSizeOrKidCount = view.getUint32(28);\n    var kids = null;\n    var data = null;\n    if (version === 0) {\n      if (size - 32 < dataSizeOrKidCount || dataSizeOrKidCount < 22) {\n        return {\n          offset: offset,\n          size: size\n        };\n      }\n      data = new Uint8Array(buffer, offset + 32, dataSizeOrKidCount);\n    } else if (version === 1) {\n      if (!dataSizeOrKidCount || length < offset + 32 + dataSizeOrKidCount * 16 + 16) {\n        return {\n          offset: offset,\n          size: size\n        };\n      }\n      kids = [];\n      for (var i = 0; i < dataSizeOrKidCount; i++) {\n        kids.push(new Uint8Array(buffer, offset + 32 + i * 16, 16));\n      }\n    }\n    return {\n      version: version,\n      systemId: systemId,\n      kids: kids,\n      data: data,\n      offset: offset,\n      size: size\n    };\n  }\n\n  var userAgentHevcSupportIsInaccurate = function userAgentHevcSupportIsInaccurate() {\n    return /\\(Windows.+Firefox\\//i.test(navigator.userAgent);\n  };\n\n  // from http://mp4ra.org/codecs.html\n  // values indicate codec selection preference (lower is higher priority)\n  var sampleEntryCodesISO = {\n    audio: {\n      a3ds: 1,\n      'ac-3': 0.95,\n      'ac-4': 1,\n      alac: 0.9,\n      alaw: 1,\n      dra1: 1,\n      'dts+': 1,\n      'dts-': 1,\n      dtsc: 1,\n      dtse: 1,\n      dtsh: 1,\n      'ec-3': 0.9,\n      enca: 1,\n      fLaC: 0.9,\n      // MP4-RA listed codec entry for FLAC\n      flac: 0.9,\n      // legacy browser codec name for FLAC\n      FLAC: 0.9,\n      // some manifests may list \"FLAC\" with Apple's tools\n      g719: 1,\n      g726: 1,\n      m4ae: 1,\n      mha1: 1,\n      mha2: 1,\n      mhm1: 1,\n      mhm2: 1,\n      mlpa: 1,\n      mp4a: 1,\n      'raw ': 1,\n      Opus: 1,\n      opus: 1,\n      // browsers expect this to be lowercase despite MP4RA says 'Opus'\n      samr: 1,\n      sawb: 1,\n      sawp: 1,\n      sevc: 1,\n      sqcp: 1,\n      ssmv: 1,\n      twos: 1,\n      ulaw: 1\n    },\n    video: {\n      avc1: 1,\n      avc2: 1,\n      avc3: 1,\n      avc4: 1,\n      avcp: 1,\n      av01: 0.8,\n      dav1: 0.8,\n      drac: 1,\n      dva1: 1,\n      dvav: 1,\n      dvh1: 0.7,\n      dvhe: 0.7,\n      encv: 1,\n      hev1: 0.75,\n      hvc1: 0.75,\n      mjp2: 1,\n      mp4v: 1,\n      mvc1: 1,\n      mvc2: 1,\n      mvc3: 1,\n      mvc4: 1,\n      resv: 1,\n      rv60: 1,\n      s263: 1,\n      svc1: 1,\n      svc2: 1,\n      'vc-1': 1,\n      vp08: 1,\n      vp09: 0.9\n    },\n    text: {\n      stpp: 1,\n      wvtt: 1\n    }\n  };\n  function isCodecType(codec, type) {\n    var typeCodes = sampleEntryCodesISO[type];\n    return !!typeCodes && !!typeCodes[codec.slice(0, 4)];\n  }\n  function areCodecsMediaSourceSupported(codecs, type, preferManagedMediaSource) {\n    if (preferManagedMediaSource === void 0) {\n      preferManagedMediaSource = true;\n    }\n    return !codecs.split(',').some(function (codec) {\n      return !isCodecMediaSourceSupported(codec, type, preferManagedMediaSource);\n    });\n  }\n  function isCodecMediaSourceSupported(codec, type, preferManagedMediaSource) {\n    var _MediaSource$isTypeSu;\n    if (preferManagedMediaSource === void 0) {\n      preferManagedMediaSource = true;\n    }\n    var MediaSource = getMediaSource(preferManagedMediaSource);\n    return (_MediaSource$isTypeSu = MediaSource == null ? void 0 : MediaSource.isTypeSupported(mimeTypeForCodec(codec, type))) != null ? _MediaSource$isTypeSu : false;\n  }\n  function mimeTypeForCodec(codec, type) {\n    return type + \"/mp4;codecs=\" + codec;\n  }\n  function videoCodecPreferenceValue(videoCodec) {\n    if (videoCodec) {\n      var fourCC = videoCodec.substring(0, 4);\n      return sampleEntryCodesISO.video[fourCC];\n    }\n    return 2;\n  }\n  function codecsSetSelectionPreferenceValue(codecSet) {\n    var limitedHevcSupport = userAgentHevcSupportIsInaccurate();\n    return codecSet.split(',').reduce(function (num, fourCC) {\n      var lowerPriority = limitedHevcSupport && isHEVC(fourCC);\n      var preferenceValue = lowerPriority ? 9 : sampleEntryCodesISO.video[fourCC];\n      if (preferenceValue) {\n        return (preferenceValue * 2 + num) / (num ? 3 : 2);\n      }\n      return (sampleEntryCodesISO.audio[fourCC] + num) / (num ? 2 : 1);\n    }, 0);\n  }\n  var CODEC_COMPATIBLE_NAMES = {};\n  function getCodecCompatibleNameLower(lowerCaseCodec, preferManagedMediaSource) {\n    if (preferManagedMediaSource === void 0) {\n      preferManagedMediaSource = true;\n    }\n    if (CODEC_COMPATIBLE_NAMES[lowerCaseCodec]) {\n      return CODEC_COMPATIBLE_NAMES[lowerCaseCodec];\n    }\n    var codecsToCheck = {\n      // Idealy fLaC and Opus would be first (spec-compliant) but\n      // some browsers will report that fLaC is supported then fail.\n      // see: https://bugs.chromium.org/p/chromium/issues/detail?id=1422728\n      flac: ['flac', 'fLaC', 'FLAC'],\n      opus: ['opus', 'Opus'],\n      // Replace audio codec info if browser does not support mp4a.40.34,\n      // and demuxer can fallback to 'audio/mpeg' or 'audio/mp4;codecs=\"mp3\"'\n      'mp4a.40.34': ['mp3']\n    }[lowerCaseCodec];\n    for (var i = 0; i < codecsToCheck.length; i++) {\n      var _getMediaSource;\n      if (isCodecMediaSourceSupported(codecsToCheck[i], 'audio', preferManagedMediaSource)) {\n        CODEC_COMPATIBLE_NAMES[lowerCaseCodec] = codecsToCheck[i];\n        return codecsToCheck[i];\n      } else if (codecsToCheck[i] === 'mp3' && (_getMediaSource = getMediaSource(preferManagedMediaSource)) != null && _getMediaSource.isTypeSupported('audio/mpeg')) {\n        return '';\n      }\n    }\n    return lowerCaseCodec;\n  }\n  var AUDIO_CODEC_REGEXP = /flac|opus|mp4a\\.40\\.34/i;\n  function getCodecCompatibleName(codec, preferManagedMediaSource) {\n    if (preferManagedMediaSource === void 0) {\n      preferManagedMediaSource = true;\n    }\n    return codec.replace(AUDIO_CODEC_REGEXP, function (m) {\n      return getCodecCompatibleNameLower(m.toLowerCase(), preferManagedMediaSource);\n    });\n  }\n  function replaceVideoCodec(originalCodecs, newVideoCodec) {\n    var codecs = [];\n    if (originalCodecs) {\n      var allCodecs = originalCodecs.split(',');\n      for (var i = 0; i < allCodecs.length; i++) {\n        if (!isCodecType(allCodecs[i], 'video')) {\n          codecs.push(allCodecs[i]);\n        }\n      }\n    }\n    if (newVideoCodec) {\n      codecs.push(newVideoCodec);\n    }\n    return codecs.join(',');\n  }\n  function pickMostCompleteCodecName(parsedCodec, levelCodec) {\n    // Parsing of mp4a codecs strings in mp4-tools from media is incomplete as of d8c6c7a\n    // so use level codec is parsed codec is unavailable or incomplete\n    if (parsedCodec && (parsedCodec.length > 4 || ['ac-3', 'ec-3', 'alac', 'fLaC', 'Opus'].indexOf(parsedCodec) !== -1)) {\n      return parsedCodec;\n    }\n    if (levelCodec) {\n      var levelCodecs = levelCodec.split(',');\n      if (levelCodecs.length > 1) {\n        if (parsedCodec) {\n          for (var i = levelCodecs.length; i--;) {\n            if (levelCodecs[i].substring(0, 4) === parsedCodec.substring(0, 4)) {\n              return levelCodecs[i];\n            }\n          }\n        }\n        return levelCodecs[0];\n      }\n    }\n    return levelCodec || parsedCodec;\n  }\n  function convertAVC1ToAVCOTI(videoCodecs) {\n    // Convert avc1 codec string from RFC-4281 to RFC-6381 for MediaSource.isTypeSupported\n    // Examples: avc1.66.30 to avc1.42001e and avc1.77.30,avc1.66.30 to avc1.4d001e,avc1.42001e.\n    var codecs = videoCodecs.split(',');\n    for (var i = 0; i < codecs.length; i++) {\n      var avcdata = codecs[i].split('.');\n      // only convert codec strings starting with avc1 (Examples: avc1.64001f,dvh1.05.07)\n      if (avcdata.length > 2 && avcdata[0] === 'avc1') {\n        codecs[i] = \"avc1.\" + parseInt(avcdata[1]).toString(16) + ('000' + parseInt(avcdata[2]).toString(16)).slice(-4);\n      }\n    }\n    return codecs.join(',');\n  }\n  function fillInMissingAV01Params(videoCodec) {\n    // Used to fill in incomplete AV1 playlist CODECS strings for mediaCapabilities.decodingInfo queries\n    if (videoCodec.startsWith('av01.')) {\n      var av1params = videoCodec.split('.');\n      var placeholders = ['0', '111', '01', '01', '01', '0'];\n      for (var i = av1params.length; i > 4 && i < 10; i++) {\n        av1params[i] = placeholders[i - 4];\n      }\n      return av1params.join('.');\n    }\n    return videoCodec;\n  }\n  function getM2TSSupportedAudioTypes(preferManagedMediaSource) {\n    var MediaSource = getMediaSource(preferManagedMediaSource) || {\n      isTypeSupported: function isTypeSupported() {\n        return false;\n      }\n    };\n    return {\n      mpeg: MediaSource.isTypeSupported('audio/mpeg'),\n      mp3: MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"'),\n      ac3: MediaSource.isTypeSupported('audio/mp4; codecs=\"ac-3\"') \n    };\n  }\n  function getCodecsForMimeType(mimeType) {\n    return mimeType.replace(/^.+codecs=[\"']?([^\"']+).*$/, '$1');\n  }\n\n  var SUPPORTED_INFO_DEFAULT = {\n    supported: true,\n    configurations: [],\n    decodingInfoResults: [{\n      supported: true,\n      powerEfficient: true,\n      smooth: true\n    }]\n  };\n  function getUnsupportedResult(error, configurations) {\n    return {\n      supported: false,\n      configurations: configurations,\n      decodingInfoResults: [{\n        supported: false,\n        smooth: false,\n        powerEfficient: false\n      }],\n      error: error\n    };\n  }\n  var SUPPORTED_INFO_CACHE = {};\n  function requiresMediaCapabilitiesDecodingInfo(level, audioTracksByGroup, currentVideoRange, currentFrameRate, currentBw, audioPreference) {\n    // Only test support when configuration is exceeds minimum options\n    var audioGroups = level.audioCodec ? level.audioGroups : null;\n    var audioCodecPreference = audioPreference == null ? void 0 : audioPreference.audioCodec;\n    var channelsPreference = audioPreference == null ? void 0 : audioPreference.channels;\n    var maxChannels = channelsPreference ? parseInt(channelsPreference) : audioCodecPreference ? Infinity : 2;\n    var audioChannels = null;\n    if (audioGroups != null && audioGroups.length) {\n      try {\n        if (audioGroups.length === 1 && audioGroups[0]) {\n          audioChannels = audioTracksByGroup.groups[audioGroups[0]].channels;\n        } else {\n          audioChannels = audioGroups.reduce(function (acc, groupId) {\n            if (groupId) {\n              var audioTrackGroup = audioTracksByGroup.groups[groupId];\n              if (!audioTrackGroup) {\n                throw new Error(\"Audio track group \" + groupId + \" not found\");\n              }\n              // Sum all channel key values\n              Object.keys(audioTrackGroup.channels).forEach(function (key) {\n                acc[key] = (acc[key] || 0) + audioTrackGroup.channels[key];\n              });\n            }\n            return acc;\n          }, {\n            2: 0\n          });\n        }\n      } catch (error) {\n        return true;\n      }\n    }\n    return level.videoCodec !== undefined && (level.width > 1920 && level.height > 1088 || level.height > 1920 && level.width > 1088 || level.frameRate > Math.max(currentFrameRate, 30) || level.videoRange !== 'SDR' && level.videoRange !== currentVideoRange || level.bitrate > Math.max(currentBw, 8e6)) || !!audioChannels && isFiniteNumber(maxChannels) && Object.keys(audioChannels).some(function (channels) {\n      return parseInt(channels) > maxChannels;\n    });\n  }\n  function getMediaDecodingInfoPromise(level, audioTracksByGroup, mediaCapabilities) {\n    var videoCodecs = level.videoCodec;\n    var audioCodecs = level.audioCodec;\n    if (!videoCodecs && !audioCodecs || !mediaCapabilities) {\n      return Promise.resolve(SUPPORTED_INFO_DEFAULT);\n    }\n    var configurations = [];\n    if (videoCodecs) {\n      var baseVideoConfiguration = {\n        width: level.width,\n        height: level.height,\n        bitrate: Math.ceil(Math.max(level.bitrate * 0.9, level.averageBitrate)),\n        // Assume a framerate of 30fps since MediaCapabilities will not accept Level default of 0.\n        framerate: level.frameRate || 30\n      };\n      var videoRange = level.videoRange;\n      if (videoRange !== 'SDR') {\n        baseVideoConfiguration.transferFunction = videoRange.toLowerCase();\n      }\n      var videoCodecsArray = videoCodecs.split(',');\n      // Override Windows Firefox HEVC MediaCapabilities result (https://github.com/video-dev/hls.js/issues/7046)\n      var ua = navigator.userAgent;\n      if (videoCodecsArray.some(function (videoCodec) {\n        return isHEVC(videoCodec);\n      }) && userAgentHevcSupportIsInaccurate()) {\n        return Promise.resolve(getUnsupportedResult(new Error(\"Overriding Windows Firefox HEVC MediaCapabilities result based on user-agent sting: (\" + ua + \")\"), configurations));\n      }\n      configurations.push.apply(configurations, videoCodecsArray.map(function (videoCodec) {\n        return {\n          type: 'media-source',\n          video: _objectSpread2(_objectSpread2({}, baseVideoConfiguration), {}, {\n            contentType: mimeTypeForCodec(fillInMissingAV01Params(videoCodec), 'video')\n          })\n        };\n      }));\n    }\n    if (audioCodecs && level.audioGroups) {\n      level.audioGroups.forEach(function (audioGroupId) {\n        var _audioTracksByGroup$g;\n        if (!audioGroupId) {\n          return;\n        }\n        (_audioTracksByGroup$g = audioTracksByGroup.groups[audioGroupId]) == null ? void 0 : _audioTracksByGroup$g.tracks.forEach(function (audioTrack) {\n          if (audioTrack.groupId === audioGroupId) {\n            var channels = audioTrack.channels || '';\n            var channelsNumber = parseFloat(channels);\n            if (isFiniteNumber(channelsNumber) && channelsNumber > 2) {\n              configurations.push.apply(configurations, audioCodecs.split(',').map(function (audioCodec) {\n                return {\n                  type: 'media-source',\n                  audio: {\n                    contentType: mimeTypeForCodec(audioCodec, 'audio'),\n                    channels: '' + channelsNumber\n                    // spatialRendering:\n                    //   audioCodec === 'ec-3' && channels.indexOf('JOC'),\n                  }\n                };\n              }));\n            }\n          }\n        });\n      });\n    }\n    return Promise.all(configurations.map(function (configuration) {\n      // Cache MediaCapabilities promises\n      var decodingInfoKey = getMediaDecodingInfoKey(configuration);\n      return SUPPORTED_INFO_CACHE[decodingInfoKey] || (SUPPORTED_INFO_CACHE[decodingInfoKey] = mediaCapabilities.decodingInfo(configuration));\n    })).then(function (decodingInfoResults) {\n      return {\n        supported: !decodingInfoResults.some(function (info) {\n          return !info.supported;\n        }),\n        configurations: configurations,\n        decodingInfoResults: decodingInfoResults\n      };\n    }).catch(function (error) {\n      return {\n        supported: false,\n        configurations: configurations,\n        decodingInfoResults: [],\n        error: error\n      };\n    });\n  }\n  function getMediaDecodingInfoKey(config) {\n    var audio = config.audio,\n      video = config.video;\n    var mediaConfig = video || audio;\n    if (mediaConfig) {\n      var codec = getCodecsForMimeType(mediaConfig.contentType);\n      if (video) {\n        return \"r\" + video.height + \"x\" + video.width + \"f\" + Math.ceil(video.framerate) + (video.transferFunction || 'sd') + \"_\" + codec + \"_\" + Math.ceil(video.bitrate / 1e5);\n      }\n      if (audio) {\n        return \"c\" + audio.channels + (audio.spatialRendering ? 's' : 'n') + \"_\" + codec;\n      }\n    }\n    return '';\n  }\n\n  var HdcpLevels = ['NONE', 'TYPE-0', 'TYPE-1', null];\n  function isHdcpLevel(value) {\n    return HdcpLevels.indexOf(value) > -1;\n  }\n  var VideoRangeValues = ['SDR', 'PQ', 'HLG'];\n  function isVideoRange(value) {\n    return !!value && VideoRangeValues.indexOf(value) > -1;\n  }\n  var HlsSkip = {\n    No: \"\",\n    Yes: \"YES\",\n    v2: \"v2\"\n  };\n  function getSkipValue(details) {\n    var canSkipUntil = details.canSkipUntil,\n      canSkipDateRanges = details.canSkipDateRanges,\n      age = details.age;\n    // A Client SHOULD NOT request a Playlist Delta Update unless it already\n    // has a version of the Playlist that is no older than one-half of the Skip Boundary.\n    // @see: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis#section-6.3.7\n    var playlistRecentEnough = age < canSkipUntil / 2;\n    if (canSkipUntil && playlistRecentEnough) {\n      if (canSkipDateRanges) {\n        return HlsSkip.v2;\n      }\n      return HlsSkip.Yes;\n    }\n    return HlsSkip.No;\n  }\n  var HlsUrlParameters = /*#__PURE__*/function () {\n    function HlsUrlParameters(msn, part, skip) {\n      this.msn = void 0;\n      this.part = void 0;\n      this.skip = void 0;\n      this.msn = msn;\n      this.part = part;\n      this.skip = skip;\n    }\n    var _proto = HlsUrlParameters.prototype;\n    _proto.addDirectives = function addDirectives(uri) {\n      var url = new self.URL(uri);\n      if (this.msn !== undefined) {\n        url.searchParams.set('_HLS_msn', this.msn.toString());\n      }\n      if (this.part !== undefined) {\n        url.searchParams.set('_HLS_part', this.part.toString());\n      }\n      if (this.skip) {\n        url.searchParams.set('_HLS_skip', this.skip);\n      }\n      return url.href;\n    };\n    return HlsUrlParameters;\n  }();\n  var Level = /*#__PURE__*/function () {\n    function Level(data) {\n      this._attrs = void 0;\n      this.audioCodec = void 0;\n      this.bitrate = void 0;\n      this.codecSet = void 0;\n      this.url = void 0;\n      this.frameRate = void 0;\n      this.height = void 0;\n      this.id = void 0;\n      this.name = void 0;\n      this.supplemental = void 0;\n      this.videoCodec = void 0;\n      this.width = void 0;\n      this.details = void 0;\n      this.fragmentError = 0;\n      this.loadError = 0;\n      this.loaded = void 0;\n      this.realBitrate = 0;\n      this.supportedPromise = void 0;\n      this.supportedResult = void 0;\n      this._avgBitrate = 0;\n      this._audioGroups = void 0;\n      this._subtitleGroups = void 0;\n      // Deprecated (retained for backwards compatibility)\n      this._urlId = 0;\n      this.url = [data.url];\n      this._attrs = [data.attrs];\n      this.bitrate = data.bitrate;\n      if (data.details) {\n        this.details = data.details;\n      }\n      this.id = data.id || 0;\n      this.name = data.name;\n      this.width = data.width || 0;\n      this.height = data.height || 0;\n      this.frameRate = data.attrs.optionalFloat('FRAME-RATE', 0);\n      this._avgBitrate = data.attrs.decimalInteger('AVERAGE-BANDWIDTH');\n      this.audioCodec = data.audioCodec;\n      this.videoCodec = data.videoCodec;\n      this.codecSet = [data.videoCodec, data.audioCodec].filter(function (c) {\n        return !!c;\n      }).map(function (s) {\n        return s.substring(0, 4);\n      }).join(',');\n      if ('supplemental' in data) {\n        var _data$supplemental;\n        this.supplemental = data.supplemental;\n        var supplementalVideo = (_data$supplemental = data.supplemental) == null ? void 0 : _data$supplemental.videoCodec;\n        if (supplementalVideo && supplementalVideo !== data.videoCodec) {\n          this.codecSet += \",\" + supplementalVideo.substring(0, 4);\n        }\n      }\n      this.addGroupId('audio', data.attrs.AUDIO);\n      this.addGroupId('text', data.attrs.SUBTITLES);\n    }\n    var _proto2 = Level.prototype;\n    _proto2.hasAudioGroup = function hasAudioGroup(groupId) {\n      return hasGroup(this._audioGroups, groupId);\n    };\n    _proto2.hasSubtitleGroup = function hasSubtitleGroup(groupId) {\n      return hasGroup(this._subtitleGroups, groupId);\n    };\n    _proto2.addGroupId = function addGroupId(type, groupId) {\n      if (!groupId) {\n        return;\n      }\n      if (type === 'audio') {\n        var audioGroups = this._audioGroups;\n        if (!audioGroups) {\n          audioGroups = this._audioGroups = [];\n        }\n        if (audioGroups.indexOf(groupId) === -1) {\n          audioGroups.push(groupId);\n        }\n      } else if (type === 'text') {\n        var subtitleGroups = this._subtitleGroups;\n        if (!subtitleGroups) {\n          subtitleGroups = this._subtitleGroups = [];\n        }\n        if (subtitleGroups.indexOf(groupId) === -1) {\n          subtitleGroups.push(groupId);\n        }\n      }\n    }\n\n    // Deprecated methods (retained for backwards compatibility)\n    ;\n    _proto2.addFallback = function addFallback() {};\n    return _createClass(Level, [{\n      key: \"maxBitrate\",\n      get: function get() {\n        return Math.max(this.realBitrate, this.bitrate);\n      }\n    }, {\n      key: \"averageBitrate\",\n      get: function get() {\n        return this._avgBitrate || this.realBitrate || this.bitrate;\n      }\n    }, {\n      key: \"attrs\",\n      get: function get() {\n        return this._attrs[0];\n      }\n    }, {\n      key: \"codecs\",\n      get: function get() {\n        return this.attrs.CODECS || '';\n      }\n    }, {\n      key: \"pathwayId\",\n      get: function get() {\n        return this.attrs['PATHWAY-ID'] || '.';\n      }\n    }, {\n      key: \"videoRange\",\n      get: function get() {\n        return this.attrs['VIDEO-RANGE'] || 'SDR';\n      }\n    }, {\n      key: \"score\",\n      get: function get() {\n        return this.attrs.optionalFloat('SCORE', 0);\n      }\n    }, {\n      key: \"uri\",\n      get: function get() {\n        return this.url[0] || '';\n      }\n    }, {\n      key: \"audioGroups\",\n      get: function get() {\n        return this._audioGroups;\n      }\n    }, {\n      key: \"subtitleGroups\",\n      get: function get() {\n        return this._subtitleGroups;\n      }\n    }, {\n      key: \"urlId\",\n      get: function get() {\n        return 0;\n      },\n      set: function set(value) {}\n    }, {\n      key: \"audioGroupIds\",\n      get: function get() {\n        return this.audioGroups ? [this.audioGroupId] : undefined;\n      }\n    }, {\n      key: \"textGroupIds\",\n      get: function get() {\n        return this.subtitleGroups ? [this.textGroupId] : undefined;\n      }\n    }, {\n      key: \"audioGroupId\",\n      get: function get() {\n        var _this$audioGroups;\n        return (_this$audioGroups = this.audioGroups) == null ? void 0 : _this$audioGroups[0];\n      }\n    }, {\n      key: \"textGroupId\",\n      get: function get() {\n        var _this$subtitleGroups;\n        return (_this$subtitleGroups = this.subtitleGroups) == null ? void 0 : _this$subtitleGroups[0];\n      }\n    }]);\n  }();\n  function hasGroup(groups, groupId) {\n    if (!groupId || !groups) {\n      return false;\n    }\n    return groups.indexOf(groupId) !== -1;\n  }\n\n  /**\n   * @returns Whether we can detect and validate HDR capability within the window context\n   */\n  function isHdrSupported() {\n    if (typeof matchMedia === 'function') {\n      var mediaQueryList = matchMedia('(dynamic-range: high)');\n      var badQuery = matchMedia('bad query');\n      if (mediaQueryList.media !== badQuery.media) {\n        return mediaQueryList.matches === true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Sanitizes inputs to return the active video selection options for HDR/SDR.\n   * When both inputs are null:\n   *\n   *    `{ preferHDR: false, allowedVideoRanges: [] }`\n   *\n   * When `currentVideoRange` non-null, maintain the active range:\n   *\n   *    `{ preferHDR: currentVideoRange !== 'SDR', allowedVideoRanges: [currentVideoRange] }`\n   *\n   * When VideoSelectionOption non-null:\n   *\n   *  - Allow all video ranges if `allowedVideoRanges` unspecified.\n   *  - If `preferHDR` is non-null use the value to filter `allowedVideoRanges`.\n   *  - Else check window for HDR support and set `preferHDR` to the result.\n   *\n   * @param currentVideoRange\n   * @param videoPreference\n   */\n  function getVideoSelectionOptions(currentVideoRange, videoPreference) {\n    var preferHDR = false;\n    var allowedVideoRanges = [];\n    if (currentVideoRange) {\n      preferHDR = currentVideoRange !== 'SDR';\n      allowedVideoRanges = [currentVideoRange];\n    }\n    if (videoPreference) {\n      allowedVideoRanges = videoPreference.allowedVideoRanges || VideoRangeValues.slice(0);\n      var allowAutoPreferHDR = allowedVideoRanges.join('') !== 'SDR' && !videoPreference.videoCodec;\n      preferHDR = videoPreference.preferHDR !== undefined ? videoPreference.preferHDR : allowAutoPreferHDR && isHdrSupported();\n      if (!preferHDR) {\n        allowedVideoRanges = ['SDR'];\n      }\n    }\n    return {\n      preferHDR: preferHDR,\n      allowedVideoRanges: allowedVideoRanges\n    };\n  }\n\n  var omitCircularRefsReplacer = function omitCircularRefsReplacer(replacer) {\n    var known = new WeakSet();\n    return function (_, value) {\n      if (replacer) {\n        value = replacer(_, value);\n      }\n      if (typeof value === 'object' && value !== null) {\n        if (known.has(value)) {\n          return;\n        }\n        known.add(value);\n      }\n      return value;\n    };\n  };\n  var stringify = function stringify(object, replacer) {\n    return JSON.stringify(object, omitCircularRefsReplacer(replacer));\n  };\n\n  function getStartCodecTier(codecTiers, currentVideoRange, currentBw, audioPreference, videoPreference) {\n    var codecSets = Object.keys(codecTiers);\n    var channelsPreference = audioPreference == null ? void 0 : audioPreference.channels;\n    var audioCodecPreference = audioPreference == null ? void 0 : audioPreference.audioCodec;\n    var videoCodecPreference = videoPreference == null ? void 0 : videoPreference.videoCodec;\n    var preferStereo = channelsPreference && parseInt(channelsPreference) === 2;\n    // Use first level set to determine stereo, and minimum resolution and framerate\n    var hasStereo = false;\n    var hasCurrentVideoRange = false;\n    var minHeight = Infinity;\n    var minFramerate = Infinity;\n    var minBitrate = Infinity;\n    var minIndex = Infinity;\n    var selectedScore = 0;\n    var videoRanges = [];\n    var _getVideoSelectionOpt = getVideoSelectionOptions(currentVideoRange, videoPreference),\n      preferHDR = _getVideoSelectionOpt.preferHDR,\n      allowedVideoRanges = _getVideoSelectionOpt.allowedVideoRanges;\n    var _loop = function _loop() {\n      var tier = codecTiers[codecSets[i]];\n      hasStereo || (hasStereo = tier.channels[2] > 0);\n      minHeight = Math.min(minHeight, tier.minHeight);\n      minFramerate = Math.min(minFramerate, tier.minFramerate);\n      minBitrate = Math.min(minBitrate, tier.minBitrate);\n      var matchingVideoRanges = allowedVideoRanges.filter(function (range) {\n        return tier.videoRanges[range] > 0;\n      });\n      if (matchingVideoRanges.length > 0) {\n        hasCurrentVideoRange = true;\n      }\n    };\n    for (var i = codecSets.length; i--;) {\n      _loop();\n    }\n    minHeight = isFiniteNumber(minHeight) ? minHeight : 0;\n    minFramerate = isFiniteNumber(minFramerate) ? minFramerate : 0;\n    var maxHeight = Math.max(1080, minHeight);\n    var maxFramerate = Math.max(30, minFramerate);\n    minBitrate = isFiniteNumber(minBitrate) ? minBitrate : currentBw;\n    currentBw = Math.max(minBitrate, currentBw);\n    // If there are no variants with matching preference, set currentVideoRange to undefined\n    if (!hasCurrentVideoRange) {\n      currentVideoRange = undefined;\n    }\n    var hasMultipleSets = codecSets.length > 1;\n    var codecSet = codecSets.reduce(function (selected, candidate) {\n      // Remove candiates which do not meet bitrate, default audio, stereo or channels preference, 1080p or lower, 30fps or lower, or SDR/HDR selection if present\n      var candidateTier = codecTiers[candidate];\n      if (candidate === selected) {\n        return selected;\n      }\n      videoRanges = hasCurrentVideoRange ? allowedVideoRanges.filter(function (range) {\n        return candidateTier.videoRanges[range] > 0;\n      }) : [];\n      if (hasMultipleSets) {\n        if (candidateTier.minBitrate > currentBw) {\n          logStartCodecCandidateIgnored(candidate, \"min bitrate of \" + candidateTier.minBitrate + \" > current estimate of \" + currentBw);\n          return selected;\n        }\n        if (!candidateTier.hasDefaultAudio) {\n          logStartCodecCandidateIgnored(candidate, \"no renditions with default or auto-select sound found\");\n          return selected;\n        }\n        if (audioCodecPreference && candidate.indexOf(audioCodecPreference.substring(0, 4)) % 5 !== 0) {\n          logStartCodecCandidateIgnored(candidate, \"audio codec preference \\\"\" + audioCodecPreference + \"\\\" not found\");\n          return selected;\n        }\n        if (channelsPreference && !preferStereo) {\n          if (!candidateTier.channels[channelsPreference]) {\n            logStartCodecCandidateIgnored(candidate, \"no renditions with \" + channelsPreference + \" channel sound found (channels options: \" + Object.keys(candidateTier.channels) + \")\");\n            return selected;\n          }\n        } else if ((!audioCodecPreference || preferStereo) && hasStereo && candidateTier.channels['2'] === 0) {\n          logStartCodecCandidateIgnored(candidate, \"no renditions with stereo sound found\");\n          return selected;\n        }\n        if (candidateTier.minHeight > maxHeight) {\n          logStartCodecCandidateIgnored(candidate, \"min resolution of \" + candidateTier.minHeight + \" > maximum of \" + maxHeight);\n          return selected;\n        }\n        if (candidateTier.minFramerate > maxFramerate) {\n          logStartCodecCandidateIgnored(candidate, \"min framerate of \" + candidateTier.minFramerate + \" > maximum of \" + maxFramerate);\n          return selected;\n        }\n        if (!videoRanges.some(function (range) {\n          return candidateTier.videoRanges[range] > 0;\n        })) {\n          logStartCodecCandidateIgnored(candidate, \"no variants with VIDEO-RANGE of \" + stringify(videoRanges) + \" found\");\n          return selected;\n        }\n        if (videoCodecPreference && candidate.indexOf(videoCodecPreference.substring(0, 4)) % 5 !== 0) {\n          logStartCodecCandidateIgnored(candidate, \"video codec preference \\\"\" + videoCodecPreference + \"\\\" not found\");\n          return selected;\n        }\n        if (candidateTier.maxScore < selectedScore) {\n          logStartCodecCandidateIgnored(candidate, \"max score of \" + candidateTier.maxScore + \" < selected max of \" + selectedScore);\n          return selected;\n        }\n      }\n      // Remove candiates with less preferred codecs or more errors\n      if (selected && (codecsSetSelectionPreferenceValue(candidate) >= codecsSetSelectionPreferenceValue(selected) || candidateTier.fragmentError > codecTiers[selected].fragmentError)) {\n        return selected;\n      }\n      minIndex = candidateTier.minIndex;\n      selectedScore = candidateTier.maxScore;\n      return candidate;\n    }, undefined);\n    return {\n      codecSet: codecSet,\n      videoRanges: videoRanges,\n      preferHDR: preferHDR,\n      minFramerate: minFramerate,\n      minBitrate: minBitrate,\n      minIndex: minIndex\n    };\n  }\n  function logStartCodecCandidateIgnored(codeSet, reason) {\n    logger.log(\"[abr] start candidates with \\\"\" + codeSet + \"\\\" ignored because \" + reason);\n  }\n  function getAudioTracksByGroup(allAudioTracks) {\n    return allAudioTracks.reduce(function (audioTracksByGroup, track) {\n      var trackGroup = audioTracksByGroup.groups[track.groupId];\n      if (!trackGroup) {\n        trackGroup = audioTracksByGroup.groups[track.groupId] = {\n          tracks: [],\n          channels: {\n            2: 0\n          },\n          hasDefault: false,\n          hasAutoSelect: false\n        };\n      }\n      trackGroup.tracks.push(track);\n      var channelsKey = track.channels || '2';\n      trackGroup.channels[channelsKey] = (trackGroup.channels[channelsKey] || 0) + 1;\n      trackGroup.hasDefault = trackGroup.hasDefault || track.default;\n      trackGroup.hasAutoSelect = trackGroup.hasAutoSelect || track.autoselect;\n      if (trackGroup.hasDefault) {\n        audioTracksByGroup.hasDefaultAudio = true;\n      }\n      if (trackGroup.hasAutoSelect) {\n        audioTracksByGroup.hasAutoSelectAudio = true;\n      }\n      return audioTracksByGroup;\n    }, {\n      hasDefaultAudio: false,\n      hasAutoSelectAudio: false,\n      groups: {}\n    });\n  }\n  function getCodecTiers(levels, audioTracksByGroup, minAutoLevel, maxAutoLevel) {\n    return levels.slice(minAutoLevel, maxAutoLevel + 1).reduce(function (tiers, level, index) {\n      if (!level.codecSet) {\n        return tiers;\n      }\n      var audioGroups = level.audioGroups;\n      var tier = tiers[level.codecSet];\n      if (!tier) {\n        tiers[level.codecSet] = tier = {\n          minBitrate: Infinity,\n          minHeight: Infinity,\n          minFramerate: Infinity,\n          minIndex: index,\n          maxScore: 0,\n          videoRanges: {\n            SDR: 0\n          },\n          channels: {\n            '2': 0\n          },\n          hasDefaultAudio: !audioGroups,\n          fragmentError: 0\n        };\n      }\n      tier.minBitrate = Math.min(tier.minBitrate, level.bitrate);\n      var lesserWidthOrHeight = Math.min(level.height, level.width);\n      tier.minHeight = Math.min(tier.minHeight, lesserWidthOrHeight);\n      tier.minFramerate = Math.min(tier.minFramerate, level.frameRate);\n      tier.minIndex = Math.min(tier.minIndex, index);\n      tier.maxScore = Math.max(tier.maxScore, level.score);\n      tier.fragmentError += level.fragmentError;\n      tier.videoRanges[level.videoRange] = (tier.videoRanges[level.videoRange] || 0) + 1;\n      if (audioGroups) {\n        audioGroups.forEach(function (audioGroupId) {\n          if (!audioGroupId) {\n            return;\n          }\n          var audioGroup = audioTracksByGroup.groups[audioGroupId];\n          if (!audioGroup) {\n            return;\n          }\n          // Default audio is any group with DEFAULT=YES, or if missing then any group with AUTOSELECT=YES, or all variants\n          tier.hasDefaultAudio = tier.hasDefaultAudio || audioTracksByGroup.hasDefaultAudio ? audioGroup.hasDefault : audioGroup.hasAutoSelect || !audioTracksByGroup.hasDefaultAudio && !audioTracksByGroup.hasAutoSelectAudio;\n          Object.keys(audioGroup.channels).forEach(function (channels) {\n            tier.channels[channels] = (tier.channels[channels] || 0) + audioGroup.channels[channels];\n          });\n        });\n      }\n      return tiers;\n    }, {});\n  }\n  function getBasicSelectionOption(option) {\n    if (!option) {\n      return option;\n    }\n    var _ref = option,\n      lang = _ref.lang,\n      assocLang = _ref.assocLang,\n      characteristics = _ref.characteristics,\n      channels = _ref.channels,\n      audioCodec = _ref.audioCodec;\n    return {\n      lang: lang,\n      assocLang: assocLang,\n      characteristics: characteristics,\n      channels: channels,\n      audioCodec: audioCodec\n    };\n  }\n  function findMatchingOption(option, tracks, matchPredicate) {\n    if ('attrs' in option) {\n      var index = tracks.indexOf(option);\n      if (index !== -1) {\n        return index;\n      }\n    }\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n      if (matchesOption(option, track, matchPredicate)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  function matchesOption(option, track, matchPredicate) {\n    var groupId = option.groupId,\n      name = option.name,\n      lang = option.lang,\n      assocLang = option.assocLang,\n      isDefault = option.default;\n    var forced = option.forced;\n    return (groupId === undefined || track.groupId === groupId) && (name === undefined || track.name === name) && (lang === undefined || languagesMatch(lang, track.lang)) && (lang === undefined || track.assocLang === assocLang) && (isDefault === undefined || track.default === isDefault) && (forced === undefined || track.forced === forced) && (!('characteristics' in option) || characteristicsMatch(option.characteristics || '', track.characteristics)) && (matchPredicate === undefined || matchPredicate(option, track));\n  }\n  function languagesMatch(languageA, languageB) {\n    if (languageB === void 0) {\n      languageB = '--';\n    }\n    if (languageA.length === languageB.length) {\n      return languageA === languageB;\n    }\n    return languageA.startsWith(languageB) || languageB.startsWith(languageA);\n  }\n  function characteristicsMatch(characteristicsA, characteristicsB) {\n    if (characteristicsB === void 0) {\n      characteristicsB = '';\n    }\n    var arrA = characteristicsA.split(',');\n    var arrB = characteristicsB.split(',');\n    // Expects each item to be unique:\n    return arrA.length === arrB.length && !arrA.some(function (el) {\n      return arrB.indexOf(el) === -1;\n    });\n  }\n  function audioMatchPredicate(option, track) {\n    var audioCodec = option.audioCodec,\n      channels = option.channels;\n    return (audioCodec === undefined || (track.audioCodec || '').substring(0, 4) === audioCodec.substring(0, 4)) && (channels === undefined || channels === (track.channels || '2'));\n  }\n  function findClosestLevelWithAudioGroup(option, levels, allAudioTracks, searchIndex, matchPredicate) {\n    var currentLevel = levels[searchIndex];\n    // Are there variants with same URI as current level?\n    // If so, find a match that does not require any level URI change\n    var variants = levels.reduce(function (variantMap, level, index) {\n      var uri = level.uri;\n      var renditions = variantMap[uri] || (variantMap[uri] = []);\n      renditions.push(index);\n      return variantMap;\n    }, {});\n    var renditions = variants[currentLevel.uri];\n    if (renditions.length > 1) {\n      searchIndex = Math.max.apply(Math, renditions);\n    }\n    // Find best match\n    var currentVideoRange = currentLevel.videoRange;\n    var currentFrameRate = currentLevel.frameRate;\n    var currentVideoCodec = currentLevel.codecSet.substring(0, 4);\n    var matchingVideo = searchDownAndUpList(levels, searchIndex, function (level) {\n      if (level.videoRange !== currentVideoRange || level.frameRate !== currentFrameRate || level.codecSet.substring(0, 4) !== currentVideoCodec) {\n        return false;\n      }\n      var audioGroups = level.audioGroups;\n      var tracks = allAudioTracks.filter(function (track) {\n        return !audioGroups || audioGroups.indexOf(track.groupId) !== -1;\n      });\n      return findMatchingOption(option, tracks, matchPredicate) > -1;\n    });\n    if (matchingVideo > -1) {\n      return matchingVideo;\n    }\n    return searchDownAndUpList(levels, searchIndex, function (level) {\n      var audioGroups = level.audioGroups;\n      var tracks = allAudioTracks.filter(function (track) {\n        return !audioGroups || audioGroups.indexOf(track.groupId) !== -1;\n      });\n      return findMatchingOption(option, tracks, matchPredicate) > -1;\n    });\n  }\n  function searchDownAndUpList(arr, searchIndex, predicate) {\n    for (var i = searchIndex; i > -1; i--) {\n      if (predicate(arr[i])) {\n        return i;\n      }\n    }\n    for (var _i = searchIndex + 1; _i < arr.length; _i++) {\n      if (predicate(arr[_i])) {\n        return _i;\n      }\n    }\n    return -1;\n  }\n  function useAlternateAudio(audioTrackUrl, hls) {\n    var _hls$loadLevelObj;\n    return !!audioTrackUrl && audioTrackUrl !== ((_hls$loadLevelObj = hls.loadLevelObj) == null ? void 0 : _hls$loadLevelObj.uri);\n  }\n\n  var AbrController = /*#__PURE__*/function (_Logger) {\n    function AbrController(_hls) {\n      var _this;\n      _this = _Logger.call(this, 'abr', _hls.logger) || this;\n      _this.hls = void 0;\n      _this.lastLevelLoadSec = 0;\n      _this.lastLoadedFragLevel = -1;\n      _this.firstSelection = -1;\n      _this._nextAutoLevel = -1;\n      _this.nextAutoLevelKey = '';\n      _this.audioTracksByGroup = null;\n      _this.codecTiers = null;\n      _this.timer = -1;\n      _this.fragCurrent = null;\n      _this.partCurrent = null;\n      _this.bitrateTestDelay = 0;\n      _this.rebufferNotice = -1;\n      _this.bwEstimator = void 0;\n      /*\n          This method monitors the download rate of the current fragment, and will downswitch if that fragment will not load\n          quickly enough to prevent underbuffering\n        */\n      _this._abandonRulesCheck = function (levelLoaded) {\n        var _ref;\n        var _this2 = _this,\n          frag = _this2.fragCurrent,\n          part = _this2.partCurrent,\n          hls = _this2.hls;\n        var autoLevelEnabled = hls.autoLevelEnabled,\n          media = hls.media;\n        if (!frag || !media) {\n          return;\n        }\n        var now = performance.now();\n        var stats = part ? part.stats : frag.stats;\n        var duration = part ? part.duration : frag.duration;\n        var timeLoading = now - stats.loading.start;\n        var minAutoLevel = hls.minAutoLevel;\n        var loadingFragForLevel = frag.level;\n        var currentAutoLevel = _this._nextAutoLevel;\n        // If frag loading is aborted, complete, or from lowest level, stop timer and return\n        if (stats.aborted || stats.loaded && stats.loaded === stats.total || loadingFragForLevel <= minAutoLevel) {\n          _this.clearTimer();\n          // reset forced auto level value so that next level will be selected\n          _this._nextAutoLevel = -1;\n          return;\n        }\n\n        // This check only runs if we're in ABR mode\n        if (!autoLevelEnabled) {\n          return;\n        }\n\n        // Must be loading/loaded a new level or be in a playing state\n        var fragBlockingSwitch = currentAutoLevel > -1 && currentAutoLevel !== loadingFragForLevel;\n        var levelChange = !!levelLoaded || fragBlockingSwitch;\n        if (!levelChange && (media.paused || !media.playbackRate || !media.readyState)) {\n          return;\n        }\n        var bufferInfo = hls.mainForwardBufferInfo;\n        if (!levelChange && bufferInfo === null) {\n          return;\n        }\n        var ttfbEstimate = _this.bwEstimator.getEstimateTTFB();\n        var playbackRate = Math.abs(media.playbackRate);\n        // To maintain stable adaptive playback, only begin monitoring frag loading after half or more of its playback duration has passed\n        if (timeLoading <= Math.max(ttfbEstimate, 1000 * (duration / (playbackRate * 2)))) {\n          return;\n        }\n\n        // bufferStarvationDelay is an estimate of the amount time (in seconds) it will take to exhaust the buffer\n        var bufferStarvationDelay = bufferInfo ? bufferInfo.len / playbackRate : 0;\n        var ttfb = stats.loading.first ? stats.loading.first - stats.loading.start : -1;\n        var loadedFirstByte = stats.loaded && ttfb > -1;\n        var bwEstimate = _this.getBwEstimate();\n        var levels = hls.levels;\n        var level = levels[loadingFragForLevel];\n        var expectedLen = Math.max(stats.loaded, Math.round(duration * (frag.bitrate || level.averageBitrate) / 8));\n        var timeStreaming = loadedFirstByte ? timeLoading - ttfb : timeLoading;\n        if (timeStreaming < 1 && loadedFirstByte) {\n          timeStreaming = Math.min(timeLoading, stats.loaded * 8 / bwEstimate);\n        }\n        var loadRate = loadedFirstByte ? stats.loaded * 1000 / timeStreaming : 0;\n        // fragLoadDelay is an estimate of the time (in seconds) it will take to buffer the remainder of the fragment\n        var ttfbSeconds = ttfbEstimate / 1000;\n        var fragLoadedDelay = loadRate ? (expectedLen - stats.loaded) / loadRate : expectedLen * 8 / bwEstimate + ttfbSeconds;\n        // Only downswitch if the time to finish loading the current fragment is greater than the amount of buffer left\n        if (fragLoadedDelay <= bufferStarvationDelay) {\n          return;\n        }\n        var bwe = loadRate ? loadRate * 8 : bwEstimate;\n        var live = ((_ref = (levelLoaded == null ? void 0 : levelLoaded.details) || _this.hls.latestLevelDetails) == null ? void 0 : _ref.live) === true;\n        var abrBandWidthUpFactor = _this.hls.config.abrBandWidthUpFactor;\n        var fragLevelNextLoadedDelay = Number.POSITIVE_INFINITY;\n        var nextLoadLevel;\n        // Iterate through lower level and try to find the largest one that avoids rebuffering\n        for (nextLoadLevel = loadingFragForLevel - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--) {\n          // compute time to load next fragment at lower level\n          // 8 = bits per byte (bps/Bps)\n          var levelNextBitrate = levels[nextLoadLevel].maxBitrate;\n          var requiresLevelLoad = !levels[nextLoadLevel].details || live;\n          fragLevelNextLoadedDelay = _this.getTimeToLoadFrag(ttfbSeconds, bwe, duration * levelNextBitrate, requiresLevelLoad);\n          if (fragLevelNextLoadedDelay < Math.min(bufferStarvationDelay, duration + ttfbSeconds)) {\n            break;\n          }\n        }\n        // Only emergency switch down if it takes less time to load a new fragment at lowest level instead of continuing\n        // to load the current one\n        if (fragLevelNextLoadedDelay >= fragLoadedDelay) {\n          return;\n        }\n\n        // if estimated load time of new segment is completely unreasonable, ignore and do not emergency switch down\n        if (fragLevelNextLoadedDelay > duration * 10) {\n          return;\n        }\n        if (loadedFirstByte) {\n          // If there has been loading progress, sample bandwidth using loading time offset by minimum TTFB time\n          _this.bwEstimator.sample(timeLoading - Math.min(ttfbEstimate, ttfb), stats.loaded);\n        } else {\n          // If there has been no loading progress, sample TTFB\n          _this.bwEstimator.sampleTTFB(timeLoading);\n        }\n        var nextLoadLevelBitrate = levels[nextLoadLevel].maxBitrate;\n        if (_this.getBwEstimate() * abrBandWidthUpFactor > nextLoadLevelBitrate) {\n          _this.resetEstimator(nextLoadLevelBitrate);\n        }\n        var bestSwitchLevel = _this.findBestLevel(nextLoadLevelBitrate, minAutoLevel, nextLoadLevel, 0, bufferStarvationDelay, 1, 1);\n        if (bestSwitchLevel > -1) {\n          nextLoadLevel = bestSwitchLevel;\n        }\n        _this.warn(\"Fragment \" + frag.sn + (part ? ' part ' + part.index : '') + \" of level \" + loadingFragForLevel + \" is loading too slowly;\\n      Fragment duration: \" + frag.duration.toFixed(3) + \"\\n      Time to underbuffer: \" + bufferStarvationDelay.toFixed(3) + \" s\\n      Estimated load time for current fragment: \" + fragLoadedDelay.toFixed(3) + \" s\\n      Estimated load time for down switch fragment: \" + fragLevelNextLoadedDelay.toFixed(3) + \" s\\n      TTFB estimate: \" + (ttfb | 0) + \" ms\\n      Current BW estimate: \" + (isFiniteNumber(bwEstimate) ? bwEstimate | 0 : 'Unknown') + \" bps\\n      New BW estimate: \" + (_this.getBwEstimate() | 0) + \" bps\\n      Switching to level \" + nextLoadLevel + \" @ \" + (nextLoadLevelBitrate | 0) + \" bps\");\n        hls.nextLoadLevel = hls.nextAutoLevel = nextLoadLevel;\n        _this.clearTimer();\n        var abortAndSwitch = function abortAndSwitch() {\n          // Are nextLoadLevel details available or is stream-controller still in \"WAITING_LEVEL\" state?\n          _this.clearTimer();\n          if (_this.fragCurrent === frag && _this.hls.loadLevel === nextLoadLevel && nextLoadLevel > 0) {\n            var _bufferStarvationDelay = _this.getStarvationDelay();\n            _this.warn(\"Aborting inflight request \" + (nextLoadLevel > 0 ? 'and switching down' : '') + \"\\n      Fragment duration: \" + frag.duration.toFixed(3) + \" s\\n      Time to underbuffer: \" + _bufferStarvationDelay.toFixed(3) + \" s\");\n            frag.abortRequests();\n            _this.fragCurrent = _this.partCurrent = null;\n            if (nextLoadLevel > minAutoLevel) {\n              var lowestSwitchLevel = _this.findBestLevel(_this.hls.levels[minAutoLevel].bitrate, minAutoLevel, nextLoadLevel, 0, _bufferStarvationDelay, 1, 1);\n              if (lowestSwitchLevel === -1) {\n                lowestSwitchLevel = minAutoLevel;\n              }\n              _this.hls.nextLoadLevel = _this.hls.nextAutoLevel = lowestSwitchLevel;\n              _this.resetEstimator(_this.hls.levels[lowestSwitchLevel].bitrate);\n            }\n          }\n        };\n        if (fragBlockingSwitch || fragLoadedDelay > fragLevelNextLoadedDelay * 2) {\n          abortAndSwitch();\n        } else {\n          _this.timer = self.setInterval(abortAndSwitch, fragLevelNextLoadedDelay * 1000);\n        }\n        hls.trigger(Events.FRAG_LOAD_EMERGENCY_ABORTED, {\n          frag: frag,\n          part: part,\n          stats: stats\n        });\n      };\n      _this.hls = _hls;\n      _this.bwEstimator = _this.initEstimator();\n      _this.registerListeners();\n      return _this;\n    }\n    _inheritsLoose(AbrController, _Logger);\n    var _proto = AbrController.prototype;\n    _proto.resetEstimator = function resetEstimator(abrEwmaDefaultEstimate) {\n      if (abrEwmaDefaultEstimate) {\n        this.log(\"setting initial bwe to \" + abrEwmaDefaultEstimate);\n        this.hls.config.abrEwmaDefaultEstimate = abrEwmaDefaultEstimate;\n      }\n      this.firstSelection = -1;\n      this.bwEstimator = this.initEstimator();\n    };\n    _proto.initEstimator = function initEstimator() {\n      var config = this.hls.config;\n      return new EwmaBandWidthEstimator(config.abrEwmaSlowVoD, config.abrEwmaFastVoD, config.abrEwmaDefaultEstimate);\n    };\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.FRAG_LOADING, this.onFragLoading, this);\n      hls.on(Events.FRAG_LOADED, this.onFragLoaded, this);\n      hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n      hls.on(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n      hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n      hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n      hls.on(Events.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this);\n      hls.on(Events.ERROR, this.onError, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      if (!hls) {\n        return;\n      }\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.FRAG_LOADING, this.onFragLoading, this);\n      hls.off(Events.FRAG_LOADED, this.onFragLoaded, this);\n      hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n      hls.off(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n      hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n      hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n      hls.off(Events.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this);\n      hls.off(Events.ERROR, this.onError, this);\n    };\n    _proto.destroy = function destroy() {\n      this.unregisterListeners();\n      this.clearTimer();\n      // @ts-ignore\n      this.hls = this._abandonRulesCheck = null;\n      this.fragCurrent = this.partCurrent = null;\n    };\n    _proto.onManifestLoading = function onManifestLoading(event, data) {\n      this.lastLoadedFragLevel = -1;\n      this.firstSelection = -1;\n      this.lastLevelLoadSec = 0;\n      this.fragCurrent = this.partCurrent = null;\n      this.onLevelsUpdated();\n      this.clearTimer();\n    };\n    _proto.onLevelsUpdated = function onLevelsUpdated() {\n      if (this.lastLoadedFragLevel > -1 && this.fragCurrent) {\n        this.lastLoadedFragLevel = this.fragCurrent.level;\n      }\n      this._nextAutoLevel = -1;\n      this.onMaxAutoLevelUpdated();\n      this.codecTiers = null;\n      this.audioTracksByGroup = null;\n    };\n    _proto.onMaxAutoLevelUpdated = function onMaxAutoLevelUpdated() {\n      this.firstSelection = -1;\n      this.nextAutoLevelKey = '';\n    };\n    _proto.onFragLoading = function onFragLoading(event, data) {\n      var frag = data.frag;\n      if (this.ignoreFragment(frag)) {\n        return;\n      }\n      if (!frag.bitrateTest) {\n        var _data$part;\n        this.fragCurrent = frag;\n        this.partCurrent = (_data$part = data.part) != null ? _data$part : null;\n      }\n      this.clearTimer();\n      this.timer = self.setInterval(this._abandonRulesCheck, 100);\n    };\n    _proto.onLevelSwitching = function onLevelSwitching(event, data) {\n      this.clearTimer();\n    };\n    _proto.onError = function onError(event, data) {\n      if (data.fatal) {\n        return;\n      }\n      switch (data.details) {\n        case ErrorDetails.BUFFER_ADD_CODEC_ERROR:\n        case ErrorDetails.BUFFER_APPEND_ERROR:\n          // Reset last loaded level so that a new selection can be made after calling recoverMediaError\n          this.lastLoadedFragLevel = -1;\n          this.firstSelection = -1;\n          break;\n        case ErrorDetails.FRAG_LOAD_TIMEOUT:\n          {\n            var frag = data.frag;\n            var fragCurrent = this.fragCurrent,\n              part = this.partCurrent;\n            if (frag && fragCurrent && frag.sn === fragCurrent.sn && frag.level === fragCurrent.level) {\n              var now = performance.now();\n              var stats = part ? part.stats : frag.stats;\n              var timeLoading = now - stats.loading.start;\n              var ttfb = stats.loading.first ? stats.loading.first - stats.loading.start : -1;\n              var loadedFirstByte = stats.loaded && ttfb > -1;\n              if (loadedFirstByte) {\n                var ttfbEstimate = this.bwEstimator.getEstimateTTFB();\n                this.bwEstimator.sample(timeLoading - Math.min(ttfbEstimate, ttfb), stats.loaded);\n              } else {\n                this.bwEstimator.sampleTTFB(timeLoading);\n              }\n            }\n            break;\n          }\n      }\n    };\n    _proto.getTimeToLoadFrag = function getTimeToLoadFrag(timeToFirstByteSec, bandwidth, fragSizeBits, isSwitch) {\n      var fragLoadSec = timeToFirstByteSec + fragSizeBits / bandwidth;\n      var playlistLoadSec = isSwitch ? timeToFirstByteSec + this.lastLevelLoadSec : 0;\n      return fragLoadSec + playlistLoadSec;\n    };\n    _proto.onLevelLoaded = function onLevelLoaded(event, data) {\n      var config = this.hls.config;\n      var loading = data.stats.loading;\n      var timeLoadingMs = loading.end - loading.first;\n      if (isFiniteNumber(timeLoadingMs)) {\n        this.lastLevelLoadSec = timeLoadingMs / 1000;\n      }\n      if (data.details.live) {\n        this.bwEstimator.update(config.abrEwmaSlowLive, config.abrEwmaFastLive);\n      } else {\n        this.bwEstimator.update(config.abrEwmaSlowVoD, config.abrEwmaFastVoD);\n      }\n      if (this.timer > -1) {\n        this._abandonRulesCheck(data.levelInfo);\n      }\n    };\n    _proto.onFragLoaded = function onFragLoaded(event, _ref2) {\n      var frag = _ref2.frag,\n        part = _ref2.part;\n      var stats = part ? part.stats : frag.stats;\n      if (frag.type === PlaylistLevelType.MAIN) {\n        this.bwEstimator.sampleTTFB(stats.loading.first - stats.loading.start);\n      }\n      if (this.ignoreFragment(frag)) {\n        return;\n      }\n      // stop monitoring bw once frag loaded\n      this.clearTimer();\n      // reset forced auto level value so that next level will be selected\n      if (frag.level === this._nextAutoLevel) {\n        this._nextAutoLevel = -1;\n      }\n      this.firstSelection = -1;\n\n      // compute level average bitrate\n      if (this.hls.config.abrMaxWithRealBitrate) {\n        var duration = part ? part.duration : frag.duration;\n        var level = this.hls.levels[frag.level];\n        var loadedBytes = (level.loaded ? level.loaded.bytes : 0) + stats.loaded;\n        var loadedDuration = (level.loaded ? level.loaded.duration : 0) + duration;\n        level.loaded = {\n          bytes: loadedBytes,\n          duration: loadedDuration\n        };\n        level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);\n      }\n      if (frag.bitrateTest) {\n        var fragBufferedData = {\n          stats: stats,\n          frag: frag,\n          part: part,\n          id: frag.type\n        };\n        this.onFragBuffered(Events.FRAG_BUFFERED, fragBufferedData);\n        frag.bitrateTest = false;\n      } else {\n        // store level id after successful fragment load for playback\n        this.lastLoadedFragLevel = frag.level;\n      }\n    };\n    _proto.onFragBuffered = function onFragBuffered(event, data) {\n      var frag = data.frag,\n        part = data.part;\n      var stats = part != null && part.stats.loaded ? part.stats : frag.stats;\n      if (stats.aborted) {\n        return;\n      }\n      if (this.ignoreFragment(frag)) {\n        return;\n      }\n      // Use the difference between parsing and request instead of buffering and request to compute fragLoadingProcessing;\n      // rationale is that buffer appending only happens once media is attached. This can happen when config.startFragPrefetch\n      // is used. If we used buffering in that case, our BW estimate sample will be very large.\n      var processingMs = stats.parsing.end - stats.loading.start - Math.min(stats.loading.first - stats.loading.start, this.bwEstimator.getEstimateTTFB());\n      this.bwEstimator.sample(processingMs, stats.loaded);\n      stats.bwEstimate = this.getBwEstimate();\n      if (frag.bitrateTest) {\n        this.bitrateTestDelay = processingMs / 1000;\n      } else {\n        this.bitrateTestDelay = 0;\n      }\n    };\n    _proto.ignoreFragment = function ignoreFragment(frag) {\n      // Only count non-alt-audio frags which were actually buffered in our BW calculations\n      return frag.type !== PlaylistLevelType.MAIN || frag.sn === 'initSegment';\n    };\n    _proto.clearTimer = function clearTimer() {\n      if (this.timer > -1) {\n        self.clearInterval(this.timer);\n        this.timer = -1;\n      }\n    };\n    _proto.getAutoLevelKey = function getAutoLevelKey() {\n      return this.getBwEstimate() + \"_\" + this.getStarvationDelay().toFixed(2);\n    };\n    _proto.getNextABRAutoLevel = function getNextABRAutoLevel() {\n      var fragCurrent = this.fragCurrent,\n        partCurrent = this.partCurrent,\n        hls = this.hls;\n      if (hls.levels.length <= 1) {\n        return hls.loadLevel;\n      }\n      var maxAutoLevel = hls.maxAutoLevel,\n        config = hls.config,\n        minAutoLevel = hls.minAutoLevel;\n      var currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;\n      var avgbw = this.getBwEstimate();\n      // bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.\n      var bufferStarvationDelay = this.getStarvationDelay();\n      var bwFactor = config.abrBandWidthFactor;\n      var bwUpFactor = config.abrBandWidthUpFactor;\n\n      // First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all\n      if (bufferStarvationDelay) {\n        var _bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, 0, bwFactor, bwUpFactor);\n        if (_bestLevel >= 0) {\n          this.rebufferNotice = -1;\n          return _bestLevel;\n        }\n      }\n      // not possible to get rid of rebuffering... try to find level that will guarantee less than maxStarvationDelay of rebuffering\n      var maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxStarvationDelay) : config.maxStarvationDelay;\n      if (!bufferStarvationDelay) {\n        // in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test\n        var bitrateTestDelay = this.bitrateTestDelay;\n        if (bitrateTestDelay) {\n          // if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value\n          // max video loading delay used in  automatic start level selection :\n          // in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +\n          // the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )\n          // cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration\n          var maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxLoadingDelay) : config.maxLoadingDelay;\n          maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;\n          this.info(\"bitrate test took \" + Math.round(1000 * bitrateTestDelay) + \"ms, set first fragment max fetchDuration to \" + Math.round(1000 * maxStarvationDelay) + \" ms\");\n          // don't use conservative factor on bitrate test\n          bwFactor = bwUpFactor = 1;\n        }\n      }\n      var bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, maxStarvationDelay, bwFactor, bwUpFactor);\n      if (this.rebufferNotice !== bestLevel) {\n        this.rebufferNotice = bestLevel;\n        this.info((bufferStarvationDelay ? 'rebuffering expected' : 'buffer is empty') + \", optimal quality level \" + bestLevel);\n      }\n      if (bestLevel > -1) {\n        return bestLevel;\n      }\n      // If no matching level found, see if min auto level would be a better option\n      var minLevel = hls.levels[minAutoLevel];\n      var autoLevel = hls.loadLevelObj;\n      if (autoLevel && (minLevel == null ? void 0 : minLevel.bitrate) < autoLevel.bitrate) {\n        return minAutoLevel;\n      }\n      // or if bitrate is not lower, continue to use loadLevel\n      return hls.loadLevel;\n    };\n    _proto.getStarvationDelay = function getStarvationDelay() {\n      var hls = this.hls;\n      var media = hls.media;\n      if (!media) {\n        return Infinity;\n      }\n      // playbackRate is the absolute value of the playback rate; if media.playbackRate is 0, we use 1 to load as\n      // if we're playing back at the normal rate.\n      var playbackRate = media && media.playbackRate !== 0 ? Math.abs(media.playbackRate) : 1.0;\n      var bufferInfo = hls.mainForwardBufferInfo;\n      return (bufferInfo ? bufferInfo.len : 0) / playbackRate;\n    };\n    _proto.getBwEstimate = function getBwEstimate() {\n      return this.bwEstimator.canEstimate() ? this.bwEstimator.getEstimate() : this.hls.config.abrEwmaDefaultEstimate;\n    };\n    _proto.findBestLevel = function findBestLevel(currentBw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, maxStarvationDelay, bwFactor, bwUpFactor) {\n      var _this$hls$latestLevel,\n        _this3 = this;\n      var maxFetchDuration = bufferStarvationDelay + maxStarvationDelay;\n      var lastLoadedFragLevel = this.lastLoadedFragLevel;\n      var selectionBaseLevel = lastLoadedFragLevel === -1 ? this.hls.firstLevel : lastLoadedFragLevel;\n      var fragCurrent = this.fragCurrent,\n        partCurrent = this.partCurrent;\n      var _this$hls = this.hls,\n        levels = _this$hls.levels,\n        allAudioTracks = _this$hls.allAudioTracks,\n        loadLevel = _this$hls.loadLevel,\n        config = _this$hls.config;\n      if (levels.length === 1) {\n        return 0;\n      }\n      var level = levels[selectionBaseLevel];\n      var live = !!((_this$hls$latestLevel = this.hls.latestLevelDetails) != null && _this$hls$latestLevel.live);\n      var firstSelection = loadLevel === -1 || lastLoadedFragLevel === -1;\n      var currentCodecSet;\n      var currentVideoRange = 'SDR';\n      var currentFrameRate = (level == null ? void 0 : level.frameRate) || 0;\n      var audioPreference = config.audioPreference,\n        videoPreference = config.videoPreference;\n      var audioTracksByGroup = this.audioTracksByGroup || (this.audioTracksByGroup = getAudioTracksByGroup(allAudioTracks));\n      var minStartIndex = -1;\n      if (firstSelection) {\n        if (this.firstSelection !== -1) {\n          return this.firstSelection;\n        }\n        var codecTiers = this.codecTiers || (this.codecTiers = getCodecTiers(levels, audioTracksByGroup, minAutoLevel, maxAutoLevel));\n        var startTier = getStartCodecTier(codecTiers, currentVideoRange, currentBw, audioPreference, videoPreference);\n        var codecSet = startTier.codecSet,\n          videoRanges = startTier.videoRanges,\n          minFramerate = startTier.minFramerate,\n          minBitrate = startTier.minBitrate,\n          minIndex = startTier.minIndex,\n          preferHDR = startTier.preferHDR;\n        minStartIndex = minIndex;\n        currentCodecSet = codecSet;\n        currentVideoRange = preferHDR ? videoRanges[videoRanges.length - 1] : videoRanges[0];\n        currentFrameRate = minFramerate;\n        currentBw = Math.max(currentBw, minBitrate);\n        this.log(\"picked start tier \" + stringify(startTier));\n      } else {\n        currentCodecSet = level == null ? void 0 : level.codecSet;\n        currentVideoRange = level == null ? void 0 : level.videoRange;\n      }\n      var currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;\n      var ttfbEstimateSec = this.bwEstimator.getEstimateTTFB() / 1000;\n      var levelsSkipped = [];\n      var _loop = function _loop() {\n          var _levelInfo$supportedR;\n          var levelInfo = levels[i];\n          var upSwitch = i > selectionBaseLevel;\n          if (!levelInfo) {\n            return 0; // continue\n          }\n          if (config.useMediaCapabilities && !levelInfo.supportedResult && !levelInfo.supportedPromise) {\n            var mediaCapabilities = navigator.mediaCapabilities;\n            if (typeof (mediaCapabilities == null ? void 0 : mediaCapabilities.decodingInfo) === 'function' && (requiresMediaCapabilitiesDecodingInfo(levelInfo, audioTracksByGroup, currentVideoRange, currentFrameRate, currentBw, audioPreference) || isHEVC(levelInfo.videoCodec)) // Force media capabilities check for HEVC to avoid failure on Windows\n            ) {\n              levelInfo.supportedPromise = getMediaDecodingInfoPromise(levelInfo, audioTracksByGroup, mediaCapabilities);\n              levelInfo.supportedPromise.then(function (decodingInfo) {\n                if (!_this3.hls) {\n                  return;\n                }\n                levelInfo.supportedResult = decodingInfo;\n                var levels = _this3.hls.levels;\n                var index = levels.indexOf(levelInfo);\n                if (decodingInfo.error) {\n                  _this3.warn(\"MediaCapabilities decodingInfo error: \\\"\" + decodingInfo.error + \"\\\" for level \" + index + \" \" + stringify(decodingInfo));\n                } else if (!decodingInfo.supported) {\n                  _this3.warn(\"Unsupported MediaCapabilities decodingInfo result for level \" + index + \" \" + stringify(decodingInfo));\n                  if (index > -1 && levels.length > 1) {\n                    _this3.log(\"Removing unsupported level \" + index);\n                    _this3.hls.removeLevel(index);\n                    if (_this3.hls.loadLevel === -1) {\n                      _this3.hls.nextLoadLevel = 0;\n                    }\n                  }\n                }\n              });\n            } else {\n              levelInfo.supportedResult = SUPPORTED_INFO_DEFAULT;\n            }\n          }\n\n          // skip candidates which change codec-family or video-range,\n          // and which decrease or increase frame-rate for up and down-switch respectfully\n          if (currentCodecSet && levelInfo.codecSet !== currentCodecSet || currentVideoRange && levelInfo.videoRange !== currentVideoRange || upSwitch && currentFrameRate > levelInfo.frameRate || !upSwitch && currentFrameRate > 0 && currentFrameRate < levelInfo.frameRate || levelInfo.supportedResult && !((_levelInfo$supportedR = levelInfo.supportedResult.decodingInfoResults) != null && _levelInfo$supportedR[0].smooth)) {\n            if (!firstSelection || i !== minStartIndex) {\n              levelsSkipped.push(i);\n              return 0; // continue\n            }\n          }\n          var levelDetails = levelInfo.details;\n          var avgDuration = (partCurrent ? levelDetails == null ? void 0 : levelDetails.partTarget : levelDetails == null ? void 0 : levelDetails.averagetargetduration) || currentFragDuration;\n          var adjustedbw;\n          // follow algorithm captured from stagefright :\n          // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp\n          // Pick the highest bandwidth stream below or equal to estimated bandwidth.\n          // consider only 80% of the available bandwidth, but if we are switching up,\n          // be even more conservative (70%) to avoid overestimating and immediately\n          // switching back.\n          if (!upSwitch) {\n            adjustedbw = bwFactor * currentBw;\n          } else {\n            adjustedbw = bwUpFactor * currentBw;\n          }\n\n          // Use average bitrate when starvation delay (buffer length) is gt or eq two segment durations and rebuffering is not expected (maxStarvationDelay > 0)\n          var bitrate = currentFragDuration && bufferStarvationDelay >= currentFragDuration * 2 && maxStarvationDelay === 0 ? levelInfo.averageBitrate : levelInfo.maxBitrate;\n          var fetchDuration = _this3.getTimeToLoadFrag(ttfbEstimateSec, adjustedbw, bitrate * avgDuration, levelDetails === undefined);\n          var canSwitchWithinTolerance =\n          // if adjusted bw is greater than level bitrate AND\n          adjustedbw >= bitrate && (\n          // no level change, or new level has no error history\n          i === lastLoadedFragLevel || levelInfo.loadError === 0 && levelInfo.fragmentError === 0) && (\n          // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches\n          // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...\n          // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that findBestLevel will return -1\n          fetchDuration <= ttfbEstimateSec || !isFiniteNumber(fetchDuration) || live && !_this3.bitrateTestDelay || fetchDuration < maxFetchDuration);\n          if (canSwitchWithinTolerance) {\n            var forcedAutoLevel = _this3.forcedAutoLevel;\n            if (i !== loadLevel && (forcedAutoLevel === -1 || forcedAutoLevel !== loadLevel)) {\n              if (levelsSkipped.length) {\n                _this3.trace(\"Skipped level(s) \" + levelsSkipped.join(',') + \" of \" + maxAutoLevel + \" max with CODECS and VIDEO-RANGE:\\\"\" + levels[levelsSkipped[0]].codecs + \"\\\" \" + levels[levelsSkipped[0]].videoRange + \"; not compatible with \\\"\" + currentCodecSet + \"\\\" \" + currentVideoRange);\n              }\n              _this3.info(\"switch candidate:\" + selectionBaseLevel + \"->\" + i + \" adjustedbw(\" + Math.round(adjustedbw) + \")-bitrate=\" + Math.round(adjustedbw - bitrate) + \" ttfb:\" + ttfbEstimateSec.toFixed(1) + \" avgDuration:\" + avgDuration.toFixed(1) + \" maxFetchDuration:\" + maxFetchDuration.toFixed(1) + \" fetchDuration:\" + fetchDuration.toFixed(1) + \" firstSelection:\" + firstSelection + \" codecSet:\" + levelInfo.codecSet + \" videoRange:\" + levelInfo.videoRange + \" hls.loadLevel:\" + loadLevel);\n            }\n            if (firstSelection) {\n              _this3.firstSelection = i;\n            }\n            // as we are looping from highest to lowest, this will return the best achievable quality level\n            return {\n              v: i\n            };\n          }\n        },\n        _ret;\n      for (var i = maxAutoLevel; i >= minAutoLevel; i--) {\n        _ret = _loop();\n        if (_ret === 0) continue;\n        if (_ret) return _ret.v;\n      }\n      // not enough time budget even with quality level 0 ... rebuffering might happen\n      return -1;\n    };\n    _proto.deriveNextAutoLevel = function deriveNextAutoLevel(nextLevel) {\n      var _this$hls2 = this.hls,\n        maxAutoLevel = _this$hls2.maxAutoLevel,\n        minAutoLevel = _this$hls2.minAutoLevel;\n      return Math.min(Math.max(nextLevel, minAutoLevel), maxAutoLevel);\n    };\n    return _createClass(AbrController, [{\n      key: \"firstAutoLevel\",\n      get: function get() {\n        var _this$hls3 = this.hls,\n          maxAutoLevel = _this$hls3.maxAutoLevel,\n          minAutoLevel = _this$hls3.minAutoLevel;\n        var bwEstimate = this.getBwEstimate();\n        var maxStartDelay = this.hls.config.maxStarvationDelay;\n        var abrAutoLevel = this.findBestLevel(bwEstimate, minAutoLevel, maxAutoLevel, 0, maxStartDelay, 1, 1);\n        if (abrAutoLevel > -1) {\n          return abrAutoLevel;\n        }\n        var firstLevel = this.hls.firstLevel;\n        var clamped = Math.min(Math.max(firstLevel, minAutoLevel), maxAutoLevel);\n        this.warn(\"Could not find best starting auto level. Defaulting to first in playlist \" + firstLevel + \" clamped to \" + clamped);\n        return clamped;\n      }\n    }, {\n      key: \"forcedAutoLevel\",\n      get: function get() {\n        if (this.nextAutoLevelKey) {\n          return -1;\n        }\n        return this._nextAutoLevel;\n      }\n\n      // return next auto level\n    }, {\n      key: \"nextAutoLevel\",\n      get: function get() {\n        var forcedAutoLevel = this.forcedAutoLevel;\n        var bwEstimator = this.bwEstimator;\n        var useEstimate = bwEstimator.canEstimate();\n        var loadedFirstFrag = this.lastLoadedFragLevel > -1;\n        // in case next auto level has been forced, and bw not available or not reliable, return forced value\n        if (forcedAutoLevel !== -1 && (!useEstimate || !loadedFirstFrag || this.nextAutoLevelKey === this.getAutoLevelKey())) {\n          return forcedAutoLevel;\n        }\n\n        // compute next level using ABR logic\n        var nextABRAutoLevel = useEstimate && loadedFirstFrag ? this.getNextABRAutoLevel() : this.firstAutoLevel;\n\n        // use forced auto level while it hasn't errored more than ABR selection\n        if (forcedAutoLevel !== -1) {\n          var levels = this.hls.levels;\n          if (levels.length > Math.max(forcedAutoLevel, nextABRAutoLevel) && levels[forcedAutoLevel].loadError <= levels[nextABRAutoLevel].loadError) {\n            return forcedAutoLevel;\n          }\n        }\n\n        // save result until state has changed\n        this._nextAutoLevel = nextABRAutoLevel;\n        this.nextAutoLevelKey = this.getAutoLevelKey();\n        return nextABRAutoLevel;\n      },\n      set: function set(nextLevel) {\n        var value = this.deriveNextAutoLevel(nextLevel);\n        if (this._nextAutoLevel !== value) {\n          this.nextAutoLevelKey = '';\n          this._nextAutoLevel = value;\n        }\n      }\n    }]);\n  }(Logger);\n\n  var BinarySearch = {\n    /**\n     * Searches for an item in an array which matches a certain condition.\n     * This requires the condition to only match one item in the array,\n     * and for the array to be ordered.\n     *\n     * @param list The array to search.\n     * @param comparisonFn\n     *      Called and provided a candidate item as the first argument.\n     *      Should return:\n     *          > -1 if the item should be located at a lower index than the provided item.\n     *          > 1 if the item should be located at a higher index than the provided item.\n     *          > 0 if the item is the item you're looking for.\n     *\n     * @returns the object if found, otherwise returns null\n     */\n    search: function search(list, comparisonFn) {\n      var minIndex = 0;\n      var maxIndex = list.length - 1;\n      var currentIndex = null;\n      var currentElement = null;\n      while (minIndex <= maxIndex) {\n        currentIndex = (minIndex + maxIndex) / 2 | 0;\n        currentElement = list[currentIndex];\n        var comparisonResult = comparisonFn(currentElement);\n        if (comparisonResult > 0) {\n          minIndex = currentIndex + 1;\n        } else if (comparisonResult < 0) {\n          maxIndex = currentIndex - 1;\n        } else {\n          return currentElement;\n        }\n      }\n      return null;\n    }\n  };\n\n  /**\n   * Returns first fragment whose endPdt value exceeds the given PDT, or null.\n   * @param fragments - The array of candidate fragments\n   * @param PDTValue - The PDT value which must be exceeded\n   * @param maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous\n   */\n  function findFragmentByPDT(fragments, PDTValue, maxFragLookUpTolerance) {\n    if (PDTValue === null || !Array.isArray(fragments) || !fragments.length || !isFiniteNumber(PDTValue)) {\n      return null;\n    }\n\n    // if less than start\n    var startPDT = fragments[0].programDateTime;\n    if (PDTValue < (startPDT || 0)) {\n      return null;\n    }\n    var endPDT = fragments[fragments.length - 1].endProgramDateTime;\n    if (PDTValue >= (endPDT || 0)) {\n      return null;\n    }\n    for (var seg = 0; seg < fragments.length; ++seg) {\n      var frag = fragments[seg];\n      if (pdtWithinToleranceTest(PDTValue, maxFragLookUpTolerance, frag)) {\n        return frag;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Finds a fragment based on the SN of the previous fragment; or based on the needs of the current buffer.\n   * This method compensates for small buffer gaps by applying a tolerance to the start of any candidate fragment, thus\n   * breaking any traps which would cause the same fragment to be continuously selected within a small range.\n   * @param fragPrevious - The last frag successfully appended\n   * @param fragments - The array of candidate fragments\n   * @param bufferEnd - The end of the contiguous buffered range the playhead is currently within\n   * @param maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous\n   * @returns a matching fragment or null\n   */\n  function findFragmentByPTS(fragPrevious, fragments, bufferEnd, maxFragLookUpTolerance, nextFragLookupTolerance) {\n    if (bufferEnd === void 0) {\n      bufferEnd = 0;\n    }\n    if (maxFragLookUpTolerance === void 0) {\n      maxFragLookUpTolerance = 0;\n    }\n    if (nextFragLookupTolerance === void 0) {\n      nextFragLookupTolerance = 0.005;\n    }\n    var fragNext = null;\n    if (fragPrevious) {\n      fragNext = fragments[1 + fragPrevious.sn - fragments[0].sn] || null;\n      // check for buffer-end rounding error\n      var bufferEdgeError = fragPrevious.endDTS - bufferEnd;\n      if (bufferEdgeError > 0 && bufferEdgeError < 0.0000015) {\n        bufferEnd += 0.0000015;\n      }\n      if (fragNext && fragPrevious.level !== fragNext.level && fragNext.end <= fragPrevious.end) {\n        fragNext = fragments[2 + fragPrevious.sn - fragments[0].sn] || null;\n      }\n    } else if (bufferEnd === 0 && fragments[0].start === 0) {\n      fragNext = fragments[0];\n    }\n    // Prefer the next fragment if it's within tolerance\n    if (fragNext && ((!fragPrevious || fragPrevious.level === fragNext.level) && fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext) === 0 || fragmentWithinFastStartSwitch(fragNext, fragPrevious, Math.min(nextFragLookupTolerance, maxFragLookUpTolerance)))) {\n      return fragNext;\n    }\n    // We might be seeking past the tolerance so find the best match\n    var foundFragment = BinarySearch.search(fragments, fragmentWithinToleranceTest.bind(null, bufferEnd, maxFragLookUpTolerance));\n    if (foundFragment && (foundFragment !== fragPrevious || !fragNext)) {\n      return foundFragment;\n    }\n    // If no match was found return the next fragment after fragPrevious, or null\n    return fragNext;\n  }\n  function fragmentWithinFastStartSwitch(fragNext, fragPrevious, nextFragLookupTolerance) {\n    if (fragPrevious && fragPrevious.start === 0 && fragPrevious.level < fragNext.level && (fragPrevious.endPTS || 0) > 0) {\n      var firstDuration = fragPrevious.tagList.reduce(function (duration, tag) {\n        if (tag[0] === 'INF') {\n          duration += parseFloat(tag[1]);\n        }\n        return duration;\n      }, nextFragLookupTolerance);\n      return fragNext.start <= firstDuration;\n    }\n    return false;\n  }\n\n  /**\n   * The test function used by the findFragmentBySn's BinarySearch to look for the best match to the current buffer conditions.\n   * @param candidate - The fragment to test\n   * @param bufferEnd - The end of the current buffered range the playhead is currently within\n   * @param maxFragLookUpTolerance - The amount of time that a fragment's start can be within in order to be considered contiguous\n   * @returns 0 if it matches, 1 if too low, -1 if too high\n   */\n  function fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, candidate) {\n    if (bufferEnd === void 0) {\n      bufferEnd = 0;\n    }\n    if (maxFragLookUpTolerance === void 0) {\n      maxFragLookUpTolerance = 0;\n    }\n    // eagerly accept an accurate match (no tolerance)\n    if (candidate.start <= bufferEnd && candidate.start + candidate.duration > bufferEnd) {\n      return 0;\n    }\n    // offset should be within fragment boundary - config.maxFragLookUpTolerance\n    // this is to cope with situations like\n    // bufferEnd = 9.991\n    // frag[Ø] : [0,10]\n    // frag[1] : [10,20]\n    // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here\n    //              frag start               frag start+duration\n    //                  |-----------------------------|\n    //              <--->                         <--->\n    //  ...--------><-----------------------------><---------....\n    // previous frag         matching fragment         next frag\n    //  return -1             return 0                 return 1\n    // logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);\n    // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments\n    var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0));\n    if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {\n      return 1;\n    } else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {\n      // if maxFragLookUpTolerance will have negative value then don't return -1 for first element\n      return -1;\n    }\n    return 0;\n  }\n\n  /**\n   * The test function used by the findFragmentByPdt's BinarySearch to look for the best match to the current buffer conditions.\n   * This function tests the candidate's program date time values, as represented in Unix time\n   * @param candidate - The fragment to test\n   * @param pdtBufferEnd - The Unix time representing the end of the current buffered range\n   * @param maxFragLookUpTolerance - The amount of time that a fragment's start can be within in order to be considered contiguous\n   * @returns true if contiguous, false otherwise\n   */\n  function pdtWithinToleranceTest(pdtBufferEnd, maxFragLookUpTolerance, candidate) {\n    var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0)) * 1000;\n\n    // endProgramDateTime can be null, default to zero\n    var endProgramDateTime = candidate.endProgramDateTime || 0;\n    return endProgramDateTime - candidateLookupTolerance > pdtBufferEnd;\n  }\n  function findNearestWithCC(details, cc, pos) {\n    if (details) {\n      if (details.startCC <= cc && details.endCC >= cc) {\n        var fragments = details.fragments;\n        var fragmentHint = details.fragmentHint;\n        if (fragmentHint) {\n          fragments = fragments.concat(fragmentHint);\n        }\n        var closest;\n        BinarySearch.search(fragments, function (candidate) {\n          if (candidate.cc < cc) {\n            return 1;\n          }\n          if (candidate.cc > cc) {\n            return -1;\n          }\n          closest = candidate;\n          if (candidate.end <= pos) {\n            return 1;\n          }\n          if (candidate.start > pos) {\n            return -1;\n          }\n          return 0;\n        });\n        return closest || null;\n      }\n    }\n    return null;\n  }\n\n  function isTimeoutError(error) {\n    switch (error.details) {\n      case ErrorDetails.FRAG_LOAD_TIMEOUT:\n      case ErrorDetails.KEY_LOAD_TIMEOUT:\n      case ErrorDetails.LEVEL_LOAD_TIMEOUT:\n      case ErrorDetails.MANIFEST_LOAD_TIMEOUT:\n        return true;\n    }\n    return false;\n  }\n  function getRetryConfig(loadPolicy, error) {\n    var isTimeout = isTimeoutError(error);\n    return loadPolicy.default[(isTimeout ? 'timeout' : 'error') + \"Retry\"];\n  }\n  function getRetryDelay(retryConfig, retryCount) {\n    // exponential backoff capped to max retry delay\n    var backoffFactor = retryConfig.backoff === 'linear' ? 1 : Math.pow(2, retryCount);\n    return Math.min(backoffFactor * retryConfig.retryDelayMs, retryConfig.maxRetryDelayMs);\n  }\n  function getLoaderConfigWithoutReties(loderConfig) {\n    return _objectSpread2(_objectSpread2({}, loderConfig), {\n      errorRetry: null,\n      timeoutRetry: null\n    });\n  }\n  function shouldRetry(retryConfig, retryCount, isTimeout, loaderResponse) {\n    if (!retryConfig) {\n      return false;\n    }\n    var httpStatus = loaderResponse == null ? void 0 : loaderResponse.code;\n    var retry = retryCount < retryConfig.maxNumRetry && (retryForHttpStatus(httpStatus) || !!isTimeout);\n    return retryConfig.shouldRetry ? retryConfig.shouldRetry(retryConfig, retryCount, isTimeout, loaderResponse, retry) : retry;\n  }\n  function retryForHttpStatus(httpStatus) {\n    // Do not retry on status 4xx, status 0 (CORS error), or undefined (decrypt/gap/parse error)\n    return httpStatus === 0 && navigator.onLine === false || !!httpStatus && (httpStatus < 400 || httpStatus > 499);\n  }\n\n  var NetworkErrorAction = {\n    DoNothing: 0,\n    SendAlternateToPenaltyBox: 2,\n    RemoveAlternatePermanently: 3,\n    RetryRequest: 5\n  };\n  var ErrorActionFlags = {\n    None: 0,\n    MoveAllAlternatesMatchingHost: 1,\n    MoveAllAlternatesMatchingHDCP: 2};\n  var ErrorController = /*#__PURE__*/function (_Logger) {\n    function ErrorController(hls) {\n      var _this;\n      _this = _Logger.call(this, 'error-controller', hls.logger) || this;\n      _this.hls = void 0;\n      _this.playlistError = 0;\n      _this.penalizedRenditions = {};\n      _this.hls = hls;\n      _this.registerListeners();\n      return _this;\n    }\n    _inheritsLoose(ErrorController, _Logger);\n    var _proto = ErrorController.prototype;\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.ERROR, this.onError, this);\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      if (!hls) {\n        return;\n      }\n      hls.off(Events.ERROR, this.onError, this);\n      hls.off(Events.ERROR, this.onErrorOut, this);\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n    };\n    _proto.destroy = function destroy() {\n      this.unregisterListeners();\n      // @ts-ignore\n      this.hls = null;\n      this.penalizedRenditions = {};\n    };\n    _proto.startLoad = function startLoad(startPosition) {};\n    _proto.stopLoad = function stopLoad() {\n      this.playlistError = 0;\n    };\n    _proto.getVariantLevelIndex = function getVariantLevelIndex(frag) {\n      return (frag == null ? void 0 : frag.type) === PlaylistLevelType.MAIN ? frag.level : this.hls.loadLevel;\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      this.playlistError = 0;\n      this.penalizedRenditions = {};\n    };\n    _proto.onLevelUpdated = function onLevelUpdated() {\n      this.playlistError = 0;\n    };\n    _proto.onError = function onError(event, data) {\n      var _data$frag;\n      if (data.fatal) {\n        return;\n      }\n      var hls = this.hls;\n      var context = data.context;\n      switch (data.details) {\n        case ErrorDetails.FRAG_LOAD_ERROR:\n        case ErrorDetails.FRAG_LOAD_TIMEOUT:\n        case ErrorDetails.KEY_LOAD_ERROR:\n        case ErrorDetails.KEY_LOAD_TIMEOUT:\n          data.errorAction = this.getFragRetryOrSwitchAction(data);\n          return;\n        case ErrorDetails.FRAG_PARSING_ERROR:\n          // ignore empty segment errors marked as gap\n          if ((_data$frag = data.frag) != null && _data$frag.gap) {\n            data.errorAction = createDoNothingErrorAction();\n            return;\n          }\n        // falls through\n        case ErrorDetails.FRAG_GAP:\n        case ErrorDetails.FRAG_DECRYPT_ERROR:\n          {\n            // Switch level if possible, otherwise allow retry count to reach max error retries\n            data.errorAction = this.getFragRetryOrSwitchAction(data);\n            data.errorAction.action = NetworkErrorAction.SendAlternateToPenaltyBox;\n            return;\n          }\n        case ErrorDetails.LEVEL_EMPTY_ERROR:\n        case ErrorDetails.LEVEL_PARSING_ERROR:\n          {\n            var _data$context, _data$context$levelDe;\n            // Only retry when empty and live\n            var levelIndex = data.parent === PlaylistLevelType.MAIN ? data.level : hls.loadLevel;\n            if (data.details === ErrorDetails.LEVEL_EMPTY_ERROR && !!((_data$context = data.context) != null && (_data$context$levelDe = _data$context.levelDetails) != null && _data$context$levelDe.live)) {\n              data.errorAction = this.getPlaylistRetryOrSwitchAction(data, levelIndex);\n            } else {\n              // Escalate to fatal if not retrying or switching\n              data.levelRetry = false;\n              data.errorAction = this.getLevelSwitchAction(data, levelIndex);\n            }\n          }\n          return;\n        case ErrorDetails.LEVEL_LOAD_ERROR:\n        case ErrorDetails.LEVEL_LOAD_TIMEOUT:\n          if (typeof (context == null ? void 0 : context.level) === 'number') {\n            data.errorAction = this.getPlaylistRetryOrSwitchAction(data, context.level);\n          }\n          return;\n        case ErrorDetails.AUDIO_TRACK_LOAD_ERROR:\n        case ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:\n        case ErrorDetails.SUBTITLE_LOAD_ERROR:\n        case ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT:\n          if (context) {\n            var level = hls.loadLevelObj;\n            if (level && (context.type === PlaylistContextType.AUDIO_TRACK && level.hasAudioGroup(context.groupId) || context.type === PlaylistContextType.SUBTITLE_TRACK && level.hasSubtitleGroup(context.groupId))) {\n              // Perform Pathway switch or Redundant failover if possible for fastest recovery\n              // otherwise allow playlist retry count to reach max error retries\n              data.errorAction = this.getPlaylistRetryOrSwitchAction(data, hls.loadLevel);\n              data.errorAction.action = NetworkErrorAction.SendAlternateToPenaltyBox;\n              data.errorAction.flags = ErrorActionFlags.MoveAllAlternatesMatchingHost;\n              return;\n            }\n          }\n          return;\n        case ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:\n          {\n            var _level = hls.loadLevelObj;\n            var restrictedHdcpLevel = _level == null ? void 0 : _level.attrs['HDCP-LEVEL'];\n            if (restrictedHdcpLevel) {\n              data.errorAction = {\n                action: NetworkErrorAction.SendAlternateToPenaltyBox,\n                flags: ErrorActionFlags.MoveAllAlternatesMatchingHDCP,\n                hdcpLevel: restrictedHdcpLevel\n              };\n            } else {\n              this.keySystemError(data);\n            }\n          }\n          return;\n        case ErrorDetails.BUFFER_ADD_CODEC_ERROR:\n        case ErrorDetails.REMUX_ALLOC_ERROR:\n        case ErrorDetails.BUFFER_APPEND_ERROR:\n          // Buffer-controller can set errorAction when append errors can be ignored or resolved locally\n          if (!data.errorAction) {\n            var _data$level;\n            data.errorAction = this.getLevelSwitchAction(data, (_data$level = data.level) != null ? _data$level : hls.loadLevel);\n          }\n          return;\n        case ErrorDetails.INTERNAL_EXCEPTION:\n        case ErrorDetails.BUFFER_APPENDING_ERROR:\n        case ErrorDetails.BUFFER_FULL_ERROR:\n        case ErrorDetails.LEVEL_SWITCH_ERROR:\n        case ErrorDetails.BUFFER_STALLED_ERROR:\n        case ErrorDetails.BUFFER_SEEK_OVER_HOLE:\n        case ErrorDetails.BUFFER_NUDGE_ON_STALL:\n          data.errorAction = createDoNothingErrorAction();\n          return;\n      }\n      if (data.type === ErrorTypes.KEY_SYSTEM_ERROR) {\n        this.keySystemError(data);\n      }\n    };\n    _proto.keySystemError = function keySystemError(data) {\n      var levelIndex = this.getVariantLevelIndex(data.frag);\n      // Do not retry level. Escalate to fatal if switching levels fails.\n      data.levelRetry = false;\n      data.errorAction = this.getLevelSwitchAction(data, levelIndex);\n    };\n    _proto.getPlaylistRetryOrSwitchAction = function getPlaylistRetryOrSwitchAction(data, levelIndex) {\n      var hls = this.hls;\n      var retryConfig = getRetryConfig(hls.config.playlistLoadPolicy, data);\n      var retryCount = this.playlistError++;\n      var retry = shouldRetry(retryConfig, retryCount, isTimeoutError(data), data.response);\n      if (retry) {\n        return {\n          action: NetworkErrorAction.RetryRequest,\n          flags: ErrorActionFlags.None,\n          retryConfig: retryConfig,\n          retryCount: retryCount\n        };\n      }\n      var errorAction = this.getLevelSwitchAction(data, levelIndex);\n      if (retryConfig) {\n        errorAction.retryConfig = retryConfig;\n        errorAction.retryCount = retryCount;\n      }\n      return errorAction;\n    };\n    _proto.getFragRetryOrSwitchAction = function getFragRetryOrSwitchAction(data) {\n      var hls = this.hls;\n      // Share fragment error count accross media options (main, audio, subs)\n      // This allows for level based rendition switching when media option assets fail\n      var variantLevelIndex = this.getVariantLevelIndex(data.frag);\n      var level = hls.levels[variantLevelIndex];\n      var _hls$config = hls.config,\n        fragLoadPolicy = _hls$config.fragLoadPolicy,\n        keyLoadPolicy = _hls$config.keyLoadPolicy;\n      var retryConfig = getRetryConfig(data.details.startsWith('key') ? keyLoadPolicy : fragLoadPolicy, data);\n      var fragmentErrors = hls.levels.reduce(function (acc, level) {\n        return acc + level.fragmentError;\n      }, 0);\n      // Switch levels when out of retried or level index out of bounds\n      if (level) {\n        if (data.details !== ErrorDetails.FRAG_GAP) {\n          level.fragmentError++;\n        }\n        var retry = shouldRetry(retryConfig, fragmentErrors, isTimeoutError(data), data.response);\n        if (retry) {\n          return {\n            action: NetworkErrorAction.RetryRequest,\n            flags: ErrorActionFlags.None,\n            retryConfig: retryConfig,\n            retryCount: fragmentErrors\n          };\n        }\n      }\n      // Reach max retry count, or Missing level reference\n      // Switch to valid index\n      var errorAction = this.getLevelSwitchAction(data, variantLevelIndex);\n      // Add retry details to allow skipping of FRAG_PARSING_ERROR\n      if (retryConfig) {\n        errorAction.retryConfig = retryConfig;\n        errorAction.retryCount = fragmentErrors;\n      }\n      return errorAction;\n    };\n    _proto.getLevelSwitchAction = function getLevelSwitchAction(data, levelIndex) {\n      var hls = this.hls;\n      if (levelIndex === null || levelIndex === undefined) {\n        levelIndex = hls.loadLevel;\n      }\n      var level = this.hls.levels[levelIndex];\n      if (level) {\n        var _data$frag2, _data$context2;\n        var errorDetails = data.details;\n        level.loadError++;\n        if (errorDetails === ErrorDetails.BUFFER_APPEND_ERROR) {\n          level.fragmentError++;\n        }\n        // Search for next level to retry\n        var nextLevel = -1;\n        var levels = hls.levels,\n          loadLevel = hls.loadLevel,\n          minAutoLevel = hls.minAutoLevel,\n          maxAutoLevel = hls.maxAutoLevel;\n        if (!hls.autoLevelEnabled && !hls.config.preserveManualLevelOnError) {\n          hls.loadLevel = -1;\n        }\n        var fragErrorType = (_data$frag2 = data.frag) == null ? void 0 : _data$frag2.type;\n        // Find alternate audio codec if available on audio codec error\n        var isAudioCodecError = fragErrorType === PlaylistLevelType.AUDIO && errorDetails === ErrorDetails.FRAG_PARSING_ERROR || data.sourceBufferName === 'audio' && (errorDetails === ErrorDetails.BUFFER_ADD_CODEC_ERROR || errorDetails === ErrorDetails.BUFFER_APPEND_ERROR);\n        var findAudioCodecAlternate = isAudioCodecError && levels.some(function (_ref) {\n          var audioCodec = _ref.audioCodec;\n          return level.audioCodec !== audioCodec;\n        });\n        // Find alternate video codec if available on video codec error\n        var isVideoCodecError = data.sourceBufferName === 'video' && (errorDetails === ErrorDetails.BUFFER_ADD_CODEC_ERROR || errorDetails === ErrorDetails.BUFFER_APPEND_ERROR);\n        var findVideoCodecAlternate = isVideoCodecError && levels.some(function (_ref2) {\n          var codecSet = _ref2.codecSet,\n            audioCodec = _ref2.audioCodec;\n          return level.codecSet !== codecSet && level.audioCodec === audioCodec;\n        });\n        var _ref3 = (_data$context2 = data.context) != null ? _data$context2 : {},\n          playlistErrorType = _ref3.type,\n          playlistErrorGroupId = _ref3.groupId;\n        var _loop = function _loop() {\n            var candidate = (i + loadLevel) % levels.length;\n            if (candidate !== loadLevel && candidate >= minAutoLevel && candidate <= maxAutoLevel && levels[candidate].loadError === 0) {\n              var _level$audioGroups, _level$subtitleGroups;\n              var levelCandidate = levels[candidate];\n              // Skip level switch if GAP tag is found in next level at same position\n              if (errorDetails === ErrorDetails.FRAG_GAP && fragErrorType === PlaylistLevelType.MAIN && data.frag) {\n                var levelDetails = levels[candidate].details;\n                if (levelDetails) {\n                  var fragCandidate = findFragmentByPTS(data.frag, levelDetails.fragments, data.frag.start);\n                  if (fragCandidate != null && fragCandidate.gap) {\n                    return 0; // continue\n                  }\n                }\n              } else if (playlistErrorType === PlaylistContextType.AUDIO_TRACK && levelCandidate.hasAudioGroup(playlistErrorGroupId) || playlistErrorType === PlaylistContextType.SUBTITLE_TRACK && levelCandidate.hasSubtitleGroup(playlistErrorGroupId)) {\n                // For audio/subs playlist errors find another group ID or fallthrough to redundant fail-over\n                return 0; // continue\n              } else if (fragErrorType === PlaylistLevelType.AUDIO && (_level$audioGroups = level.audioGroups) != null && _level$audioGroups.some(function (groupId) {\n                return levelCandidate.hasAudioGroup(groupId);\n              }) || fragErrorType === PlaylistLevelType.SUBTITLE && (_level$subtitleGroups = level.subtitleGroups) != null && _level$subtitleGroups.some(function (groupId) {\n                return levelCandidate.hasSubtitleGroup(groupId);\n              }) || findAudioCodecAlternate && level.audioCodec === levelCandidate.audioCodec || !findAudioCodecAlternate && level.audioCodec !== levelCandidate.audioCodec || findVideoCodecAlternate && level.codecSet === levelCandidate.codecSet) {\n                // For video/audio/subs frag errors find another group ID or fallthrough to redundant fail-over\n                return 0; // continue\n              }\n              nextLevel = candidate;\n              return 1; // break\n            }\n          },\n          _ret;\n        for (var i = levels.length; i--;) {\n          _ret = _loop();\n          if (_ret === 0) continue;\n          if (_ret === 1) break;\n        }\n        if (nextLevel > -1 && hls.loadLevel !== nextLevel) {\n          data.levelRetry = true;\n          this.playlistError = 0;\n          return {\n            action: NetworkErrorAction.SendAlternateToPenaltyBox,\n            flags: ErrorActionFlags.None,\n            nextAutoLevel: nextLevel\n          };\n        }\n      }\n      // No levels to switch / Manual level selection / Level not found\n      // Resolve with Pathway switch, Redundant fail-over, or stay on lowest Level\n      return {\n        action: NetworkErrorAction.SendAlternateToPenaltyBox,\n        flags: ErrorActionFlags.MoveAllAlternatesMatchingHost\n      };\n    };\n    _proto.onErrorOut = function onErrorOut(event, data) {\n      var _data$errorAction;\n      switch ((_data$errorAction = data.errorAction) == null ? void 0 : _data$errorAction.action) {\n        case NetworkErrorAction.DoNothing:\n          break;\n        case NetworkErrorAction.SendAlternateToPenaltyBox:\n          this.sendAlternateToPenaltyBox(data);\n          if (!data.errorAction.resolved && data.details !== ErrorDetails.FRAG_GAP) {\n            data.fatal = true;\n          } else if (/MediaSource readyState: ended/.test(data.error.message)) {\n            this.warn(\"MediaSource ended after \\\"\" + data.sourceBufferName + \"\\\" sourceBuffer append error. Attempting to recover from media error.\");\n            this.hls.recoverMediaError();\n          }\n          break;\n      }\n      if (data.fatal) {\n        this.hls.stopLoad();\n        return;\n      }\n    };\n    _proto.sendAlternateToPenaltyBox = function sendAlternateToPenaltyBox(data) {\n      var hls = this.hls;\n      var errorAction = data.errorAction;\n      if (!errorAction) {\n        return;\n      }\n      var flags = errorAction.flags,\n        hdcpLevel = errorAction.hdcpLevel,\n        nextAutoLevel = errorAction.nextAutoLevel;\n      switch (flags) {\n        case ErrorActionFlags.None:\n          this.switchLevel(data, nextAutoLevel);\n          break;\n        case ErrorActionFlags.MoveAllAlternatesMatchingHDCP:\n          if (hdcpLevel) {\n            hls.maxHdcpLevel = HdcpLevels[HdcpLevels.indexOf(hdcpLevel) - 1];\n            errorAction.resolved = true;\n          }\n          this.warn(\"Restricting playback to HDCP-LEVEL of \\\"\" + hls.maxHdcpLevel + \"\\\" or lower\");\n          break;\n      }\n      // If not resolved by previous actions try to switch to next level\n      if (!errorAction.resolved) {\n        this.switchLevel(data, nextAutoLevel);\n      }\n    };\n    _proto.switchLevel = function switchLevel(data, levelIndex) {\n      if (levelIndex !== undefined && data.errorAction) {\n        this.warn(\"switching to level \" + levelIndex + \" after \" + data.details);\n        this.hls.nextAutoLevel = levelIndex;\n        data.errorAction.resolved = true;\n        // Stream controller is responsible for this but won't switch on false start\n        this.hls.nextLoadLevel = this.hls.nextAutoLevel;\n        if (data.details === ErrorDetails.BUFFER_ADD_CODEC_ERROR && data.mimeType && data.sourceBufferName !== 'audiovideo') {\n          var codec = getCodecsForMimeType(data.mimeType);\n          var levels = this.hls.levels;\n          for (var i = levels.length; i--;) {\n            if (levels[i][data.sourceBufferName + \"Codec\"] === codec) {\n              this.hls.removeLevel(i);\n            }\n          }\n        }\n      }\n    };\n    return ErrorController;\n  }(Logger);\n  function createDoNothingErrorAction(resolved) {\n    var errorAction = {\n      action: NetworkErrorAction.DoNothing,\n      flags: ErrorActionFlags.None\n    };\n    if (resolved) {\n      errorAction.resolved = true;\n    }\n    return errorAction;\n  }\n\n  var FragmentState = {\n    NOT_LOADED: \"NOT_LOADED\",\n    APPENDING: \"APPENDING\",\n    PARTIAL: \"PARTIAL\",\n    OK: \"OK\"\n  };\n  var FragmentTracker = /*#__PURE__*/function () {\n    function FragmentTracker(hls) {\n      this.activePartLists = Object.create(null);\n      this.endListFragments = Object.create(null);\n      this.fragments = Object.create(null);\n      this.timeRanges = Object.create(null);\n      this.bufferPadding = 0.2;\n      this.hls = void 0;\n      this.hasGaps = false;\n      this.hls = hls;\n      this._registerListeners();\n    }\n    var _proto = FragmentTracker.prototype;\n    _proto._registerListeners = function _registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n      hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n      hls.on(Events.FRAG_LOADED, this.onFragLoaded, this);\n    };\n    _proto._unregisterListeners = function _unregisterListeners() {\n      var hls = this.hls;\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n      hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n      hls.off(Events.FRAG_LOADED, this.onFragLoaded, this);\n    };\n    _proto.destroy = function destroy() {\n      this._unregisterListeners();\n      // @ts-ignore\n      this.fragments =\n      // @ts-ignore\n      this.activePartLists =\n      // @ts-ignore\n      this.endListFragments = this.timeRanges = null;\n    }\n\n    /**\n     * Return a Fragment or Part with an appended range that matches the position and levelType\n     * Otherwise, return null\n     */;\n    _proto.getAppendedFrag = function getAppendedFrag(position, levelType) {\n      var activeParts = this.activePartLists[levelType];\n      if (activeParts) {\n        for (var i = activeParts.length; i--;) {\n          var activePart = activeParts[i];\n          if (!activePart) {\n            break;\n          }\n          var appendedPTS = activePart.end;\n          if (activePart.start <= position && appendedPTS !== null && position <= appendedPTS) {\n            return activePart;\n          }\n        }\n      }\n      return this.getBufferedFrag(position, levelType);\n    }\n\n    /**\n     * Return a buffered Fragment that matches the position and levelType.\n     * A buffered Fragment is one whose loading, parsing and appending is done (completed or \"partial\" meaning aborted).\n     * If not found any Fragment, return null\n     */;\n    _proto.getBufferedFrag = function getBufferedFrag(position, levelType) {\n      return this.getFragAtPos(position, levelType, true);\n    };\n    _proto.getFragAtPos = function getFragAtPos(position, levelType, buffered) {\n      var fragments = this.fragments;\n      var keys = Object.keys(fragments);\n      for (var i = keys.length; i--;) {\n        var fragmentEntity = fragments[keys[i]];\n        if ((fragmentEntity == null ? void 0 : fragmentEntity.body.type) === levelType && (!buffered || fragmentEntity.buffered)) {\n          var frag = fragmentEntity.body;\n          if (frag.start <= position && position <= frag.end) {\n            return frag;\n          }\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Partial fragments effected by coded frame eviction will be removed\n     * The browser will unload parts of the buffer to free up memory for new buffer data\n     * Fragments will need to be reloaded when the buffer is freed up, removing partial fragments will allow them to reload(since there might be parts that are still playable)\n     */;\n    _proto.detectEvictedFragments = function detectEvictedFragments(elementaryStream, timeRange, playlistType, appendedPart, removeAppending) {\n      var _this = this;\n      if (this.timeRanges) {\n        this.timeRanges[elementaryStream] = timeRange;\n      }\n      // Check if any flagged fragments have been unloaded\n      // excluding anything newer than appendedPartSn\n      var appendedPartSn = (appendedPart == null ? void 0 : appendedPart.fragment.sn) || -1;\n      Object.keys(this.fragments).forEach(function (key) {\n        var fragmentEntity = _this.fragments[key];\n        if (!fragmentEntity) {\n          return;\n        }\n        if (appendedPartSn >= fragmentEntity.body.sn) {\n          return;\n        }\n        if (!fragmentEntity.buffered && (!fragmentEntity.loaded || removeAppending)) {\n          if (fragmentEntity.body.type === playlistType) {\n            _this.removeFragment(fragmentEntity.body);\n          }\n          return;\n        }\n        var esData = fragmentEntity.range[elementaryStream];\n        if (!esData) {\n          return;\n        }\n        if (esData.time.length === 0) {\n          _this.removeFragment(fragmentEntity.body);\n          return;\n        }\n        esData.time.some(function (time) {\n          var isNotBuffered = !_this.isTimeBuffered(time.startPTS, time.endPTS, timeRange);\n          if (isNotBuffered) {\n            // Unregister partial fragment as it needs to load again to be reused\n            _this.removeFragment(fragmentEntity.body);\n          }\n          return isNotBuffered;\n        });\n      });\n    }\n\n    /**\n     * Checks if the fragment passed in is loaded in the buffer properly\n     * Partially loaded fragments will be registered as a partial fragment\n     */;\n    _proto.detectPartialFragments = function detectPartialFragments(data) {\n      var _this2 = this;\n      var timeRanges = this.timeRanges;\n      if (!timeRanges || data.frag.sn === 'initSegment') {\n        return;\n      }\n      var frag = data.frag;\n      var fragKey = getFragmentKey(frag);\n      var fragmentEntity = this.fragments[fragKey];\n      if (!fragmentEntity || fragmentEntity.buffered && frag.gap) {\n        return;\n      }\n      var isFragHint = !frag.relurl;\n      Object.keys(timeRanges).forEach(function (elementaryStream) {\n        var streamInfo = frag.elementaryStreams[elementaryStream];\n        if (!streamInfo) {\n          return;\n        }\n        var timeRange = timeRanges[elementaryStream];\n        var partial = isFragHint || streamInfo.partial === true;\n        fragmentEntity.range[elementaryStream] = _this2.getBufferedTimes(frag, data.part, partial, timeRange);\n      });\n      fragmentEntity.loaded = null;\n      if (Object.keys(fragmentEntity.range).length) {\n        fragmentEntity.buffered = true;\n        var endList = fragmentEntity.body.endList = frag.endList || fragmentEntity.body.endList;\n        if (endList) {\n          this.endListFragments[fragmentEntity.body.type] = fragmentEntity;\n        }\n        if (!isPartial(fragmentEntity)) {\n          // Remove older fragment parts from lookup after frag is tracked as buffered\n          this.removeParts(frag.sn - 1, frag.type);\n        }\n      } else {\n        // remove fragment if nothing was appended\n        this.removeFragment(fragmentEntity.body);\n      }\n    };\n    _proto.removeParts = function removeParts(snToKeep, levelType) {\n      var activeParts = this.activePartLists[levelType];\n      if (!activeParts) {\n        return;\n      }\n      this.activePartLists[levelType] = filterParts(activeParts, function (part) {\n        return part.fragment.sn >= snToKeep;\n      });\n    };\n    _proto.fragBuffered = function fragBuffered(frag, force) {\n      var fragKey = getFragmentKey(frag);\n      var fragmentEntity = this.fragments[fragKey];\n      if (!fragmentEntity && force) {\n        fragmentEntity = this.fragments[fragKey] = {\n          body: frag,\n          appendedPTS: null,\n          loaded: null,\n          buffered: false,\n          range: Object.create(null)\n        };\n        if (frag.gap) {\n          this.hasGaps = true;\n        }\n      }\n      if (fragmentEntity) {\n        fragmentEntity.loaded = null;\n        fragmentEntity.buffered = true;\n      }\n    };\n    _proto.getBufferedTimes = function getBufferedTimes(fragment, part, partial, timeRange) {\n      var buffered = {\n        time: [],\n        partial: partial\n      };\n      var startPTS = fragment.start;\n      var endPTS = fragment.end;\n      var minEndPTS = fragment.minEndPTS || endPTS;\n      var maxStartPTS = fragment.maxStartPTS || startPTS;\n      for (var i = 0; i < timeRange.length; i++) {\n        var startTime = timeRange.start(i) - this.bufferPadding;\n        var endTime = timeRange.end(i) + this.bufferPadding;\n        if (maxStartPTS >= startTime && minEndPTS <= endTime) {\n          // Fragment is entirely contained in buffer\n          // No need to check the other timeRange times since it's completely playable\n          buffered.time.push({\n            startPTS: Math.max(startPTS, timeRange.start(i)),\n            endPTS: Math.min(endPTS, timeRange.end(i))\n          });\n          break;\n        } else if (startPTS < endTime && endPTS > startTime) {\n          var start = Math.max(startPTS, timeRange.start(i));\n          var end = Math.min(endPTS, timeRange.end(i));\n          if (end > start) {\n            buffered.partial = true;\n            // Check for intersection with buffer\n            // Get playable sections of the fragment\n            buffered.time.push({\n              startPTS: start,\n              endPTS: end\n            });\n          }\n        } else if (endPTS <= startTime) {\n          // No need to check the rest of the timeRange as it is in order\n          break;\n        }\n      }\n      return buffered;\n    }\n\n    /**\n     * Gets the partial fragment for a certain time\n     */;\n    _proto.getPartialFragment = function getPartialFragment(time) {\n      var bestFragment = null;\n      var timePadding;\n      var startTime;\n      var endTime;\n      var bestOverlap = 0;\n      var bufferPadding = this.bufferPadding,\n        fragments = this.fragments;\n      Object.keys(fragments).forEach(function (key) {\n        var fragmentEntity = fragments[key];\n        if (!fragmentEntity) {\n          return;\n        }\n        if (isPartial(fragmentEntity)) {\n          startTime = fragmentEntity.body.start - bufferPadding;\n          endTime = fragmentEntity.body.end + bufferPadding;\n          if (time >= startTime && time <= endTime) {\n            // Use the fragment that has the most padding from start and end time\n            timePadding = Math.min(time - startTime, endTime - time);\n            if (bestOverlap <= timePadding) {\n              bestFragment = fragmentEntity.body;\n              bestOverlap = timePadding;\n            }\n          }\n        }\n      });\n      return bestFragment;\n    };\n    _proto.isEndListAppended = function isEndListAppended(type) {\n      var lastFragmentEntity = this.endListFragments[type];\n      return lastFragmentEntity !== undefined && (lastFragmentEntity.buffered || isPartial(lastFragmentEntity));\n    };\n    _proto.getState = function getState(fragment) {\n      var fragKey = getFragmentKey(fragment);\n      var fragmentEntity = this.fragments[fragKey];\n      if (fragmentEntity) {\n        if (!fragmentEntity.buffered) {\n          return FragmentState.APPENDING;\n        } else if (isPartial(fragmentEntity)) {\n          return FragmentState.PARTIAL;\n        } else {\n          return FragmentState.OK;\n        }\n      }\n      return FragmentState.NOT_LOADED;\n    };\n    _proto.isTimeBuffered = function isTimeBuffered(startPTS, endPTS, timeRange) {\n      var startTime;\n      var endTime;\n      for (var i = 0; i < timeRange.length; i++) {\n        startTime = timeRange.start(i) - this.bufferPadding;\n        endTime = timeRange.end(i) + this.bufferPadding;\n        if (startPTS >= startTime && endPTS <= endTime) {\n          return true;\n        }\n        if (endPTS <= startTime) {\n          // No need to check the rest of the timeRange as it is in order\n          return false;\n        }\n      }\n      return false;\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      this.removeAllFragments();\n    };\n    _proto.onFragLoaded = function onFragLoaded(event, data) {\n      // don't track initsegment (for which sn is not a number)\n      // don't track frags used for bitrateTest, they're irrelevant.\n      if (data.frag.sn === 'initSegment' || data.frag.bitrateTest) {\n        return;\n      }\n      var frag = data.frag;\n      // Fragment entity `loaded` FragLoadedData is null when loading parts\n      var loaded = data.part ? null : data;\n      var fragKey = getFragmentKey(frag);\n      this.fragments[fragKey] = {\n        body: frag,\n        appendedPTS: null,\n        loaded: loaded,\n        buffered: false,\n        range: Object.create(null)\n      };\n    };\n    _proto.onBufferAppended = function onBufferAppended(event, data) {\n      var frag = data.frag,\n        part = data.part,\n        timeRanges = data.timeRanges,\n        type = data.type;\n      if (frag.sn === 'initSegment') {\n        return;\n      }\n      var playlistType = frag.type;\n      if (part) {\n        var activeParts = this.activePartLists[playlistType];\n        if (!activeParts) {\n          this.activePartLists[playlistType] = activeParts = [];\n        }\n        activeParts.push(part);\n      }\n      // Store the latest timeRanges loaded in the buffer\n      this.timeRanges = timeRanges;\n      var timeRange = timeRanges[type];\n      this.detectEvictedFragments(type, timeRange, playlistType, part);\n    };\n    _proto.onFragBuffered = function onFragBuffered(event, data) {\n      this.detectPartialFragments(data);\n    };\n    _proto.hasFragment = function hasFragment(fragment) {\n      var fragKey = getFragmentKey(fragment);\n      return !!this.fragments[fragKey];\n    };\n    _proto.hasFragments = function hasFragments(type) {\n      var fragments = this.fragments;\n      var keys = Object.keys(fragments);\n      if (!type) {\n        return keys.length > 0;\n      }\n      for (var i = keys.length; i--;) {\n        var fragmentEntity = fragments[keys[i]];\n        if ((fragmentEntity == null ? void 0 : fragmentEntity.body.type) === type) {\n          return true;\n        }\n      }\n      return false;\n    };\n    _proto.hasParts = function hasParts(type) {\n      var _this$activePartLists;\n      return !!((_this$activePartLists = this.activePartLists[type]) != null && _this$activePartLists.length);\n    };\n    _proto.removeFragmentsInRange = function removeFragmentsInRange(start, end, playlistType, withGapOnly, unbufferedOnly) {\n      var _this3 = this;\n      if (withGapOnly && !this.hasGaps) {\n        return;\n      }\n      Object.keys(this.fragments).forEach(function (key) {\n        var fragmentEntity = _this3.fragments[key];\n        if (!fragmentEntity) {\n          return;\n        }\n        var frag = fragmentEntity.body;\n        if (frag.type !== playlistType || withGapOnly && !frag.gap) {\n          return;\n        }\n        if (frag.start < end && frag.end > start && (fragmentEntity.buffered || unbufferedOnly)) {\n          _this3.removeFragment(frag);\n        }\n      });\n    };\n    _proto.removeFragment = function removeFragment(fragment) {\n      var fragKey = getFragmentKey(fragment);\n      fragment.clearElementaryStreamInfo();\n      var activeParts = this.activePartLists[fragment.type];\n      if (activeParts) {\n        var snToRemove = fragment.sn;\n        this.activePartLists[fragment.type] = filterParts(activeParts, function (part) {\n          return part.fragment.sn !== snToRemove;\n        });\n      }\n      delete this.fragments[fragKey];\n      if (fragment.endList) {\n        delete this.endListFragments[fragment.type];\n      }\n    };\n    _proto.removeAllFragments = function removeAllFragments() {\n      var _this$hls, _this$hls$latestLevel;\n      this.fragments = Object.create(null);\n      this.endListFragments = Object.create(null);\n      this.activePartLists = Object.create(null);\n      this.hasGaps = false;\n      var partlist = (_this$hls = this.hls) == null ? void 0 : (_this$hls$latestLevel = _this$hls.latestLevelDetails) == null ? void 0 : _this$hls$latestLevel.partList;\n      if (partlist) {\n        partlist.forEach(function (part) {\n          return part.clearElementaryStreamInfo();\n        });\n      }\n    };\n    return FragmentTracker;\n  }();\n  function isPartial(fragmentEntity) {\n    var _fragmentEntity$range, _fragmentEntity$range2, _fragmentEntity$range3;\n    return fragmentEntity.buffered && (fragmentEntity.body.gap || ((_fragmentEntity$range = fragmentEntity.range.video) == null ? void 0 : _fragmentEntity$range.partial) || ((_fragmentEntity$range2 = fragmentEntity.range.audio) == null ? void 0 : _fragmentEntity$range2.partial) || ((_fragmentEntity$range3 = fragmentEntity.range.audiovideo) == null ? void 0 : _fragmentEntity$range3.partial));\n  }\n  function getFragmentKey(fragment) {\n    return fragment.type + \"_\" + fragment.level + \"_\" + fragment.sn;\n  }\n  function filterParts(partList, predicate) {\n    return partList.filter(function (part) {\n      var keep = predicate(part);\n      if (!keep) {\n        part.clearElementaryStreamInfo();\n      }\n      return keep;\n    });\n  }\n\n  var DecrypterAesMode = {\n    cbc: 0,\n    ctr: 1\n  };\n\n  var AESCrypto = /*#__PURE__*/function () {\n    function AESCrypto(subtle, iv, aesMode) {\n      this.subtle = void 0;\n      this.aesIV = void 0;\n      this.aesMode = void 0;\n      this.subtle = subtle;\n      this.aesIV = iv;\n      this.aesMode = aesMode;\n    }\n    var _proto = AESCrypto.prototype;\n    _proto.decrypt = function decrypt(data, key) {\n      switch (this.aesMode) {\n        case DecrypterAesMode.cbc:\n          return this.subtle.decrypt({\n            name: 'AES-CBC',\n            iv: this.aesIV\n          }, key, data);\n        case DecrypterAesMode.ctr:\n          return this.subtle.decrypt({\n            name: 'AES-CTR',\n            counter: this.aesIV,\n            length: 64\n          },\n          //64 : NIST SP800-38A standard suggests that the counter should occupy half of the counter block\n          key, data);\n        default:\n          throw new Error(\"[AESCrypto] invalid aes mode \" + this.aesMode);\n      }\n    };\n    return AESCrypto;\n  }();\n\n  // PKCS7\n  function removePadding(array) {\n    var outputBytes = array.byteLength;\n    var paddingBytes = outputBytes && new DataView(array.buffer).getUint8(outputBytes - 1);\n    if (paddingBytes) {\n      return array.slice(0, outputBytes - paddingBytes);\n    }\n    return array;\n  }\n  var AESDecryptor = /*#__PURE__*/function () {\n    function AESDecryptor() {\n      this.rcon = [0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n      this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];\n      this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];\n      this.sBox = new Uint32Array(256);\n      this.invSBox = new Uint32Array(256);\n      this.key = new Uint32Array(0);\n      this.ksRows = 0;\n      this.keySize = 0;\n      this.keySchedule = void 0;\n      this.invKeySchedule = void 0;\n      this.initTable();\n    }\n\n    // Using view.getUint32() also swaps the byte order.\n    var _proto = AESDecryptor.prototype;\n    _proto.uint8ArrayToUint32Array_ = function uint8ArrayToUint32Array_(arrayBuffer) {\n      var view = new DataView(arrayBuffer);\n      var newArray = new Uint32Array(4);\n      for (var i = 0; i < 4; i++) {\n        newArray[i] = view.getUint32(i * 4);\n      }\n      return newArray;\n    };\n    _proto.initTable = function initTable() {\n      var sBox = this.sBox;\n      var invSBox = this.invSBox;\n      var subMix = this.subMix;\n      var subMix0 = subMix[0];\n      var subMix1 = subMix[1];\n      var subMix2 = subMix[2];\n      var subMix3 = subMix[3];\n      var invSubMix = this.invSubMix;\n      var invSubMix0 = invSubMix[0];\n      var invSubMix1 = invSubMix[1];\n      var invSubMix2 = invSubMix[2];\n      var invSubMix3 = invSubMix[3];\n      var d = new Uint32Array(256);\n      var x = 0;\n      var xi = 0;\n      var i = 0;\n      for (i = 0; i < 256; i++) {\n        if (i < 128) {\n          d[i] = i << 1;\n        } else {\n          d[i] = i << 1 ^ 0x11b;\n        }\n      }\n      for (i = 0; i < 256; i++) {\n        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n        sBox[x] = sx;\n        invSBox[sx] = x;\n\n        // Compute multiplication\n        var x2 = d[x];\n        var x4 = d[x2];\n        var x8 = d[x4];\n\n        // Compute sub/invSub bytes, mix columns tables\n        var t = d[sx] * 0x101 ^ sx * 0x1010100;\n        subMix0[x] = t << 24 | t >>> 8;\n        subMix1[x] = t << 16 | t >>> 16;\n        subMix2[x] = t << 8 | t >>> 24;\n        subMix3[x] = t;\n\n        // Compute inv sub bytes, inv mix columns tables\n        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        invSubMix0[sx] = t << 24 | t >>> 8;\n        invSubMix1[sx] = t << 16 | t >>> 16;\n        invSubMix2[sx] = t << 8 | t >>> 24;\n        invSubMix3[sx] = t;\n\n        // Compute next counter\n        if (!x) {\n          x = xi = 1;\n        } else {\n          x = x2 ^ d[d[d[x8 ^ x2]]];\n          xi ^= d[d[xi]];\n        }\n      }\n    };\n    _proto.expandKey = function expandKey(keyBuffer) {\n      // convert keyBuffer to Uint32Array\n      var key = this.uint8ArrayToUint32Array_(keyBuffer);\n      var sameKey = true;\n      var offset = 0;\n      while (offset < key.length && sameKey) {\n        sameKey = key[offset] === this.key[offset];\n        offset++;\n      }\n      if (sameKey) {\n        return;\n      }\n      this.key = key;\n      var keySize = this.keySize = key.length;\n      if (keySize !== 4 && keySize !== 6 && keySize !== 8) {\n        throw new Error('Invalid aes key size=' + keySize);\n      }\n      var ksRows = this.ksRows = (keySize + 6 + 1) * 4;\n      var ksRow;\n      var invKsRow;\n      var keySchedule = this.keySchedule = new Uint32Array(ksRows);\n      var invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);\n      var sbox = this.sBox;\n      var rcon = this.rcon;\n      var invSubMix = this.invSubMix;\n      var invSubMix0 = invSubMix[0];\n      var invSubMix1 = invSubMix[1];\n      var invSubMix2 = invSubMix[2];\n      var invSubMix3 = invSubMix[3];\n      var prev;\n      var t;\n      for (ksRow = 0; ksRow < ksRows; ksRow++) {\n        if (ksRow < keySize) {\n          prev = keySchedule[ksRow] = key[ksRow];\n          continue;\n        }\n        t = prev;\n        if (ksRow % keySize === 0) {\n          // Rot word\n          t = t << 8 | t >>> 24;\n\n          // Sub word\n          t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff];\n\n          // Mix Rcon\n          t ^= rcon[ksRow / keySize | 0] << 24;\n        } else if (keySize > 6 && ksRow % keySize === 4) {\n          // Sub word\n          t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff];\n        }\n        keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;\n      }\n      for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n        ksRow = ksRows - invKsRow;\n        if (invKsRow & 3) {\n          t = keySchedule[ksRow];\n        } else {\n          t = keySchedule[ksRow - 4];\n        }\n        if (invKsRow < 4 || ksRow <= 4) {\n          invKeySchedule[invKsRow] = t;\n        } else {\n          invKeySchedule[invKsRow] = invSubMix0[sbox[t >>> 24]] ^ invSubMix1[sbox[t >>> 16 & 0xff]] ^ invSubMix2[sbox[t >>> 8 & 0xff]] ^ invSubMix3[sbox[t & 0xff]];\n        }\n        invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;\n      }\n    }\n\n    // Adding this as a method greatly improves performance.\n    ;\n    _proto.networkToHostOrderSwap = function networkToHostOrderSwap(word) {\n      return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n    };\n    _proto.decrypt = function decrypt(inputArrayBuffer, offset, aesIV) {\n      var nRounds = this.keySize + 6;\n      var invKeySchedule = this.invKeySchedule;\n      var invSBOX = this.invSBox;\n      var invSubMix = this.invSubMix;\n      var invSubMix0 = invSubMix[0];\n      var invSubMix1 = invSubMix[1];\n      var invSubMix2 = invSubMix[2];\n      var invSubMix3 = invSubMix[3];\n      var initVector = this.uint8ArrayToUint32Array_(aesIV);\n      var initVector0 = initVector[0];\n      var initVector1 = initVector[1];\n      var initVector2 = initVector[2];\n      var initVector3 = initVector[3];\n      var inputInt32 = new Int32Array(inputArrayBuffer);\n      var outputInt32 = new Int32Array(inputInt32.length);\n      var t0, t1, t2, t3;\n      var s0, s1, s2, s3;\n      var inputWords0, inputWords1, inputWords2, inputWords3;\n      var ksRow, i;\n      var swapWord = this.networkToHostOrderSwap;\n      while (offset < inputInt32.length) {\n        inputWords0 = swapWord(inputInt32[offset]);\n        inputWords1 = swapWord(inputInt32[offset + 1]);\n        inputWords2 = swapWord(inputInt32[offset + 2]);\n        inputWords3 = swapWord(inputInt32[offset + 3]);\n        s0 = inputWords0 ^ invKeySchedule[0];\n        s1 = inputWords3 ^ invKeySchedule[1];\n        s2 = inputWords2 ^ invKeySchedule[2];\n        s3 = inputWords1 ^ invKeySchedule[3];\n        ksRow = 4;\n\n        // Iterate through the rounds of decryption\n        for (i = 1; i < nRounds; i++) {\n          t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[s1 >> 16 & 0xff] ^ invSubMix2[s2 >> 8 & 0xff] ^ invSubMix3[s3 & 0xff] ^ invKeySchedule[ksRow];\n          t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[s2 >> 16 & 0xff] ^ invSubMix2[s3 >> 8 & 0xff] ^ invSubMix3[s0 & 0xff] ^ invKeySchedule[ksRow + 1];\n          t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[s3 >> 16 & 0xff] ^ invSubMix2[s0 >> 8 & 0xff] ^ invSubMix3[s1 & 0xff] ^ invKeySchedule[ksRow + 2];\n          t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[s0 >> 16 & 0xff] ^ invSubMix2[s1 >> 8 & 0xff] ^ invSubMix3[s2 & 0xff] ^ invKeySchedule[ksRow + 3];\n          // Update state\n          s0 = t0;\n          s1 = t1;\n          s2 = t2;\n          s3 = t3;\n          ksRow = ksRow + 4;\n        }\n\n        // Shift rows, sub bytes, add round key\n        t0 = invSBOX[s0 >>> 24] << 24 ^ invSBOX[s1 >> 16 & 0xff] << 16 ^ invSBOX[s2 >> 8 & 0xff] << 8 ^ invSBOX[s3 & 0xff] ^ invKeySchedule[ksRow];\n        t1 = invSBOX[s1 >>> 24] << 24 ^ invSBOX[s2 >> 16 & 0xff] << 16 ^ invSBOX[s3 >> 8 & 0xff] << 8 ^ invSBOX[s0 & 0xff] ^ invKeySchedule[ksRow + 1];\n        t2 = invSBOX[s2 >>> 24] << 24 ^ invSBOX[s3 >> 16 & 0xff] << 16 ^ invSBOX[s0 >> 8 & 0xff] << 8 ^ invSBOX[s1 & 0xff] ^ invKeySchedule[ksRow + 2];\n        t3 = invSBOX[s3 >>> 24] << 24 ^ invSBOX[s0 >> 16 & 0xff] << 16 ^ invSBOX[s1 >> 8 & 0xff] << 8 ^ invSBOX[s2 & 0xff] ^ invKeySchedule[ksRow + 3];\n\n        // Write\n        outputInt32[offset] = swapWord(t0 ^ initVector0);\n        outputInt32[offset + 1] = swapWord(t3 ^ initVector1);\n        outputInt32[offset + 2] = swapWord(t2 ^ initVector2);\n        outputInt32[offset + 3] = swapWord(t1 ^ initVector3);\n\n        // reset initVector to last 4 unsigned int\n        initVector0 = inputWords0;\n        initVector1 = inputWords1;\n        initVector2 = inputWords2;\n        initVector3 = inputWords3;\n        offset = offset + 4;\n      }\n      return outputInt32.buffer;\n    };\n    return AESDecryptor;\n  }();\n\n  var FastAESKey = /*#__PURE__*/function () {\n    function FastAESKey(subtle, key, aesMode) {\n      this.subtle = void 0;\n      this.key = void 0;\n      this.aesMode = void 0;\n      this.subtle = subtle;\n      this.key = key;\n      this.aesMode = aesMode;\n    }\n    var _proto = FastAESKey.prototype;\n    _proto.expandKey = function expandKey() {\n      var subtleAlgoName = getSubtleAlgoName(this.aesMode);\n      return this.subtle.importKey('raw', this.key, {\n        name: subtleAlgoName\n      }, false, ['encrypt', 'decrypt']);\n    };\n    return FastAESKey;\n  }();\n  function getSubtleAlgoName(aesMode) {\n    switch (aesMode) {\n      case DecrypterAesMode.cbc:\n        return 'AES-CBC';\n      case DecrypterAesMode.ctr:\n        return 'AES-CTR';\n      default:\n        throw new Error(\"[FastAESKey] invalid aes mode \" + aesMode);\n    }\n  }\n\n  var CHUNK_SIZE = 16; // 16 bytes, 128 bits\n  var Decrypter = /*#__PURE__*/function () {\n    function Decrypter(config, _temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n        _ref$removePKCS7Paddi = _ref.removePKCS7Padding,\n        removePKCS7Padding = _ref$removePKCS7Paddi === void 0 ? true : _ref$removePKCS7Paddi;\n      this.logEnabled = true;\n      this.removePKCS7Padding = void 0;\n      this.subtle = null;\n      this.softwareDecrypter = null;\n      this.key = null;\n      this.fastAesKey = null;\n      this.remainderData = null;\n      this.currentIV = null;\n      this.currentResult = null;\n      this.useSoftware = void 0;\n      this.enableSoftwareAES = void 0;\n      this.enableSoftwareAES = config.enableSoftwareAES;\n      this.removePKCS7Padding = removePKCS7Padding;\n      // built in decryptor expects PKCS7 padding\n      if (removePKCS7Padding) {\n        try {\n          var browserCrypto = self.crypto;\n          if (browserCrypto) {\n            this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\n          }\n        } catch (e) {\n          /* no-op */\n        }\n      }\n      this.useSoftware = !this.subtle;\n    }\n    var _proto = Decrypter.prototype;\n    _proto.destroy = function destroy() {\n      this.subtle = null;\n      this.softwareDecrypter = null;\n      this.key = null;\n      this.fastAesKey = null;\n      this.remainderData = null;\n      this.currentIV = null;\n      this.currentResult = null;\n    };\n    _proto.isSync = function isSync() {\n      return this.useSoftware;\n    };\n    _proto.flush = function flush() {\n      var currentResult = this.currentResult,\n        remainderData = this.remainderData;\n      if (!currentResult || remainderData) {\n        this.reset();\n        return null;\n      }\n      var data = new Uint8Array(currentResult);\n      this.reset();\n      if (this.removePKCS7Padding) {\n        return removePadding(data);\n      }\n      return data;\n    };\n    _proto.reset = function reset() {\n      this.currentResult = null;\n      this.currentIV = null;\n      this.remainderData = null;\n      if (this.softwareDecrypter) {\n        this.softwareDecrypter = null;\n      }\n    };\n    _proto.decrypt = function decrypt(data, key, iv, aesMode) {\n      var _this = this;\n      if (this.useSoftware) {\n        return new Promise(function (resolve, reject) {\n          var dataView = ArrayBuffer.isView(data) ? data : new Uint8Array(data);\n          _this.softwareDecrypt(dataView, key, iv, aesMode);\n          var decryptResult = _this.flush();\n          if (decryptResult) {\n            resolve(decryptResult.buffer);\n          } else {\n            reject(new Error('[softwareDecrypt] Failed to decrypt data'));\n          }\n        });\n      }\n      return this.webCryptoDecrypt(new Uint8Array(data), key, iv, aesMode);\n    }\n\n    // Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached\n    // data is handled in the flush() call\n    ;\n    _proto.softwareDecrypt = function softwareDecrypt(data, key, iv, aesMode) {\n      var currentIV = this.currentIV,\n        currentResult = this.currentResult,\n        remainderData = this.remainderData;\n      if (aesMode !== DecrypterAesMode.cbc || key.byteLength !== 16) {\n        logger.warn('SoftwareDecrypt: can only handle AES-128-CBC');\n        return null;\n      }\n      this.logOnce('JS AES decrypt');\n      // The output is staggered during progressive parsing - the current result is cached, and emitted on the next call\n      // This is done in order to strip PKCS7 padding, which is found at the end of each segment. We only know we've reached\n      // the end on flush(), but by that time we have already received all bytes for the segment.\n      // Progressive decryption does not work with WebCrypto\n\n      if (remainderData) {\n        data = appendUint8Array(remainderData, data);\n        this.remainderData = null;\n      }\n\n      // Byte length must be a multiple of 16 (AES-128 = 128 bit blocks = 16 bytes)\n      var currentChunk = this.getValidChunk(data);\n      if (!currentChunk.length) {\n        return null;\n      }\n      if (currentIV) {\n        iv = currentIV;\n      }\n      var softwareDecrypter = this.softwareDecrypter;\n      if (!softwareDecrypter) {\n        softwareDecrypter = this.softwareDecrypter = new AESDecryptor();\n      }\n      softwareDecrypter.expandKey(key);\n      var result = currentResult;\n      this.currentResult = softwareDecrypter.decrypt(currentChunk.buffer, 0, iv);\n      this.currentIV = currentChunk.slice(-16).buffer;\n      if (!result) {\n        return null;\n      }\n      return result;\n    };\n    _proto.webCryptoDecrypt = function webCryptoDecrypt(data, key, iv, aesMode) {\n      var _this2 = this;\n      if (this.key !== key || !this.fastAesKey) {\n        if (!this.subtle) {\n          return Promise.resolve(this.onWebCryptoError(data, key, iv, aesMode));\n        }\n        this.key = key;\n        this.fastAesKey = new FastAESKey(this.subtle, key, aesMode);\n      }\n      return this.fastAesKey.expandKey().then(function (aesKey) {\n        // decrypt using web crypto\n        if (!_this2.subtle) {\n          return Promise.reject(new Error('web crypto not initialized'));\n        }\n        _this2.logOnce('WebCrypto AES decrypt');\n        var crypto = new AESCrypto(_this2.subtle, new Uint8Array(iv), aesMode);\n        return crypto.decrypt(data.buffer, aesKey);\n      }).catch(function (err) {\n        logger.warn(\"[decrypter]: WebCrypto Error, disable WebCrypto API, \" + err.name + \": \" + err.message);\n        return _this2.onWebCryptoError(data, key, iv, aesMode);\n      });\n    };\n    _proto.onWebCryptoError = function onWebCryptoError(data, key, iv, aesMode) {\n      var enableSoftwareAES = this.enableSoftwareAES;\n      if (enableSoftwareAES) {\n        this.useSoftware = true;\n        this.logEnabled = true;\n        this.softwareDecrypt(data, key, iv, aesMode);\n        var decryptResult = this.flush();\n        if (decryptResult) {\n          return decryptResult.buffer;\n        }\n      }\n      throw new Error('WebCrypto' + (enableSoftwareAES ? ' and softwareDecrypt' : '') + ': failed to decrypt data');\n    };\n    _proto.getValidChunk = function getValidChunk(data) {\n      var currentChunk = data;\n      var splitPoint = data.length - data.length % CHUNK_SIZE;\n      if (splitPoint !== data.length) {\n        currentChunk = data.slice(0, splitPoint);\n        this.remainderData = data.slice(splitPoint);\n      }\n      return currentChunk;\n    };\n    _proto.logOnce = function logOnce(msg) {\n      if (!this.logEnabled) {\n        return;\n      }\n      logger.log(\"[decrypter]: \" + msg);\n      this.logEnabled = false;\n    };\n    return Decrypter;\n  }();\n\n  var MIN_CHUNK_SIZE = Math.pow(2, 17); // 128kb\n  var FragmentLoader = /*#__PURE__*/function () {\n    function FragmentLoader(config) {\n      this.config = void 0;\n      this.loader = null;\n      this.partLoadTimeout = -1;\n      this.config = config;\n    }\n    var _proto = FragmentLoader.prototype;\n    _proto.destroy = function destroy() {\n      if (this.loader) {\n        this.loader.destroy();\n        this.loader = null;\n      }\n    };\n    _proto.abort = function abort() {\n      if (this.loader) {\n        // Abort the loader for current fragment. Only one may load at any given time\n        this.loader.abort();\n      }\n    };\n    _proto.load = function load(frag, onProgress) {\n      var _this = this;\n      var url = frag.url;\n      if (!url) {\n        return Promise.reject(new LoadError({\n          type: ErrorTypes.NETWORK_ERROR,\n          details: ErrorDetails.FRAG_LOAD_ERROR,\n          fatal: false,\n          frag: frag,\n          error: new Error(\"Fragment does not have a \" + (url ? 'part list' : 'url')),\n          networkDetails: null\n        }));\n      }\n      this.abort();\n      var config = this.config;\n      var FragmentILoader = config.fLoader;\n      var DefaultILoader = config.loader;\n      return new Promise(function (resolve, reject) {\n        if (_this.loader) {\n          _this.loader.destroy();\n        }\n        if (frag.gap) {\n          if (frag.tagList.some(function (tags) {\n            return tags[0] === 'GAP';\n          })) {\n            reject(createGapLoadError(frag));\n            return;\n          } else {\n            // Reset temporary treatment as GAP tag\n            frag.gap = false;\n          }\n        }\n        var loader = _this.loader = FragmentILoader ? new FragmentILoader(config) : new DefaultILoader(config);\n        var loaderContext = createLoaderContext(frag);\n        frag.loader = loader;\n        var loadPolicy = getLoaderConfigWithoutReties(config.fragLoadPolicy.default);\n        var loaderConfig = {\n          loadPolicy: loadPolicy,\n          timeout: loadPolicy.maxLoadTimeMs,\n          maxRetry: 0,\n          retryDelay: 0,\n          maxRetryDelay: 0,\n          highWaterMark: frag.sn === 'initSegment' ? Infinity : MIN_CHUNK_SIZE\n        };\n        // Assign frag stats to the loader's stats reference\n        frag.stats = loader.stats;\n        var callbacks = {\n          onSuccess: function onSuccess(response, stats, context, networkDetails) {\n            _this.resetLoader(frag, loader);\n            var payload = response.data;\n            if (context.resetIV && frag.decryptdata) {\n              frag.decryptdata.iv = new Uint8Array(payload.slice(0, 16));\n              payload = payload.slice(16);\n            }\n            resolve({\n              frag: frag,\n              part: null,\n              payload: payload,\n              networkDetails: networkDetails\n            });\n          },\n          onError: function onError(response, context, networkDetails, stats) {\n            _this.resetLoader(frag, loader);\n            reject(new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.FRAG_LOAD_ERROR,\n              fatal: false,\n              frag: frag,\n              response: _objectSpread2({\n                url: url,\n                data: undefined\n              }, response),\n              error: new Error(\"HTTP Error \" + response.code + \" \" + response.text),\n              networkDetails: networkDetails,\n              stats: stats\n            }));\n          },\n          onAbort: function onAbort(stats, context, networkDetails) {\n            _this.resetLoader(frag, loader);\n            reject(new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.INTERNAL_ABORTED,\n              fatal: false,\n              frag: frag,\n              error: new Error('Aborted'),\n              networkDetails: networkDetails,\n              stats: stats\n            }));\n          },\n          onTimeout: function onTimeout(stats, context, networkDetails) {\n            _this.resetLoader(frag, loader);\n            reject(new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.FRAG_LOAD_TIMEOUT,\n              fatal: false,\n              frag: frag,\n              error: new Error(\"Timeout after \" + loaderConfig.timeout + \"ms\"),\n              networkDetails: networkDetails,\n              stats: stats\n            }));\n          }\n        };\n        if (onProgress) {\n          callbacks.onProgress = function (stats, context, data, networkDetails) {\n            return onProgress({\n              frag: frag,\n              part: null,\n              payload: data,\n              networkDetails: networkDetails\n            });\n          };\n        }\n        loader.load(loaderContext, loaderConfig, callbacks);\n      });\n    };\n    _proto.loadPart = function loadPart(frag, part, onProgress) {\n      var _this2 = this;\n      this.abort();\n      var config = this.config;\n      var FragmentILoader = config.fLoader;\n      var DefaultILoader = config.loader;\n      return new Promise(function (resolve, reject) {\n        if (_this2.loader) {\n          _this2.loader.destroy();\n        }\n        if (frag.gap || part.gap) {\n          reject(createGapLoadError(frag, part));\n          return;\n        }\n        var loader = _this2.loader = FragmentILoader ? new FragmentILoader(config) : new DefaultILoader(config);\n        var loaderContext = createLoaderContext(frag, part);\n        frag.loader = loader;\n        // Should we define another load policy for parts?\n        var loadPolicy = getLoaderConfigWithoutReties(config.fragLoadPolicy.default);\n        var loaderConfig = {\n          loadPolicy: loadPolicy,\n          timeout: loadPolicy.maxLoadTimeMs,\n          maxRetry: 0,\n          retryDelay: 0,\n          maxRetryDelay: 0,\n          highWaterMark: MIN_CHUNK_SIZE\n        };\n        // Assign part stats to the loader's stats reference\n        part.stats = loader.stats;\n        loader.load(loaderContext, loaderConfig, {\n          onSuccess: function onSuccess(response, stats, context, networkDetails) {\n            _this2.resetLoader(frag, loader);\n            _this2.updateStatsFromPart(frag, part);\n            var partLoadedData = {\n              frag: frag,\n              part: part,\n              payload: response.data,\n              networkDetails: networkDetails\n            };\n            onProgress(partLoadedData);\n            resolve(partLoadedData);\n          },\n          onError: function onError(response, context, networkDetails, stats) {\n            _this2.resetLoader(frag, loader);\n            reject(new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.FRAG_LOAD_ERROR,\n              fatal: false,\n              frag: frag,\n              part: part,\n              response: _objectSpread2({\n                url: loaderContext.url,\n                data: undefined\n              }, response),\n              error: new Error(\"HTTP Error \" + response.code + \" \" + response.text),\n              networkDetails: networkDetails,\n              stats: stats\n            }));\n          },\n          onAbort: function onAbort(stats, context, networkDetails) {\n            frag.stats.aborted = part.stats.aborted;\n            _this2.resetLoader(frag, loader);\n            reject(new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.INTERNAL_ABORTED,\n              fatal: false,\n              frag: frag,\n              part: part,\n              error: new Error('Aborted'),\n              networkDetails: networkDetails,\n              stats: stats\n            }));\n          },\n          onTimeout: function onTimeout(stats, context, networkDetails) {\n            _this2.resetLoader(frag, loader);\n            reject(new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.FRAG_LOAD_TIMEOUT,\n              fatal: false,\n              frag: frag,\n              part: part,\n              error: new Error(\"Timeout after \" + loaderConfig.timeout + \"ms\"),\n              networkDetails: networkDetails,\n              stats: stats\n            }));\n          }\n        });\n      });\n    };\n    _proto.updateStatsFromPart = function updateStatsFromPart(frag, part) {\n      var fragStats = frag.stats;\n      var partStats = part.stats;\n      var partTotal = partStats.total;\n      fragStats.loaded += partStats.loaded;\n      if (partTotal) {\n        var estTotalParts = Math.round(frag.duration / part.duration);\n        var estLoadedParts = Math.min(Math.round(fragStats.loaded / partTotal), estTotalParts);\n        var estRemainingParts = estTotalParts - estLoadedParts;\n        var estRemainingBytes = estRemainingParts * Math.round(fragStats.loaded / estLoadedParts);\n        fragStats.total = fragStats.loaded + estRemainingBytes;\n      } else {\n        fragStats.total = Math.max(fragStats.loaded, fragStats.total);\n      }\n      var fragLoading = fragStats.loading;\n      var partLoading = partStats.loading;\n      if (fragLoading.start) {\n        // add to fragment loader latency\n        fragLoading.first += partLoading.first - partLoading.start;\n      } else {\n        fragLoading.start = partLoading.start;\n        fragLoading.first = partLoading.first;\n      }\n      fragLoading.end = partLoading.end;\n    };\n    _proto.resetLoader = function resetLoader(frag, loader) {\n      frag.loader = null;\n      if (this.loader === loader) {\n        self.clearTimeout(this.partLoadTimeout);\n        this.loader = null;\n      }\n      loader.destroy();\n    };\n    return FragmentLoader;\n  }();\n  function createLoaderContext(frag, part) {\n    if (part === void 0) {\n      part = null;\n    }\n    var segment = part || frag;\n    var loaderContext = {\n      frag: frag,\n      part: part,\n      responseType: 'arraybuffer',\n      url: segment.url,\n      headers: {},\n      rangeStart: 0,\n      rangeEnd: 0\n    };\n    var start = segment.byteRangeStartOffset;\n    var end = segment.byteRangeEndOffset;\n    if (isFiniteNumber(start) && isFiniteNumber(end)) {\n      var _frag$decryptdata;\n      var byteRangeStart = start;\n      var byteRangeEnd = end;\n      if (frag.sn === 'initSegment' && isMethodFullSegmentAesCbc((_frag$decryptdata = frag.decryptdata) == null ? void 0 : _frag$decryptdata.method)) {\n        // MAP segment encrypted with method 'AES-128' or 'AES-256' (cbc), when served with HTTP Range,\n        // has the unencrypted size specified in the range.\n        // Ref: https://tools.ietf.org/html/draft-pantos-hls-rfc8216bis-08#section-6.3.6\n        var fragmentLen = end - start;\n        if (fragmentLen % 16) {\n          byteRangeEnd = end + (16 - fragmentLen % 16);\n        }\n        if (start !== 0) {\n          loaderContext.resetIV = true;\n          byteRangeStart = start - 16;\n        }\n      }\n      loaderContext.rangeStart = byteRangeStart;\n      loaderContext.rangeEnd = byteRangeEnd;\n    }\n    return loaderContext;\n  }\n  function createGapLoadError(frag, part) {\n    var error = new Error(\"GAP \" + (frag.gap ? 'tag' : 'attribute') + \" found\");\n    var errorData = {\n      type: ErrorTypes.MEDIA_ERROR,\n      details: ErrorDetails.FRAG_GAP,\n      fatal: false,\n      frag: frag,\n      error: error,\n      networkDetails: null\n    };\n    if (part) {\n      errorData.part = part;\n    }\n    (part ? part : frag).stats.aborted = true;\n    return new LoadError(errorData);\n  }\n  function isMethodFullSegmentAesCbc(method) {\n    return method === 'AES-128' || method === 'AES-256';\n  }\n  var LoadError = /*#__PURE__*/function (_Error) {\n    function LoadError(data) {\n      var _this3;\n      _this3 = _Error.call(this, data.error.message) || this;\n      _this3.data = void 0;\n      _this3.data = data;\n      return _this3;\n    }\n    _inheritsLoose(LoadError, _Error);\n    return LoadError;\n  }(/*#__PURE__*/_wrapNativeSuper(Error));\n\n  /**\n   * @ignore\n   * Sub-class specialization of EventHandler base class.\n   *\n   * TaskLoop allows to schedule a task function being called (optionnaly repeatedly) on the main loop,\n   * scheduled asynchroneously, avoiding recursive calls in the same tick.\n   *\n   * The task itself is implemented in `doTick`. It can be requested and called for single execution\n   * using the `tick` method.\n   *\n   * It will be assured that the task execution method (`tick`) only gets called once per main loop \"tick\",\n   * no matter how often it gets requested for execution. Execution in further ticks will be scheduled accordingly.\n   *\n   * If further execution requests have already been scheduled on the next tick, it can be checked with `hasNextTick`,\n   * and cancelled with `clearNextTick`.\n   *\n   * The task can be scheduled as an interval repeatedly with a period as parameter (see `setInterval`, `clearInterval`).\n   *\n   * Sub-classes need to implement the `doTick` method which will effectively have the task execution routine.\n   *\n   * Further explanations:\n   *\n   * The baseclass has a `tick` method that will schedule the doTick call. It may be called synchroneously\n   * only for a stack-depth of one. On re-entrant calls, sub-sequent calls are scheduled for next main loop ticks.\n   *\n   * When the task execution (`tick` method) is called in re-entrant way this is detected and\n   * we are limiting the task execution per call stack to exactly one, but scheduling/post-poning further\n   * task processing on the next main loop iteration (also known as \"next tick\" in the Node/JS runtime lingo).\n   */\n  var TaskLoop = /*#__PURE__*/function (_Logger) {\n    function TaskLoop(label, logger) {\n      var _this;\n      _this = _Logger.call(this, label, logger) || this;\n      _this._boundTick = void 0;\n      _this._tickTimer = null;\n      _this._tickInterval = null;\n      _this._tickCallCount = 0;\n      _this._boundTick = _this.tick.bind(_this);\n      return _this;\n    }\n    _inheritsLoose(TaskLoop, _Logger);\n    var _proto = TaskLoop.prototype;\n    _proto.destroy = function destroy() {\n      this.onHandlerDestroying();\n      this.onHandlerDestroyed();\n    };\n    _proto.onHandlerDestroying = function onHandlerDestroying() {\n      // clear all timers before unregistering from event bus\n      this.clearNextTick();\n      this.clearInterval();\n    };\n    _proto.onHandlerDestroyed = function onHandlerDestroyed() {};\n    _proto.hasInterval = function hasInterval() {\n      return !!this._tickInterval;\n    };\n    _proto.hasNextTick = function hasNextTick() {\n      return !!this._tickTimer;\n    }\n\n    /**\n     * @param millis - Interval time (ms)\n     * @eturns True when interval has been scheduled, false when already scheduled (no effect)\n     */;\n    _proto.setInterval = function setInterval(millis) {\n      if (!this._tickInterval) {\n        this._tickCallCount = 0;\n        this._tickInterval = self.setInterval(this._boundTick, millis);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * @returns True when interval was cleared, false when none was set (no effect)\n     */;\n    _proto.clearInterval = function clearInterval() {\n      if (this._tickInterval) {\n        self.clearInterval(this._tickInterval);\n        this._tickInterval = null;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * @returns True when timeout was cleared, false when none was set (no effect)\n     */;\n    _proto.clearNextTick = function clearNextTick() {\n      if (this._tickTimer) {\n        self.clearTimeout(this._tickTimer);\n        this._tickTimer = null;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Will call the subclass doTick implementation in this main loop tick\n     * or in the next one (via setTimeout(,0)) in case it has already been called\n     * in this tick (in case this is a re-entrant call).\n     */;\n    _proto.tick = function tick() {\n      this._tickCallCount++;\n      if (this._tickCallCount === 1) {\n        this.doTick();\n        // re-entrant call to tick from previous doTick call stack\n        // -> schedule a call on the next main loop iteration to process this task processing request\n        if (this._tickCallCount > 1) {\n          // make sure only one timer exists at any time at max\n          this.tickImmediate();\n        }\n        this._tickCallCount = 0;\n      }\n    };\n    _proto.tickImmediate = function tickImmediate() {\n      this.clearNextTick();\n      this._tickTimer = self.setTimeout(this._boundTick, 0);\n    }\n\n    /**\n     * For subclass to implement task logic\n     * @abstract\n     */;\n    _proto.doTick = function doTick() {};\n    return TaskLoop;\n  }(Logger);\n\n  var ChunkMetadata = function ChunkMetadata(level, sn, id, size, part, partial) {\n    if (size === void 0) {\n      size = 0;\n    }\n    if (part === void 0) {\n      part = -1;\n    }\n    if (partial === void 0) {\n      partial = false;\n    }\n    this.level = void 0;\n    this.sn = void 0;\n    this.part = void 0;\n    this.id = void 0;\n    this.size = void 0;\n    this.partial = void 0;\n    this.transmuxing = getNewPerformanceTiming();\n    this.buffering = {\n      audio: getNewPerformanceTiming(),\n      video: getNewPerformanceTiming(),\n      audiovideo: getNewPerformanceTiming()\n    };\n    this.level = level;\n    this.sn = sn;\n    this.id = id;\n    this.size = size;\n    this.part = part;\n    this.partial = partial;\n  };\n  function getNewPerformanceTiming() {\n    return {\n      start: 0,\n      executeStart: 0,\n      executeEnd: 0,\n      end: 0\n    };\n  }\n\n  /**\n   * Provides methods dealing with buffer length retrieval for example.\n   *\n   * In general, a helper around HTML5 MediaElement TimeRanges gathered from `buffered` property.\n   *\n   * Also @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered\n   */\n\n  var noopBuffered = {\n    length: 0,\n    start: function start() {\n      return 0;\n    },\n    end: function end() {\n      return 0;\n    }\n  };\n  var BufferHelper = /*#__PURE__*/function () {\n    function BufferHelper() {}\n    /**\n     * Return true if `media`'s buffered include `position`\n     */\n    BufferHelper.isBuffered = function isBuffered(media, position) {\n      if (media) {\n        var buffered = BufferHelper.getBuffered(media);\n        for (var i = buffered.length; i--;) {\n          if (position >= buffered.start(i) && position <= buffered.end(i)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    };\n    BufferHelper.bufferedRanges = function bufferedRanges(media) {\n      if (media) {\n        var timeRanges = BufferHelper.getBuffered(media);\n        return BufferHelper.timeRangesToArray(timeRanges);\n      }\n      return [];\n    };\n    BufferHelper.timeRangesToArray = function timeRangesToArray(timeRanges) {\n      var buffered = [];\n      for (var i = 0; i < timeRanges.length; i++) {\n        buffered.push({\n          start: timeRanges.start(i),\n          end: timeRanges.end(i)\n        });\n      }\n      return buffered;\n    };\n    BufferHelper.bufferInfo = function bufferInfo(media, pos, maxHoleDuration) {\n      if (media) {\n        var buffered = BufferHelper.bufferedRanges(media);\n        if (buffered.length) {\n          return BufferHelper.bufferedInfo(buffered, pos, maxHoleDuration);\n        }\n      }\n      return {\n        len: 0,\n        start: pos,\n        end: pos,\n        bufferedIndex: -1\n      };\n    };\n    BufferHelper.bufferedInfo = function bufferedInfo(buffered, pos, maxHoleDuration) {\n      pos = Math.max(0, pos);\n      // sort on buffer.start/smaller end (IE does not always return sorted buffered range)\n      if (buffered.length > 1) {\n        buffered.sort(function (a, b) {\n          return a.start - b.start || b.end - a.end;\n        });\n      }\n      var bufferedIndex = -1;\n      var buffered2 = [];\n      if (maxHoleDuration) {\n        // there might be some small holes between buffer time range\n        // consider that holes smaller than maxHoleDuration are irrelevant and build another\n        // buffer time range representations that discards those holes\n        for (var i = 0; i < buffered.length; i++) {\n          if (pos >= buffered[i].start && pos <= buffered[i].end) {\n            bufferedIndex = i;\n          }\n          var buf2len = buffered2.length;\n          if (buf2len) {\n            var buf2end = buffered2[buf2len - 1].end;\n            // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)\n            if (buffered[i].start - buf2end < maxHoleDuration) {\n              // merge overlapping time ranges\n              // update lastRange.end only if smaller than item.end\n              // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)\n              // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])\n              if (buffered[i].end > buf2end) {\n                buffered2[buf2len - 1].end = buffered[i].end;\n              }\n            } else {\n              // big hole\n              buffered2.push(buffered[i]);\n            }\n          } else {\n            // first value\n            buffered2.push(buffered[i]);\n          }\n        }\n      } else {\n        buffered2 = buffered;\n      }\n      var bufferLen = 0;\n      var nextStart;\n\n      // bufferStart and bufferEnd are buffer boundaries around current playback position (pos)\n      var bufferStart = pos;\n      var bufferEnd = pos;\n      for (var _i = 0; _i < buffered2.length; _i++) {\n        var start = buffered2[_i].start;\n        var end = buffered2[_i].end;\n        // logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));\n        if (bufferedIndex === -1 && pos >= start && pos <= end) {\n          bufferedIndex = _i;\n        }\n        if (pos + maxHoleDuration >= start && pos < end) {\n          // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length\n          bufferStart = start;\n          bufferEnd = end;\n          bufferLen = bufferEnd - pos;\n        } else if (pos + maxHoleDuration < start) {\n          nextStart = start;\n          break;\n        }\n      }\n      return {\n        len: bufferLen,\n        start: bufferStart || 0,\n        end: bufferEnd || 0,\n        nextStart: nextStart,\n        buffered: buffered,\n        bufferedIndex: bufferedIndex\n      };\n    }\n\n    /**\n     * Safe method to get buffered property.\n     * SourceBuffer.buffered may throw if SourceBuffer is removed from it's MediaSource\n     */;\n    BufferHelper.getBuffered = function getBuffered(media) {\n      try {\n        return media.buffered || noopBuffered;\n      } catch (e) {\n        logger.log('failed to get media.buffered', e);\n        return noopBuffered;\n      }\n    };\n    return BufferHelper;\n  }();\n\n  var VARIABLE_REPLACEMENT_REGEX = /\\{\\$([a-zA-Z0-9-_]+)\\}/g;\n  function hasVariableReferences(str) {\n    return VARIABLE_REPLACEMENT_REGEX.test(str);\n  }\n  function substituteVariables(parsed, value) {\n    if (parsed.variableList !== null || parsed.hasVariableRefs) {\n      var variableList = parsed.variableList;\n      return value.replace(VARIABLE_REPLACEMENT_REGEX, function (variableReference) {\n        var variableName = variableReference.substring(2, variableReference.length - 1);\n        var variableValue = variableList == null ? void 0 : variableList[variableName];\n        if (variableValue === undefined) {\n          parsed.playlistParsingError || (parsed.playlistParsingError = new Error(\"Missing preceding EXT-X-DEFINE tag for Variable Reference: \\\"\" + variableName + \"\\\"\"));\n          return variableReference;\n        }\n        return variableValue;\n      });\n    }\n    return value;\n  }\n  function addVariableDefinition(parsed, attr, parentUrl) {\n    var variableList = parsed.variableList;\n    if (!variableList) {\n      parsed.variableList = variableList = {};\n    }\n    var NAME;\n    var VALUE;\n    if ('QUERYPARAM' in attr) {\n      NAME = attr.QUERYPARAM;\n      try {\n        var searchParams = new self.URL(parentUrl).searchParams;\n        if (searchParams.has(NAME)) {\n          VALUE = searchParams.get(NAME);\n        } else {\n          throw new Error(\"\\\"\" + NAME + \"\\\" does not match any query parameter in URI: \\\"\" + parentUrl + \"\\\"\");\n        }\n      } catch (error) {\n        parsed.playlistParsingError || (parsed.playlistParsingError = new Error(\"EXT-X-DEFINE QUERYPARAM: \" + error.message));\n      }\n    } else {\n      NAME = attr.NAME;\n      VALUE = attr.VALUE;\n    }\n    if (NAME in variableList) {\n      parsed.playlistParsingError || (parsed.playlistParsingError = new Error(\"EXT-X-DEFINE duplicate Variable Name declarations: \\\"\" + NAME + \"\\\"\"));\n    } else {\n      variableList[NAME] = VALUE || '';\n    }\n  }\n  function importVariableDefinition(parsed, attr, sourceVariableList) {\n    var IMPORT = attr.IMPORT;\n    if (sourceVariableList && IMPORT in sourceVariableList) {\n      var variableList = parsed.variableList;\n      if (!variableList) {\n        parsed.variableList = variableList = {};\n      }\n      variableList[IMPORT] = sourceVariableList[IMPORT];\n    } else {\n      parsed.playlistParsingError || (parsed.playlistParsingError = new Error(\"EXT-X-DEFINE IMPORT attribute not found in Multivariant Playlist: \\\"\" + IMPORT + \"\\\"\"));\n    }\n  }\n\n  var DECIMAL_RESOLUTION_REGEX = /^(\\d+)x(\\d+)$/;\n  var ATTR_LIST_REGEX = /(.+?)=(\".*?\"|.*?)(?:,|$)/g;\n\n  // adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js\n  var AttrList = /*#__PURE__*/function () {\n    function AttrList(attrs, parsed) {\n      if (typeof attrs === 'string') {\n        attrs = AttrList.parseAttrList(attrs, parsed);\n      }\n      _extends(this, attrs);\n    }\n    var _proto = AttrList.prototype;\n    _proto.decimalInteger = function decimalInteger(attrName) {\n      var intValue = parseInt(this[attrName], 10);\n      if (intValue > Number.MAX_SAFE_INTEGER) {\n        return Infinity;\n      }\n      return intValue;\n    };\n    _proto.hexadecimalInteger = function hexadecimalInteger(attrName) {\n      if (this[attrName]) {\n        var stringValue = (this[attrName] || '0x').slice(2);\n        stringValue = (stringValue.length & 1 ? '0' : '') + stringValue;\n        var value = new Uint8Array(stringValue.length / 2);\n        for (var i = 0; i < stringValue.length / 2; i++) {\n          value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);\n        }\n        return value;\n      }\n      return null;\n    };\n    _proto.hexadecimalIntegerAsNumber = function hexadecimalIntegerAsNumber(attrName) {\n      var intValue = parseInt(this[attrName], 16);\n      if (intValue > Number.MAX_SAFE_INTEGER) {\n        return Infinity;\n      }\n      return intValue;\n    };\n    _proto.decimalFloatingPoint = function decimalFloatingPoint(attrName) {\n      return parseFloat(this[attrName]);\n    };\n    _proto.optionalFloat = function optionalFloat(attrName, defaultValue) {\n      var value = this[attrName];\n      return value ? parseFloat(value) : defaultValue;\n    };\n    _proto.enumeratedString = function enumeratedString(attrName) {\n      return this[attrName];\n    };\n    _proto.enumeratedStringList = function enumeratedStringList(attrName, dict) {\n      var attrValue = this[attrName];\n      return (attrValue ? attrValue.split(/[ ,]+/) : []).reduce(function (result, identifier) {\n        result[identifier.toLowerCase()] = true;\n        return result;\n      }, dict);\n    };\n    _proto.bool = function bool(attrName) {\n      return this[attrName] === 'YES';\n    };\n    _proto.decimalResolution = function decimalResolution(attrName) {\n      var res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);\n      if (res === null) {\n        return undefined;\n      }\n      return {\n        width: parseInt(res[1], 10),\n        height: parseInt(res[2], 10)\n      };\n    };\n    AttrList.parseAttrList = function parseAttrList(input, parsed) {\n      var match;\n      var attrs = {};\n      var quote = '\"';\n      ATTR_LIST_REGEX.lastIndex = 0;\n      while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {\n        var name = match[1].trim();\n        var value = match[2];\n        var quotedString = value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1;\n        var hexadecimalSequence = false;\n        if (quotedString) {\n          value = value.slice(1, -1);\n        } else {\n          switch (name) {\n            case 'IV':\n            case 'SCTE35-CMD':\n            case 'SCTE35-IN':\n            case 'SCTE35-OUT':\n              hexadecimalSequence = true;\n          }\n        }\n        if (parsed && (quotedString || hexadecimalSequence)) {\n          {\n            value = substituteVariables(parsed, value);\n          }\n        } else if (!hexadecimalSequence && !quotedString) {\n          switch (name) {\n            case 'CLOSED-CAPTIONS':\n              if (value === 'NONE') {\n                break;\n              }\n            // falls through\n            case 'ALLOWED-CPC':\n            case 'CLASS':\n            case 'ASSOC-LANGUAGE':\n            case 'AUDIO':\n            case 'BYTERANGE':\n            case 'CHANNELS':\n            case 'CHARACTERISTICS':\n            case 'CODECS':\n            case 'DATA-ID':\n            case 'END-DATE':\n            case 'GROUP-ID':\n            case 'ID':\n            case 'IMPORT':\n            case 'INSTREAM-ID':\n            case 'KEYFORMAT':\n            case 'KEYFORMATVERSIONS':\n            case 'LANGUAGE':\n            case 'NAME':\n            case 'PATHWAY-ID':\n            case 'QUERYPARAM':\n            case 'RECENTLY-REMOVED-DATERANGES':\n            case 'SERVER-URI':\n            case 'STABLE-RENDITION-ID':\n            case 'STABLE-VARIANT-ID':\n            case 'START-DATE':\n            case 'SUBTITLES':\n            case 'SUPPLEMENTAL-CODECS':\n            case 'URI':\n            case 'VALUE':\n            case 'VIDEO':\n            case 'X-ASSET-LIST':\n            case 'X-ASSET-URI':\n              // Since we are not checking tag:attribute combination, just warn rather than ignoring attribute\n              logger.warn(input + \": attribute \" + name + \" is missing quotes\");\n            // continue;\n          }\n        }\n        attrs[name] = value;\n      }\n      return attrs;\n    };\n    return _createClass(AttrList, [{\n      key: \"clientAttrs\",\n      get: function get() {\n        return Object.keys(this).filter(function (attr) {\n          return attr.substring(0, 2) === 'X-';\n        });\n      }\n    }]);\n  }();\n\n  // Avoid exporting const enum so that these values can be inlined\n\n  var CLASS_INTERSTITIAL = 'com.apple.hls.interstitial';\n  function isDateRangeCueAttribute(attrName) {\n    return attrName !== \"ID\" && attrName !== \"CLASS\" && attrName !== \"CUE\" && attrName !== \"START-DATE\" && attrName !== \"DURATION\" && attrName !== \"END-DATE\" && attrName !== \"END-ON-NEXT\";\n  }\n  function isSCTE35Attribute(attrName) {\n    return attrName === \"SCTE35-OUT\" || attrName === \"SCTE35-IN\" || attrName === \"SCTE35-CMD\";\n  }\n  var DateRange = /*#__PURE__*/function () {\n    function DateRange(dateRangeAttr, dateRangeWithSameId, tagCount) {\n      var _dateRangeWithSameId$;\n      if (tagCount === void 0) {\n        tagCount = 0;\n      }\n      this.attr = void 0;\n      this.tagAnchor = void 0;\n      this.tagOrder = void 0;\n      this._startDate = void 0;\n      this._endDate = void 0;\n      this._dateAtEnd = void 0;\n      this._cue = void 0;\n      this._badValueForSameId = void 0;\n      this.tagAnchor = (dateRangeWithSameId == null ? void 0 : dateRangeWithSameId.tagAnchor) || null;\n      this.tagOrder = (_dateRangeWithSameId$ = dateRangeWithSameId == null ? void 0 : dateRangeWithSameId.tagOrder) != null ? _dateRangeWithSameId$ : tagCount;\n      if (dateRangeWithSameId) {\n        var previousAttr = dateRangeWithSameId.attr;\n        for (var key in previousAttr) {\n          if (Object.prototype.hasOwnProperty.call(dateRangeAttr, key) && dateRangeAttr[key] !== previousAttr[key]) {\n            logger.warn(\"DATERANGE tag attribute: \\\"\" + key + \"\\\" does not match for tags with ID: \\\"\" + dateRangeAttr.ID + \"\\\"\");\n            this._badValueForSameId = key;\n            break;\n          }\n        }\n        // Merge DateRange tags with the same ID\n        dateRangeAttr = _extends(new AttrList({}), previousAttr, dateRangeAttr);\n      }\n      this.attr = dateRangeAttr;\n      if (dateRangeWithSameId) {\n        this._startDate = dateRangeWithSameId._startDate;\n        this._cue = dateRangeWithSameId._cue;\n        this._endDate = dateRangeWithSameId._endDate;\n        this._dateAtEnd = dateRangeWithSameId._dateAtEnd;\n      } else {\n        this._startDate = new Date(dateRangeAttr[\"START-DATE\"]);\n      }\n      if (\"END-DATE\" in this.attr) {\n        var endDate = (dateRangeWithSameId == null ? void 0 : dateRangeWithSameId.endDate) || new Date(this.attr[\"END-DATE\"]);\n        if (isFiniteNumber(endDate.getTime())) {\n          this._endDate = endDate;\n        }\n      }\n    }\n    return _createClass(DateRange, [{\n      key: \"id\",\n      get: function get() {\n        return this.attr.ID;\n      }\n    }, {\n      key: \"class\",\n      get: function get() {\n        return this.attr.CLASS;\n      }\n    }, {\n      key: \"cue\",\n      get: function get() {\n        var _cue = this._cue;\n        if (_cue === undefined) {\n          return this._cue = this.attr.enumeratedStringList(this.attr.CUE ? 'CUE' : 'X-CUE', {\n            pre: false,\n            post: false,\n            once: false\n          });\n        }\n        return _cue;\n      }\n    }, {\n      key: \"startTime\",\n      get: function get() {\n        var tagAnchor = this.tagAnchor;\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        if (tagAnchor === null || tagAnchor.programDateTime === null) {\n          logger.warn(\"Expected tagAnchor Fragment with PDT set for DateRange \\\"\" + this.id + \"\\\": \" + tagAnchor);\n          return NaN;\n        }\n        return tagAnchor.start + (this.startDate.getTime() - tagAnchor.programDateTime) / 1000;\n      }\n    }, {\n      key: \"startDate\",\n      get: function get() {\n        return this._startDate;\n      }\n    }, {\n      key: \"endDate\",\n      get: function get() {\n        var dateAtEnd = this._endDate || this._dateAtEnd;\n        if (dateAtEnd) {\n          return dateAtEnd;\n        }\n        var duration = this.duration;\n        if (duration !== null) {\n          return this._dateAtEnd = new Date(this._startDate.getTime() + duration * 1000);\n        }\n        return null;\n      }\n    }, {\n      key: \"duration\",\n      get: function get() {\n        if (\"DURATION\" in this.attr) {\n          var duration = this.attr.decimalFloatingPoint(\"DURATION\");\n          if (isFiniteNumber(duration)) {\n            return duration;\n          }\n        } else if (this._endDate) {\n          return (this._endDate.getTime() - this._startDate.getTime()) / 1000;\n        }\n        return null;\n      }\n    }, {\n      key: \"plannedDuration\",\n      get: function get() {\n        if (\"PLANNED-DURATION\" in this.attr) {\n          return this.attr.decimalFloatingPoint(\"PLANNED-DURATION\");\n        }\n        return null;\n      }\n    }, {\n      key: \"endOnNext\",\n      get: function get() {\n        return this.attr.bool(\"END-ON-NEXT\");\n      }\n    }, {\n      key: \"isInterstitial\",\n      get: function get() {\n        return this.class === CLASS_INTERSTITIAL;\n      }\n    }, {\n      key: \"isValid\",\n      get: function get() {\n        return !!this.id && !this._badValueForSameId && isFiniteNumber(this.startDate.getTime()) && (this.duration === null || this.duration >= 0) && (!this.endOnNext || !!this.class) && (!this.attr.CUE || !this.cue.pre && !this.cue.post || this.cue.pre !== this.cue.post) && (!this.isInterstitial || 'X-ASSET-URI' in this.attr || 'X-ASSET-LIST' in this.attr);\n      }\n    }]);\n  }();\n\n  var DEFAULT_TARGET_DURATION = 10;\n\n  /**\n   * Object representing parsed data from an HLS Media Playlist. Found in {@link hls.js#Level.details}.\n   */\n  var LevelDetails = /*#__PURE__*/function () {\n    function LevelDetails(baseUrl) {\n      this.PTSKnown = false;\n      this.alignedSliding = false;\n      this.averagetargetduration = void 0;\n      this.endCC = 0;\n      this.endSN = 0;\n      this.fragments = void 0;\n      this.fragmentHint = void 0;\n      this.partList = null;\n      this.dateRanges = void 0;\n      this.dateRangeTagCount = 0;\n      this.live = true;\n      this.requestScheduled = -1;\n      this.ageHeader = 0;\n      this.advancedDateTime = void 0;\n      this.updated = true;\n      this.advanced = true;\n      this.misses = 0;\n      this.startCC = 0;\n      this.startSN = 0;\n      this.startTimeOffset = null;\n      this.targetduration = 0;\n      this.totalduration = 0;\n      this.type = null;\n      this.url = void 0;\n      this.m3u8 = '';\n      this.version = null;\n      this.canBlockReload = false;\n      this.canSkipUntil = 0;\n      this.canSkipDateRanges = false;\n      this.skippedSegments = 0;\n      this.recentlyRemovedDateranges = void 0;\n      this.partHoldBack = 0;\n      this.holdBack = 0;\n      this.partTarget = 0;\n      this.preloadHint = void 0;\n      this.renditionReports = void 0;\n      this.tuneInGoal = 0;\n      this.deltaUpdateFailed = void 0;\n      this.driftStartTime = 0;\n      this.driftEndTime = 0;\n      this.driftStart = 0;\n      this.driftEnd = 0;\n      this.encryptedFragments = void 0;\n      this.playlistParsingError = null;\n      this.variableList = null;\n      this.hasVariableRefs = false;\n      this.appliedTimelineOffset = void 0;\n      this.fragments = [];\n      this.encryptedFragments = [];\n      this.dateRanges = {};\n      this.url = baseUrl;\n    }\n    var _proto = LevelDetails.prototype;\n    _proto.reloaded = function reloaded(previous) {\n      if (!previous) {\n        this.advanced = true;\n        this.updated = true;\n        return;\n      }\n      var partSnDiff = this.lastPartSn - previous.lastPartSn;\n      var partIndexDiff = this.lastPartIndex - previous.lastPartIndex;\n      this.updated = this.endSN !== previous.endSN || !!partIndexDiff || !!partSnDiff || !this.live;\n      this.advanced = this.endSN > previous.endSN || partSnDiff > 0 || partSnDiff === 0 && partIndexDiff > 0;\n      if (this.updated || this.advanced) {\n        this.misses = Math.floor(previous.misses * 0.6);\n      } else {\n        this.misses = previous.misses + 1;\n      }\n    };\n    return _createClass(LevelDetails, [{\n      key: \"hasProgramDateTime\",\n      get: function get() {\n        if (this.fragments.length) {\n          return isFiniteNumber(this.fragments[this.fragments.length - 1].programDateTime);\n        }\n        return false;\n      }\n    }, {\n      key: \"levelTargetDuration\",\n      get: function get() {\n        return this.averagetargetduration || this.targetduration || DEFAULT_TARGET_DURATION;\n      }\n    }, {\n      key: \"drift\",\n      get: function get() {\n        var runTime = this.driftEndTime - this.driftStartTime;\n        if (runTime > 0) {\n          var runDuration = this.driftEnd - this.driftStart;\n          return runDuration * 1000 / runTime;\n        }\n        return 1;\n      }\n    }, {\n      key: \"edge\",\n      get: function get() {\n        return this.partEnd || this.fragmentEnd;\n      }\n    }, {\n      key: \"partEnd\",\n      get: function get() {\n        var _this$partList;\n        if ((_this$partList = this.partList) != null && _this$partList.length) {\n          return this.partList[this.partList.length - 1].end;\n        }\n        return this.fragmentEnd;\n      }\n    }, {\n      key: \"fragmentEnd\",\n      get: function get() {\n        var _this$fragments;\n        if ((_this$fragments = this.fragments) != null && _this$fragments.length) {\n          return this.fragments[this.fragments.length - 1].end;\n        }\n        return 0;\n      }\n    }, {\n      key: \"fragmentStart\",\n      get: function get() {\n        var _this$fragments2;\n        if ((_this$fragments2 = this.fragments) != null && _this$fragments2.length) {\n          return this.fragments[0].start;\n        }\n        return 0;\n      }\n    }, {\n      key: \"age\",\n      get: function get() {\n        if (this.advancedDateTime) {\n          return Math.max(Date.now() - this.advancedDateTime, 0) / 1000;\n        }\n        return 0;\n      }\n    }, {\n      key: \"lastPartIndex\",\n      get: function get() {\n        var _this$partList2;\n        if ((_this$partList2 = this.partList) != null && _this$partList2.length) {\n          return this.partList[this.partList.length - 1].index;\n        }\n        return -1;\n      }\n    }, {\n      key: \"maxPartIndex\",\n      get: function get() {\n        var partList = this.partList;\n        if (partList) {\n          var lastIndex = this.lastPartIndex;\n          if (lastIndex !== -1) {\n            for (var i = partList.length; i--;) {\n              if (partList[i].index > lastIndex) {\n                return partList[i].index;\n              }\n            }\n            return lastIndex;\n          }\n        }\n        return 0;\n      }\n    }, {\n      key: \"lastPartSn\",\n      get: function get() {\n        var _this$partList3;\n        if ((_this$partList3 = this.partList) != null && _this$partList3.length) {\n          return this.partList[this.partList.length - 1].fragment.sn;\n        }\n        return this.endSN;\n      }\n    }, {\n      key: \"expired\",\n      get: function get() {\n        if (this.live && this.age && this.misses < 3) {\n          var playlistWindowDuration = this.partEnd - this.fragmentStart;\n          return this.age > Math.max(playlistWindowDuration, this.totalduration) + this.levelTargetDuration;\n        }\n        return false;\n      }\n    }]);\n  }();\n\n  function isFullSegmentEncryption(method) {\n    return method === 'AES-128' || method === 'AES-256' || method === 'AES-256-CTR';\n  }\n  function getAesModeFromFullSegmentMethod(method) {\n    switch (method) {\n      case 'AES-128':\n      case 'AES-256':\n        return DecrypterAesMode.cbc;\n      case 'AES-256-CTR':\n        return DecrypterAesMode.ctr;\n      default:\n        throw new Error(\"invalid full segment method \" + method);\n    }\n  }\n\n  function base64Decode(base64encodedStr) {\n    return Uint8Array.from(atob(base64encodedStr), function (c) {\n      return c.charCodeAt(0);\n    });\n  }\n\n  // breaking up those two types in order to clarify what is happening in the decoding path.\n\n  // http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197\n  // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\n  /* utf.js - UTF-8 <=> UTF-16 convertion\n   *\n   * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n   * Version: 1.0\n   * LastModified: Dec 25 1999\n   * This library is free.  You can redistribute it and/or modify it.\n   */\n\n  function strToUtf8array(str) {\n    return Uint8Array.from(unescape(encodeURIComponent(str)), function (c) {\n      return c.charCodeAt(0);\n    });\n  }\n\n  function getKeyIdBytes(str) {\n    var keyIdbytes = strToUtf8array(str).subarray(0, 16);\n    var paddedkeyIdbytes = new Uint8Array(16);\n    paddedkeyIdbytes.set(keyIdbytes, 16 - keyIdbytes.length);\n    return paddedkeyIdbytes;\n  }\n  function changeEndianness(keyId) {\n    var swap = function swap(array, from, to) {\n      var cur = array[from];\n      array[from] = array[to];\n      array[to] = cur;\n    };\n    swap(keyId, 0, 3);\n    swap(keyId, 1, 2);\n    swap(keyId, 4, 5);\n    swap(keyId, 6, 7);\n  }\n  function convertDataUriToArrayBytes(uri) {\n    // data:[<media type][;attribute=value][;base64],<data>\n    var colonsplit = uri.split(':');\n    var keydata = null;\n    if (colonsplit[0] === 'data' && colonsplit.length === 2) {\n      var semicolonsplit = colonsplit[1].split(';');\n      var commasplit = semicolonsplit[semicolonsplit.length - 1].split(',');\n      if (commasplit.length === 2) {\n        var isbase64 = commasplit[0] === 'base64';\n        var data = commasplit[1];\n        if (isbase64) {\n          semicolonsplit.splice(-1, 1); // remove from processing\n          keydata = base64Decode(data);\n        } else {\n          keydata = getKeyIdBytes(data);\n        }\n      }\n    }\n    return keydata;\n  }\n\n  /** returns `undefined` is `self` is missing, e.g. in node */\n  var optionalSelf = typeof self !== 'undefined' ? self : undefined;\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess\n   */\n  var KeySystems = {\n    CLEARKEY: \"org.w3.clearkey\",\n    FAIRPLAY: \"com.apple.fps\",\n    PLAYREADY: \"com.microsoft.playready\",\n    WIDEVINE: \"com.widevine.alpha\"\n  };\n\n  // Playlist #EXT-X-KEY KEYFORMAT values\n  var KeySystemFormats = {\n    CLEARKEY: \"org.w3.clearkey\",\n    FAIRPLAY: \"com.apple.streamingkeydelivery\",\n    PLAYREADY: \"com.microsoft.playready\",\n    WIDEVINE: \"urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed\"\n  };\n  function keySystemFormatToKeySystemDomain(format) {\n    switch (format) {\n      case KeySystemFormats.FAIRPLAY:\n        return KeySystems.FAIRPLAY;\n      case KeySystemFormats.PLAYREADY:\n        return KeySystems.PLAYREADY;\n      case KeySystemFormats.WIDEVINE:\n        return KeySystems.WIDEVINE;\n      case KeySystemFormats.CLEARKEY:\n        return KeySystems.CLEARKEY;\n    }\n  }\n\n  // System IDs for which we can extract a key ID from \"encrypted\" event PSSH\n  var KeySystemIds = {\n    CENC: \"1077efecc0b24d02ace33c1e52e2fb4b\",\n    CLEARKEY: \"e2719d58a985b3c9781ab030af78d30e\",\n    PLAYREADY: \"9a04f07998404286ab92e65be0885f95\",\n    WIDEVINE: \"edef8ba979d64acea3c827dcd51d21ed\"\n  };\n  function keySystemIdToKeySystemDomain(systemId) {\n    if (systemId === KeySystemIds.WIDEVINE) {\n      return KeySystems.WIDEVINE;\n    } else if (systemId === KeySystemIds.PLAYREADY) {\n      return KeySystems.PLAYREADY;\n    } else if (systemId === KeySystemIds.CENC || systemId === KeySystemIds.CLEARKEY) {\n      return KeySystems.CLEARKEY;\n    }\n  }\n  function keySystemDomainToKeySystemFormat(keySystem) {\n    switch (keySystem) {\n      case KeySystems.FAIRPLAY:\n        return KeySystemFormats.FAIRPLAY;\n      case KeySystems.PLAYREADY:\n        return KeySystemFormats.PLAYREADY;\n      case KeySystems.WIDEVINE:\n        return KeySystemFormats.WIDEVINE;\n      case KeySystems.CLEARKEY:\n        return KeySystemFormats.CLEARKEY;\n    }\n  }\n  function getKeySystemsForConfig(config) {\n    var drmSystems = config.drmSystems,\n      widevineLicenseUrl = config.widevineLicenseUrl;\n    var keySystemsToAttempt = drmSystems ? [KeySystems.FAIRPLAY, KeySystems.WIDEVINE, KeySystems.PLAYREADY, KeySystems.CLEARKEY].filter(function (keySystem) {\n      return !!drmSystems[keySystem];\n    }) : [];\n    if (!keySystemsToAttempt[KeySystems.WIDEVINE] && widevineLicenseUrl) {\n      keySystemsToAttempt.push(KeySystems.WIDEVINE);\n    }\n    return keySystemsToAttempt;\n  }\n  var requestMediaKeySystemAccess = function (_optionalSelf$navigat) {\n    if (optionalSelf != null && (_optionalSelf$navigat = optionalSelf.navigator) != null && _optionalSelf$navigat.requestMediaKeySystemAccess) {\n      return self.navigator.requestMediaKeySystemAccess.bind(self.navigator);\n    } else {\n      return null;\n    }\n  }();\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration\n   */\n  function getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, drmSystemOptions) {\n    var initDataTypes;\n    switch (keySystem) {\n      case KeySystems.FAIRPLAY:\n        initDataTypes = ['cenc', 'sinf'];\n        break;\n      case KeySystems.WIDEVINE:\n      case KeySystems.PLAYREADY:\n        initDataTypes = ['cenc'];\n        break;\n      case KeySystems.CLEARKEY:\n        initDataTypes = ['cenc', 'keyids'];\n        break;\n      default:\n        throw new Error(\"Unknown key-system: \" + keySystem);\n    }\n    return createMediaKeySystemConfigurations(initDataTypes, audioCodecs, videoCodecs, drmSystemOptions);\n  }\n  function createMediaKeySystemConfigurations(initDataTypes, audioCodecs, videoCodecs, drmSystemOptions) {\n    var baseConfig = {\n      initDataTypes: initDataTypes,\n      persistentState: drmSystemOptions.persistentState || 'optional',\n      distinctiveIdentifier: drmSystemOptions.distinctiveIdentifier || 'optional',\n      sessionTypes: drmSystemOptions.sessionTypes || [drmSystemOptions.sessionType || 'temporary'],\n      audioCapabilities: audioCodecs.map(function (codec) {\n        return {\n          contentType: \"audio/mp4; codecs=\" + codec,\n          robustness: drmSystemOptions.audioRobustness || '',\n          encryptionScheme: drmSystemOptions.audioEncryptionScheme || null\n        };\n      }),\n      videoCapabilities: videoCodecs.map(function (codec) {\n        return {\n          contentType: \"video/mp4; codecs=\" + codec,\n          robustness: drmSystemOptions.videoRobustness || '',\n          encryptionScheme: drmSystemOptions.videoEncryptionScheme || null\n        };\n      })\n    };\n    return [baseConfig];\n  }\n  function isPersistentSessionType(drmSystemOptions) {\n    var _drmSystemOptions$ses;\n    return drmSystemOptions.sessionType === 'persistent-license' || !!((_drmSystemOptions$ses = drmSystemOptions.sessionTypes) != null && _drmSystemOptions$ses.some(function (type) {\n      return type === 'persistent-license';\n    }));\n  }\n  function parsePlayReadyWRM(keyBytes) {\n    var keyBytesUtf16 = new Uint16Array(keyBytes.buffer, keyBytes.byteOffset, keyBytes.byteLength / 2);\n    var keyByteStr = String.fromCharCode.apply(null, Array.from(keyBytesUtf16));\n\n    // Parse Playready WRMHeader XML\n    var xmlKeyBytes = keyByteStr.substring(keyByteStr.indexOf('<'), keyByteStr.length);\n    var parser = new DOMParser();\n    var xmlDoc = parser.parseFromString(xmlKeyBytes, 'text/xml');\n    var keyData = xmlDoc.getElementsByTagName('KID')[0];\n    if (keyData) {\n      var keyId = keyData.childNodes[0] ? keyData.childNodes[0].nodeValue : keyData.getAttribute('VALUE');\n      if (keyId) {\n        var keyIdArray = base64Decode(keyId).subarray(0, 16);\n        // KID value in PRO is a base64-encoded little endian GUID interpretation of UUID\n        // KID value in ‘tenc’ is a big endian UUID GUID interpretation of UUID\n        changeEndianness(keyIdArray);\n        return keyIdArray;\n      }\n    }\n    return null;\n  }\n\n  var keyUriToKeyIdMap = {};\n  var LevelKey = /*#__PURE__*/function () {\n    function LevelKey(method, uri, format, formatversions, iv) {\n      if (formatversions === void 0) {\n        formatversions = [1];\n      }\n      if (iv === void 0) {\n        iv = null;\n      }\n      this.uri = void 0;\n      this.method = void 0;\n      this.keyFormat = void 0;\n      this.keyFormatVersions = void 0;\n      this.encrypted = void 0;\n      this.isCommonEncryption = void 0;\n      this.iv = null;\n      this.key = null;\n      this.keyId = null;\n      this.pssh = null;\n      this.method = method;\n      this.uri = uri;\n      this.keyFormat = format;\n      this.keyFormatVersions = formatversions;\n      this.iv = iv;\n      this.encrypted = method ? method !== 'NONE' : false;\n      this.isCommonEncryption = this.encrypted && !isFullSegmentEncryption(method);\n    }\n    LevelKey.clearKeyUriToKeyIdMap = function clearKeyUriToKeyIdMap() {\n      keyUriToKeyIdMap = {};\n    };\n    var _proto = LevelKey.prototype;\n    _proto.isSupported = function isSupported() {\n      // If it's Segment encryption or No encryption, just select that key system\n      if (this.method) {\n        if (isFullSegmentEncryption(this.method) || this.method === 'NONE') {\n          return true;\n        }\n        if (this.keyFormat === 'identity') {\n          // Maintain support for clear SAMPLE-AES with MPEG-3 TS\n          return this.method === 'SAMPLE-AES';\n        } else {\n          switch (this.keyFormat) {\n            case KeySystemFormats.FAIRPLAY:\n            case KeySystemFormats.WIDEVINE:\n            case KeySystemFormats.PLAYREADY:\n            case KeySystemFormats.CLEARKEY:\n              return ['ISO-23001-7', 'SAMPLE-AES', 'SAMPLE-AES-CENC', 'SAMPLE-AES-CTR'].indexOf(this.method) !== -1;\n          }\n        }\n      }\n      return false;\n    };\n    _proto.getDecryptData = function getDecryptData(sn) {\n      if (!this.encrypted || !this.uri) {\n        return null;\n      }\n      if (isFullSegmentEncryption(this.method) && this.uri && !this.iv) {\n        if (typeof sn !== 'number') {\n          // We are fetching decryption data for a initialization segment\n          // If the segment was encrypted with AES-128/256\n          // It must have an IV defined. We cannot substitute the Segment Number in.\n          logger.warn(\"missing IV for initialization segment with method=\\\"\" + this.method + \"\\\" - compliance issue\");\n\n          // Explicitly set sn to resulting value from implicit conversions 'initSegment' values for IV generation.\n          sn = 0;\n        }\n        var iv = createInitializationVector(sn);\n        var decryptdata = new LevelKey(this.method, this.uri, 'identity', this.keyFormatVersions, iv);\n        return decryptdata;\n      }\n\n      // Initialize keyId if possible\n      var keyBytes = convertDataUriToArrayBytes(this.uri);\n      if (keyBytes) {\n        switch (this.keyFormat) {\n          case KeySystemFormats.WIDEVINE:\n            // Setting `pssh` on this LevelKey/DecryptData allows HLS.js to generate a session using\n            // the playlist-key before the \"encrypted\" event. (Comment out to only use \"encrypted\" path.)\n            this.pssh = keyBytes;\n            // In case of widevine keyID is embedded in PSSH box. Read Key ID.\n            if (keyBytes.length >= 22) {\n              this.keyId = keyBytes.subarray(keyBytes.length - 22, keyBytes.length - 6);\n            }\n            break;\n          case KeySystemFormats.PLAYREADY:\n            {\n              var PlayReadyKeySystemUUID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n              // Setting `pssh` on this LevelKey/DecryptData allows HLS.js to generate a session using\n              // the playlist-key before the \"encrypted\" event. (Comment out to only use \"encrypted\" path.)\n              this.pssh = mp4pssh(PlayReadyKeySystemUUID, null, keyBytes);\n              this.keyId = parsePlayReadyWRM(keyBytes);\n              break;\n            }\n          default:\n            {\n              var keydata = keyBytes.subarray(0, 16);\n              if (keydata.length !== 16) {\n                var padded = new Uint8Array(16);\n                padded.set(keydata, 16 - keydata.length);\n                keydata = padded;\n              }\n              this.keyId = keydata;\n              break;\n            }\n        }\n      }\n\n      // Default behavior: assign a new keyId for each uri\n      if (!this.keyId || this.keyId.byteLength !== 16) {\n        var keyId = keyUriToKeyIdMap[this.uri];\n        if (!keyId) {\n          var val = Object.keys(keyUriToKeyIdMap).length % Number.MAX_SAFE_INTEGER;\n          keyId = new Uint8Array(16);\n          var dv = new DataView(keyId.buffer, 12, 4); // Just set the last 4 bytes\n          dv.setUint32(0, val);\n          keyUriToKeyIdMap[this.uri] = keyId;\n        }\n        this.keyId = keyId;\n      }\n      return this;\n    };\n    return LevelKey;\n  }();\n  function createInitializationVector(segmentNumber) {\n    var uint8View = new Uint8Array(16);\n    for (var i = 12; i < 16; i++) {\n      uint8View[i] = segmentNumber >> 8 * (15 - i) & 0xff;\n    }\n    return uint8View;\n  }\n\n  var MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\\r\\n]*)(?:[\\r\\n](?:#[^\\r\\n]*)?)*([^\\r\\n]+)|#EXT-X-(SESSION-DATA|SESSION-KEY|DEFINE|CONTENT-STEERING|START):([^\\r\\n]*)[\\r\\n]+/g;\n  var MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;\n  var IS_MEDIA_PLAYLIST = /^#EXT(?:INF|-X-TARGETDURATION):/m; // Handle empty Media Playlist (first EXTINF not signaled, but TARGETDURATION present)\n\n  var LEVEL_PLAYLIST_REGEX_FAST = new RegExp([/#EXTINF:\\s*(\\d*(?:\\.\\d+)?)(?:,(.*)\\s+)?/.source,\n  // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title\n  /(?!#) *(\\S[^\\r\\n]*)/.source,\n  // segment URI, group 3 => the URI (note newline is not eaten)\n  /#.*/.source // All other non-segment oriented tags will match with all groups empty\n  ].join('|'), 'g');\n  var LEVEL_PLAYLIST_REGEX_SLOW = new RegExp([/#EXT-X-(PROGRAM-DATE-TIME|BYTERANGE|DATERANGE|DEFINE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source, /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\\d+)/.source, /#EXT-X-(DISCONTINUITY|ENDLIST|GAP|INDEPENDENT-SEGMENTS)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\\r?\\n?/.source].join('|'));\n  var M3U8Parser = /*#__PURE__*/function () {\n    function M3U8Parser() {}\n    M3U8Parser.findGroup = function findGroup(groups, mediaGroupId) {\n      for (var i = 0; i < groups.length; i++) {\n        var group = groups[i];\n        if (group.id === mediaGroupId) {\n          return group;\n        }\n      }\n    };\n    M3U8Parser.resolve = function resolve(url, baseUrl) {\n      return urlToolkitExports.buildAbsoluteURL(baseUrl, url, {\n        alwaysNormalize: true\n      });\n    };\n    M3U8Parser.isMediaPlaylist = function isMediaPlaylist(str) {\n      return IS_MEDIA_PLAYLIST.test(str);\n    };\n    M3U8Parser.parseMasterPlaylist = function parseMasterPlaylist(string, baseurl) {\n      var hasVariableRefs = hasVariableReferences(string) ;\n      var parsed = {\n        contentSteering: null,\n        levels: [],\n        playlistParsingError: null,\n        sessionData: null,\n        sessionKeys: null,\n        startTimeOffset: null,\n        variableList: null,\n        hasVariableRefs: hasVariableRefs\n      };\n      var levelsWithKnownCodecs = [];\n      MASTER_PLAYLIST_REGEX.lastIndex = 0;\n      var result;\n      while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {\n        if (result[1]) {\n          var _level$unknownCodecs;\n          // '#EXT-X-STREAM-INF' is found, parse level tag  in group 1\n          var attrs = new AttrList(result[1], parsed);\n          var uri = substituteVariables(parsed, result[2]) ;\n          var level = {\n            attrs: attrs,\n            bitrate: attrs.decimalInteger('BANDWIDTH') || attrs.decimalInteger('AVERAGE-BANDWIDTH'),\n            name: attrs.NAME,\n            url: M3U8Parser.resolve(uri, baseurl)\n          };\n          var resolution = attrs.decimalResolution('RESOLUTION');\n          if (resolution) {\n            level.width = resolution.width;\n            level.height = resolution.height;\n          }\n          setCodecs(attrs.CODECS, level);\n          var supplementalCodecs = attrs['SUPPLEMENTAL-CODECS'];\n          if (supplementalCodecs) {\n            level.supplemental = {};\n            setCodecs(supplementalCodecs, level.supplemental);\n          }\n          if (!((_level$unknownCodecs = level.unknownCodecs) != null && _level$unknownCodecs.length)) {\n            levelsWithKnownCodecs.push(level);\n          }\n          parsed.levels.push(level);\n        } else if (result[3]) {\n          var tag = result[3];\n          var attributes = result[4];\n          switch (tag) {\n            case 'SESSION-DATA':\n              {\n                // #EXT-X-SESSION-DATA\n                var sessionAttrs = new AttrList(attributes, parsed);\n                var dataId = sessionAttrs['DATA-ID'];\n                if (dataId) {\n                  if (parsed.sessionData === null) {\n                    parsed.sessionData = {};\n                  }\n                  parsed.sessionData[dataId] = sessionAttrs;\n                }\n                break;\n              }\n            case 'SESSION-KEY':\n              {\n                // #EXT-X-SESSION-KEY\n                var sessionKey = parseKey(attributes, baseurl, parsed);\n                if (sessionKey.encrypted && sessionKey.isSupported()) {\n                  if (parsed.sessionKeys === null) {\n                    parsed.sessionKeys = [];\n                  }\n                  parsed.sessionKeys.push(sessionKey);\n                } else {\n                  logger.warn(\"[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: \\\"\" + attributes + \"\\\"\");\n                }\n                break;\n              }\n            case 'DEFINE':\n              {\n                // #EXT-X-DEFINE\n                {\n                  var variableAttributes = new AttrList(attributes, parsed);\n                  addVariableDefinition(parsed, variableAttributes, baseurl);\n                }\n                break;\n              }\n            case 'CONTENT-STEERING':\n              {\n                // #EXT-X-CONTENT-STEERING\n                var contentSteeringAttributes = new AttrList(attributes, parsed);\n                parsed.contentSteering = {\n                  uri: M3U8Parser.resolve(contentSteeringAttributes['SERVER-URI'], baseurl),\n                  pathwayId: contentSteeringAttributes['PATHWAY-ID'] || '.'\n                };\n                break;\n              }\n            case 'START':\n              {\n                // #EXT-X-START\n                parsed.startTimeOffset = parseStartTimeOffset(attributes);\n                break;\n              }\n          }\n        }\n      }\n      // Filter out levels with unknown codecs if it does not remove all levels\n      var stripUnknownCodecLevels = levelsWithKnownCodecs.length > 0 && levelsWithKnownCodecs.length < parsed.levels.length;\n      parsed.levels = stripUnknownCodecLevels ? levelsWithKnownCodecs : parsed.levels;\n      if (parsed.levels.length === 0) {\n        parsed.playlistParsingError = new Error('no levels found in manifest');\n      }\n      return parsed;\n    };\n    M3U8Parser.parseMasterPlaylistMedia = function parseMasterPlaylistMedia(string, baseurl, parsed) {\n      var result;\n      var results = {};\n      var levels = parsed.levels;\n      var groupsByType = {\n        AUDIO: levels.map(function (level) {\n          return {\n            id: level.attrs.AUDIO,\n            audioCodec: level.audioCodec\n          };\n        }),\n        SUBTITLES: levels.map(function (level) {\n          return {\n            id: level.attrs.SUBTITLES,\n            textCodec: level.textCodec\n          };\n        }),\n        'CLOSED-CAPTIONS': []\n      };\n      var id = 0;\n      MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;\n      while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {\n        var attrs = new AttrList(result[1], parsed);\n        var type = attrs.TYPE;\n        if (type) {\n          var groups = groupsByType[type];\n          var medias = results[type] || [];\n          results[type] = medias;\n          var lang = attrs.LANGUAGE;\n          var assocLang = attrs['ASSOC-LANGUAGE'];\n          var channels = attrs.CHANNELS;\n          var characteristics = attrs.CHARACTERISTICS;\n          var instreamId = attrs['INSTREAM-ID'];\n          var media = {\n            attrs: attrs,\n            bitrate: 0,\n            id: id++,\n            groupId: attrs['GROUP-ID'] || '',\n            name: attrs.NAME || lang || '',\n            type: type,\n            default: attrs.bool('DEFAULT'),\n            autoselect: attrs.bool('AUTOSELECT'),\n            forced: attrs.bool('FORCED'),\n            lang: lang,\n            url: attrs.URI ? M3U8Parser.resolve(attrs.URI, baseurl) : ''\n          };\n          if (assocLang) {\n            media.assocLang = assocLang;\n          }\n          if (channels) {\n            media.channels = channels;\n          }\n          if (characteristics) {\n            media.characteristics = characteristics;\n          }\n          if (instreamId) {\n            media.instreamId = instreamId;\n          }\n          if (groups != null && groups.length) {\n            // If there are audio or text groups signalled in the manifest, let's look for a matching codec string for this track\n            // If we don't find the track signalled, lets use the first audio groups codec we have\n            // Acting as a best guess\n            var groupCodec = M3U8Parser.findGroup(groups, media.groupId) || groups[0];\n            assignCodec(media, groupCodec, 'audioCodec');\n            assignCodec(media, groupCodec, 'textCodec');\n          }\n          medias.push(media);\n        }\n      }\n      return results;\n    };\n    M3U8Parser.parseLevelPlaylist = function parseLevelPlaylist(string, baseurl, id, type, levelUrlId, multivariantVariableList) {\n      var _LEVEL_PLAYLIST_REGEX;\n      var base = {\n        url: baseurl\n      };\n      var level = new LevelDetails(baseurl);\n      var fragments = level.fragments;\n      var programDateTimes = [];\n      // The most recent init segment seen (applies to all subsequent segments)\n      var currentInitSegment = null;\n      var currentSN = 0;\n      var currentPart = 0;\n      var totalduration = 0;\n      var discontinuityCounter = 0;\n      var currentBitrate = 0;\n      var prevFrag = null;\n      var frag = new Fragment(type, base);\n      var result;\n      var i;\n      var levelkeys;\n      var firstPdtIndex = -1;\n      var createNextFrag = false;\n      var nextByteRange = null;\n      var serverControlAttrs;\n      LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;\n      level.m3u8 = string;\n      level.hasVariableRefs = hasVariableReferences(string) ;\n      if (((_LEVEL_PLAYLIST_REGEX = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) == null ? void 0 : _LEVEL_PLAYLIST_REGEX[0]) !== '#EXTM3U') {\n        level.playlistParsingError = new Error('Missing format identifier #EXTM3U');\n        return level;\n      }\n      while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {\n        if (createNextFrag) {\n          createNextFrag = false;\n          frag = new Fragment(type, base);\n          // setup the next fragment for part loading\n          frag.playlistOffset = totalduration;\n          frag.start = totalduration;\n          frag.sn = currentSN;\n          frag.cc = discontinuityCounter;\n          if (currentBitrate) {\n            frag.bitrate = currentBitrate;\n          }\n          frag.level = id;\n          if (currentInitSegment) {\n            frag.initSegment = currentInitSegment;\n            if (currentInitSegment.rawProgramDateTime) {\n              frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;\n              currentInitSegment.rawProgramDateTime = null;\n            }\n            if (nextByteRange) {\n              frag.setByteRange(nextByteRange);\n              nextByteRange = null;\n            }\n          }\n        }\n        var duration = result[1];\n        if (duration) {\n          // INF\n          frag.duration = parseFloat(duration);\n          // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n          var title = (' ' + result[2]).slice(1);\n          frag.title = title || null;\n          frag.tagList.push(title ? ['INF', duration, title] : ['INF', duration]);\n        } else if (result[3]) {\n          // url\n          if (isFiniteNumber(frag.duration)) {\n            frag.playlistOffset = totalduration;\n            frag.start = totalduration;\n            if (levelkeys) {\n              setFragLevelKeys(frag, levelkeys, level);\n            }\n            frag.sn = currentSN;\n            frag.level = id;\n            frag.cc = discontinuityCounter;\n            fragments.push(frag);\n            // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n            var uri = (' ' + result[3]).slice(1);\n            frag.relurl = substituteVariables(level, uri) ;\n            assignProgramDateTime(frag, prevFrag, programDateTimes);\n            prevFrag = frag;\n            totalduration += frag.duration;\n            currentSN++;\n            currentPart = 0;\n            createNextFrag = true;\n          }\n        } else {\n          result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);\n          if (!result) {\n            logger.warn('No matches on slow regex match for level playlist!');\n            continue;\n          }\n          for (i = 1; i < result.length; i++) {\n            if (result[i] !== undefined) {\n              break;\n            }\n          }\n\n          // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n          var tag = (' ' + result[i]).slice(1);\n          var value1 = (' ' + result[i + 1]).slice(1);\n          var value2 = result[i + 2] ? (' ' + result[i + 2]).slice(1) : null;\n          switch (tag) {\n            case 'BYTERANGE':\n              if (prevFrag) {\n                frag.setByteRange(value1, prevFrag);\n              } else {\n                frag.setByteRange(value1);\n              }\n              break;\n            case 'PROGRAM-DATE-TIME':\n              // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n              frag.rawProgramDateTime = value1;\n              frag.tagList.push(['PROGRAM-DATE-TIME', value1]);\n              if (firstPdtIndex === -1) {\n                firstPdtIndex = fragments.length;\n              }\n              break;\n            case 'PLAYLIST-TYPE':\n              if (level.type) {\n                assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n              }\n              level.type = value1.toUpperCase();\n              break;\n            case 'MEDIA-SEQUENCE':\n              if (level.startSN !== 0) {\n                assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n              } else if (fragments.length > 0) {\n                assignMustAppearBeforeSegmentsError(level, tag, result);\n              }\n              currentSN = level.startSN = parseInt(value1);\n              break;\n            case 'SKIP':\n              {\n                if (level.skippedSegments) {\n                  assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n                }\n                var skipAttrs = new AttrList(value1, level);\n                var skippedSegments = skipAttrs.decimalInteger('SKIPPED-SEGMENTS');\n                if (isFiniteNumber(skippedSegments)) {\n                  level.skippedSegments += skippedSegments;\n                  // This will result in fragments[] containing undefined values, which we will fill in with `mergeDetails`\n                  for (var _i = skippedSegments; _i--;) {\n                    fragments.push(null);\n                  }\n                  currentSN += skippedSegments;\n                }\n                var recentlyRemovedDateranges = skipAttrs.enumeratedString('RECENTLY-REMOVED-DATERANGES');\n                if (recentlyRemovedDateranges) {\n                  level.recentlyRemovedDateranges = (level.recentlyRemovedDateranges || []).concat(recentlyRemovedDateranges.split('\\t'));\n                }\n                break;\n              }\n            case 'TARGETDURATION':\n              if (level.targetduration !== 0) {\n                assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n              }\n              level.targetduration = Math.max(parseInt(value1), 1);\n              break;\n            case 'VERSION':\n              if (level.version !== null) {\n                assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n              }\n              level.version = parseInt(value1);\n              break;\n            case 'INDEPENDENT-SEGMENTS':\n              break;\n            case 'ENDLIST':\n              if (!level.live) {\n                assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n              }\n              level.live = false;\n              break;\n            case '#':\n              if (value1 || value2) {\n                frag.tagList.push(value2 ? [value1, value2] : [value1]);\n              }\n              break;\n            case 'DISCONTINUITY':\n              discontinuityCounter++;\n              frag.tagList.push(['DIS']);\n              break;\n            case 'GAP':\n              frag.gap = true;\n              frag.tagList.push([tag]);\n              break;\n            case 'BITRATE':\n              frag.tagList.push([tag, value1]);\n              currentBitrate = parseInt(value1) * 1000;\n              if (isFiniteNumber(currentBitrate)) {\n                frag.bitrate = currentBitrate;\n              } else {\n                currentBitrate = 0;\n              }\n              break;\n            case 'DATERANGE':\n              {\n                var dateRangeAttr = new AttrList(value1, level);\n                var dateRange = new DateRange(dateRangeAttr, level.dateRanges[dateRangeAttr.ID], level.dateRangeTagCount);\n                level.dateRangeTagCount++;\n                if (dateRange.isValid || level.skippedSegments) {\n                  level.dateRanges[dateRange.id] = dateRange;\n                } else {\n                  logger.warn(\"Ignoring invalid DATERANGE tag: \\\"\" + value1 + \"\\\"\");\n                }\n                // Add to fragment tag list for backwards compatibility (< v1.2.0)\n                frag.tagList.push(['EXT-X-DATERANGE', value1]);\n                break;\n              }\n            case 'DEFINE':\n              {\n                {\n                  var variableAttributes = new AttrList(value1, level);\n                  if ('IMPORT' in variableAttributes) {\n                    importVariableDefinition(level, variableAttributes, multivariantVariableList);\n                  } else {\n                    addVariableDefinition(level, variableAttributes, baseurl);\n                  }\n                }\n                break;\n              }\n            case 'DISCONTINUITY-SEQUENCE':\n              if (level.startCC !== 0) {\n                assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n              } else if (fragments.length > 0) {\n                assignMustAppearBeforeSegmentsError(level, tag, result);\n              }\n              level.startCC = discontinuityCounter = parseInt(value1);\n              break;\n            case 'KEY':\n              {\n                var levelKey = parseKey(value1, baseurl, level);\n                if (levelKey.isSupported()) {\n                  if (levelKey.method === 'NONE') {\n                    levelkeys = undefined;\n                    break;\n                  }\n                  if (!levelkeys) {\n                    levelkeys = {};\n                  }\n                  if (levelkeys[levelKey.keyFormat]) {\n                    levelkeys = _extends({}, levelkeys);\n                  }\n                  levelkeys[levelKey.keyFormat] = levelKey;\n                } else {\n                  logger.warn(\"[Keys] Ignoring invalid EXT-X-KEY tag: \\\"\" + value1 + \"\\\"\");\n                }\n                break;\n              }\n            case 'START':\n              level.startTimeOffset = parseStartTimeOffset(value1);\n              break;\n            case 'MAP':\n              {\n                var mapAttrs = new AttrList(value1, level);\n                if (frag.duration) {\n                  // Initial segment tag is after segment duration tag.\n                  //   #EXTINF: 6.0\n                  //   #EXT-X-MAP:URI=\"init.mp4\n                  var init = new Fragment(type, base);\n                  setInitSegment(init, mapAttrs, id, levelkeys);\n                  currentInitSegment = init;\n                  frag.initSegment = currentInitSegment;\n                  if (currentInitSegment.rawProgramDateTime && !frag.rawProgramDateTime) {\n                    frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;\n                  }\n                } else {\n                  // Initial segment tag is before segment duration tag\n                  // Handle case where EXT-X-MAP is declared after EXT-X-BYTERANGE\n                  var end = frag.byteRangeEndOffset;\n                  if (end) {\n                    var start = frag.byteRangeStartOffset;\n                    nextByteRange = end - start + \"@\" + start;\n                  } else {\n                    nextByteRange = null;\n                  }\n                  setInitSegment(frag, mapAttrs, id, levelkeys);\n                  currentInitSegment = frag;\n                  createNextFrag = true;\n                }\n                currentInitSegment.cc = discontinuityCounter;\n                break;\n              }\n            case 'SERVER-CONTROL':\n              {\n                if (serverControlAttrs) {\n                  assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n                }\n                serverControlAttrs = new AttrList(value1);\n                level.canBlockReload = serverControlAttrs.bool('CAN-BLOCK-RELOAD');\n                level.canSkipUntil = serverControlAttrs.optionalFloat('CAN-SKIP-UNTIL', 0);\n                level.canSkipDateRanges = level.canSkipUntil > 0 && serverControlAttrs.bool('CAN-SKIP-DATERANGES');\n                level.partHoldBack = serverControlAttrs.optionalFloat('PART-HOLD-BACK', 0);\n                level.holdBack = serverControlAttrs.optionalFloat('HOLD-BACK', 0);\n                break;\n              }\n            case 'PART-INF':\n              {\n                if (level.partTarget) {\n                  assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n                }\n                var partInfAttrs = new AttrList(value1);\n                level.partTarget = partInfAttrs.decimalFloatingPoint('PART-TARGET');\n                break;\n              }\n            case 'PART':\n              {\n                var partList = level.partList;\n                if (!partList) {\n                  partList = level.partList = [];\n                }\n                var previousFragmentPart = currentPart > 0 ? partList[partList.length - 1] : undefined;\n                var index = currentPart++;\n                var partAttrs = new AttrList(value1, level);\n                var part = new Part(partAttrs, frag, base, index, previousFragmentPart);\n                partList.push(part);\n                frag.duration += part.duration;\n                break;\n              }\n            case 'PRELOAD-HINT':\n              {\n                var preloadHintAttrs = new AttrList(value1, level);\n                level.preloadHint = preloadHintAttrs;\n                break;\n              }\n            case 'RENDITION-REPORT':\n              {\n                var renditionReportAttrs = new AttrList(value1, level);\n                level.renditionReports = level.renditionReports || [];\n                level.renditionReports.push(renditionReportAttrs);\n                break;\n              }\n            default:\n              logger.warn(\"line parsed but not handled: \" + result);\n              break;\n          }\n        }\n      }\n      if (prevFrag && !prevFrag.relurl) {\n        fragments.pop();\n        totalduration -= prevFrag.duration;\n        if (level.partList) {\n          level.fragmentHint = prevFrag;\n        }\n      } else if (level.partList) {\n        assignProgramDateTime(frag, prevFrag, programDateTimes);\n        frag.cc = discontinuityCounter;\n        level.fragmentHint = frag;\n        if (levelkeys) {\n          setFragLevelKeys(frag, levelkeys, level);\n        }\n      }\n      if (!level.targetduration) {\n        level.playlistParsingError = new Error(\"#EXT-X-TARGETDURATION is required\");\n      }\n      var fragmentLength = fragments.length;\n      var firstFragment = fragments[0];\n      var lastFragment = fragments[fragmentLength - 1];\n      totalduration += level.skippedSegments * level.targetduration;\n      if (totalduration > 0 && fragmentLength && lastFragment) {\n        level.averagetargetduration = totalduration / fragmentLength;\n        var lastSn = lastFragment.sn;\n        level.endSN = lastSn !== 'initSegment' ? lastSn : 0;\n        if (!level.live) {\n          lastFragment.endList = true;\n        }\n        if (firstFragment && level.startCC === undefined) {\n          level.startCC = firstFragment.cc;\n        }\n        /**\n         * Backfill any missing PDT values\n         * \"If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears after\n         * one or more Media Segment URIs, the client SHOULD extrapolate\n         * backward from that tag (using EXTINF durations and/or media\n         * timestamps) to associate dates with those segments.\"\n         * We have already extrapolated forward, but all fragments up to the first instance of PDT do not have their PDTs\n         * computed.\n         */\n        if (firstPdtIndex > 0) {\n          backfillProgramDateTimes(fragments, firstPdtIndex);\n          if (firstFragment) {\n            programDateTimes.unshift(firstFragment);\n          }\n        }\n      } else {\n        level.endSN = 0;\n        level.startCC = 0;\n      }\n      if (level.fragmentHint) {\n        totalduration += level.fragmentHint.duration;\n      }\n      level.totalduration = totalduration;\n      if (programDateTimes.length && level.dateRangeTagCount && firstFragment) {\n        mapDateRanges(programDateTimes, level);\n      }\n      level.endCC = discontinuityCounter;\n      return level;\n    };\n    return M3U8Parser;\n  }();\n  function mapDateRanges(programDateTimes, details) {\n    // Make sure DateRanges are mapped to a ProgramDateTime tag that applies a date to a segment that overlaps with its start date\n    var programDateTimeCount = programDateTimes.length;\n    if (!programDateTimeCount) {\n      return;\n    }\n    var lastProgramDateTime = programDateTimes[programDateTimeCount - 1];\n    var playlistEnd = details.live ? Infinity : details.totalduration;\n    var dateRangeIds = Object.keys(details.dateRanges);\n    for (var i = dateRangeIds.length; i--;) {\n      var dateRange = details.dateRanges[dateRangeIds[i]];\n      var startDateTime = dateRange.startDate.getTime();\n      dateRange.tagAnchor = lastProgramDateTime.ref;\n      for (var j = programDateTimeCount; j--;) {\n        var fragIndex = findFragmentWithStartDate(details, startDateTime, programDateTimes, j, playlistEnd);\n        if (fragIndex !== -1) {\n          dateRange.tagAnchor = details.fragments[fragIndex].ref;\n          break;\n        }\n      }\n    }\n  }\n  function findFragmentWithStartDate(details, startDateTime, programDateTimes, index, endTime) {\n    var pdtFragment = programDateTimes[index];\n    if (pdtFragment) {\n      // find matching range between PDT tags\n      var pdtStart = pdtFragment.programDateTime;\n      if (startDateTime >= pdtStart || index === 0) {\n        var _programDateTimes;\n        var durationBetweenPdt = (((_programDateTimes = programDateTimes[index + 1]) == null ? void 0 : _programDateTimes.start) || endTime) - pdtFragment.start;\n        if (startDateTime <= pdtStart + durationBetweenPdt * 1000) {\n          // map to fragment with date-time range\n          var startIndex = programDateTimes[index].sn - details.startSN;\n          var fragments = details.fragments;\n          if (fragments.length > programDateTimes.length) {\n            var endSegment = programDateTimes[index + 1] || fragments[fragments.length - 1];\n            var endIndex = endSegment.sn - details.startSN;\n            for (var i = endIndex; i > startIndex; i--) {\n              var fragStartDateTime = fragments[i].programDateTime;\n              if (startDateTime >= fragStartDateTime && startDateTime < fragStartDateTime + fragments[i].duration * 1000) {\n                return i;\n              }\n            }\n          }\n          return startIndex;\n        }\n      }\n    }\n    return -1;\n  }\n  function parseKey(keyTagAttributes, baseurl, parsed) {\n    var _keyAttrs$METHOD, _keyAttrs$KEYFORMAT;\n    // https://tools.ietf.org/html/rfc8216#section-4.3.2.4\n    var keyAttrs = new AttrList(keyTagAttributes, parsed);\n    var decryptmethod = (_keyAttrs$METHOD = keyAttrs.METHOD) != null ? _keyAttrs$METHOD : '';\n    var decrypturi = keyAttrs.URI;\n    var decryptiv = keyAttrs.hexadecimalInteger('IV');\n    var decryptkeyformatversions = keyAttrs.KEYFORMATVERSIONS;\n    // From RFC: This attribute is OPTIONAL; its absence indicates an implicit value of \"identity\".\n    var decryptkeyformat = (_keyAttrs$KEYFORMAT = keyAttrs.KEYFORMAT) != null ? _keyAttrs$KEYFORMAT : 'identity';\n    if (decrypturi && keyAttrs.IV && !decryptiv) {\n      logger.error(\"Invalid IV: \" + keyAttrs.IV);\n    }\n    // If decrypturi is a URI with a scheme, then baseurl will be ignored\n    // No uri is allowed when METHOD is NONE\n    var resolvedUri = decrypturi ? M3U8Parser.resolve(decrypturi, baseurl) : '';\n    var keyFormatVersions = (decryptkeyformatversions ? decryptkeyformatversions : '1').split('/').map(Number).filter(Number.isFinite);\n    return new LevelKey(decryptmethod, resolvedUri, decryptkeyformat, keyFormatVersions, decryptiv);\n  }\n  function parseStartTimeOffset(startAttributes) {\n    var startAttrs = new AttrList(startAttributes);\n    var startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET');\n    if (isFiniteNumber(startTimeOffset)) {\n      return startTimeOffset;\n    }\n    return null;\n  }\n  function setCodecs(codecsAttributeValue, level) {\n    var codecs = (codecsAttributeValue || '').split(/[ ,]+/).filter(function (c) {\n      return c;\n    });\n    ['video', 'audio', 'text'].forEach(function (type) {\n      var filtered = codecs.filter(function (codec) {\n        return isCodecType(codec, type);\n      });\n      if (filtered.length) {\n        // Comma separated list of all codecs for type\n        level[type + \"Codec\"] = filtered.map(function (c) {\n          return c.split('/')[0];\n        }).join(',');\n        // Remove known codecs so that only unknownCodecs are left after iterating through each type\n        codecs = codecs.filter(function (codec) {\n          return filtered.indexOf(codec) === -1;\n        });\n      }\n    });\n    level.unknownCodecs = codecs;\n  }\n  function assignCodec(media, groupItem, codecProperty) {\n    var codecValue = groupItem[codecProperty];\n    if (codecValue) {\n      media[codecProperty] = codecValue;\n    }\n  }\n  function backfillProgramDateTimes(fragments, firstPdtIndex) {\n    var fragPrev = fragments[firstPdtIndex];\n    for (var i = firstPdtIndex; i--;) {\n      var frag = fragments[i];\n      // Exit on delta-playlist skipped segments\n      if (!frag) {\n        return;\n      }\n      frag.programDateTime = fragPrev.programDateTime - frag.duration * 1000;\n      fragPrev = frag;\n    }\n  }\n  function assignProgramDateTime(frag, prevFrag, programDateTimes) {\n    if (frag.rawProgramDateTime) {\n      programDateTimes.push(frag);\n    } else if (prevFrag != null && prevFrag.programDateTime) {\n      frag.programDateTime = prevFrag.endProgramDateTime;\n    }\n  }\n  function setInitSegment(frag, mapAttrs, id, levelkeys) {\n    frag.relurl = mapAttrs.URI;\n    if (mapAttrs.BYTERANGE) {\n      frag.setByteRange(mapAttrs.BYTERANGE);\n    }\n    frag.level = id;\n    frag.sn = 'initSegment';\n    if (levelkeys) {\n      frag.levelkeys = levelkeys;\n    }\n    frag.initSegment = null;\n  }\n  function setFragLevelKeys(frag, levelkeys, level) {\n    frag.levelkeys = levelkeys;\n    var encryptedFragments = level.encryptedFragments;\n    if ((!encryptedFragments.length || encryptedFragments[encryptedFragments.length - 1].levelkeys !== levelkeys) && Object.keys(levelkeys).some(function (format) {\n      return levelkeys[format].isCommonEncryption;\n    })) {\n      encryptedFragments.push(frag);\n    }\n  }\n  function assignMultipleMediaPlaylistTagOccuranceError(level, tag, result) {\n    level.playlistParsingError = new Error(\"#EXT-X-\" + tag + \" must not appear more than once (\" + result[0] + \")\");\n  }\n  function assignMustAppearBeforeSegmentsError(level, tag, result) {\n    level.playlistParsingError = new Error(\"#EXT-X-\" + tag + \" must appear before the first Media Segment (\" + result[0] + \")\");\n  }\n\n  function updateFromToPTS(fragFrom, fragTo) {\n    var fragToPTS = fragTo.startPTS;\n    // if we know startPTS[toIdx]\n    if (isFiniteNumber(fragToPTS)) {\n      // update fragment duration.\n      // it helps to fix drifts between playlist reported duration and fragment real duration\n      var duration = 0;\n      var frag;\n      if (fragTo.sn > fragFrom.sn) {\n        duration = fragToPTS - fragFrom.start;\n        frag = fragFrom;\n      } else {\n        duration = fragFrom.start - fragToPTS;\n        frag = fragTo;\n      }\n      if (frag.duration !== duration) {\n        frag.setDuration(duration);\n      }\n      // we dont know startPTS[toIdx]\n    } else if (fragTo.sn > fragFrom.sn) {\n      var contiguous = fragFrom.cc === fragTo.cc;\n      // TODO: With part-loading end/durations we need to confirm the whole fragment is loaded before using (or setting) minEndPTS\n      if (contiguous && fragFrom.minEndPTS) {\n        fragTo.setStart(fragFrom.start + (fragFrom.minEndPTS - fragFrom.start));\n      } else {\n        fragTo.setStart(fragFrom.start + fragFrom.duration);\n      }\n    } else {\n      fragTo.setStart(Math.max(fragFrom.start - fragTo.duration, 0));\n    }\n  }\n  function updateFragPTSDTS(details, frag, startPTS, endPTS, startDTS, endDTS) {\n    var parsedMediaDuration = endPTS - startPTS;\n    if (parsedMediaDuration <= 0) {\n      logger.warn('Fragment should have a positive duration', frag);\n      endPTS = startPTS + frag.duration;\n      endDTS = startDTS + frag.duration;\n    }\n    var maxStartPTS = startPTS;\n    var minEndPTS = endPTS;\n    var fragStartPts = frag.startPTS;\n    var fragEndPts = frag.endPTS;\n    if (isFiniteNumber(fragStartPts)) {\n      // delta PTS between audio and video\n      var deltaPTS = Math.abs(fragStartPts - startPTS);\n      if (!isFiniteNumber(frag.deltaPTS)) {\n        frag.deltaPTS = deltaPTS;\n      } else {\n        frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);\n      }\n      maxStartPTS = Math.max(startPTS, fragStartPts);\n      startPTS = Math.min(startPTS, fragStartPts);\n      startDTS = Math.min(startDTS, frag.startDTS);\n      minEndPTS = Math.min(endPTS, fragEndPts);\n      endPTS = Math.max(endPTS, fragEndPts);\n      endDTS = Math.max(endDTS, frag.endDTS);\n    }\n    var drift = startPTS - frag.start;\n    if (frag.start !== 0) {\n      frag.setStart(startPTS);\n    }\n    frag.setDuration(endPTS - frag.start);\n    frag.startPTS = startPTS;\n    frag.maxStartPTS = maxStartPTS;\n    frag.startDTS = startDTS;\n    frag.endPTS = endPTS;\n    frag.minEndPTS = minEndPTS;\n    frag.endDTS = endDTS;\n    var sn = frag.sn;\n    // exit if sn out of range\n    if (!details || sn < details.startSN || sn > details.endSN) {\n      return 0;\n    }\n    var i;\n    var fragIdx = sn - details.startSN;\n    var fragments = details.fragments;\n    // update frag reference in fragments array\n    // rationale is that fragments array might not contain this frag object.\n    // this will happen if playlist has been refreshed between frag loading and call to updateFragPTSDTS()\n    // if we don't update frag, we won't be able to propagate PTS info on the playlist\n    // resulting in invalid sliding computation\n    fragments[fragIdx] = frag;\n    // adjust fragment PTS/duration from seqnum-1 to frag 0\n    for (i = fragIdx; i > 0; i--) {\n      updateFromToPTS(fragments[i], fragments[i - 1]);\n    }\n\n    // adjust fragment PTS/duration from seqnum to last frag\n    for (i = fragIdx; i < fragments.length - 1; i++) {\n      updateFromToPTS(fragments[i], fragments[i + 1]);\n    }\n    if (details.fragmentHint) {\n      updateFromToPTS(fragments[fragments.length - 1], details.fragmentHint);\n    }\n    details.PTSKnown = details.alignedSliding = true;\n    return drift;\n  }\n  function mergeDetails(oldDetails, newDetails) {\n    if (oldDetails === newDetails) {\n      return;\n    }\n    // Track the last initSegment processed. Initialize it to the last one on the timeline.\n    var currentInitSegment = null;\n    var oldFragments = oldDetails.fragments;\n    for (var i = oldFragments.length - 1; i >= 0; i--) {\n      var oldInit = oldFragments[i].initSegment;\n      if (oldInit) {\n        currentInitSegment = oldInit;\n        break;\n      }\n    }\n    if (oldDetails.fragmentHint) {\n      // prevent PTS and duration from being adjusted on the next hint\n      delete oldDetails.fragmentHint.endPTS;\n    }\n    // check if old/new playlists have fragments in common\n    // loop through overlapping SN and update startPTS, cc, and duration if any found\n    var PTSFrag;\n    mapFragmentIntersection(oldDetails, newDetails, function (oldFrag, newFrag, newFragIndex, newFragments) {\n      if ((!newDetails.startCC || newDetails.skippedSegments) && newFrag.cc !== oldFrag.cc) {\n        var ccOffset = oldFrag.cc - newFrag.cc;\n        for (var _i = newFragIndex; _i < newFragments.length; _i++) {\n          newFragments[_i].cc += ccOffset;\n        }\n        newDetails.endCC = newFragments[newFragments.length - 1].cc;\n      }\n      if (isFiniteNumber(oldFrag.startPTS) && isFiniteNumber(oldFrag.endPTS)) {\n        newFrag.setStart(newFrag.startPTS = oldFrag.startPTS);\n        newFrag.startDTS = oldFrag.startDTS;\n        newFrag.maxStartPTS = oldFrag.maxStartPTS;\n        newFrag.endPTS = oldFrag.endPTS;\n        newFrag.endDTS = oldFrag.endDTS;\n        newFrag.minEndPTS = oldFrag.minEndPTS;\n        newFrag.setDuration(oldFrag.endPTS - oldFrag.startPTS);\n        if (newFrag.duration) {\n          PTSFrag = newFrag;\n        }\n\n        // PTS is known when any segment has startPTS and endPTS\n        newDetails.PTSKnown = newDetails.alignedSliding = true;\n      }\n      if (oldFrag.hasStreams) {\n        newFrag.elementaryStreams = oldFrag.elementaryStreams;\n      }\n      newFrag.loader = oldFrag.loader;\n      if (oldFrag.hasStats) {\n        newFrag.stats = oldFrag.stats;\n      }\n      if (oldFrag.initSegment) {\n        newFrag.initSegment = oldFrag.initSegment;\n        currentInitSegment = oldFrag.initSegment;\n      }\n    });\n    var newFragments = newDetails.fragments;\n    var fragmentsToCheck = newDetails.fragmentHint ? newFragments.concat(newDetails.fragmentHint) : newFragments;\n    if (currentInitSegment) {\n      fragmentsToCheck.forEach(function (frag) {\n        var _currentInitSegment;\n        if (frag && (!frag.initSegment || frag.initSegment.relurl === ((_currentInitSegment = currentInitSegment) == null ? void 0 : _currentInitSegment.relurl))) {\n          frag.initSegment = currentInitSegment;\n        }\n      });\n    }\n    if (newDetails.skippedSegments) {\n      newDetails.deltaUpdateFailed = newFragments.some(function (frag) {\n        return !frag;\n      });\n      if (newDetails.deltaUpdateFailed) {\n        logger.warn('[level-helper] Previous playlist missing segments skipped in delta playlist');\n        for (var _i2 = newDetails.skippedSegments; _i2--;) {\n          newFragments.shift();\n        }\n        newDetails.startSN = newFragments[0].sn;\n      } else {\n        if (newDetails.canSkipDateRanges) {\n          newDetails.dateRanges = mergeDateRanges(oldDetails.dateRanges, newDetails);\n        }\n        var programDateTimes = oldDetails.fragments.filter(function (frag) {\n          return frag.rawProgramDateTime;\n        });\n        if (oldDetails.hasProgramDateTime && !newDetails.hasProgramDateTime) {\n          for (var _i3 = 1; _i3 < fragmentsToCheck.length; _i3++) {\n            if (fragmentsToCheck[_i3].programDateTime === null) {\n              assignProgramDateTime(fragmentsToCheck[_i3], fragmentsToCheck[_i3 - 1], programDateTimes);\n            }\n          }\n        }\n        mapDateRanges(programDateTimes, newDetails);\n      }\n      newDetails.endCC = newFragments[newFragments.length - 1].cc;\n    }\n    if (!newDetails.startCC) {\n      var _fragPriorToNewStart$;\n      var fragPriorToNewStart = getFragmentWithSN(oldDetails, newDetails.startSN - 1);\n      newDetails.startCC = (_fragPriorToNewStart$ = fragPriorToNewStart == null ? void 0 : fragPriorToNewStart.cc) != null ? _fragPriorToNewStart$ : newFragments[0].cc;\n    }\n\n    // Merge parts\n    mapPartIntersection(oldDetails.partList, newDetails.partList, function (oldPart, newPart) {\n      newPart.elementaryStreams = oldPart.elementaryStreams;\n      newPart.stats = oldPart.stats;\n    });\n\n    // if at least one fragment contains PTS info, recompute PTS information for all fragments\n    if (PTSFrag) {\n      updateFragPTSDTS(newDetails, PTSFrag, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);\n    } else {\n      // ensure that delta is within oldFragments range\n      // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])\n      // in that case we also need to adjust start offset of all fragments\n      adjustSliding(oldDetails, newDetails);\n    }\n    if (newFragments.length) {\n      newDetails.totalduration = newDetails.edge - newFragments[0].start;\n    }\n    newDetails.driftStartTime = oldDetails.driftStartTime;\n    newDetails.driftStart = oldDetails.driftStart;\n    var advancedDateTime = newDetails.advancedDateTime;\n    if (newDetails.advanced && advancedDateTime) {\n      var edge = newDetails.edge;\n      if (!newDetails.driftStart) {\n        newDetails.driftStartTime = advancedDateTime;\n        newDetails.driftStart = edge;\n      }\n      newDetails.driftEndTime = advancedDateTime;\n      newDetails.driftEnd = edge;\n    } else {\n      newDetails.driftEndTime = oldDetails.driftEndTime;\n      newDetails.driftEnd = oldDetails.driftEnd;\n      newDetails.advancedDateTime = oldDetails.advancedDateTime;\n    }\n    if (newDetails.requestScheduled === -1) {\n      newDetails.requestScheduled = oldDetails.requestScheduled;\n    }\n  }\n  function mergeDateRanges(oldDateRanges, newDetails) {\n    var deltaDateRanges = newDetails.dateRanges,\n      recentlyRemovedDateranges = newDetails.recentlyRemovedDateranges;\n    var dateRanges = _extends({}, oldDateRanges);\n    if (recentlyRemovedDateranges) {\n      recentlyRemovedDateranges.forEach(function (id) {\n        delete dateRanges[id];\n      });\n    }\n    var mergeIds = Object.keys(dateRanges);\n    var mergeCount = mergeIds.length;\n    if (mergeCount) {\n      Object.keys(deltaDateRanges).forEach(function (id) {\n        var mergedDateRange = dateRanges[id];\n        var dateRange = new DateRange(deltaDateRanges[id].attr, mergedDateRange);\n        if (dateRange.isValid) {\n          dateRanges[id] = dateRange;\n          if (!mergedDateRange) {\n            dateRange.tagOrder += mergeCount;\n          }\n        } else {\n          logger.warn(\"Ignoring invalid Playlist Delta Update DATERANGE tag: \\\"\" + stringify(deltaDateRanges[id].attr) + \"\\\"\");\n        }\n      });\n    }\n    return dateRanges;\n  }\n  function mapPartIntersection(oldParts, newParts, intersectionFn) {\n    if (oldParts && newParts) {\n      var delta = 0;\n      for (var i = 0, len = oldParts.length; i <= len; i++) {\n        var _oldPart = oldParts[i];\n        var _newPart = newParts[i + delta];\n        if (_oldPart && _newPart && _oldPart.index === _newPart.index && _oldPart.fragment.sn === _newPart.fragment.sn) {\n          intersectionFn(_oldPart, _newPart);\n        } else {\n          delta--;\n        }\n      }\n    }\n  }\n  function mapFragmentIntersection(oldDetails, newDetails, intersectionFn) {\n    var skippedSegments = newDetails.skippedSegments;\n    var start = Math.max(oldDetails.startSN, newDetails.startSN) - newDetails.startSN;\n    var end = (oldDetails.fragmentHint ? 1 : 0) + (skippedSegments ? newDetails.endSN : Math.min(oldDetails.endSN, newDetails.endSN)) - newDetails.startSN;\n    var delta = newDetails.startSN - oldDetails.startSN;\n    var newFrags = newDetails.fragmentHint ? newDetails.fragments.concat(newDetails.fragmentHint) : newDetails.fragments;\n    var oldFrags = oldDetails.fragmentHint ? oldDetails.fragments.concat(oldDetails.fragmentHint) : oldDetails.fragments;\n    for (var i = start; i <= end; i++) {\n      var _oldFrag = oldFrags[delta + i];\n      var _newFrag = newFrags[i];\n      if (skippedSegments && !_newFrag && _oldFrag) {\n        // Fill in skipped segments in delta playlist\n        _newFrag = newDetails.fragments[i] = _oldFrag;\n      }\n      if (_oldFrag && _newFrag) {\n        intersectionFn(_oldFrag, _newFrag, i, newFrags);\n        if (_oldFrag.url && _oldFrag.url !== _newFrag.url) {\n          newDetails.playlistParsingError = getSequenceError(\"media sequence mismatch \" + _newFrag.sn + \":\", oldDetails, newDetails, _oldFrag, _newFrag);\n          return;\n        } else if (_oldFrag.cc !== _newFrag.cc) {\n          newDetails.playlistParsingError = getSequenceError(\"discontinuity sequence mismatch (\" + _oldFrag.cc + \"!=\" + _newFrag.cc + \")\", oldDetails, newDetails, _oldFrag, _newFrag);\n          return;\n        }\n      }\n    }\n  }\n  function getSequenceError(message, oldDetails, newDetails, oldFrag, newFrag) {\n    return new Error(message + \" \" + newFrag.url + \"\\nPlaylist starting @\" + oldDetails.startSN + \"\\n\" + oldDetails.m3u8 + \"\\n\\nPlaylist starting @\" + newDetails.startSN + \"\\n\" + newDetails.m3u8);\n  }\n  function adjustSliding(oldDetails, newDetails, matchingStableVariantOrRendition) {\n    if (matchingStableVariantOrRendition === void 0) {\n      matchingStableVariantOrRendition = true;\n    }\n    var delta = newDetails.startSN + newDetails.skippedSegments - oldDetails.startSN;\n    var oldFragments = oldDetails.fragments;\n    var advancedOrStable = delta >= 0;\n    var sliding = 0;\n    if (advancedOrStable && delta < oldFragments.length) {\n      sliding = oldFragments[delta].start;\n    } else if (advancedOrStable && newDetails.startSN === oldDetails.endSN + 1) {\n      sliding = oldDetails.fragmentEnd;\n    } else if (advancedOrStable && matchingStableVariantOrRendition) {\n      // align with expected position (updated playlist start sequence is past end sequence of last update)\n      sliding = oldDetails.fragmentStart + delta * newDetails.levelTargetDuration;\n    } else if (!newDetails.skippedSegments && newDetails.fragmentStart === 0) {\n      // align new start with old (playlist switch has a sequence with no overlap and should not be used for alignment)\n      sliding = oldDetails.fragmentStart;\n    } else {\n      // new details already has a sliding offset or has skipped segments\n      return;\n    }\n    addSliding(newDetails, sliding);\n  }\n  function addSliding(details, sliding) {\n    if (sliding) {\n      var fragments = details.fragments;\n      for (var i = details.skippedSegments; i < fragments.length; i++) {\n        fragments[i].addStart(sliding);\n      }\n      if (details.fragmentHint) {\n        details.fragmentHint.addStart(sliding);\n      }\n    }\n  }\n  function computeReloadInterval(newDetails, distanceToLiveEdgeMs) {\n    if (distanceToLiveEdgeMs === void 0) {\n      distanceToLiveEdgeMs = Infinity;\n    }\n    var reloadInterval = 1000 * newDetails.targetduration;\n    if (newDetails.updated) {\n      // Use last segment duration when shorter than target duration and near live edge\n      var fragments = newDetails.fragments;\n      var liveEdgeMaxTargetDurations = 4;\n      if (fragments.length && reloadInterval * liveEdgeMaxTargetDurations > distanceToLiveEdgeMs) {\n        var lastSegmentDuration = fragments[fragments.length - 1].duration * 1000;\n        if (lastSegmentDuration < reloadInterval) {\n          reloadInterval = lastSegmentDuration;\n        }\n      }\n    } else {\n      // estimate = 'miss half average';\n      // follow HLS Spec, If the client reloads a Playlist file and finds that it has not\n      // changed then it MUST wait for a period of one-half the target\n      // duration before retrying.\n      reloadInterval /= 2;\n    }\n    return Math.round(reloadInterval);\n  }\n  function getFragmentWithSN(details, sn, fragCurrent) {\n    if (!details) {\n      return null;\n    }\n    var fragment = details.fragments[sn - details.startSN];\n    if (fragment) {\n      return fragment;\n    }\n    fragment = details.fragmentHint;\n    if (fragment && fragment.sn === sn) {\n      return fragment;\n    }\n    if (sn < details.startSN && fragCurrent && fragCurrent.sn === sn) {\n      return fragCurrent;\n    }\n    return null;\n  }\n  function getPartWith(details, sn, partIndex) {\n    if (!details) {\n      return null;\n    }\n    return findPart(details.partList, sn, partIndex);\n  }\n  function findPart(partList, sn, partIndex) {\n    if (partList) {\n      for (var i = partList.length; i--;) {\n        var part = partList[i];\n        if (part.index === partIndex && part.fragment.sn === sn) {\n          return part;\n        }\n      }\n    }\n    return null;\n  }\n  function reassignFragmentLevelIndexes(levels) {\n    levels.forEach(function (level, index) {\n      var _level$details;\n      (_level$details = level.details) == null ? void 0 : _level$details.fragments.forEach(function (fragment) {\n        fragment.level = index;\n        if (fragment.initSegment) {\n          fragment.initSegment.level = index;\n        }\n      });\n    });\n  }\n\n  function findFirstFragWithCC(fragments, cc) {\n    for (var i = 0, len = fragments.length; i < len; i++) {\n      var _fragments$i;\n      if (((_fragments$i = fragments[i]) == null ? void 0 : _fragments$i.cc) === cc) {\n        return fragments[i];\n      }\n    }\n    return null;\n  }\n  function shouldAlignOnDiscontinuities(refDetails, details) {\n    if (refDetails) {\n      if (details.startCC < refDetails.endCC && details.endCC > refDetails.startCC) {\n        return true;\n      }\n    }\n    return false;\n  }\n  function adjustFragmentStart(frag, sliding) {\n    if (frag) {\n      var start = frag.start + sliding;\n      frag.start = frag.startPTS = start;\n      frag.endPTS = start + frag.duration;\n    }\n  }\n  function adjustSlidingStart(sliding, details) {\n    // Update segments\n    var fragments = details.fragments;\n    for (var i = 0, len = fragments.length; i < len; i++) {\n      adjustFragmentStart(fragments[i], sliding);\n    }\n    // Update LL-HLS parts at the end of the playlist\n    if (details.fragmentHint) {\n      adjustFragmentStart(details.fragmentHint, sliding);\n    }\n    details.alignedSliding = true;\n  }\n\n  /**\n   * Using the parameters of the last level, this function computes PTS' of the new fragments so that they form a\n   * contiguous stream with the last fragments.\n   * The PTS of a fragment lets Hls.js know where it fits into a stream - by knowing every PTS, we know which fragment to\n   * download at any given time. PTS is normally computed when the fragment is demuxed, so taking this step saves us time\n   * and an extra download.\n   * @param lastLevel\n   * @param details\n   */\n  function alignStream(switchDetails, details) {\n    if (!switchDetails) {\n      return;\n    }\n    alignDiscontinuities(details, switchDetails);\n    if (!details.alignedSliding && switchDetails) {\n      // If the PTS wasn't figured out via discontinuity sequence that means there was no CC increase within the level.\n      // Aligning via Program Date Time should therefore be reliable, since PDT should be the same within the same\n      // discontinuity sequence.\n      alignMediaPlaylistByPDT(details, switchDetails);\n    }\n    if (!details.alignedSliding && switchDetails && !details.skippedSegments) {\n      // Try to align on sn so that we pick a better start fragment.\n      // Do not perform this on playlists with delta updates as this is only to align levels on switch\n      // and adjustSliding only adjusts fragments after skippedSegments.\n      adjustSliding(switchDetails, details, false);\n    }\n  }\n\n  /**\n   * Ajust the start of fragments in `details` by the difference in time between fragments of the latest\n   * shared discontinuity sequence change.\n   * @param lastLevel - The details of the last loaded level\n   * @param details - The details of the new level\n   */\n  function alignDiscontinuities(details, refDetails) {\n    if (!shouldAlignOnDiscontinuities(refDetails, details)) {\n      return;\n    }\n    var targetCC = Math.min(refDetails.endCC, details.endCC);\n    var refFrag = findFirstFragWithCC(refDetails.fragments, targetCC);\n    var frag = findFirstFragWithCC(details.fragments, targetCC);\n    if (!refFrag || !frag) {\n      return;\n    }\n    logger.log(\"Aligning playlist at start of dicontinuity sequence \" + targetCC);\n    var delta = refFrag.start - frag.start;\n    adjustSlidingStart(delta, details);\n  }\n\n  /**\n   * Ensures appropriate time-alignment between renditions based on PDT.\n   * This function assumes the timelines represented in `refDetails` are accurate, including the PDTs\n   * for the last discontinuity sequence number shared by both playlists when present,\n   * and uses the \"wallclock\"/PDT timeline as a cross-reference to `details`, adjusting the presentation\n   * times/timelines of `details` accordingly.\n   * Given the asynchronous nature of fetches and initial loads of live `main` and audio/subtitle tracks,\n   * the primary purpose of this function is to ensure the \"local timelines\" of audio/subtitle tracks\n   * are aligned to the main/video timeline, using PDT as the cross-reference/\"anchor\" that should\n   * be consistent across playlists, per the HLS spec.\n   * @param details - The details of the rendition you'd like to time-align (e.g. an audio rendition).\n   * @param refDetails - The details of the reference rendition with start and PDT times for alignment.\n   */\n  function alignMediaPlaylistByPDT(details, refDetails) {\n    if (!details.hasProgramDateTime || !refDetails.hasProgramDateTime) {\n      return;\n    }\n    var fragments = details.fragments;\n    var refFragments = refDetails.fragments;\n    if (!fragments.length || !refFragments.length) {\n      return;\n    }\n\n    // Calculate a delta to apply to all fragments according to the delta in PDT times and start times\n    // of a fragment in the reference details, and a fragment in the target details of the same discontinuity.\n    // If a fragment of the same discontinuity was not found use the middle fragment of both.\n    var refFrag;\n    var frag;\n    var targetCC = Math.min(refDetails.endCC, details.endCC);\n    if (refDetails.startCC < targetCC && details.startCC < targetCC) {\n      refFrag = findFirstFragWithCC(refFragments, targetCC);\n      frag = findFirstFragWithCC(fragments, targetCC);\n    }\n    if (!refFrag || !frag) {\n      refFrag = refFragments[Math.floor(refFragments.length / 2)];\n      frag = findFirstFragWithCC(fragments, refFrag.cc) || fragments[Math.floor(fragments.length / 2)];\n    }\n    var refPDT = refFrag.programDateTime;\n    var targetPDT = frag.programDateTime;\n    if (!refPDT || !targetPDT) {\n      return;\n    }\n    var delta = (targetPDT - refPDT) / 1000 - (frag.start - refFrag.start);\n    adjustSlidingStart(delta, details);\n  }\n\n  /**\n   *  TimeRanges to string helper\n   */\n\n  var TimeRanges = {\n    toString: function toString(r) {\n      var log = '';\n      var len = r.length;\n      for (var i = 0; i < len; i++) {\n        log += \"[\" + r.start(i).toFixed(3) + \"-\" + r.end(i).toFixed(3) + \"]\";\n      }\n      return log;\n    }\n  };\n\n  var State = {\n    STOPPED: 'STOPPED',\n    IDLE: 'IDLE',\n    KEY_LOADING: 'KEY_LOADING',\n    FRAG_LOADING: 'FRAG_LOADING',\n    FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',\n    WAITING_TRACK: 'WAITING_TRACK',\n    PARSING: 'PARSING',\n    PARSED: 'PARSED',\n    ENDED: 'ENDED',\n    ERROR: 'ERROR',\n    WAITING_INIT_PTS: 'WAITING_INIT_PTS',\n    WAITING_LEVEL: 'WAITING_LEVEL'\n  };\n  var BaseStreamController = /*#__PURE__*/function (_TaskLoop) {\n    function BaseStreamController(hls, fragmentTracker, keyLoader, logPrefix, playlistType) {\n      var _this;\n      _this = _TaskLoop.call(this, logPrefix, hls.logger) || this;\n      _this.hls = void 0;\n      _this.fragPrevious = null;\n      _this.fragCurrent = null;\n      _this.fragmentTracker = void 0;\n      _this.transmuxer = null;\n      _this._state = State.STOPPED;\n      _this.playlistType = void 0;\n      _this.media = null;\n      _this.mediaBuffer = null;\n      _this.config = void 0;\n      _this.bitrateTest = false;\n      _this.lastCurrentTime = 0;\n      _this.nextLoadPosition = 0;\n      _this.startPosition = 0;\n      _this.startTimeOffset = null;\n      _this.retryDate = 0;\n      _this.levels = null;\n      _this.fragmentLoader = void 0;\n      _this.keyLoader = void 0;\n      _this.levelLastLoaded = null;\n      _this.startFragRequested = false;\n      _this.decrypter = void 0;\n      _this.initPTS = [];\n      _this.buffering = true;\n      _this.loadingParts = false;\n      _this.loopSn = void 0;\n      _this.onMediaSeeking = function () {\n        var _this2 = _this,\n          config = _this2.config,\n          fragCurrent = _this2.fragCurrent,\n          media = _this2.media,\n          mediaBuffer = _this2.mediaBuffer,\n          state = _this2.state;\n        var currentTime = media ? media.currentTime : 0;\n        var bufferInfo = BufferHelper.bufferInfo(mediaBuffer ? mediaBuffer : media, currentTime, config.maxBufferHole);\n        _this.log(\"media seeking to \" + (isFiniteNumber(currentTime) ? currentTime.toFixed(3) : currentTime) + \", state: \" + state);\n        if (_this.state === State.ENDED) {\n          _this.resetLoadingState();\n        } else if (fragCurrent) {\n          // Seeking while frag load is in progress\n          var tolerance = config.maxFragLookUpTolerance;\n          var fragStartOffset = fragCurrent.start - tolerance;\n          var fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance;\n          // if seeking out of buffered range or into new one\n          if (!bufferInfo.len || fragEndOffset < bufferInfo.start || fragStartOffset > bufferInfo.end) {\n            var pastFragment = currentTime > fragEndOffset;\n            // if the seek position is outside the current fragment range\n            if (currentTime < fragStartOffset || pastFragment) {\n              if (pastFragment && fragCurrent.loader) {\n                _this.log('seeking outside of buffer while fragment load in progress, cancel fragment load');\n                fragCurrent.abortRequests();\n                _this.resetLoadingState();\n              }\n              _this.fragPrevious = null;\n            }\n          }\n        }\n        if (media) {\n          // Remove gap fragments\n          _this.fragmentTracker.removeFragmentsInRange(currentTime, Infinity, _this.playlistType, true);\n\n          // Don't set lastCurrentTime with backward seeks (allows for frag selection with strict tolerances)\n          var lastCurrentTime = _this.lastCurrentTime;\n          if (currentTime > lastCurrentTime) {\n            _this.lastCurrentTime = currentTime;\n          }\n          if (!_this.loadingParts) {\n            var bufferEnd = Math.max(bufferInfo.end, currentTime);\n            var shouldLoadParts = _this.shouldLoadParts(_this.getLevelDetails(), bufferEnd);\n            if (shouldLoadParts) {\n              _this.log(\"LL-Part loading ON after seeking to \" + currentTime.toFixed(2) + \" with buffer @\" + bufferEnd.toFixed(2));\n              _this.loadingParts = shouldLoadParts;\n            }\n          }\n        }\n\n        // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target\n        if (!_this.hls.hasEnoughToStart && !bufferInfo.len) {\n          _this.log(\"setting startPosition to \" + currentTime + \" because of seek before start\");\n          _this.nextLoadPosition = _this.startPosition = currentTime;\n        }\n\n        // Async tick to speed up processing\n        _this.tickImmediate();\n      };\n      _this.onMediaEnded = function () {\n        // reset startPosition and lastCurrentTime to restart playback @ stream beginning\n        _this.log(\"setting startPosition to 0 because media ended\");\n        _this.startPosition = _this.lastCurrentTime = 0;\n      };\n      _this.playlistType = playlistType;\n      _this.hls = hls;\n      _this.fragmentLoader = new FragmentLoader(hls.config);\n      _this.keyLoader = keyLoader;\n      _this.fragmentTracker = fragmentTracker;\n      _this.config = hls.config;\n      _this.decrypter = new Decrypter(hls.config);\n      return _this;\n    }\n    _inheritsLoose(BaseStreamController, _TaskLoop);\n    var _proto = BaseStreamController.prototype;\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n      hls.on(Events.ERROR, this.onError, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n      hls.off(Events.ERROR, this.onError, this);\n    };\n    _proto.doTick = function doTick() {\n      this.onTickEnd();\n    };\n    _proto.onTickEnd = function onTickEnd() {};\n    _proto.startLoad = function startLoad(startPosition) {};\n    _proto.stopLoad = function stopLoad() {\n      if (this.state === State.STOPPED) {\n        return;\n      }\n      this.fragmentLoader.abort();\n      this.keyLoader.abort(this.playlistType);\n      var frag = this.fragCurrent;\n      if (frag != null && frag.loader) {\n        frag.abortRequests();\n        this.fragmentTracker.removeFragment(frag);\n      }\n      this.resetTransmuxer();\n      this.fragCurrent = null;\n      this.fragPrevious = null;\n      this.clearInterval();\n      this.clearNextTick();\n      this.state = State.STOPPED;\n    };\n    _proto.pauseBuffering = function pauseBuffering() {\n      this.buffering = false;\n    };\n    _proto.resumeBuffering = function resumeBuffering() {\n      this.buffering = true;\n    };\n    _proto._streamEnded = function _streamEnded(bufferInfo, levelDetails) {\n      // Stream is never \"ended\" when playlist is live or media is detached\n      if (levelDetails.live || !this.media) {\n        return false;\n      }\n      // Stream is not \"ended\" when nothing is buffered past the start\n      var bufferEnd = bufferInfo.end || 0;\n      var timelineStart = this.config.timelineOffset || 0;\n      if (bufferEnd <= timelineStart) {\n        return false;\n      }\n      // Stream is not \"ended\" when there is a second buffered range starting before the end of the playlist\n      var bufferedRanges = bufferInfo.buffered;\n      if (this.config.maxBufferHole && bufferedRanges && bufferedRanges.length > 1) {\n        // make sure bufferInfo accounts for any gaps\n        bufferInfo = BufferHelper.bufferedInfo(bufferedRanges, bufferInfo.start, 0);\n      }\n      var nextStart = bufferInfo.nextStart;\n      var hasSecondBufferedRange = nextStart && nextStart > timelineStart && nextStart < levelDetails.edge;\n      if (hasSecondBufferedRange) {\n        return false;\n      }\n      // Playhead is in unbuffered region. Marking EoS now could result in Safari failing to dispatch \"ended\" event following seek on start.\n      if (this.media.currentTime < bufferInfo.start) {\n        return false;\n      }\n      var partList = levelDetails.partList;\n      // Since the last part isn't guaranteed to correspond to the last playlist segment for Low-Latency HLS,\n      // check instead if the last part is buffered.\n      if (partList != null && partList.length) {\n        var lastPart = partList[partList.length - 1];\n\n        // Checking the midpoint of the part for potential margin of error and related issues.\n        // NOTE: Technically I believe parts could yield content that is < the computed duration (including potential a duration of 0)\n        // and still be spec-compliant, so there may still be edge cases here. Likewise, there could be issues in end of stream\n        // part mismatches for independent audio and video playlists/segments.\n        var lastPartBuffered = BufferHelper.isBuffered(this.media, lastPart.start + lastPart.duration / 2);\n        return lastPartBuffered;\n      }\n      var playlistType = levelDetails.fragments[levelDetails.fragments.length - 1].type;\n      return this.fragmentTracker.isEndListAppended(playlistType);\n    };\n    _proto.getLevelDetails = function getLevelDetails() {\n      if (this.levels && this.levelLastLoaded !== null) {\n        var _this$levelLastLoaded;\n        return (_this$levelLastLoaded = this.levelLastLoaded) == null ? void 0 : _this$levelLastLoaded.details;\n      }\n    };\n    _proto.onMediaAttached = function onMediaAttached(event, data) {\n      var media = this.media = this.mediaBuffer = data.media;\n      media.removeEventListener('seeking', this.onMediaSeeking);\n      media.removeEventListener('ended', this.onMediaEnded);\n      media.addEventListener('seeking', this.onMediaSeeking);\n      media.addEventListener('ended', this.onMediaEnded);\n      var config = this.config;\n      if (this.levels && config.autoStartLoad && this.state === State.STOPPED) {\n        this.startLoad(config.startPosition);\n      }\n    };\n    _proto.onMediaDetaching = function onMediaDetaching(event, data) {\n      var transferringMedia = !!data.transferMedia;\n      var media = this.media;\n      if (media === null) {\n        return;\n      }\n      if (media.ended) {\n        this.log('MSE detaching and video ended, reset startPosition');\n        this.startPosition = this.lastCurrentTime = 0;\n      }\n\n      // remove video listeners\n      media.removeEventListener('seeking', this.onMediaSeeking);\n      media.removeEventListener('ended', this.onMediaEnded);\n      if (this.keyLoader && !transferringMedia) {\n        this.keyLoader.detach();\n      }\n      this.media = this.mediaBuffer = null;\n      this.loopSn = undefined;\n      if (transferringMedia) {\n        this.resetLoadingState();\n        this.resetTransmuxer();\n        return;\n      }\n      this.loadingParts = false;\n      this.fragmentTracker.removeAllFragments();\n      this.stopLoad();\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      this.initPTS = [];\n      this.levels = this.levelLastLoaded = this.fragCurrent = null;\n      this.lastCurrentTime = this.startPosition = 0;\n      this.startFragRequested = false;\n    };\n    _proto.onError = function onError(event, data) {};\n    _proto.onManifestLoaded = function onManifestLoaded(event, data) {\n      this.startTimeOffset = data.startTimeOffset;\n    };\n    _proto.onHandlerDestroying = function onHandlerDestroying() {\n      this.stopLoad();\n      if (this.transmuxer) {\n        this.transmuxer.destroy();\n        this.transmuxer = null;\n      }\n      _TaskLoop.prototype.onHandlerDestroying.call(this);\n      // @ts-ignore\n      this.hls = this.onMediaSeeking = this.onMediaEnded = null;\n    };\n    _proto.onHandlerDestroyed = function onHandlerDestroyed() {\n      this.state = State.STOPPED;\n      if (this.fragmentLoader) {\n        this.fragmentLoader.destroy();\n      }\n      if (this.keyLoader) {\n        this.keyLoader.destroy();\n      }\n      if (this.decrypter) {\n        this.decrypter.destroy();\n      }\n      this.hls = this.log = this.warn = this.decrypter = this.keyLoader = this.fragmentLoader = this.fragmentTracker = null;\n      _TaskLoop.prototype.onHandlerDestroyed.call(this);\n    };\n    _proto.loadFragment = function loadFragment(frag, level, targetBufferTime) {\n      this.startFragRequested = true;\n      this._loadFragForPlayback(frag, level, targetBufferTime);\n    };\n    _proto._loadFragForPlayback = function _loadFragForPlayback(fragment, level, targetBufferTime) {\n      var _this3 = this;\n      var progressCallback = function progressCallback(data) {\n        var frag = data.frag;\n        if (_this3.fragContextChanged(frag)) {\n          _this3.warn(frag.type + \" sn: \" + frag.sn + (data.part ? ' part: ' + data.part.index : '') + \" of \" + _this3.fragInfo(frag, false, data.part) + \") was dropped during download.\");\n          _this3.fragmentTracker.removeFragment(frag);\n          return;\n        }\n        frag.stats.chunkCount++;\n        _this3._handleFragmentLoadProgress(data);\n      };\n      this._doFragLoad(fragment, level, targetBufferTime, progressCallback).then(function (data) {\n        if (!data) {\n          // if we're here we probably needed to backtrack or are waiting for more parts\n          return;\n        }\n        var state = _this3.state;\n        var frag = data.frag;\n        if (_this3.fragContextChanged(frag)) {\n          if (state === State.FRAG_LOADING || !_this3.fragCurrent && state === State.PARSING) {\n            _this3.fragmentTracker.removeFragment(frag);\n            _this3.state = State.IDLE;\n          }\n          return;\n        }\n        if ('payload' in data) {\n          _this3.log(\"Loaded \" + frag.type + \" sn: \" + frag.sn + \" of \" + _this3.playlistLabel() + \" \" + frag.level);\n          _this3.hls.trigger(Events.FRAG_LOADED, data);\n        }\n\n        // Pass through the whole payload; controllers not implementing progressive loading receive data from this callback\n        _this3._handleFragmentLoadComplete(data);\n      }).catch(function (reason) {\n        if (_this3.state === State.STOPPED || _this3.state === State.ERROR) {\n          return;\n        }\n        _this3.warn(\"Frag error: \" + ((reason == null ? void 0 : reason.message) || reason));\n        _this3.resetFragmentLoading(fragment);\n      });\n    };\n    _proto.clearTrackerIfNeeded = function clearTrackerIfNeeded(frag) {\n      var _this$mediaBuffer;\n      var fragmentTracker = this.fragmentTracker;\n      var fragState = fragmentTracker.getState(frag);\n      if (fragState === FragmentState.APPENDING) {\n        // Lower the max buffer length and try again\n        var playlistType = frag.type;\n        var bufferedInfo = this.getFwdBufferInfo(this.mediaBuffer, playlistType);\n        var minForwardBufferLength = Math.max(frag.duration, bufferedInfo ? bufferedInfo.len : this.config.maxBufferLength);\n        // If backtracking, always remove from the tracker without reducing max buffer length\n        var backtrackFragment = this.backtrackFragment;\n        var backtracked = backtrackFragment ? frag.sn - backtrackFragment.sn : 0;\n        if (backtracked === 1 || this.reduceMaxBufferLength(minForwardBufferLength, frag.duration)) {\n          fragmentTracker.removeFragment(frag);\n        }\n      } else if (((_this$mediaBuffer = this.mediaBuffer) == null ? void 0 : _this$mediaBuffer.buffered.length) === 0) {\n        // Stop gap for bad tracker / buffer flush behavior\n        fragmentTracker.removeAllFragments();\n      } else if (fragmentTracker.hasParts(frag.type)) {\n        // In low latency mode, remove fragments for which only some parts were buffered\n        fragmentTracker.detectPartialFragments({\n          frag: frag,\n          part: null,\n          stats: frag.stats,\n          id: frag.type\n        });\n        if (fragmentTracker.getState(frag) === FragmentState.PARTIAL) {\n          fragmentTracker.removeFragment(frag);\n        }\n      }\n    };\n    _proto.checkLiveUpdate = function checkLiveUpdate(details) {\n      if (details.updated && !details.live) {\n        // Live stream ended, update fragment tracker\n        var lastFragment = details.fragments[details.fragments.length - 1];\n        this.fragmentTracker.detectPartialFragments({\n          frag: lastFragment,\n          part: null,\n          stats: lastFragment.stats,\n          id: lastFragment.type\n        });\n      }\n      if (!details.fragments[0]) {\n        details.deltaUpdateFailed = true;\n      }\n    };\n    _proto.waitForLive = function waitForLive(levelInfo) {\n      var details = levelInfo.details;\n      return (details == null ? void 0 : details.live) && details.type !== 'EVENT' && (this.levelLastLoaded !== levelInfo || details.expired);\n    };\n    _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset, type) {\n      if (type === void 0) {\n        type = null;\n      }\n      if (!(startOffset - endOffset)) {\n        return;\n      }\n      // When alternate audio is playing, the audio-stream-controller is responsible for the audio buffer. Otherwise,\n      // passing a null type flushes both buffers\n      var flushScope = {\n        startOffset: startOffset,\n        endOffset: endOffset,\n        type: type\n      };\n      this.hls.trigger(Events.BUFFER_FLUSHING, flushScope);\n    };\n    _proto._loadInitSegment = function _loadInitSegment(fragment, level) {\n      var _this4 = this;\n      this._doFragLoad(fragment, level).then(function (data) {\n        var frag = data == null ? void 0 : data.frag;\n        if (!frag || _this4.fragContextChanged(frag) || !_this4.levels) {\n          throw new Error('init load aborted');\n        }\n        return data;\n      }).then(function (data) {\n        var hls = _this4.hls;\n        var frag = data.frag,\n          payload = data.payload;\n        var decryptData = frag.decryptdata;\n\n        // check to see if the payload needs to be decrypted\n        if (payload && payload.byteLength > 0 && decryptData != null && decryptData.key && decryptData.iv && isFullSegmentEncryption(decryptData.method)) {\n          var startTime = self.performance.now();\n          // decrypt init segment data\n          return _this4.decrypter.decrypt(new Uint8Array(payload), decryptData.key.buffer, decryptData.iv.buffer, getAesModeFromFullSegmentMethod(decryptData.method)).catch(function (err) {\n            hls.trigger(Events.ERROR, {\n              type: ErrorTypes.MEDIA_ERROR,\n              details: ErrorDetails.FRAG_DECRYPT_ERROR,\n              fatal: false,\n              error: err,\n              reason: err.message,\n              frag: frag\n            });\n            throw err;\n          }).then(function (decryptedData) {\n            var endTime = self.performance.now();\n            hls.trigger(Events.FRAG_DECRYPTED, {\n              frag: frag,\n              payload: decryptedData,\n              stats: {\n                tstart: startTime,\n                tdecrypt: endTime\n              }\n            });\n            data.payload = decryptedData;\n            return _this4.completeInitSegmentLoad(data);\n          });\n        }\n        return _this4.completeInitSegmentLoad(data);\n      }).catch(function (reason) {\n        if (_this4.state === State.STOPPED || _this4.state === State.ERROR) {\n          return;\n        }\n        _this4.warn(reason);\n        _this4.resetFragmentLoading(fragment);\n      });\n    };\n    _proto.completeInitSegmentLoad = function completeInitSegmentLoad(data) {\n      var levels = this.levels;\n      if (!levels) {\n        throw new Error('init load aborted, missing levels');\n      }\n      var stats = data.frag.stats;\n      if (this.state !== State.STOPPED) {\n        this.state = State.IDLE;\n      }\n      data.frag.data = new Uint8Array(data.payload);\n      stats.parsing.start = stats.buffering.start = self.performance.now();\n      stats.parsing.end = stats.buffering.end = self.performance.now();\n      this.tick();\n    };\n    _proto.fragContextChanged = function fragContextChanged(frag) {\n      var fragCurrent = this.fragCurrent;\n      return !frag || !fragCurrent || frag.sn !== fragCurrent.sn || frag.level !== fragCurrent.level;\n    };\n    _proto.fragBufferedComplete = function fragBufferedComplete(frag, part) {\n      var media = this.mediaBuffer ? this.mediaBuffer : this.media;\n      this.log(\"Buffered \" + frag.type + \" sn: \" + frag.sn + (part ? ' part: ' + part.index : '') + \" of \" + this.fragInfo(frag, false, part) + \" > buffer:\" + (media ? TimeRanges.toString(BufferHelper.getBuffered(media)) : '(detached)') + \")\");\n      if (isMediaFragment(frag)) {\n        var _this$levels;\n        if (frag.type !== PlaylistLevelType.SUBTITLE) {\n          var el = frag.elementaryStreams;\n          if (!Object.keys(el).some(function (type) {\n            return !!el[type];\n          })) {\n            // empty segment\n            this.state = State.IDLE;\n            return;\n          }\n        }\n        var level = (_this$levels = this.levels) == null ? void 0 : _this$levels[frag.level];\n        if (level != null && level.fragmentError) {\n          this.log(\"Resetting level fragment error count of \" + level.fragmentError + \" on frag buffered\");\n          level.fragmentError = 0;\n        }\n      }\n      this.state = State.IDLE;\n    };\n    _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedEndData) {\n      var transmuxer = this.transmuxer;\n      if (!transmuxer) {\n        return;\n      }\n      var frag = fragLoadedEndData.frag,\n        part = fragLoadedEndData.part,\n        partsLoaded = fragLoadedEndData.partsLoaded;\n      // If we did not load parts, or loaded all parts, we have complete (not partial) fragment data\n      var complete = !partsLoaded || partsLoaded.length === 0 || partsLoaded.some(function (fragLoaded) {\n        return !fragLoaded;\n      });\n      var chunkMeta = new ChunkMetadata(frag.level, frag.sn, frag.stats.chunkCount + 1, 0, part ? part.index : -1, !complete);\n      transmuxer.flush(chunkMeta);\n    };\n    _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(frag) {};\n    _proto._doFragLoad = function _doFragLoad(frag, level, targetBufferTime, progressCallback) {\n      var _frag$decryptdata,\n        _this5 = this;\n      if (targetBufferTime === void 0) {\n        targetBufferTime = null;\n      }\n      this.fragCurrent = frag;\n      var details = level == null ? void 0 : level.details;\n      if (!this.levels || !details) {\n        throw new Error(\"frag load aborted, missing level\" + (details ? '' : ' detail') + \"s\");\n      }\n      var keyLoadingPromise = null;\n      if (frag.encrypted && !((_frag$decryptdata = frag.decryptdata) != null && _frag$decryptdata.key)) {\n        this.log(\"Loading key for \" + frag.sn + \" of [\" + details.startSN + \"-\" + details.endSN + \"], \" + this.playlistLabel() + \" \" + frag.level);\n        this.state = State.KEY_LOADING;\n        this.fragCurrent = frag;\n        keyLoadingPromise = this.keyLoader.load(frag).then(function (keyLoadedData) {\n          if (!_this5.fragContextChanged(keyLoadedData.frag)) {\n            _this5.hls.trigger(Events.KEY_LOADED, keyLoadedData);\n            if (_this5.state === State.KEY_LOADING) {\n              _this5.state = State.IDLE;\n            }\n            return keyLoadedData;\n          }\n        });\n        this.hls.trigger(Events.KEY_LOADING, {\n          frag: frag\n        });\n        if (this.fragCurrent === null) {\n          keyLoadingPromise = Promise.reject(new Error(\"frag load aborted, context changed in KEY_LOADING\"));\n        }\n      } else if (!frag.encrypted) {\n        keyLoadingPromise = this.keyLoader.loadClear(frag, details.encryptedFragments);\n        if (keyLoadingPromise) {\n          this.log(\"[eme] blocking frag load until media-keys acquired\");\n        }\n      }\n      var fragPrevious = this.fragPrevious;\n      if (isMediaFragment(frag) && (!fragPrevious || frag.sn !== fragPrevious.sn)) {\n        var shouldLoadParts = this.shouldLoadParts(level.details, frag.end);\n        if (shouldLoadParts !== this.loadingParts) {\n          this.log(\"LL-Part loading \" + (shouldLoadParts ? 'ON' : 'OFF') + \" loading sn \" + (fragPrevious == null ? void 0 : fragPrevious.sn) + \"->\" + frag.sn);\n          this.loadingParts = shouldLoadParts;\n        }\n      }\n      targetBufferTime = Math.max(frag.start, targetBufferTime || 0);\n      if (this.loadingParts && isMediaFragment(frag)) {\n        var partList = details.partList;\n        if (partList && progressCallback) {\n          if (targetBufferTime > frag.end && details.fragmentHint) {\n            frag = details.fragmentHint;\n          }\n          var partIndex = this.getNextPart(partList, frag, targetBufferTime);\n          if (partIndex > -1) {\n            var part = partList[partIndex];\n            frag = this.fragCurrent = part.fragment;\n            this.log(\"Loading \" + frag.type + \" sn: \" + frag.sn + \" part: \" + part.index + \" (\" + partIndex + \"/\" + (partList.length - 1) + \") of \" + this.fragInfo(frag, false, part) + \") cc: \" + frag.cc + \" [\" + details.startSN + \"-\" + details.endSN + \"], target: \" + parseFloat(targetBufferTime.toFixed(3)));\n            this.nextLoadPosition = part.start + part.duration;\n            this.state = State.FRAG_LOADING;\n            var _result;\n            if (keyLoadingPromise) {\n              _result = keyLoadingPromise.then(function (keyLoadedData) {\n                if (!keyLoadedData || _this5.fragContextChanged(keyLoadedData.frag)) {\n                  return null;\n                }\n                return _this5.doFragPartsLoad(frag, part, level, progressCallback);\n              }).catch(function (error) {\n                return _this5.handleFragLoadError(error);\n              });\n            } else {\n              _result = this.doFragPartsLoad(frag, part, level, progressCallback).catch(function (error) {\n                return _this5.handleFragLoadError(error);\n              });\n            }\n            this.hls.trigger(Events.FRAG_LOADING, {\n              frag: frag,\n              part: part,\n              targetBufferTime: targetBufferTime\n            });\n            if (this.fragCurrent === null) {\n              return Promise.reject(new Error(\"frag load aborted, context changed in FRAG_LOADING parts\"));\n            }\n            return _result;\n          } else if (!frag.url || this.loadedEndOfParts(partList, targetBufferTime)) {\n            // Fragment hint has no parts\n            return Promise.resolve(null);\n          }\n        }\n      }\n      if (isMediaFragment(frag) && this.loadingParts) {\n        this.log(\"LL-Part loading OFF after next part miss @\" + targetBufferTime.toFixed(2));\n        this.loadingParts = false;\n      } else if (!frag.url) {\n        // Selected fragment hint for part but not loading parts\n        return Promise.resolve(null);\n      }\n      this.log(\"Loading \" + frag.type + \" sn: \" + frag.sn + \" of \" + this.fragInfo(frag, false) + \") cc: \" + frag.cc + \" \" + (details ? '[' + details.startSN + '-' + details.endSN + ']' : '') + \", target: \" + parseFloat(targetBufferTime.toFixed(3)));\n      // Don't update nextLoadPosition for fragments which are not buffered\n      if (isFiniteNumber(frag.sn) && !this.bitrateTest) {\n        this.nextLoadPosition = frag.start + frag.duration;\n      }\n      this.state = State.FRAG_LOADING;\n\n      // Load key before streaming fragment data\n      var dataOnProgress = this.config.progressive;\n      var result;\n      if (dataOnProgress && keyLoadingPromise) {\n        result = keyLoadingPromise.then(function (keyLoadedData) {\n          if (!keyLoadedData || _this5.fragContextChanged(keyLoadedData == null ? void 0 : keyLoadedData.frag)) {\n            return null;\n          }\n          return _this5.fragmentLoader.load(frag, progressCallback);\n        }).catch(function (error) {\n          return _this5.handleFragLoadError(error);\n        });\n      } else {\n        // load unencrypted fragment data with progress event,\n        // or handle fragment result after key and fragment are finished loading\n        result = Promise.all([this.fragmentLoader.load(frag, dataOnProgress ? progressCallback : undefined), keyLoadingPromise]).then(function (_ref) {\n          var fragLoadedData = _ref[0];\n          if (!dataOnProgress && fragLoadedData && progressCallback) {\n            progressCallback(fragLoadedData);\n          }\n          return fragLoadedData;\n        }).catch(function (error) {\n          return _this5.handleFragLoadError(error);\n        });\n      }\n      this.hls.trigger(Events.FRAG_LOADING, {\n        frag: frag,\n        targetBufferTime: targetBufferTime\n      });\n      if (this.fragCurrent === null) {\n        return Promise.reject(new Error(\"frag load aborted, context changed in FRAG_LOADING\"));\n      }\n      return result;\n    };\n    _proto.doFragPartsLoad = function doFragPartsLoad(frag, fromPart, level, progressCallback) {\n      var _this6 = this;\n      return new Promise(function (resolve, reject) {\n        var _level$details;\n        var partsLoaded = [];\n        var initialPartList = (_level$details = level.details) == null ? void 0 : _level$details.partList;\n        var _loadPart = function loadPart(part) {\n          _this6.fragmentLoader.loadPart(frag, part, progressCallback).then(function (partLoadedData) {\n            partsLoaded[part.index] = partLoadedData;\n            var loadedPart = partLoadedData.part;\n            _this6.hls.trigger(Events.FRAG_LOADED, partLoadedData);\n            var nextPart = getPartWith(level.details, frag.sn, part.index + 1) || findPart(initialPartList, frag.sn, part.index + 1);\n            if (nextPart) {\n              _loadPart(nextPart);\n            } else {\n              return resolve({\n                frag: frag,\n                part: loadedPart,\n                partsLoaded: partsLoaded\n              });\n            }\n          }).catch(reject);\n        };\n        _loadPart(fromPart);\n      });\n    };\n    _proto.handleFragLoadError = function handleFragLoadError(error) {\n      if ('data' in error) {\n        var data = error.data;\n        if (error.data && data.details === ErrorDetails.INTERNAL_ABORTED) {\n          this.handleFragLoadAborted(data.frag, data.part);\n        } else {\n          this.hls.trigger(Events.ERROR, data);\n        }\n      } else {\n        this.hls.trigger(Events.ERROR, {\n          type: ErrorTypes.OTHER_ERROR,\n          details: ErrorDetails.INTERNAL_EXCEPTION,\n          err: error,\n          error: error,\n          fatal: true\n        });\n      }\n      return null;\n    };\n    _proto._handleTransmuxerFlush = function _handleTransmuxerFlush(chunkMeta) {\n      var context = this.getCurrentContext(chunkMeta);\n      if (!context || this.state !== State.PARSING) {\n        if (!this.fragCurrent && this.state !== State.STOPPED && this.state !== State.ERROR) {\n          this.state = State.IDLE;\n        }\n        return;\n      }\n      var frag = context.frag,\n        part = context.part,\n        level = context.level;\n      var now = self.performance.now();\n      frag.stats.parsing.end = now;\n      if (part) {\n        part.stats.parsing.end = now;\n      }\n      // See if part loading should be disabled/enabled based on buffer and playback position.\n      var levelDetails = this.getLevelDetails();\n      var loadingPartsAtEdge = levelDetails && frag.sn > levelDetails.endSN;\n      var shouldLoadParts = loadingPartsAtEdge || this.shouldLoadParts(levelDetails, frag.end);\n      if (shouldLoadParts !== this.loadingParts) {\n        this.log(\"LL-Part loading \" + (shouldLoadParts ? 'ON' : 'OFF') + \" after parsing segment ending @\" + frag.end.toFixed(2));\n        this.loadingParts = shouldLoadParts;\n      }\n      this.updateLevelTiming(frag, part, level, chunkMeta.partial);\n    };\n    _proto.shouldLoadParts = function shouldLoadParts(details, bufferEnd) {\n      if (this.config.lowLatencyMode) {\n        if (!details) {\n          return this.loadingParts;\n        }\n        if (details != null && details.partList) {\n          var _details$fragmentHint;\n          // Buffer must be ahead of first part + duration of parts after last segment\n          // and playback must be at or past segment adjacent to part list\n          var firstPart = details.partList[0];\n          var safePartStart = firstPart.end + (((_details$fragmentHint = details.fragmentHint) == null ? void 0 : _details$fragmentHint.duration) || 0);\n          if (bufferEnd >= safePartStart) {\n            var _this$media;\n            var playhead = this.hls.hasEnoughToStart ? ((_this$media = this.media) == null ? void 0 : _this$media.currentTime) || this.lastCurrentTime : this.getLoadPosition();\n            if (playhead > firstPart.start - firstPart.fragment.duration) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    };\n    _proto.getCurrentContext = function getCurrentContext(chunkMeta) {\n      var levels = this.levels,\n        fragCurrent = this.fragCurrent;\n      var levelIndex = chunkMeta.level,\n        sn = chunkMeta.sn,\n        partIndex = chunkMeta.part;\n      if (!(levels != null && levels[levelIndex])) {\n        this.warn(\"Levels object was unset while buffering fragment \" + sn + \" of \" + this.playlistLabel() + \" \" + levelIndex + \". The current chunk will not be buffered.\");\n        return null;\n      }\n      var level = levels[levelIndex];\n      var levelDetails = level.details;\n      var part = partIndex > -1 ? getPartWith(levelDetails, sn, partIndex) : null;\n      var frag = part ? part.fragment : getFragmentWithSN(levelDetails, sn, fragCurrent);\n      if (!frag) {\n        return null;\n      }\n      if (fragCurrent && fragCurrent !== frag) {\n        frag.stats = fragCurrent.stats;\n      }\n      return {\n        frag: frag,\n        part: part,\n        level: level\n      };\n    };\n    _proto.bufferFragmentData = function bufferFragmentData(data, frag, part, chunkMeta, noBacktracking) {\n      var _buffer;\n      if (!data || this.state !== State.PARSING) {\n        return;\n      }\n      var data1 = data.data1,\n        data2 = data.data2;\n      var buffer = data1;\n      if (data1 && data2) {\n        // Combine the moof + mdat so that we buffer with a single append\n        buffer = appendUint8Array(data1, data2);\n      }\n      if (!((_buffer = buffer) != null && _buffer.length)) {\n        return;\n      }\n      var segment = {\n        type: data.type,\n        frag: frag,\n        part: part,\n        chunkMeta: chunkMeta,\n        parent: frag.type,\n        data: buffer\n      };\n      this.hls.trigger(Events.BUFFER_APPENDING, segment);\n      if (data.dropped && data.independent && !part) {\n        if (noBacktracking) {\n          return;\n        }\n        // Clear buffer so that we reload previous segments sequentially if required\n        this.flushBufferGap(frag);\n      }\n    };\n    _proto.flushBufferGap = function flushBufferGap(frag) {\n      var media = this.media;\n      if (!media) {\n        return;\n      }\n      // If currentTime is not buffered, clear the back buffer so that we can backtrack as much as needed\n      if (!BufferHelper.isBuffered(media, media.currentTime)) {\n        this.flushMainBuffer(0, frag.start);\n        return;\n      }\n      // Remove back-buffer without interrupting playback to allow back tracking\n      var currentTime = media.currentTime;\n      var bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);\n      var fragDuration = frag.duration;\n      var segmentFraction = Math.min(this.config.maxFragLookUpTolerance * 2, fragDuration * 0.25);\n      var start = Math.max(Math.min(frag.start - segmentFraction, bufferInfo.end - segmentFraction), currentTime + segmentFraction);\n      if (frag.start - start > segmentFraction) {\n        this.flushMainBuffer(start, frag.start);\n      }\n    };\n    _proto.getFwdBufferInfo = function getFwdBufferInfo(bufferable, type) {\n      var _this$media2;\n      var pos = this.getLoadPosition();\n      if (!isFiniteNumber(pos)) {\n        return null;\n      }\n      var backwardSeek = this.lastCurrentTime > pos;\n      var maxBufferHole = backwardSeek || (_this$media2 = this.media) != null && _this$media2.paused ? 0 : this.config.maxBufferHole;\n      return this.getFwdBufferInfoAtPos(bufferable, pos, type, maxBufferHole);\n    };\n    _proto.getFwdBufferInfoAtPos = function getFwdBufferInfoAtPos(bufferable, pos, type, maxBufferHole) {\n      var bufferInfo = BufferHelper.bufferInfo(bufferable, pos, maxBufferHole);\n      // Workaround flaw in getting forward buffer when maxBufferHole is smaller than gap at current pos\n      if (bufferInfo.len === 0 && bufferInfo.nextStart !== undefined) {\n        var bufferedFragAtPos = this.fragmentTracker.getBufferedFrag(pos, type);\n        if (bufferedFragAtPos && (bufferInfo.nextStart <= bufferedFragAtPos.end || bufferedFragAtPos.gap)) {\n          var gapDuration = Math.max(Math.min(bufferInfo.nextStart, bufferedFragAtPos.end) - pos, maxBufferHole);\n          return BufferHelper.bufferInfo(bufferable, pos, gapDuration);\n        }\n      }\n      return bufferInfo;\n    };\n    _proto.getMaxBufferLength = function getMaxBufferLength(levelBitrate) {\n      var config = this.config;\n      var maxBufLen;\n      if (levelBitrate) {\n        maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);\n      } else {\n        maxBufLen = config.maxBufferLength;\n      }\n      return Math.min(maxBufLen, config.maxMaxBufferLength);\n    };\n    _proto.reduceMaxBufferLength = function reduceMaxBufferLength(threshold, fragDuration) {\n      var config = this.config;\n      var minLength = Math.max(Math.min(threshold - fragDuration, config.maxBufferLength), fragDuration);\n      var reducedLength = Math.max(threshold - fragDuration * 3, config.maxMaxBufferLength / 2, minLength);\n      if (reducedLength >= minLength) {\n        // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...\n        config.maxMaxBufferLength = reducedLength;\n        this.warn(\"Reduce max buffer length to \" + reducedLength + \"s\");\n        return true;\n      }\n      return false;\n    };\n    _proto.getAppendedFrag = function getAppendedFrag(position, playlistType) {\n      var _this$fragmentTracker;\n      if (playlistType === void 0) {\n        playlistType = PlaylistLevelType.MAIN;\n      }\n      var fragOrPart = (_this$fragmentTracker = this.fragmentTracker) == null ? void 0 : _this$fragmentTracker.getAppendedFrag(position, playlistType);\n      if (fragOrPart && 'fragment' in fragOrPart) {\n        return fragOrPart.fragment;\n      }\n      return fragOrPart;\n    };\n    _proto.getNextFragment = function getNextFragment(pos, levelDetails) {\n      var fragments = levelDetails.fragments;\n      var fragLen = fragments.length;\n      if (!fragLen) {\n        return null;\n      }\n\n      // find fragment index, contiguous with end of buffer position\n      var config = this.config;\n      var start = fragments[0].start;\n      var canLoadParts = config.lowLatencyMode && !!levelDetails.partList;\n      var frag = null;\n      if (levelDetails.live) {\n        var initialLiveManifestSize = config.initialLiveManifestSize;\n        if (fragLen < initialLiveManifestSize) {\n          this.warn(\"Not enough fragments to start playback (have: \" + fragLen + \", need: \" + initialLiveManifestSize + \")\");\n          return null;\n        }\n        // The real fragment start times for a live stream are only known after the PTS range for that level is known.\n        // In order to discover the range, we load the best matching fragment for that level and demux it.\n        // Do not load using live logic if the starting frag is requested - we want to use getFragmentAtPosition() so that\n        // we get the fragment matching that start time\n        if (!levelDetails.PTSKnown && !this.startFragRequested && this.startPosition === -1 || pos < start) {\n          var _frag;\n          if (canLoadParts && !this.loadingParts) {\n            this.log(\"LL-Part loading ON for initial live fragment\");\n            this.loadingParts = true;\n          }\n          frag = this.getInitialLiveFragment(levelDetails);\n          var mainStart = this.hls.startPosition;\n          var liveSyncPosition = this.hls.liveSyncPosition;\n          var startPosition = frag ? (mainStart !== -1 && mainStart >= start ? mainStart : liveSyncPosition) || frag.start : pos;\n          this.log(\"Setting startPosition to \" + startPosition + \" to match start frag at live edge. mainStart: \" + mainStart + \" liveSyncPosition: \" + liveSyncPosition + \" frag.start: \" + ((_frag = frag) == null ? void 0 : _frag.start));\n          this.startPosition = this.nextLoadPosition = startPosition;\n        }\n      } else if (pos <= start) {\n        // VoD playlist: if loadPosition before start of playlist, load first fragment\n        frag = fragments[0];\n      }\n\n      // If we haven't run into any special cases already, just load the fragment most closely matching the requested position\n      if (!frag) {\n        var end = this.loadingParts ? levelDetails.partEnd : levelDetails.fragmentEnd;\n        frag = this.getFragmentAtPosition(pos, end, levelDetails);\n      }\n      var programFrag = this.filterReplacedPrimary(frag, levelDetails);\n      if (!programFrag && frag) {\n        var curSNIdx = frag.sn - levelDetails.startSN;\n        programFrag = this.filterReplacedPrimary(fragments[curSNIdx + 1] || null, levelDetails);\n      }\n      return this.mapToInitFragWhenRequired(programFrag);\n    };\n    _proto.isLoopLoading = function isLoopLoading(frag, targetBufferTime) {\n      var trackerState = this.fragmentTracker.getState(frag);\n      return (trackerState === FragmentState.OK || trackerState === FragmentState.PARTIAL && !!frag.gap) && this.nextLoadPosition > targetBufferTime;\n    };\n    _proto.getNextFragmentLoopLoading = function getNextFragmentLoopLoading(frag, levelDetails, bufferInfo, playlistType, maxBufLen) {\n      var nextFragment = null;\n      if (frag.gap) {\n        nextFragment = this.getNextFragment(this.nextLoadPosition, levelDetails);\n        if (nextFragment && !nextFragment.gap && bufferInfo.nextStart) {\n          // Media buffered after GAP tags should not make the next buffer timerange exceed forward buffer length\n          var nextbufferInfo = this.getFwdBufferInfoAtPos(this.mediaBuffer ? this.mediaBuffer : this.media, bufferInfo.nextStart, playlistType, 0);\n          if (nextbufferInfo !== null && bufferInfo.len + nextbufferInfo.len >= maxBufLen) {\n            // Returning here might result in not finding an audio and video candiate to skip to\n            var sn = nextFragment.sn;\n            if (this.loopSn !== sn) {\n              this.log(\"buffer full after gaps in \\\"\" + playlistType + \"\\\" playlist starting at sn: \" + sn);\n              this.loopSn = sn;\n            }\n            return null;\n          }\n        }\n      }\n      this.loopSn = undefined;\n      return nextFragment;\n    };\n    _proto.filterReplacedPrimary = function filterReplacedPrimary(frag, details) {\n      if (!frag) {\n        return frag;\n      }\n      if (interstitialsEnabled(this.hls.config) && frag.type !== PlaylistLevelType.SUBTITLE) {\n        // Do not load fragments outside the buffering schedule segment\n        var interstitials = this.hls.interstitialsManager;\n        var bufferingItem = interstitials == null ? void 0 : interstitials.bufferingItem;\n        if (bufferingItem) {\n          var bufferingInterstitial = bufferingItem.event;\n          if (bufferingInterstitial) {\n            // Do not stream fragments while buffering Interstitial Events (except for overlap at the start)\n            if (bufferingInterstitial.appendInPlace || Math.abs(frag.start - bufferingItem.start) > 1 || bufferingItem.start === 0) {\n              return null;\n            }\n          } else {\n            // Limit fragment loading to media in schedule item\n            if (frag.end <= bufferingItem.start && (details == null ? void 0 : details.live) === false) {\n              // fragment ends by schedule item start\n              // this.fragmentTracker.fragBuffered(frag, true);\n              return null;\n            }\n            if (frag.start > bufferingItem.end && bufferingItem.nextEvent) {\n              // fragment is past schedule item end\n              // allow some overflow when not appending in place to prevent stalls\n              if (bufferingItem.nextEvent.appendInPlace || frag.start - bufferingItem.end > 1) {\n                return null;\n              }\n            }\n          }\n        }\n        // Skip loading of fragments that overlap completely with appendInPlace interstitials\n        var playerQueue = interstitials == null ? void 0 : interstitials.playerQueue;\n        if (playerQueue) {\n          for (var i = playerQueue.length; i--;) {\n            var interstitial = playerQueue[i].interstitial;\n            if (interstitial.appendInPlace && frag.start >= interstitial.startTime && frag.end <= interstitial.resumeTime) {\n              return null;\n            }\n          }\n        }\n      }\n      return frag;\n    };\n    _proto.mapToInitFragWhenRequired = function mapToInitFragWhenRequired(frag) {\n      // If an initSegment is present, it must be buffered first\n      if (frag != null && frag.initSegment && !(frag != null && frag.initSegment.data) && !this.bitrateTest) {\n        return frag.initSegment;\n      }\n      return frag;\n    };\n    _proto.getNextPart = function getNextPart(partList, frag, targetBufferTime) {\n      var nextPart = -1;\n      var contiguous = false;\n      var independentAttrOmitted = true;\n      for (var i = 0, len = partList.length; i < len; i++) {\n        var part = partList[i];\n        independentAttrOmitted = independentAttrOmitted && !part.independent;\n        if (nextPart > -1 && targetBufferTime < part.start) {\n          break;\n        }\n        var loaded = part.loaded;\n        if (loaded) {\n          nextPart = -1;\n        } else if ((contiguous || part.independent || independentAttrOmitted) && part.fragment === frag) {\n          nextPart = i;\n        }\n        contiguous = loaded;\n      }\n      return nextPart;\n    };\n    _proto.loadedEndOfParts = function loadedEndOfParts(partList, targetBufferTime) {\n      var lastPart = partList[partList.length - 1];\n      return lastPart && targetBufferTime > lastPart.start && lastPart.loaded;\n    }\n\n    /*\n     This method is used find the best matching first fragment for a live playlist. This fragment is used to calculate the\n     \"sliding\" of the playlist, which is its offset from the start of playback. After sliding we can compute the real\n     start and end times for each fragment in the playlist (after which this method will not need to be called).\n    */;\n    _proto.getInitialLiveFragment = function getInitialLiveFragment(levelDetails) {\n      var fragments = levelDetails.fragments;\n      var fragPrevious = this.fragPrevious;\n      var frag = null;\n      if (fragPrevious) {\n        if (levelDetails.hasProgramDateTime) {\n          // Prefer using PDT, because it can be accurate enough to choose the correct fragment without knowing the level sliding\n          this.log(\"Live playlist, switching playlist, load frag with same PDT: \" + fragPrevious.programDateTime);\n          frag = findFragmentByPDT(fragments, fragPrevious.endProgramDateTime, this.config.maxFragLookUpTolerance);\n        }\n        if (!frag) {\n          // SN does not need to be accurate between renditions, but depending on the packaging it may be so.\n          var targetSN = fragPrevious.sn + 1;\n          if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {\n            var fragNext = fragments[targetSN - levelDetails.startSN];\n            // Ensure that we're staying within the continuity range, since PTS resets upon a new range\n            if (fragPrevious.cc === fragNext.cc) {\n              frag = fragNext;\n              this.log(\"Live playlist, switching playlist, load frag with next SN: \" + frag.sn);\n            }\n          }\n          // It's important to stay within the continuity range if available; otherwise the fragments in the playlist\n          // will have the wrong start times\n          if (!frag) {\n            frag = findNearestWithCC(levelDetails, fragPrevious.cc, fragPrevious.end);\n            if (frag) {\n              this.log(\"Live playlist, switching playlist, load frag with same CC: \" + frag.sn);\n            }\n          }\n        }\n      } else {\n        // Find a new start fragment when fragPrevious is null\n        var liveStart = this.hls.liveSyncPosition;\n        if (liveStart !== null) {\n          frag = this.getFragmentAtPosition(liveStart, this.bitrateTest ? levelDetails.fragmentEnd : levelDetails.edge, levelDetails);\n        }\n      }\n      return frag;\n    }\n\n    /*\n    This method finds the best matching fragment given the provided position.\n     */;\n    _proto.getFragmentAtPosition = function getFragmentAtPosition(bufferEnd, end, levelDetails) {\n      var config = this.config;\n      var fragPrevious = this.fragPrevious;\n      var fragments = levelDetails.fragments,\n        endSN = levelDetails.endSN;\n      var fragmentHint = levelDetails.fragmentHint;\n      var maxFragLookUpTolerance = config.maxFragLookUpTolerance;\n      var partList = levelDetails.partList;\n      var loadingParts = !!(this.loadingParts && partList != null && partList.length && fragmentHint);\n      if (loadingParts && fragmentHint && !this.bitrateTest && partList[partList.length - 1].fragment.sn === fragmentHint.sn) {\n        // Include incomplete fragment with parts at end\n        fragments = fragments.concat(fragmentHint);\n        endSN = fragmentHint.sn;\n      }\n      var frag;\n      if (bufferEnd < end) {\n        var _this$media3;\n        var backwardSeek = bufferEnd < this.lastCurrentTime;\n        var lookupTolerance = backwardSeek || bufferEnd > end - maxFragLookUpTolerance || (_this$media3 = this.media) != null && _this$media3.paused || !this.startFragRequested ? 0 : maxFragLookUpTolerance;\n        // Remove the tolerance if it would put the bufferEnd past the actual end of stream\n        // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)\n        frag = findFragmentByPTS(fragPrevious, fragments, bufferEnd, lookupTolerance);\n      } else {\n        // reach end of playlist\n        frag = fragments[fragments.length - 1];\n      }\n      if (frag) {\n        var curSNIdx = frag.sn - levelDetails.startSN;\n        // Move fragPrevious forward to support forcing the next fragment to load\n        // when the buffer catches up to a previously buffered range.\n        var fragState = this.fragmentTracker.getState(frag);\n        if (fragState === FragmentState.OK || fragState === FragmentState.PARTIAL && frag.gap) {\n          fragPrevious = frag;\n        }\n        if (fragPrevious && frag.sn === fragPrevious.sn && (!loadingParts || partList[0].fragment.sn > frag.sn || !levelDetails.live && !loadingParts)) {\n          // Force the next fragment to load if the previous one was already selected. This can occasionally happen with\n          // non-uniform fragment durations\n          var sameLevel = fragPrevious && frag.level === fragPrevious.level;\n          if (sameLevel) {\n            var nextFrag = fragments[curSNIdx + 1];\n            if (frag.sn < endSN && this.fragmentTracker.getState(nextFrag) !== FragmentState.OK) {\n              frag = nextFrag;\n            } else {\n              frag = null;\n            }\n          }\n        }\n      }\n      return frag;\n    };\n    _proto.alignPlaylists = function alignPlaylists(details, previousDetails, switchDetails) {\n      // TODO: If not for `shouldAlignOnDiscontinuities` requiring fragPrevious.cc,\n      //  this could all go in level-helper mergeDetails()\n      var length = details.fragments.length;\n      if (!length) {\n        this.warn(\"No fragments in live playlist\");\n        return 0;\n      }\n      var slidingStart = details.fragmentStart;\n      var firstLevelLoad = !previousDetails;\n      var aligned = details.alignedSliding && isFiniteNumber(slidingStart);\n      if (firstLevelLoad || !aligned && !slidingStart) {\n        alignStream(switchDetails, details);\n        var alignedSlidingStart = details.fragmentStart;\n        this.log(\"Live playlist sliding: \" + alignedSlidingStart.toFixed(2) + \" start-sn: \" + (previousDetails ? previousDetails.startSN : 'na') + \"->\" + details.startSN + \" fragments: \" + length);\n        return alignedSlidingStart;\n      }\n      return slidingStart;\n    };\n    _proto.waitForCdnTuneIn = function waitForCdnTuneIn(details) {\n      // Wait for Low-Latency CDN Tune-in to get an updated playlist\n      var advancePartLimit = 3;\n      return details.live && details.canBlockReload && details.partTarget && details.tuneInGoal > Math.max(details.partHoldBack, details.partTarget * advancePartLimit);\n    };\n    _proto.setStartPosition = function setStartPosition(details, sliding) {\n      // compute start position if set to -1. use it straight away if value is defined\n      var startPosition = this.startPosition;\n      if (startPosition < sliding) {\n        startPosition = -1;\n      }\n      var timelineOffset = this.timelineOffset;\n      if (startPosition === -1) {\n        // Use Playlist EXT-X-START:TIME-OFFSET when set\n        // Prioritize Multivariant Playlist offset so that main, audio, and subtitle stream-controller start times match\n        var offsetInMultivariantPlaylist = this.startTimeOffset !== null;\n        var startTimeOffset = offsetInMultivariantPlaylist ? this.startTimeOffset : details.startTimeOffset;\n        if (startTimeOffset !== null && isFiniteNumber(startTimeOffset)) {\n          startPosition = sliding + startTimeOffset;\n          if (startTimeOffset < 0) {\n            startPosition += details.edge;\n          }\n          startPosition = Math.min(Math.max(sliding, startPosition), sliding + details.totalduration);\n          this.log(\"Setting startPosition to \" + startPosition + \" for start time offset \" + startTimeOffset + \" found in \" + (offsetInMultivariantPlaylist ? 'multivariant' : 'media') + \" playlist\");\n          this.startPosition = startPosition;\n        } else if (details.live) {\n          // Leave this.startPosition at -1, so that we can use `getInitialLiveFragment` logic when startPosition has\n          // not been specified via the config or an as an argument to startLoad (#3736).\n          startPosition = this.hls.liveSyncPosition || sliding;\n          this.log(\"Setting startPosition to -1 to start at live edge \" + startPosition);\n          this.startPosition = -1;\n        } else {\n          this.log(\"setting startPosition to 0 by default\");\n          this.startPosition = startPosition = 0;\n        }\n        this.lastCurrentTime = startPosition + timelineOffset;\n      }\n      this.nextLoadPosition = startPosition + timelineOffset;\n    };\n    _proto.getLoadPosition = function getLoadPosition() {\n      var _this$hls;\n      var media = this.media;\n      // if we have not yet loaded any fragment, start loading from start position\n      var pos = 0;\n      if ((_this$hls = this.hls) != null && _this$hls.hasEnoughToStart && media) {\n        pos = media.currentTime;\n      } else if (this.nextLoadPosition >= 0) {\n        pos = this.nextLoadPosition;\n      }\n      return pos;\n    };\n    _proto.handleFragLoadAborted = function handleFragLoadAborted(frag, part) {\n      if (this.transmuxer && frag.type === this.playlistType && isMediaFragment(frag) && frag.stats.aborted) {\n        this.warn(\"Fragment \" + frag.sn + (part ? ' part ' + part.index : '') + \" of \" + this.playlistLabel() + \" \" + frag.level + \" was aborted\");\n        this.resetFragmentLoading(frag);\n      }\n    };\n    _proto.resetFragmentLoading = function resetFragmentLoading(frag) {\n      if (!this.fragCurrent || !this.fragContextChanged(frag) && this.state !== State.FRAG_LOADING_WAITING_RETRY) {\n        this.state = State.IDLE;\n      }\n    };\n    _proto.onFragmentOrKeyLoadError = function onFragmentOrKeyLoadError(filterType, data) {\n      if (data.chunkMeta && !data.frag) {\n        var context = this.getCurrentContext(data.chunkMeta);\n        if (context) {\n          data.frag = context.frag;\n        }\n      }\n      var frag = data.frag;\n      // Handle frag error related to caller's filterType\n      if (!frag || frag.type !== filterType || !this.levels) {\n        return;\n      }\n      if (this.fragContextChanged(frag)) {\n        var _this$fragCurrent;\n        this.warn(\"Frag load error must match current frag to retry \" + frag.url + \" > \" + ((_this$fragCurrent = this.fragCurrent) == null ? void 0 : _this$fragCurrent.url));\n        return;\n      }\n      var gapTagEncountered = data.details === ErrorDetails.FRAG_GAP;\n      if (gapTagEncountered) {\n        this.fragmentTracker.fragBuffered(frag, true);\n      }\n      // keep retrying until the limit will be reached\n      var errorAction = data.errorAction;\n      var _ref2 = errorAction || {},\n        action = _ref2.action,\n        flags = _ref2.flags,\n        _ref2$retryCount = _ref2.retryCount,\n        retryCount = _ref2$retryCount === void 0 ? 0 : _ref2$retryCount,\n        retryConfig = _ref2.retryConfig;\n      var couldRetry = !!errorAction && !!retryConfig;\n      var retry = couldRetry && action === NetworkErrorAction.RetryRequest;\n      var noAlternate = couldRetry && !errorAction.resolved && flags === ErrorActionFlags.MoveAllAlternatesMatchingHost;\n      if (!retry && noAlternate && isMediaFragment(frag) && !frag.endList) {\n        this.resetFragmentErrors(filterType);\n        this.treatAsGap(frag);\n        errorAction.resolved = true;\n      } else if ((retry || noAlternate) && retryCount < retryConfig.maxNumRetry) {\n        this.resetStartWhenNotLoaded(this.levelLastLoaded);\n        var delay = getRetryDelay(retryConfig, retryCount);\n        this.warn(\"Fragment \" + frag.sn + \" of \" + filterType + \" \" + frag.level + \" errored with \" + data.details + \", retrying loading \" + (retryCount + 1) + \"/\" + retryConfig.maxNumRetry + \" in \" + delay + \"ms\");\n        errorAction.resolved = true;\n        this.retryDate = self.performance.now() + delay;\n        this.state = State.FRAG_LOADING_WAITING_RETRY;\n      } else if (retryConfig && errorAction) {\n        this.resetFragmentErrors(filterType);\n        if (retryCount < retryConfig.maxNumRetry) {\n          // Network retry is skipped when level switch is preferred\n          if (!gapTagEncountered && action !== NetworkErrorAction.RemoveAlternatePermanently) {\n            errorAction.resolved = true;\n          }\n        } else {\n          this.warn(data.details + \" reached or exceeded max retry (\" + retryCount + \")\");\n          return;\n        }\n      } else if (action === NetworkErrorAction.SendAlternateToPenaltyBox) {\n        this.state = State.WAITING_LEVEL;\n      } else {\n        this.state = State.ERROR;\n      }\n      // Perform next async tick sooner to speed up error action resolution\n      this.tickImmediate();\n    };\n    _proto.reduceLengthAndFlushBuffer = function reduceLengthAndFlushBuffer(data) {\n      // if in appending state\n      if (this.state === State.PARSING || this.state === State.PARSED) {\n        var frag = data.frag;\n        var playlistType = data.parent;\n        var bufferedInfo = this.getFwdBufferInfo(this.mediaBuffer, playlistType);\n        // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end\n        // reduce max buf len if current position is buffered\n        var buffered = bufferedInfo && bufferedInfo.len > 0.5;\n        if (buffered) {\n          this.reduceMaxBufferLength(bufferedInfo.len, (frag == null ? void 0 : frag.duration) || 10);\n        }\n        var flushBuffer = !buffered;\n        if (flushBuffer) {\n          // current position is not buffered, but browser is still complaining about buffer full error\n          // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708\n          // in that case flush the whole audio buffer to recover\n          this.warn(\"Buffer full error while media.currentTime is not buffered, flush \" + playlistType + \" buffer\");\n        }\n        if (frag) {\n          this.fragmentTracker.removeFragment(frag);\n          this.nextLoadPosition = frag.start;\n        }\n        this.resetLoadingState();\n        return flushBuffer;\n      }\n      return false;\n    };\n    _proto.resetFragmentErrors = function resetFragmentErrors(filterType) {\n      if (filterType === PlaylistLevelType.AUDIO) {\n        // Reset current fragment since audio track audio is essential and may not have a fail-over track\n        this.fragCurrent = null;\n      }\n      // Fragment errors that result in a level switch or redundant fail-over\n      // should reset the stream controller state to idle\n      if (!this.hls.hasEnoughToStart) {\n        this.startFragRequested = false;\n      }\n      if (this.state !== State.STOPPED) {\n        this.state = State.IDLE;\n      }\n    };\n    _proto.afterBufferFlushed = function afterBufferFlushed(media, bufferType, playlistType) {\n      if (!media) {\n        return;\n      }\n      // After successful buffer flushing, filter flushed fragments from bufferedFrags use mediaBuffered instead of media\n      // (so that we will check against video.buffered ranges in case of alt audio track)\n      var bufferedTimeRanges = BufferHelper.getBuffered(media);\n      this.fragmentTracker.detectEvictedFragments(bufferType, bufferedTimeRanges, playlistType);\n      if (this.state === State.ENDED) {\n        this.resetLoadingState();\n      }\n    };\n    _proto.resetLoadingState = function resetLoadingState() {\n      this.log('Reset loading state');\n      this.fragCurrent = null;\n      this.fragPrevious = null;\n      if (this.state !== State.STOPPED) {\n        this.state = State.IDLE;\n      }\n    };\n    _proto.resetStartWhenNotLoaded = function resetStartWhenNotLoaded(level) {\n      // if loadedmetadata is not set, it means that first frag request failed\n      // in that case, reset startFragRequested flag\n      if (!this.hls.hasEnoughToStart) {\n        this.startFragRequested = false;\n        var details = level ? level.details : null;\n        if (details != null && details.live) {\n          // Update the start position and return to IDLE to recover live start\n          this.log(\"resetting startPosition for live start\");\n          this.startPosition = -1;\n          this.setStartPosition(details, details.fragmentStart);\n          this.resetLoadingState();\n        } else {\n          this.nextLoadPosition = this.startPosition;\n        }\n      }\n    };\n    _proto.resetWhenMissingContext = function resetWhenMissingContext(chunkMeta) {\n      this.warn(\"The loading context changed while buffering fragment \" + chunkMeta.sn + \" of \" + this.playlistLabel() + \" \" + chunkMeta.level + \". This chunk will not be buffered.\");\n      this.removeUnbufferedFrags();\n      this.resetStartWhenNotLoaded(this.levelLastLoaded);\n      this.resetLoadingState();\n    };\n    _proto.removeUnbufferedFrags = function removeUnbufferedFrags(start) {\n      if (start === void 0) {\n        start = 0;\n      }\n      this.fragmentTracker.removeFragmentsInRange(start, Infinity, this.playlistType, false, true);\n    };\n    _proto.updateLevelTiming = function updateLevelTiming(frag, part, level, partial) {\n      var _this7 = this;\n      var details = level.details;\n      if (!details) {\n        this.warn('level.details undefined');\n        return;\n      }\n      var parsed = Object.keys(frag.elementaryStreams).reduce(function (result, type) {\n        var info = frag.elementaryStreams[type];\n        if (info) {\n          var parsedDuration = info.endPTS - info.startPTS;\n          if (parsedDuration <= 0) {\n            // Destroy the transmuxer after it's next time offset failed to advance because duration was <= 0.\n            // The new transmuxer will be configured with a time offset matching the next fragment start,\n            // preventing the timeline from shifting.\n            _this7.warn(\"Could not parse fragment \" + frag.sn + \" \" + type + \" duration reliably (\" + parsedDuration + \")\");\n            return result || false;\n          }\n          var drift = partial ? 0 : updateFragPTSDTS(details, frag, info.startPTS, info.endPTS, info.startDTS, info.endDTS);\n          _this7.hls.trigger(Events.LEVEL_PTS_UPDATED, {\n            details: details,\n            level: level,\n            drift: drift,\n            type: type,\n            frag: frag,\n            start: info.startPTS,\n            end: info.endPTS\n          });\n          return true;\n        }\n        return result;\n      }, false);\n      if (!parsed) {\n        var _this$transmuxer;\n        if (level.fragmentError === 0) {\n          // Mark and track the odd empty segment as a gap to avoid reloading\n          this.treatAsGap(frag, level);\n        }\n        if (((_this$transmuxer = this.transmuxer) == null ? void 0 : _this$transmuxer.error) === null) {\n          var error = new Error(\"Found no media in fragment \" + frag.sn + \" of \" + this.playlistLabel() + \" \" + frag.level + \" resetting transmuxer to fallback to playlist timing\");\n          this.warn(error.message);\n          this.hls.trigger(Events.ERROR, {\n            type: ErrorTypes.MEDIA_ERROR,\n            details: ErrorDetails.FRAG_PARSING_ERROR,\n            fatal: false,\n            error: error,\n            frag: frag,\n            reason: \"Found no media in msn \" + frag.sn + \" of \" + this.playlistLabel() + \" \\\"\" + level.url + \"\\\"\"\n          });\n          if (!this.hls) {\n            return;\n          }\n          this.resetTransmuxer();\n        }\n        // For this error fallthrough. Marking parsed will allow advancing to next fragment.\n      }\n      this.state = State.PARSED;\n      this.log(\"Parsed \" + frag.type + \" sn: \" + frag.sn + (part ? ' part: ' + part.index : '') + \" of \" + this.fragInfo(frag, false, part) + \")\");\n      this.hls.trigger(Events.FRAG_PARSED, {\n        frag: frag,\n        part: part\n      });\n    };\n    _proto.playlistLabel = function playlistLabel() {\n      return this.playlistType === PlaylistLevelType.MAIN ? 'level' : 'track';\n    };\n    _proto.fragInfo = function fragInfo(frag, pts, part) {\n      var _ref3, _ref4;\n      if (pts === void 0) {\n        pts = true;\n      }\n      return this.playlistLabel() + \" \" + frag.level + \" (\" + (part ? 'part' : 'frag') + \":[\" + ((_ref3 = pts && !part ? frag.startPTS : (part || frag).start) != null ? _ref3 : NaN).toFixed(3) + \"-\" + ((_ref4 = pts && !part ? frag.endPTS : (part || frag).end) != null ? _ref4 : NaN).toFixed(3) + \"]\" + (part && frag.type === 'main' ? 'INDEPENDENT=' + (part.independent ? 'YES' : 'NO') : '');\n    };\n    _proto.treatAsGap = function treatAsGap(frag, level) {\n      if (level) {\n        level.fragmentError++;\n      }\n      frag.gap = true;\n      this.fragmentTracker.removeFragment(frag);\n      this.fragmentTracker.fragBuffered(frag, true);\n    };\n    _proto.resetTransmuxer = function resetTransmuxer() {\n      var _this$transmuxer2;\n      (_this$transmuxer2 = this.transmuxer) == null ? void 0 : _this$transmuxer2.reset();\n    };\n    _proto.recoverWorkerError = function recoverWorkerError(data) {\n      if (data.event === 'demuxerWorker') {\n        this.fragmentTracker.removeAllFragments();\n        if (this.transmuxer) {\n          this.transmuxer.destroy();\n          this.transmuxer = null;\n        }\n        this.resetStartWhenNotLoaded(this.levelLastLoaded);\n        this.resetLoadingState();\n      }\n    };\n    return _createClass(BaseStreamController, [{\n      key: \"startPositionValue\",\n      get: function get() {\n        var nextLoadPosition = this.nextLoadPosition,\n          startPosition = this.startPosition;\n        if (startPosition === -1 && nextLoadPosition) {\n          return nextLoadPosition;\n        }\n        return startPosition;\n      }\n    }, {\n      key: \"bufferingEnabled\",\n      get: function get() {\n        return this.buffering;\n      }\n    }, {\n      key: \"inFlightFrag\",\n      get: function get() {\n        return {\n          frag: this.fragCurrent,\n          state: this.state\n        };\n      }\n    }, {\n      key: \"timelineOffset\",\n      get: function get() {\n        var configuredTimelineOffset = this.config.timelineOffset;\n        if (configuredTimelineOffset) {\n          var _this$getLevelDetails;\n          return ((_this$getLevelDetails = this.getLevelDetails()) == null ? void 0 : _this$getLevelDetails.appliedTimelineOffset) || configuredTimelineOffset;\n        }\n        return 0;\n      }\n    }, {\n      key: \"primaryPrefetch\",\n      get: function get() {\n        if (interstitialsEnabled(this.hls.config)) {\n          var _this$hls$interstitia, _this$hls$interstitia2;\n          var playingInterstitial = (_this$hls$interstitia = this.hls.interstitialsManager) == null ? void 0 : (_this$hls$interstitia2 = _this$hls$interstitia.playingItem) == null ? void 0 : _this$hls$interstitia2.event;\n          if (playingInterstitial) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._state;\n      },\n      set: function set(nextState) {\n        var previousState = this._state;\n        if (previousState !== nextState) {\n          this._state = nextState;\n          this.log(previousState + \"->\" + nextState);\n        }\n      }\n    }]);\n  }(TaskLoop);\n  function interstitialsEnabled(config) {\n    return !!config.interstitialsController && config.enableInterstitialPlayback !== false;\n  }\n\n  var ChunkCache = /*#__PURE__*/function () {\n    function ChunkCache() {\n      this.chunks = [];\n      this.dataLength = 0;\n    }\n    var _proto = ChunkCache.prototype;\n    _proto.push = function push(chunk) {\n      this.chunks.push(chunk);\n      this.dataLength += chunk.length;\n    };\n    _proto.flush = function flush() {\n      var chunks = this.chunks,\n        dataLength = this.dataLength;\n      var result;\n      if (!chunks.length) {\n        return new Uint8Array(0);\n      } else if (chunks.length === 1) {\n        result = chunks[0];\n      } else {\n        result = concatUint8Arrays(chunks, dataLength);\n      }\n      this.reset();\n      return result;\n    };\n    _proto.reset = function reset() {\n      this.chunks.length = 0;\n      this.dataLength = 0;\n    };\n    return ChunkCache;\n  }();\n  function concatUint8Arrays(chunks, dataLength) {\n    var result = new Uint8Array(dataLength);\n    var offset = 0;\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n      result.set(chunk, offset);\n      offset += chunk.length;\n    }\n    return result;\n  }\n\n  /**\n   * Returns true if an ID3 footer can be found at offset in data\n   *\n   * @param data - The data to search in\n   * @param offset - The offset at which to start searching\n   *\n   * @returns `true` if an ID3 footer is found\n   *\n   * @internal\n   *\n   * @group ID3\n   */\n  function isId3Footer(data, offset) {\n    /*\n     * The footer is a copy of the header, but with a different identifier\n     */\n    if (offset + 10 <= data.length) {\n      // look for '3DI' identifier\n      if (data[offset] === 0x33 && data[offset + 1] === 0x44 && data[offset + 2] === 0x49) {\n        // check version is within range\n        if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {\n          // check size is within range\n          if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if an ID3 header can be found at offset in data\n   *\n   * @param data - The data to search in\n   * @param offset - The offset at which to start searching\n   *\n   * @returns `true` if an ID3 header is found\n   *\n   * @internal\n   *\n   * @group ID3\n   */\n  function isId3Header(data, offset) {\n    /*\n     * http://id3.org/id3v2.3.0\n     * [0]     = 'I'\n     * [1]     = 'D'\n     * [2]     = '3'\n     * [3,4]   = {Version}\n     * [5]     = {Flags}\n     * [6-9]   = {ID3 Size}\n     *\n     * An ID3v2 tag can be detected with the following pattern:\n     *  $49 44 33 yy yy xx zz zz zz zz\n     * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80\n     */\n    if (offset + 10 <= data.length) {\n      // look for 'ID3' identifier\n      if (data[offset] === 0x49 && data[offset + 1] === 0x44 && data[offset + 2] === 0x33) {\n        // check version is within range\n        if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {\n          // check size is within range\n          if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Read ID3 size\n   *\n   * @param data - The data to read from\n   * @param offset - The offset at which to start reading\n   *\n   * @returns The size\n   *\n   * @internal\n   *\n   * @group ID3\n   */\n  function readId3Size(data, offset) {\n    var size = 0;\n    size = (data[offset] & 0x7f) << 21;\n    size |= (data[offset + 1] & 0x7f) << 14;\n    size |= (data[offset + 2] & 0x7f) << 7;\n    size |= data[offset + 3] & 0x7f;\n    return size;\n  }\n\n  /**\n   * Returns any adjacent ID3 tags found in data starting at offset, as one block of data\n   *\n   * @param data - The data to search in\n   * @param offset - The offset at which to start searching\n   *\n   * @returns The block of data containing any ID3 tags found\n   * or `undefined` if no header is found at the starting offset\n   *\n   * @internal\n   *\n   * @group ID3\n   */\n  function getId3Data(data, offset) {\n    var front = offset;\n    var length = 0;\n    while (isId3Header(data, offset)) {\n      // ID3 header is 10 bytes\n      length += 10;\n      var size = readId3Size(data, offset + 6);\n      length += size;\n      if (isId3Footer(data, offset + 10)) {\n        // ID3 footer is 10 bytes\n        length += 10;\n      }\n      offset += length;\n    }\n    if (length > 0) {\n      return data.subarray(front, front + length);\n    }\n    return undefined;\n  }\n\n  function getAudioConfig(observer, data, offset, manifestCodec) {\n    var adtsSamplingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n    var byte2 = data[offset + 2];\n    var adtsSamplingIndex = byte2 >> 2 & 0xf;\n    if (adtsSamplingIndex > 12) {\n      var error = new Error(\"invalid ADTS sampling index:\" + adtsSamplingIndex);\n      observer.emit(Events.ERROR, Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.FRAG_PARSING_ERROR,\n        fatal: true,\n        error: error,\n        reason: error.message\n      });\n      return;\n    }\n    // MPEG-4 Audio Object Type (profile_ObjectType+1)\n    var adtsObjectType = (byte2 >> 6 & 0x3) + 1;\n    var channelCount = data[offset + 3] >> 6 & 0x3 | (byte2 & 1) << 2;\n    var codec = 'mp4a.40.' + adtsObjectType;\n    /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n        ISO/IEC 14496-3 - Table 1.13 — Syntax of AudioSpecificConfig()\n      Audio Profile / Audio Object Type\n      0: Null\n      1: AAC Main\n      2: AAC LC (Low Complexity)\n      3: AAC SSR (Scalable Sample Rate)\n      4: AAC LTP (Long Term Prediction)\n      5: SBR (Spectral Band Replication)\n      6: AAC Scalable\n     sampling freq\n      0: 96000 Hz\n      1: 88200 Hz\n      2: 64000 Hz\n      3: 48000 Hz\n      4: 44100 Hz\n      5: 32000 Hz\n      6: 24000 Hz\n      7: 22050 Hz\n      8: 16000 Hz\n      9: 12000 Hz\n      10: 11025 Hz\n      11: 8000 Hz\n      12: 7350 Hz\n      13: Reserved\n      14: Reserved\n      15: frequency is written explictly\n      Channel Configurations\n      These are the channel configurations:\n      0: Defined in AOT Specifc Config\n      1: 1 channel: front-center\n      2: 2 channels: front-left, front-right\n    */\n    // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1\n    var samplerate = adtsSamplingRates[adtsSamplingIndex];\n    var aacSampleIndex = adtsSamplingIndex;\n    if (adtsObjectType === 5 || adtsObjectType === 29) {\n      // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n      // there is a factor 2 between frame sample rate and output sample rate\n      // multiply frequency by 2 (see table above, equivalent to substract 3)\n      aacSampleIndex -= 3;\n    }\n    var config = [adtsObjectType << 3 | (aacSampleIndex & 0x0e) >> 1, (aacSampleIndex & 0x01) << 7 | channelCount << 3];\n    logger.log(\"manifest codec:\" + manifestCodec + \", parsed codec:\" + codec + \", channels:\" + channelCount + \", rate:\" + samplerate + \" (ADTS object type:\" + adtsObjectType + \" sampling index:\" + adtsSamplingIndex + \")\");\n    return {\n      config: config,\n      samplerate: samplerate,\n      channelCount: channelCount,\n      codec: codec,\n      parsedCodec: codec,\n      manifestCodec: manifestCodec\n    };\n  }\n  function isHeaderPattern$1(data, offset) {\n    return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;\n  }\n  function getHeaderLength(data, offset) {\n    return data[offset + 1] & 0x01 ? 7 : 9;\n  }\n  function getFullFrameLength(data, offset) {\n    return (data[offset + 3] & 0x03) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 0xe0) >>> 5;\n  }\n  function canGetFrameLength(data, offset) {\n    return offset + 5 < data.length;\n  }\n  function isHeader$1(data, offset) {\n    // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n    // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n    // More info https://wiki.multimedia.cx/index.php?title=ADTS\n    return offset + 1 < data.length && isHeaderPattern$1(data, offset);\n  }\n  function canParse$1(data, offset) {\n    return canGetFrameLength(data, offset) && isHeaderPattern$1(data, offset) && getFullFrameLength(data, offset) <= data.length - offset;\n  }\n  function probe$1(data, offset) {\n    // same as isHeader but we also check that ADTS frame follows last ADTS frame\n    // or end of data is reached\n    if (isHeader$1(data, offset)) {\n      // ADTS header Length\n      var headerLength = getHeaderLength(data, offset);\n      if (offset + headerLength >= data.length) {\n        return false;\n      }\n      // ADTS frame Length\n      var frameLength = getFullFrameLength(data, offset);\n      if (frameLength <= headerLength) {\n        return false;\n      }\n      var newOffset = offset + frameLength;\n      return newOffset === data.length || isHeader$1(data, newOffset);\n    }\n    return false;\n  }\n  function initTrackConfig(track, observer, data, offset, audioCodec) {\n    if (!track.samplerate) {\n      var config = getAudioConfig(observer, data, offset, audioCodec);\n      if (!config) {\n        return;\n      }\n      _extends(track, config);\n    }\n  }\n  function getFrameDuration(samplerate) {\n    return 1024 * 90000 / samplerate;\n  }\n  function parseFrameHeader(data, offset) {\n    // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header\n    var headerLength = getHeaderLength(data, offset);\n    if (offset + headerLength <= data.length) {\n      // retrieve frame size\n      var frameLength = getFullFrameLength(data, offset) - headerLength;\n      if (frameLength > 0) {\n        // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}`);\n        return {\n          headerLength: headerLength,\n          frameLength: frameLength\n        };\n      }\n    }\n  }\n  function appendFrame$1(track, data, offset, pts, frameIndex) {\n    var frameDuration = getFrameDuration(track.samplerate);\n    var stamp = pts + frameIndex * frameDuration;\n    var header = parseFrameHeader(data, offset);\n    var unit;\n    if (header) {\n      var frameLength = header.frameLength,\n        headerLength = header.headerLength;\n      var _length = headerLength + frameLength;\n      var missing = Math.max(0, offset + _length - data.length);\n      // logger.log(`AAC frame ${frameIndex}, pts:${stamp} length@offset/total: ${frameLength}@${offset+headerLength}/${data.byteLength} missing: ${missing}`);\n      if (missing) {\n        unit = new Uint8Array(_length - headerLength);\n        unit.set(data.subarray(offset + headerLength, data.length), 0);\n      } else {\n        unit = data.subarray(offset + headerLength, offset + _length);\n      }\n      var _sample = {\n        unit: unit,\n        pts: stamp\n      };\n      if (!missing) {\n        track.samples.push(_sample);\n      }\n      return {\n        sample: _sample,\n        length: _length,\n        missing: missing\n      };\n    }\n    // overflow incomplete header\n    var length = data.length - offset;\n    unit = new Uint8Array(length);\n    unit.set(data.subarray(offset, data.length), 0);\n    var sample = {\n      unit: unit,\n      pts: stamp\n    };\n    return {\n      sample: sample,\n      length: length,\n      missing: -1\n    };\n  }\n\n  /**\n   * Checks if the given data contains an ID3 tag.\n   *\n   * @param data - The data to check\n   * @param offset - The offset at which to start checking\n   *\n   * @returns `true` if an ID3 tag is found\n   *\n   * @group ID3\n   *\n   * @beta\n   */\n  function canParseId3(data, offset) {\n    return isId3Header(data, offset) && readId3Size(data, offset + 6) + 10 <= data.length - offset;\n  }\n\n  function toArrayBuffer(view) {\n    if (view instanceof ArrayBuffer) {\n      return view;\n    } else {\n      if (view.byteOffset == 0 && view.byteLength == view.buffer.byteLength) {\n        // This is a TypedArray over the whole buffer.\n        return view.buffer;\n      }\n      // This is a 'view' on the buffer.  Create a new buffer that only contains\n      // the data.  Note that since this isn't an ArrayBuffer, the 'new' call\n      // will allocate a new buffer to hold the copy.\n      return new Uint8Array(view).buffer;\n    }\n  }\n\n  function toUint8(data, offset, length) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n    if (length === void 0) {\n      length = Infinity;\n    }\n    return view(data, offset, length, Uint8Array);\n  }\n  function view(data, offset, length, Type) {\n    var buffer = unsafeGetArrayBuffer(data);\n    var bytesPerElement = 1;\n    if ('BYTES_PER_ELEMENT' in Type) {\n      bytesPerElement = Type.BYTES_PER_ELEMENT;\n    }\n    // Absolute end of the |data| view within |buffer|.\n    var dataOffset = isArrayBufferView(data) ? data.byteOffset : 0;\n    var dataEnd = (dataOffset + data.byteLength) / bytesPerElement;\n    // Absolute start of the result within |buffer|.\n    var rawStart = (dataOffset + offset) / bytesPerElement;\n    var start = Math.floor(Math.max(0, Math.min(rawStart, dataEnd)));\n    // Absolute end of the result within |buffer|.\n    var end = Math.floor(Math.min(start + Math.max(length, 0), dataEnd));\n    return new Type(buffer, start, end - start);\n  }\n  function unsafeGetArrayBuffer(view) {\n    if (view instanceof ArrayBuffer) {\n      return view;\n    } else {\n      return view.buffer;\n    }\n  }\n  function isArrayBufferView(obj) {\n    return obj && obj.buffer instanceof ArrayBuffer && obj.byteLength !== undefined && obj.byteOffset !== undefined;\n  }\n\n  function decodeId3ImageFrame(frame) {\n    var metadataFrame = {\n      key: frame.type,\n      description: '',\n      data: '',\n      mimeType: null,\n      pictureType: null\n    };\n    var utf8Encoding = 0x03;\n    if (frame.size < 2) {\n      return undefined;\n    }\n    if (frame.data[0] !== utf8Encoding) {\n      console.log('Ignore frame with unrecognized character ' + 'encoding');\n      return undefined;\n    }\n    var mimeTypeEndIndex = frame.data.subarray(1).indexOf(0);\n    if (mimeTypeEndIndex === -1) {\n      return undefined;\n    }\n    var mimeType = utf8ArrayToStr(toUint8(frame.data, 1, mimeTypeEndIndex));\n    var pictureType = frame.data[2 + mimeTypeEndIndex];\n    var descriptionEndIndex = frame.data.subarray(3 + mimeTypeEndIndex).indexOf(0);\n    if (descriptionEndIndex === -1) {\n      return undefined;\n    }\n    var description = utf8ArrayToStr(toUint8(frame.data, 3 + mimeTypeEndIndex, descriptionEndIndex));\n    var data;\n    if (mimeType === '-->') {\n      data = utf8ArrayToStr(toUint8(frame.data, 4 + mimeTypeEndIndex + descriptionEndIndex));\n    } else {\n      data = toArrayBuffer(frame.data.subarray(4 + mimeTypeEndIndex + descriptionEndIndex));\n    }\n    metadataFrame.mimeType = mimeType;\n    metadataFrame.pictureType = pictureType;\n    metadataFrame.description = description;\n    metadataFrame.data = data;\n    return metadataFrame;\n  }\n\n  /**\n   * Decode an ID3 PRIV frame.\n   *\n   * @param frame - the ID3 PRIV frame\n   *\n   * @returns The decoded ID3 PRIV frame\n   *\n   * @internal\n   *\n   * @group ID3\n   */\n  function decodeId3PrivFrame(frame) {\n    /*\n    Format: <text string>\\0<binary data>\n    */\n    if (frame.size < 2) {\n      return undefined;\n    }\n    var owner = utf8ArrayToStr(frame.data, true);\n    var privateData = new Uint8Array(frame.data.subarray(owner.length + 1));\n    return {\n      key: frame.type,\n      info: owner,\n      data: privateData.buffer\n    };\n  }\n\n  /**\n   * Decodes an ID3 text frame\n   *\n   * @param frame - the ID3 text frame\n   *\n   * @returns The decoded ID3 text frame\n   *\n   * @internal\n   *\n   * @group ID3\n   */\n  function decodeId3TextFrame(frame) {\n    if (frame.size < 2) {\n      return undefined;\n    }\n    if (frame.type === 'TXXX') {\n      /*\n      Format:\n      [0]   = {Text Encoding}\n      [1-?] = {Description}\\0{Value}\n      */\n      var index = 1;\n      var description = utf8ArrayToStr(frame.data.subarray(index), true);\n      index += description.length + 1;\n      var value = utf8ArrayToStr(frame.data.subarray(index));\n      return {\n        key: frame.type,\n        info: description,\n        data: value\n      };\n    }\n    /*\n    Format:\n    [0]   = {Text Encoding}\n    [1-?] = {Value}\n    */\n    var text = utf8ArrayToStr(frame.data.subarray(1));\n    return {\n      key: frame.type,\n      info: '',\n      data: text\n    };\n  }\n\n  /**\n   * Decode a URL frame\n   *\n   * @param frame - the ID3 URL frame\n   *\n   * @returns The decoded ID3 URL frame\n   *\n   * @internal\n   *\n   * @group ID3\n   */\n  function decodeId3UrlFrame(frame) {\n    if (frame.type === 'WXXX') {\n      /*\n      Format:\n      [0]   = {Text Encoding}\n      [1-?] = {Description}\\0{URL}\n      */\n      if (frame.size < 2) {\n        return undefined;\n      }\n      var index = 1;\n      var description = utf8ArrayToStr(frame.data.subarray(index), true);\n      index += description.length + 1;\n      var value = utf8ArrayToStr(frame.data.subarray(index));\n      return {\n        key: frame.type,\n        info: description,\n        data: value\n      };\n    }\n    /*\n    Format:\n    [0-?] = {URL}\n    */\n    var url = utf8ArrayToStr(frame.data);\n    return {\n      key: frame.type,\n      info: '',\n      data: url\n    };\n  }\n\n  /**\n   * Decode an ID3 frame.\n   *\n   * @param frame - the ID3 frame\n   *\n   * @returns The decoded ID3 frame\n   *\n   * @internal\n   *\n   * @group ID3\n   */\n  function decodeId3Frame(frame) {\n    if (frame.type === 'PRIV') {\n      return decodeId3PrivFrame(frame);\n    } else if (frame.type[0] === 'W') {\n      return decodeId3UrlFrame(frame);\n    } else if (frame.type === 'APIC') {\n      return decodeId3ImageFrame(frame);\n    }\n    return decodeId3TextFrame(frame);\n  }\n\n  /**\n   * Returns the data of an ID3 frame.\n   *\n   * @param data - The data to read from\n   *\n   * @returns The data of the ID3 frame\n   *\n   * @internal\n   *\n   * @group ID3\n   */\n  function getId3FrameData(data) {\n    /*\n    Frame ID       $xx xx xx xx (four characters)\n    Size           $xx xx xx xx\n    Flags          $xx xx\n    */\n    var type = String.fromCharCode(data[0], data[1], data[2], data[3]);\n    var size = readId3Size(data, 4);\n    // skip frame id, size, and flags\n    var offset = 10;\n    return {\n      type: type,\n      size: size,\n      data: data.subarray(offset, offset + size)\n    };\n  }\n\n  var HEADER_FOOTER_SIZE = 10;\n  var FRAME_SIZE = 10;\n  /**\n   * Returns an array of ID3 frames found in all the ID3 tags in the id3Data\n   *\n   * @param id3Data - The ID3 data containing one or more ID3 tags\n   *\n   * @returns Array of ID3 frame objects\n   *\n   * @group ID3\n   *\n   * @beta\n   */\n  function getId3Frames(id3Data) {\n    var offset = 0;\n    var frames = [];\n    while (isId3Header(id3Data, offset)) {\n      var size = readId3Size(id3Data, offset + 6);\n      if (id3Data[offset + 5] >> 6 & 1) {\n        // skip extended header\n        offset += HEADER_FOOTER_SIZE;\n      }\n      // skip past ID3 header\n      offset += HEADER_FOOTER_SIZE;\n      var end = offset + size;\n      // loop through frames in the ID3 tag\n      while (offset + FRAME_SIZE < end) {\n        var frameData = getId3FrameData(id3Data.subarray(offset));\n        var frame = decodeId3Frame(frameData);\n        if (frame) {\n          frames.push(frame);\n        }\n        // skip frame header and frame data\n        offset += frameData.size + HEADER_FOOTER_SIZE;\n      }\n      if (isId3Footer(id3Data, offset)) {\n        offset += HEADER_FOOTER_SIZE;\n      }\n    }\n    return frames;\n  }\n\n  /**\n   * Returns true if the ID3 frame is an Elementary Stream timestamp frame\n   *\n   * @param frame - the ID3 frame\n   *\n   * @returns `true` if the ID3 frame is an Elementary Stream timestamp frame\n   *\n   * @internal\n   *\n   * @group ID3\n   */\n  function isId3TimestampFrame(frame) {\n    return frame && frame.key === 'PRIV' && frame.info === 'com.apple.streaming.transportStreamTimestamp';\n  }\n\n  /**\n   * Read a 33 bit timestamp from an ID3 frame.\n   *\n   * @param timeStampFrame - the ID3 frame\n   *\n   * @returns The timestamp\n   *\n   * @internal\n   *\n   * @group ID3\n   */\n  function readId3Timestamp(timeStampFrame) {\n    if (timeStampFrame.data.byteLength === 8) {\n      var data = new Uint8Array(timeStampFrame.data);\n      // timestamp is 33 bit expressed as a big-endian eight-octet number,\n      // with the upper 31 bits set to zero.\n      var pts33Bit = data[3] & 0x1;\n      var timestamp = (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];\n      timestamp /= 45;\n      if (pts33Bit) {\n        timestamp += 47721858.84;\n      } // 2^32 / 90\n      return Math.round(timestamp);\n    }\n    return undefined;\n  }\n\n  /**\n   * Searches for the Elementary Stream timestamp found in the ID3 data chunk\n   *\n   * @param data - Block of data containing one or more ID3 tags\n   *\n   * @returns The timestamp\n   *\n   * @group ID3\n   *\n   * @beta\n   */\n  function getId3Timestamp(data) {\n    var frames = getId3Frames(data);\n    for (var i = 0; i < frames.length; i++) {\n      var frame = frames[i];\n      if (isId3TimestampFrame(frame)) {\n        return readId3Timestamp(frame);\n      }\n    }\n    return undefined;\n  }\n\n  var MetadataSchema = /*#__PURE__*/function (MetadataSchema) {\n    MetadataSchema[\"audioId3\"] = \"org.id3\";\n    MetadataSchema[\"dateRange\"] = \"com.apple.quicktime.HLS\";\n    MetadataSchema[\"emsg\"] = \"https://aomedia.org/emsg/ID3\";\n    MetadataSchema[\"misbklv\"] = \"urn:misb:KLV:bin:1910.1\";\n    return MetadataSchema;\n  }({});\n\n  function dummyTrack(type, inputTimeScale) {\n    if (type === void 0) {\n      type = '';\n    }\n    if (inputTimeScale === void 0) {\n      inputTimeScale = 90000;\n    }\n    return {\n      type: type,\n      id: -1,\n      pid: -1,\n      inputTimeScale: inputTimeScale,\n      sequenceNumber: -1,\n      samples: [],\n      dropped: 0\n    };\n  }\n\n  var BaseAudioDemuxer = /*#__PURE__*/function () {\n    function BaseAudioDemuxer() {\n      this._audioTrack = void 0;\n      this._id3Track = void 0;\n      this.frameIndex = 0;\n      this.cachedData = null;\n      this.basePTS = null;\n      this.initPTS = null;\n      this.lastPTS = null;\n    }\n    var _proto = BaseAudioDemuxer.prototype;\n    _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {\n      this._id3Track = {\n        type: 'id3',\n        id: 3,\n        pid: -1,\n        inputTimeScale: 90000,\n        sequenceNumber: 0,\n        samples: [],\n        dropped: 0\n      };\n    };\n    _proto.resetTimeStamp = function resetTimeStamp(deaultTimestamp) {\n      this.initPTS = deaultTimestamp;\n      this.resetContiguity();\n    };\n    _proto.resetContiguity = function resetContiguity() {\n      this.basePTS = null;\n      this.lastPTS = null;\n      this.frameIndex = 0;\n    };\n    _proto.canParse = function canParse(data, offset) {\n      return false;\n    };\n    _proto.appendFrame = function appendFrame(track, data, offset) {}\n\n    // feed incoming data to the front of the parsing pipeline\n    ;\n    _proto.demux = function demux(data, timeOffset) {\n      if (this.cachedData) {\n        data = appendUint8Array(this.cachedData, data);\n        this.cachedData = null;\n      }\n      var id3Data = getId3Data(data, 0);\n      var offset = id3Data ? id3Data.length : 0;\n      var lastDataIndex;\n      var track = this._audioTrack;\n      var id3Track = this._id3Track;\n      var timestamp = id3Data ? getId3Timestamp(id3Data) : undefined;\n      var length = data.length;\n      if (this.basePTS === null || this.frameIndex === 0 && isFiniteNumber(timestamp)) {\n        this.basePTS = initPTSFn(timestamp, timeOffset, this.initPTS);\n        this.lastPTS = this.basePTS;\n      }\n      if (this.lastPTS === null) {\n        this.lastPTS = this.basePTS;\n      }\n\n      // more expressive than alternative: id3Data?.length\n      if (id3Data && id3Data.length > 0) {\n        id3Track.samples.push({\n          pts: this.lastPTS,\n          dts: this.lastPTS,\n          data: id3Data,\n          type: MetadataSchema.audioId3,\n          duration: Number.POSITIVE_INFINITY\n        });\n      }\n      while (offset < length) {\n        if (this.canParse(data, offset)) {\n          var frame = this.appendFrame(track, data, offset);\n          if (frame) {\n            this.frameIndex++;\n            this.lastPTS = frame.sample.pts;\n            offset += frame.length;\n            lastDataIndex = offset;\n          } else {\n            offset = length;\n          }\n        } else if (canParseId3(data, offset)) {\n          // after a canParse, a call to getId3Data *should* always returns some data\n          id3Data = getId3Data(data, offset);\n          id3Track.samples.push({\n            pts: this.lastPTS,\n            dts: this.lastPTS,\n            data: id3Data,\n            type: MetadataSchema.audioId3,\n            duration: Number.POSITIVE_INFINITY\n          });\n          offset += id3Data.length;\n          lastDataIndex = offset;\n        } else {\n          offset++;\n        }\n        if (offset === length && lastDataIndex !== length) {\n          var partialData = data.slice(lastDataIndex);\n          if (this.cachedData) {\n            this.cachedData = appendUint8Array(this.cachedData, partialData);\n          } else {\n            this.cachedData = partialData;\n          }\n        }\n      }\n      return {\n        audioTrack: track,\n        videoTrack: dummyTrack(),\n        id3Track: id3Track,\n        textTrack: dummyTrack()\n      };\n    };\n    _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {\n      return Promise.reject(new Error(\"[\" + this + \"] This demuxer does not support Sample-AES decryption\"));\n    };\n    _proto.flush = function flush(timeOffset) {\n      // Parse cache in case of remaining frames.\n      var cachedData = this.cachedData;\n      if (cachedData) {\n        this.cachedData = null;\n        this.demux(cachedData, 0);\n      }\n      return {\n        audioTrack: this._audioTrack,\n        videoTrack: dummyTrack(),\n        id3Track: this._id3Track,\n        textTrack: dummyTrack()\n      };\n    };\n    _proto.destroy = function destroy() {\n      this.cachedData = null;\n      // @ts-ignore\n      this._audioTrack = this._id3Track = undefined;\n    };\n    return BaseAudioDemuxer;\n  }();\n  /**\n   * Initialize PTS\n   * <p>\n   *    use timestamp unless it is undefined, NaN or Infinity\n   * </p>\n   */\n  var initPTSFn = function initPTSFn(timestamp, timeOffset, initPTS) {\n    if (isFiniteNumber(timestamp)) {\n      return timestamp * 90;\n    }\n    var init90kHz = initPTS ? initPTS.baseTime * 90000 / initPTS.timescale : 0;\n    return timeOffset * 90000 + init90kHz;\n  };\n\n  /**\n   *  MPEG parser helper\n   */\n\n  var chromeVersion$1 = null;\n  var BitratesMap = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160];\n  var SamplingRateMap = [44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000];\n  var SamplesCoefficients = [\n  // MPEG 2.5\n  [0,\n  // Reserved\n  72,\n  // Layer3\n  144,\n  // Layer2\n  12 // Layer1\n  ],\n  // Reserved\n  [0,\n  // Reserved\n  0,\n  // Layer3\n  0,\n  // Layer2\n  0 // Layer1\n  ],\n  // MPEG 2\n  [0,\n  // Reserved\n  72,\n  // Layer3\n  144,\n  // Layer2\n  12 // Layer1\n  ],\n  // MPEG 1\n  [0,\n  // Reserved\n  144,\n  // Layer3\n  144,\n  // Layer2\n  12 // Layer1\n  ]];\n  var BytesInSlot = [0,\n  // Reserved\n  1,\n  // Layer3\n  1,\n  // Layer2\n  4 // Layer1\n  ];\n  function appendFrame(track, data, offset, pts, frameIndex) {\n    // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference\n    if (offset + 24 > data.length) {\n      return;\n    }\n    var header = parseHeader(data, offset);\n    if (header && offset + header.frameLength <= data.length) {\n      var frameDuration = header.samplesPerFrame * 90000 / header.sampleRate;\n      var stamp = pts + frameIndex * frameDuration;\n      var sample = {\n        unit: data.subarray(offset, offset + header.frameLength),\n        pts: stamp,\n        dts: stamp\n      };\n      track.config = [];\n      track.channelCount = header.channelCount;\n      track.samplerate = header.sampleRate;\n      track.samples.push(sample);\n      return {\n        sample: sample,\n        length: header.frameLength,\n        missing: 0\n      };\n    }\n  }\n  function parseHeader(data, offset) {\n    var mpegVersion = data[offset + 1] >> 3 & 3;\n    var mpegLayer = data[offset + 1] >> 1 & 3;\n    var bitRateIndex = data[offset + 2] >> 4 & 15;\n    var sampleRateIndex = data[offset + 2] >> 2 & 3;\n    if (mpegVersion !== 1 && bitRateIndex !== 0 && bitRateIndex !== 15 && sampleRateIndex !== 3) {\n      var paddingBit = data[offset + 2] >> 1 & 1;\n      var channelMode = data[offset + 3] >> 6;\n      var columnInBitrates = mpegVersion === 3 ? 3 - mpegLayer : mpegLayer === 3 ? 3 : 4;\n      var bitRate = BitratesMap[columnInBitrates * 14 + bitRateIndex - 1] * 1000;\n      var columnInSampleRates = mpegVersion === 3 ? 0 : mpegVersion === 2 ? 1 : 2;\n      var sampleRate = SamplingRateMap[columnInSampleRates * 3 + sampleRateIndex];\n      var channelCount = channelMode === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)\n      var sampleCoefficient = SamplesCoefficients[mpegVersion][mpegLayer];\n      var bytesInSlot = BytesInSlot[mpegLayer];\n      var samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;\n      var frameLength = Math.floor(sampleCoefficient * bitRate / sampleRate + paddingBit) * bytesInSlot;\n      if (chromeVersion$1 === null) {\n        var userAgent = navigator.userAgent || '';\n        var result = userAgent.match(/Chrome\\/(\\d+)/i);\n        chromeVersion$1 = result ? parseInt(result[1]) : 0;\n      }\n      var needChromeFix = !!chromeVersion$1 && chromeVersion$1 <= 87;\n      if (needChromeFix && mpegLayer === 2 && bitRate >= 224000 && channelMode === 0) {\n        // Work around bug in Chromium by setting channelMode to dual-channel (01) instead of stereo (00)\n        data[offset + 3] = data[offset + 3] | 0x80;\n      }\n      return {\n        sampleRate: sampleRate,\n        channelCount: channelCount,\n        frameLength: frameLength,\n        samplesPerFrame: samplesPerFrame\n      };\n    }\n  }\n  function isHeaderPattern(data, offset) {\n    return data[offset] === 0xff && (data[offset + 1] & 0xe0) === 0xe0 && (data[offset + 1] & 0x06) !== 0x00;\n  }\n  function isHeader(data, offset) {\n    // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n    // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n    // More info http://www.mp3-tech.org/programmer/frame_header.html\n    return offset + 1 < data.length && isHeaderPattern(data, offset);\n  }\n  function canParse(data, offset) {\n    var headerSize = 4;\n    return isHeaderPattern(data, offset) && headerSize <= data.length - offset;\n  }\n  function probe(data, offset) {\n    // same as isHeader but we also check that MPEG frame follows last MPEG frame\n    // or end of data is reached\n    if (offset + 1 < data.length && isHeaderPattern(data, offset)) {\n      // MPEG header Length\n      var headerLength = 4;\n      // MPEG frame Length\n      var header = parseHeader(data, offset);\n      var frameLength = headerLength;\n      if (header != null && header.frameLength) {\n        frameLength = header.frameLength;\n      }\n      var newOffset = offset + frameLength;\n      return newOffset === data.length || isHeader(data, newOffset);\n    }\n    return false;\n  }\n\n  var AACDemuxer = /*#__PURE__*/function (_BaseAudioDemuxer) {\n    function AACDemuxer(observer, config) {\n      var _this;\n      _this = _BaseAudioDemuxer.call(this) || this;\n      _this.observer = void 0;\n      _this.config = void 0;\n      _this.observer = observer;\n      _this.config = config;\n      return _this;\n    }\n    _inheritsLoose(AACDemuxer, _BaseAudioDemuxer);\n    var _proto = AACDemuxer.prototype;\n    _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {\n      _BaseAudioDemuxer.prototype.resetInitSegment.call(this, initSegment, audioCodec, videoCodec, trackDuration);\n      this._audioTrack = {\n        container: 'audio/adts',\n        type: 'audio',\n        id: 2,\n        pid: -1,\n        sequenceNumber: 0,\n        segmentCodec: 'aac',\n        samples: [],\n        manifestCodec: audioCodec,\n        duration: trackDuration,\n        inputTimeScale: 90000,\n        dropped: 0\n      };\n    }\n\n    // Source for probe info - https://wiki.multimedia.cx/index.php?title=ADTS\n    ;\n    AACDemuxer.probe = function probe$2(data, logger) {\n      if (!data) {\n        return false;\n      }\n\n      // Check for the ADTS sync word\n      // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n      // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n      // More info https://wiki.multimedia.cx/index.php?title=ADTS\n      var id3Data = getId3Data(data, 0);\n      var offset = (id3Data == null ? void 0 : id3Data.length) || 0;\n      if (probe(data, offset)) {\n        return false;\n      }\n      for (var length = data.length; offset < length; offset++) {\n        if (probe$1(data, offset)) {\n          logger.log('ADTS sync word found !');\n          return true;\n        }\n      }\n      return false;\n    };\n    _proto.canParse = function canParse(data, offset) {\n      return canParse$1(data, offset);\n    };\n    _proto.appendFrame = function appendFrame(track, data, offset) {\n      initTrackConfig(track, this.observer, data, offset, track.manifestCodec);\n      var frame = appendFrame$1(track, data, offset, this.basePTS, this.frameIndex);\n      if (frame && frame.missing === 0) {\n        return frame;\n      }\n    };\n    return AACDemuxer;\n  }(BaseAudioDemuxer);\n\n  var getAudioBSID = function getAudioBSID(data, offset) {\n    // check the bsid to confirm ac-3 | ec-3\n    var bsid = 0;\n    var numBits = 5;\n    offset += numBits;\n    var temp = new Uint32Array(1); // unsigned 32 bit for temporary storage\n    var mask = new Uint32Array(1); // unsigned 32 bit mask value\n    var _byte = new Uint8Array(1); // unsigned 8 bit for temporary storage\n    while (numBits > 0) {\n      _byte[0] = data[offset];\n      // read remaining bits, upto 8 bits at a time\n      var bits = Math.min(numBits, 8);\n      var shift = 8 - bits;\n      mask[0] = 0xff000000 >>> 24 + shift << shift;\n      temp[0] = (_byte[0] & mask[0]) >> shift;\n      bsid = !bsid ? temp[0] : bsid << bits | temp[0];\n      offset += 1;\n      numBits -= bits;\n    }\n    return bsid;\n  };\n\n  var AC3Demuxer = /*#__PURE__*/function (_BaseAudioDemuxer) {\n    function AC3Demuxer(observer) {\n      var _this;\n      _this = _BaseAudioDemuxer.call(this) || this;\n      _this.observer = void 0;\n      _this.observer = observer;\n      return _this;\n    }\n    _inheritsLoose(AC3Demuxer, _BaseAudioDemuxer);\n    var _proto = AC3Demuxer.prototype;\n    _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {\n      _BaseAudioDemuxer.prototype.resetInitSegment.call(this, initSegment, audioCodec, videoCodec, trackDuration);\n      this._audioTrack = {\n        container: 'audio/ac-3',\n        type: 'audio',\n        id: 2,\n        pid: -1,\n        sequenceNumber: 0,\n        segmentCodec: 'ac3',\n        samples: [],\n        manifestCodec: audioCodec,\n        duration: trackDuration,\n        inputTimeScale: 90000,\n        dropped: 0\n      };\n    };\n    _proto.canParse = function canParse(data, offset) {\n      return offset + 64 < data.length;\n    };\n    _proto.appendFrame = function appendFrame(track, data, offset) {\n      var frameLength = _appendFrame(track, data, offset, this.basePTS, this.frameIndex);\n      if (frameLength !== -1) {\n        var sample = track.samples[track.samples.length - 1];\n        return {\n          sample: sample,\n          length: frameLength,\n          missing: 0\n        };\n      }\n    };\n    AC3Demuxer.probe = function probe(data) {\n      if (!data) {\n        return false;\n      }\n      var id3Data = getId3Data(data, 0);\n      if (!id3Data) {\n        return false;\n      }\n\n      // look for the ac-3 sync bytes\n      var offset = id3Data.length;\n      if (data[offset] === 0x0b && data[offset + 1] === 0x77 && getId3Timestamp(id3Data) !== undefined &&\n      // check the bsid to confirm ac-3\n      getAudioBSID(data, offset) < 16) {\n        return true;\n      }\n      return false;\n    };\n    return AC3Demuxer;\n  }(BaseAudioDemuxer);\n  function _appendFrame(track, data, start, pts, frameIndex) {\n    if (start + 8 > data.length) {\n      return -1; // not enough bytes left\n    }\n    if (data[start] !== 0x0b || data[start + 1] !== 0x77) {\n      return -1; // invalid magic\n    }\n\n    // get sample rate\n    var samplingRateCode = data[start + 4] >> 6;\n    if (samplingRateCode >= 3) {\n      return -1; // invalid sampling rate\n    }\n    var samplingRateMap = [48000, 44100, 32000];\n    var sampleRate = samplingRateMap[samplingRateCode];\n\n    // get frame size\n    var frameSizeCode = data[start + 4] & 0x3f;\n    var frameSizeMap = [64, 69, 96, 64, 70, 96, 80, 87, 120, 80, 88, 120, 96, 104, 144, 96, 105, 144, 112, 121, 168, 112, 122, 168, 128, 139, 192, 128, 140, 192, 160, 174, 240, 160, 175, 240, 192, 208, 288, 192, 209, 288, 224, 243, 336, 224, 244, 336, 256, 278, 384, 256, 279, 384, 320, 348, 480, 320, 349, 480, 384, 417, 576, 384, 418, 576, 448, 487, 672, 448, 488, 672, 512, 557, 768, 512, 558, 768, 640, 696, 960, 640, 697, 960, 768, 835, 1152, 768, 836, 1152, 896, 975, 1344, 896, 976, 1344, 1024, 1114, 1536, 1024, 1115, 1536, 1152, 1253, 1728, 1152, 1254, 1728, 1280, 1393, 1920, 1280, 1394, 1920];\n    var frameLength = frameSizeMap[frameSizeCode * 3 + samplingRateCode] * 2;\n    if (start + frameLength > data.length) {\n      return -1;\n    }\n\n    // get channel count\n    var channelMode = data[start + 6] >> 5;\n    var skipCount = 0;\n    if (channelMode === 2) {\n      skipCount += 2;\n    } else {\n      if (channelMode & 1 && channelMode !== 1) {\n        skipCount += 2;\n      }\n      if (channelMode & 4) {\n        skipCount += 2;\n      }\n    }\n    var lfeon = (data[start + 6] << 8 | data[start + 7]) >> 12 - skipCount & 1;\n    var channelsMap = [2, 1, 2, 3, 3, 4, 4, 5];\n    var channelCount = channelsMap[channelMode] + lfeon;\n\n    // build dac3 box\n    var bsid = data[start + 5] >> 3;\n    var bsmod = data[start + 5] & 7;\n    var config = new Uint8Array([samplingRateCode << 6 | bsid << 1 | bsmod >> 2, (bsmod & 3) << 6 | channelMode << 3 | lfeon << 2 | frameSizeCode >> 4, frameSizeCode << 4 & 0xe0]);\n    var frameDuration = 1536 / sampleRate * 90000;\n    var stamp = pts + frameIndex * frameDuration;\n    var unit = data.subarray(start, start + frameLength);\n    track.config = config;\n    track.channelCount = channelCount;\n    track.samplerate = sampleRate;\n    track.samples.push({\n      unit: unit,\n      pts: stamp\n    });\n    return frameLength;\n  }\n\n  var MP3Demuxer = /*#__PURE__*/function (_BaseAudioDemuxer) {\n    function MP3Demuxer() {\n      return _BaseAudioDemuxer.apply(this, arguments) || this;\n    }\n    _inheritsLoose(MP3Demuxer, _BaseAudioDemuxer);\n    var _proto = MP3Demuxer.prototype;\n    _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {\n      _BaseAudioDemuxer.prototype.resetInitSegment.call(this, initSegment, audioCodec, videoCodec, trackDuration);\n      this._audioTrack = {\n        container: 'audio/mpeg',\n        type: 'audio',\n        id: 2,\n        pid: -1,\n        sequenceNumber: 0,\n        segmentCodec: 'mp3',\n        samples: [],\n        manifestCodec: audioCodec,\n        duration: trackDuration,\n        inputTimeScale: 90000,\n        dropped: 0\n      };\n    };\n    MP3Demuxer.probe = function probe$1(data) {\n      if (!data) {\n        return false;\n      }\n\n      // check if data contains ID3 timestamp and MPEG sync word\n      // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n      // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n      // More info http://www.mp3-tech.org/programmer/frame_header.html\n      var id3Data = getId3Data(data, 0);\n      var offset = (id3Data == null ? void 0 : id3Data.length) || 0;\n\n      // Check for ac-3|ec-3 sync bytes and return false if present\n      if (id3Data && data[offset] === 0x0b && data[offset + 1] === 0x77 && getId3Timestamp(id3Data) !== undefined &&\n      // check the bsid to confirm ac-3 or ec-3 (not mp3)\n      getAudioBSID(data, offset) <= 16) {\n        return false;\n      }\n      for (var length = data.length; offset < length; offset++) {\n        if (probe(data, offset)) {\n          logger.log('MPEG Audio sync word found !');\n          return true;\n        }\n      }\n      return false;\n    };\n    _proto.canParse = function canParse$1(data, offset) {\n      return canParse(data, offset);\n    };\n    _proto.appendFrame = function appendFrame$1(track, data, offset) {\n      if (this.basePTS === null) {\n        return;\n      }\n      return appendFrame(track, data, offset, this.basePTS, this.frameIndex);\n    };\n    return MP3Demuxer;\n  }(BaseAudioDemuxer);\n\n  var emsgSchemePattern = /\\/emsg[-/]ID3/i;\n  var MP4Demuxer = /*#__PURE__*/function () {\n    function MP4Demuxer(observer, config) {\n      this.remainderData = null;\n      this.timeOffset = 0;\n      this.config = void 0;\n      this.videoTrack = void 0;\n      this.audioTrack = void 0;\n      this.id3Track = void 0;\n      this.txtTrack = void 0;\n      this.config = config;\n    }\n    var _proto = MP4Demuxer.prototype;\n    _proto.resetTimeStamp = function resetTimeStamp() {};\n    _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {\n      var videoTrack = this.videoTrack = dummyTrack('video', 1);\n      var audioTrack = this.audioTrack = dummyTrack('audio', 1);\n      var captionTrack = this.txtTrack = dummyTrack('text', 1);\n      this.id3Track = dummyTrack('id3', 1);\n      this.timeOffset = 0;\n      if (!(initSegment != null && initSegment.byteLength)) {\n        return;\n      }\n      var initData = parseInitSegment(initSegment);\n      if (initData.video) {\n        var _initData$video = initData.video,\n          id = _initData$video.id,\n          timescale = _initData$video.timescale,\n          codec = _initData$video.codec,\n          supplemental = _initData$video.supplemental;\n        videoTrack.id = id;\n        videoTrack.timescale = captionTrack.timescale = timescale;\n        videoTrack.codec = codec;\n        videoTrack.supplemental = supplemental;\n      }\n      if (initData.audio) {\n        var _initData$audio = initData.audio,\n          _id = _initData$audio.id,\n          _timescale = _initData$audio.timescale,\n          _codec = _initData$audio.codec;\n        audioTrack.id = _id;\n        audioTrack.timescale = _timescale;\n        audioTrack.codec = _codec;\n      }\n      captionTrack.id = RemuxerTrackIdConfig.text;\n      videoTrack.sampleDuration = 0;\n      videoTrack.duration = audioTrack.duration = trackDuration;\n    };\n    _proto.resetContiguity = function resetContiguity() {\n      this.remainderData = null;\n    };\n    MP4Demuxer.probe = function probe(data) {\n      return hasMoofData(data);\n    };\n    _proto.demux = function demux(data, timeOffset) {\n      this.timeOffset = timeOffset;\n      // Load all data into the avc track. The CMAF remuxer will look for the data in the samples object; the rest of the fields do not matter\n      var videoSamples = data;\n      var videoTrack = this.videoTrack;\n      var textTrack = this.txtTrack;\n      if (this.config.progressive) {\n        // Split the bytestream into two ranges: one encompassing all data up until the start of the last moof, and everything else.\n        // This is done to guarantee that we're sending valid data to MSE - when demuxing progressively, we have no guarantee\n        // that the fetch loader gives us flush moof+mdat pairs. If we push jagged data to MSE, it will throw an exception.\n        if (this.remainderData) {\n          videoSamples = appendUint8Array(this.remainderData, data);\n        }\n        var segmentedData = segmentValidRange(videoSamples);\n        this.remainderData = segmentedData.remainder;\n        videoTrack.samples = segmentedData.valid || new Uint8Array();\n      } else {\n        videoTrack.samples = videoSamples;\n      }\n      var id3Track = this.extractID3Track(videoTrack, timeOffset);\n      textTrack.samples = parseSamples(timeOffset, videoTrack);\n      return {\n        videoTrack: videoTrack,\n        audioTrack: this.audioTrack,\n        id3Track: id3Track,\n        textTrack: this.txtTrack\n      };\n    };\n    _proto.flush = function flush() {\n      var timeOffset = this.timeOffset;\n      var videoTrack = this.videoTrack;\n      var textTrack = this.txtTrack;\n      videoTrack.samples = this.remainderData || new Uint8Array();\n      this.remainderData = null;\n      var id3Track = this.extractID3Track(videoTrack, this.timeOffset);\n      textTrack.samples = parseSamples(timeOffset, videoTrack);\n      return {\n        videoTrack: videoTrack,\n        audioTrack: dummyTrack(),\n        id3Track: id3Track,\n        textTrack: dummyTrack()\n      };\n    };\n    _proto.extractID3Track = function extractID3Track(videoTrack, timeOffset) {\n      var _this = this;\n      var id3Track = this.id3Track;\n      if (videoTrack.samples.length) {\n        var emsgs = findBox(videoTrack.samples, ['emsg']);\n        if (emsgs) {\n          emsgs.forEach(function (data) {\n            var emsgInfo = parseEmsg(data);\n            if (emsgSchemePattern.test(emsgInfo.schemeIdUri)) {\n              var pts = getEmsgStartTime(emsgInfo, timeOffset);\n              var duration = emsgInfo.eventDuration === 0xffffffff ? Number.POSITIVE_INFINITY : emsgInfo.eventDuration / emsgInfo.timeScale;\n              // Safari takes anything <= 0.001 seconds and maps it to Infinity\n              if (duration <= 0.001) {\n                duration = Number.POSITIVE_INFINITY;\n              }\n              var payload = emsgInfo.payload;\n              id3Track.samples.push({\n                data: payload,\n                len: payload.byteLength,\n                dts: pts,\n                pts: pts,\n                type: MetadataSchema.emsg,\n                duration: duration\n              });\n            } else if (_this.config.enableEmsgKLVMetadata && emsgInfo.schemeIdUri.startsWith('urn:misb:KLV:bin:1910.1')) {\n              var _pts = getEmsgStartTime(emsgInfo, timeOffset);\n              id3Track.samples.push({\n                data: emsgInfo.payload,\n                len: emsgInfo.payload.byteLength,\n                dts: _pts,\n                pts: _pts,\n                type: MetadataSchema.misbklv,\n                duration: Number.POSITIVE_INFINITY\n              });\n            }\n          });\n        }\n      }\n      return id3Track;\n    };\n    _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {\n      return Promise.reject(new Error('The MP4 demuxer does not support SAMPLE-AES decryption'));\n    };\n    _proto.destroy = function destroy() {\n      // @ts-ignore\n      this.config = null;\n      this.remainderData = null;\n      this.videoTrack = this.audioTrack = this.id3Track = this.txtTrack = undefined;\n    };\n    return MP4Demuxer;\n  }();\n  function getEmsgStartTime(emsgInfo, timeOffset) {\n    return isFiniteNumber(emsgInfo.presentationTime) ? emsgInfo.presentationTime / emsgInfo.timeScale : timeOffset + emsgInfo.presentationTimeDelta / emsgInfo.timeScale;\n  }\n\n  /**\n   * SAMPLE-AES decrypter\n   */\n\n  var SampleAesDecrypter = /*#__PURE__*/function () {\n    function SampleAesDecrypter(observer, config, keyData) {\n      this.keyData = void 0;\n      this.decrypter = void 0;\n      this.keyData = keyData;\n      this.decrypter = new Decrypter(config, {\n        removePKCS7Padding: false\n      });\n    }\n    var _proto = SampleAesDecrypter.prototype;\n    _proto.decryptBuffer = function decryptBuffer(encryptedData) {\n      return this.decrypter.decrypt(encryptedData, this.keyData.key.buffer, this.keyData.iv.buffer, DecrypterAesMode.cbc);\n    }\n\n    // AAC - encrypt all full 16 bytes blocks starting from offset 16\n    ;\n    _proto.decryptAacSample = function decryptAacSample(samples, sampleIndex, callback) {\n      var _this = this;\n      var curUnit = samples[sampleIndex].unit;\n      if (curUnit.length <= 16) {\n        // No encrypted portion in this sample (first 16 bytes is not\n        // encrypted, see https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/HLS_Sample_Encryption/Encryption/Encryption.html),\n        return;\n      }\n      var encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);\n      var encryptedBuffer = encryptedData.buffer.slice(encryptedData.byteOffset, encryptedData.byteOffset + encryptedData.length);\n      this.decryptBuffer(encryptedBuffer).then(function (decryptedBuffer) {\n        var decryptedData = new Uint8Array(decryptedBuffer);\n        curUnit.set(decryptedData, 16);\n        if (!_this.decrypter.isSync()) {\n          _this.decryptAacSamples(samples, sampleIndex + 1, callback);\n        }\n      });\n    };\n    _proto.decryptAacSamples = function decryptAacSamples(samples, sampleIndex, callback) {\n      for (;; sampleIndex++) {\n        if (sampleIndex >= samples.length) {\n          callback();\n          return;\n        }\n        if (samples[sampleIndex].unit.length < 32) {\n          continue;\n        }\n        this.decryptAacSample(samples, sampleIndex, callback);\n        if (!this.decrypter.isSync()) {\n          return;\n        }\n      }\n    }\n\n    // AVC - encrypt one 16 bytes block out of ten, starting from offset 32\n    ;\n    _proto.getAvcEncryptedData = function getAvcEncryptedData(decodedData) {\n      var encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;\n      var encryptedData = new Int8Array(encryptedDataLen);\n      var outputPos = 0;\n      for (var inputPos = 32; inputPos < decodedData.length - 16; inputPos += 160, outputPos += 16) {\n        encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);\n      }\n      return encryptedData;\n    };\n    _proto.getAvcDecryptedUnit = function getAvcDecryptedUnit(decodedData, decryptedData) {\n      var uint8DecryptedData = new Uint8Array(decryptedData);\n      var inputPos = 0;\n      for (var outputPos = 32; outputPos < decodedData.length - 16; outputPos += 160, inputPos += 16) {\n        decodedData.set(uint8DecryptedData.subarray(inputPos, inputPos + 16), outputPos);\n      }\n      return decodedData;\n    };\n    _proto.decryptAvcSample = function decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit) {\n      var _this2 = this;\n      var decodedData = discardEPB(curUnit.data);\n      var encryptedData = this.getAvcEncryptedData(decodedData);\n      this.decryptBuffer(encryptedData.buffer).then(function (decryptedBuffer) {\n        curUnit.data = _this2.getAvcDecryptedUnit(decodedData, decryptedBuffer);\n        if (!_this2.decrypter.isSync()) {\n          _this2.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);\n        }\n      });\n    };\n    _proto.decryptAvcSamples = function decryptAvcSamples(samples, sampleIndex, unitIndex, callback) {\n      if (samples instanceof Uint8Array) {\n        throw new Error('Cannot decrypt samples of type Uint8Array');\n      }\n      for (;; sampleIndex++, unitIndex = 0) {\n        if (sampleIndex >= samples.length) {\n          callback();\n          return;\n        }\n        var curUnits = samples[sampleIndex].units;\n        for (;; unitIndex++) {\n          if (unitIndex >= curUnits.length) {\n            break;\n          }\n          var curUnit = curUnits[unitIndex];\n          if (curUnit.data.length <= 48 || curUnit.type !== 1 && curUnit.type !== 5) {\n            continue;\n          }\n          this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit);\n          if (!this.decrypter.isSync()) {\n            return;\n          }\n        }\n      }\n    };\n    return SampleAesDecrypter;\n  }();\n\n  var BaseVideoParser = /*#__PURE__*/function () {\n    function BaseVideoParser() {\n      this.VideoSample = null;\n    }\n    var _proto = BaseVideoParser.prototype;\n    _proto.createVideoSample = function createVideoSample(key, pts, dts) {\n      return {\n        key: key,\n        frame: false,\n        pts: pts,\n        dts: dts,\n        units: [],\n        length: 0\n      };\n    };\n    _proto.getLastNalUnit = function getLastNalUnit(samples) {\n      var _VideoSample;\n      var VideoSample = this.VideoSample;\n      var lastUnit;\n      // try to fallback to previous sample if current one is empty\n      if (!VideoSample || VideoSample.units.length === 0) {\n        VideoSample = samples[samples.length - 1];\n      }\n      if ((_VideoSample = VideoSample) != null && _VideoSample.units) {\n        var units = VideoSample.units;\n        lastUnit = units[units.length - 1];\n      }\n      return lastUnit;\n    };\n    _proto.pushAccessUnit = function pushAccessUnit(VideoSample, videoTrack) {\n      if (VideoSample.units.length && VideoSample.frame) {\n        // if sample does not have PTS/DTS, patch with last sample PTS/DTS\n        if (VideoSample.pts === undefined) {\n          var samples = videoTrack.samples;\n          var nbSamples = samples.length;\n          if (nbSamples) {\n            var lastSample = samples[nbSamples - 1];\n            VideoSample.pts = lastSample.pts;\n            VideoSample.dts = lastSample.dts;\n          } else {\n            // dropping samples, no timestamp found\n            videoTrack.dropped++;\n            return;\n          }\n        }\n        videoTrack.samples.push(VideoSample);\n      }\n    };\n    _proto.parseNALu = function parseNALu(track, array, endOfSegment) {\n      var len = array.byteLength;\n      var state = track.naluState || 0;\n      var lastState = state;\n      var units = [];\n      var i = 0;\n      var value;\n      var overflow;\n      var unitType;\n      var lastUnitStart = -1;\n      var lastUnitType = 0;\n      // logger.log('PES:' + Hex.hexDump(array));\n\n      if (state === -1) {\n        // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet\n        lastUnitStart = 0;\n        // NALu type is value read from offset 0\n        lastUnitType = this.getNALuType(array, 0);\n        state = 0;\n        i = 1;\n      }\n      while (i < len) {\n        value = array[i++];\n        // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case\n        if (!state) {\n          state = value ? 0 : 1;\n          continue;\n        }\n        if (state === 1) {\n          state = value ? 0 : 2;\n          continue;\n        }\n        // here we have state either equal to 2 or 3\n        if (!value) {\n          state = 3;\n        } else if (value === 1) {\n          overflow = i - state - 1;\n          if (lastUnitStart >= 0) {\n            var unit = {\n              data: array.subarray(lastUnitStart, overflow),\n              type: lastUnitType\n            };\n            // logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);\n            units.push(unit);\n          } else {\n            // lastUnitStart is undefined => this is the first start code found in this PES packet\n            // first check if start code delimiter is overlapping between 2 PES packets,\n            // ie it started in last packet (lastState not zero)\n            // and ended at the beginning of this PES packet (i <= 4 - lastState)\n            var lastUnit = this.getLastNalUnit(track.samples);\n            if (lastUnit) {\n              if (lastState && i <= 4 - lastState) {\n                // start delimiter overlapping between PES packets\n                // strip start delimiter bytes from the end of last NAL unit\n                // check if lastUnit had a state different from zero\n                if (lastUnit.state) {\n                  // strip last bytes\n                  lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);\n                }\n              }\n              // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.\n\n              if (overflow > 0) {\n                // logger.log('first NALU found with overflow:' + overflow);\n                lastUnit.data = appendUint8Array(lastUnit.data, array.subarray(0, overflow));\n                lastUnit.state = 0;\n              }\n            }\n          }\n          // check if we can read unit type\n          if (i < len) {\n            unitType = this.getNALuType(array, i);\n            // logger.log('find NALU @ offset:' + i + ',type:' + unitType);\n            lastUnitStart = i;\n            lastUnitType = unitType;\n            state = 0;\n          } else {\n            // not enough byte to read unit type. let's read it on next PES parsing\n            state = -1;\n          }\n        } else {\n          state = 0;\n        }\n      }\n      if (lastUnitStart >= 0 && state >= 0) {\n        var _unit = {\n          data: array.subarray(lastUnitStart, len),\n          type: lastUnitType,\n          state: state\n        };\n        units.push(_unit);\n        // logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);\n      }\n      // no NALu found\n      if (units.length === 0) {\n        // append pes.data to previous NAL unit\n        var _lastUnit = this.getLastNalUnit(track.samples);\n        if (_lastUnit) {\n          _lastUnit.data = appendUint8Array(_lastUnit.data, array);\n        }\n      }\n      track.naluState = state;\n      return units;\n    };\n    return BaseVideoParser;\n  }();\n\n  /**\n   * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\n   */\n\n  var ExpGolomb = /*#__PURE__*/function () {\n    function ExpGolomb(data) {\n      this.data = void 0;\n      this.bytesAvailable = void 0;\n      this.word = void 0;\n      this.bitsAvailable = void 0;\n      this.data = data;\n      // the number of bytes left to examine in this.data\n      this.bytesAvailable = data.byteLength;\n      // the current word being examined\n      this.word = 0; // :uint\n      // the number of bits left to examine in the current word\n      this.bitsAvailable = 0; // :uint\n    }\n\n    // ():void\n    var _proto = ExpGolomb.prototype;\n    _proto.loadWord = function loadWord() {\n      var data = this.data;\n      var bytesAvailable = this.bytesAvailable;\n      var position = data.byteLength - bytesAvailable;\n      var workingBytes = new Uint8Array(4);\n      var availableBytes = Math.min(4, bytesAvailable);\n      if (availableBytes === 0) {\n        throw new Error('no bytes available');\n      }\n      workingBytes.set(data.subarray(position, position + availableBytes));\n      this.word = new DataView(workingBytes.buffer).getUint32(0);\n      // track the amount of this.data that has been processed\n      this.bitsAvailable = availableBytes * 8;\n      this.bytesAvailable -= availableBytes;\n    }\n\n    // (count:int):void\n    ;\n    _proto.skipBits = function skipBits(count) {\n      var skipBytes; // :int\n      count = Math.min(count, this.bytesAvailable * 8 + this.bitsAvailable);\n      if (this.bitsAvailable > count) {\n        this.word <<= count;\n        this.bitsAvailable -= count;\n      } else {\n        count -= this.bitsAvailable;\n        skipBytes = count >> 3;\n        count -= skipBytes << 3;\n        this.bytesAvailable -= skipBytes;\n        this.loadWord();\n        this.word <<= count;\n        this.bitsAvailable -= count;\n      }\n    }\n\n    // (size:int):uint\n    ;\n    _proto.readBits = function readBits(size) {\n      var bits = Math.min(this.bitsAvailable, size); // :uint\n      var valu = this.word >>> 32 - bits; // :uint\n      if (size > 32) {\n        logger.error('Cannot read more than 32 bits at a time');\n      }\n      this.bitsAvailable -= bits;\n      if (this.bitsAvailable > 0) {\n        this.word <<= bits;\n      } else if (this.bytesAvailable > 0) {\n        this.loadWord();\n      } else {\n        throw new Error('no bits available');\n      }\n      bits = size - bits;\n      if (bits > 0 && this.bitsAvailable) {\n        return valu << bits | this.readBits(bits);\n      } else {\n        return valu;\n      }\n    }\n\n    // ():uint\n    ;\n    _proto.skipLZ = function skipLZ() {\n      var leadingZeroCount; // :uint\n      for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {\n        if ((this.word & 0x80000000 >>> leadingZeroCount) !== 0) {\n          // the first bit of working word is 1\n          this.word <<= leadingZeroCount;\n          this.bitsAvailable -= leadingZeroCount;\n          return leadingZeroCount;\n        }\n      }\n      // we exhausted word and still have not found a 1\n      this.loadWord();\n      return leadingZeroCount + this.skipLZ();\n    }\n\n    // ():void\n    ;\n    _proto.skipUEG = function skipUEG() {\n      this.skipBits(1 + this.skipLZ());\n    }\n\n    // ():void\n    ;\n    _proto.skipEG = function skipEG() {\n      this.skipBits(1 + this.skipLZ());\n    }\n\n    // ():uint\n    ;\n    _proto.readUEG = function readUEG() {\n      var clz = this.skipLZ(); // :uint\n      return this.readBits(clz + 1) - 1;\n    }\n\n    // ():int\n    ;\n    _proto.readEG = function readEG() {\n      var valu = this.readUEG(); // :int\n      if (0x01 & valu) {\n        // the number is odd if the low order bit is set\n        return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n      } else {\n        return -1 * (valu >>> 1); // divide by two then make it negative\n      }\n    }\n\n    // Some convenience functions\n    // :Boolean\n    ;\n    _proto.readBoolean = function readBoolean() {\n      return this.readBits(1) === 1;\n    }\n\n    // ():int\n    ;\n    _proto.readUByte = function readUByte() {\n      return this.readBits(8);\n    }\n\n    // ():int\n    ;\n    _proto.readUShort = function readUShort() {\n      return this.readBits(16);\n    }\n\n    // ():int\n    ;\n    _proto.readUInt = function readUInt() {\n      return this.readBits(32);\n    };\n    return ExpGolomb;\n  }();\n\n  var AvcVideoParser = /*#__PURE__*/function (_BaseVideoParser) {\n    function AvcVideoParser() {\n      return _BaseVideoParser.apply(this, arguments) || this;\n    }\n    _inheritsLoose(AvcVideoParser, _BaseVideoParser);\n    var _proto = AvcVideoParser.prototype;\n    _proto.parsePES = function parsePES(track, textTrack, pes, endOfSegment) {\n      var _this = this;\n      var units = this.parseNALu(track, pes.data, endOfSegment);\n      var VideoSample = this.VideoSample;\n      var push;\n      var spsfound = false;\n      // free pes.data to save up some memory\n      pes.data = null;\n\n      // if new NAL units found and last sample still there, let's push ...\n      // this helps parsing streams with missing AUD (only do this if AUD never found)\n      if (VideoSample && units.length && !track.audFound) {\n        this.pushAccessUnit(VideoSample, track);\n        VideoSample = this.VideoSample = this.createVideoSample(false, pes.pts, pes.dts);\n      }\n      units.forEach(function (unit) {\n        var _VideoSample2, _VideoSample3;\n        switch (unit.type) {\n          // NDR\n          case 1:\n            {\n              var iskey = false;\n              push = true;\n              var data = unit.data;\n              // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)\n              if (spsfound && data.length > 4) {\n                // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR\n                var sliceType = _this.readSliceType(data);\n                // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice\n                // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.\n                // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.\n                // I slice: A slice that is not an SI slice that is decoded using intra prediction only.\n                // if (sliceType === 2 || sliceType === 7) {\n                if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {\n                  iskey = true;\n                }\n              }\n              if (iskey) {\n                var _VideoSample;\n                // if we have non-keyframe data already, that cannot belong to the same frame as a keyframe, so force a push\n                if ((_VideoSample = VideoSample) != null && _VideoSample.frame && !VideoSample.key) {\n                  _this.pushAccessUnit(VideoSample, track);\n                  VideoSample = _this.VideoSample = null;\n                }\n              }\n              if (!VideoSample) {\n                VideoSample = _this.VideoSample = _this.createVideoSample(true, pes.pts, pes.dts);\n              }\n              VideoSample.frame = true;\n              VideoSample.key = iskey;\n              break;\n              // IDR\n            }\n          case 5:\n            push = true;\n            // handle PES not starting with AUD\n            // if we have frame data already, that cannot belong to the same frame, so force a push\n            if ((_VideoSample2 = VideoSample) != null && _VideoSample2.frame && !VideoSample.key) {\n              _this.pushAccessUnit(VideoSample, track);\n              VideoSample = _this.VideoSample = null;\n            }\n            if (!VideoSample) {\n              VideoSample = _this.VideoSample = _this.createVideoSample(true, pes.pts, pes.dts);\n            }\n            VideoSample.key = true;\n            VideoSample.frame = true;\n            break;\n          // SEI\n          case 6:\n            {\n              push = true;\n              parseSEIMessageFromNALu(unit.data, 1, pes.pts, textTrack.samples);\n              break;\n              // SPS\n            }\n          case 7:\n            {\n              var _track$pixelRatio, _track$pixelRatio2;\n              push = true;\n              spsfound = true;\n              var sps = unit.data;\n              var config = _this.readSPS(sps);\n              if (!track.sps || track.width !== config.width || track.height !== config.height || ((_track$pixelRatio = track.pixelRatio) == null ? void 0 : _track$pixelRatio[0]) !== config.pixelRatio[0] || ((_track$pixelRatio2 = track.pixelRatio) == null ? void 0 : _track$pixelRatio2[1]) !== config.pixelRatio[1]) {\n                track.width = config.width;\n                track.height = config.height;\n                track.pixelRatio = config.pixelRatio;\n                track.sps = [sps];\n                var codecarray = sps.subarray(1, 4);\n                var codecstring = 'avc1.';\n                for (var i = 0; i < 3; i++) {\n                  var h = codecarray[i].toString(16);\n                  if (h.length < 2) {\n                    h = '0' + h;\n                  }\n                  codecstring += h;\n                }\n                track.codec = codecstring;\n              }\n              break;\n            }\n          // PPS\n          case 8:\n            push = true;\n            track.pps = [unit.data];\n            break;\n          // AUD\n          case 9:\n            push = true;\n            track.audFound = true;\n            if ((_VideoSample3 = VideoSample) != null && _VideoSample3.frame) {\n              _this.pushAccessUnit(VideoSample, track);\n              VideoSample = null;\n            }\n            if (!VideoSample) {\n              VideoSample = _this.VideoSample = _this.createVideoSample(false, pes.pts, pes.dts);\n            }\n            break;\n          // Filler Data\n          case 12:\n            push = true;\n            break;\n          default:\n            push = false;\n            break;\n        }\n        if (VideoSample && push) {\n          var _units = VideoSample.units;\n          _units.push(unit);\n        }\n      });\n      // if last PES packet, push samples\n      if (endOfSegment && VideoSample) {\n        this.pushAccessUnit(VideoSample, track);\n        this.VideoSample = null;\n      }\n    };\n    _proto.getNALuType = function getNALuType(data, offset) {\n      return data[offset] & 0x1f;\n    };\n    _proto.readSliceType = function readSliceType(data) {\n      var eg = new ExpGolomb(data);\n      // skip NALu type\n      eg.readUByte();\n      // discard first_mb_in_slice\n      eg.readUEG();\n      // return slice_type\n      return eg.readUEG();\n    }\n\n    /**\n     * The scaling list is optionally transmitted as part of a sequence parameter\n     * set and is not relevant to transmuxing.\n     * @param count the number of entries in this scaling list\n     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n     */;\n    _proto.skipScalingList = function skipScalingList(count, reader) {\n      var lastScale = 8;\n      var nextScale = 8;\n      var deltaScale;\n      for (var j = 0; j < count; j++) {\n        if (nextScale !== 0) {\n          deltaScale = reader.readEG();\n          nextScale = (lastScale + deltaScale + 256) % 256;\n        }\n        lastScale = nextScale === 0 ? lastScale : nextScale;\n      }\n    }\n\n    /**\n     * Read a sequence parameter set and return some interesting video\n     * properties. A sequence parameter set is the H264 metadata that\n     * describes the properties of upcoming video frames.\n     * @returns an object with configuration parsed from the\n     * sequence parameter set, including the dimensions of the\n     * associated video frames.\n     */;\n    _proto.readSPS = function readSPS(sps) {\n      var eg = new ExpGolomb(sps);\n      var frameCropLeftOffset = 0;\n      var frameCropRightOffset = 0;\n      var frameCropTopOffset = 0;\n      var frameCropBottomOffset = 0;\n      var numRefFramesInPicOrderCntCycle;\n      var scalingListCount;\n      var i;\n      var readUByte = eg.readUByte.bind(eg);\n      var readBits = eg.readBits.bind(eg);\n      var readUEG = eg.readUEG.bind(eg);\n      var readBoolean = eg.readBoolean.bind(eg);\n      var skipBits = eg.skipBits.bind(eg);\n      var skipEG = eg.skipEG.bind(eg);\n      var skipUEG = eg.skipUEG.bind(eg);\n      var skipScalingList = this.skipScalingList.bind(this);\n      readUByte();\n      var profileIdc = readUByte(); // profile_idc\n      readBits(5); // profileCompat constraint_set[0-4]_flag, u(5)\n      skipBits(3); // reserved_zero_3bits u(3),\n      readUByte(); // level_idc u(8)\n      skipUEG(); // seq_parameter_set_id\n      // some profiles have more optional data we don't need\n      if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {\n        var chromaFormatIdc = readUEG();\n        if (chromaFormatIdc === 3) {\n          skipBits(1);\n        } // separate_colour_plane_flag\n\n        skipUEG(); // bit_depth_luma_minus8\n        skipUEG(); // bit_depth_chroma_minus8\n        skipBits(1); // qpprime_y_zero_transform_bypass_flag\n        if (readBoolean()) {\n          // seq_scaling_matrix_present_flag\n          scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n          for (i = 0; i < scalingListCount; i++) {\n            if (readBoolean()) {\n              // seq_scaling_list_present_flag[ i ]\n              if (i < 6) {\n                skipScalingList(16, eg);\n              } else {\n                skipScalingList(64, eg);\n              }\n            }\n          }\n        }\n      }\n      skipUEG(); // log2_max_frame_num_minus4\n      var picOrderCntType = readUEG();\n      if (picOrderCntType === 0) {\n        readUEG(); // log2_max_pic_order_cnt_lsb_minus4\n      } else if (picOrderCntType === 1) {\n        skipBits(1); // delta_pic_order_always_zero_flag\n        skipEG(); // offset_for_non_ref_pic\n        skipEG(); // offset_for_top_to_bottom_field\n        numRefFramesInPicOrderCntCycle = readUEG();\n        for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n          skipEG();\n        } // offset_for_ref_frame[ i ]\n      }\n      skipUEG(); // max_num_ref_frames\n      skipBits(1); // gaps_in_frame_num_value_allowed_flag\n      var picWidthInMbsMinus1 = readUEG();\n      var picHeightInMapUnitsMinus1 = readUEG();\n      var frameMbsOnlyFlag = readBits(1);\n      if (frameMbsOnlyFlag === 0) {\n        skipBits(1);\n      } // mb_adaptive_frame_field_flag\n\n      skipBits(1); // direct_8x8_inference_flag\n      if (readBoolean()) {\n        // frame_cropping_flag\n        frameCropLeftOffset = readUEG();\n        frameCropRightOffset = readUEG();\n        frameCropTopOffset = readUEG();\n        frameCropBottomOffset = readUEG();\n      }\n      var pixelRatio = [1, 1];\n      if (readBoolean()) {\n        // vui_parameters_present_flag\n        if (readBoolean()) {\n          // aspect_ratio_info_present_flag\n          var aspectRatioIdc = readUByte();\n          switch (aspectRatioIdc) {\n            case 1:\n              pixelRatio = [1, 1];\n              break;\n            case 2:\n              pixelRatio = [12, 11];\n              break;\n            case 3:\n              pixelRatio = [10, 11];\n              break;\n            case 4:\n              pixelRatio = [16, 11];\n              break;\n            case 5:\n              pixelRatio = [40, 33];\n              break;\n            case 6:\n              pixelRatio = [24, 11];\n              break;\n            case 7:\n              pixelRatio = [20, 11];\n              break;\n            case 8:\n              pixelRatio = [32, 11];\n              break;\n            case 9:\n              pixelRatio = [80, 33];\n              break;\n            case 10:\n              pixelRatio = [18, 11];\n              break;\n            case 11:\n              pixelRatio = [15, 11];\n              break;\n            case 12:\n              pixelRatio = [64, 33];\n              break;\n            case 13:\n              pixelRatio = [160, 99];\n              break;\n            case 14:\n              pixelRatio = [4, 3];\n              break;\n            case 15:\n              pixelRatio = [3, 2];\n              break;\n            case 16:\n              pixelRatio = [2, 1];\n              break;\n            case 255:\n              {\n                pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];\n                break;\n              }\n          }\n        }\n      }\n      return {\n        width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2),\n        height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),\n        pixelRatio: pixelRatio\n      };\n    };\n    return AvcVideoParser;\n  }(BaseVideoParser);\n\n  var HevcVideoParser = /*#__PURE__*/function (_BaseVideoParser) {\n    function HevcVideoParser() {\n      var _this;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _BaseVideoParser.call.apply(_BaseVideoParser, [this].concat(args)) || this;\n      _this.initVPS = null;\n      return _this;\n    }\n    _inheritsLoose(HevcVideoParser, _BaseVideoParser);\n    var _proto = HevcVideoParser.prototype;\n    _proto.parsePES = function parsePES(track, textTrack, pes, endOfSegment) {\n      var _this2 = this;\n      var units = this.parseNALu(track, pes.data, endOfSegment);\n      var VideoSample = this.VideoSample;\n      var push;\n      var spsfound = false;\n      // free pes.data to save up some memory\n      pes.data = null;\n\n      // if new NAL units found and last sample still there, let's push ...\n      // this helps parsing streams with missing AUD (only do this if AUD never found)\n      if (VideoSample && units.length && !track.audFound) {\n        this.pushAccessUnit(VideoSample, track);\n        VideoSample = this.VideoSample = this.createVideoSample(false, pes.pts, pes.dts);\n      }\n      units.forEach(function (unit) {\n        var _VideoSample2, _VideoSample3;\n        switch (unit.type) {\n          // NON-IDR, NON RANDOM ACCESS SLICE\n          case 0:\n          case 1:\n          case 2:\n          case 3:\n          case 4:\n          case 5:\n          case 6:\n          case 7:\n          case 8:\n          case 9:\n            if (!VideoSample) {\n              VideoSample = _this2.VideoSample = _this2.createVideoSample(false, pes.pts, pes.dts);\n            }\n            VideoSample.frame = true;\n            push = true;\n            break;\n\n          // CRA, BLA (random access picture)\n          case 16:\n          case 17:\n          case 18:\n          case 21:\n            push = true;\n            if (spsfound) {\n              var _VideoSample;\n              // handle PES not starting with AUD\n              // if we have frame data already, that cannot belong to the same frame, so force a push\n              if ((_VideoSample = VideoSample) != null && _VideoSample.frame && !VideoSample.key) {\n                _this2.pushAccessUnit(VideoSample, track);\n                VideoSample = _this2.VideoSample = null;\n              }\n            }\n            if (!VideoSample) {\n              VideoSample = _this2.VideoSample = _this2.createVideoSample(true, pes.pts, pes.dts);\n            }\n            VideoSample.key = true;\n            VideoSample.frame = true;\n            break;\n\n          // IDR\n          case 19:\n          case 20:\n            push = true;\n            // handle PES not starting with AUD\n            // if we have frame data already, that cannot belong to the same frame, so force a push\n            if ((_VideoSample2 = VideoSample) != null && _VideoSample2.frame && !VideoSample.key) {\n              _this2.pushAccessUnit(VideoSample, track);\n              VideoSample = _this2.VideoSample = null;\n            }\n            if (!VideoSample) {\n              VideoSample = _this2.VideoSample = _this2.createVideoSample(true, pes.pts, pes.dts);\n            }\n            VideoSample.key = true;\n            VideoSample.frame = true;\n            break;\n\n          // SEI\n          case 39:\n            push = true;\n            parseSEIMessageFromNALu(unit.data, 2,\n            // NALu header size\n            pes.pts, textTrack.samples);\n            break;\n\n          // VPS\n          case 32:\n            push = true;\n            if (!track.vps) {\n              if (typeof track.params !== 'object') {\n                track.params = {};\n              }\n              track.params = _extends(track.params, _this2.readVPS(unit.data));\n              _this2.initVPS = unit.data;\n            }\n            track.vps = [unit.data];\n            break;\n\n          // SPS\n          case 33:\n            push = true;\n            spsfound = true;\n            if (track.vps !== undefined && track.vps[0] !== _this2.initVPS && track.sps !== undefined && !_this2.matchSPS(track.sps[0], unit.data)) {\n              _this2.initVPS = track.vps[0];\n              track.sps = track.pps = undefined;\n            }\n            if (!track.sps) {\n              var config = _this2.readSPS(unit.data);\n              track.width = config.width;\n              track.height = config.height;\n              track.pixelRatio = config.pixelRatio;\n              track.codec = config.codecString;\n              track.sps = [];\n              if (typeof track.params !== 'object') {\n                track.params = {};\n              }\n              for (var prop in config.params) {\n                track.params[prop] = config.params[prop];\n              }\n            }\n            _this2.pushParameterSet(track.sps, unit.data, track.vps);\n            if (!VideoSample) {\n              VideoSample = _this2.VideoSample = _this2.createVideoSample(true, pes.pts, pes.dts);\n            }\n            VideoSample.key = true;\n            break;\n\n          // PPS\n          case 34:\n            push = true;\n            if (typeof track.params === 'object') {\n              if (!track.pps) {\n                track.pps = [];\n                var _config = _this2.readPPS(unit.data);\n                for (var _prop in _config) {\n                  track.params[_prop] = _config[_prop];\n                }\n              }\n              _this2.pushParameterSet(track.pps, unit.data, track.vps);\n            }\n            break;\n\n          // ACCESS UNIT DELIMITER\n          case 35:\n            push = true;\n            track.audFound = true;\n            if ((_VideoSample3 = VideoSample) != null && _VideoSample3.frame) {\n              _this2.pushAccessUnit(VideoSample, track);\n              VideoSample = null;\n            }\n            if (!VideoSample) {\n              VideoSample = _this2.VideoSample = _this2.createVideoSample(false, pes.pts, pes.dts);\n            }\n            break;\n          default:\n            push = false;\n            break;\n        }\n        if (VideoSample && push) {\n          var _units = VideoSample.units;\n          _units.push(unit);\n        }\n      });\n      // if last PES packet, push samples\n      if (endOfSegment && VideoSample) {\n        this.pushAccessUnit(VideoSample, track);\n        this.VideoSample = null;\n      }\n    };\n    _proto.pushParameterSet = function pushParameterSet(parameterSets, data, vps) {\n      if (vps && vps[0] === this.initVPS || !vps && !parameterSets.length) {\n        parameterSets.push(data);\n      }\n    };\n    _proto.getNALuType = function getNALuType(data, offset) {\n      return (data[offset] & 0x7e) >>> 1;\n    };\n    _proto.ebsp2rbsp = function ebsp2rbsp(arr) {\n      var dst = new Uint8Array(arr.byteLength);\n      var dstIdx = 0;\n      for (var i = 0; i < arr.byteLength; i++) {\n        if (i >= 2) {\n          // Unescape: Skip 0x03 after 00 00\n          if (arr[i] === 0x03 && arr[i - 1] === 0x00 && arr[i - 2] === 0x00) {\n            continue;\n          }\n        }\n        dst[dstIdx] = arr[i];\n        dstIdx++;\n      }\n      return new Uint8Array(dst.buffer, 0, dstIdx);\n    };\n    _proto.pushAccessUnit = function pushAccessUnit(VideoSample, videoTrack) {\n      _BaseVideoParser.prototype.pushAccessUnit.call(this, VideoSample, videoTrack);\n      if (this.initVPS) {\n        this.initVPS = null; // null initVPS to prevent possible track's sps/pps growth until next VPS\n      }\n    };\n    _proto.readVPS = function readVPS(vps) {\n      var eg = new ExpGolomb(vps);\n      // remove header\n      eg.readUByte();\n      eg.readUByte();\n      eg.readBits(4); // video_parameter_set_id\n      eg.skipBits(2);\n      eg.readBits(6); // max_layers_minus1\n      var max_sub_layers_minus1 = eg.readBits(3);\n      var temporal_id_nesting_flag = eg.readBoolean();\n      // ...vui fps can be here, but empty fps value is not critical for metadata\n\n      return {\n        numTemporalLayers: max_sub_layers_minus1 + 1,\n        temporalIdNested: temporal_id_nesting_flag\n      };\n    };\n    _proto.readSPS = function readSPS(sps) {\n      var eg = new ExpGolomb(this.ebsp2rbsp(sps));\n      eg.readUByte();\n      eg.readUByte();\n      eg.readBits(4); //video_parameter_set_id\n      var max_sub_layers_minus1 = eg.readBits(3);\n      eg.readBoolean(); // temporal_id_nesting_flag\n\n      // profile_tier_level\n      var general_profile_space = eg.readBits(2);\n      var general_tier_flag = eg.readBoolean();\n      var general_profile_idc = eg.readBits(5);\n      var general_profile_compatibility_flags_1 = eg.readUByte();\n      var general_profile_compatibility_flags_2 = eg.readUByte();\n      var general_profile_compatibility_flags_3 = eg.readUByte();\n      var general_profile_compatibility_flags_4 = eg.readUByte();\n      var general_constraint_indicator_flags_1 = eg.readUByte();\n      var general_constraint_indicator_flags_2 = eg.readUByte();\n      var general_constraint_indicator_flags_3 = eg.readUByte();\n      var general_constraint_indicator_flags_4 = eg.readUByte();\n      var general_constraint_indicator_flags_5 = eg.readUByte();\n      var general_constraint_indicator_flags_6 = eg.readUByte();\n      var general_level_idc = eg.readUByte();\n      var sub_layer_profile_present_flags = [];\n      var sub_layer_level_present_flags = [];\n      for (var i = 0; i < max_sub_layers_minus1; i++) {\n        sub_layer_profile_present_flags.push(eg.readBoolean());\n        sub_layer_level_present_flags.push(eg.readBoolean());\n      }\n      if (max_sub_layers_minus1 > 0) {\n        for (var _i = max_sub_layers_minus1; _i < 8; _i++) {\n          eg.readBits(2);\n        }\n      }\n      for (var _i2 = 0; _i2 < max_sub_layers_minus1; _i2++) {\n        if (sub_layer_profile_present_flags[_i2]) {\n          eg.readUByte(); // sub_layer_profile_space, sub_layer_tier_flag, sub_layer_profile_idc\n          eg.readUByte();\n          eg.readUByte();\n          eg.readUByte();\n          eg.readUByte(); // sub_layer_profile_compatibility_flag\n          eg.readUByte();\n          eg.readUByte();\n          eg.readUByte();\n          eg.readUByte();\n          eg.readUByte();\n          eg.readUByte();\n        }\n        if (sub_layer_level_present_flags[_i2]) {\n          eg.readUByte();\n        }\n      }\n      eg.readUEG(); // seq_parameter_set_id\n      var chroma_format_idc = eg.readUEG();\n      if (chroma_format_idc == 3) {\n        eg.skipBits(1); //separate_colour_plane_flag\n      }\n      var pic_width_in_luma_samples = eg.readUEG();\n      var pic_height_in_luma_samples = eg.readUEG();\n      var conformance_window_flag = eg.readBoolean();\n      var pic_left_offset = 0,\n        pic_right_offset = 0,\n        pic_top_offset = 0,\n        pic_bottom_offset = 0;\n      if (conformance_window_flag) {\n        pic_left_offset += eg.readUEG();\n        pic_right_offset += eg.readUEG();\n        pic_top_offset += eg.readUEG();\n        pic_bottom_offset += eg.readUEG();\n      }\n      var bit_depth_luma_minus8 = eg.readUEG();\n      var bit_depth_chroma_minus8 = eg.readUEG();\n      var log2_max_pic_order_cnt_lsb_minus4 = eg.readUEG();\n      var sub_layer_ordering_info_present_flag = eg.readBoolean();\n      for (var _i3 = sub_layer_ordering_info_present_flag ? 0 : max_sub_layers_minus1; _i3 <= max_sub_layers_minus1; _i3++) {\n        eg.skipUEG(); // max_dec_pic_buffering_minus1[i]\n        eg.skipUEG(); // max_num_reorder_pics[i]\n        eg.skipUEG(); // max_latency_increase_plus1[i]\n      }\n      eg.skipUEG(); // log2_min_luma_coding_block_size_minus3\n      eg.skipUEG(); // log2_diff_max_min_luma_coding_block_size\n      eg.skipUEG(); // log2_min_transform_block_size_minus2\n      eg.skipUEG(); // log2_diff_max_min_transform_block_size\n      eg.skipUEG(); // max_transform_hierarchy_depth_inter\n      eg.skipUEG(); // max_transform_hierarchy_depth_intra\n      var scaling_list_enabled_flag = eg.readBoolean();\n      if (scaling_list_enabled_flag) {\n        var sps_scaling_list_data_present_flag = eg.readBoolean();\n        if (sps_scaling_list_data_present_flag) {\n          for (var sizeId = 0; sizeId < 4; sizeId++) {\n            for (var matrixId = 0; matrixId < (sizeId === 3 ? 2 : 6); matrixId++) {\n              var scaling_list_pred_mode_flag = eg.readBoolean();\n              if (!scaling_list_pred_mode_flag) {\n                eg.readUEG(); // scaling_list_pred_matrix_id_delta\n              } else {\n                var coefNum = Math.min(64, 1 << 4 + (sizeId << 1));\n                if (sizeId > 1) {\n                  eg.readEG();\n                }\n                for (var _i4 = 0; _i4 < coefNum; _i4++) {\n                  eg.readEG();\n                }\n              }\n            }\n          }\n        }\n      }\n      eg.readBoolean(); // amp_enabled_flag\n      eg.readBoolean(); // sample_adaptive_offset_enabled_flag\n      var pcm_enabled_flag = eg.readBoolean();\n      if (pcm_enabled_flag) {\n        eg.readUByte();\n        eg.skipUEG();\n        eg.skipUEG();\n        eg.readBoolean();\n      }\n      var num_short_term_ref_pic_sets = eg.readUEG();\n      var num_delta_pocs = 0;\n      for (var _i5 = 0; _i5 < num_short_term_ref_pic_sets; _i5++) {\n        var inter_ref_pic_set_prediction_flag = false;\n        if (_i5 !== 0) {\n          inter_ref_pic_set_prediction_flag = eg.readBoolean();\n        }\n        if (inter_ref_pic_set_prediction_flag) {\n          if (_i5 === num_short_term_ref_pic_sets) {\n            eg.readUEG();\n          }\n          eg.readBoolean();\n          eg.readUEG();\n          var next_num_delta_pocs = 0;\n          for (var j = 0; j <= num_delta_pocs; j++) {\n            var used_by_curr_pic_flag = eg.readBoolean();\n            var use_delta_flag = false;\n            if (!used_by_curr_pic_flag) {\n              use_delta_flag = eg.readBoolean();\n            }\n            if (used_by_curr_pic_flag || use_delta_flag) {\n              next_num_delta_pocs++;\n            }\n          }\n          num_delta_pocs = next_num_delta_pocs;\n        } else {\n          var num_negative_pics = eg.readUEG();\n          var num_positive_pics = eg.readUEG();\n          num_delta_pocs = num_negative_pics + num_positive_pics;\n          for (var _j = 0; _j < num_negative_pics; _j++) {\n            eg.readUEG();\n            eg.readBoolean();\n          }\n          for (var _j2 = 0; _j2 < num_positive_pics; _j2++) {\n            eg.readUEG();\n            eg.readBoolean();\n          }\n        }\n      }\n      var long_term_ref_pics_present_flag = eg.readBoolean();\n      if (long_term_ref_pics_present_flag) {\n        var num_long_term_ref_pics_sps = eg.readUEG();\n        for (var _i6 = 0; _i6 < num_long_term_ref_pics_sps; _i6++) {\n          for (var _j3 = 0; _j3 < log2_max_pic_order_cnt_lsb_minus4 + 4; _j3++) {\n            eg.readBits(1);\n          }\n          eg.readBits(1);\n        }\n      }\n      var min_spatial_segmentation_idc = 0;\n      var sar_width = 1,\n        sar_height = 1;\n      var fps_fixed = true,\n        fps_den = 1,\n        fps_num = 0;\n      eg.readBoolean(); // sps_temporal_mvp_enabled_flag\n      eg.readBoolean(); // strong_intra_smoothing_enabled_flag\n      var default_display_window_flag = false;\n      var vui_parameters_present_flag = eg.readBoolean();\n      if (vui_parameters_present_flag) {\n        var aspect_ratio_info_present_flag = eg.readBoolean();\n        if (aspect_ratio_info_present_flag) {\n          var aspect_ratio_idc = eg.readUByte();\n          var sar_width_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\n          var sar_height_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];\n          if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n            sar_width = sar_width_table[aspect_ratio_idc - 1];\n            sar_height = sar_height_table[aspect_ratio_idc - 1];\n          } else if (aspect_ratio_idc === 255) {\n            sar_width = eg.readBits(16);\n            sar_height = eg.readBits(16);\n          }\n        }\n        var overscan_info_present_flag = eg.readBoolean();\n        if (overscan_info_present_flag) {\n          eg.readBoolean();\n        }\n        var video_signal_type_present_flag = eg.readBoolean();\n        if (video_signal_type_present_flag) {\n          eg.readBits(3);\n          eg.readBoolean();\n          var colour_description_present_flag = eg.readBoolean();\n          if (colour_description_present_flag) {\n            eg.readUByte();\n            eg.readUByte();\n            eg.readUByte();\n          }\n        }\n        var chroma_loc_info_present_flag = eg.readBoolean();\n        if (chroma_loc_info_present_flag) {\n          eg.readUEG();\n          eg.readUEG();\n        }\n        eg.readBoolean(); // neutral_chroma_indication_flag\n        eg.readBoolean(); // field_seq_flag\n        eg.readBoolean(); // frame_field_info_present_flag\n        default_display_window_flag = eg.readBoolean();\n        if (default_display_window_flag) {\n          pic_left_offset += eg.readUEG();\n          pic_right_offset += eg.readUEG();\n          pic_top_offset += eg.readUEG();\n          pic_bottom_offset += eg.readUEG();\n        }\n        var vui_timing_info_present_flag = eg.readBoolean();\n        if (vui_timing_info_present_flag) {\n          fps_den = eg.readBits(32);\n          fps_num = eg.readBits(32);\n          var vui_poc_proportional_to_timing_flag = eg.readBoolean();\n          if (vui_poc_proportional_to_timing_flag) {\n            eg.readUEG();\n          }\n          var vui_hrd_parameters_present_flag = eg.readBoolean();\n          if (vui_hrd_parameters_present_flag) {\n            //const commonInfPresentFlag = true;\n            //if (commonInfPresentFlag) {\n            var nal_hrd_parameters_present_flag = eg.readBoolean();\n            var vcl_hrd_parameters_present_flag = eg.readBoolean();\n            var sub_pic_hrd_params_present_flag = false;\n            if (nal_hrd_parameters_present_flag || vcl_hrd_parameters_present_flag) {\n              sub_pic_hrd_params_present_flag = eg.readBoolean();\n              if (sub_pic_hrd_params_present_flag) {\n                eg.readUByte();\n                eg.readBits(5);\n                eg.readBoolean();\n                eg.readBits(5);\n              }\n              eg.readBits(4); // bit_rate_scale\n              eg.readBits(4); // cpb_size_scale\n              if (sub_pic_hrd_params_present_flag) {\n                eg.readBits(4);\n              }\n              eg.readBits(5);\n              eg.readBits(5);\n              eg.readBits(5);\n            }\n            //}\n            for (var _i7 = 0; _i7 <= max_sub_layers_minus1; _i7++) {\n              fps_fixed = eg.readBoolean(); // fixed_pic_rate_general_flag\n              var fixed_pic_rate_within_cvs_flag = fps_fixed || eg.readBoolean();\n              var low_delay_hrd_flag = false;\n              if (fixed_pic_rate_within_cvs_flag) {\n                eg.readEG();\n              } else {\n                low_delay_hrd_flag = eg.readBoolean();\n              }\n              var cpb_cnt = low_delay_hrd_flag ? 1 : eg.readUEG() + 1;\n              if (nal_hrd_parameters_present_flag) {\n                for (var _j4 = 0; _j4 < cpb_cnt; _j4++) {\n                  eg.readUEG();\n                  eg.readUEG();\n                  if (sub_pic_hrd_params_present_flag) {\n                    eg.readUEG();\n                    eg.readUEG();\n                  }\n                  eg.skipBits(1);\n                }\n              }\n              if (vcl_hrd_parameters_present_flag) {\n                for (var _j5 = 0; _j5 < cpb_cnt; _j5++) {\n                  eg.readUEG();\n                  eg.readUEG();\n                  if (sub_pic_hrd_params_present_flag) {\n                    eg.readUEG();\n                    eg.readUEG();\n                  }\n                  eg.skipBits(1);\n                }\n              }\n            }\n          }\n        }\n        var bitstream_restriction_flag = eg.readBoolean();\n        if (bitstream_restriction_flag) {\n          eg.readBoolean(); // tiles_fixed_structure_flag\n          eg.readBoolean(); // motion_vectors_over_pic_boundaries_flag\n          eg.readBoolean(); // restricted_ref_pic_lists_flag\n          min_spatial_segmentation_idc = eg.readUEG();\n        }\n      }\n      var width = pic_width_in_luma_samples,\n        height = pic_height_in_luma_samples;\n      if (conformance_window_flag || default_display_window_flag) {\n        var chroma_scale_w = 1,\n          chroma_scale_h = 1;\n        if (chroma_format_idc === 1) {\n          // YUV 420\n          chroma_scale_w = chroma_scale_h = 2;\n        } else if (chroma_format_idc == 2) {\n          // YUV 422\n          chroma_scale_w = 2;\n        }\n        width = pic_width_in_luma_samples - chroma_scale_w * pic_right_offset - chroma_scale_w * pic_left_offset;\n        height = pic_height_in_luma_samples - chroma_scale_h * pic_bottom_offset - chroma_scale_h * pic_top_offset;\n      }\n      var profile_space_string = general_profile_space ? ['A', 'B', 'C'][general_profile_space] : '';\n      var profile_compatibility_buf = general_profile_compatibility_flags_1 << 24 | general_profile_compatibility_flags_2 << 16 | general_profile_compatibility_flags_3 << 8 | general_profile_compatibility_flags_4;\n      var profile_compatibility_rev = 0;\n      for (var _i8 = 0; _i8 < 32; _i8++) {\n        profile_compatibility_rev = (profile_compatibility_rev | (profile_compatibility_buf >> _i8 & 1) << 31 - _i8) >>> 0; // reverse bit position (and cast as UInt32)\n      }\n      var profile_compatibility_flags_string = profile_compatibility_rev.toString(16);\n      if (general_profile_idc === 1 && profile_compatibility_flags_string === '2') {\n        profile_compatibility_flags_string = '6';\n      }\n      var tier_flag_string = general_tier_flag ? 'H' : 'L';\n      return {\n        codecString: \"hvc1.\" + profile_space_string + general_profile_idc + \".\" + profile_compatibility_flags_string + \".\" + tier_flag_string + general_level_idc + \".B0\",\n        params: {\n          general_tier_flag: general_tier_flag,\n          general_profile_idc: general_profile_idc,\n          general_profile_space: general_profile_space,\n          general_profile_compatibility_flags: [general_profile_compatibility_flags_1, general_profile_compatibility_flags_2, general_profile_compatibility_flags_3, general_profile_compatibility_flags_4],\n          general_constraint_indicator_flags: [general_constraint_indicator_flags_1, general_constraint_indicator_flags_2, general_constraint_indicator_flags_3, general_constraint_indicator_flags_4, general_constraint_indicator_flags_5, general_constraint_indicator_flags_6],\n          general_level_idc: general_level_idc,\n          bit_depth: bit_depth_luma_minus8 + 8,\n          bit_depth_luma_minus8: bit_depth_luma_minus8,\n          bit_depth_chroma_minus8: bit_depth_chroma_minus8,\n          min_spatial_segmentation_idc: min_spatial_segmentation_idc,\n          chroma_format_idc: chroma_format_idc,\n          frame_rate: {\n            fixed: fps_fixed,\n            fps: fps_num / fps_den\n          }\n        },\n        width: width,\n        height: height,\n        pixelRatio: [sar_width, sar_height]\n      };\n    };\n    _proto.readPPS = function readPPS(pps) {\n      var eg = new ExpGolomb(this.ebsp2rbsp(pps));\n      eg.readUByte();\n      eg.readUByte();\n      eg.skipUEG(); // pic_parameter_set_id\n      eg.skipUEG(); // seq_parameter_set_id\n      eg.skipBits(2); // dependent_slice_segments_enabled_flag, output_flag_present_flag\n      eg.skipBits(3); // num_extra_slice_header_bits\n      eg.skipBits(2); // sign_data_hiding_enabled_flag, cabac_init_present_flag\n      eg.skipUEG();\n      eg.skipUEG();\n      eg.skipEG(); // init_qp_minus26\n      eg.skipBits(2); // constrained_intra_pred_flag, transform_skip_enabled_flag\n      var cu_qp_delta_enabled_flag = eg.readBoolean();\n      if (cu_qp_delta_enabled_flag) {\n        eg.skipUEG();\n      }\n      eg.skipEG(); // cb_qp_offset\n      eg.skipEG(); // cr_qp_offset\n      eg.skipBits(4); // pps_slice_chroma_qp_offsets_present_flag, weighted_pred_flag, weighted_bipred_flag, transquant_bypass_enabled_flag\n      var tiles_enabled_flag = eg.readBoolean();\n      var entropy_coding_sync_enabled_flag = eg.readBoolean();\n      var parallelismType = 1; // slice-based parallel decoding\n      if (entropy_coding_sync_enabled_flag && tiles_enabled_flag) {\n        parallelismType = 0; // mixed-type parallel decoding\n      } else if (entropy_coding_sync_enabled_flag) {\n        parallelismType = 3; // wavefront-based parallel decoding\n      } else if (tiles_enabled_flag) {\n        parallelismType = 2; // tile-based parallel decoding\n      }\n      return {\n        parallelismType: parallelismType\n      };\n    };\n    _proto.matchSPS = function matchSPS(sps1, sps2) {\n      // compare without headers and VPS related params\n      return String.fromCharCode.apply(null, sps1).substr(3) === String.fromCharCode.apply(null, sps2).substr(3);\n    };\n    return HevcVideoParser;\n  }(BaseVideoParser);\n\n  var PACKET_LENGTH = 188;\n  var TSDemuxer = /*#__PURE__*/function () {\n    function TSDemuxer(observer, config, typeSupported, logger) {\n      this.logger = void 0;\n      this.observer = void 0;\n      this.config = void 0;\n      this.typeSupported = void 0;\n      this.sampleAes = null;\n      this.pmtParsed = false;\n      this.audioCodec = void 0;\n      this.videoCodec = void 0;\n      this._pmtId = -1;\n      this._videoTrack = void 0;\n      this._audioTrack = void 0;\n      this._id3Track = void 0;\n      this._txtTrack = void 0;\n      this.aacOverFlow = null;\n      this.remainderData = null;\n      this.videoParser = void 0;\n      this.observer = observer;\n      this.config = config;\n      this.typeSupported = typeSupported;\n      this.logger = logger;\n      this.videoParser = null;\n    }\n    TSDemuxer.probe = function probe(data, logger) {\n      var syncOffset = TSDemuxer.syncOffset(data);\n      if (syncOffset > 0) {\n        logger.warn(\"MPEG2-TS detected but first sync word found @ offset \" + syncOffset);\n      }\n      return syncOffset !== -1;\n    };\n    TSDemuxer.syncOffset = function syncOffset(data) {\n      var length = data.length;\n      var scanwindow = Math.min(PACKET_LENGTH * 5, length - PACKET_LENGTH) + 1;\n      var i = 0;\n      while (i < scanwindow) {\n        // a TS init segment should contain at least 2 TS packets: PAT and PMT, each starting with 0x47\n        var foundPat = false;\n        var packetStart = -1;\n        var tsPackets = 0;\n        for (var j = i; j < length; j += PACKET_LENGTH) {\n          if (data[j] === 0x47 && (length - j === PACKET_LENGTH || data[j + PACKET_LENGTH] === 0x47)) {\n            tsPackets++;\n            if (packetStart === -1) {\n              packetStart = j;\n              // First sync word found at offset, increase scan length (#5251)\n              if (packetStart !== 0) {\n                scanwindow = Math.min(packetStart + PACKET_LENGTH * 99, data.length - PACKET_LENGTH) + 1;\n              }\n            }\n            if (!foundPat) {\n              foundPat = parsePID(data, j) === 0;\n            }\n            // Sync word found at 0 with 3 packets, or found at offset least 2 packets up to scanwindow (#5501)\n            if (foundPat && tsPackets > 1 && (packetStart === 0 && tsPackets > 2 || j + PACKET_LENGTH > scanwindow)) {\n              return packetStart;\n            }\n          } else if (tsPackets) {\n            // Exit if sync word found, but does not contain contiguous packets\n            return -1;\n          } else {\n            break;\n          }\n        }\n        i++;\n      }\n      return -1;\n    }\n\n    /**\n     * Creates a track model internal to demuxer used to drive remuxing input\n     */;\n    TSDemuxer.createTrack = function createTrack(type, duration) {\n      return {\n        container: type === 'video' || type === 'audio' ? 'video/mp2t' : undefined,\n        type: type,\n        id: RemuxerTrackIdConfig[type],\n        pid: -1,\n        inputTimeScale: 90000,\n        sequenceNumber: 0,\n        samples: [],\n        dropped: 0,\n        duration: type === 'audio' ? duration : undefined\n      };\n    }\n\n    /**\n     * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)\n     * Resets all internal track instances of the demuxer.\n     */;\n    var _proto = TSDemuxer.prototype;\n    _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {\n      this.pmtParsed = false;\n      this._pmtId = -1;\n      this._videoTrack = TSDemuxer.createTrack('video');\n      this._videoTrack.duration = trackDuration;\n      this._audioTrack = TSDemuxer.createTrack('audio', trackDuration);\n      this._id3Track = TSDemuxer.createTrack('id3');\n      this._txtTrack = TSDemuxer.createTrack('text');\n      this._audioTrack.segmentCodec = 'aac';\n\n      // flush any partial content\n      this.aacOverFlow = null;\n      this.remainderData = null;\n      this.audioCodec = audioCodec;\n      this.videoCodec = videoCodec;\n    };\n    _proto.resetTimeStamp = function resetTimeStamp() {};\n    _proto.resetContiguity = function resetContiguity() {\n      var _audioTrack = this._audioTrack,\n        _videoTrack = this._videoTrack,\n        _id3Track = this._id3Track;\n      if (_audioTrack) {\n        _audioTrack.pesData = null;\n      }\n      if (_videoTrack) {\n        _videoTrack.pesData = null;\n      }\n      if (_id3Track) {\n        _id3Track.pesData = null;\n      }\n      this.aacOverFlow = null;\n      this.remainderData = null;\n    };\n    _proto.demux = function demux(data, timeOffset, isSampleAes, flush) {\n      if (isSampleAes === void 0) {\n        isSampleAes = false;\n      }\n      if (flush === void 0) {\n        flush = false;\n      }\n      if (!isSampleAes) {\n        this.sampleAes = null;\n      }\n      var pes;\n      var videoTrack = this._videoTrack;\n      var audioTrack = this._audioTrack;\n      var id3Track = this._id3Track;\n      var textTrack = this._txtTrack;\n      var videoPid = videoTrack.pid;\n      var videoData = videoTrack.pesData;\n      var audioPid = audioTrack.pid;\n      var id3Pid = id3Track.pid;\n      var audioData = audioTrack.pesData;\n      var id3Data = id3Track.pesData;\n      var unknownPID = null;\n      var pmtParsed = this.pmtParsed;\n      var pmtId = this._pmtId;\n      var len = data.length;\n      if (this.remainderData) {\n        data = appendUint8Array(this.remainderData, data);\n        len = data.length;\n        this.remainderData = null;\n      }\n      if (len < PACKET_LENGTH && !flush) {\n        this.remainderData = data;\n        return {\n          audioTrack: audioTrack,\n          videoTrack: videoTrack,\n          id3Track: id3Track,\n          textTrack: textTrack\n        };\n      }\n      var syncOffset = Math.max(0, TSDemuxer.syncOffset(data));\n      len -= (len - syncOffset) % PACKET_LENGTH;\n      if (len < data.byteLength && !flush) {\n        this.remainderData = new Uint8Array(data.buffer, len, data.buffer.byteLength - len);\n      }\n\n      // loop through TS packets\n      var tsPacketErrors = 0;\n      for (var start = syncOffset; start < len; start += PACKET_LENGTH) {\n        if (data[start] === 0x47) {\n          var stt = !!(data[start + 1] & 0x40);\n          var pid = parsePID(data, start);\n          var atf = (data[start + 3] & 0x30) >> 4;\n\n          // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.\n          var offset = void 0;\n          if (atf > 1) {\n            offset = start + 5 + data[start + 4];\n            // continue if there is only adaptation field\n            if (offset === start + PACKET_LENGTH) {\n              continue;\n            }\n          } else {\n            offset = start + 4;\n          }\n          switch (pid) {\n            case videoPid:\n              if (stt) {\n                if (videoData && (pes = parsePES(videoData, this.logger))) {\n                  if (this.videoParser === null) {\n                    switch (videoTrack.segmentCodec) {\n                      case 'avc':\n                        this.videoParser = new AvcVideoParser();\n                        break;\n                      case 'hevc':\n                        {\n                          this.videoParser = new HevcVideoParser();\n                        }\n                        break;\n                    }\n                  }\n                  if (this.videoParser !== null) {\n                    this.videoParser.parsePES(videoTrack, textTrack, pes, false);\n                  }\n                }\n                videoData = {\n                  data: [],\n                  size: 0\n                };\n              }\n              if (videoData) {\n                videoData.data.push(data.subarray(offset, start + PACKET_LENGTH));\n                videoData.size += start + PACKET_LENGTH - offset;\n              }\n              break;\n            case audioPid:\n              if (stt) {\n                if (audioData && (pes = parsePES(audioData, this.logger))) {\n                  switch (audioTrack.segmentCodec) {\n                    case 'aac':\n                      this.parseAACPES(audioTrack, pes);\n                      break;\n                    case 'mp3':\n                      this.parseMPEGPES(audioTrack, pes);\n                      break;\n                    case 'ac3':\n                      {\n                        this.parseAC3PES(audioTrack, pes);\n                      }\n                      break;\n                  }\n                }\n                audioData = {\n                  data: [],\n                  size: 0\n                };\n              }\n              if (audioData) {\n                audioData.data.push(data.subarray(offset, start + PACKET_LENGTH));\n                audioData.size += start + PACKET_LENGTH - offset;\n              }\n              break;\n            case id3Pid:\n              if (stt) {\n                if (id3Data && (pes = parsePES(id3Data, this.logger))) {\n                  this.parseID3PES(id3Track, pes);\n                }\n                id3Data = {\n                  data: [],\n                  size: 0\n                };\n              }\n              if (id3Data) {\n                id3Data.data.push(data.subarray(offset, start + PACKET_LENGTH));\n                id3Data.size += start + PACKET_LENGTH - offset;\n              }\n              break;\n            case 0:\n              if (stt) {\n                offset += data[offset] + 1;\n              }\n              pmtId = this._pmtId = parsePAT(data, offset);\n              // this.logger.log('PMT PID:'  + this._pmtId);\n              break;\n            case pmtId:\n              {\n                if (stt) {\n                  offset += data[offset] + 1;\n                }\n                var parsedPIDs = parsePMT(data, offset, this.typeSupported, isSampleAes, this.observer, this.logger);\n\n                // only update track id if track PID found while parsing PMT\n                // this is to avoid resetting the PID to -1 in case\n                // track PID transiently disappears from the stream\n                // this could happen in case of transient missing audio samples for example\n                // NOTE this is only the PID of the track as found in TS,\n                // but we are not using this for MP4 track IDs.\n                videoPid = parsedPIDs.videoPid;\n                if (videoPid > 0) {\n                  videoTrack.pid = videoPid;\n                  videoTrack.segmentCodec = parsedPIDs.segmentVideoCodec;\n                }\n                audioPid = parsedPIDs.audioPid;\n                if (audioPid > 0) {\n                  audioTrack.pid = audioPid;\n                  audioTrack.segmentCodec = parsedPIDs.segmentAudioCodec;\n                }\n                id3Pid = parsedPIDs.id3Pid;\n                if (id3Pid > 0) {\n                  id3Track.pid = id3Pid;\n                }\n                if (unknownPID !== null && !pmtParsed) {\n                  this.logger.warn(\"MPEG-TS PMT found at \" + start + \" after unknown PID '\" + unknownPID + \"'. Backtracking to sync byte @\" + syncOffset + \" to parse all TS packets.\");\n                  unknownPID = null;\n                  // we set it to -188, the += 188 in the for loop will reset start to 0\n                  start = syncOffset - 188;\n                }\n                pmtParsed = this.pmtParsed = true;\n                break;\n              }\n            case 0x11:\n            case 0x1fff:\n              break;\n            default:\n              unknownPID = pid;\n              break;\n          }\n        } else {\n          tsPacketErrors++;\n        }\n      }\n      if (tsPacketErrors > 0) {\n        emitParsingError(this.observer, new Error(\"Found \" + tsPacketErrors + \" TS packet/s that do not start with 0x47\"), undefined, this.logger);\n      }\n      videoTrack.pesData = videoData;\n      audioTrack.pesData = audioData;\n      id3Track.pesData = id3Data;\n      var demuxResult = {\n        audioTrack: audioTrack,\n        videoTrack: videoTrack,\n        id3Track: id3Track,\n        textTrack: textTrack\n      };\n      if (flush) {\n        this.extractRemainingSamples(demuxResult);\n      }\n      return demuxResult;\n    };\n    _proto.flush = function flush() {\n      var remainderData = this.remainderData;\n      this.remainderData = null;\n      var result;\n      if (remainderData) {\n        result = this.demux(remainderData, -1, false, true);\n      } else {\n        result = {\n          videoTrack: this._videoTrack,\n          audioTrack: this._audioTrack,\n          id3Track: this._id3Track,\n          textTrack: this._txtTrack\n        };\n      }\n      this.extractRemainingSamples(result);\n      if (this.sampleAes) {\n        return this.decrypt(result, this.sampleAes);\n      }\n      return result;\n    };\n    _proto.extractRemainingSamples = function extractRemainingSamples(demuxResult) {\n      var audioTrack = demuxResult.audioTrack,\n        videoTrack = demuxResult.videoTrack,\n        id3Track = demuxResult.id3Track,\n        textTrack = demuxResult.textTrack;\n      var videoData = videoTrack.pesData;\n      var audioData = audioTrack.pesData;\n      var id3Data = id3Track.pesData;\n      // try to parse last PES packets\n      var pes;\n      if (videoData && (pes = parsePES(videoData, this.logger))) {\n        if (this.videoParser === null) {\n          switch (videoTrack.segmentCodec) {\n            case 'avc':\n              this.videoParser = new AvcVideoParser();\n              break;\n            case 'hevc':\n              {\n                this.videoParser = new HevcVideoParser();\n              }\n              break;\n          }\n        }\n        if (this.videoParser !== null) {\n          this.videoParser.parsePES(videoTrack, textTrack, pes, true);\n          videoTrack.pesData = null;\n        }\n      } else {\n        // either avcData null or PES truncated, keep it for next frag parsing\n        videoTrack.pesData = videoData;\n      }\n      if (audioData && (pes = parsePES(audioData, this.logger))) {\n        switch (audioTrack.segmentCodec) {\n          case 'aac':\n            this.parseAACPES(audioTrack, pes);\n            break;\n          case 'mp3':\n            this.parseMPEGPES(audioTrack, pes);\n            break;\n          case 'ac3':\n            {\n              this.parseAC3PES(audioTrack, pes);\n            }\n            break;\n        }\n        audioTrack.pesData = null;\n      } else {\n        if (audioData != null && audioData.size) {\n          this.logger.log('last AAC PES packet truncated,might overlap between fragments');\n        }\n\n        // either audioData null or PES truncated, keep it for next frag parsing\n        audioTrack.pesData = audioData;\n      }\n      if (id3Data && (pes = parsePES(id3Data, this.logger))) {\n        this.parseID3PES(id3Track, pes);\n        id3Track.pesData = null;\n      } else {\n        // either id3Data null or PES truncated, keep it for next frag parsing\n        id3Track.pesData = id3Data;\n      }\n    };\n    _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {\n      var demuxResult = this.demux(data, timeOffset, true, !this.config.progressive);\n      var sampleAes = this.sampleAes = new SampleAesDecrypter(this.observer, this.config, keyData);\n      return this.decrypt(demuxResult, sampleAes);\n    };\n    _proto.decrypt = function decrypt(demuxResult, sampleAes) {\n      return new Promise(function (resolve) {\n        var audioTrack = demuxResult.audioTrack,\n          videoTrack = demuxResult.videoTrack;\n        if (audioTrack.samples && audioTrack.segmentCodec === 'aac') {\n          sampleAes.decryptAacSamples(audioTrack.samples, 0, function () {\n            if (videoTrack.samples) {\n              sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function () {\n                resolve(demuxResult);\n              });\n            } else {\n              resolve(demuxResult);\n            }\n          });\n        } else if (videoTrack.samples) {\n          sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function () {\n            resolve(demuxResult);\n          });\n        }\n      });\n    };\n    _proto.destroy = function destroy() {\n      if (this.observer) {\n        this.observer.removeAllListeners();\n      }\n      // @ts-ignore\n      this.config = this.logger = this.observer = null;\n      this.aacOverFlow = this.videoParser = this.remainderData = this.sampleAes = null;\n      this._videoTrack = this._audioTrack = this._id3Track = this._txtTrack = undefined;\n    };\n    _proto.parseAACPES = function parseAACPES(track, pes) {\n      var startOffset = 0;\n      var aacOverFlow = this.aacOverFlow;\n      var data = pes.data;\n      if (aacOverFlow) {\n        this.aacOverFlow = null;\n        var frameMissingBytes = aacOverFlow.missing;\n        var sampleLength = aacOverFlow.sample.unit.byteLength;\n        // logger.log(`AAC: append overflowing ${sampleLength} bytes to beginning of new PES`);\n        if (frameMissingBytes === -1) {\n          data = appendUint8Array(aacOverFlow.sample.unit, data);\n        } else {\n          var frameOverflowBytes = sampleLength - frameMissingBytes;\n          aacOverFlow.sample.unit.set(data.subarray(0, frameMissingBytes), frameOverflowBytes);\n          track.samples.push(aacOverFlow.sample);\n          startOffset = aacOverFlow.missing;\n        }\n      }\n      // look for ADTS header (0xFFFx)\n      var offset;\n      var len;\n      for (offset = startOffset, len = data.length; offset < len - 1; offset++) {\n        if (isHeader$1(data, offset)) {\n          break;\n        }\n      }\n      // if ADTS header does not start straight from the beginning of the PES payload, raise an error\n      if (offset !== startOffset) {\n        var reason;\n        var recoverable = offset < len - 1;\n        if (recoverable) {\n          reason = \"AAC PES did not start with ADTS header,offset:\" + offset;\n        } else {\n          reason = 'No ADTS header found in AAC PES';\n        }\n        emitParsingError(this.observer, new Error(reason), recoverable, this.logger);\n        if (!recoverable) {\n          return;\n        }\n      }\n      initTrackConfig(track, this.observer, data, offset, this.audioCodec);\n      var pts;\n      if (pes.pts !== undefined) {\n        pts = pes.pts;\n      } else if (aacOverFlow) {\n        // if last AAC frame is overflowing, we should ensure timestamps are contiguous:\n        // first sample PTS should be equal to last sample PTS + frameDuration\n        var frameDuration = getFrameDuration(track.samplerate);\n        pts = aacOverFlow.sample.pts + frameDuration;\n      } else {\n        this.logger.warn('[tsdemuxer]: AAC PES unknown PTS');\n        return;\n      }\n\n      // scan for aac samples\n      var frameIndex = 0;\n      var frame;\n      while (offset < len) {\n        frame = appendFrame$1(track, data, offset, pts, frameIndex);\n        offset += frame.length;\n        if (!frame.missing) {\n          frameIndex++;\n          for (; offset < len - 1; offset++) {\n            if (isHeader$1(data, offset)) {\n              break;\n            }\n          }\n        } else {\n          this.aacOverFlow = frame;\n          break;\n        }\n      }\n    };\n    _proto.parseMPEGPES = function parseMPEGPES(track, pes) {\n      var data = pes.data;\n      var length = data.length;\n      var frameIndex = 0;\n      var offset = 0;\n      var pts = pes.pts;\n      if (pts === undefined) {\n        this.logger.warn('[tsdemuxer]: MPEG PES unknown PTS');\n        return;\n      }\n      while (offset < length) {\n        if (isHeader(data, offset)) {\n          var frame = appendFrame(track, data, offset, pts, frameIndex);\n          if (frame) {\n            offset += frame.length;\n            frameIndex++;\n          } else {\n            // logger.log('Unable to parse Mpeg audio frame');\n            break;\n          }\n        } else {\n          // nothing found, keep looking\n          offset++;\n        }\n      }\n    };\n    _proto.parseAC3PES = function parseAC3PES(track, pes) {\n      {\n        var data = pes.data;\n        var pts = pes.pts;\n        if (pts === undefined) {\n          this.logger.warn('[tsdemuxer]: AC3 PES unknown PTS');\n          return;\n        }\n        var length = data.length;\n        var frameIndex = 0;\n        var offset = 0;\n        var parsed;\n        while (offset < length && (parsed = _appendFrame(track, data, offset, pts, frameIndex++)) > 0) {\n          offset += parsed;\n        }\n      }\n    };\n    _proto.parseID3PES = function parseID3PES(id3Track, pes) {\n      if (pes.pts === undefined) {\n        this.logger.warn('[tsdemuxer]: ID3 PES unknown PTS');\n        return;\n      }\n      var id3Sample = _extends({}, pes, {\n        type: this._videoTrack ? MetadataSchema.emsg : MetadataSchema.audioId3,\n        duration: Number.POSITIVE_INFINITY\n      });\n      id3Track.samples.push(id3Sample);\n    };\n    return TSDemuxer;\n  }();\n  function parsePID(data, offset) {\n    // pid is a 13-bit field starting at the last bit of TS[1]\n    return ((data[offset + 1] & 0x1f) << 8) + data[offset + 2];\n  }\n  function parsePAT(data, offset) {\n    // skip the PSI header and parse the first PMT entry\n    return (data[offset + 10] & 0x1f) << 8 | data[offset + 11];\n  }\n  function parsePMT(data, offset, typeSupported, isSampleAes, observer, logger) {\n    var result = {\n      audioPid: -1,\n      videoPid: -1,\n      id3Pid: -1,\n      segmentVideoCodec: 'avc',\n      segmentAudioCodec: 'aac'\n    };\n    var sectionLength = (data[offset + 1] & 0x0f) << 8 | data[offset + 2];\n    var tableEnd = offset + 3 + sectionLength - 4;\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    var programInfoLength = (data[offset + 10] & 0x0f) << 8 | data[offset + 11];\n    // advance the offset to the first entry in the mapping table\n    offset += 12 + programInfoLength;\n    while (offset < tableEnd) {\n      var pid = parsePID(data, offset);\n      var esInfoLength = (data[offset + 3] & 0x0f) << 8 | data[offset + 4];\n      switch (data[offset]) {\n        case 0xcf:\n          // SAMPLE-AES AAC\n          if (!isSampleAes) {\n            logEncryptedSamplesFoundInUnencryptedStream('ADTS AAC', logger);\n            break;\n          }\n        /* falls through */\n        case 0x0f:\n          // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)\n          // logger.log('AAC PID:'  + pid);\n          if (result.audioPid === -1) {\n            result.audioPid = pid;\n          }\n          break;\n\n        // Packetized metadata (ID3)\n        case 0x15:\n          // logger.log('ID3 PID:'  + pid);\n          if (result.id3Pid === -1) {\n            result.id3Pid = pid;\n          }\n          break;\n        case 0xdb:\n          // SAMPLE-AES AVC\n          if (!isSampleAes) {\n            logEncryptedSamplesFoundInUnencryptedStream('H.264', logger);\n            break;\n          }\n        /* falls through */\n        case 0x1b:\n          // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)\n          // logger.log('AVC PID:'  + pid);\n          if (result.videoPid === -1) {\n            result.videoPid = pid;\n          }\n          break;\n\n        // ISO/IEC 11172-3 (MPEG-1 audio)\n        // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)\n        case 0x03:\n        case 0x04:\n          // logger.log('MPEG PID:'  + pid);\n          if (!typeSupported.mpeg && !typeSupported.mp3) {\n            logger.log('MPEG audio found, not supported in this browser');\n          } else if (result.audioPid === -1) {\n            result.audioPid = pid;\n            result.segmentAudioCodec = 'mp3';\n          }\n          break;\n        case 0xc1:\n          // SAMPLE-AES AC3\n          if (!isSampleAes) {\n            logEncryptedSamplesFoundInUnencryptedStream('AC-3', logger);\n            break;\n          }\n        /* falls through */\n        case 0x81:\n          {\n            if (!typeSupported.ac3) {\n              logger.log('AC-3 audio found, not supported in this browser');\n            } else if (result.audioPid === -1) {\n              result.audioPid = pid;\n              result.segmentAudioCodec = 'ac3';\n            }\n          }\n          break;\n        case 0x06:\n          // stream_type 6 can mean a lot of different things in case of DVB.\n          // We need to look at the descriptors. Right now, we're only interested\n          // in AC-3 audio, so we do the descriptor parsing only when we don't have\n          // an audio PID yet.\n          if (result.audioPid === -1 && esInfoLength > 0) {\n            var parsePos = offset + 5;\n            var remaining = esInfoLength;\n            while (remaining > 2) {\n              var descriptorId = data[parsePos];\n              switch (descriptorId) {\n                case 0x6a:\n                  // DVB Descriptor for AC-3\n                  {\n                    if (typeSupported.ac3 !== true) {\n                      logger.log('AC-3 audio found, not supported in this browser for now');\n                    } else {\n                      result.audioPid = pid;\n                      result.segmentAudioCodec = 'ac3';\n                    }\n                  }\n                  break;\n              }\n              var descriptorLen = data[parsePos + 1] + 2;\n              parsePos += descriptorLen;\n              remaining -= descriptorLen;\n            }\n          }\n          break;\n        case 0xc2: // SAMPLE-AES EC3\n        /* falls through */\n        case 0x87:\n          emitParsingError(observer, new Error('Unsupported EC-3 in M2TS found'), undefined, logger);\n          return result;\n        case 0x24:\n          // ITU-T Rec. H.265 and ISO/IEC 23008-2 (HEVC)\n          {\n            if (result.videoPid === -1) {\n              result.videoPid = pid;\n              result.segmentVideoCodec = 'hevc';\n              logger.log('HEVC in M2TS found');\n            }\n          }\n          break;\n      }\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += esInfoLength + 5;\n    }\n    return result;\n  }\n  function emitParsingError(observer, error, levelRetry, logger) {\n    logger.warn(\"parsing error: \" + error.message);\n    observer.emit(Events.ERROR, Events.ERROR, {\n      type: ErrorTypes.MEDIA_ERROR,\n      details: ErrorDetails.FRAG_PARSING_ERROR,\n      fatal: false,\n      levelRetry: levelRetry,\n      error: error,\n      reason: error.message\n    });\n  }\n  function logEncryptedSamplesFoundInUnencryptedStream(type, logger) {\n    logger.log(type + \" with AES-128-CBC encryption found in unencrypted stream\");\n  }\n  function parsePES(stream, logger) {\n    var i = 0;\n    var frag;\n    var pesLen;\n    var pesHdrLen;\n    var pesPts;\n    var pesDts;\n    var data = stream.data;\n    // safety check\n    if (!stream || stream.size === 0) {\n      return null;\n    }\n\n    // we might need up to 19 bytes to read PES header\n    // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes\n    // usually only one merge is needed (and this is rare ...)\n    while (data[0].length < 19 && data.length > 1) {\n      data[0] = appendUint8Array(data[0], data[1]);\n      data.splice(1, 1);\n    }\n    // retrieve PTS/DTS from first fragment\n    frag = data[0];\n    var pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];\n    if (pesPrefix === 1) {\n      pesLen = (frag[4] << 8) + frag[5];\n      // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated\n      // minus 6 : PES header size\n      if (pesLen && pesLen > stream.size - 6) {\n        return null;\n      }\n      var pesFlags = frag[7];\n      if (pesFlags & 0xc0) {\n        /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n            as PTS / DTS is 33 bit we cannot use bitwise operator in JS,\n            as Bitwise operators treat their operands as a sequence of 32 bits */\n        pesPts = (frag[9] & 0x0e) * 536870912 +\n        // 1 << 29\n        (frag[10] & 0xff) * 4194304 +\n        // 1 << 22\n        (frag[11] & 0xfe) * 16384 +\n        // 1 << 14\n        (frag[12] & 0xff) * 128 +\n        // 1 << 7\n        (frag[13] & 0xfe) / 2;\n        if (pesFlags & 0x40) {\n          pesDts = (frag[14] & 0x0e) * 536870912 +\n          // 1 << 29\n          (frag[15] & 0xff) * 4194304 +\n          // 1 << 22\n          (frag[16] & 0xfe) * 16384 +\n          // 1 << 14\n          (frag[17] & 0xff) * 128 +\n          // 1 << 7\n          (frag[18] & 0xfe) / 2;\n          if (pesPts - pesDts > 60 * 90000) {\n            logger.warn(Math.round((pesPts - pesDts) / 90000) + \"s delta between PTS and DTS, align them\");\n            pesPts = pesDts;\n          }\n        } else {\n          pesDts = pesPts;\n        }\n      }\n      pesHdrLen = frag[8];\n      // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension\n      var payloadStartOffset = pesHdrLen + 9;\n      if (stream.size <= payloadStartOffset) {\n        return null;\n      }\n      stream.size -= payloadStartOffset;\n      // reassemble PES packet\n      var pesData = new Uint8Array(stream.size);\n      for (var j = 0, dataLen = data.length; j < dataLen; j++) {\n        frag = data[j];\n        var len = frag.byteLength;\n        if (payloadStartOffset) {\n          if (payloadStartOffset > len) {\n            // trim full frag if PES header bigger than frag\n            payloadStartOffset -= len;\n            continue;\n          } else {\n            // trim partial frag if PES header smaller than frag\n            frag = frag.subarray(payloadStartOffset);\n            len -= payloadStartOffset;\n            payloadStartOffset = 0;\n          }\n        }\n        pesData.set(frag, i);\n        i += len;\n      }\n      if (pesLen) {\n        // payload size : remove PES header + PES extension\n        pesLen -= pesHdrLen + 3;\n      }\n      return {\n        data: pesData,\n        pts: pesPts,\n        dts: pesDts,\n        len: pesLen\n      };\n    }\n    return null;\n  }\n\n  /**\n   *  AAC helper\n   */\n  var AAC = /*#__PURE__*/function () {\n    function AAC() {}\n    AAC.getSilentFrame = function getSilentFrame(codec, channelCount) {\n      switch (codec) {\n        case 'mp4a.40.2':\n          if (channelCount === 1) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n          } else if (channelCount === 2) {\n            return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n          } else if (channelCount === 3) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n          } else if (channelCount === 4) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n          } else if (channelCount === 5) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n          } else if (channelCount === 6) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n          }\n          break;\n        // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)\n        default:\n          if (channelCount === 1) {\n            // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n            return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n          } else if (channelCount === 2) {\n            // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n            return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n          } else if (channelCount === 3) {\n            // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n            return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n          }\n          break;\n      }\n      return undefined;\n    };\n    return AAC;\n  }();\n\n  /**\n   * Generate MP4 Box\n   */\n\n  var UINT32_MAX = Math.pow(2, 32) - 1;\n  var MP4 = /*#__PURE__*/function () {\n    function MP4() {}\n    MP4.init = function init() {\n      MP4.types = {\n        avc1: [],\n        // codingname\n        avcC: [],\n        hvc1: [],\n        hvcC: [],\n        btrt: [],\n        dinf: [],\n        dref: [],\n        esds: [],\n        ftyp: [],\n        hdlr: [],\n        mdat: [],\n        mdhd: [],\n        mdia: [],\n        mfhd: [],\n        minf: [],\n        moof: [],\n        moov: [],\n        mp4a: [],\n        '.mp3': [],\n        dac3: [],\n        'ac-3': [],\n        mvex: [],\n        mvhd: [],\n        pasp: [],\n        sdtp: [],\n        stbl: [],\n        stco: [],\n        stsc: [],\n        stsd: [],\n        stsz: [],\n        stts: [],\n        tfdt: [],\n        tfhd: [],\n        traf: [],\n        trak: [],\n        trun: [],\n        trex: [],\n        tkhd: [],\n        vmhd: [],\n        smhd: []\n      };\n      var i;\n      for (i in MP4.types) {\n        if (MP4.types.hasOwnProperty(i)) {\n          MP4.types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n        }\n      }\n      var videoHdlr = new Uint8Array([0x00,\n      // version 0\n      0x00, 0x00, 0x00,\n      // flags\n      0x00, 0x00, 0x00, 0x00,\n      // pre_defined\n      0x76, 0x69, 0x64, 0x65,\n      // handler_type: 'vide'\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n      ]);\n      var audioHdlr = new Uint8Array([0x00,\n      // version 0\n      0x00, 0x00, 0x00,\n      // flags\n      0x00, 0x00, 0x00, 0x00,\n      // pre_defined\n      0x73, 0x6f, 0x75, 0x6e,\n      // handler_type: 'soun'\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n      ]);\n      MP4.HDLR_TYPES = {\n        video: videoHdlr,\n        audio: audioHdlr\n      };\n      var dref = new Uint8Array([0x00,\n      // version 0\n      0x00, 0x00, 0x00,\n      // flags\n      0x00, 0x00, 0x00, 0x01,\n      // entry_count\n      0x00, 0x00, 0x00, 0x0c,\n      // entry_size\n      0x75, 0x72, 0x6c, 0x20,\n      // 'url' type\n      0x00,\n      // version 0\n      0x00, 0x00, 0x01 // entry_flags\n      ]);\n      var stco = new Uint8Array([0x00,\n      // version\n      0x00, 0x00, 0x00,\n      // flags\n      0x00, 0x00, 0x00, 0x00 // entry_count\n      ]);\n      MP4.STTS = MP4.STSC = MP4.STCO = stco;\n      MP4.STSZ = new Uint8Array([0x00,\n      // version\n      0x00, 0x00, 0x00,\n      // flags\n      0x00, 0x00, 0x00, 0x00,\n      // sample_size\n      0x00, 0x00, 0x00, 0x00 // sample_count\n      ]);\n      MP4.VMHD = new Uint8Array([0x00,\n      // version\n      0x00, 0x00, 0x01,\n      // flags\n      0x00, 0x00,\n      // graphicsmode\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n      ]);\n      MP4.SMHD = new Uint8Array([0x00,\n      // version\n      0x00, 0x00, 0x00,\n      // flags\n      0x00, 0x00,\n      // balance\n      0x00, 0x00 // reserved\n      ]);\n      MP4.STSD = new Uint8Array([0x00,\n      // version 0\n      0x00, 0x00, 0x00,\n      // flags\n      0x00, 0x00, 0x00, 0x01]); // entry_count\n\n      var majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\n      var avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\n      var minorVersion = new Uint8Array([0, 0, 0, 1]);\n      MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);\n      MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\n    };\n    MP4.box = function box(type) {\n      var size = 8;\n      for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        payload[_key - 1] = arguments[_key];\n      }\n      var i = payload.length;\n      var len = i;\n      // calculate the total size we need to allocate\n      while (i--) {\n        size += payload[i].byteLength;\n      }\n      var result = new Uint8Array(size);\n      result[0] = size >> 24 & 0xff;\n      result[1] = size >> 16 & 0xff;\n      result[2] = size >> 8 & 0xff;\n      result[3] = size & 0xff;\n      result.set(type, 4);\n      // copy the payload into the result\n      for (i = 0, size = 8; i < len; i++) {\n        // copy payload[i] array @ offset size\n        result.set(payload[i], size);\n        size += payload[i].byteLength;\n      }\n      return result;\n    };\n    MP4.hdlr = function hdlr(type) {\n      return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\n    };\n    MP4.mdat = function mdat(data) {\n      return MP4.box(MP4.types.mdat, data);\n    };\n    MP4.mdhd = function mdhd(timescale, duration) {\n      duration *= timescale;\n      var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n      var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n      return MP4.box(MP4.types.mdhd, new Uint8Array([0x01,\n      // version 1\n      0x00, 0x00, 0x00,\n      // flags\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,\n      // creation_time\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,\n      // modification_time\n      timescale >> 24 & 0xff, timescale >> 16 & 0xff, timescale >> 8 & 0xff, timescale & 0xff,\n      // timescale\n      upperWordDuration >> 24, upperWordDuration >> 16 & 0xff, upperWordDuration >> 8 & 0xff, upperWordDuration & 0xff, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xff, lowerWordDuration >> 8 & 0xff, lowerWordDuration & 0xff, 0x55, 0xc4,\n      // 'und' language (undetermined)\n      0x00, 0x00]));\n    };\n    MP4.mdia = function mdia(track) {\n      return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale || 0, track.duration || 0), MP4.hdlr(track.type), MP4.minf(track));\n    };\n    MP4.mfhd = function mfhd(sequenceNumber) {\n      return MP4.box(MP4.types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00,\n      // flags\n      sequenceNumber >> 24, sequenceNumber >> 16 & 0xff, sequenceNumber >> 8 & 0xff, sequenceNumber & 0xff // sequence_number\n      ]));\n    };\n    MP4.minf = function minf(track) {\n      if (track.type === 'audio') {\n        return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));\n      } else {\n        return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));\n      }\n    };\n    MP4.moof = function moof(sn, baseMediaDecodeTime, track) {\n      return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));\n    };\n    MP4.moov = function moov(tracks) {\n      var i = tracks.length;\n      var boxes = [];\n      while (i--) {\n        boxes[i] = MP4.trak(tracks[i]);\n      }\n      return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(tracks[0].timescale || 0, tracks[0].duration || 0)].concat(boxes).concat(MP4.mvex(tracks)));\n    };\n    MP4.mvex = function mvex(tracks) {\n      var i = tracks.length;\n      var boxes = [];\n      while (i--) {\n        boxes[i] = MP4.trex(tracks[i]);\n      }\n      return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));\n    };\n    MP4.mvhd = function mvhd(timescale, duration) {\n      duration *= timescale;\n      var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n      var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n      var bytes = new Uint8Array([0x01,\n      // version 1\n      0x00, 0x00, 0x00,\n      // flags\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,\n      // creation_time\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,\n      // modification_time\n      timescale >> 24 & 0xff, timescale >> 16 & 0xff, timescale >> 8 & 0xff, timescale & 0xff,\n      // timescale\n      upperWordDuration >> 24, upperWordDuration >> 16 & 0xff, upperWordDuration >> 8 & 0xff, upperWordDuration & 0xff, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xff, lowerWordDuration >> 8 & 0xff, lowerWordDuration & 0xff, 0x00, 0x01, 0x00, 0x00,\n      // 1.0 rate\n      0x01, 0x00,\n      // 1.0 volume\n      0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\n      // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n      ]);\n      return MP4.box(MP4.types.mvhd, bytes);\n    };\n    MP4.sdtp = function sdtp(track) {\n      var samples = track.samples || [];\n      var bytes = new Uint8Array(4 + samples.length);\n      var i;\n      var flags;\n      // leave the full box header (4 bytes) all zero\n      // write the sample table\n      for (i = 0; i < samples.length; i++) {\n        flags = samples[i].flags;\n        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n      }\n      return MP4.box(MP4.types.sdtp, bytes);\n    };\n    MP4.stbl = function stbl(track) {\n      return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));\n    };\n    MP4.avc1 = function avc1(track) {\n      var sps = [];\n      var pps = [];\n      var i;\n      var data;\n      var len;\n      // assemble the SPSs\n\n      for (i = 0; i < track.sps.length; i++) {\n        data = track.sps[i];\n        len = data.byteLength;\n        sps.push(len >>> 8 & 0xff);\n        sps.push(len & 0xff);\n\n        // SPS\n        sps = sps.concat(Array.prototype.slice.call(data));\n      }\n\n      // assemble the PPSs\n      for (i = 0; i < track.pps.length; i++) {\n        data = track.pps[i];\n        len = data.byteLength;\n        pps.push(len >>> 8 & 0xff);\n        pps.push(len & 0xff);\n        pps = pps.concat(Array.prototype.slice.call(data));\n      }\n      var avcc = MP4.box(MP4.types.avcC, new Uint8Array([0x01,\n      // version\n      sps[3],\n      // profile\n      sps[4],\n      // profile compat\n      sps[5],\n      // level\n      0xfc | 3,\n      // lengthSizeMinusOne, hard-coded to 4 bytes\n      0xe0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets\n      ].concat(sps).concat([track.pps.length // numOfPictureParameterSets\n      ]).concat(pps))); // \"PPS\"\n      var width = track.width;\n      var height = track.height;\n      var hSpacing = track.pixelRatio[0];\n      var vSpacing = track.pixelRatio[1];\n      return MP4.box(MP4.types.avc1, new Uint8Array([0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01,\n      // data_reference_index\n      0x00, 0x00,\n      // pre_defined\n      0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // pre_defined\n      width >> 8 & 0xff, width & 0xff,\n      // width\n      height >> 8 & 0xff, height & 0xff,\n      // height\n      0x00, 0x48, 0x00, 0x00,\n      // horizresolution\n      0x00, 0x48, 0x00, 0x00,\n      // vertresolution\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01,\n      // frame_count\n      0x12, 0x64, 0x61, 0x69, 0x6c,\n      // dailymotion/hls.js\n      0x79, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c, 0x73, 0x2e, 0x6a, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // compressorname\n      0x00, 0x18,\n      // depth = 24\n      0x11, 0x11]),\n      // pre_defined = -1\n      avcc, MP4.box(MP4.types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80,\n      // bufferSizeDB\n      0x00, 0x2d, 0xc6, 0xc0,\n      // maxBitrate\n      0x00, 0x2d, 0xc6, 0xc0])),\n      // avgBitrate\n      MP4.box(MP4.types.pasp, new Uint8Array([hSpacing >> 24,\n      // hSpacing\n      hSpacing >> 16 & 0xff, hSpacing >> 8 & 0xff, hSpacing & 0xff, vSpacing >> 24,\n      // vSpacing\n      vSpacing >> 16 & 0xff, vSpacing >> 8 & 0xff, vSpacing & 0xff])));\n    };\n    MP4.esds = function esds(track) {\n      var config = track.config;\n      return new Uint8Array([0x00,\n      // version 0\n      0x00, 0x00, 0x00,\n      // flags\n\n      0x03,\n      // descriptor_type\n      0x19,\n      // length\n\n      0x00, 0x01,\n      // es_id\n\n      0x00,\n      // stream_priority\n\n      0x04,\n      // descriptor_type\n      0x11,\n      // length\n      0x40,\n      // codec : mpeg4_audio\n      0x15,\n      // stream_type\n      0x00, 0x00, 0x00,\n      // buffer_size\n      0x00, 0x00, 0x00, 0x00,\n      // maxBitrate\n      0x00, 0x00, 0x00, 0x00,\n      // avgBitrate\n\n      0x05,\n      // descriptor_type\n      0x02].concat(config, [0x06, 0x01, 0x02 // GASpecificConfig)); // length + audio config descriptor\n      ]));\n    };\n    MP4.audioStsd = function audioStsd(track) {\n      var samplerate = track.samplerate || 0;\n      return new Uint8Array([0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01,\n      // data_reference_index\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, track.channelCount || 0,\n      // channelcount\n      0x00, 0x10,\n      // sampleSize:16bits\n      0x00, 0x00, 0x00, 0x00,\n      // reserved2\n      samplerate >> 8 & 0xff, samplerate & 0xff,\n      //\n      0x00, 0x00]);\n    };\n    MP4.mp4a = function mp4a(track) {\n      return MP4.box(MP4.types.mp4a, MP4.audioStsd(track), MP4.box(MP4.types.esds, MP4.esds(track)));\n    };\n    MP4.mp3 = function mp3(track) {\n      return MP4.box(MP4.types['.mp3'], MP4.audioStsd(track));\n    };\n    MP4.ac3 = function ac3(track) {\n      return MP4.box(MP4.types['ac-3'], MP4.audioStsd(track), MP4.box(MP4.types.dac3, track.config));\n    };\n    MP4.stsd = function stsd(track) {\n      var segmentCodec = track.segmentCodec;\n      if (track.type === 'audio') {\n        if (segmentCodec === 'aac') {\n          return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\n        }\n        if (segmentCodec === 'ac3' && track.config) {\n          return MP4.box(MP4.types.stsd, MP4.STSD, MP4.ac3(track));\n        }\n        if (segmentCodec === 'mp3' && track.codec === 'mp3') {\n          return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));\n        }\n      } else {\n        if (track.pps && track.sps) {\n          if (segmentCodec === 'avc') {\n            return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\n          }\n          if (segmentCodec === 'hevc' && track.vps) {\n            return MP4.box(MP4.types.stsd, MP4.STSD, MP4.hvc1(track));\n          }\n        } else {\n          throw new Error(\"video track missing pps or sps\");\n        }\n      }\n      throw new Error(\"unsupported \" + track.type + \" segment codec (\" + segmentCodec + \"/\" + track.codec + \")\");\n    };\n    MP4.tkhd = function tkhd(track) {\n      var id = track.id;\n      var duration = (track.duration || 0) * (track.timescale || 0);\n      var width = track.width || 0;\n      var height = track.height || 0;\n      var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n      var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n      return MP4.box(MP4.types.tkhd, new Uint8Array([0x01,\n      // version 1\n      0x00, 0x00, 0x07,\n      // flags\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,\n      // creation_time\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,\n      // modification_time\n      id >> 24 & 0xff, id >> 16 & 0xff, id >> 8 & 0xff, id & 0xff,\n      // track_ID\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      upperWordDuration >> 24, upperWordDuration >> 16 & 0xff, upperWordDuration >> 8 & 0xff, upperWordDuration & 0xff, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xff, lowerWordDuration >> 8 & 0xff, lowerWordDuration & 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x00,\n      // layer\n      0x00, 0x00,\n      // alternate_group\n      0x00, 0x00,\n      // non-audio track volume\n      0x00, 0x00,\n      // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\n      // transformation: unity matrix\n      width >> 8 & 0xff, width & 0xff, 0x00, 0x00,\n      // width\n      height >> 8 & 0xff, height & 0xff, 0x00, 0x00 // height\n      ]));\n    };\n    MP4.traf = function traf(track, baseMediaDecodeTime) {\n      var sampleDependencyTable = MP4.sdtp(track);\n      var id = track.id;\n      var upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));\n      var lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n      return MP4.box(MP4.types.traf, MP4.box(MP4.types.tfhd, new Uint8Array([0x00,\n      // version 0\n      0x00, 0x00, 0x00,\n      // flags\n      id >> 24, id >> 16 & 0xff, id >> 8 & 0xff, id & 0xff // track_ID\n      ])), MP4.box(MP4.types.tfdt, new Uint8Array([0x01,\n      // version 1\n      0x00, 0x00, 0x00,\n      // flags\n      upperWordBaseMediaDecodeTime >> 24, upperWordBaseMediaDecodeTime >> 16 & 0xff, upperWordBaseMediaDecodeTime >> 8 & 0xff, upperWordBaseMediaDecodeTime & 0xff, lowerWordBaseMediaDecodeTime >> 24, lowerWordBaseMediaDecodeTime >> 16 & 0xff, lowerWordBaseMediaDecodeTime >> 8 & 0xff, lowerWordBaseMediaDecodeTime & 0xff])), MP4.trun(track, sampleDependencyTable.length + 16 +\n      // tfhd\n      20 +\n      // tfdt\n      8 +\n      // traf header\n      16 +\n      // mfhd\n      8 +\n      // moof header\n      8),\n      // mdat header\n      sampleDependencyTable);\n    }\n\n    /**\n     * Generate a track box.\n     * @param track a track definition\n     */;\n    MP4.trak = function trak(track) {\n      track.duration = track.duration || 0xffffffff;\n      return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\n    };\n    MP4.trex = function trex(track) {\n      var id = track.id;\n      return MP4.box(MP4.types.trex, new Uint8Array([0x00,\n      // version 0\n      0x00, 0x00, 0x00,\n      // flags\n      id >> 24, id >> 16 & 0xff, id >> 8 & 0xff, id & 0xff,\n      // track_ID\n      0x00, 0x00, 0x00, 0x01,\n      // default_sample_description_index\n      0x00, 0x00, 0x00, 0x00,\n      // default_sample_duration\n      0x00, 0x00, 0x00, 0x00,\n      // default_sample_size\n      0x00, 0x01, 0x00, 0x01 // default_sample_flags\n      ]));\n    };\n    MP4.trun = function trun(track, offset) {\n      var samples = track.samples || [];\n      var len = samples.length;\n      var arraylen = 12 + 16 * len;\n      var array = new Uint8Array(arraylen);\n      var i;\n      var sample;\n      var duration;\n      var size;\n      var flags;\n      var cts;\n      offset += 8 + arraylen;\n      array.set([track.type === 'video' ? 0x01 : 0x00,\n      // version 1 for video with signed-int sample_composition_time_offset\n      0x00, 0x0f, 0x01,\n      // flags\n      len >>> 24 & 0xff, len >>> 16 & 0xff, len >>> 8 & 0xff, len & 0xff,\n      // sample_count\n      offset >>> 24 & 0xff, offset >>> 16 & 0xff, offset >>> 8 & 0xff, offset & 0xff // data_offset\n      ], 0);\n      for (i = 0; i < len; i++) {\n        sample = samples[i];\n        duration = sample.duration;\n        size = sample.size;\n        flags = sample.flags;\n        cts = sample.cts;\n        array.set([duration >>> 24 & 0xff, duration >>> 16 & 0xff, duration >>> 8 & 0xff, duration & 0xff,\n        // sample_duration\n        size >>> 24 & 0xff, size >>> 16 & 0xff, size >>> 8 & 0xff, size & 0xff,\n        // sample_size\n        flags.isLeading << 2 | flags.dependsOn, flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync, flags.degradPrio & 0xf0 << 8, flags.degradPrio & 0x0f,\n        // sample_flags\n        cts >>> 24 & 0xff, cts >>> 16 & 0xff, cts >>> 8 & 0xff, cts & 0xff // sample_composition_time_offset\n        ], 12 + 16 * i);\n      }\n      return MP4.box(MP4.types.trun, array);\n    };\n    MP4.initSegment = function initSegment(tracks) {\n      if (!MP4.types) {\n        MP4.init();\n      }\n      var movie = MP4.moov(tracks);\n      var result = appendUint8Array(MP4.FTYP, movie);\n      return result;\n    };\n    MP4.hvc1 = function hvc1(track) {\n      var ps = track.params;\n      var units = [track.vps, track.sps, track.pps];\n      var NALuLengthSize = 4;\n      var config = new Uint8Array([0x01, ps.general_profile_space << 6 | (ps.general_tier_flag ? 32 : 0) | ps.general_profile_idc, ps.general_profile_compatibility_flags[0], ps.general_profile_compatibility_flags[1], ps.general_profile_compatibility_flags[2], ps.general_profile_compatibility_flags[3], ps.general_constraint_indicator_flags[0], ps.general_constraint_indicator_flags[1], ps.general_constraint_indicator_flags[2], ps.general_constraint_indicator_flags[3], ps.general_constraint_indicator_flags[4], ps.general_constraint_indicator_flags[5], ps.general_level_idc, 240 | ps.min_spatial_segmentation_idc >> 8, 255 & ps.min_spatial_segmentation_idc, 252 | ps.parallelismType, 252 | ps.chroma_format_idc, 248 | ps.bit_depth_luma_minus8, 248 | ps.bit_depth_chroma_minus8, 0x00, parseInt(ps.frame_rate.fps), NALuLengthSize - 1 | ps.temporal_id_nested << 2 | ps.num_temporal_layers << 3 | (ps.frame_rate.fixed ? 64 : 0), units.length]);\n\n      // compute hvcC size in bytes\n      var length = config.length;\n      for (var i = 0; i < units.length; i += 1) {\n        length += 3;\n        for (var j = 0; j < units[i].length; j += 1) {\n          length += 2 + units[i][j].length;\n        }\n      }\n      var hvcC = new Uint8Array(length);\n      hvcC.set(config, 0);\n      length = config.length;\n      // append parameter set units: one vps, one or more sps and pps\n      var iMax = units.length - 1;\n      for (var _i = 0; _i < units.length; _i += 1) {\n        hvcC.set(new Uint8Array([32 + _i | (_i === iMax ? 128 : 0), 0x00, units[_i].length]), length);\n        length += 3;\n        for (var _j = 0; _j < units[_i].length; _j += 1) {\n          hvcC.set(new Uint8Array([units[_i][_j].length >> 8, units[_i][_j].length & 255]), length);\n          length += 2;\n          hvcC.set(units[_i][_j], length);\n          length += units[_i][_j].length;\n        }\n      }\n      var hvcc = MP4.box(MP4.types.hvcC, hvcC);\n      var width = track.width;\n      var height = track.height;\n      var hSpacing = track.pixelRatio[0];\n      var vSpacing = track.pixelRatio[1];\n      return MP4.box(MP4.types.hvc1, new Uint8Array([0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01,\n      // data_reference_index\n      0x00, 0x00,\n      // pre_defined\n      0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // pre_defined\n      width >> 8 & 0xff, width & 0xff,\n      // width\n      height >> 8 & 0xff, height & 0xff,\n      // height\n      0x00, 0x48, 0x00, 0x00,\n      // horizresolution\n      0x00, 0x48, 0x00, 0x00,\n      // vertresolution\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01,\n      // frame_count\n      0x12, 0x64, 0x61, 0x69, 0x6c,\n      // dailymotion/hls.js\n      0x79, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c, 0x73, 0x2e, 0x6a, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // compressorname\n      0x00, 0x18,\n      // depth = 24\n      0x11, 0x11]),\n      // pre_defined = -1\n      hvcc, MP4.box(MP4.types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80,\n      // bufferSizeDB\n      0x00, 0x2d, 0xc6, 0xc0,\n      // maxBitrate\n      0x00, 0x2d, 0xc6, 0xc0])),\n      // avgBitrate\n      MP4.box(MP4.types.pasp, new Uint8Array([hSpacing >> 24,\n      // hSpacing\n      hSpacing >> 16 & 0xff, hSpacing >> 8 & 0xff, hSpacing & 0xff, vSpacing >> 24,\n      // vSpacing\n      vSpacing >> 16 & 0xff, vSpacing >> 8 & 0xff, vSpacing & 0xff])));\n    };\n    return MP4;\n  }();\n  MP4.types = void 0;\n  MP4.HDLR_TYPES = void 0;\n  MP4.STTS = void 0;\n  MP4.STSC = void 0;\n  MP4.STCO = void 0;\n  MP4.STSZ = void 0;\n  MP4.VMHD = void 0;\n  MP4.SMHD = void 0;\n  MP4.STSD = void 0;\n  MP4.FTYP = void 0;\n  MP4.DINF = void 0;\n\n  var MPEG_TS_CLOCK_FREQ_HZ = 90000;\n  function toTimescaleFromBase(baseTime, destScale, srcBase, round) {\n    if (srcBase === void 0) {\n      srcBase = 1;\n    }\n    if (round === void 0) {\n      round = false;\n    }\n    var result = baseTime * destScale * srcBase; // equivalent to `(value * scale) / (1 / base)`\n    return round ? Math.round(result) : result;\n  }\n  function toTimescaleFromScale(baseTime, destScale, srcScale, round) {\n    if (srcScale === void 0) {\n      srcScale = 1;\n    }\n    if (round === void 0) {\n      round = false;\n    }\n    return toTimescaleFromBase(baseTime, destScale, 1 / srcScale, round);\n  }\n  function toMsFromMpegTsClock(baseTime, round) {\n    return toTimescaleFromBase(baseTime, 1000, 1 / MPEG_TS_CLOCK_FREQ_HZ, round);\n  }\n  function toMpegTsClockFromTimescale(baseTime, srcScale) {\n    if (srcScale === void 0) {\n      srcScale = 1;\n    }\n    return toTimescaleFromBase(baseTime, MPEG_TS_CLOCK_FREQ_HZ, 1 / srcScale);\n  }\n\n  var MAX_SILENT_FRAME_DURATION = 10 * 1000; // 10 seconds\n  var AAC_SAMPLES_PER_FRAME = 1024;\n  var MPEG_AUDIO_SAMPLE_PER_FRAME = 1152;\n  var AC3_SAMPLES_PER_FRAME = 1536;\n  var chromeVersion = null;\n  var safariWebkitVersion = null;\n  function createMp4Sample(isKeyframe, duration, size, cts) {\n    return {\n      duration: duration,\n      size: size,\n      cts: cts,\n      flags: {\n        isLeading: 0,\n        isDependedOn: 0,\n        hasRedundancy: 0,\n        degradPrio: 0,\n        dependsOn: isKeyframe ? 2 : 1,\n        isNonSync: isKeyframe ? 0 : 1\n      }\n    };\n  }\n  var MP4Remuxer = /*#__PURE__*/function () {\n    function MP4Remuxer(observer, config, typeSupported, logger) {\n      this.logger = void 0;\n      this.observer = void 0;\n      this.config = void 0;\n      this.typeSupported = void 0;\n      this.ISGenerated = false;\n      this._initPTS = null;\n      this._initDTS = null;\n      this.nextAvcDts = null;\n      this.nextAudioPts = null;\n      this.videoSampleDuration = null;\n      this.isAudioContiguous = false;\n      this.isVideoContiguous = false;\n      this.videoTrackConfig = void 0;\n      this.observer = observer;\n      this.config = config;\n      this.typeSupported = typeSupported;\n      this.logger = logger;\n      this.ISGenerated = false;\n      if (chromeVersion === null) {\n        var userAgent = navigator.userAgent || '';\n        var result = userAgent.match(/Chrome\\/(\\d+)/i);\n        chromeVersion = result ? parseInt(result[1]) : 0;\n      }\n      if (safariWebkitVersion === null) {\n        var _result = navigator.userAgent.match(/Safari\\/(\\d+)/i);\n        safariWebkitVersion = _result ? parseInt(_result[1]) : 0;\n      }\n    }\n    var _proto = MP4Remuxer.prototype;\n    _proto.destroy = function destroy() {\n      // @ts-ignore\n      this.config = this.videoTrackConfig = this._initPTS = this._initDTS = null;\n    };\n    _proto.resetTimeStamp = function resetTimeStamp(defaultTimeStamp) {\n      this.logger.log('[mp4-remuxer]: initPTS & initDTS reset');\n      this._initPTS = this._initDTS = defaultTimeStamp;\n    };\n    _proto.resetNextTimestamp = function resetNextTimestamp() {\n      this.logger.log('[mp4-remuxer]: reset next timestamp');\n      this.isVideoContiguous = false;\n      this.isAudioContiguous = false;\n    };\n    _proto.resetInitSegment = function resetInitSegment() {\n      this.logger.log('[mp4-remuxer]: ISGenerated flag reset');\n      this.ISGenerated = false;\n      this.videoTrackConfig = undefined;\n    };\n    _proto.getVideoStartPts = function getVideoStartPts(videoSamples) {\n      // Get the minimum PTS value relative to the first sample's PTS, normalized for 33-bit wrapping\n      var rolloverDetected = false;\n      var firstPts = videoSamples[0].pts;\n      var startPTS = videoSamples.reduce(function (minPTS, sample) {\n        var pts = sample.pts;\n        var delta = pts - minPTS;\n        if (delta < -4294967296) {\n          // 2^32, see PTSNormalize for reasoning, but we're hitting a rollover here, and we don't want that to impact the timeOffset calculation\n          rolloverDetected = true;\n          pts = normalizePts(pts, firstPts);\n          delta = pts - minPTS;\n        }\n        if (delta > 0) {\n          return minPTS;\n        }\n        return pts;\n      }, firstPts);\n      if (rolloverDetected) {\n        this.logger.debug('PTS rollover detected');\n      }\n      return startPTS;\n    };\n    _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, flush, playlistType) {\n      var video;\n      var audio;\n      var initSegment;\n      var text;\n      var id3;\n      var independent;\n      var audioTimeOffset = timeOffset;\n      var videoTimeOffset = timeOffset;\n\n      // If we're remuxing audio and video progressively, wait until we've received enough samples for each track before proceeding.\n      // This is done to synchronize the audio and video streams. We know if the current segment will have samples if the \"pid\"\n      // parameter is greater than -1. The pid is set when the PMT is parsed, which contains the tracks list.\n      // However, if the initSegment has already been generated, or we've reached the end of a segment (flush),\n      // then we can remux one track without waiting for the other.\n      var hasAudio = audioTrack.pid > -1;\n      var hasVideo = videoTrack.pid > -1;\n      var length = videoTrack.samples.length;\n      var enoughAudioSamples = audioTrack.samples.length > 0;\n      var enoughVideoSamples = flush && length > 0 || length > 1;\n      var canRemuxAvc = (!hasAudio || enoughAudioSamples) && (!hasVideo || enoughVideoSamples) || this.ISGenerated || flush;\n      if (canRemuxAvc) {\n        if (this.ISGenerated) {\n          var _videoTrack$pixelRati, _config$pixelRatio, _videoTrack$pixelRati2, _config$pixelRatio2;\n          var config = this.videoTrackConfig;\n          if (config && (videoTrack.width !== config.width || videoTrack.height !== config.height || ((_videoTrack$pixelRati = videoTrack.pixelRatio) == null ? void 0 : _videoTrack$pixelRati[0]) !== ((_config$pixelRatio = config.pixelRatio) == null ? void 0 : _config$pixelRatio[0]) || ((_videoTrack$pixelRati2 = videoTrack.pixelRatio) == null ? void 0 : _videoTrack$pixelRati2[1]) !== ((_config$pixelRatio2 = config.pixelRatio) == null ? void 0 : _config$pixelRatio2[1])) || !config && enoughVideoSamples || this.nextAudioPts === null && enoughAudioSamples) {\n            this.resetInitSegment();\n          }\n        }\n        if (!this.ISGenerated) {\n          initSegment = this.generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset);\n        }\n        var isVideoContiguous = this.isVideoContiguous;\n        var firstKeyFrameIndex = -1;\n        var firstKeyFramePTS;\n        if (enoughVideoSamples) {\n          firstKeyFrameIndex = findKeyframeIndex(videoTrack.samples);\n          if (!isVideoContiguous && this.config.forceKeyFrameOnDiscontinuity) {\n            independent = true;\n            if (firstKeyFrameIndex > 0) {\n              this.logger.warn(\"[mp4-remuxer]: Dropped \" + firstKeyFrameIndex + \" out of \" + length + \" video samples due to a missing keyframe\");\n              var startPTS = this.getVideoStartPts(videoTrack.samples);\n              videoTrack.samples = videoTrack.samples.slice(firstKeyFrameIndex);\n              videoTrack.dropped += firstKeyFrameIndex;\n              videoTimeOffset += (videoTrack.samples[0].pts - startPTS) / videoTrack.inputTimeScale;\n              firstKeyFramePTS = videoTimeOffset;\n            } else if (firstKeyFrameIndex === -1) {\n              this.logger.warn(\"[mp4-remuxer]: No keyframe found out of \" + length + \" video samples\");\n              independent = false;\n            }\n          }\n        }\n        if (this.ISGenerated) {\n          if (enoughAudioSamples && enoughVideoSamples) {\n            // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)\n            // if first audio DTS is not aligned with first video DTS then we need to take that into account\n            // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small\n            // drift between audio and video streams\n            var _startPTS = this.getVideoStartPts(videoTrack.samples);\n            var tsDelta = normalizePts(audioTrack.samples[0].pts, _startPTS) - _startPTS;\n            var audiovideoTimestampDelta = tsDelta / videoTrack.inputTimeScale;\n            audioTimeOffset += Math.max(0, audiovideoTimestampDelta);\n            videoTimeOffset += Math.max(0, -audiovideoTimestampDelta);\n          }\n\n          // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is calculated in remuxAudio.\n          if (enoughAudioSamples) {\n            // if initSegment was generated without audio samples, regenerate it again\n            if (!audioTrack.samplerate) {\n              this.logger.warn('[mp4-remuxer]: regenerate InitSegment as audio detected');\n              initSegment = this.generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset);\n            }\n            audio = this.remuxAudio(audioTrack, audioTimeOffset, this.isAudioContiguous, accurateTimeOffset, hasVideo || enoughVideoSamples || playlistType === PlaylistLevelType.AUDIO ? videoTimeOffset : undefined);\n            if (enoughVideoSamples) {\n              var audioTrackLength = audio ? audio.endPTS - audio.startPTS : 0;\n              // if initSegment was generated without video samples, regenerate it again\n              if (!videoTrack.inputTimeScale) {\n                this.logger.warn('[mp4-remuxer]: regenerate InitSegment as video detected');\n                initSegment = this.generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset);\n              }\n              video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, audioTrackLength);\n            }\n          } else if (enoughVideoSamples) {\n            video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, 0);\n          }\n          if (video) {\n            video.firstKeyFrame = firstKeyFrameIndex;\n            video.independent = firstKeyFrameIndex !== -1;\n            video.firstKeyFramePTS = firstKeyFramePTS;\n          }\n        }\n      }\n\n      // Allow ID3 and text to remux, even if more audio/video samples are required\n      if (this.ISGenerated && this._initPTS && this._initDTS) {\n        if (id3Track.samples.length) {\n          id3 = flushTextTrackMetadataCueSamples(id3Track, timeOffset, this._initPTS, this._initDTS);\n        }\n        if (textTrack.samples.length) {\n          text = flushTextTrackUserdataCueSamples(textTrack, timeOffset, this._initPTS);\n        }\n      }\n      return {\n        audio: audio,\n        video: video,\n        initSegment: initSegment,\n        independent: independent,\n        text: text,\n        id3: id3\n      };\n    };\n    _proto.generateIS = function generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset) {\n      var audioSamples = audioTrack.samples;\n      var videoSamples = videoTrack.samples;\n      var typeSupported = this.typeSupported;\n      var tracks = {};\n      var _initPTS = this._initPTS;\n      var computePTSDTS = !_initPTS || accurateTimeOffset;\n      var container = 'audio/mp4';\n      var initPTS;\n      var initDTS;\n      var timescale;\n      var trackId;\n      if (computePTSDTS) {\n        initPTS = initDTS = Infinity;\n      }\n      if (audioTrack.config && audioSamples.length) {\n        // let's use audio sampling rate as MP4 time scale.\n        // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)\n        // using audio sampling rate here helps having an integer MP4 frame duration\n        // this avoids potential rounding issue and AV sync issue\n        audioTrack.timescale = audioTrack.samplerate;\n        switch (audioTrack.segmentCodec) {\n          case 'mp3':\n            if (typeSupported.mpeg) {\n              // Chrome and Safari\n              container = 'audio/mpeg';\n              audioTrack.codec = '';\n            } else if (typeSupported.mp3) {\n              // Firefox\n              audioTrack.codec = 'mp3';\n            }\n            break;\n          case 'ac3':\n            audioTrack.codec = 'ac-3';\n            break;\n        }\n        tracks.audio = {\n          id: 'audio',\n          container: container,\n          codec: audioTrack.codec,\n          initSegment: audioTrack.segmentCodec === 'mp3' && typeSupported.mpeg ? new Uint8Array(0) : MP4.initSegment([audioTrack]),\n          metadata: {\n            channelCount: audioTrack.channelCount\n          }\n        };\n        if (computePTSDTS) {\n          trackId = audioTrack.id;\n          timescale = audioTrack.inputTimeScale;\n          if (!_initPTS || timescale !== _initPTS.timescale) {\n            // remember first PTS of this demuxing context. for audio, PTS = DTS\n            initPTS = initDTS = audioSamples[0].pts - Math.round(timescale * timeOffset);\n          } else {\n            computePTSDTS = false;\n          }\n        }\n      }\n      if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\n        // let's use input time scale as MP4 video timescale\n        // we use input time scale straight away to avoid rounding issues on frame duration / cts computation\n        videoTrack.timescale = videoTrack.inputTimeScale;\n        tracks.video = {\n          id: 'main',\n          container: 'video/mp4',\n          codec: videoTrack.codec,\n          initSegment: MP4.initSegment([videoTrack]),\n          metadata: {\n            width: videoTrack.width,\n            height: videoTrack.height\n          }\n        };\n        if (computePTSDTS) {\n          trackId = videoTrack.id;\n          timescale = videoTrack.inputTimeScale;\n          if (!_initPTS || timescale !== _initPTS.timescale) {\n            var startPTS = this.getVideoStartPts(videoSamples);\n            var startOffset = Math.round(timescale * timeOffset);\n            initDTS = Math.min(initDTS, normalizePts(videoSamples[0].dts, startPTS) - startOffset);\n            initPTS = Math.min(initPTS, startPTS - startOffset);\n          } else {\n            computePTSDTS = false;\n          }\n        }\n        this.videoTrackConfig = {\n          width: videoTrack.width,\n          height: videoTrack.height,\n          pixelRatio: videoTrack.pixelRatio\n        };\n      }\n      if (Object.keys(tracks).length) {\n        this.ISGenerated = true;\n        if (computePTSDTS) {\n          this._initPTS = {\n            baseTime: initPTS,\n            timescale: timescale\n          };\n          this._initDTS = {\n            baseTime: initDTS,\n            timescale: timescale\n          };\n        } else {\n          initPTS = timescale = undefined;\n        }\n        return {\n          tracks: tracks,\n          initPTS: initPTS,\n          timescale: timescale,\n          trackId: trackId\n        };\n      }\n    };\n    _proto.remuxVideo = function remuxVideo(track, timeOffset, contiguous, audioTrackLength) {\n      var timeScale = track.inputTimeScale;\n      var inputSamples = track.samples;\n      var outputSamples = [];\n      var nbSamples = inputSamples.length;\n      var initPTS = this._initPTS;\n      var nextAvcDts = this.nextAvcDts;\n      var offset = 8;\n      var mp4SampleDuration = this.videoSampleDuration;\n      var firstDTS;\n      var lastDTS;\n      var minPTS = Number.POSITIVE_INFINITY;\n      var maxPTS = Number.NEGATIVE_INFINITY;\n      var sortSamples = false;\n\n      // if parsed fragment is contiguous with last one, let's use last DTS value as reference\n      if (!contiguous || nextAvcDts === null) {\n        var pts = timeOffset * timeScale;\n        var cts = inputSamples[0].pts - normalizePts(inputSamples[0].dts, inputSamples[0].pts);\n        if (chromeVersion && nextAvcDts !== null && Math.abs(pts - cts - nextAvcDts) < 15000) {\n          // treat as contigous to adjust samples that would otherwise produce video buffer gaps in Chrome\n          contiguous = true;\n        } else {\n          // if not contiguous, let's use target timeOffset\n          nextAvcDts = pts - cts;\n        }\n      }\n\n      // PTS is coded on 33bits, and can loop from -2^32 to 2^32\n      // PTSNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value\n      var initTime = initPTS.baseTime * timeScale / initPTS.timescale;\n      for (var i = 0; i < nbSamples; i++) {\n        var sample = inputSamples[i];\n        sample.pts = normalizePts(sample.pts - initTime, nextAvcDts);\n        sample.dts = normalizePts(sample.dts - initTime, nextAvcDts);\n        if (sample.dts < inputSamples[i > 0 ? i - 1 : i].dts) {\n          sortSamples = true;\n        }\n      }\n\n      // sort video samples by DTS then PTS then demux id order\n      if (sortSamples) {\n        inputSamples.sort(function (a, b) {\n          var deltadts = a.dts - b.dts;\n          var deltapts = a.pts - b.pts;\n          return deltadts || deltapts;\n        });\n      }\n\n      // Get first/last DTS\n      firstDTS = inputSamples[0].dts;\n      lastDTS = inputSamples[inputSamples.length - 1].dts;\n\n      // Sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS\n      // set this constant duration as being the avg delta between consecutive DTS.\n      var inputDuration = lastDTS - firstDTS;\n      var averageSampleDuration = inputDuration ? Math.round(inputDuration / (nbSamples - 1)) : mp4SampleDuration || track.inputTimeScale / 30;\n\n      // if fragment are contiguous, detect hole/overlapping between fragments\n      if (contiguous) {\n        // check timestamp continuity across consecutive fragments (this is to remove inter-fragment gap/hole)\n        var delta = firstDTS - nextAvcDts;\n        var foundHole = delta > averageSampleDuration;\n        var foundOverlap = delta < -1;\n        if (foundHole || foundOverlap) {\n          if (foundHole) {\n            this.logger.warn((track.segmentCodec || '').toUpperCase() + \": \" + toMsFromMpegTsClock(delta, true) + \" ms (\" + delta + \"dts) hole between fragments detected at \" + timeOffset.toFixed(3));\n          } else {\n            this.logger.warn((track.segmentCodec || '').toUpperCase() + \": \" + toMsFromMpegTsClock(-delta, true) + \" ms (\" + delta + \"dts) overlapping between fragments detected at \" + timeOffset.toFixed(3));\n          }\n          if (!foundOverlap || nextAvcDts >= inputSamples[0].pts || chromeVersion) {\n            firstDTS = nextAvcDts;\n            var firstPTS = inputSamples[0].pts - delta;\n            if (foundHole) {\n              inputSamples[0].dts = firstDTS;\n              inputSamples[0].pts = firstPTS;\n            } else {\n              var isPTSOrderRetained = true;\n              for (var _i = 0; _i < inputSamples.length; _i++) {\n                if (inputSamples[_i].dts > firstPTS && isPTSOrderRetained) {\n                  break;\n                }\n                var prevPTS = inputSamples[_i].pts;\n                inputSamples[_i].dts -= delta;\n                inputSamples[_i].pts -= delta;\n\n                // check to see if this sample's PTS order has changed\n                // relative to the next one\n                if (_i < inputSamples.length - 1) {\n                  var nextSamplePTS = inputSamples[_i + 1].pts;\n                  var currentSamplePTS = inputSamples[_i].pts;\n                  var currentOrder = nextSamplePTS <= currentSamplePTS;\n                  var prevOrder = nextSamplePTS <= prevPTS;\n                  isPTSOrderRetained = currentOrder == prevOrder;\n                }\n              }\n            }\n            this.logger.log(\"Video: Initial PTS/DTS adjusted: \" + toMsFromMpegTsClock(firstPTS, true) + \"/\" + toMsFromMpegTsClock(firstDTS, true) + \", delta: \" + toMsFromMpegTsClock(delta, true) + \" ms\");\n          }\n        }\n      }\n      firstDTS = Math.max(0, firstDTS);\n      var nbNalu = 0;\n      var naluLen = 0;\n      var dtsStep = firstDTS;\n      for (var _i2 = 0; _i2 < nbSamples; _i2++) {\n        // compute total/avc sample length and nb of NAL units\n        var _sample = inputSamples[_i2];\n        var units = _sample.units;\n        var nbUnits = units.length;\n        var sampleLen = 0;\n        for (var j = 0; j < nbUnits; j++) {\n          sampleLen += units[j].data.length;\n        }\n        naluLen += sampleLen;\n        nbNalu += nbUnits;\n        _sample.length = sampleLen;\n\n        // ensure sample monotonic DTS\n        if (_sample.dts < dtsStep) {\n          _sample.dts = dtsStep;\n          dtsStep += averageSampleDuration / 4 | 0 || 1;\n        } else {\n          dtsStep = _sample.dts;\n        }\n        minPTS = Math.min(_sample.pts, minPTS);\n        maxPTS = Math.max(_sample.pts, maxPTS);\n      }\n      lastDTS = inputSamples[nbSamples - 1].dts;\n\n      /* concatenate the video data and construct the mdat in place\n        (need 8 more bytes to fill length and mpdat type) */\n      var mdatSize = naluLen + 4 * nbNalu + 8;\n      var mdat;\n      try {\n        mdat = new Uint8Array(mdatSize);\n      } catch (err) {\n        this.observer.emit(Events.ERROR, Events.ERROR, {\n          type: ErrorTypes.MUX_ERROR,\n          details: ErrorDetails.REMUX_ALLOC_ERROR,\n          fatal: false,\n          error: err,\n          bytes: mdatSize,\n          reason: \"fail allocating video mdat \" + mdatSize\n        });\n        return;\n      }\n      var view = new DataView(mdat.buffer);\n      view.setUint32(0, mdatSize);\n      mdat.set(MP4.types.mdat, 4);\n      var stretchedLastFrame = false;\n      var minDtsDelta = Number.POSITIVE_INFINITY;\n      var minPtsDelta = Number.POSITIVE_INFINITY;\n      var maxDtsDelta = Number.NEGATIVE_INFINITY;\n      var maxPtsDelta = Number.NEGATIVE_INFINITY;\n      for (var _i3 = 0; _i3 < nbSamples; _i3++) {\n        var VideoSample = inputSamples[_i3];\n        var VideoSampleUnits = VideoSample.units;\n        var mp4SampleLength = 0;\n        // convert NALU bitstream to MP4 format (prepend NALU with size field)\n        for (var _j = 0, _nbUnits = VideoSampleUnits.length; _j < _nbUnits; _j++) {\n          var unit = VideoSampleUnits[_j];\n          var unitData = unit.data;\n          var unitDataLen = unit.data.byteLength;\n          view.setUint32(offset, unitDataLen);\n          offset += 4;\n          mdat.set(unitData, offset);\n          offset += unitDataLen;\n          mp4SampleLength += 4 + unitDataLen;\n        }\n\n        // expected sample duration is the Decoding Timestamp diff of consecutive samples\n        var ptsDelta = void 0;\n        if (_i3 < nbSamples - 1) {\n          mp4SampleDuration = inputSamples[_i3 + 1].dts - VideoSample.dts;\n          ptsDelta = inputSamples[_i3 + 1].pts - VideoSample.pts;\n        } else {\n          var config = this.config;\n          var lastFrameDuration = _i3 > 0 ? VideoSample.dts - inputSamples[_i3 - 1].dts : averageSampleDuration;\n          ptsDelta = _i3 > 0 ? VideoSample.pts - inputSamples[_i3 - 1].pts : averageSampleDuration;\n          if (config.stretchShortVideoTrack && this.nextAudioPts !== null) {\n            // In some cases, a segment's audio track duration may exceed the video track duration.\n            // Since we've already remuxed audio, and we know how long the audio track is, we look to\n            // see if the delta to the next segment is longer than maxBufferHole.\n            // If so, playback would potentially get stuck, so we artificially inflate\n            // the duration of the last frame to minimize any potential gap between segments.\n            var gapTolerance = Math.floor(config.maxBufferHole * timeScale);\n            var deltaToFrameEnd = (audioTrackLength ? minPTS + audioTrackLength * timeScale : this.nextAudioPts) - VideoSample.pts;\n            if (deltaToFrameEnd > gapTolerance) {\n              // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video\n              // frame overlap. maxBufferHole should be >> lastFrameDuration anyway.\n              mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;\n              if (mp4SampleDuration < 0) {\n                mp4SampleDuration = lastFrameDuration;\n              } else {\n                stretchedLastFrame = true;\n              }\n              this.logger.log(\"[mp4-remuxer]: It is approximately \" + deltaToFrameEnd / 90 + \" ms to the next segment; using duration \" + mp4SampleDuration / 90 + \" ms for the last video frame.\");\n            } else {\n              mp4SampleDuration = lastFrameDuration;\n            }\n          } else {\n            mp4SampleDuration = lastFrameDuration;\n          }\n        }\n        var compositionTimeOffset = Math.round(VideoSample.pts - VideoSample.dts);\n        minDtsDelta = Math.min(minDtsDelta, mp4SampleDuration);\n        maxDtsDelta = Math.max(maxDtsDelta, mp4SampleDuration);\n        minPtsDelta = Math.min(minPtsDelta, ptsDelta);\n        maxPtsDelta = Math.max(maxPtsDelta, ptsDelta);\n        outputSamples.push(createMp4Sample(VideoSample.key, mp4SampleDuration, mp4SampleLength, compositionTimeOffset));\n      }\n      if (outputSamples.length) {\n        if (chromeVersion) {\n          if (chromeVersion < 70) {\n            // Chrome workaround, mark first sample as being a Random Access Point (keyframe) to avoid sourcebuffer append issue\n            // https://code.google.com/p/chromium/issues/detail?id=229412\n            var flags = outputSamples[0].flags;\n            flags.dependsOn = 2;\n            flags.isNonSync = 0;\n          }\n        } else if (safariWebkitVersion) {\n          // Fix for \"CNN special report, with CC\" in test-streams (Safari browser only)\n          // Ignore DTS when frame durations are irregular. Safari MSE does not handle this leading to gaps.\n          if (maxPtsDelta - minPtsDelta < maxDtsDelta - minDtsDelta && averageSampleDuration / maxDtsDelta < 0.025 && outputSamples[0].cts === 0) {\n            this.logger.warn('Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.');\n            var dts = firstDTS;\n            for (var _i4 = 0, len = outputSamples.length; _i4 < len; _i4++) {\n              var nextDts = dts + outputSamples[_i4].duration;\n              var _pts = dts + outputSamples[_i4].cts;\n              if (_i4 < len - 1) {\n                var nextPts = nextDts + outputSamples[_i4 + 1].cts;\n                outputSamples[_i4].duration = nextPts - _pts;\n              } else {\n                outputSamples[_i4].duration = _i4 ? outputSamples[_i4 - 1].duration : averageSampleDuration;\n              }\n              outputSamples[_i4].cts = 0;\n              dts = nextDts;\n            }\n          }\n        }\n      }\n      // next AVC/HEVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)\n      mp4SampleDuration = stretchedLastFrame || !mp4SampleDuration ? averageSampleDuration : mp4SampleDuration;\n      this.nextAvcDts = nextAvcDts = lastDTS + mp4SampleDuration;\n      this.videoSampleDuration = mp4SampleDuration;\n      this.isVideoContiguous = true;\n      var moof = MP4.moof(track.sequenceNumber++, firstDTS, _extends(track, {\n        samples: outputSamples\n      }));\n      var type = 'video';\n      var data = {\n        data1: moof,\n        data2: mdat,\n        startPTS: minPTS / timeScale,\n        endPTS: (maxPTS + mp4SampleDuration) / timeScale,\n        startDTS: firstDTS / timeScale,\n        endDTS: nextAvcDts / timeScale,\n        type: type,\n        hasAudio: false,\n        hasVideo: true,\n        nb: outputSamples.length,\n        dropped: track.dropped\n      };\n      track.samples = [];\n      track.dropped = 0;\n      return data;\n    };\n    _proto.getSamplesPerFrame = function getSamplesPerFrame(track) {\n      switch (track.segmentCodec) {\n        case 'mp3':\n          return MPEG_AUDIO_SAMPLE_PER_FRAME;\n        case 'ac3':\n          return AC3_SAMPLES_PER_FRAME;\n        default:\n          return AAC_SAMPLES_PER_FRAME;\n      }\n    };\n    _proto.remuxAudio = function remuxAudio(track, timeOffset, contiguous, accurateTimeOffset, videoTimeOffset) {\n      var inputTimeScale = track.inputTimeScale;\n      var mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;\n      var scaleFactor = inputTimeScale / mp4timeScale;\n      var mp4SampleDuration = this.getSamplesPerFrame(track);\n      var inputSampleDuration = mp4SampleDuration * scaleFactor;\n      var initPTS = this._initPTS;\n      var rawMPEG = track.segmentCodec === 'mp3' && this.typeSupported.mpeg;\n      var outputSamples = [];\n      var alignedWithVideo = videoTimeOffset !== undefined;\n      var inputSamples = track.samples;\n      var offset = rawMPEG ? 0 : 8;\n      var nextAudioPts = this.nextAudioPts || -1;\n\n      // window.audioSamples ? window.audioSamples.push(inputSamples.map(s => s.pts)) : (window.audioSamples = [inputSamples.map(s => s.pts)]);\n\n      // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),\n      // for sake of clarity:\n      // consecutive fragments are frags with\n      //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n      //  - less than 20 audio frames distance\n      // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n      // this helps ensuring audio continuity\n      // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame\n      var timeOffsetMpegTS = timeOffset * inputTimeScale;\n      var initTime = initPTS.baseTime * inputTimeScale / initPTS.timescale;\n      this.isAudioContiguous = contiguous = contiguous || inputSamples.length && nextAudioPts > 0 && (accurateTimeOffset && Math.abs(timeOffsetMpegTS - nextAudioPts) < 9000 || Math.abs(normalizePts(inputSamples[0].pts - initTime, timeOffsetMpegTS) - nextAudioPts) < 20 * inputSampleDuration);\n\n      // compute normalized PTS\n      inputSamples.forEach(function (sample) {\n        sample.pts = normalizePts(sample.pts - initTime, timeOffsetMpegTS);\n      });\n      if (!contiguous || nextAudioPts < 0) {\n        // filter out sample with negative PTS that are not playable anyway\n        // if we don't remove these negative samples, they will shift all audio samples forward.\n        // leading to audio overlap between current / next fragment\n        inputSamples = inputSamples.filter(function (sample) {\n          return sample.pts >= 0;\n        });\n\n        // in case all samples have negative PTS, and have been filtered out, return now\n        if (!inputSamples.length) {\n          return;\n        }\n        if (videoTimeOffset === 0) {\n          // Set the start to 0 to match video so that start gaps larger than inputSampleDuration are filled with silence\n          nextAudioPts = 0;\n        } else if (accurateTimeOffset && !alignedWithVideo) {\n          // When not seeking, not live, and LevelDetails.PTSKnown, use fragment start as predicted next audio PTS\n          nextAudioPts = Math.max(0, timeOffsetMpegTS);\n        } else {\n          // if frags are not contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS\n          nextAudioPts = inputSamples[0].pts;\n        }\n      }\n\n      // If the audio track is missing samples, the frames seem to get \"left-shifted\" within the\n      // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.\n      // In an effort to prevent this from happening, we inject frames here where there are gaps.\n      // When possible, we inject a silent frame; when that's not possible, we duplicate the last\n      // frame.\n\n      if (track.segmentCodec === 'aac') {\n        var maxAudioFramesDrift = this.config.maxAudioFramesDrift;\n        for (var i = 0, nextPts = nextAudioPts; i < inputSamples.length; i++) {\n          // First, let's see how far off this frame is from where we expect it to be\n          var sample = inputSamples[i];\n          var pts = sample.pts;\n          var delta = pts - nextPts;\n          var duration = Math.abs(1000 * delta / inputTimeScale);\n\n          // When remuxing with video, if we're overlapping by more than a duration, drop this sample to stay in sync\n          if (delta <= -maxAudioFramesDrift * inputSampleDuration && alignedWithVideo) {\n            if (i === 0) {\n              this.logger.warn(\"Audio frame @ \" + (pts / inputTimeScale).toFixed(3) + \"s overlaps nextAudioPts by \" + Math.round(1000 * delta / inputTimeScale) + \" ms.\");\n              this.nextAudioPts = nextAudioPts = nextPts = pts;\n            }\n          } // eslint-disable-line brace-style\n\n          // Insert missing frames if:\n          // 1: We're more than maxAudioFramesDrift frame away\n          // 2: Not more than MAX_SILENT_FRAME_DURATION away\n          // 3: currentTime (aka nextPtsNorm) is not 0\n          // 4: remuxing with video (videoTimeOffset !== undefined)\n          else if (delta >= maxAudioFramesDrift * inputSampleDuration && duration < MAX_SILENT_FRAME_DURATION && alignedWithVideo) {\n            var missing = Math.round(delta / inputSampleDuration);\n            // Adjust nextPts so that silent samples are aligned with media pts. This will prevent media samples from\n            // later being shifted if nextPts is based on timeOffset and delta is not a multiple of inputSampleDuration.\n            nextPts = pts - missing * inputSampleDuration;\n            if (nextPts < 0) {\n              missing--;\n              nextPts += inputSampleDuration;\n            }\n            if (i === 0) {\n              this.nextAudioPts = nextAudioPts = nextPts;\n            }\n            this.logger.warn(\"[mp4-remuxer]: Injecting \" + missing + \" audio frame @ \" + (nextPts / inputTimeScale).toFixed(3) + \"s due to \" + Math.round(1000 * delta / inputTimeScale) + \" ms gap.\");\n            for (var j = 0; j < missing; j++) {\n              var newStamp = Math.max(nextPts, 0);\n              var fillFrame = AAC.getSilentFrame(track.parsedCodec || track.manifestCodec || track.codec, track.channelCount);\n              if (!fillFrame) {\n                this.logger.log('[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.');\n                fillFrame = sample.unit.subarray();\n              }\n              inputSamples.splice(i, 0, {\n                unit: fillFrame,\n                pts: newStamp\n              });\n              nextPts += inputSampleDuration;\n              i++;\n            }\n          }\n          sample.pts = nextPts;\n          nextPts += inputSampleDuration;\n        }\n      }\n      var firstPTS = null;\n      var lastPTS = null;\n      var mdat;\n      var mdatSize = 0;\n      var sampleLength = inputSamples.length;\n      while (sampleLength--) {\n        mdatSize += inputSamples[sampleLength].unit.byteLength;\n      }\n      for (var _j2 = 0, _nbSamples = inputSamples.length; _j2 < _nbSamples; _j2++) {\n        var audioSample = inputSamples[_j2];\n        var unit = audioSample.unit;\n        var _pts2 = audioSample.pts;\n        if (lastPTS !== null) {\n          // If we have more than one sample, set the duration of the sample to the \"real\" duration; the PTS diff with\n          // the previous sample\n          var prevSample = outputSamples[_j2 - 1];\n          prevSample.duration = Math.round((_pts2 - lastPTS) / scaleFactor);\n        } else {\n          if (contiguous && track.segmentCodec === 'aac') {\n            // set PTS/DTS to expected PTS/DTS\n            _pts2 = nextAudioPts;\n          }\n          // remember first PTS of our audioSamples\n          firstPTS = _pts2;\n          if (mdatSize > 0) {\n            /* concatenate the audio data and construct the mdat in place\n              (need 8 more bytes to fill length and mdat type) */\n            mdatSize += offset;\n            try {\n              mdat = new Uint8Array(mdatSize);\n            } catch (err) {\n              this.observer.emit(Events.ERROR, Events.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.REMUX_ALLOC_ERROR,\n                fatal: false,\n                error: err,\n                bytes: mdatSize,\n                reason: \"fail allocating audio mdat \" + mdatSize\n              });\n              return;\n            }\n            if (!rawMPEG) {\n              var view = new DataView(mdat.buffer);\n              view.setUint32(0, mdatSize);\n              mdat.set(MP4.types.mdat, 4);\n            }\n          } else {\n            // no audio samples\n            return;\n          }\n        }\n        mdat.set(unit, offset);\n        var unitLen = unit.byteLength;\n        offset += unitLen;\n        // Default the sample's duration to the computed mp4SampleDuration, which will either be 1024 for AAC or 1152 for MPEG\n        // In the case that we have 1 sample, this will be the duration. If we have more than one sample, the duration\n        // becomes the PTS diff with the previous sample\n        outputSamples.push(createMp4Sample(true, mp4SampleDuration, unitLen, 0));\n        lastPTS = _pts2;\n      }\n\n      // We could end up with no audio samples if all input samples were overlapping with the previously remuxed ones\n      var nbSamples = outputSamples.length;\n      if (!nbSamples) {\n        return;\n      }\n\n      // The next audio sample PTS should be equal to last sample PTS + duration\n      var lastSample = outputSamples[outputSamples.length - 1];\n      this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSample.duration;\n\n      // Set the track samples from inputSamples to outputSamples before remuxing\n      var moof = rawMPEG ? new Uint8Array(0) : MP4.moof(track.sequenceNumber++, firstPTS / scaleFactor, _extends({}, track, {\n        samples: outputSamples\n      }));\n\n      // Clear the track samples. This also clears the samples array in the demuxer, since the reference is shared\n      track.samples = [];\n      var start = firstPTS / inputTimeScale;\n      var end = nextAudioPts / inputTimeScale;\n      var type = 'audio';\n      var audioData = {\n        data1: moof,\n        data2: mdat,\n        startPTS: start,\n        endPTS: end,\n        startDTS: start,\n        endDTS: end,\n        type: type,\n        hasAudio: true,\n        hasVideo: false,\n        nb: nbSamples\n      };\n      this.isAudioContiguous = true;\n      return audioData;\n    };\n    return MP4Remuxer;\n  }();\n  function normalizePts(value, reference) {\n    var offset;\n    if (reference === null) {\n      return value;\n    }\n    if (reference < value) {\n      // - 2^33\n      offset = -8589934592;\n    } else {\n      // + 2^33\n      offset = 8589934592;\n    }\n    /* PTS is 33bit (from 0 to 2^33 -1)\n      if diff between value and reference is bigger than half of the amplitude (2^32) then it means that\n      PTS looping occured. fill the gap */\n    while (Math.abs(value - reference) > 4294967296) {\n      value += offset;\n    }\n    return value;\n  }\n  function findKeyframeIndex(samples) {\n    for (var i = 0; i < samples.length; i++) {\n      if (samples[i].key) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  function flushTextTrackMetadataCueSamples(track, timeOffset, initPTS, initDTS) {\n    var length = track.samples.length;\n    if (!length) {\n      return;\n    }\n    var inputTimeScale = track.inputTimeScale;\n    for (var index = 0; index < length; index++) {\n      var sample = track.samples[index];\n      // setting id3 pts, dts to relative time\n      // using this._initPTS and this._initDTS to calculate relative time\n      sample.pts = normalizePts(sample.pts - initPTS.baseTime * inputTimeScale / initPTS.timescale, timeOffset * inputTimeScale) / inputTimeScale;\n      sample.dts = normalizePts(sample.dts - initDTS.baseTime * inputTimeScale / initDTS.timescale, timeOffset * inputTimeScale) / inputTimeScale;\n    }\n    var samples = track.samples;\n    track.samples = [];\n    return {\n      samples: samples\n    };\n  }\n  function flushTextTrackUserdataCueSamples(track, timeOffset, initPTS) {\n    var length = track.samples.length;\n    if (!length) {\n      return;\n    }\n    var inputTimeScale = track.inputTimeScale;\n    for (var index = 0; index < length; index++) {\n      var sample = track.samples[index];\n      // setting text pts, dts to relative time\n      // using this._initPTS and this._initDTS to calculate relative time\n      sample.pts = normalizePts(sample.pts - initPTS.baseTime * inputTimeScale / initPTS.timescale, timeOffset * inputTimeScale) / inputTimeScale;\n    }\n    track.samples.sort(function (a, b) {\n      return a.pts - b.pts;\n    });\n    var samples = track.samples;\n    track.samples = [];\n    return {\n      samples: samples\n    };\n  }\n\n  var PassThroughRemuxer = /*#__PURE__*/function () {\n    function PassThroughRemuxer(observer, config, typeSupported, logger) {\n      this.logger = void 0;\n      this.emitInitSegment = false;\n      this.audioCodec = void 0;\n      this.videoCodec = void 0;\n      this.initData = void 0;\n      this.initPTS = null;\n      this.initTracks = void 0;\n      this.lastEndTime = null;\n      this.isVideoContiguous = false;\n      this.logger = logger;\n    }\n    var _proto = PassThroughRemuxer.prototype;\n    _proto.destroy = function destroy() {};\n    _proto.resetTimeStamp = function resetTimeStamp(defaultInitPTS) {\n      this.initPTS = defaultInitPTS;\n      this.lastEndTime = null;\n    };\n    _proto.resetNextTimestamp = function resetNextTimestamp() {\n      this.isVideoContiguous = false;\n      this.lastEndTime = null;\n    };\n    _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, decryptdata) {\n      this.audioCodec = audioCodec;\n      this.videoCodec = videoCodec;\n      this.generateInitSegment(patchEncyptionData(initSegment, decryptdata));\n      this.emitInitSegment = true;\n    };\n    _proto.generateInitSegment = function generateInitSegment(initSegment) {\n      var audioCodec = this.audioCodec,\n        videoCodec = this.videoCodec;\n      if (!(initSegment != null && initSegment.byteLength)) {\n        this.initTracks = undefined;\n        this.initData = undefined;\n        return;\n      }\n      var initData = this.initData = parseInitSegment(initSegment);\n\n      // Get codec from initSegment\n      if (initData.audio) {\n        audioCodec = getParsedTrackCodec(initData.audio, ElementaryStreamTypes.AUDIO, this.logger);\n      }\n      if (initData.video) {\n        videoCodec = getParsedTrackCodec(initData.video, ElementaryStreamTypes.VIDEO, this.logger);\n      }\n      var tracks = {};\n      if (initData.audio && initData.video) {\n        tracks.audiovideo = {\n          container: 'video/mp4',\n          codec: audioCodec + ',' + videoCodec,\n          supplemental: initData.video.supplemental,\n          initSegment: initSegment,\n          id: 'main'\n        };\n      } else if (initData.audio) {\n        tracks.audio = {\n          container: 'audio/mp4',\n          codec: audioCodec,\n          initSegment: initSegment,\n          id: 'audio'\n        };\n      } else if (initData.video) {\n        tracks.video = {\n          container: 'video/mp4',\n          codec: videoCodec,\n          supplemental: initData.video.supplemental,\n          initSegment: initSegment,\n          id: 'main'\n        };\n      } else {\n        this.logger.warn('[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.');\n      }\n      this.initTracks = tracks;\n    };\n    _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset) {\n      var _initData, _initData2;\n      var initPTS = this.initPTS,\n        lastEndTime = this.lastEndTime;\n      var result = {\n        audio: undefined,\n        video: undefined,\n        text: textTrack,\n        id3: id3Track,\n        initSegment: undefined\n      };\n\n      // If we haven't yet set a lastEndDTS, or it was reset, set it to the provided timeOffset. We want to use the\n      // lastEndDTS over timeOffset whenever possible; during progressive playback, the media source will not update\n      // the media duration (which is what timeOffset is provided as) before we need to process the next chunk.\n      if (!isFiniteNumber(lastEndTime)) {\n        lastEndTime = this.lastEndTime = timeOffset || 0;\n      }\n\n      // The binary segment data is added to the videoTrack in the mp4demuxer. We don't check to see if the data is only\n      // audio or video (or both); adding it to video was an arbitrary choice.\n      var data = videoTrack.samples;\n      if (!(data != null && data.length)) {\n        return result;\n      }\n      var initSegment = {\n        initPTS: undefined,\n        timescale: undefined,\n        trackId: undefined\n      };\n      var initData = this.initData;\n      if (!((_initData = initData) != null && _initData.length)) {\n        this.generateInitSegment(data);\n        initData = this.initData;\n      }\n      if (!((_initData2 = initData) != null && _initData2.length)) {\n        // We can't remux if the initSegment could not be generated\n        this.logger.warn('[passthrough-remuxer.ts]: Failed to generate initSegment.');\n        return result;\n      }\n      if (this.emitInitSegment) {\n        initSegment.tracks = this.initTracks;\n        this.emitInitSegment = false;\n      }\n      var trackSampleData = getSampleData(data, initData, this.logger);\n      var audioSampleTimestamps = initData.audio ? trackSampleData[initData.audio.id] : null;\n      var videoSampleTimestamps = initData.video ? trackSampleData[initData.video.id] : null;\n      var videoStartTime = toStartEndOrDefault(videoSampleTimestamps, Infinity);\n      var audioStartTime = toStartEndOrDefault(audioSampleTimestamps, Infinity);\n      var videoEndTime = toStartEndOrDefault(videoSampleTimestamps, 0, true);\n      var audioEndTime = toStartEndOrDefault(audioSampleTimestamps, 0, true);\n      var baseOffsetSamples;\n      var decodeTime = timeOffset;\n      var duration = 0;\n      if (audioSampleTimestamps && (!videoSampleTimestamps || !initPTS && audioStartTime < videoStartTime || initPTS && initPTS.trackId === initData.audio.id)) {\n        initSegment.trackId = initData.audio.id;\n        baseOffsetSamples = audioSampleTimestamps;\n        duration = audioEndTime - audioStartTime;\n      } else if (videoSampleTimestamps) {\n        initSegment.trackId = initData.video.id;\n        baseOffsetSamples = videoSampleTimestamps;\n        duration = videoEndTime - videoStartTime;\n      }\n      if (baseOffsetSamples) {\n        var timescale = baseOffsetSamples.timescale;\n        decodeTime = baseOffsetSamples.start / timescale;\n        initSegment.timescale = timescale;\n        if (!initPTS) {\n          initSegment.initPTS = baseOffsetSamples.start - timeOffset * timescale;\n          this.initPTS = initPTS = {\n            baseTime: initSegment.initPTS,\n            timescale: timescale,\n            trackId: initSegment.trackId\n          };\n        }\n      }\n      if ((accurateTimeOffset || !initPTS) && (isInvalidInitPts(initPTS, decodeTime, timeOffset, duration) || initSegment.timescale !== initPTS.timescale)) {\n        initSegment.initPTS = decodeTime - timeOffset;\n        if (initPTS && initPTS.timescale === 1) {\n          this.logger.warn(\"Adjusting initPTS @\" + timeOffset + \" from \" + initPTS.baseTime / initPTS.timescale + \" to \" + initSegment.initPTS);\n        }\n        this.initPTS = initPTS = {\n          baseTime: initSegment.initPTS,\n          timescale: 1\n        };\n      }\n      var startTime = audioTrack ? decodeTime - initPTS.baseTime / initPTS.timescale : lastEndTime;\n      offsetStartDTS(initData, data, initPTS.baseTime / initPTS.timescale);\n      var endTime = startTime + duration;\n      if (duration > 0) {\n        this.lastEndTime = endTime;\n      } else {\n        this.logger.warn('Duration parsed from mp4 should be greater than zero');\n        this.resetNextTimestamp();\n      }\n      var hasAudio = !!initData.audio;\n      var hasVideo = !!initData.video;\n      var type = '';\n      if (hasAudio) {\n        type += 'audio';\n      }\n      if (hasVideo) {\n        type += 'video';\n      }\n      var track = {\n        data1: data,\n        startPTS: startTime,\n        startDTS: startTime,\n        endPTS: endTime,\n        endDTS: endTime,\n        type: type,\n        hasAudio: hasAudio,\n        hasVideo: hasVideo,\n        nb: 1,\n        dropped: 0\n      };\n      result.audio = hasAudio && !hasVideo ? track : undefined;\n      result.video = hasVideo ? track : undefined;\n      var videoSampleCount = videoSampleTimestamps == null ? void 0 : videoSampleTimestamps.sampleCount;\n      if (videoSampleCount) {\n        var firstKeyFrame = videoSampleTimestamps.keyFrameIndex;\n        var independent = firstKeyFrame !== -1;\n        track.nb = videoSampleCount;\n        track.dropped = firstKeyFrame === 0 || this.isVideoContiguous ? 0 : independent ? firstKeyFrame : videoSampleCount;\n        track.independent = independent;\n        track.firstKeyFrame = firstKeyFrame;\n        if (independent && videoSampleTimestamps.keyFrameStart) {\n          track.firstKeyFramePTS = videoSampleTimestamps.keyFrameStart - initPTS.baseTime / initPTS.timescale;\n        }\n        if (!this.isVideoContiguous) {\n          result.independent = independent;\n        }\n        this.isVideoContiguous || (this.isVideoContiguous = independent);\n        if (track.dropped) {\n          this.logger.warn(\"fmp4 does not start with IDR: firstIDR \" + firstKeyFrame + \"/\" + videoSampleCount + \" dropped: \" + track.dropped + \" pts: \" + (track.firstKeyFramePTS || 'NA'));\n        }\n      }\n      result.initSegment = initSegment;\n      result.id3 = flushTextTrackMetadataCueSamples(id3Track, timeOffset, initPTS, initPTS);\n      if (textTrack.samples.length) {\n        result.text = flushTextTrackUserdataCueSamples(textTrack, timeOffset, initPTS);\n      }\n      return result;\n    };\n    return PassThroughRemuxer;\n  }();\n  function toStartEndOrDefault(trackTimes, defaultValue, end) {\n    if (end === void 0) {\n      end = false;\n    }\n    return (trackTimes == null ? void 0 : trackTimes.start) !== undefined ? (trackTimes.start + (end ? trackTimes.duration : 0)) / trackTimes.timescale : defaultValue;\n  }\n  function isInvalidInitPts(initPTS, startDTS, timeOffset, duration) {\n    if (initPTS === null) {\n      return true;\n    }\n    // InitPTS is invalid when distance from program would be more than segment duration or a minimum of one second\n    var minDuration = Math.max(duration, 1);\n    var startTime = startDTS - initPTS.baseTime / initPTS.timescale;\n    return Math.abs(startTime - timeOffset) > minDuration;\n  }\n  function getParsedTrackCodec(track, type, logger) {\n    var parsedCodec = track == null ? void 0 : track.codec;\n    if (parsedCodec && parsedCodec.length > 4) {\n      return parsedCodec;\n    }\n    if (type === ElementaryStreamTypes.AUDIO) {\n      if (parsedCodec === 'ec-3' || parsedCodec === 'ac-3' || parsedCodec === 'alac') {\n        return parsedCodec;\n      }\n      if (parsedCodec === 'fLaC' || parsedCodec === 'Opus') {\n        // Opting not to get `preferManagedMediaSource` from player config for isSupported() check for simplicity\n        var preferManagedMediaSource = false;\n        return getCodecCompatibleName(parsedCodec, preferManagedMediaSource);\n      }\n      logger.warn(\"Unhandled audio codec \\\"\" + parsedCodec + \"\\\" in mp4 MAP\");\n      return parsedCodec || 'mp4a';\n    }\n    // Provide defaults based on codec type\n    // This allows for some playback of some fmp4 playlists without CODECS defined in manifest\n    logger.warn(\"Unhandled video codec \\\"\" + parsedCodec + \"\\\" in mp4 MAP\");\n    return parsedCodec || 'avc1';\n  }\n\n  var now;\n  // performance.now() not available on WebWorker, at least on Safari Desktop\n  try {\n    now = self.performance.now.bind(self.performance);\n  } catch (err) {\n    now = Date.now;\n  }\n  var muxConfig = [{\n    demux: MP4Demuxer,\n    remux: PassThroughRemuxer\n  }, {\n    demux: TSDemuxer,\n    remux: MP4Remuxer\n  }, {\n    demux: AACDemuxer,\n    remux: MP4Remuxer\n  }, {\n    demux: MP3Demuxer,\n    remux: MP4Remuxer\n  }];\n  {\n    muxConfig.splice(2, 0, {\n      demux: AC3Demuxer,\n      remux: MP4Remuxer\n    });\n  }\n  var Transmuxer = /*#__PURE__*/function () {\n    function Transmuxer(observer, typeSupported, config, vendor, id, logger) {\n      this.asyncResult = false;\n      this.logger = void 0;\n      this.observer = void 0;\n      this.typeSupported = void 0;\n      this.config = void 0;\n      this.id = void 0;\n      this.demuxer = void 0;\n      this.remuxer = void 0;\n      this.decrypter = void 0;\n      this.probe = void 0;\n      this.decryptionPromise = null;\n      this.transmuxConfig = void 0;\n      this.currentTransmuxState = void 0;\n      this.observer = observer;\n      this.typeSupported = typeSupported;\n      this.config = config;\n      this.id = id;\n      this.logger = logger;\n    }\n    var _proto = Transmuxer.prototype;\n    _proto.configure = function configure(transmuxConfig) {\n      this.transmuxConfig = transmuxConfig;\n      if (this.decrypter) {\n        this.decrypter.reset();\n      }\n    };\n    _proto.push = function push(data, decryptdata, chunkMeta, state) {\n      var _this = this;\n      var stats = chunkMeta.transmuxing;\n      stats.executeStart = now();\n      var uintData = new Uint8Array(data);\n      var currentTransmuxState = this.currentTransmuxState,\n        transmuxConfig = this.transmuxConfig;\n      if (state) {\n        this.currentTransmuxState = state;\n      }\n      var _ref = state || currentTransmuxState,\n        contiguous = _ref.contiguous,\n        discontinuity = _ref.discontinuity,\n        trackSwitch = _ref.trackSwitch,\n        accurateTimeOffset = _ref.accurateTimeOffset,\n        timeOffset = _ref.timeOffset,\n        initSegmentChange = _ref.initSegmentChange;\n      var audioCodec = transmuxConfig.audioCodec,\n        videoCodec = transmuxConfig.videoCodec,\n        defaultInitPts = transmuxConfig.defaultInitPts,\n        duration = transmuxConfig.duration,\n        initSegmentData = transmuxConfig.initSegmentData;\n      var keyData = getEncryptionType(uintData, decryptdata);\n      if (keyData && isFullSegmentEncryption(keyData.method)) {\n        var decrypter = this.getDecrypter();\n        var aesMode = getAesModeFromFullSegmentMethod(keyData.method);\n\n        // Software decryption is synchronous; webCrypto is not\n        if (decrypter.isSync()) {\n          // Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached\n          // data is handled in the flush() call\n          var decryptedData = decrypter.softwareDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer, aesMode);\n          // For Low-Latency HLS Parts, decrypt in place, since part parsing is expected on push progress\n          var loadingParts = chunkMeta.part > -1;\n          if (loadingParts) {\n            var _data = decrypter.flush();\n            decryptedData = _data ? _data.buffer : _data;\n          }\n          if (!decryptedData) {\n            stats.executeEnd = now();\n            return emptyResult(chunkMeta);\n          }\n          uintData = new Uint8Array(decryptedData);\n        } else {\n          this.asyncResult = true;\n          this.decryptionPromise = decrypter.webCryptoDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer, aesMode).then(function (decryptedData) {\n            // Calling push here is important; if flush() is called while this is still resolving, this ensures that\n            // the decrypted data has been transmuxed\n            var result = _this.push(decryptedData, null, chunkMeta);\n            _this.decryptionPromise = null;\n            return result;\n          });\n          return this.decryptionPromise;\n        }\n      }\n      var resetMuxers = this.needsProbing(discontinuity, trackSwitch);\n      if (resetMuxers) {\n        var error = this.configureTransmuxer(uintData);\n        if (error) {\n          this.logger.warn(\"[transmuxer] \" + error.message);\n          this.observer.emit(Events.ERROR, Events.ERROR, {\n            type: ErrorTypes.MEDIA_ERROR,\n            details: ErrorDetails.FRAG_PARSING_ERROR,\n            fatal: false,\n            error: error,\n            reason: error.message\n          });\n          stats.executeEnd = now();\n          return emptyResult(chunkMeta);\n        }\n      }\n      if (discontinuity || trackSwitch || initSegmentChange || resetMuxers) {\n        this.resetInitSegment(initSegmentData, audioCodec, videoCodec, duration, decryptdata);\n      }\n      if (discontinuity || initSegmentChange || resetMuxers) {\n        this.resetInitialTimestamp(defaultInitPts);\n      }\n      if (!contiguous) {\n        this.resetContiguity();\n      }\n      var result = this.transmux(uintData, keyData, timeOffset, accurateTimeOffset, chunkMeta);\n      this.asyncResult = isPromise(result);\n      var currentState = this.currentTransmuxState;\n      currentState.contiguous = true;\n      currentState.discontinuity = false;\n      currentState.trackSwitch = false;\n      stats.executeEnd = now();\n      return result;\n    }\n\n    // Due to data caching, flush calls can produce more than one TransmuxerResult (hence the Array type)\n    ;\n    _proto.flush = function flush(chunkMeta) {\n      var _this2 = this;\n      var stats = chunkMeta.transmuxing;\n      stats.executeStart = now();\n      var decrypter = this.decrypter,\n        currentTransmuxState = this.currentTransmuxState,\n        decryptionPromise = this.decryptionPromise;\n      if (decryptionPromise) {\n        this.asyncResult = true;\n        // Upon resolution, the decryption promise calls push() and returns its TransmuxerResult up the stack. Therefore\n        // only flushing is required for async decryption\n        return decryptionPromise.then(function () {\n          return _this2.flush(chunkMeta);\n        });\n      }\n      var transmuxResults = [];\n      var timeOffset = currentTransmuxState.timeOffset;\n      if (decrypter) {\n        // The decrypter may have data cached, which needs to be demuxed. In this case we'll have two TransmuxResults\n        // This happens in the case that we receive only 1 push call for a segment (either for non-progressive downloads,\n        // or for progressive downloads with small segments)\n        var decryptedData = decrypter.flush();\n        if (decryptedData) {\n          // Push always returns a TransmuxerResult if decryptdata is null\n          transmuxResults.push(this.push(decryptedData.buffer, null, chunkMeta));\n        }\n      }\n      var demuxer = this.demuxer,\n        remuxer = this.remuxer;\n      if (!demuxer || !remuxer) {\n        // If probing failed, then Hls.js has been given content its not able to handle\n        stats.executeEnd = now();\n        var emptyResults = [emptyResult(chunkMeta)];\n        if (this.asyncResult) {\n          return Promise.resolve(emptyResults);\n        }\n        return emptyResults;\n      }\n      var demuxResultOrPromise = demuxer.flush(timeOffset);\n      if (isPromise(demuxResultOrPromise)) {\n        this.asyncResult = true;\n        // Decrypt final SAMPLE-AES samples\n        return demuxResultOrPromise.then(function (demuxResult) {\n          _this2.flushRemux(transmuxResults, demuxResult, chunkMeta);\n          return transmuxResults;\n        });\n      }\n      this.flushRemux(transmuxResults, demuxResultOrPromise, chunkMeta);\n      if (this.asyncResult) {\n        return Promise.resolve(transmuxResults);\n      }\n      return transmuxResults;\n    };\n    _proto.flushRemux = function flushRemux(transmuxResults, demuxResult, chunkMeta) {\n      var audioTrack = demuxResult.audioTrack,\n        videoTrack = demuxResult.videoTrack,\n        id3Track = demuxResult.id3Track,\n        textTrack = demuxResult.textTrack;\n      var _this$currentTransmux = this.currentTransmuxState,\n        accurateTimeOffset = _this$currentTransmux.accurateTimeOffset,\n        timeOffset = _this$currentTransmux.timeOffset;\n      this.logger.log(\"[transmuxer.ts]: Flushed \" + this.id + \" sn: \" + chunkMeta.sn + (chunkMeta.part > -1 ? ' part: ' + chunkMeta.part : '') + \" of \" + (this.id === PlaylistLevelType.MAIN ? 'level' : 'track') + \" \" + chunkMeta.level);\n      var remuxResult = this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, true, this.id);\n      transmuxResults.push({\n        remuxResult: remuxResult,\n        chunkMeta: chunkMeta\n      });\n      chunkMeta.transmuxing.executeEnd = now();\n    };\n    _proto.resetInitialTimestamp = function resetInitialTimestamp(defaultInitPts) {\n      var demuxer = this.demuxer,\n        remuxer = this.remuxer;\n      if (!demuxer || !remuxer) {\n        return;\n      }\n      demuxer.resetTimeStamp(defaultInitPts);\n      remuxer.resetTimeStamp(defaultInitPts);\n    };\n    _proto.resetContiguity = function resetContiguity() {\n      var demuxer = this.demuxer,\n        remuxer = this.remuxer;\n      if (!demuxer || !remuxer) {\n        return;\n      }\n      demuxer.resetContiguity();\n      remuxer.resetNextTimestamp();\n    };\n    _proto.resetInitSegment = function resetInitSegment(initSegmentData, audioCodec, videoCodec, trackDuration, decryptdata) {\n      var demuxer = this.demuxer,\n        remuxer = this.remuxer;\n      if (!demuxer || !remuxer) {\n        return;\n      }\n      demuxer.resetInitSegment(initSegmentData, audioCodec, videoCodec, trackDuration);\n      remuxer.resetInitSegment(initSegmentData, audioCodec, videoCodec, decryptdata);\n    };\n    _proto.destroy = function destroy() {\n      if (this.demuxer) {\n        this.demuxer.destroy();\n        this.demuxer = undefined;\n      }\n      if (this.remuxer) {\n        this.remuxer.destroy();\n        this.remuxer = undefined;\n      }\n    };\n    _proto.transmux = function transmux(data, keyData, timeOffset, accurateTimeOffset, chunkMeta) {\n      var result;\n      if (keyData && keyData.method === 'SAMPLE-AES') {\n        result = this.transmuxSampleAes(data, keyData, timeOffset, accurateTimeOffset, chunkMeta);\n      } else {\n        result = this.transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta);\n      }\n      return result;\n    };\n    _proto.transmuxUnencrypted = function transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta) {\n      var _demux = this.demuxer.demux(data, timeOffset, false, !this.config.progressive),\n        audioTrack = _demux.audioTrack,\n        videoTrack = _demux.videoTrack,\n        id3Track = _demux.id3Track,\n        textTrack = _demux.textTrack;\n      var remuxResult = this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, false, this.id);\n      return {\n        remuxResult: remuxResult,\n        chunkMeta: chunkMeta\n      };\n    };\n    _proto.transmuxSampleAes = function transmuxSampleAes(data, decryptData, timeOffset, accurateTimeOffset, chunkMeta) {\n      var _this3 = this;\n      return this.demuxer.demuxSampleAes(data, decryptData, timeOffset).then(function (demuxResult) {\n        var remuxResult = _this3.remuxer.remux(demuxResult.audioTrack, demuxResult.videoTrack, demuxResult.id3Track, demuxResult.textTrack, timeOffset, accurateTimeOffset, false, _this3.id);\n        return {\n          remuxResult: remuxResult,\n          chunkMeta: chunkMeta\n        };\n      });\n    };\n    _proto.configureTransmuxer = function configureTransmuxer(data) {\n      var config = this.config,\n        observer = this.observer,\n        typeSupported = this.typeSupported;\n      // probe for content type\n      var mux;\n      for (var i = 0, len = muxConfig.length; i < len; i++) {\n        var _muxConfig$i$demux;\n        if ((_muxConfig$i$demux = muxConfig[i].demux) != null && _muxConfig$i$demux.probe(data, this.logger)) {\n          mux = muxConfig[i];\n          break;\n        }\n      }\n      if (!mux) {\n        return new Error('Failed to find demuxer by probing fragment data');\n      }\n      // so let's check that current remuxer and demuxer are still valid\n      var demuxer = this.demuxer;\n      var remuxer = this.remuxer;\n      var Remuxer = mux.remux;\n      var Demuxer = mux.demux;\n      if (!remuxer || !(remuxer instanceof Remuxer)) {\n        this.remuxer = new Remuxer(observer, config, typeSupported, this.logger);\n      }\n      if (!demuxer || !(demuxer instanceof Demuxer)) {\n        this.demuxer = new Demuxer(observer, config, typeSupported, this.logger);\n        this.probe = Demuxer.probe;\n      }\n    };\n    _proto.needsProbing = function needsProbing(discontinuity, trackSwitch) {\n      // in case of continuity change, or track switch\n      // we might switch from content type (AAC container to TS container, or TS to fmp4 for example)\n      return !this.demuxer || !this.remuxer || discontinuity || trackSwitch;\n    };\n    _proto.getDecrypter = function getDecrypter() {\n      var decrypter = this.decrypter;\n      if (!decrypter) {\n        decrypter = this.decrypter = new Decrypter(this.config);\n      }\n      return decrypter;\n    };\n    return Transmuxer;\n  }();\n  function getEncryptionType(data, decryptData) {\n    var encryptionType = null;\n    if (data.byteLength > 0 && (decryptData == null ? void 0 : decryptData.key) != null && decryptData.iv !== null && decryptData.method != null) {\n      encryptionType = decryptData;\n    }\n    return encryptionType;\n  }\n  var emptyResult = function emptyResult(chunkMeta) {\n    return {\n      remuxResult: {},\n      chunkMeta: chunkMeta\n    };\n  };\n  function isPromise(p) {\n    return 'then' in p && p.then instanceof Function;\n  }\n  var TransmuxConfig = function TransmuxConfig(audioCodec, videoCodec, initSegmentData, duration, defaultInitPts) {\n    this.audioCodec = void 0;\n    this.videoCodec = void 0;\n    this.initSegmentData = void 0;\n    this.duration = void 0;\n    this.defaultInitPts = void 0;\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this.initSegmentData = initSegmentData;\n    this.duration = duration;\n    this.defaultInitPts = defaultInitPts || null;\n  };\n  var TransmuxState = function TransmuxState(discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset, initSegmentChange) {\n    this.discontinuity = void 0;\n    this.contiguous = void 0;\n    this.accurateTimeOffset = void 0;\n    this.trackSwitch = void 0;\n    this.timeOffset = void 0;\n    this.initSegmentChange = void 0;\n    this.discontinuity = discontinuity;\n    this.contiguous = contiguous;\n    this.accurateTimeOffset = accurateTimeOffset;\n    this.trackSwitch = trackSwitch;\n    this.timeOffset = timeOffset;\n    this.initSegmentChange = initSegmentChange;\n  };\n\n  var transmuxers = [];\n  if (typeof __IN_WORKER__ !== 'undefined' && __IN_WORKER__) {\n    startWorker();\n  }\n  function startWorker() {\n    self.addEventListener('message', function (ev) {\n      var data = ev.data;\n      var instanceNo = data.instanceNo;\n      if (instanceNo === undefined) {\n        return;\n      }\n      var transmuxer = transmuxers[instanceNo];\n      if (data.cmd === 'reset') {\n        delete transmuxers[data.resetNo];\n        if (transmuxer) {\n          transmuxer.destroy();\n        }\n        data.cmd = 'init';\n      }\n      if (data.cmd === 'init') {\n        var config = JSON.parse(data.config);\n        var observer = new EventEmitter();\n        observer.on(Events.FRAG_DECRYPTED, forwardMessage);\n        observer.on(Events.ERROR, forwardMessage);\n        var logger = enableLogs(config.debug, data.id);\n        forwardWorkerLogs(logger, instanceNo);\n        transmuxers[instanceNo] = new Transmuxer(observer, data.typeSupported, config, '', data.id, logger);\n        forwardMessage('init', null, instanceNo);\n        return;\n      }\n      if (!transmuxer) {\n        return;\n      }\n      switch (data.cmd) {\n        case 'configure':\n          {\n            transmuxer.configure(data.config);\n            break;\n          }\n        case 'demux':\n          {\n            var transmuxResult = transmuxer.push(data.data, data.decryptdata, data.chunkMeta, data.state);\n            if (isPromise(transmuxResult)) {\n              transmuxResult.then(function (data) {\n                emitTransmuxComplete(self, data, instanceNo);\n              }).catch(function (error) {\n                forwardMessage(Events.ERROR, {\n                  instanceNo: instanceNo,\n                  type: ErrorTypes.MEDIA_ERROR,\n                  details: ErrorDetails.FRAG_PARSING_ERROR,\n                  chunkMeta: data.chunkMeta,\n                  fatal: false,\n                  error: error,\n                  err: error,\n                  reason: \"transmuxer-worker push error\"\n                }, instanceNo);\n              });\n            } else {\n              emitTransmuxComplete(self, transmuxResult, instanceNo);\n            }\n            break;\n          }\n        case 'flush':\n          {\n            var chunkMeta = data.chunkMeta;\n            var _transmuxResult = transmuxer.flush(chunkMeta);\n            if (isPromise(_transmuxResult)) {\n              _transmuxResult.then(function (results) {\n                handleFlushResult(self, results, chunkMeta, instanceNo);\n              }).catch(function (error) {\n                forwardMessage(Events.ERROR, {\n                  type: ErrorTypes.MEDIA_ERROR,\n                  details: ErrorDetails.FRAG_PARSING_ERROR,\n                  chunkMeta: data.chunkMeta,\n                  fatal: false,\n                  error: error,\n                  err: error,\n                  reason: \"transmuxer-worker flush error\"\n                }, instanceNo);\n              });\n            } else {\n              handleFlushResult(self, _transmuxResult, chunkMeta, instanceNo);\n            }\n            break;\n          }\n      }\n    });\n  }\n  function emitTransmuxComplete(self, transmuxResult, instanceNo) {\n    if (isEmptyResult(transmuxResult.remuxResult)) {\n      return false;\n    }\n    var transferable = [];\n    var _transmuxResult$remux = transmuxResult.remuxResult,\n      audio = _transmuxResult$remux.audio,\n      video = _transmuxResult$remux.video;\n    if (audio) {\n      addToTransferable(transferable, audio);\n    }\n    if (video) {\n      addToTransferable(transferable, video);\n    }\n    self.postMessage({\n      event: 'transmuxComplete',\n      data: transmuxResult,\n      instanceNo: instanceNo\n    }, transferable);\n    return true;\n  }\n\n  // Converts data to a transferable object https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast)\n  // in order to minimize message passing overhead\n  function addToTransferable(transferable, track) {\n    if (track.data1) {\n      transferable.push(track.data1.buffer);\n    }\n    if (track.data2) {\n      transferable.push(track.data2.buffer);\n    }\n  }\n  function handleFlushResult(self, results, chunkMeta, instanceNo) {\n    var parsed = results.reduce(function (parsed, result) {\n      return emitTransmuxComplete(self, result, instanceNo) || parsed;\n    }, false);\n    if (!parsed) {\n      // Emit at least one \"transmuxComplete\" message even if media is not found to update stream-controller state to PARSING\n      self.postMessage({\n        event: 'transmuxComplete',\n        data: results[0],\n        instanceNo: instanceNo\n      });\n    }\n    self.postMessage({\n      event: 'flush',\n      data: chunkMeta,\n      instanceNo: instanceNo\n    });\n  }\n  function forwardMessage(event, data, instanceNo) {\n    self.postMessage({\n      event: event,\n      data: data,\n      instanceNo: instanceNo\n    });\n  }\n  function forwardWorkerLogs(logger, instanceNo) {\n    var _loop = function _loop(logFn) {\n      var func = function func(message) {\n        forwardMessage('workerLog', {\n          logType: logFn,\n          message: message\n        }, instanceNo);\n      };\n      logger[logFn] = func;\n    };\n    for (var logFn in logger) {\n      _loop(logFn);\n    }\n  }\n  function isEmptyResult(remuxResult) {\n    return !remuxResult.audio && !remuxResult.video && !remuxResult.text && !remuxResult.id3 && !remuxResult.initSegment;\n  }\n\n  var version = \"1.6.5\";\n\n  // ensure the worker ends up in the bundle\n  // If the worker should not be included this gets aliased to empty.js\n  var workerStore = {};\n  function hasUMDWorker() {\n    return typeof __HLS_WORKER_BUNDLE__ === 'function';\n  }\n  function injectWorker() {\n    var workerContext = workerStore[version];\n    if (workerContext) {\n      workerContext.clientCount++;\n      return workerContext;\n    }\n    var blob = new self.Blob([\"var exports={};var module={exports:exports};function define(f){f()};define.amd=true;(\" + __HLS_WORKER_BUNDLE__.toString() + \")(true);\"], {\n      type: 'text/javascript'\n    });\n    var objectURL = self.URL.createObjectURL(blob);\n    var worker = new self.Worker(objectURL);\n    var result = {\n      worker: worker,\n      objectURL: objectURL,\n      clientCount: 1\n    };\n    workerStore[version] = result;\n    return result;\n  }\n  function loadWorker(path) {\n    var workerContext = workerStore[path];\n    if (workerContext) {\n      workerContext.clientCount++;\n      return workerContext;\n    }\n    var scriptURL = new self.URL(path, self.location.href).href;\n    var worker = new self.Worker(scriptURL);\n    var result = {\n      worker: worker,\n      scriptURL: scriptURL,\n      clientCount: 1\n    };\n    workerStore[path] = result;\n    return result;\n  }\n  function removeWorkerFromStore(path) {\n    var workerContext = workerStore[path || version];\n    if (workerContext) {\n      var clientCount = workerContext.clientCount--;\n      if (clientCount === 1) {\n        var worker = workerContext.worker,\n          objectURL = workerContext.objectURL;\n        delete workerStore[path || version];\n        if (objectURL) {\n          // revoke the Object URL that was used to create transmuxer worker, so as not to leak it\n          self.URL.revokeObjectURL(objectURL);\n        }\n        worker.terminate();\n      }\n    }\n  }\n\n  var transmuxerInstanceCount = 0;\n  var TransmuxerInterface = /*#__PURE__*/function () {\n    function TransmuxerInterface(_hls, id, onTransmuxComplete, onFlush) {\n      var _this = this;\n      this.error = null;\n      this.hls = void 0;\n      this.id = void 0;\n      this.instanceNo = transmuxerInstanceCount++;\n      this.observer = void 0;\n      this.frag = null;\n      this.part = null;\n      this.useWorker = void 0;\n      this.workerContext = null;\n      this.transmuxer = null;\n      this.onTransmuxComplete = void 0;\n      this.onFlush = void 0;\n      this.onWorkerMessage = function (event) {\n        var data = event.data;\n        var hls = _this.hls;\n        if (!hls || !(data != null && data.event) || data.instanceNo !== _this.instanceNo) {\n          return;\n        }\n        switch (data.event) {\n          case 'init':\n            {\n              var _this$workerContext;\n              var objectURL = (_this$workerContext = _this.workerContext) == null ? void 0 : _this$workerContext.objectURL;\n              if (objectURL) {\n                // revoke the Object URL that was used to create transmuxer worker, so as not to leak it\n                self.URL.revokeObjectURL(objectURL);\n              }\n              break;\n            }\n          case 'transmuxComplete':\n            {\n              _this.handleTransmuxComplete(data.data);\n              break;\n            }\n          case 'flush':\n            {\n              _this.onFlush(data.data);\n              break;\n            }\n\n          // pass logs from the worker thread to the main logger\n          case 'workerLog':\n            {\n              if (hls.logger[data.data.logType]) {\n                hls.logger[data.data.logType](data.data.message);\n              }\n              break;\n            }\n          default:\n            {\n              data.data = data.data || {};\n              data.data.frag = _this.frag;\n              data.data.part = _this.part;\n              data.data.id = _this.id;\n              hls.trigger(data.event, data.data);\n              break;\n            }\n        }\n      };\n      this.onWorkerError = function (event) {\n        if (!_this.hls) {\n          return;\n        }\n        var error = new Error(event.message + \"  (\" + event.filename + \":\" + event.lineno + \")\");\n        _this.hls.config.enableWorker = false;\n        _this.hls.logger.warn(\"Error in \\\"\" + _this.id + \"\\\" Web Worker, fallback to inline\");\n        _this.hls.trigger(Events.ERROR, {\n          type: ErrorTypes.OTHER_ERROR,\n          details: ErrorDetails.INTERNAL_EXCEPTION,\n          fatal: false,\n          event: 'demuxerWorker',\n          error: error\n        });\n      };\n      var config = _hls.config;\n      this.hls = _hls;\n      this.id = id;\n      this.useWorker = !!config.enableWorker;\n      this.onTransmuxComplete = onTransmuxComplete;\n      this.onFlush = onFlush;\n      var forwardMessage = function forwardMessage(ev, data) {\n        data = data || {};\n        data.frag = _this.frag || undefined;\n        if (ev === Events.ERROR) {\n          data = data;\n          data.parent = _this.id;\n          data.part = _this.part;\n          _this.error = data.error;\n        }\n        _this.hls.trigger(ev, data);\n      };\n\n      // forward events to main thread\n      this.observer = new EventEmitter();\n      this.observer.on(Events.FRAG_DECRYPTED, forwardMessage);\n      this.observer.on(Events.ERROR, forwardMessage);\n      var m2tsTypeSupported = getM2TSSupportedAudioTypes(config.preferManagedMediaSource);\n      if (this.useWorker && typeof Worker !== 'undefined') {\n        var logger = this.hls.logger;\n        var canCreateWorker = config.workerPath || hasUMDWorker();\n        if (canCreateWorker) {\n          try {\n            if (config.workerPath) {\n              logger.log(\"loading Web Worker \" + config.workerPath + \" for \\\"\" + id + \"\\\"\");\n              this.workerContext = loadWorker(config.workerPath);\n            } else {\n              logger.log(\"injecting Web Worker for \\\"\" + id + \"\\\"\");\n              this.workerContext = injectWorker();\n            }\n            var worker = this.workerContext.worker;\n            worker.addEventListener('message', this.onWorkerMessage);\n            worker.addEventListener('error', this.onWorkerError);\n            worker.postMessage({\n              instanceNo: this.instanceNo,\n              cmd: 'init',\n              typeSupported: m2tsTypeSupported,\n              id: id,\n              config: stringify(config)\n            });\n          } catch (err) {\n            logger.warn(\"Error setting up \\\"\" + id + \"\\\" Web Worker, fallback to inline\", err);\n            this.terminateWorker();\n            this.error = null;\n            this.transmuxer = new Transmuxer(this.observer, m2tsTypeSupported, config, '', id, _hls.logger);\n          }\n          return;\n        }\n      }\n      this.transmuxer = new Transmuxer(this.observer, m2tsTypeSupported, config, '', id, _hls.logger);\n    }\n    var _proto = TransmuxerInterface.prototype;\n    _proto.reset = function reset() {\n      this.frag = null;\n      this.part = null;\n      if (this.workerContext) {\n        var instanceNo = this.instanceNo;\n        this.instanceNo = transmuxerInstanceCount++;\n        var config = this.hls.config;\n        var m2tsTypeSupported = getM2TSSupportedAudioTypes(config.preferManagedMediaSource);\n        this.workerContext.worker.postMessage({\n          instanceNo: this.instanceNo,\n          cmd: 'reset',\n          resetNo: instanceNo,\n          typeSupported: m2tsTypeSupported,\n          id: this.id,\n          config: stringify(config)\n        });\n      }\n    };\n    _proto.terminateWorker = function terminateWorker() {\n      if (this.workerContext) {\n        var worker = this.workerContext.worker;\n        this.workerContext = null;\n        worker.removeEventListener('message', this.onWorkerMessage);\n        worker.removeEventListener('error', this.onWorkerError);\n        removeWorkerFromStore(this.hls.config.workerPath);\n      }\n    };\n    _proto.destroy = function destroy() {\n      if (this.workerContext) {\n        this.terminateWorker();\n        // @ts-ignore\n        this.onWorkerMessage = this.onWorkerError = null;\n      } else {\n        var transmuxer = this.transmuxer;\n        if (transmuxer) {\n          transmuxer.destroy();\n          this.transmuxer = null;\n        }\n      }\n      var observer = this.observer;\n      if (observer) {\n        observer.removeAllListeners();\n      }\n      this.frag = null;\n      this.part = null;\n      // @ts-ignore\n      this.observer = null;\n      // @ts-ignore\n      this.hls = null;\n    };\n    _proto.push = function push(data, initSegmentData, audioCodec, videoCodec, frag, part, duration, accurateTimeOffset, chunkMeta, defaultInitPTS) {\n      var _frag$initSegment,\n        _lastFrag$initSegment,\n        _this2 = this;\n      chunkMeta.transmuxing.start = self.performance.now();\n      var instanceNo = this.instanceNo,\n        transmuxer = this.transmuxer;\n      var timeOffset = part ? part.start : frag.start;\n      // TODO: push \"clear-lead\" decrypt data for unencrypted fragments in streams with encrypted ones\n      var decryptdata = frag.decryptdata;\n      var lastFrag = this.frag;\n      var discontinuity = !(lastFrag && frag.cc === lastFrag.cc);\n      var trackSwitch = !(lastFrag && chunkMeta.level === lastFrag.level);\n      var snDiff = lastFrag ? chunkMeta.sn - lastFrag.sn : -1;\n      var partDiff = this.part ? chunkMeta.part - this.part.index : -1;\n      var progressive = snDiff === 0 && chunkMeta.id > 1 && chunkMeta.id === (lastFrag == null ? void 0 : lastFrag.stats.chunkCount);\n      var contiguous = !trackSwitch && (snDiff === 1 || snDiff === 0 && (partDiff === 1 || progressive && partDiff <= 0));\n      var now = self.performance.now();\n      if (trackSwitch || snDiff || frag.stats.parsing.start === 0) {\n        frag.stats.parsing.start = now;\n      }\n      if (part && (partDiff || !contiguous)) {\n        part.stats.parsing.start = now;\n      }\n      var initSegmentChange = !(lastFrag && ((_frag$initSegment = frag.initSegment) == null ? void 0 : _frag$initSegment.url) === ((_lastFrag$initSegment = lastFrag.initSegment) == null ? void 0 : _lastFrag$initSegment.url));\n      var state = new TransmuxState(discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset, initSegmentChange);\n      if (!contiguous || discontinuity || initSegmentChange) {\n        this.hls.logger.log(\"[transmuxer-interface]: Starting new transmux session for \" + frag.type + \" sn: \" + chunkMeta.sn + (chunkMeta.part > -1 ? ' part: ' + chunkMeta.part : '') + \" \" + (this.id === PlaylistLevelType.MAIN ? 'level' : 'track') + \": \" + chunkMeta.level + \" id: \" + chunkMeta.id + \"\\n        discontinuity: \" + discontinuity + \"\\n        trackSwitch: \" + trackSwitch + \"\\n        contiguous: \" + contiguous + \"\\n        accurateTimeOffset: \" + accurateTimeOffset + \"\\n        timeOffset: \" + timeOffset + \"\\n        initSegmentChange: \" + initSegmentChange);\n        var config = new TransmuxConfig(audioCodec, videoCodec, initSegmentData, duration, defaultInitPTS);\n        this.configureTransmuxer(config);\n      }\n      this.frag = frag;\n      this.part = part;\n\n      // Frags with sn of 'initSegment' are not transmuxed\n      if (this.workerContext) {\n        // post fragment payload as transferable objects for ArrayBuffer (no copy)\n        this.workerContext.worker.postMessage({\n          instanceNo: instanceNo,\n          cmd: 'demux',\n          data: data,\n          decryptdata: decryptdata,\n          chunkMeta: chunkMeta,\n          state: state\n        }, data instanceof ArrayBuffer ? [data] : []);\n      } else if (transmuxer) {\n        var transmuxResult = transmuxer.push(data, decryptdata, chunkMeta, state);\n        if (isPromise(transmuxResult)) {\n          transmuxResult.then(function (data) {\n            _this2.handleTransmuxComplete(data);\n          }).catch(function (error) {\n            _this2.transmuxerError(error, chunkMeta, 'transmuxer-interface push error');\n          });\n        } else {\n          this.handleTransmuxComplete(transmuxResult);\n        }\n      }\n    };\n    _proto.flush = function flush(chunkMeta) {\n      var _this3 = this;\n      chunkMeta.transmuxing.start = self.performance.now();\n      var instanceNo = this.instanceNo,\n        transmuxer = this.transmuxer;\n      if (this.workerContext) {\n        this.workerContext.worker.postMessage({\n          instanceNo: instanceNo,\n          cmd: 'flush',\n          chunkMeta: chunkMeta\n        });\n      } else if (transmuxer) {\n        var transmuxResult = transmuxer.flush(chunkMeta);\n        if (isPromise(transmuxResult)) {\n          transmuxResult.then(function (data) {\n            _this3.handleFlushResult(data, chunkMeta);\n          }).catch(function (error) {\n            _this3.transmuxerError(error, chunkMeta, 'transmuxer-interface flush error');\n          });\n        } else {\n          this.handleFlushResult(transmuxResult, chunkMeta);\n        }\n      }\n    };\n    _proto.transmuxerError = function transmuxerError(error, chunkMeta, reason) {\n      if (!this.hls) {\n        return;\n      }\n      this.error = error;\n      this.hls.trigger(Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.FRAG_PARSING_ERROR,\n        chunkMeta: chunkMeta,\n        frag: this.frag || undefined,\n        part: this.part || undefined,\n        fatal: false,\n        error: error,\n        err: error,\n        reason: reason\n      });\n    };\n    _proto.handleFlushResult = function handleFlushResult(results, chunkMeta) {\n      var _this4 = this;\n      results.forEach(function (result) {\n        _this4.handleTransmuxComplete(result);\n      });\n      this.onFlush(chunkMeta);\n    };\n    _proto.configureTransmuxer = function configureTransmuxer(config) {\n      var instanceNo = this.instanceNo,\n        transmuxer = this.transmuxer;\n      if (this.workerContext) {\n        this.workerContext.worker.postMessage({\n          instanceNo: instanceNo,\n          cmd: 'configure',\n          config: config\n        });\n      } else if (transmuxer) {\n        transmuxer.configure(config);\n      }\n    };\n    _proto.handleTransmuxComplete = function handleTransmuxComplete(result) {\n      result.chunkMeta.transmuxing.end = self.performance.now();\n      this.onTransmuxComplete(result);\n    };\n    return TransmuxerInterface;\n  }();\n\n  var TICK_INTERVAL$3 = 100; // how often to tick in ms\n  var AudioStreamController = /*#__PURE__*/function (_BaseStreamController) {\n    function AudioStreamController(hls, fragmentTracker, keyLoader) {\n      var _this;\n      _this = _BaseStreamController.call(this, hls, fragmentTracker, keyLoader, 'audio-stream-controller', PlaylistLevelType.AUDIO) || this;\n      _this.mainAnchor = null;\n      _this.mainFragLoading = null;\n      _this.audioOnly = false;\n      _this.bufferedTrack = null;\n      _this.switchingTrack = null;\n      _this.trackId = -1;\n      _this.waitingData = null;\n      _this.mainDetails = null;\n      _this.flushing = false;\n      _this.bufferFlushed = false;\n      _this.cachedTrackLoadedData = null;\n      _this.registerListeners();\n      return _this;\n    }\n    _inheritsLoose(AudioStreamController, _BaseStreamController);\n    var _proto = AudioStreamController.prototype;\n    _proto.onHandlerDestroying = function onHandlerDestroying() {\n      this.unregisterListeners();\n      _BaseStreamController.prototype.onHandlerDestroying.call(this);\n      this.resetItem();\n    };\n    _proto.resetItem = function resetItem() {\n      this.mainDetails = this.mainAnchor = this.mainFragLoading = this.bufferedTrack = this.switchingTrack = this.waitingData = this.cachedTrackLoadedData = null;\n    };\n    _proto.registerListeners = function registerListeners() {\n      _BaseStreamController.prototype.registerListeners.call(this);\n      var hls = this.hls;\n      hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n      hls.on(Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);\n      hls.on(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n      hls.on(Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n      hls.on(Events.BUFFER_RESET, this.onBufferReset, this);\n      hls.on(Events.BUFFER_CREATED, this.onBufferCreated, this);\n      hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n      hls.on(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n      hls.on(Events.INIT_PTS_FOUND, this.onInitPtsFound, this);\n      hls.on(Events.FRAG_LOADING, this.onFragLoading, this);\n      hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      if (!hls) {\n        return;\n      }\n      _BaseStreamController.prototype.unregisterListeners.call(this);\n      hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n      hls.off(Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);\n      hls.off(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n      hls.off(Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n      hls.off(Events.BUFFER_RESET, this.onBufferReset, this);\n      hls.off(Events.BUFFER_CREATED, this.onBufferCreated, this);\n      hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n      hls.off(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n      hls.off(Events.INIT_PTS_FOUND, this.onInitPtsFound, this);\n      hls.off(Events.FRAG_LOADING, this.onFragLoading, this);\n      hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n    }\n\n    // INIT_PTS_FOUND is triggered when the video track parsed in the stream-controller has a new PTS value\n    ;\n    _proto.onInitPtsFound = function onInitPtsFound(event, _ref) {\n      var frag = _ref.frag,\n        id = _ref.id,\n        initPTS = _ref.initPTS,\n        timescale = _ref.timescale;\n      // Always update the new INIT PTS\n      // Can change due level switch\n      if (id === PlaylistLevelType.MAIN) {\n        var cc = frag.cc;\n        var inFlightFrag = this.fragCurrent;\n        this.initPTS[cc] = {\n          baseTime: initPTS,\n          timescale: timescale\n        };\n        this.log(\"InitPTS for cc: \" + cc + \" found from main: \" + initPTS + \"/\" + timescale);\n        this.mainAnchor = frag;\n        // If we are waiting, tick immediately to unblock audio fragment transmuxing\n        if (this.state === State.WAITING_INIT_PTS) {\n          var waitingData = this.waitingData;\n          if (!waitingData && !this.loadingParts || waitingData && waitingData.frag.cc !== cc) {\n            this.syncWithAnchor(frag, waitingData == null ? void 0 : waitingData.frag);\n          }\n        } else if (!this.hls.hasEnoughToStart && inFlightFrag && inFlightFrag.cc !== cc) {\n          inFlightFrag.abortRequests();\n          this.syncWithAnchor(frag, inFlightFrag);\n        } else if (this.state === State.IDLE) {\n          this.tick();\n        }\n      }\n    };\n    _proto.getLoadPosition = function getLoadPosition() {\n      if (!this.startFragRequested && this.nextLoadPosition >= 0) {\n        return this.nextLoadPosition;\n      }\n      return _BaseStreamController.prototype.getLoadPosition.call(this);\n    };\n    _proto.syncWithAnchor = function syncWithAnchor(mainAnchor, waitingToAppend) {\n      var _this$mainFragLoading;\n      // Drop waiting fragment if videoTrackCC has changed since waitingFragment was set and initPTS was not found\n      var mainFragLoading = ((_this$mainFragLoading = this.mainFragLoading) == null ? void 0 : _this$mainFragLoading.frag) || null;\n      if (waitingToAppend) {\n        if ((mainFragLoading == null ? void 0 : mainFragLoading.cc) === waitingToAppend.cc) {\n          // Wait for loading frag to complete and INIT_PTS_FOUND\n          return;\n        }\n      }\n      var targetDiscontinuity = (mainFragLoading || mainAnchor).cc;\n      var trackDetails = this.getLevelDetails();\n      var pos = this.getLoadPosition();\n      var syncFrag = findNearestWithCC(trackDetails, targetDiscontinuity, pos);\n      // Only stop waiting for audioFrag.cc if an audio segment of the same discontinuity domain (cc) is found\n      if (syncFrag) {\n        this.log(\"Waiting fragment cc (\" + (waitingToAppend == null ? void 0 : waitingToAppend.cc) + \") cancelled because video is at cc \" + mainAnchor.cc);\n        this.startFragRequested = false;\n        this.nextLoadPosition = syncFrag.start;\n        this.resetLoadingState();\n        if (this.state === State.IDLE) {\n          this.doTickIdle();\n        }\n      }\n    };\n    _proto.startLoad = function startLoad(startPosition, skipSeekToStartPosition) {\n      if (!this.levels) {\n        this.startPosition = startPosition;\n        this.state = State.STOPPED;\n        return;\n      }\n      var lastCurrentTime = this.lastCurrentTime;\n      this.stopLoad();\n      this.setInterval(TICK_INTERVAL$3);\n      if (lastCurrentTime > 0 && startPosition === -1) {\n        this.log(\"Override startPosition with lastCurrentTime @\" + lastCurrentTime.toFixed(3));\n        startPosition = lastCurrentTime;\n        this.state = State.IDLE;\n      } else {\n        this.state = State.WAITING_TRACK;\n      }\n      this.nextLoadPosition = this.lastCurrentTime = startPosition + this.timelineOffset;\n      this.startPosition = skipSeekToStartPosition ? -1 : startPosition;\n      this.tick();\n    };\n    _proto.doTick = function doTick() {\n      switch (this.state) {\n        case State.IDLE:\n          this.doTickIdle();\n          break;\n        case State.WAITING_TRACK:\n          {\n            var levels = this.levels,\n              trackId = this.trackId;\n            var currenTrack = levels == null ? void 0 : levels[trackId];\n            var details = currenTrack == null ? void 0 : currenTrack.details;\n            if (details && !this.waitForLive(currenTrack)) {\n              if (this.waitForCdnTuneIn(details)) {\n                break;\n              }\n              this.state = State.WAITING_INIT_PTS;\n            }\n            break;\n          }\n        case State.FRAG_LOADING_WAITING_RETRY:\n          {\n            var _this$media;\n            var now = performance.now();\n            var retryDate = this.retryDate;\n            // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading\n            if (!retryDate || now >= retryDate || (_this$media = this.media) != null && _this$media.seeking) {\n              var _levels = this.levels,\n                _trackId = this.trackId;\n              this.log('RetryDate reached, switch back to IDLE state');\n              this.resetStartWhenNotLoaded((_levels == null ? void 0 : _levels[_trackId]) || null);\n              this.state = State.IDLE;\n            }\n            break;\n          }\n        case State.WAITING_INIT_PTS:\n          {\n            // Ensure we don't get stuck in the WAITING_INIT_PTS state if the waiting frag CC doesn't match any initPTS\n            var waitingData = this.waitingData;\n            if (waitingData) {\n              var frag = waitingData.frag,\n                part = waitingData.part,\n                cache = waitingData.cache,\n                complete = waitingData.complete;\n              var mainAnchor = this.mainAnchor;\n              if (this.initPTS[frag.cc] !== undefined) {\n                this.waitingData = null;\n                this.state = State.FRAG_LOADING;\n                var payload = cache.flush().buffer;\n                var data = {\n                  frag: frag,\n                  part: part,\n                  payload: payload,\n                  networkDetails: null\n                };\n                this._handleFragmentLoadProgress(data);\n                if (complete) {\n                  _BaseStreamController.prototype._handleFragmentLoadComplete.call(this, data);\n                }\n              } else if (mainAnchor && mainAnchor.cc !== waitingData.frag.cc) {\n                this.syncWithAnchor(mainAnchor, waitingData.frag);\n              }\n            } else {\n              this.state = State.IDLE;\n            }\n          }\n      }\n      this.onTickEnd();\n    };\n    _proto.resetLoadingState = function resetLoadingState() {\n      var waitingData = this.waitingData;\n      if (waitingData) {\n        this.fragmentTracker.removeFragment(waitingData.frag);\n        this.waitingData = null;\n      }\n      _BaseStreamController.prototype.resetLoadingState.call(this);\n    };\n    _proto.onTickEnd = function onTickEnd() {\n      var media = this.media;\n      if (!(media != null && media.readyState)) {\n        // Exit early if we don't have media or if the media hasn't buffered anything yet (readyState 0)\n        return;\n      }\n      this.lastCurrentTime = media.currentTime;\n    };\n    _proto.doTickIdle = function doTickIdle() {\n      var _this$mainFragLoading2;\n      var hls = this.hls,\n        levels = this.levels,\n        media = this.media,\n        trackId = this.trackId;\n      var config = hls.config;\n\n      // 1. if buffering is suspended\n      // 2. if video not attached AND\n      //    start fragment already requested OR start frag prefetch not enabled\n      // 3. if tracks or track not loaded and selected\n      // then exit loop\n      // => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop\n      if (!this.buffering || !media && !this.primaryPrefetch && (this.startFragRequested || !config.startFragPrefetch) || !(levels != null && levels[trackId])) {\n        return;\n      }\n      var levelInfo = levels[trackId];\n      var trackDetails = levelInfo.details;\n      if (!trackDetails || this.waitForLive(levelInfo) || this.waitForCdnTuneIn(trackDetails)) {\n        this.state = State.WAITING_TRACK;\n        this.startFragRequested = false;\n        return;\n      }\n      var bufferable = this.mediaBuffer ? this.mediaBuffer : this.media;\n      if (this.bufferFlushed && bufferable) {\n        this.bufferFlushed = false;\n        this.afterBufferFlushed(bufferable, ElementaryStreamTypes.AUDIO, PlaylistLevelType.AUDIO);\n      }\n      var bufferInfo = this.getFwdBufferInfo(bufferable, PlaylistLevelType.AUDIO);\n      if (bufferInfo === null) {\n        return;\n      }\n      if (!this.switchingTrack && this._streamEnded(bufferInfo, trackDetails)) {\n        hls.trigger(Events.BUFFER_EOS, {\n          type: 'audio'\n        });\n        this.state = State.ENDED;\n        return;\n      }\n      var bufferLen = bufferInfo.len;\n      var maxBufLen = hls.maxBufferLength;\n      var fragments = trackDetails.fragments;\n      var start = fragments[0].start;\n      var loadPosition = this.getLoadPosition();\n      var targetBufferTime = this.flushing ? loadPosition : bufferInfo.end;\n      if (this.switchingTrack && media) {\n        var pos = loadPosition;\n        // if currentTime (pos) is less than alt audio playlist start time, it means that alt audio is ahead of currentTime\n        if (trackDetails.PTSKnown && pos < start) {\n          // if everything is buffered from pos to start or if audio buffer upfront, let's seek to start\n          if (bufferInfo.end > start || bufferInfo.nextStart) {\n            this.log('Alt audio track ahead of main track, seek to start of alt audio track');\n            media.currentTime = start + 0.05;\n          }\n        }\n      }\n\n      // if buffer length is less than maxBufLen, or near the end, find a fragment to load\n      if (bufferLen >= maxBufLen && !this.switchingTrack && targetBufferTime < fragments[fragments.length - 1].start) {\n        return;\n      }\n      var frag = this.getNextFragment(targetBufferTime, trackDetails);\n      // Avoid loop loading by using nextLoadPosition set for backtracking and skipping consecutive GAP tags\n      if (frag && this.isLoopLoading(frag, targetBufferTime)) {\n        frag = this.getNextFragmentLoopLoading(frag, trackDetails, bufferInfo, PlaylistLevelType.MAIN, maxBufLen);\n      }\n      if (!frag) {\n        this.bufferFlushed = true;\n        return;\n      }\n\n      // Request audio segments up to one fragment ahead of main stream-controller\n      var mainFragLoading = ((_this$mainFragLoading2 = this.mainFragLoading) == null ? void 0 : _this$mainFragLoading2.frag) || null;\n      if (!this.audioOnly && this.startFragRequested && mainFragLoading && isMediaFragment(frag) && !frag.endList && (!trackDetails.live || !this.loadingParts && targetBufferTime < this.hls.liveSyncPosition)) {\n        if (this.fragmentTracker.getState(mainFragLoading) === FragmentState.OK) {\n          this.mainFragLoading = mainFragLoading = null;\n        }\n        if (mainFragLoading && isMediaFragment(mainFragLoading)) {\n          if (frag.start > mainFragLoading.end) {\n            // Get buffered frag at target position from tracker (loaded out of sequence)\n            var mainFragAtPos = this.fragmentTracker.getFragAtPos(targetBufferTime, PlaylistLevelType.MAIN);\n            if (mainFragAtPos && mainFragAtPos.end > mainFragLoading.end) {\n              mainFragLoading = mainFragAtPos;\n              this.mainFragLoading = {\n                frag: mainFragAtPos,\n                targetBufferTime: null\n              };\n            }\n          }\n          var atBufferSyncLimit = frag.start > mainFragLoading.end;\n          if (atBufferSyncLimit) {\n            return;\n          }\n        }\n      }\n      this.loadFragment(frag, levelInfo, targetBufferTime);\n    };\n    _proto.onMediaDetaching = function onMediaDetaching(event, data) {\n      this.bufferFlushed = this.flushing = false;\n      _BaseStreamController.prototype.onMediaDetaching.call(this, event, data);\n    };\n    _proto.onAudioTracksUpdated = function onAudioTracksUpdated(event, _ref2) {\n      var audioTracks = _ref2.audioTracks;\n      // Reset tranxmuxer is essential for large context switches (Content Steering)\n      this.resetTransmuxer();\n      this.levels = audioTracks.map(function (mediaPlaylist) {\n        return new Level(mediaPlaylist);\n      });\n    };\n    _proto.onAudioTrackSwitching = function onAudioTrackSwitching(event, data) {\n      // if any URL found on new audio track, it is an alternate audio track\n      var altAudio = !!data.url;\n      this.trackId = data.id;\n      var fragCurrent = this.fragCurrent;\n      if (fragCurrent) {\n        fragCurrent.abortRequests();\n        this.removeUnbufferedFrags(fragCurrent.start);\n      }\n      this.resetLoadingState();\n\n      // should we switch tracks ?\n      if (altAudio) {\n        this.switchingTrack = data;\n        // main audio track are handled by stream-controller, just do something if switching to alt audio track\n        this.flushAudioIfNeeded(data);\n        if (this.state !== State.STOPPED) {\n          // switching to audio track, start timer if not already started\n          this.setInterval(TICK_INTERVAL$3);\n          this.state = State.IDLE;\n          this.tick();\n        }\n      } else {\n        // destroy useless transmuxer when switching audio to main\n        this.resetTransmuxer();\n        this.switchingTrack = null;\n        this.bufferedTrack = data;\n        this.clearInterval();\n      }\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      _BaseStreamController.prototype.onManifestLoading.call(this);\n      this.bufferFlushed = this.flushing = this.audioOnly = false;\n      this.resetItem();\n      this.trackId = -1;\n    };\n    _proto.onLevelLoaded = function onLevelLoaded(event, data) {\n      this.mainDetails = data.details;\n      var cachedTrackLoadedData = this.cachedTrackLoadedData;\n      if (cachedTrackLoadedData) {\n        this.cachedTrackLoadedData = null;\n        this.onAudioTrackLoaded(Events.AUDIO_TRACK_LOADED, cachedTrackLoadedData);\n      }\n    };\n    _proto.onAudioTrackLoaded = function onAudioTrackLoaded(event, data) {\n      var _trackLevel$details;\n      var levels = this.levels;\n      var newDetails = data.details,\n        trackId = data.id,\n        groupId = data.groupId,\n        track = data.track;\n      if (!levels) {\n        this.warn(\"Audio tracks reset while loading track \" + trackId + \" \\\"\" + track.name + \"\\\" of \\\"\" + groupId + \"\\\"\");\n        return;\n      }\n      var mainDetails = this.mainDetails;\n      if (!mainDetails || newDetails.endCC > mainDetails.endCC || mainDetails.expired) {\n        this.cachedTrackLoadedData = data;\n        if (this.state !== State.STOPPED) {\n          this.state = State.WAITING_TRACK;\n        }\n        return;\n      }\n      this.cachedTrackLoadedData = null;\n      this.log(\"Audio track \" + trackId + \" \\\"\" + track.name + \"\\\" of \\\"\" + groupId + \"\\\" loaded [\" + newDetails.startSN + \",\" + newDetails.endSN + \"]\" + (newDetails.lastPartSn ? \"[part-\" + newDetails.lastPartSn + \"-\" + newDetails.lastPartIndex + \"]\" : '') + \",duration:\" + newDetails.totalduration);\n      var trackLevel = levels[trackId];\n      var sliding = 0;\n      if (newDetails.live || (_trackLevel$details = trackLevel.details) != null && _trackLevel$details.live) {\n        this.checkLiveUpdate(newDetails);\n        if (newDetails.deltaUpdateFailed) {\n          return;\n        }\n        if (trackLevel.details) {\n          var _this$levelLastLoaded;\n          sliding = this.alignPlaylists(newDetails, trackLevel.details, (_this$levelLastLoaded = this.levelLastLoaded) == null ? void 0 : _this$levelLastLoaded.details);\n        }\n        if (!newDetails.alignedSliding) {\n          // Align audio rendition with the \"main\" playlist on discontinuity change\n          // or program-date-time (PDT)\n          alignDiscontinuities(newDetails, mainDetails);\n          if (!newDetails.alignedSliding) {\n            alignMediaPlaylistByPDT(newDetails, mainDetails);\n          }\n          sliding = newDetails.fragmentStart;\n        }\n      }\n      trackLevel.details = newDetails;\n      this.levelLastLoaded = trackLevel;\n\n      // compute start position if we are aligned with the main playlist\n      if (!this.startFragRequested) {\n        this.setStartPosition(mainDetails, sliding);\n      }\n      this.hls.trigger(Events.AUDIO_TRACK_UPDATED, {\n        details: newDetails,\n        id: trackId,\n        groupId: data.groupId\n      });\n\n      // only switch back to IDLE state if we were waiting for track to start downloading a new fragment\n      if (this.state === State.WAITING_TRACK && !this.waitForCdnTuneIn(newDetails)) {\n        this.state = State.IDLE;\n      }\n\n      // trigger handler right now\n      this.tick();\n    };\n    _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(data) {\n      var _frag$initSegment;\n      var frag = data.frag;\n      var part = data.part,\n        payload = data.payload;\n      var config = this.config,\n        trackId = this.trackId,\n        levels = this.levels;\n      if (!levels) {\n        this.warn(\"Audio tracks were reset while fragment load was in progress. Fragment \" + frag.sn + \" of level \" + frag.level + \" will not be buffered\");\n        return;\n      }\n      var track = levels[trackId];\n      if (!track) {\n        this.warn('Audio track is undefined on fragment load progress');\n        return;\n      }\n      var details = track.details;\n      if (!details) {\n        this.warn('Audio track details undefined on fragment load progress');\n        this.removeUnbufferedFrags(frag.start);\n        return;\n      }\n      var audioCodec = config.defaultAudioCodec || track.audioCodec || 'mp4a.40.2';\n      var transmuxer = this.transmuxer;\n      if (!transmuxer) {\n        transmuxer = this.transmuxer = new TransmuxerInterface(this.hls, PlaylistLevelType.AUDIO, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this));\n      }\n\n      // Check if we have video initPTS\n      // If not we need to wait for it\n      var initPTS = this.initPTS[frag.cc];\n      var initSegmentData = (_frag$initSegment = frag.initSegment) == null ? void 0 : _frag$initSegment.data;\n      if (initPTS !== undefined) {\n        // this.log(`Transmuxing ${sn} of [${details.startSN} ,${details.endSN}],track ${trackId}`);\n        // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)\n        var accurateTimeOffset = false; // details.PTSKnown || !details.live;\n        var partIndex = part ? part.index : -1;\n        var partial = partIndex !== -1;\n        var chunkMeta = new ChunkMetadata(frag.level, frag.sn, frag.stats.chunkCount, payload.byteLength, partIndex, partial);\n        transmuxer.push(payload, initSegmentData, audioCodec, '', frag, part, details.totalduration, accurateTimeOffset, chunkMeta, initPTS);\n      } else {\n        this.log(\"Unknown video PTS for cc \" + frag.cc + \", waiting for video PTS before demuxing audio frag \" + frag.sn + \" of [\" + details.startSN + \" ,\" + details.endSN + \"],track \" + trackId);\n        var _this$waitingData = this.waitingData = this.waitingData || {\n            frag: frag,\n            part: part,\n            cache: new ChunkCache(),\n            complete: false\n          },\n          cache = _this$waitingData.cache;\n        cache.push(new Uint8Array(payload));\n        if (this.state !== State.STOPPED) {\n          this.state = State.WAITING_INIT_PTS;\n        }\n      }\n    };\n    _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedData) {\n      if (this.waitingData) {\n        this.waitingData.complete = true;\n        return;\n      }\n      _BaseStreamController.prototype._handleFragmentLoadComplete.call(this, fragLoadedData);\n    };\n    _proto.onBufferReset = function onBufferReset(/* event: Events.BUFFER_RESET */\n    ) {\n      // reset reference to sourcebuffers\n      this.mediaBuffer = null;\n    };\n    _proto.onBufferCreated = function onBufferCreated(event, data) {\n      this.bufferFlushed = this.flushing = false;\n      var audioTrack = data.tracks.audio;\n      if (audioTrack) {\n        this.mediaBuffer = audioTrack.buffer || null;\n      }\n    };\n    _proto.onFragLoading = function onFragLoading(event, data) {\n      if (!this.audioOnly && data.frag.type === PlaylistLevelType.MAIN && isMediaFragment(data.frag)) {\n        this.mainFragLoading = data;\n        if (this.state === State.IDLE) {\n          this.tick();\n        }\n      }\n    };\n    _proto.onFragBuffered = function onFragBuffered(event, data) {\n      var frag = data.frag,\n        part = data.part;\n      if (frag.type !== PlaylistLevelType.AUDIO) {\n        if (!this.audioOnly && frag.type === PlaylistLevelType.MAIN && !frag.elementaryStreams.video && !frag.elementaryStreams.audiovideo) {\n          this.audioOnly = true;\n          this.mainFragLoading = null;\n        }\n        return;\n      }\n      if (this.fragContextChanged(frag)) {\n        // If a level switch was requested while a fragment was buffering, it will emit the FRAG_BUFFERED event upon completion\n        // Avoid setting state back to IDLE or concluding the audio switch; otherwise, the switched-to track will not buffer\n        this.warn(\"Fragment \" + frag.sn + (part ? ' p: ' + part.index : '') + \" of level \" + frag.level + \" finished buffering, but was aborted. state: \" + this.state + \", audioSwitch: \" + (this.switchingTrack ? this.switchingTrack.name : 'false'));\n        return;\n      }\n      if (isMediaFragment(frag)) {\n        this.fragPrevious = frag;\n        var track = this.switchingTrack;\n        if (track) {\n          this.bufferedTrack = track;\n          this.switchingTrack = null;\n          this.hls.trigger(Events.AUDIO_TRACK_SWITCHED, _objectSpread2({}, track));\n        }\n      }\n      this.fragBufferedComplete(frag, part);\n      if (this.media) {\n        this.tick();\n      }\n    };\n    _proto.onError = function onError(event, data) {\n      var _data$context;\n      if (data.fatal) {\n        this.state = State.ERROR;\n        return;\n      }\n      switch (data.details) {\n        case ErrorDetails.FRAG_GAP:\n        case ErrorDetails.FRAG_PARSING_ERROR:\n        case ErrorDetails.FRAG_DECRYPT_ERROR:\n        case ErrorDetails.FRAG_LOAD_ERROR:\n        case ErrorDetails.FRAG_LOAD_TIMEOUT:\n        case ErrorDetails.KEY_LOAD_ERROR:\n        case ErrorDetails.KEY_LOAD_TIMEOUT:\n          this.onFragmentOrKeyLoadError(PlaylistLevelType.AUDIO, data);\n          break;\n        case ErrorDetails.AUDIO_TRACK_LOAD_ERROR:\n        case ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:\n        case ErrorDetails.LEVEL_PARSING_ERROR:\n          // in case of non fatal error while loading track, if not retrying to load track, switch back to IDLE\n          if (!data.levelRetry && this.state === State.WAITING_TRACK && ((_data$context = data.context) == null ? void 0 : _data$context.type) === PlaylistContextType.AUDIO_TRACK) {\n            this.state = State.IDLE;\n          }\n          break;\n        case ErrorDetails.BUFFER_ADD_CODEC_ERROR:\n        case ErrorDetails.BUFFER_APPEND_ERROR:\n          if (data.parent !== 'audio') {\n            return;\n          }\n          this.resetLoadingState();\n          break;\n        case ErrorDetails.BUFFER_FULL_ERROR:\n          if (data.parent !== 'audio') {\n            return;\n          }\n          if (this.reduceLengthAndFlushBuffer(data)) {\n            this.bufferedTrack = null;\n            _BaseStreamController.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, 'audio');\n          }\n          break;\n        case ErrorDetails.INTERNAL_EXCEPTION:\n          this.recoverWorkerError(data);\n          break;\n      }\n    };\n    _proto.onBufferFlushing = function onBufferFlushing(event, _ref3) {\n      var type = _ref3.type;\n      if (type !== ElementaryStreamTypes.VIDEO) {\n        this.flushing = true;\n      }\n    };\n    _proto.onBufferFlushed = function onBufferFlushed(event, _ref4) {\n      var type = _ref4.type;\n      if (type !== ElementaryStreamTypes.VIDEO) {\n        this.flushing = false;\n        this.bufferFlushed = true;\n        if (this.state === State.ENDED) {\n          this.state = State.IDLE;\n        }\n        var mediaBuffer = this.mediaBuffer || this.media;\n        if (mediaBuffer) {\n          this.afterBufferFlushed(mediaBuffer, type, PlaylistLevelType.AUDIO);\n          this.tick();\n        }\n      }\n    };\n    _proto._handleTransmuxComplete = function _handleTransmuxComplete(transmuxResult) {\n      var _id3$samples;\n      var id = 'audio';\n      var hls = this.hls;\n      var remuxResult = transmuxResult.remuxResult,\n        chunkMeta = transmuxResult.chunkMeta;\n      var context = this.getCurrentContext(chunkMeta);\n      if (!context) {\n        this.resetWhenMissingContext(chunkMeta);\n        return;\n      }\n      var frag = context.frag,\n        part = context.part,\n        level = context.level;\n      var details = level.details;\n      var audio = remuxResult.audio,\n        text = remuxResult.text,\n        id3 = remuxResult.id3,\n        initSegment = remuxResult.initSegment;\n\n      // Check if the current fragment has been aborted. We check this by first seeing if we're still playing the current level.\n      // If we are, subsequently check if the currently loading fragment (fragCurrent) has changed.\n      if (this.fragContextChanged(frag) || !details) {\n        this.fragmentTracker.removeFragment(frag);\n        return;\n      }\n      this.state = State.PARSING;\n      if (this.switchingTrack && audio) {\n        this.completeAudioSwitch(this.switchingTrack);\n      }\n      if (initSegment != null && initSegment.tracks) {\n        var mapFragment = frag.initSegment || frag;\n        this._bufferInitSegment(level, initSegment.tracks, mapFragment, chunkMeta);\n        hls.trigger(Events.FRAG_PARSING_INIT_SEGMENT, {\n          frag: mapFragment,\n          id: id,\n          tracks: initSegment.tracks\n        });\n        // Only flush audio from old audio tracks when PTS is known on new audio track\n      }\n      if (audio) {\n        var startPTS = audio.startPTS,\n          endPTS = audio.endPTS,\n          startDTS = audio.startDTS,\n          endDTS = audio.endDTS;\n        if (part) {\n          part.elementaryStreams[ElementaryStreamTypes.AUDIO] = {\n            startPTS: startPTS,\n            endPTS: endPTS,\n            startDTS: startDTS,\n            endDTS: endDTS\n          };\n        }\n        frag.setElementaryStreamInfo(ElementaryStreamTypes.AUDIO, startPTS, endPTS, startDTS, endDTS);\n        this.bufferFragmentData(audio, frag, part, chunkMeta);\n      }\n      if (id3 != null && (_id3$samples = id3.samples) != null && _id3$samples.length) {\n        var emittedID3 = _extends({\n          id: id,\n          frag: frag,\n          details: details\n        }, id3);\n        hls.trigger(Events.FRAG_PARSING_METADATA, emittedID3);\n      }\n      if (text) {\n        var emittedText = _extends({\n          id: id,\n          frag: frag,\n          details: details\n        }, text);\n        hls.trigger(Events.FRAG_PARSING_USERDATA, emittedText);\n      }\n    };\n    _proto._bufferInitSegment = function _bufferInitSegment(currentLevel, tracks, frag, chunkMeta) {\n      if (this.state !== State.PARSING) {\n        return;\n      }\n      // delete any video track found on audio transmuxer\n      if (tracks.video) {\n        delete tracks.video;\n      }\n      if (tracks.audiovideo) {\n        delete tracks.audiovideo;\n      }\n\n      // include levelCodec in audio and video tracks\n      if (!tracks.audio) {\n        return;\n      }\n      var track = tracks.audio;\n      track.id = PlaylistLevelType.AUDIO;\n      var variantAudioCodecs = currentLevel.audioCodec;\n      this.log(\"Init audio buffer, container:\" + track.container + \", codecs[level/parsed]=[\" + variantAudioCodecs + \"/\" + track.codec + \"]\");\n      // SourceBuffer will use track.levelCodec if defined\n      if (variantAudioCodecs && variantAudioCodecs.split(',').length === 1) {\n        track.levelCodec = variantAudioCodecs;\n      }\n      this.hls.trigger(Events.BUFFER_CODECS, tracks);\n      var initSegment = track.initSegment;\n      if (initSegment != null && initSegment.byteLength) {\n        var segment = {\n          type: 'audio',\n          frag: frag,\n          part: null,\n          chunkMeta: chunkMeta,\n          parent: frag.type,\n          data: initSegment\n        };\n        this.hls.trigger(Events.BUFFER_APPENDING, segment);\n      }\n      // trigger handler right now\n      this.tickImmediate();\n    };\n    _proto.loadFragment = function loadFragment(frag, track, targetBufferTime) {\n      // only load if fragment is not loaded or if in audio switch\n      var fragState = this.fragmentTracker.getState(frag);\n\n      // we force a frag loading in audio switch as fragment tracker might not have evicted previous frags in case of quick audio switch\n      if (this.switchingTrack || fragState === FragmentState.NOT_LOADED || fragState === FragmentState.PARTIAL) {\n        var _track$details;\n        if (!isMediaFragment(frag)) {\n          this._loadInitSegment(frag, track);\n        } else if ((_track$details = track.details) != null && _track$details.live && !this.initPTS[frag.cc]) {\n          this.log(\"Waiting for video PTS in continuity counter \" + frag.cc + \" of live stream before loading audio fragment \" + frag.sn + \" of level \" + this.trackId);\n          this.state = State.WAITING_INIT_PTS;\n          var mainDetails = this.mainDetails;\n          if (mainDetails && mainDetails.fragmentStart !== track.details.fragmentStart) {\n            alignMediaPlaylistByPDT(track.details, mainDetails);\n          }\n        } else {\n          _BaseStreamController.prototype.loadFragment.call(this, frag, track, targetBufferTime);\n        }\n      } else {\n        this.clearTrackerIfNeeded(frag);\n      }\n    };\n    _proto.flushAudioIfNeeded = function flushAudioIfNeeded(switchingTrack) {\n      if (this.media && this.bufferedTrack) {\n        var _this$bufferedTrack = this.bufferedTrack,\n          name = _this$bufferedTrack.name,\n          lang = _this$bufferedTrack.lang,\n          assocLang = _this$bufferedTrack.assocLang,\n          characteristics = _this$bufferedTrack.characteristics,\n          audioCodec = _this$bufferedTrack.audioCodec,\n          channels = _this$bufferedTrack.channels;\n        if (!matchesOption({\n          name: name,\n          lang: lang,\n          assocLang: assocLang,\n          characteristics: characteristics,\n          audioCodec: audioCodec,\n          channels: channels\n        }, switchingTrack, audioMatchPredicate)) {\n          if (useAlternateAudio(switchingTrack.url, this.hls)) {\n            this.log('Switching audio track : flushing all audio');\n            _BaseStreamController.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, 'audio');\n            this.bufferedTrack = null;\n          } else {\n            // Main is being buffered. Set bufferedTrack so that it is flushed when switching back to alt-audio\n            this.bufferedTrack = switchingTrack;\n          }\n        }\n      }\n    };\n    _proto.completeAudioSwitch = function completeAudioSwitch(switchingTrack) {\n      var hls = this.hls;\n      this.flushAudioIfNeeded(switchingTrack);\n      this.bufferedTrack = switchingTrack;\n      this.switchingTrack = null;\n      hls.trigger(Events.AUDIO_TRACK_SWITCHED, _objectSpread2({}, switchingTrack));\n    };\n    return AudioStreamController;\n  }(BaseStreamController);\n\n  var BasePlaylistController = /*#__PURE__*/function (_Logger) {\n    function BasePlaylistController(hls, logPrefix) {\n      var _this;\n      _this = _Logger.call(this, logPrefix, hls.logger) || this;\n      _this.hls = void 0;\n      _this.canLoad = false;\n      _this.timer = -1;\n      _this.hls = hls;\n      return _this;\n    }\n    _inheritsLoose(BasePlaylistController, _Logger);\n    var _proto = BasePlaylistController.prototype;\n    _proto.destroy = function destroy() {\n      this.clearTimer();\n      // @ts-ignore\n      this.hls = this.log = this.warn = null;\n    };\n    _proto.clearTimer = function clearTimer() {\n      if (this.timer !== -1) {\n        self.clearTimeout(this.timer);\n        this.timer = -1;\n      }\n    };\n    _proto.startLoad = function startLoad() {\n      this.canLoad = true;\n      this.loadPlaylist();\n    };\n    _proto.stopLoad = function stopLoad() {\n      this.canLoad = false;\n      this.clearTimer();\n    };\n    _proto.switchParams = function switchParams(playlistUri, previous, current) {\n      var renditionReports = previous == null ? void 0 : previous.renditionReports;\n      if (renditionReports) {\n        var foundIndex = -1;\n        for (var i = 0; i < renditionReports.length; i++) {\n          var attr = renditionReports[i];\n          var uri = void 0;\n          try {\n            uri = new self.URL(attr.URI, previous.url).href;\n          } catch (error) {\n            this.warn(\"Could not construct new URL for Rendition Report: \" + error);\n            uri = attr.URI || '';\n          }\n          // Use exact match. Otherwise, the last partial match, if any, will be used\n          // (Playlist URI includes a query string that the Rendition Report does not)\n          if (uri === playlistUri) {\n            foundIndex = i;\n            break;\n          } else if (uri === playlistUri.substring(0, uri.length)) {\n            foundIndex = i;\n          }\n        }\n        if (foundIndex !== -1) {\n          var _attr = renditionReports[foundIndex];\n          var msn = parseInt(_attr['LAST-MSN']) || (previous == null ? void 0 : previous.lastPartSn);\n          var part = parseInt(_attr['LAST-PART']) || (previous == null ? void 0 : previous.lastPartIndex);\n          if (this.hls.config.lowLatencyMode) {\n            var currentGoal = Math.min(previous.age - previous.partTarget, previous.targetduration);\n            if (part >= 0 && currentGoal > previous.partTarget) {\n              part += 1;\n            }\n          }\n          var skip = current && getSkipValue(current);\n          return new HlsUrlParameters(msn, part >= 0 ? part : undefined, skip);\n        }\n      }\n    };\n    _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {\n      // Loading is handled by the subclasses\n      this.clearTimer();\n    };\n    _proto.loadingPlaylist = function loadingPlaylist(playlist, hlsUrlParameters) {\n      // Loading is handled by the subclasses\n      this.clearTimer();\n    };\n    _proto.shouldLoadPlaylist = function shouldLoadPlaylist(playlist) {\n      return this.canLoad && !!playlist && !!playlist.url && (!playlist.details || playlist.details.live);\n    };\n    _proto.getUrlWithDirectives = function getUrlWithDirectives(uri, hlsUrlParameters) {\n      if (hlsUrlParameters) {\n        try {\n          return hlsUrlParameters.addDirectives(uri);\n        } catch (error) {\n          this.warn(\"Could not construct new URL with HLS Delivery Directives: \" + error);\n        }\n      }\n      return uri;\n    };\n    _proto.playlistLoaded = function playlistLoaded(index, data, previousDetails) {\n      var details = data.details,\n        stats = data.stats;\n\n      // Set last updated date-time\n      var now = self.performance.now();\n      var elapsed = stats.loading.first ? Math.max(0, now - stats.loading.first) : 0;\n      details.advancedDateTime = Date.now() - elapsed;\n\n      // shift fragment starts with timelineOffset\n      var timelineOffset = this.hls.config.timelineOffset;\n      if (timelineOffset !== details.appliedTimelineOffset) {\n        var offset = Math.max(timelineOffset || 0, 0);\n        details.appliedTimelineOffset = offset;\n        details.fragments.forEach(function (frag) {\n          frag.start = frag.playlistOffset + offset;\n        });\n      }\n\n      // if current playlist is a live playlist, arm a timer to reload it\n      if (details.live || previousDetails != null && previousDetails.live) {\n        var levelOrTrack = 'levelInfo' in data ? data.levelInfo : data.track;\n        details.reloaded(previousDetails);\n        // Merge live playlists to adjust fragment starts and fill in delta playlist skipped segments\n        if (previousDetails && details.fragments.length > 0) {\n          mergeDetails(previousDetails, details);\n          var error = details.playlistParsingError;\n          if (error) {\n            this.warn(error);\n            var hls = this.hls;\n            if (!hls.config.ignorePlaylistParsingErrors) {\n              var _details$fragments$;\n              var networkDetails = data.networkDetails;\n              hls.trigger(Events.ERROR, {\n                type: ErrorTypes.NETWORK_ERROR,\n                details: ErrorDetails.LEVEL_PARSING_ERROR,\n                fatal: false,\n                url: details.url,\n                error: error,\n                reason: error.message,\n                level: data.level || undefined,\n                parent: (_details$fragments$ = details.fragments[0]) == null ? void 0 : _details$fragments$.type,\n                networkDetails: networkDetails,\n                stats: stats\n              });\n              return;\n            }\n            details.playlistParsingError = null;\n          }\n        }\n        if (details.requestScheduled === -1) {\n          details.requestScheduled = stats.loading.start;\n        }\n        var bufferInfo = this.hls.mainForwardBufferInfo;\n        var position = bufferInfo ? bufferInfo.end - bufferInfo.len : 0;\n        var distanceToLiveEdgeMs = (details.edge - position) * 1000;\n        var reloadInterval = computeReloadInterval(details, distanceToLiveEdgeMs);\n        if (details.requestScheduled + reloadInterval < now) {\n          details.requestScheduled = now;\n        } else {\n          details.requestScheduled += reloadInterval;\n        }\n        this.log(\"live playlist \" + index + \" \" + (details.advanced ? 'REFRESHED ' + details.lastPartSn + '-' + details.lastPartIndex : details.updated ? 'UPDATED' : 'MISSED'));\n        if (!this.canLoad || !details.live) {\n          return;\n        }\n        var deliveryDirectives;\n        var msn = undefined;\n        var part = undefined;\n        if (details.canBlockReload && details.endSN && details.advanced) {\n          // Load level with LL-HLS delivery directives\n          var lowLatencyMode = this.hls.config.lowLatencyMode;\n          var lastPartSn = details.lastPartSn;\n          var endSn = details.endSN;\n          var lastPartIndex = details.lastPartIndex;\n          var hasParts = lastPartIndex !== -1;\n          var atLastPartOfSegment = lastPartSn === endSn;\n          if (hasParts) {\n            // When low latency mode is disabled, request the last part of the next segment\n            if (atLastPartOfSegment) {\n              msn = endSn + 1;\n              part = lowLatencyMode ? 0 : lastPartIndex;\n            } else {\n              msn = lastPartSn;\n              part = lowLatencyMode ? lastPartIndex + 1 : details.maxPartIndex;\n            }\n          } else {\n            msn = endSn + 1;\n          }\n          // Low-Latency CDN Tune-in: \"age\" header and time since load indicates we're behind by more than one part\n          // Update directives to obtain the Playlist that has the estimated additional duration of media\n          var lastAdvanced = details.age;\n          var cdnAge = lastAdvanced + details.ageHeader;\n          var currentGoal = Math.min(cdnAge - details.partTarget, details.targetduration * 1.5);\n          if (currentGoal > 0) {\n            if (cdnAge > details.targetduration * 3) {\n              // Omit segment and part directives when the last response was more than 3 target durations ago,\n              this.log(\"Playlist last advanced \" + lastAdvanced.toFixed(2) + \"s ago. Omitting segment and part directives.\");\n              msn = undefined;\n              part = undefined;\n            } else if (previousDetails != null && previousDetails.tuneInGoal && cdnAge - details.partTarget > previousDetails.tuneInGoal) {\n              // If we attempted to get the next or latest playlist update, but currentGoal increased,\n              // then we either can't catchup, or the \"age\" header cannot be trusted.\n              this.warn(\"CDN Tune-in goal increased from: \" + previousDetails.tuneInGoal + \" to: \" + currentGoal + \" with playlist age: \" + details.age);\n              currentGoal = 0;\n            } else {\n              var segments = Math.floor(currentGoal / details.targetduration);\n              msn += segments;\n              if (part !== undefined) {\n                var parts = Math.round(currentGoal % details.targetduration / details.partTarget);\n                part += parts;\n              }\n              this.log(\"CDN Tune-in age: \" + details.ageHeader + \"s last advanced \" + lastAdvanced.toFixed(2) + \"s goal: \" + currentGoal + \" skip sn \" + segments + \" to part \" + part);\n            }\n            details.tuneInGoal = currentGoal;\n          }\n          deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);\n          if (lowLatencyMode || !atLastPartOfSegment) {\n            details.requestScheduled = now;\n            this.loadingPlaylist(levelOrTrack, deliveryDirectives);\n            return;\n          }\n        } else if (details.canBlockReload || details.canSkipUntil) {\n          deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);\n        }\n        if (deliveryDirectives && msn !== undefined && details.canBlockReload) {\n          details.requestScheduled = stats.loading.first + Math.max(reloadInterval - elapsed * 2, reloadInterval / 2);\n        }\n        this.scheduleLoading(levelOrTrack, deliveryDirectives, details);\n      } else {\n        this.clearTimer();\n      }\n    };\n    _proto.scheduleLoading = function scheduleLoading(levelOrTrack, deliveryDirectives, updatedDetails) {\n      var _this2 = this;\n      var details = updatedDetails || levelOrTrack.details;\n      if (!details) {\n        this.loadingPlaylist(levelOrTrack, deliveryDirectives);\n        return;\n      }\n      var now = self.performance.now();\n      var requestScheduled = details.requestScheduled;\n      if (now >= requestScheduled) {\n        this.loadingPlaylist(levelOrTrack, deliveryDirectives);\n        return;\n      }\n      var estimatedTimeUntilUpdate = requestScheduled - now;\n      this.log(\"reload live playlist \" + (levelOrTrack.name || levelOrTrack.bitrate + 'bps') + \" in \" + Math.round(estimatedTimeUntilUpdate) + \" ms\");\n      this.clearTimer();\n      this.timer = self.setTimeout(function () {\n        return _this2.loadingPlaylist(levelOrTrack, deliveryDirectives);\n      }, estimatedTimeUntilUpdate);\n    };\n    _proto.getDeliveryDirectives = function getDeliveryDirectives(details, previousDeliveryDirectives, msn, part) {\n      var skip = getSkipValue(details);\n      if (previousDeliveryDirectives != null && previousDeliveryDirectives.skip && details.deltaUpdateFailed) {\n        msn = previousDeliveryDirectives.msn;\n        part = previousDeliveryDirectives.part;\n        skip = HlsSkip.No;\n      }\n      return new HlsUrlParameters(msn, part, skip);\n    };\n    _proto.checkRetry = function checkRetry(errorEvent) {\n      var _this3 = this;\n      var errorDetails = errorEvent.details;\n      var isTimeout = isTimeoutError(errorEvent);\n      var errorAction = errorEvent.errorAction;\n      var _ref = errorAction || {},\n        action = _ref.action,\n        _ref$retryCount = _ref.retryCount,\n        retryCount = _ref$retryCount === void 0 ? 0 : _ref$retryCount,\n        retryConfig = _ref.retryConfig;\n      var retry = !!errorAction && !!retryConfig && (action === NetworkErrorAction.RetryRequest || !errorAction.resolved && action === NetworkErrorAction.SendAlternateToPenaltyBox);\n      if (retry) {\n        var _errorEvent$context;\n        if (retryCount >= retryConfig.maxNumRetry) {\n          return false;\n        }\n        if (isTimeout && (_errorEvent$context = errorEvent.context) != null && _errorEvent$context.deliveryDirectives) {\n          // The LL-HLS request already timed out so retry immediately\n          this.warn(\"Retrying playlist loading \" + (retryCount + 1) + \"/\" + retryConfig.maxNumRetry + \" after \\\"\" + errorDetails + \"\\\" without delivery-directives\");\n          this.loadPlaylist();\n        } else {\n          var delay = getRetryDelay(retryConfig, retryCount);\n          // Schedule level/track reload\n          this.clearTimer();\n          this.timer = self.setTimeout(function () {\n            return _this3.loadPlaylist();\n          }, delay);\n          this.warn(\"Retrying playlist loading \" + (retryCount + 1) + \"/\" + retryConfig.maxNumRetry + \" after \\\"\" + errorDetails + \"\\\" in \" + delay + \"ms\");\n        }\n        // `levelRetry = true` used to inform other controllers that a retry is happening\n        errorEvent.levelRetry = true;\n        errorAction.resolved = true;\n      }\n      return retry;\n    };\n    return BasePlaylistController;\n  }(Logger);\n\n  function subtitleOptionsIdentical(trackList1, trackList2) {\n    if (trackList1.length !== trackList2.length) {\n      return false;\n    }\n    for (var i = 0; i < trackList1.length; i++) {\n      if (!mediaAttributesIdentical(trackList1[i].attrs, trackList2[i].attrs)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function mediaAttributesIdentical(attrs1, attrs2, customAttributes) {\n    // Media options with the same rendition ID must be bit identical\n    var stableRenditionId = attrs1['STABLE-RENDITION-ID'];\n    if (stableRenditionId && !customAttributes) {\n      return stableRenditionId === attrs2['STABLE-RENDITION-ID'];\n    }\n    // When rendition ID is not present, compare attributes\n    return !(customAttributes || ['LANGUAGE', 'NAME', 'CHARACTERISTICS', 'AUTOSELECT', 'DEFAULT', 'FORCED', 'ASSOC-LANGUAGE']).some(function (subtitleAttribute) {\n      return attrs1[subtitleAttribute] !== attrs2[subtitleAttribute];\n    });\n  }\n  function subtitleTrackMatchesTextTrack(subtitleTrack, textTrack) {\n    return textTrack.label.toLowerCase() === subtitleTrack.name.toLowerCase() && (!textTrack.language || textTrack.language.toLowerCase() === (subtitleTrack.lang || '').toLowerCase());\n  }\n\n  var AudioTrackController = /*#__PURE__*/function (_BasePlaylistControll) {\n    function AudioTrackController(hls) {\n      var _this;\n      _this = _BasePlaylistControll.call(this, hls, 'audio-track-controller') || this;\n      _this.tracks = [];\n      _this.groupIds = null;\n      _this.tracksInGroup = [];\n      _this.trackId = -1;\n      _this.currentTrack = null;\n      _this.selectDefaultTrack = true;\n      _this.registerListeners();\n      return _this;\n    }\n    _inheritsLoose(AudioTrackController, _BasePlaylistControll);\n    var _proto = AudioTrackController.prototype;\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.on(Events.LEVEL_LOADING, this.onLevelLoading, this);\n      hls.on(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n      hls.on(Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n      hls.on(Events.ERROR, this.onError, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.off(Events.LEVEL_LOADING, this.onLevelLoading, this);\n      hls.off(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n      hls.off(Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n      hls.off(Events.ERROR, this.onError, this);\n    };\n    _proto.destroy = function destroy() {\n      this.unregisterListeners();\n      this.tracks.length = 0;\n      this.tracksInGroup.length = 0;\n      this.currentTrack = null;\n      _BasePlaylistControll.prototype.destroy.call(this);\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      this.tracks = [];\n      this.tracksInGroup = [];\n      this.groupIds = null;\n      this.currentTrack = null;\n      this.trackId = -1;\n      this.selectDefaultTrack = true;\n    };\n    _proto.onManifestParsed = function onManifestParsed(event, data) {\n      this.tracks = data.audioTracks || [];\n    };\n    _proto.onAudioTrackLoaded = function onAudioTrackLoaded(event, data) {\n      var id = data.id,\n        groupId = data.groupId,\n        details = data.details;\n      var trackInActiveGroup = this.tracksInGroup[id];\n      if (!trackInActiveGroup || trackInActiveGroup.groupId !== groupId) {\n        this.warn(\"Audio track with id:\" + id + \" and group:\" + groupId + \" not found in active group \" + (trackInActiveGroup == null ? void 0 : trackInActiveGroup.groupId));\n        return;\n      }\n      var curDetails = trackInActiveGroup.details;\n      trackInActiveGroup.details = data.details;\n      this.log(\"Audio track \" + id + \" \\\"\" + trackInActiveGroup.name + \"\\\" lang:\" + trackInActiveGroup.lang + \" group:\" + groupId + \" loaded [\" + details.startSN + \"-\" + details.endSN + \"]\");\n      if (id === this.trackId) {\n        this.playlistLoaded(id, data, curDetails);\n      }\n    };\n    _proto.onLevelLoading = function onLevelLoading(event, data) {\n      this.switchLevel(data.level);\n    };\n    _proto.onLevelSwitching = function onLevelSwitching(event, data) {\n      this.switchLevel(data.level);\n    };\n    _proto.switchLevel = function switchLevel(levelIndex) {\n      var levelInfo = this.hls.levels[levelIndex];\n      if (!levelInfo) {\n        return;\n      }\n      var audioGroups = levelInfo.audioGroups || null;\n      var currentGroups = this.groupIds;\n      var currentTrack = this.currentTrack;\n      if (!audioGroups || (currentGroups == null ? void 0 : currentGroups.length) !== (audioGroups == null ? void 0 : audioGroups.length) || audioGroups != null && audioGroups.some(function (groupId) {\n        return (currentGroups == null ? void 0 : currentGroups.indexOf(groupId)) === -1;\n      })) {\n        this.groupIds = audioGroups;\n        this.trackId = -1;\n        this.currentTrack = null;\n        var audioTracks = this.tracks.filter(function (track) {\n          return !audioGroups || audioGroups.indexOf(track.groupId) !== -1;\n        });\n        if (audioTracks.length) {\n          // Disable selectDefaultTrack if there are no default tracks\n          if (this.selectDefaultTrack && !audioTracks.some(function (track) {\n            return track.default;\n          })) {\n            this.selectDefaultTrack = false;\n          }\n          // track.id should match hls.audioTracks index\n          audioTracks.forEach(function (track, i) {\n            track.id = i;\n          });\n        } else if (!currentTrack && !this.tracksInGroup.length) {\n          // Do not dispatch AUDIO_TRACKS_UPDATED when there were and are no tracks\n          return;\n        }\n        this.tracksInGroup = audioTracks;\n\n        // Find preferred track\n        var audioPreference = this.hls.config.audioPreference;\n        if (!currentTrack && audioPreference) {\n          var groupIndex = findMatchingOption(audioPreference, audioTracks, audioMatchPredicate);\n          if (groupIndex > -1) {\n            currentTrack = audioTracks[groupIndex];\n          } else {\n            var allIndex = findMatchingOption(audioPreference, this.tracks);\n            currentTrack = this.tracks[allIndex];\n          }\n        }\n\n        // Select initial track\n        var trackId = this.findTrackId(currentTrack);\n        if (trackId === -1 && currentTrack) {\n          trackId = this.findTrackId(null);\n        }\n\n        // Dispatch events and load track if needed\n        var audioTracksUpdated = {\n          audioTracks: audioTracks\n        };\n        this.log(\"Updating audio tracks, \" + audioTracks.length + \" track(s) found in group(s): \" + (audioGroups == null ? void 0 : audioGroups.join(',')));\n        this.hls.trigger(Events.AUDIO_TRACKS_UPDATED, audioTracksUpdated);\n        var selectedTrackId = this.trackId;\n        if (trackId !== -1 && selectedTrackId === -1) {\n          this.setAudioTrack(trackId);\n        } else if (audioTracks.length && selectedTrackId === -1) {\n          var _this$groupIds;\n          var error = new Error(\"No audio track selected for current audio group-ID(s): \" + ((_this$groupIds = this.groupIds) == null ? void 0 : _this$groupIds.join(',')) + \" track count: \" + audioTracks.length);\n          this.warn(error.message);\n          this.hls.trigger(Events.ERROR, {\n            type: ErrorTypes.MEDIA_ERROR,\n            details: ErrorDetails.AUDIO_TRACK_LOAD_ERROR,\n            fatal: true,\n            error: error\n          });\n        }\n      }\n    };\n    _proto.onError = function onError(event, data) {\n      if (data.fatal || !data.context) {\n        return;\n      }\n      if (data.context.type === PlaylistContextType.AUDIO_TRACK && data.context.id === this.trackId && (!this.groupIds || this.groupIds.indexOf(data.context.groupId) !== -1)) {\n        this.checkRetry(data);\n      }\n    };\n    _proto.setAudioOption = function setAudioOption(audioOption) {\n      var hls = this.hls;\n      hls.config.audioPreference = audioOption;\n      if (audioOption) {\n        var allAudioTracks = this.allAudioTracks;\n        this.selectDefaultTrack = false;\n        if (allAudioTracks.length) {\n          // First see if current option matches (no switch op)\n          var currentTrack = this.currentTrack;\n          if (currentTrack && matchesOption(audioOption, currentTrack, audioMatchPredicate)) {\n            return currentTrack;\n          }\n          // Find option in available tracks (tracksInGroup)\n          var groupIndex = findMatchingOption(audioOption, this.tracksInGroup, audioMatchPredicate);\n          if (groupIndex > -1) {\n            var track = this.tracksInGroup[groupIndex];\n            this.setAudioTrack(groupIndex);\n            return track;\n          } else if (currentTrack) {\n            // Find option in nearest level audio group\n            var searchIndex = hls.loadLevel;\n            if (searchIndex === -1) {\n              searchIndex = hls.firstAutoLevel;\n            }\n            var switchIndex = findClosestLevelWithAudioGroup(audioOption, hls.levels, allAudioTracks, searchIndex, audioMatchPredicate);\n            if (switchIndex === -1) {\n              // could not find matching variant\n              return null;\n            }\n            // and switch level to acheive the audio group switch\n            hls.nextLoadLevel = switchIndex;\n          }\n          if (audioOption.channels || audioOption.audioCodec) {\n            // Could not find a match with codec / channels predicate\n            // Find a match without channels or codec\n            var withoutCodecAndChannelsMatch = findMatchingOption(audioOption, allAudioTracks);\n            if (withoutCodecAndChannelsMatch > -1) {\n              return allAudioTracks[withoutCodecAndChannelsMatch];\n            }\n          }\n        }\n      }\n      return null;\n    };\n    _proto.setAudioTrack = function setAudioTrack(newId) {\n      var tracks = this.tracksInGroup;\n\n      // check if level idx is valid\n      if (newId < 0 || newId >= tracks.length) {\n        this.warn(\"Invalid audio track id: \" + newId);\n        return;\n      }\n      this.selectDefaultTrack = false;\n      var lastTrack = this.currentTrack;\n      var track = tracks[newId];\n      var trackLoaded = track.details && !track.details.live;\n      if (newId === this.trackId && track === lastTrack && trackLoaded) {\n        return;\n      }\n      this.log(\"Switching to audio-track \" + newId + \" \\\"\" + track.name + \"\\\" lang:\" + track.lang + \" group:\" + track.groupId + \" channels:\" + track.channels);\n      this.trackId = newId;\n      this.currentTrack = track;\n      this.hls.trigger(Events.AUDIO_TRACK_SWITCHING, _objectSpread2({}, track));\n      // Do not reload track unless live\n      if (trackLoaded) {\n        return;\n      }\n      var hlsUrlParameters = this.switchParams(track.url, lastTrack == null ? void 0 : lastTrack.details, track.details);\n      this.loadPlaylist(hlsUrlParameters);\n    };\n    _proto.findTrackId = function findTrackId(currentTrack) {\n      var audioTracks = this.tracksInGroup;\n      for (var i = 0; i < audioTracks.length; i++) {\n        var track = audioTracks[i];\n        if (this.selectDefaultTrack && !track.default) {\n          continue;\n        }\n        if (!currentTrack || matchesOption(currentTrack, track, audioMatchPredicate)) {\n          return i;\n        }\n      }\n      if (currentTrack) {\n        var name = currentTrack.name,\n          lang = currentTrack.lang,\n          assocLang = currentTrack.assocLang,\n          characteristics = currentTrack.characteristics,\n          audioCodec = currentTrack.audioCodec,\n          channels = currentTrack.channels;\n        for (var _i = 0; _i < audioTracks.length; _i++) {\n          var _track = audioTracks[_i];\n          if (matchesOption({\n            name: name,\n            lang: lang,\n            assocLang: assocLang,\n            characteristics: characteristics,\n            audioCodec: audioCodec,\n            channels: channels\n          }, _track, audioMatchPredicate)) {\n            return _i;\n          }\n        }\n        for (var _i2 = 0; _i2 < audioTracks.length; _i2++) {\n          var _track2 = audioTracks[_i2];\n          if (mediaAttributesIdentical(currentTrack.attrs, _track2.attrs, ['LANGUAGE', 'ASSOC-LANGUAGE', 'CHARACTERISTICS'])) {\n            return _i2;\n          }\n        }\n        for (var _i3 = 0; _i3 < audioTracks.length; _i3++) {\n          var _track3 = audioTracks[_i3];\n          if (mediaAttributesIdentical(currentTrack.attrs, _track3.attrs, ['LANGUAGE'])) {\n            return _i3;\n          }\n        }\n      }\n      return -1;\n    };\n    _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {\n      _BasePlaylistControll.prototype.loadPlaylist.call(this);\n      var audioTrack = this.currentTrack;\n      if (!this.shouldLoadPlaylist(audioTrack)) {\n        return;\n      }\n      // Do not load audio rendition with URI matching main variant URI\n      if (useAlternateAudio(audioTrack.url, this.hls)) {\n        this.scheduleLoading(audioTrack, hlsUrlParameters);\n      }\n    };\n    _proto.loadingPlaylist = function loadingPlaylist(audioTrack, hlsUrlParameters) {\n      _BasePlaylistControll.prototype.loadingPlaylist.call(this, audioTrack, hlsUrlParameters);\n      var id = audioTrack.id;\n      var groupId = audioTrack.groupId;\n      var url = this.getUrlWithDirectives(audioTrack.url, hlsUrlParameters);\n      var details = audioTrack.details;\n      var age = details == null ? void 0 : details.age;\n      this.log(\"Loading audio-track \" + id + \" \\\"\" + audioTrack.name + \"\\\" lang:\" + audioTrack.lang + \" group:\" + groupId + ((hlsUrlParameters == null ? void 0 : hlsUrlParameters.msn) !== undefined ? ' at sn ' + hlsUrlParameters.msn + ' part ' + hlsUrlParameters.part : '') + (age && details.live ? ' age ' + age.toFixed(1) + (details.type ? ' ' + details.type || 0 : '') : '') + \" \" + url);\n      this.hls.trigger(Events.AUDIO_TRACK_LOADING, {\n        url: url,\n        id: id,\n        groupId: groupId,\n        deliveryDirectives: hlsUrlParameters || null,\n        track: audioTrack\n      });\n    };\n    return _createClass(AudioTrackController, [{\n      key: \"allAudioTracks\",\n      get: function get() {\n        return this.tracks;\n      }\n    }, {\n      key: \"audioTracks\",\n      get: function get() {\n        return this.tracksInGroup;\n      }\n    }, {\n      key: \"audioTrack\",\n      get: function get() {\n        return this.trackId;\n      },\n      set: function set(newId) {\n        // If audio track is selected from API then don't choose from the manifest default track\n        this.selectDefaultTrack = false;\n        this.setAudioTrack(newId);\n      }\n    }]);\n  }(BasePlaylistController);\n\n  var BufferOperationQueue = /*#__PURE__*/function () {\n    function BufferOperationQueue(sourceBufferReference) {\n      this.tracks = void 0;\n      this.queues = {\n        video: [],\n        audio: [],\n        audiovideo: []\n      };\n      this.tracks = sourceBufferReference;\n    }\n    var _proto = BufferOperationQueue.prototype;\n    _proto.destroy = function destroy() {\n      this.tracks = this.queues = null;\n    };\n    _proto.append = function append(operation, type, pending) {\n      if (this.queues === null || this.tracks === null) {\n        return;\n      }\n      var queue = this.queues[type];\n      queue.push(operation);\n      if (queue.length === 1 && !pending) {\n        this.executeNext(type);\n      }\n    };\n    _proto.appendBlocker = function appendBlocker(type) {\n      var _this = this;\n      return new Promise(function (resolve) {\n        var operation = {\n          label: 'async-blocker',\n          execute: resolve,\n          onStart: function onStart() {},\n          onComplete: function onComplete() {},\n          onError: function onError() {}\n        };\n        _this.append(operation, type);\n      });\n    };\n    _proto.prependBlocker = function prependBlocker(type) {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        if (_this2.queues) {\n          var operation = {\n            label: 'async-blocker-prepend',\n            execute: resolve,\n            onStart: function onStart() {},\n            onComplete: function onComplete() {},\n            onError: function onError() {}\n          };\n          _this2.queues[type].unshift(operation);\n        }\n      });\n    };\n    _proto.removeBlockers = function removeBlockers() {\n      if (this.queues === null) {\n        return;\n      }\n      [this.queues.video, this.queues.audio, this.queues.audiovideo].forEach(function (queue) {\n        var _queue$;\n        var label = (_queue$ = queue[0]) == null ? void 0 : _queue$.label;\n        if (label === 'async-blocker' || label === 'async-blocker-prepend') {\n          queue[0].execute();\n          queue.splice(0, 1);\n        }\n      });\n    };\n    _proto.unblockAudio = function unblockAudio(op) {\n      if (this.queues === null) {\n        return;\n      }\n      var queue = this.queues.audio;\n      if (queue[0] === op) {\n        this.shiftAndExecuteNext('audio');\n      }\n    };\n    _proto.executeNext = function executeNext(type) {\n      if (this.queues === null || this.tracks === null) {\n        return;\n      }\n      var queue = this.queues[type];\n      if (queue.length) {\n        var operation = queue[0];\n        try {\n          // Operations are expected to result in an 'updateend' event being fired. If not, the queue will lock. Operations\n          // which do not end with this event must call _onSBUpdateEnd manually\n          operation.execute();\n        } catch (error) {\n          var _this$tracks$type;\n          operation.onError(error);\n          if (this.queues === null || this.tracks === null) {\n            return;\n          }\n\n          // Only shift the current operation off, otherwise the updateend handler will do this for us\n          var sb = (_this$tracks$type = this.tracks[type]) == null ? void 0 : _this$tracks$type.buffer;\n          if (!(sb != null && sb.updating)) {\n            this.shiftAndExecuteNext(type);\n          }\n        }\n      }\n    };\n    _proto.shiftAndExecuteNext = function shiftAndExecuteNext(type) {\n      if (this.queues === null) {\n        return;\n      }\n      this.queues[type].shift();\n      this.executeNext(type);\n    };\n    _proto.current = function current(type) {\n      var _this$queues;\n      return ((_this$queues = this.queues) == null ? void 0 : _this$queues[type][0]) || null;\n    };\n    _proto.toString = function toString() {\n      var queues = this.queues,\n        tracks = this.tracks;\n      if (queues === null || tracks === null) {\n        return \"<destroyed>\";\n      }\n      return \"\\n\" + this.list('video') + \"\\n\" + this.list('audio') + \"\\n\" + this.list('audiovideo') + \"}\";\n    };\n    _proto.list = function list(type) {\n      var _this$queues2, _this$tracks;\n      return (_this$queues2 = this.queues) != null && _this$queues2[type] || (_this$tracks = this.tracks) != null && _this$tracks[type] ? type + \": (\" + this.listSbInfo(type) + \") \" + this.listOps(type) : '';\n    };\n    _proto.listSbInfo = function listSbInfo(type) {\n      var _this$tracks2;\n      var track = (_this$tracks2 = this.tracks) == null ? void 0 : _this$tracks2[type];\n      var sb = track == null ? void 0 : track.buffer;\n      if (!sb) {\n        return 'none';\n      }\n      return \"SourceBuffer\" + (sb.updating ? ' updating' : '') + (track.ended ? ' ended' : '') + (track.ending ? ' ending' : '');\n    };\n    _proto.listOps = function listOps(type) {\n      var _this$queues3;\n      return ((_this$queues3 = this.queues) == null ? void 0 : _this$queues3[type].map(function (op) {\n        return op.label;\n      }).join(', ')) || '';\n    };\n    return BufferOperationQueue;\n  }();\n\n  var VIDEO_CODEC_PROFILE_REPLACE = /(avc[1234]|hvc1|hev1|dvh[1e]|vp09|av01)(?:\\.[^.,]+)+/;\n  var TRACK_REMOVED_ERROR_NAME = 'HlsJsTrackRemovedError';\n  var HlsJsTrackRemovedError = /*#__PURE__*/function (_Error) {\n    function HlsJsTrackRemovedError(message) {\n      var _this;\n      _this = _Error.call(this, message) || this;\n      _this.name = TRACK_REMOVED_ERROR_NAME;\n      return _this;\n    }\n    _inheritsLoose(HlsJsTrackRemovedError, _Error);\n    return HlsJsTrackRemovedError;\n  }(/*#__PURE__*/_wrapNativeSuper(Error));\n  var BufferController = /*#__PURE__*/function (_Logger) {\n    function BufferController(hls, fragmentTracker) {\n      var _this2;\n      _this2 = _Logger.call(this, 'buffer-controller', hls.logger) || this;\n      _this2.hls = void 0;\n      _this2.fragmentTracker = void 0;\n      // The level details used to determine duration, target-duration and live\n      _this2.details = null;\n      // cache the self generated object url to detect hijack of video tag\n      _this2._objectUrl = null;\n      // A queue of buffer operations which require the SourceBuffer to not be updating upon execution\n      _this2.operationQueue = null;\n      // The total number track codecs expected before any sourceBuffers are created (2: audio and video or 1: audiovideo | audio | video)\n      _this2.bufferCodecEventsTotal = 0;\n      // A reference to the attached media element\n      _this2.media = null;\n      // A reference to the active media source\n      _this2.mediaSource = null;\n      // Last MP3 audio chunk appended\n      _this2.lastMpegAudioChunk = null;\n      // Audio fragment blocked from appending until corresponding video appends or context changes\n      _this2.blockedAudioAppend = null;\n      // Keep track of video append position for unblocking audio\n      _this2.lastVideoAppendEnd = 0;\n      // Whether or not to use ManagedMediaSource API and append source element to media element.\n      _this2.appendSource = void 0;\n      // Transferred MediaSource information used to detmerine if duration end endstream may be appended\n      _this2.transferData = void 0;\n      // Directives used to override default MediaSource handling\n      _this2.overrides = void 0;\n      // Error counters\n      _this2.appendErrors = {\n        audio: 0,\n        video: 0,\n        audiovideo: 0\n      };\n      // Record of required or created buffers by type. SourceBuffer is stored in Track.buffer once created.\n      _this2.tracks = {};\n      // Array of SourceBuffer type and SourceBuffer (or null). One entry per TrackSet in this.tracks.\n      _this2.sourceBuffers = [[null, null], [null, null]];\n      _this2._onEndStreaming = function (event) {\n        var _this2$mediaSource;\n        if (!_this2.hls) {\n          return;\n        }\n        if (((_this2$mediaSource = _this2.mediaSource) == null ? void 0 : _this2$mediaSource.readyState) !== 'open') {\n          return;\n        }\n        _this2.hls.pauseBuffering();\n      };\n      _this2._onStartStreaming = function (event) {\n        if (!_this2.hls) {\n          return;\n        }\n        _this2.hls.resumeBuffering();\n      };\n      // Keep as arrow functions so that we can directly reference these functions directly as event listeners\n      _this2._onMediaSourceOpen = function (e) {\n        var _this3 = _this2,\n          media = _this3.media,\n          mediaSource = _this3.mediaSource;\n        if (e) {\n          _this2.log('Media source opened');\n        }\n        if (!media || !mediaSource) {\n          return;\n        }\n        // once received, don't listen anymore to sourceopen event\n        mediaSource.removeEventListener('sourceopen', _this2._onMediaSourceOpen);\n        media.removeEventListener('emptied', _this2._onMediaEmptied);\n        _this2.updateDuration();\n        _this2.hls.trigger(Events.MEDIA_ATTACHED, {\n          media: media,\n          mediaSource: mediaSource\n        });\n        if (_this2.mediaSource !== null) {\n          _this2.checkPendingTracks();\n        }\n      };\n      _this2._onMediaSourceClose = function () {\n        _this2.log('Media source closed');\n      };\n      _this2._onMediaSourceEnded = function () {\n        _this2.log('Media source ended');\n      };\n      _this2._onMediaEmptied = function () {\n        var _this4 = _this2,\n          mediaSrc = _this4.mediaSrc,\n          _objectUrl = _this4._objectUrl;\n        if (mediaSrc !== _objectUrl) {\n          _this2.error(\"Media element src was set while attaching MediaSource (\" + _objectUrl + \" > \" + mediaSrc + \")\");\n        }\n      };\n      _this2.hls = hls;\n      _this2.fragmentTracker = fragmentTracker;\n      _this2.appendSource = isManagedMediaSource(getMediaSource(hls.config.preferManagedMediaSource));\n      _this2.initTracks();\n      _this2.registerListeners();\n      return _this2;\n    }\n    _inheritsLoose(BufferController, _Logger);\n    var _proto = BufferController.prototype;\n    _proto.hasSourceTypes = function hasSourceTypes() {\n      return Object.keys(this.tracks).length > 0;\n    };\n    _proto.destroy = function destroy() {\n      this.unregisterListeners();\n      this.details = null;\n      this.lastMpegAudioChunk = this.blockedAudioAppend = null;\n      this.transferData = this.overrides = undefined;\n      if (this.operationQueue) {\n        this.operationQueue.destroy();\n        this.operationQueue = null;\n      }\n      // @ts-ignore\n      this.hls = this.fragmentTracker = null;\n      // @ts-ignore\n      this._onMediaSourceOpen = this._onMediaSourceClose = null;\n      // @ts-ignore\n      this._onMediaSourceEnded = null;\n      // @ts-ignore\n      this._onStartStreaming = this._onEndStreaming = null;\n    };\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.on(Events.BUFFER_RESET, this.onBufferReset, this);\n      hls.on(Events.BUFFER_APPENDING, this.onBufferAppending, this);\n      hls.on(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n      hls.on(Events.BUFFER_EOS, this.onBufferEos, this);\n      hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n      hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.on(Events.FRAG_PARSED, this.onFragParsed, this);\n      hls.on(Events.FRAG_CHANGED, this.onFragChanged, this);\n      hls.on(Events.ERROR, this.onError, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.off(Events.BUFFER_RESET, this.onBufferReset, this);\n      hls.off(Events.BUFFER_APPENDING, this.onBufferAppending, this);\n      hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n      hls.off(Events.BUFFER_EOS, this.onBufferEos, this);\n      hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n      hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.off(Events.FRAG_PARSED, this.onFragParsed, this);\n      hls.off(Events.FRAG_CHANGED, this.onFragChanged, this);\n      hls.off(Events.ERROR, this.onError, this);\n    };\n    _proto.transferMedia = function transferMedia() {\n      var _this5 = this;\n      var media = this.media,\n        mediaSource = this.mediaSource;\n      if (!media) {\n        return null;\n      }\n      var tracks = {};\n      if (this.operationQueue) {\n        var updating = this.isUpdating();\n        if (!updating) {\n          this.operationQueue.removeBlockers();\n        }\n        var queued = this.isQueued();\n        if (updating || queued) {\n          this.warn(\"Transfering MediaSource with\" + (queued ? ' operations in queue' : '') + (updating ? ' updating SourceBuffer(s)' : '') + \" \" + this.operationQueue);\n        }\n        this.operationQueue.destroy();\n      }\n      var transferData = this.transferData;\n      if (!this.sourceBufferCount && transferData && transferData.mediaSource === mediaSource) {\n        _extends(tracks, transferData.tracks);\n      } else {\n        this.sourceBuffers.forEach(function (tuple) {\n          var type = tuple[0];\n          if (type) {\n            tracks[type] = _extends({}, _this5.tracks[type]);\n            _this5.removeBuffer(type);\n          }\n          tuple[0] = tuple[1] = null;\n        });\n      }\n      return {\n        media: media,\n        mediaSource: mediaSource,\n        tracks: tracks\n      };\n    };\n    _proto.initTracks = function initTracks() {\n      var tracks = {};\n      this.sourceBuffers = [[null, null], [null, null]];\n      this.tracks = tracks;\n      this.resetQueue();\n      this.resetAppendErrors();\n      this.lastMpegAudioChunk = this.blockedAudioAppend = null;\n      this.lastVideoAppendEnd = 0;\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      this.bufferCodecEventsTotal = 0;\n      this.details = null;\n    };\n    _proto.onManifestParsed = function onManifestParsed(event, data) {\n      var _this$transferData;\n      // in case of alt audio 2 BUFFER_CODECS events will be triggered, one per stream controller\n      // sourcebuffers will be created all at once when the expected nb of tracks will be reached\n      // in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller\n      // it will contain the expected nb of source buffers, no need to compute it\n      var codecEvents = 2;\n      if (data.audio && !data.video || !data.altAudio) {\n        codecEvents = 1;\n      }\n      this.bufferCodecEventsTotal = codecEvents;\n      this.log(codecEvents + \" bufferCodec event(s) expected.\");\n      if ((_this$transferData = this.transferData) != null && _this$transferData.mediaSource && this.sourceBufferCount && codecEvents) {\n        this.bufferCreated();\n      }\n    };\n    _proto.onMediaAttaching = function onMediaAttaching(event, data) {\n      var media = this.media = data.media;\n      var MediaSource = getMediaSource(this.appendSource);\n      this.transferData = this.overrides = undefined;\n      if (media && MediaSource) {\n        var transferringMedia = !!data.mediaSource;\n        if (transferringMedia || data.overrides) {\n          this.transferData = data;\n          this.overrides = data.overrides;\n        }\n        var ms = this.mediaSource = data.mediaSource || new MediaSource();\n        this.assignMediaSource(ms);\n        if (transferringMedia) {\n          this._objectUrl = media.src;\n          this.attachTransferred();\n        } else {\n          // cache the locally generated object url\n          var objectUrl = this._objectUrl = self.URL.createObjectURL(ms);\n          // link video and media Source\n          if (this.appendSource) {\n            try {\n              media.removeAttribute('src');\n              // ManagedMediaSource will not open without disableRemotePlayback set to false or source alternatives\n              var MMS = self.ManagedMediaSource;\n              media.disableRemotePlayback = media.disableRemotePlayback || MMS && ms instanceof MMS;\n              removeSourceChildren(media);\n              addSource(media, objectUrl);\n              media.load();\n            } catch (error) {\n              media.src = objectUrl;\n            }\n          } else {\n            media.src = objectUrl;\n          }\n        }\n        media.addEventListener('emptied', this._onMediaEmptied);\n      }\n    };\n    _proto.assignMediaSource = function assignMediaSource(ms) {\n      var _this$transferData2, _ms$constructor;\n      this.log((((_this$transferData2 = this.transferData) == null ? void 0 : _this$transferData2.mediaSource) === ms ? 'transferred' : 'created') + \" media source: \" + ((_ms$constructor = ms.constructor) == null ? void 0 : _ms$constructor.name));\n      // MediaSource listeners are arrow functions with a lexical scope, and do not need to be bound\n      ms.addEventListener('sourceopen', this._onMediaSourceOpen);\n      ms.addEventListener('sourceended', this._onMediaSourceEnded);\n      ms.addEventListener('sourceclose', this._onMediaSourceClose);\n      if (this.appendSource) {\n        ms.addEventListener('startstreaming', this._onStartStreaming);\n        ms.addEventListener('endstreaming', this._onEndStreaming);\n      }\n    };\n    _proto.attachTransferred = function attachTransferred() {\n      var _this6 = this;\n      var media = this.media;\n      var data = this.transferData;\n      if (!data || !media) {\n        return;\n      }\n      var requiredTracks = this.tracks;\n      var transferredTracks = data.tracks;\n      var trackNames = transferredTracks ? Object.keys(transferredTracks) : null;\n      var trackCount = trackNames ? trackNames.length : 0;\n      var mediaSourceOpenCallback = function mediaSourceOpenCallback() {\n        if (_this6.media && _this6.mediaSourceOpenOrEnded) {\n          _this6._onMediaSourceOpen();\n        }\n      };\n      if (transferredTracks && trackNames && trackCount) {\n        if (!this.tracksReady) {\n          // Wait for CODECS event(s)\n          this.hls.config.startFragPrefetch = true;\n          this.log(\"attachTransferred: waiting for SourceBuffer track info\");\n          return;\n        }\n        this.log(\"attachTransferred: (bufferCodecEventsTotal \" + this.bufferCodecEventsTotal + \")\\nrequired tracks: \" + stringify(requiredTracks, function (key, value) {\n          return key === 'initSegment' ? undefined : value;\n        }) + \";\\ntransfer tracks: \" + stringify(transferredTracks, function (key, value) {\n          return key === 'initSegment' ? undefined : value;\n        }) + \"}\");\n        if (!isCompatibleTrackChange(transferredTracks, requiredTracks)) {\n          // destroy attaching media source\n          data.mediaSource = null;\n          data.tracks = undefined;\n          var currentTime = media.currentTime;\n          var details = this.details;\n          var startTime = Math.max(currentTime, (details == null ? void 0 : details.fragments[0].start) || 0);\n          if (startTime - currentTime > 1) {\n            this.log(\"attachTransferred: waiting for playback to reach new tracks start time \" + currentTime + \" -> \" + startTime);\n            return;\n          }\n          this.warn(\"attachTransferred: resetting MediaSource for incompatible tracks (\\\"\" + Object.keys(transferredTracks) + \"\\\"->\\\"\" + Object.keys(requiredTracks) + \"\\\") start time: \" + startTime + \" currentTime: \" + currentTime);\n          this.onMediaDetaching(Events.MEDIA_DETACHING, {});\n          this.onMediaAttaching(Events.MEDIA_ATTACHING, data);\n          media.currentTime = startTime;\n          return;\n        }\n        this.transferData = undefined;\n        trackNames.forEach(function (trackName) {\n          var type = trackName;\n          var track = transferredTracks[type];\n          if (track) {\n            var sb = track.buffer;\n            if (sb) {\n              // Purge fragment tracker of ejected segments for existing buffer\n              var fragmentTracker = _this6.fragmentTracker;\n              var playlistType = track.id;\n              if (fragmentTracker.hasFragments(playlistType) || fragmentTracker.hasParts(playlistType)) {\n                var bufferedTimeRanges = BufferHelper.getBuffered(sb);\n                fragmentTracker.detectEvictedFragments(type, bufferedTimeRanges, playlistType, null, true);\n              }\n              // Transfer SourceBuffer\n              var sbIndex = sourceBufferNameToIndex(type);\n              var sbTuple = [type, sb];\n              _this6.sourceBuffers[sbIndex] = sbTuple;\n              if (sb.updating && _this6.operationQueue) {\n                _this6.operationQueue.prependBlocker(type);\n              }\n              _this6.trackSourceBuffer(type, track);\n            }\n          }\n        });\n        mediaSourceOpenCallback();\n        this.bufferCreated();\n      } else {\n        this.log(\"attachTransferred: MediaSource w/o SourceBuffers\");\n        mediaSourceOpenCallback();\n      }\n    };\n    _proto.onMediaDetaching = function onMediaDetaching(event, data) {\n      var _this7 = this;\n      var transferringMedia = !!data.transferMedia;\n      this.transferData = this.overrides = undefined;\n      var media = this.media,\n        mediaSource = this.mediaSource,\n        _objectUrl = this._objectUrl;\n      if (mediaSource) {\n        this.log(\"media source \" + (transferringMedia ? 'transferring' : 'detaching'));\n        if (transferringMedia) {\n          // Detach SourceBuffers without removing from MediaSource\n          // and leave `tracks` (required SourceBuffers configuration)\n          this.sourceBuffers.forEach(function (_ref) {\n            var type = _ref[0];\n            if (type) {\n              _this7.removeBuffer(type);\n            }\n          });\n          this.resetQueue();\n        } else {\n          if (this.mediaSourceOpenOrEnded) {\n            var open = mediaSource.readyState === 'open';\n            try {\n              var sourceBuffers = mediaSource.sourceBuffers;\n              for (var i = sourceBuffers.length; i--;) {\n                if (open) {\n                  sourceBuffers[i].abort();\n                }\n                mediaSource.removeSourceBuffer(sourceBuffers[i]);\n              }\n              if (open) {\n                // endOfStream could trigger exception if any sourcebuffer is in updating state\n                // we don't really care about checking sourcebuffer state here,\n                // as we are anyway detaching the MediaSource\n                // let's just avoid this exception to propagate\n                mediaSource.endOfStream();\n              }\n            } catch (err) {\n              this.warn(\"onMediaDetaching: \" + err.message + \" while calling endOfStream\");\n            }\n          }\n          // Clean up the SourceBuffers by invoking onBufferReset\n          if (this.sourceBufferCount) {\n            this.onBufferReset();\n          }\n        }\n        mediaSource.removeEventListener('sourceopen', this._onMediaSourceOpen);\n        mediaSource.removeEventListener('sourceended', this._onMediaSourceEnded);\n        mediaSource.removeEventListener('sourceclose', this._onMediaSourceClose);\n        if (this.appendSource) {\n          mediaSource.removeEventListener('startstreaming', this._onStartStreaming);\n          mediaSource.removeEventListener('endstreaming', this._onEndStreaming);\n        }\n        this.mediaSource = null;\n        this._objectUrl = null;\n      }\n\n      // Detach properly the MediaSource from the HTMLMediaElement as\n      // suggested in https://github.com/w3c/media-source/issues/53.\n      if (media) {\n        media.removeEventListener('emptied', this._onMediaEmptied);\n        if (!transferringMedia) {\n          if (_objectUrl) {\n            self.URL.revokeObjectURL(_objectUrl);\n          }\n\n          // clean up video tag src only if it's our own url. some external libraries might\n          // hijack the video tag and change its 'src' without destroying the Hls instance first\n          if (this.mediaSrc === _objectUrl) {\n            media.removeAttribute('src');\n            if (this.appendSource) {\n              removeSourceChildren(media);\n            }\n            media.load();\n          } else {\n            this.warn('media|source.src was changed by a third party - skip cleanup');\n          }\n        }\n        this.media = null;\n      }\n      this.hls.trigger(Events.MEDIA_DETACHED, data);\n    };\n    _proto.onBufferReset = function onBufferReset() {\n      var _this8 = this;\n      this.sourceBuffers.forEach(function (_ref2) {\n        var type = _ref2[0];\n        if (type) {\n          _this8.resetBuffer(type);\n        }\n      });\n      this.initTracks();\n    };\n    _proto.resetBuffer = function resetBuffer(type) {\n      var _this$tracks$type;\n      var sb = (_this$tracks$type = this.tracks[type]) == null ? void 0 : _this$tracks$type.buffer;\n      this.removeBuffer(type);\n      if (sb) {\n        try {\n          var _this$mediaSource;\n          if ((_this$mediaSource = this.mediaSource) != null && _this$mediaSource.sourceBuffers.length) {\n            this.mediaSource.removeSourceBuffer(sb);\n          }\n        } catch (err) {\n          this.warn(\"onBufferReset \" + type, err);\n        }\n      }\n      delete this.tracks[type];\n    };\n    _proto.removeBuffer = function removeBuffer(type) {\n      this.removeBufferListeners(type);\n      this.sourceBuffers[sourceBufferNameToIndex(type)] = [null, null];\n      var track = this.tracks[type];\n      if (track) {\n        track.buffer = undefined;\n      }\n    };\n    _proto.resetQueue = function resetQueue() {\n      if (this.operationQueue) {\n        this.operationQueue.destroy();\n      }\n      this.operationQueue = new BufferOperationQueue(this.tracks);\n    };\n    _proto.onBufferCodecs = function onBufferCodecs(event, data) {\n      var _this9 = this;\n      var tracks = this.tracks;\n      var trackNames = Object.keys(data);\n      this.log(\"BUFFER_CODECS: \\\"\" + trackNames + \"\\\" (current SB count \" + this.sourceBufferCount + \")\");\n      var unmuxedToMuxed = 'audiovideo' in data && (tracks.audio || tracks.video) || tracks.audiovideo && ('audio' in data || 'video' in data);\n      var muxedToUnmuxed = !unmuxedToMuxed && this.sourceBufferCount && this.media && trackNames.some(function (sbName) {\n        return !tracks[sbName];\n      });\n      if (unmuxedToMuxed || muxedToUnmuxed) {\n        this.warn(\"Unsupported transition between \\\"\" + Object.keys(tracks) + \"\\\" and \\\"\" + trackNames + \"\\\" SourceBuffers\");\n        // Do not add incompatible track ('audiovideo' <-> 'video'/'audio').\n        // Allow following onBufferAppending handle to trigger BUFFER_APPEND_ERROR.\n        // This will either be resolved by level switch or could be handled with recoverMediaError().\n        return;\n      }\n      trackNames.forEach(function (trackName) {\n        var _this9$transferData, _this9$transferData$t, _trackCodec;\n        var parsedTrack = data[trackName];\n        var id = parsedTrack.id,\n          codec = parsedTrack.codec,\n          levelCodec = parsedTrack.levelCodec,\n          container = parsedTrack.container,\n          metadata = parsedTrack.metadata,\n          supplemental = parsedTrack.supplemental;\n        var track = tracks[trackName];\n        var transferredTrack = (_this9$transferData = _this9.transferData) == null ? void 0 : (_this9$transferData$t = _this9$transferData.tracks) == null ? void 0 : _this9$transferData$t[trackName];\n        var sbTrack = transferredTrack != null && transferredTrack.buffer ? transferredTrack : track;\n        var sbCodec = (sbTrack == null ? void 0 : sbTrack.pendingCodec) || (sbTrack == null ? void 0 : sbTrack.codec);\n        var trackLevelCodec = sbTrack == null ? void 0 : sbTrack.levelCodec;\n        if (!track) {\n          track = tracks[trackName] = {\n            buffer: undefined,\n            listeners: [],\n            codec: codec,\n            supplemental: supplemental,\n            container: container,\n            levelCodec: levelCodec,\n            metadata: metadata,\n            id: id\n          };\n        }\n        // check if SourceBuffer codec needs to change\n        var currentCodecFull = pickMostCompleteCodecName(sbCodec, trackLevelCodec);\n        var currentCodec = currentCodecFull == null ? void 0 : currentCodecFull.replace(VIDEO_CODEC_PROFILE_REPLACE, '$1');\n        var trackCodec = pickMostCompleteCodecName(codec, levelCodec);\n        var nextCodec = (_trackCodec = trackCodec) == null ? void 0 : _trackCodec.replace(VIDEO_CODEC_PROFILE_REPLACE, '$1');\n        if (trackCodec && currentCodecFull && currentCodec !== nextCodec) {\n          if (trackName.slice(0, 5) === 'audio') {\n            trackCodec = getCodecCompatibleName(trackCodec, _this9.appendSource);\n          }\n          _this9.log(\"switching codec \" + sbCodec + \" to \" + trackCodec);\n          if (trackCodec !== (track.pendingCodec || track.codec)) {\n            track.pendingCodec = trackCodec;\n          }\n          track.container = container;\n          _this9.appendChangeType(trackName, container, trackCodec);\n        }\n      });\n      if (this.tracksReady || this.sourceBufferCount) {\n        data.tracks = this.sourceBufferTracks;\n      }\n\n      // if sourcebuffers already created, do nothing ...\n      if (this.sourceBufferCount) {\n        return;\n      }\n      if (this.mediaSourceOpenOrEnded) {\n        this.checkPendingTracks();\n      }\n    };\n    _proto.appendChangeType = function appendChangeType(type, container, codec) {\n      var _this0 = this;\n      var mimeType = container + \";codecs=\" + codec;\n      var operation = {\n        label: \"change-type=\" + mimeType,\n        execute: function execute() {\n          var track = _this0.tracks[type];\n          if (track) {\n            var sb = track.buffer;\n            if (sb != null && sb.changeType) {\n              _this0.log(\"changing \" + type + \" sourceBuffer type to \" + mimeType);\n              sb.changeType(mimeType);\n              track.codec = codec;\n              track.container = container;\n            }\n          }\n          _this0.shiftAndExecuteNext(type);\n        },\n        onStart: function onStart() {},\n        onComplete: function onComplete() {},\n        onError: function onError(error) {\n          _this0.warn(\"Failed to change \" + type + \" SourceBuffer type\", error);\n        }\n      };\n      this.append(operation, type, this.isPending(this.tracks[type]));\n    };\n    _proto.blockAudio = function blockAudio(partOrFrag) {\n      var _this$fragmentTracker,\n        _this1 = this;\n      var pStart = partOrFrag.start;\n      var pTime = pStart + partOrFrag.duration * 0.05;\n      var atGap = ((_this$fragmentTracker = this.fragmentTracker.getAppendedFrag(pStart, PlaylistLevelType.MAIN)) == null ? void 0 : _this$fragmentTracker.gap) === true;\n      if (atGap) {\n        return;\n      }\n      var op = {\n        label: 'block-audio',\n        execute: function execute() {\n          var _this1$fragmentTracke;\n          var videoTrack = _this1.tracks.video;\n          if (_this1.lastVideoAppendEnd > pTime || videoTrack != null && videoTrack.buffer && BufferHelper.isBuffered(videoTrack.buffer, pTime) || ((_this1$fragmentTracke = _this1.fragmentTracker.getAppendedFrag(pTime, PlaylistLevelType.MAIN)) == null ? void 0 : _this1$fragmentTracke.gap) === true) {\n            _this1.blockedAudioAppend = null;\n            _this1.shiftAndExecuteNext('audio');\n          }\n        },\n        onStart: function onStart() {},\n        onComplete: function onComplete() {},\n        onError: function onError(error) {\n          _this1.warn('Error executing block-audio operation', error);\n        }\n      };\n      this.blockedAudioAppend = {\n        op: op,\n        frag: partOrFrag\n      };\n      this.append(op, 'audio', true);\n    };\n    _proto.unblockAudio = function unblockAudio() {\n      var blockedAudioAppend = this.blockedAudioAppend,\n        operationQueue = this.operationQueue;\n      if (blockedAudioAppend && operationQueue) {\n        this.blockedAudioAppend = null;\n        operationQueue.unblockAudio(blockedAudioAppend.op);\n      }\n    };\n    _proto.onBufferAppending = function onBufferAppending(event, eventData) {\n      var _this10 = this;\n      var tracks = this.tracks;\n      var data = eventData.data,\n        type = eventData.type,\n        parent = eventData.parent,\n        frag = eventData.frag,\n        part = eventData.part,\n        chunkMeta = eventData.chunkMeta;\n      var chunkStats = chunkMeta.buffering[type];\n      var sn = frag.sn;\n      var bufferAppendingStart = self.performance.now();\n      chunkStats.start = bufferAppendingStart;\n      var fragBuffering = frag.stats.buffering;\n      var partBuffering = part ? part.stats.buffering : null;\n      if (fragBuffering.start === 0) {\n        fragBuffering.start = bufferAppendingStart;\n      }\n      if (partBuffering && partBuffering.start === 0) {\n        partBuffering.start = bufferAppendingStart;\n      }\n\n      // TODO: Only update timestampOffset when audio/mpeg fragment or part is not contiguous with previously appended\n      // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)\n      // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`\n      // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos).\n      // More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486\n      var audioTrack = tracks.audio;\n      var checkTimestampOffset = false;\n      if (type === 'audio' && (audioTrack == null ? void 0 : audioTrack.container) === 'audio/mpeg') {\n        checkTimestampOffset = !this.lastMpegAudioChunk || chunkMeta.id === 1 || this.lastMpegAudioChunk.sn !== chunkMeta.sn;\n        this.lastMpegAudioChunk = chunkMeta;\n      }\n\n      // Block audio append until overlapping video append\n      var videoTrack = this.tracks.video;\n      var videoSb = videoTrack == null ? void 0 : videoTrack.buffer;\n      if (videoSb && sn !== 'initSegment') {\n        var partOrFrag = part || frag;\n        var blockedAudioAppend = this.blockedAudioAppend;\n        if (type === 'audio' && parent !== 'main' && !this.blockedAudioAppend) {\n          var pStart = partOrFrag.start;\n          var pTime = pStart + partOrFrag.duration * 0.05;\n          var vbuffered = videoSb.buffered;\n          var vappending = this.currentOp('video');\n          if (!vbuffered.length && !vappending) {\n            // wait for video before appending audio\n            this.blockAudio(partOrFrag);\n          } else if (!vappending && !BufferHelper.isBuffered(videoSb, pTime) && this.lastVideoAppendEnd < pTime) {\n            // audio is ahead of video\n            this.blockAudio(partOrFrag);\n          }\n        } else if (type === 'video') {\n          var videoAppendEnd = partOrFrag.end;\n          if (blockedAudioAppend) {\n            var audioStart = blockedAudioAppend.frag.start;\n            if (videoAppendEnd > audioStart || videoAppendEnd < this.lastVideoAppendEnd || BufferHelper.isBuffered(videoSb, audioStart)) {\n              this.unblockAudio();\n            }\n          }\n          this.lastVideoAppendEnd = videoAppendEnd;\n        }\n      }\n      var fragStart = (part || frag).start;\n      var operation = {\n        label: \"append-\" + type,\n        execute: function execute() {\n          chunkStats.executeStart = self.performance.now();\n          if (checkTimestampOffset) {\n            var track = _this10.tracks[type];\n            if (track) {\n              var sb = track.buffer;\n              if (sb) {\n                var delta = fragStart - sb.timestampOffset;\n                if (Math.abs(delta) >= 0.1) {\n                  _this10.log(\"Updating audio SourceBuffer timestampOffset to \" + fragStart + \" (delta: \" + delta + \") sn: \" + sn + \")\");\n                  sb.timestampOffset = fragStart;\n                }\n              }\n            }\n          }\n          _this10.appendExecutor(data, type);\n        },\n        onStart: function onStart() {\n          // logger.debug(`[buffer-controller]: ${type} SourceBuffer updatestart`);\n        },\n        onComplete: function onComplete() {\n          // logger.debug(`[buffer-controller]: ${type} SourceBuffer updateend`);\n          var end = self.performance.now();\n          chunkStats.executeEnd = chunkStats.end = end;\n          if (fragBuffering.first === 0) {\n            fragBuffering.first = end;\n          }\n          if (partBuffering && partBuffering.first === 0) {\n            partBuffering.first = end;\n          }\n          var timeRanges = {};\n          _this10.sourceBuffers.forEach(function (_ref3) {\n            var type = _ref3[0],\n              sb = _ref3[1];\n            if (type) {\n              timeRanges[type] = BufferHelper.getBuffered(sb);\n            }\n          });\n          _this10.appendErrors[type] = 0;\n          if (type === 'audio' || type === 'video') {\n            _this10.appendErrors.audiovideo = 0;\n          } else {\n            _this10.appendErrors.audio = 0;\n            _this10.appendErrors.video = 0;\n          }\n          _this10.hls.trigger(Events.BUFFER_APPENDED, {\n            type: type,\n            frag: frag,\n            part: part,\n            chunkMeta: chunkMeta,\n            parent: frag.type,\n            timeRanges: timeRanges\n          });\n        },\n        onError: function onError(error) {\n          var _this10$media;\n          // in case any error occured while appending, put back segment in segments table\n          var event = {\n            type: ErrorTypes.MEDIA_ERROR,\n            parent: frag.type,\n            details: ErrorDetails.BUFFER_APPEND_ERROR,\n            sourceBufferName: type,\n            frag: frag,\n            part: part,\n            chunkMeta: chunkMeta,\n            error: error,\n            err: error,\n            fatal: false\n          };\n          var mediaError = (_this10$media = _this10.media) == null ? void 0 : _this10$media.error;\n          if (error.code === DOMException.QUOTA_EXCEEDED_ERR) {\n            // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror\n            // let's stop appending any segments, and report BUFFER_FULL_ERROR error\n            event.details = ErrorDetails.BUFFER_FULL_ERROR;\n          } else if (error.code === DOMException.INVALID_STATE_ERR && _this10.mediaSourceOpenOrEnded && !mediaError) {\n            // Allow retry for \"Failed to execute 'appendBuffer' on 'SourceBuffer': This SourceBuffer is still processing\" errors\n            event.errorAction = createDoNothingErrorAction(true);\n          } else if (error.name === TRACK_REMOVED_ERROR_NAME && _this10.sourceBufferCount === 0) {\n            // Do nothing if sourceBuffers were removed (media is detached and append was not aborted)\n            event.errorAction = createDoNothingErrorAction(true);\n          } else {\n            var appendErrorCount = ++_this10.appendErrors[type];\n            /* with UHD content, we could get loop of quota exceeded error until\n              browser is able to evict some data from sourcebuffer. Retrying can help recover.\n            */\n            _this10.warn(\"Failed \" + appendErrorCount + \"/\" + _this10.hls.config.appendErrorMaxRetry + \" times to append segment in \\\"\" + type + \"\\\" sourceBuffer (\" + (mediaError ? mediaError : 'no media error') + \")\");\n            if (appendErrorCount >= _this10.hls.config.appendErrorMaxRetry || !!mediaError) {\n              event.fatal = true;\n            }\n          }\n          _this10.hls.trigger(Events.ERROR, event);\n        }\n      };\n      this.append(operation, type, this.isPending(this.tracks[type]));\n    };\n    _proto.getFlushOp = function getFlushOp(type, start, end) {\n      var _this11 = this;\n      this.log(\"queuing \\\"\" + type + \"\\\" remove \" + start + \"-\" + end);\n      return {\n        label: 'remove',\n        execute: function execute() {\n          _this11.removeExecutor(type, start, end);\n        },\n        onStart: function onStart() {\n          // logger.debug(`[buffer-controller]: Started flushing ${data.startOffset} -> ${data.endOffset} for ${type} Source Buffer`);\n        },\n        onComplete: function onComplete() {\n          // logger.debug(`[buffer-controller]: Finished flushing ${data.startOffset} -> ${data.endOffset} for ${type} Source Buffer`);\n          _this11.hls.trigger(Events.BUFFER_FLUSHED, {\n            type: type\n          });\n        },\n        onError: function onError(error) {\n          _this11.warn(\"Failed to remove \" + start + \"-\" + end + \" from \\\"\" + type + \"\\\" SourceBuffer\", error);\n        }\n      };\n    };\n    _proto.onBufferFlushing = function onBufferFlushing(event, data) {\n      var _this12 = this;\n      var type = data.type,\n        startOffset = data.startOffset,\n        endOffset = data.endOffset;\n      if (type) {\n        this.append(this.getFlushOp(type, startOffset, endOffset), type);\n      } else {\n        this.sourceBuffers.forEach(function (_ref4) {\n          var type = _ref4[0];\n          if (type) {\n            _this12.append(_this12.getFlushOp(type, startOffset, endOffset), type);\n          }\n        });\n      }\n    };\n    _proto.onFragParsed = function onFragParsed(event, data) {\n      var _this13 = this;\n      var frag = data.frag,\n        part = data.part;\n      var buffersAppendedTo = [];\n      var elementaryStreams = part ? part.elementaryStreams : frag.elementaryStreams;\n      if (elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO]) {\n        buffersAppendedTo.push('audiovideo');\n      } else {\n        if (elementaryStreams[ElementaryStreamTypes.AUDIO]) {\n          buffersAppendedTo.push('audio');\n        }\n        if (elementaryStreams[ElementaryStreamTypes.VIDEO]) {\n          buffersAppendedTo.push('video');\n        }\n      }\n      var onUnblocked = function onUnblocked() {\n        var now = self.performance.now();\n        frag.stats.buffering.end = now;\n        if (part) {\n          part.stats.buffering.end = now;\n        }\n        var stats = part ? part.stats : frag.stats;\n        _this13.hls.trigger(Events.FRAG_BUFFERED, {\n          frag: frag,\n          part: part,\n          stats: stats,\n          id: frag.type\n        });\n      };\n      if (buffersAppendedTo.length === 0) {\n        this.warn(\"Fragments must have at least one ElementaryStreamType set. type: \" + frag.type + \" level: \" + frag.level + \" sn: \" + frag.sn);\n      }\n      this.blockBuffers(onUnblocked, buffersAppendedTo).catch(function (error) {\n        _this13.warn(\"Fragment buffered callback \" + error);\n        _this13.stepOperationQueue(_this13.sourceBufferTypes);\n      });\n    };\n    _proto.onFragChanged = function onFragChanged(event, data) {\n      this.trimBuffers();\n    };\n    // on BUFFER_EOS mark matching sourcebuffer(s) as \"ending\" and \"ended\" and queue endOfStream after remaining operations(s)\n    // an undefined data.type will mark all buffers as EOS.\n    _proto.onBufferEos = function onBufferEos(event, data) {\n      var _this14 = this,\n        _this$overrides;\n      this.sourceBuffers.forEach(function (_ref5) {\n        var type = _ref5[0];\n        if (type) {\n          var track = _this14.tracks[type];\n          if (!data.type || data.type === type) {\n            track.ending = true;\n            if (!track.ended) {\n              track.ended = true;\n              _this14.log(type + \" buffer reached EOS\");\n            }\n          }\n        }\n      });\n      var allowEndOfStream = ((_this$overrides = this.overrides) == null ? void 0 : _this$overrides.endOfStream) !== false;\n      var allTracksEnding = this.sourceBufferCount > 0 && !this.sourceBuffers.some(function (_ref6) {\n        var _this14$tracks$type;\n        var type = _ref6[0];\n        return type && !((_this14$tracks$type = _this14.tracks[type]) != null && _this14$tracks$type.ended);\n      });\n      if (allTracksEnding) {\n        if (allowEndOfStream) {\n          this.log(\"Queueing EOS\");\n          this.blockUntilOpen(function () {\n            _this14.tracksEnded();\n            var mediaSource = _this14.mediaSource;\n            if (!mediaSource || mediaSource.readyState !== 'open') {\n              if (mediaSource) {\n                _this14.log(\"Could not call mediaSource.endOfStream(). mediaSource.readyState: \" + mediaSource.readyState);\n              }\n              return;\n            }\n            _this14.log(\"Calling mediaSource.endOfStream()\");\n            // Allow this to throw and be caught by the enqueueing function\n            mediaSource.endOfStream();\n            _this14.hls.trigger(Events.BUFFERED_TO_END, undefined);\n          });\n        } else {\n          this.tracksEnded();\n          this.hls.trigger(Events.BUFFERED_TO_END, undefined);\n        }\n      }\n    };\n    _proto.tracksEnded = function tracksEnded() {\n      var _this15 = this;\n      this.sourceBuffers.forEach(function (_ref7) {\n        var type = _ref7[0];\n        if (type !== null) {\n          var track = _this15.tracks[type];\n          if (track) {\n            track.ending = false;\n          }\n        }\n      });\n    };\n    _proto.onLevelUpdated = function onLevelUpdated(event, _ref8) {\n      var details = _ref8.details;\n      if (!details.fragments.length) {\n        return;\n      }\n      this.details = details;\n      this.updateDuration();\n    };\n    _proto.updateDuration = function updateDuration() {\n      var _this16 = this;\n      var durationAndRange = this.getDurationAndRange();\n      if (!durationAndRange) {\n        return;\n      }\n      this.blockUntilOpen(function () {\n        return _this16.updateMediaSource(durationAndRange);\n      });\n    };\n    _proto.onError = function onError(event, data) {\n      if (data.details === ErrorDetails.BUFFER_APPEND_ERROR && data.frag) {\n        var _data$errorAction;\n        var nextAutoLevel = (_data$errorAction = data.errorAction) == null ? void 0 : _data$errorAction.nextAutoLevel;\n        if (isFiniteNumber(nextAutoLevel) && nextAutoLevel !== data.frag.level) {\n          this.resetAppendErrors();\n        }\n      }\n    };\n    _proto.resetAppendErrors = function resetAppendErrors() {\n      this.appendErrors = {\n        audio: 0,\n        video: 0,\n        audiovideo: 0\n      };\n    };\n    _proto.trimBuffers = function trimBuffers() {\n      var hls = this.hls,\n        details = this.details,\n        media = this.media;\n      if (!media || details === null) {\n        return;\n      }\n      if (!this.sourceBufferCount) {\n        return;\n      }\n      var config = hls.config;\n      var currentTime = media.currentTime;\n      var targetDuration = details.levelTargetDuration;\n\n      // Support for deprecated liveBackBufferLength\n      var backBufferLength = details.live && config.liveBackBufferLength !== null ? config.liveBackBufferLength : config.backBufferLength;\n      if (isFiniteNumber(backBufferLength) && backBufferLength >= 0) {\n        var maxBackBufferLength = Math.max(backBufferLength, targetDuration);\n        var targetBackBufferPosition = Math.floor(currentTime / targetDuration) * targetDuration - maxBackBufferLength;\n        this.flushBackBuffer(currentTime, targetDuration, targetBackBufferPosition);\n      }\n      if (isFiniteNumber(config.frontBufferFlushThreshold) && config.frontBufferFlushThreshold > 0) {\n        var frontBufferLength = Math.max(config.maxBufferLength, config.frontBufferFlushThreshold);\n        var maxFrontBufferLength = Math.max(frontBufferLength, targetDuration);\n        var targetFrontBufferPosition = Math.floor(currentTime / targetDuration) * targetDuration + maxFrontBufferLength;\n        this.flushFrontBuffer(currentTime, targetDuration, targetFrontBufferPosition);\n      }\n    };\n    _proto.flushBackBuffer = function flushBackBuffer(currentTime, targetDuration, targetBackBufferPosition) {\n      var _this17 = this;\n      this.sourceBuffers.forEach(function (_ref9) {\n        var type = _ref9[0],\n          sb = _ref9[1];\n        if (sb) {\n          var buffered = BufferHelper.getBuffered(sb);\n          // when target buffer start exceeds actual buffer start\n          if (buffered.length > 0 && targetBackBufferPosition > buffered.start(0)) {\n            var _this17$details;\n            _this17.hls.trigger(Events.BACK_BUFFER_REACHED, {\n              bufferEnd: targetBackBufferPosition\n            });\n\n            // Support for deprecated event:\n            var track = _this17.tracks[type];\n            if ((_this17$details = _this17.details) != null && _this17$details.live) {\n              _this17.hls.trigger(Events.LIVE_BACK_BUFFER_REACHED, {\n                bufferEnd: targetBackBufferPosition\n              });\n            } else if (track != null && track.ended) {\n              _this17.log(\"Cannot flush \" + type + \" back buffer while SourceBuffer is in ended state\");\n              return;\n            }\n            _this17.hls.trigger(Events.BUFFER_FLUSHING, {\n              startOffset: 0,\n              endOffset: targetBackBufferPosition,\n              type: type\n            });\n          }\n        }\n      });\n    };\n    _proto.flushFrontBuffer = function flushFrontBuffer(currentTime, targetDuration, targetFrontBufferPosition) {\n      var _this18 = this;\n      this.sourceBuffers.forEach(function (_ref0) {\n        var type = _ref0[0],\n          sb = _ref0[1];\n        if (sb) {\n          var buffered = BufferHelper.getBuffered(sb);\n          var numBufferedRanges = buffered.length;\n          // The buffer is either empty or contiguous\n          if (numBufferedRanges < 2) {\n            return;\n          }\n          var bufferStart = buffered.start(numBufferedRanges - 1);\n          var bufferEnd = buffered.end(numBufferedRanges - 1);\n          // No flush if we can tolerate the current buffer length or the current buffer range we would flush is contiguous with current position\n          if (targetFrontBufferPosition > bufferStart || currentTime >= bufferStart && currentTime <= bufferEnd) {\n            return;\n          }\n          _this18.hls.trigger(Events.BUFFER_FLUSHING, {\n            startOffset: bufferStart,\n            endOffset: Infinity,\n            type: type\n          });\n        }\n      });\n    }\n\n    /**\n     * Update Media Source duration to current level duration or override to Infinity if configuration parameter\n     * 'liveDurationInfinity` is set to `true`\n     * More details: https://github.com/video-dev/hls.js/issues/355\n     */;\n    _proto.getDurationAndRange = function getDurationAndRange() {\n      var _this$overrides2;\n      var details = this.details,\n        mediaSource = this.mediaSource;\n      if (!details || !this.media || (mediaSource == null ? void 0 : mediaSource.readyState) !== 'open') {\n        return null;\n      }\n      var playlistEnd = details.edge;\n      if (details.live && this.hls.config.liveDurationInfinity) {\n        var len = details.fragments.length;\n        if (len && details.live && !!mediaSource.setLiveSeekableRange) {\n          var start = Math.max(0, details.fragmentStart);\n          var end = Math.max(start, playlistEnd);\n          return {\n            duration: Infinity,\n            start: start,\n            end: end\n          };\n        }\n        return {\n          duration: Infinity\n        };\n      }\n      var overrideDuration = (_this$overrides2 = this.overrides) == null ? void 0 : _this$overrides2.duration;\n      if (overrideDuration) {\n        if (!isFiniteNumber(overrideDuration)) {\n          return null;\n        }\n        return {\n          duration: overrideDuration\n        };\n      }\n      var mediaDuration = this.media.duration;\n      var msDuration = isFiniteNumber(mediaSource.duration) ? mediaSource.duration : 0;\n      if (playlistEnd > msDuration && playlistEnd > mediaDuration || !isFiniteNumber(mediaDuration)) {\n        return {\n          duration: playlistEnd\n        };\n      }\n      return null;\n    };\n    _proto.updateMediaSource = function updateMediaSource(_ref1) {\n      var duration = _ref1.duration,\n        start = _ref1.start,\n        end = _ref1.end;\n      var mediaSource = this.mediaSource;\n      if (!this.media || !mediaSource || mediaSource.readyState !== 'open') {\n        return;\n      }\n      if (mediaSource.duration !== duration) {\n        if (isFiniteNumber(duration)) {\n          this.log(\"Updating MediaSource duration to \" + duration.toFixed(3));\n        }\n        mediaSource.duration = duration;\n      }\n      if (start !== undefined && end !== undefined) {\n        this.log(\"MediaSource duration is set to \" + mediaSource.duration + \". Setting seekable range to \" + start + \"-\" + end + \".\");\n        mediaSource.setLiveSeekableRange(start, end);\n      }\n    };\n    _proto.checkPendingTracks = function checkPendingTracks() {\n      var bufferCodecEventsTotal = this.bufferCodecEventsTotal,\n        pendingTrackCount = this.pendingTrackCount,\n        tracks = this.tracks;\n      this.log(\"checkPendingTracks (pending: \" + pendingTrackCount + \" codec events expected: \" + bufferCodecEventsTotal + \") \" + stringify(tracks));\n      // Check if we've received all of the expected bufferCodec events. When none remain, create all the sourceBuffers at once.\n      // This is important because the MSE spec allows implementations to throw QuotaExceededErrors if creating new sourceBuffers after\n      // data has been appended to existing ones.\n      // 2 tracks is the max (one for audio, one for video). If we've reach this max go ahead and create the buffers.\n      if (this.tracksReady) {\n        var _this$transferData3;\n        var transferredTracks = (_this$transferData3 = this.transferData) == null ? void 0 : _this$transferData3.tracks;\n        if (transferredTracks && Object.keys(transferredTracks).length) {\n          this.attachTransferred();\n        } else {\n          // ok, let's create them now !\n          this.createSourceBuffers();\n        }\n      }\n    };\n    _proto.bufferCreated = function bufferCreated() {\n      var _this19 = this;\n      if (this.sourceBufferCount) {\n        var tracks = {};\n        this.sourceBuffers.forEach(function (_ref10) {\n          var type = _ref10[0],\n            buffer = _ref10[1];\n          if (type) {\n            var track = _this19.tracks[type];\n            tracks[type] = {\n              buffer: buffer,\n              container: track.container,\n              codec: track.codec,\n              supplemental: track.supplemental,\n              levelCodec: track.levelCodec,\n              id: track.id,\n              metadata: track.metadata\n            };\n          }\n        });\n        this.hls.trigger(Events.BUFFER_CREATED, {\n          tracks: tracks\n        });\n        this.log(\"SourceBuffers created. Running queue: \" + this.operationQueue);\n        this.sourceBuffers.forEach(function (_ref11) {\n          var type = _ref11[0];\n          _this19.executeNext(type);\n        });\n      } else {\n        var error = new Error('could not create source buffer for media codec(s)');\n        this.hls.trigger(Events.ERROR, {\n          type: ErrorTypes.MEDIA_ERROR,\n          details: ErrorDetails.BUFFER_INCOMPATIBLE_CODECS_ERROR,\n          fatal: true,\n          error: error,\n          reason: error.message\n        });\n      }\n    };\n    _proto.createSourceBuffers = function createSourceBuffers() {\n      var tracks = this.tracks,\n        sourceBuffers = this.sourceBuffers,\n        mediaSource = this.mediaSource;\n      if (!mediaSource) {\n        throw new Error('createSourceBuffers called when mediaSource was null');\n      }\n      for (var trackName in tracks) {\n        var type = trackName;\n        var track = tracks[type];\n        if (this.isPending(track)) {\n          var codec = this.getTrackCodec(track, type);\n          var mimeType = track.container + \";codecs=\" + codec;\n          track.codec = codec;\n          this.log(\"creating sourceBuffer(\" + mimeType + \")\" + (this.currentOp(type) ? ' Queued' : '') + \" \" + stringify(track));\n          try {\n            var sb = mediaSource.addSourceBuffer(mimeType);\n            var sbIndex = sourceBufferNameToIndex(type);\n            var sbTuple = [type, sb];\n            sourceBuffers[sbIndex] = sbTuple;\n            track.buffer = sb;\n          } catch (error) {\n            var _this$operationQueue;\n            this.error(\"error while trying to add sourceBuffer: \" + error.message);\n            // remove init segment from queue and delete track info\n            this.shiftAndExecuteNext(type);\n            (_this$operationQueue = this.operationQueue) == null ? void 0 : _this$operationQueue.removeBlockers();\n            delete this.tracks[type];\n            this.hls.trigger(Events.ERROR, {\n              type: ErrorTypes.MEDIA_ERROR,\n              details: ErrorDetails.BUFFER_ADD_CODEC_ERROR,\n              fatal: false,\n              error: error,\n              sourceBufferName: type,\n              mimeType: mimeType,\n              parent: track.id\n            });\n            return;\n          }\n          this.trackSourceBuffer(type, track);\n        }\n      }\n      this.bufferCreated();\n    };\n    _proto.getTrackCodec = function getTrackCodec(track, trackName) {\n      // Use supplemental video codec when supported when adding SourceBuffer (#5558)\n      var supplementalCodec = track.supplemental;\n      var trackCodec = track.codec;\n      if (supplementalCodec && (trackName === 'video' || trackName === 'audiovideo') && areCodecsMediaSourceSupported(supplementalCodec, 'video')) {\n        trackCodec = replaceVideoCodec(trackCodec, supplementalCodec);\n      }\n      var codec = pickMostCompleteCodecName(trackCodec, track.levelCodec);\n      if (codec) {\n        if (trackName.slice(0, 5) === 'audio') {\n          return getCodecCompatibleName(codec, this.appendSource);\n        }\n        return codec;\n      }\n      return '';\n    };\n    _proto.trackSourceBuffer = function trackSourceBuffer(type, track) {\n      var _this20 = this;\n      var buffer = track.buffer;\n      if (!buffer) {\n        return;\n      }\n      var codec = this.getTrackCodec(track, type);\n      this.tracks[type] = {\n        buffer: buffer,\n        codec: codec,\n        container: track.container,\n        levelCodec: track.levelCodec,\n        supplemental: track.supplemental,\n        metadata: track.metadata,\n        id: track.id,\n        listeners: []\n      };\n      this.removeBufferListeners(type);\n      this.addBufferListener(type, 'updatestart', this.onSBUpdateStart);\n      this.addBufferListener(type, 'updateend', this.onSBUpdateEnd);\n      this.addBufferListener(type, 'error', this.onSBUpdateError);\n      // ManagedSourceBuffer bufferedchange event\n      if (this.appendSource) {\n        this.addBufferListener(type, 'bufferedchange', function (type, event) {\n          // If media was ejected check for a change. Added ranges are redundant with changes on 'updateend' event.\n          var removedRanges = event.removedRanges;\n          if (removedRanges != null && removedRanges.length) {\n            _this20.hls.trigger(Events.BUFFER_FLUSHED, {\n              type: type\n            });\n          }\n        });\n      }\n    };\n    _proto.onSBUpdateStart = function onSBUpdateStart(type) {\n      var operation = this.currentOp(type);\n      if (!operation) {\n        return;\n      }\n      operation.onStart();\n    };\n    _proto.onSBUpdateEnd = function onSBUpdateEnd(type) {\n      var _this$mediaSource2;\n      if (((_this$mediaSource2 = this.mediaSource) == null ? void 0 : _this$mediaSource2.readyState) === 'closed') {\n        this.resetBuffer(type);\n        return;\n      }\n      var operation = this.currentOp(type);\n      if (!operation) {\n        return;\n      }\n      operation.onComplete();\n      this.shiftAndExecuteNext(type);\n    };\n    _proto.onSBUpdateError = function onSBUpdateError(type, event) {\n      var _this$mediaSource3;\n      var error = new Error(type + \" SourceBuffer error. MediaSource readyState: \" + ((_this$mediaSource3 = this.mediaSource) == null ? void 0 : _this$mediaSource3.readyState));\n      this.error(\"\" + error, event);\n      // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error\n      // SourceBuffer errors are not necessarily fatal; if so, the HTMLMediaElement will fire an error event\n      this.hls.trigger(Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.BUFFER_APPENDING_ERROR,\n        sourceBufferName: type,\n        error: error,\n        fatal: false\n      });\n      // updateend is always fired after error, so we'll allow that to shift the current operation off of the queue\n      var operation = this.currentOp(type);\n      if (operation) {\n        operation.onError(error);\n      }\n    }\n\n    // This method must result in an updateend event; if remove is not called, onSBUpdateEnd must be called manually\n    ;\n    _proto.removeExecutor = function removeExecutor(type, startOffset, endOffset) {\n      var media = this.media,\n        mediaSource = this.mediaSource;\n      var track = this.tracks[type];\n      var sb = track == null ? void 0 : track.buffer;\n      if (!media || !mediaSource || !sb) {\n        this.warn(\"Attempting to remove from the \" + type + \" SourceBuffer, but it does not exist\");\n        this.shiftAndExecuteNext(type);\n        return;\n      }\n      var mediaDuration = isFiniteNumber(media.duration) ? media.duration : Infinity;\n      var msDuration = isFiniteNumber(mediaSource.duration) ? mediaSource.duration : Infinity;\n      var removeStart = Math.max(0, startOffset);\n      var removeEnd = Math.min(endOffset, mediaDuration, msDuration);\n      if (removeEnd > removeStart && (!track.ending || track.ended)) {\n        track.ended = false;\n        this.log(\"Removing [\" + removeStart + \",\" + removeEnd + \"] from the \" + type + \" SourceBuffer\");\n        sb.remove(removeStart, removeEnd);\n      } else {\n        // Cycle the queue\n        this.shiftAndExecuteNext(type);\n      }\n    }\n\n    // This method must result in an updateend event; if append is not called, onSBUpdateEnd must be called manually\n    ;\n    _proto.appendExecutor = function appendExecutor(data, type) {\n      var track = this.tracks[type];\n      var sb = track == null ? void 0 : track.buffer;\n      if (!sb) {\n        throw new HlsJsTrackRemovedError(\"Attempting to append to the \" + type + \" SourceBuffer, but it does not exist\");\n      }\n      track.ending = false;\n      track.ended = false;\n      sb.appendBuffer(data);\n    };\n    _proto.blockUntilOpen = function blockUntilOpen(callback) {\n      var _this21 = this;\n      if (this.isUpdating() || this.isQueued()) {\n        this.blockBuffers(callback).catch(function (error) {\n          _this21.warn(\"SourceBuffer blocked callback \" + error);\n          _this21.stepOperationQueue(_this21.sourceBufferTypes);\n        });\n      } else {\n        try {\n          callback();\n        } catch (error) {\n          this.warn(\"Callback run without blocking \" + this.operationQueue + \" \" + error);\n        }\n      }\n    };\n    _proto.isUpdating = function isUpdating() {\n      return this.sourceBuffers.some(function (_ref12) {\n        var type = _ref12[0],\n          sb = _ref12[1];\n        return type && sb.updating;\n      });\n    };\n    _proto.isQueued = function isQueued() {\n      var _this22 = this;\n      return this.sourceBuffers.some(function (_ref13) {\n        var type = _ref13[0];\n        return type && !!_this22.currentOp(type);\n      });\n    };\n    _proto.isPending = function isPending(track) {\n      return !!track && !track.buffer;\n    }\n\n    // Enqueues an operation to each SourceBuffer queue which, upon execution, resolves a promise. When all promises\n    // resolve, the onUnblocked function is executed. Functions calling this method do not need to unblock the queue\n    // upon completion, since we already do it here\n    ;\n    _proto.blockBuffers = function blockBuffers(onUnblocked, bufferNames) {\n      var _this23 = this;\n      if (bufferNames === void 0) {\n        bufferNames = this.sourceBufferTypes;\n      }\n      if (!bufferNames.length) {\n        this.log('Blocking operation requested, but no SourceBuffers exist');\n        return Promise.resolve().then(onUnblocked);\n      }\n      var operationQueue = this.operationQueue;\n\n      // logger.debug(`[buffer-controller]: Blocking ${buffers} SourceBuffer`);\n      var blockingOperations = bufferNames.map(function (type) {\n        return _this23.appendBlocker(type);\n      });\n      var audioBlocked = bufferNames.length > 1 && !!this.blockedAudioAppend;\n      if (audioBlocked) {\n        this.unblockAudio();\n      }\n      return Promise.all(blockingOperations).then(function (result) {\n        if (operationQueue !== _this23.operationQueue) {\n          return;\n        }\n        // logger.debug(`[buffer-controller]: Blocking operation resolved; unblocking ${buffers} SourceBuffer`);\n        onUnblocked();\n        _this23.stepOperationQueue(_this23.sourceBufferTypes);\n      });\n    };\n    _proto.stepOperationQueue = function stepOperationQueue(bufferNames) {\n      var _this24 = this;\n      bufferNames.forEach(function (type) {\n        var _this24$tracks$type;\n        var sb = (_this24$tracks$type = _this24.tracks[type]) == null ? void 0 : _this24$tracks$type.buffer;\n        // Only cycle the queue if the SB is not updating. There's a bug in Chrome which sets the SB updating flag to\n        // true when changing the MediaSource duration (https://bugs.chromium.org/p/chromium/issues/detail?id=959359&can=2&q=mediasource%20duration)\n        // While this is a workaround, it's probably useful to have around\n        if (!sb || sb.updating) {\n          return;\n        }\n        _this24.shiftAndExecuteNext(type);\n      });\n    };\n    _proto.append = function append(operation, type, pending) {\n      if (this.operationQueue) {\n        this.operationQueue.append(operation, type, pending);\n      }\n    };\n    _proto.appendBlocker = function appendBlocker(type) {\n      if (this.operationQueue) {\n        return this.operationQueue.appendBlocker(type);\n      }\n    };\n    _proto.currentOp = function currentOp(type) {\n      if (this.operationQueue) {\n        return this.operationQueue.current(type);\n      }\n      return null;\n    };\n    _proto.executeNext = function executeNext(type) {\n      if (type && this.operationQueue) {\n        this.operationQueue.executeNext(type);\n      }\n    };\n    _proto.shiftAndExecuteNext = function shiftAndExecuteNext(type) {\n      if (this.operationQueue) {\n        this.operationQueue.shiftAndExecuteNext(type);\n      }\n    };\n    _proto.addBufferListener = function addBufferListener(type, event, fn) {\n      var track = this.tracks[type];\n      if (!track) {\n        return;\n      }\n      var buffer = track.buffer;\n      if (!buffer) {\n        return;\n      }\n      var listener = fn.bind(this, type);\n      track.listeners.push({\n        event: event,\n        listener: listener\n      });\n      buffer.addEventListener(event, listener);\n    };\n    _proto.removeBufferListeners = function removeBufferListeners(type) {\n      var track = this.tracks[type];\n      if (!track) {\n        return;\n      }\n      var buffer = track.buffer;\n      if (!buffer) {\n        return;\n      }\n      track.listeners.forEach(function (l) {\n        buffer.removeEventListener(l.event, l.listener);\n      });\n      track.listeners.length = 0;\n    };\n    return _createClass(BufferController, [{\n      key: \"mediaSourceOpenOrEnded\",\n      get: function get() {\n        var _this$mediaSource4;\n        var readyState = (_this$mediaSource4 = this.mediaSource) == null ? void 0 : _this$mediaSource4.readyState;\n        return readyState === 'open' || readyState === 'ended';\n      }\n    }, {\n      key: \"sourceBufferTracks\",\n      get: function get() {\n        var _this25 = this;\n        return Object.keys(this.tracks).reduce(function (baseTracks, type) {\n          var track = _this25.tracks[type];\n          baseTracks[type] = {\n            id: track.id,\n            container: track.container,\n            codec: track.codec,\n            levelCodec: track.levelCodec\n          };\n          return baseTracks;\n        }, {});\n      }\n    }, {\n      key: \"bufferedToEnd\",\n      get: function get() {\n        var _this26 = this;\n        return this.sourceBufferCount > 0 && !this.sourceBuffers.some(function (_ref14) {\n          var _this26$tracks$type, _this26$tracks$type2;\n          var type = _ref14[0];\n          return type && (!((_this26$tracks$type = _this26.tracks[type]) != null && _this26$tracks$type.ended) || ((_this26$tracks$type2 = _this26.tracks[type]) == null ? void 0 : _this26$tracks$type2.ending));\n        });\n      }\n    }, {\n      key: \"tracksReady\",\n      get: function get() {\n        var pendingTrackCount = this.pendingTrackCount;\n        return pendingTrackCount > 0 && (pendingTrackCount >= this.bufferCodecEventsTotal || this.isPending(this.tracks.audiovideo));\n      }\n    }, {\n      key: \"mediaSrc\",\n      get: function get() {\n        var _this$media, _this$media$querySele;\n        var media = ((_this$media = this.media) == null ? void 0 : (_this$media$querySele = _this$media.querySelector) == null ? void 0 : _this$media$querySele.call(_this$media, 'source')) || this.media;\n        return media == null ? void 0 : media.src;\n      }\n    }, {\n      key: \"pendingTrackCount\",\n      get: function get() {\n        var _this27 = this;\n        return Object.keys(this.tracks).reduce(function (acc, type) {\n          return acc + (_this27.isPending(_this27.tracks[type]) ? 1 : 0);\n        }, 0);\n      }\n    }, {\n      key: \"sourceBufferCount\",\n      get: function get() {\n        return this.sourceBuffers.reduce(function (acc, _ref15) {\n          var type = _ref15[0];\n          return acc + (type ? 1 : 0);\n        }, 0);\n      }\n    }, {\n      key: \"sourceBufferTypes\",\n      get: function get() {\n        return this.sourceBuffers.map(function (_ref16) {\n          var type = _ref16[0];\n          return type;\n        }).filter(function (type) {\n          return !!type;\n        });\n      }\n    }]);\n  }(Logger);\n  function removeSourceChildren(node) {\n    var sourceChildren = node.querySelectorAll('source');\n    [].slice.call(sourceChildren).forEach(function (source) {\n      node.removeChild(source);\n    });\n  }\n  function addSource(media, url) {\n    var source = self.document.createElement('source');\n    source.type = 'video/mp4';\n    source.src = url;\n    media.appendChild(source);\n  }\n  function sourceBufferNameToIndex(type) {\n    return type === 'audio' ? 1 : 0;\n  }\n\n  var CapLevelController = /*#__PURE__*/function () {\n    function CapLevelController(hls) {\n      this.hls = void 0;\n      this.autoLevelCapping = void 0;\n      this.firstLevel = void 0;\n      this.media = void 0;\n      this.restrictedLevels = void 0;\n      this.timer = void 0;\n      this.clientRect = void 0;\n      this.streamController = void 0;\n      this.hls = hls;\n      this.autoLevelCapping = Number.POSITIVE_INFINITY;\n      this.firstLevel = -1;\n      this.media = null;\n      this.restrictedLevels = [];\n      this.timer = undefined;\n      this.clientRect = null;\n      this.registerListeners();\n    }\n    var _proto = CapLevelController.prototype;\n    _proto.setStreamController = function setStreamController(streamController) {\n      this.streamController = streamController;\n    };\n    _proto.destroy = function destroy() {\n      if (this.hls) {\n        this.unregisterListener();\n      }\n      if (this.timer) {\n        this.stopCapping();\n      }\n      this.media = null;\n      this.clientRect = null;\n      // @ts-ignore\n      this.hls = this.streamController = null;\n    };\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);\n      hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n      hls.on(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n      hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    };\n    _proto.unregisterListener = function unregisterListener() {\n      var hls = this.hls;\n      hls.off(Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);\n      hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n      hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n      hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    };\n    _proto.onFpsDropLevelCapping = function onFpsDropLevelCapping(event, data) {\n      // Don't add a restricted level more than once\n      var level = this.hls.levels[data.droppedLevel];\n      if (this.isLevelAllowed(level)) {\n        this.restrictedLevels.push({\n          bitrate: level.bitrate,\n          height: level.height,\n          width: level.width\n        });\n      }\n    };\n    _proto.onMediaAttaching = function onMediaAttaching(event, data) {\n      this.media = data.media instanceof HTMLVideoElement ? data.media : null;\n      this.clientRect = null;\n      if (this.timer && this.hls.levels.length) {\n        this.detectPlayerSize();\n      }\n    };\n    _proto.onManifestParsed = function onManifestParsed(event, data) {\n      var hls = this.hls;\n      this.restrictedLevels = [];\n      this.firstLevel = data.firstLevel;\n      if (hls.config.capLevelToPlayerSize && data.video) {\n        // Start capping immediately if the manifest has signaled video codecs\n        this.startCapping();\n      }\n    };\n    _proto.onLevelsUpdated = function onLevelsUpdated(event, data) {\n      if (this.timer && isFiniteNumber(this.autoLevelCapping)) {\n        this.detectPlayerSize();\n      }\n    }\n\n    // Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted\n    // to the first level\n    ;\n    _proto.onBufferCodecs = function onBufferCodecs(event, data) {\n      var hls = this.hls;\n      if (hls.config.capLevelToPlayerSize && data.video) {\n        // If the manifest did not signal a video codec capping has been deferred until we're certain video is present\n        this.startCapping();\n      }\n    };\n    _proto.onMediaDetaching = function onMediaDetaching() {\n      this.stopCapping();\n      this.media = null;\n    };\n    _proto.detectPlayerSize = function detectPlayerSize() {\n      if (this.media) {\n        if (this.mediaHeight <= 0 || this.mediaWidth <= 0) {\n          this.clientRect = null;\n          return;\n        }\n        var levels = this.hls.levels;\n        if (levels.length) {\n          var hls = this.hls;\n          var maxLevel = this.getMaxLevel(levels.length - 1);\n          if (maxLevel !== this.autoLevelCapping) {\n            hls.logger.log(\"Setting autoLevelCapping to \" + maxLevel + \": \" + levels[maxLevel].height + \"p@\" + levels[maxLevel].bitrate + \" for media \" + this.mediaWidth + \"x\" + this.mediaHeight);\n          }\n          hls.autoLevelCapping = maxLevel;\n          if (hls.autoLevelEnabled && hls.autoLevelCapping > this.autoLevelCapping && this.streamController) {\n            // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch\n            // usually happen when the user go to the fullscreen mode.\n            this.streamController.nextLevelSwitch();\n          }\n          this.autoLevelCapping = hls.autoLevelCapping;\n        }\n      }\n    }\n\n    /*\n     * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)\n     */;\n    _proto.getMaxLevel = function getMaxLevel(capLevelIndex) {\n      var _this = this;\n      var levels = this.hls.levels;\n      if (!levels.length) {\n        return -1;\n      }\n      var validLevels = levels.filter(function (level, index) {\n        return _this.isLevelAllowed(level) && index <= capLevelIndex;\n      });\n      this.clientRect = null;\n      return CapLevelController.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);\n    };\n    _proto.startCapping = function startCapping() {\n      if (this.timer) {\n        // Don't reset capping if started twice; this can happen if the manifest signals a video codec\n        return;\n      }\n      this.autoLevelCapping = Number.POSITIVE_INFINITY;\n      self.clearInterval(this.timer);\n      this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1000);\n      this.detectPlayerSize();\n    };\n    _proto.stopCapping = function stopCapping() {\n      this.restrictedLevels = [];\n      this.firstLevel = -1;\n      this.autoLevelCapping = Number.POSITIVE_INFINITY;\n      if (this.timer) {\n        self.clearInterval(this.timer);\n        this.timer = undefined;\n      }\n    };\n    _proto.getDimensions = function getDimensions() {\n      if (this.clientRect) {\n        return this.clientRect;\n      }\n      var media = this.media;\n      var boundsRect = {\n        width: 0,\n        height: 0\n      };\n      if (media) {\n        var clientRect = media.getBoundingClientRect();\n        boundsRect.width = clientRect.width;\n        boundsRect.height = clientRect.height;\n        if (!boundsRect.width && !boundsRect.height) {\n          // When the media element has no width or height (equivalent to not being in the DOM),\n          // then use its width and height attributes (media.width, media.height)\n          boundsRect.width = clientRect.right - clientRect.left || media.width || 0;\n          boundsRect.height = clientRect.bottom - clientRect.top || media.height || 0;\n        }\n      }\n      this.clientRect = boundsRect;\n      return boundsRect;\n    };\n    _proto.isLevelAllowed = function isLevelAllowed(level) {\n      var restrictedLevels = this.restrictedLevels;\n      return !restrictedLevels.some(function (restrictedLevel) {\n        return level.bitrate === restrictedLevel.bitrate && level.width === restrictedLevel.width && level.height === restrictedLevel.height;\n      });\n    };\n    CapLevelController.getMaxLevelByMediaSize = function getMaxLevelByMediaSize(levels, width, height) {\n      if (!(levels != null && levels.length)) {\n        return -1;\n      }\n\n      // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next\n      // to determine whether we've chosen the greatest bandwidth for the media's dimensions\n      var atGreatestBandwidth = function atGreatestBandwidth(curLevel, nextLevel) {\n        if (!nextLevel) {\n          return true;\n        }\n        return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;\n      };\n\n      // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to\n      // the max level\n      var maxLevelIndex = levels.length - 1;\n      // Prevent changes in aspect-ratio from causing capping to toggle back and forth\n      var squareSize = Math.max(width, height);\n      for (var i = 0; i < levels.length; i += 1) {\n        var level = levels[i];\n        if ((level.width >= squareSize || level.height >= squareSize) && atGreatestBandwidth(level, levels[i + 1])) {\n          maxLevelIndex = i;\n          break;\n        }\n      }\n      return maxLevelIndex;\n    };\n    return _createClass(CapLevelController, [{\n      key: \"mediaWidth\",\n      get: function get() {\n        return this.getDimensions().width * this.contentScaleFactor;\n      }\n    }, {\n      key: \"mediaHeight\",\n      get: function get() {\n        return this.getDimensions().height * this.contentScaleFactor;\n      }\n    }, {\n      key: \"contentScaleFactor\",\n      get: function get() {\n        var pixelRatio = 1;\n        if (!this.hls.config.ignoreDevicePixelRatio) {\n          try {\n            pixelRatio = self.devicePixelRatio;\n          } catch (e) {\n            /* no-op */\n          }\n        }\n        return Math.min(pixelRatio, this.hls.config.maxDevicePixelRatio);\n      }\n    }]);\n  }();\n\n  /**\n   * Common Media Object Type\n   *\n   * @internal\n   */\n  var CmObjectType = {\n    /**\n     * text file, such as a manifest or playlist\n     */\n    MANIFEST: 'm',\n    /**\n     * audio only\n     */\n    AUDIO: 'a',\n    /**\n     * video only\n     */\n    VIDEO: 'v',\n    /**\n     * muxed audio and video\n     */\n    MUXED: 'av',\n    /**\n     * init segment\n     */\n    INIT: 'i',\n    /**\n     * caption or subtitle\n     */\n    CAPTION: 'c',\n    /**\n     * ISOBMFF timed text track\n     */\n    TIMED_TEXT: 'tt',\n    /**\n     * cryptographic key, license or certificate.\n     */\n    KEY: 'k',\n    /**\n     * other\n     */\n    OTHER: 'o'\n  };\n\n  /**\n   * Common Media Client Data Object Type\n   *\n   * @group CMCD\n   *\n   * @beta\n   *\n   * @enum\n   */\n  var CmcdObjectType = CmObjectType;\n\n  /**\n   * Common Media Streaming Format\n   *\n   * @internal\n   */\n  var CmStreamingFormat = {\n    /**\n     * HTTP Live Streaming (HLS)\n     */\n    HLS: 'h'};\n\n  /**\n   * Common Media Client Data Streaming Format\n   *\n   * @group CMCD\n   *\n   * @enum\n   *\n   * @beta\n   */\n  var CmcdStreamingFormat = CmStreamingFormat;\n\n  /**\n   * CMCD object header name.\n   *\n   * @group CMCD\n   *\n   * @beta\n   */\n  var CMCD_OBJECT = 'CMCD-Object';\n\n  /**\n   * CMCD request header name.\n   *\n   * @group CMCD\n   *\n   * @beta\n   */\n  var CMCD_REQUEST = 'CMCD-Request';\n\n  /**\n   * CMCD session header name.\n   *\n   * @group CMCD\n   *\n   * @beta\n   */\n  var CMCD_SESSION = 'CMCD-Session';\n\n  /**\n   * CMCD status header name.\n   *\n   * @group CMCD\n   *\n   * @beta\n   */\n  var CMCD_STATUS = 'CMCD-Status';\n\n  /**\n   * CMCD header fields.\n   *\n   * @group CMCD\n   *\n   * @enum\n   *\n   * @beta\n   */\n  var CmcdHeaderField = {\n    /**\n     * keys whose values vary with the object being requested.\n     */\n    OBJECT: CMCD_OBJECT,\n    /**\n     * keys whose values vary with each request.\n     */\n    REQUEST: CMCD_REQUEST,\n    /**\n     * keys whose values are expected to be invariant over the life of the session.\n     */\n    SESSION: CMCD_SESSION,\n    /**\n     * keys whose values do not vary with every request or object.\n     */\n    STATUS: CMCD_STATUS\n  };\n\n  var _CmcdHeaderMap;\n  /**\n   * The map of CMCD header fields to official CMCD keys.\n   *\n   * @internal\n   *\n   * @group CMCD\n   */\n  var CmcdHeaderMap = (_CmcdHeaderMap = {}, _CmcdHeaderMap[CmcdHeaderField.OBJECT] = ['br', 'd', 'ot', 'tb'], _CmcdHeaderMap[CmcdHeaderField.REQUEST] = ['bl', 'dl', 'mtp', 'nor', 'nrr', 'su'], _CmcdHeaderMap[CmcdHeaderField.SESSION] = ['cid', 'pr', 'sf', 'sid', 'st', 'v'], _CmcdHeaderMap[CmcdHeaderField.STATUS] = ['bs', 'rtp'], _CmcdHeaderMap);\n\n  /**\n   * Structured Field Item\n   *\n   * @group Structured Field\n   *\n   * @beta\n   */\n  var SfItem = function SfItem(value, params) {\n    if (Array.isArray(value)) {\n      value = value.map(function (v) {\n        return v instanceof SfItem ? v : new SfItem(v);\n      });\n    }\n    this.value = value;\n    this.params = params;\n  };\n\n  var DICT = 'Dict';\n\n  function format(value) {\n    if (Array.isArray(value)) {\n      return JSON.stringify(value);\n    }\n    if (value instanceof Map) {\n      return 'Map{}';\n    }\n    if (value instanceof Set) {\n      return 'Set{}';\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n  function throwError(action, src, type, cause) {\n    return new Error(\"failed to \" + action + \" \\\"\" + format(src) + \"\\\" as \" + type, {\n      cause: cause\n    });\n  }\n\n  function serializeError(src, type, cause) {\n    return throwError('serialize', src, type, cause);\n  }\n\n  /**\n   * A class to represent structured field tokens when `Symbol` is not available.\n   *\n   * @group Structured Field\n   *\n   * @beta\n   */\n  var SfToken = function SfToken(description) {\n    this.description = description;\n  };\n\n  var BARE_ITEM = 'Bare Item';\n\n  var BOOLEAN = 'Boolean';\n\n  // 4.1.9.  Serializing a Boolean\n  //\n  // Given a Boolean as input_boolean, return an ASCII string suitable for\n  // use in a HTTP field value.\n  //\n  // 1.  If input_boolean is not a boolean, fail serialization.\n  //\n  // 2.  Let output be an empty string.\n  //\n  // 3.  Append \"?\" to output.\n  //\n  // 4.  If input_boolean is true, append \"1\" to output.\n  //\n  // 5.  If input_boolean is false, append \"0\" to output.\n  //\n  // 6.  Return output.\n  function serializeBoolean(value) {\n    if (typeof value !== 'boolean') {\n      throw serializeError(value, BOOLEAN);\n    }\n    return value ? '?1' : '?0';\n  }\n\n  /**\n   * Encodes binary data to base64\n   *\n   * @param binary - The binary data to encode\n   * @returns The base64 encoded string\n   *\n   * @group Utils\n   *\n   * @beta\n   */\n  function base64encode(binary) {\n    return btoa(String.fromCharCode.apply(String, binary));\n  }\n\n  var BYTES = 'Byte Sequence';\n\n  // 4.1.8.  Serializing a Byte Sequence\n  //\n  // Given a Byte Sequence as input_bytes, return an ASCII string suitable\n  // for use in a HTTP field value.\n  //\n  // 1.  If input_bytes is not a sequence of bytes, fail serialization.\n  //\n  // 2.  Let output be an empty string.\n  //\n  // 3.  Append \":\" to output.\n  //\n  // 4.  Append the result of base64-encoding input_bytes as per\n  //     [RFC4648], Section 4, taking account of the requirements below.\n  //\n  // 5.  Append \":\" to output.\n  //\n  // 6.  Return output.\n  //\n  // The encoded data is required to be padded with \"=\", as per [RFC4648],\n  // Section 3.2.\n  //\n  // Likewise, encoded data SHOULD have pad bits set to zero, as per\n  // [RFC4648], Section 3.5, unless it is not possible to do so due to\n  // implementation constraints.\n  function serializeByteSequence(value) {\n    if (ArrayBuffer.isView(value) === false) {\n      throw serializeError(value, BYTES);\n    }\n    return \":\" + base64encode(value) + \":\";\n  }\n\n  var INTEGER = 'Integer';\n\n  function isInvalidInt(value) {\n    return value < -999999999999999 || 999999999999999 < value;\n  }\n\n  // 4.1.4.  Serializing an Integer\n  //\n  // Given an Integer as input_integer, return an ASCII string suitable\n  // for use in a HTTP field value.\n  //\n  // 1.  If input_integer is not an integer in the range of\n  //     -999,999,999,999,999 to 999,999,999,999,999 inclusive, fail\n  //     serialization.\n  //\n  // 2.  Let output be an empty string.\n  //\n  // 3.  If input_integer is less than (but not equal to) 0, append \"-\" to\n  //     output.\n  //\n  // 4.  Append input_integer's numeric value represented in base 10 using\n  //     only decimal digits to output.\n  //\n  // 5.  Return output.\n  function serializeInteger(value) {\n    if (isInvalidInt(value)) {\n      throw serializeError(value, INTEGER);\n    }\n    return value.toString();\n  }\n\n  // 4.1.10.  Serializing a Date\n  //\n  // Given a Date as input_integer, return an ASCII string suitable for\n  // use in an HTTP field value.\n  // 1.  Let output be \"@\".\n  // 2.  Append to output the result of running Serializing an Integer\n  //     with input_date (Section 4.1.4).\n  // 3.  Return output.\n  function serializeDate(value) {\n    return \"@\" + serializeInteger(value.getTime() / 1000);\n  }\n\n  /**\n   * This implements the rounding procedure described in step 2 of the \"Serializing a Decimal\" specification.\n   * This rounding style is known as \"even rounding\", \"banker's rounding\", or \"commercial rounding\".\n   *\n   * @param value - The value to round\n   * @param precision - The number of decimal places to round to\n   * @returns The rounded value\n   *\n   * @group Utils\n   *\n   * @beta\n   */\n  function roundToEven(value, precision) {\n    if (value < 0) {\n      return -roundToEven(-value, precision);\n    }\n    var decimalShift = Math.pow(10, precision);\n    var isEquidistant = Math.abs(value * decimalShift % 1 - 0.5) < Number.EPSILON;\n    if (isEquidistant) {\n      // If the tail of the decimal place is 'equidistant' we round to the nearest even value\n      var flooredValue = Math.floor(value * decimalShift);\n      return (flooredValue % 2 === 0 ? flooredValue : flooredValue + 1) / decimalShift;\n    } else {\n      // Otherwise, proceed as normal\n      return Math.round(value * decimalShift) / decimalShift;\n    }\n  }\n\n  var DECIMAL = 'Decimal';\n\n  // 4.1.5.  Serializing a Decimal\n  //\n  // Given a decimal number as input_decimal, return an ASCII string\n  // suitable for use in a HTTP field value.\n  //\n  // 1.   If input_decimal is not a decimal number, fail serialization.\n  //\n  // 2.   If input_decimal has more than three significant digits to the\n  //      right of the decimal point, round it to three decimal places,\n  //      rounding the final digit to the nearest value, or to the even\n  //      value if it is equidistant.\n  //\n  // 3.   If input_decimal has more than 12 significant digits to the left\n  //      of the decimal point after rounding, fail serialization.\n  //\n  // 4.   Let output be an empty string.\n  //\n  // 5.   If input_decimal is less than (but not equal to) 0, append \"-\"\n  //      to output.\n  //\n  // 6.   Append input_decimal's integer component represented in base 10\n  //      (using only decimal digits) to output; if it is zero, append\n  //      \"0\".\n  //\n  // 7.   Append \".\" to output.\n  //\n  // 8.   If input_decimal's fractional component is zero, append \"0\" to\n  //      output.\n  //\n  // 9.   Otherwise, append the significant digits of input_decimal's\n  //      fractional component represented in base 10 (using only decimal\n  //      digits) to output.\n  //\n  // 10.  Return output.\n  function serializeDecimal(value) {\n    var roundedValue = roundToEven(value, 3); // round to 3 decimal places\n    if (Math.floor(Math.abs(roundedValue)).toString().length > 12) {\n      throw serializeError(value, DECIMAL);\n    }\n    var stringValue = roundedValue.toString();\n    return stringValue.includes('.') ? stringValue : stringValue + \".0\";\n  }\n\n  var STRING = 'String';\n\n  var STRING_REGEX = /[\\x00-\\x1f\\x7f]+/;\n\n  // 4.1.6.  Serializing a String\n  //\n  // Given a String as input_string, return an ASCII string suitable for\n  // use in a HTTP field value.\n  //\n  // 1.  Convert input_string into a sequence of ASCII characters; if\n  //     conversion fails, fail serialization.\n  //\n  // 2.  If input_string contains characters in the range %x00-1f or %x7f\n  //     (i.e., not in VCHAR or SP), fail serialization.\n  //\n  // 3.  Let output be the string DQUOTE.\n  //\n  // 4.  For each character char in input_string:\n  //\n  //     1.  If char is \"\\\" or DQUOTE:\n  //\n  //         1.  Append \"\\\" to output.\n  //\n  //     2.  Append char to output.\n  //\n  // 5.  Append DQUOTE to output.\n  //\n  // 6.  Return output.\n  function serializeString(value) {\n    if (STRING_REGEX.test(value)) {\n      throw serializeError(value, STRING);\n    }\n    return \"\\\"\" + value.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"\";\n  }\n\n  /**\n   * Converts a symbol to a string.\n   *\n   * @param symbol - The symbol to convert.\n   *\n   * @returns The string representation of the symbol.\n   *\n   * @internal\n   */\n  function symbolToStr(symbol) {\n    return symbol.description || symbol.toString().slice(7, -1);\n  }\n\n  var TOKEN = 'Token';\n\n  function serializeToken(token) {\n    var value = symbolToStr(token);\n    if (/^([a-zA-Z*])([!#$%&'*+\\-.^_`|~\\w:/]*)$/.test(value) === false) {\n      throw serializeError(value, TOKEN);\n    }\n    return value;\n  }\n\n  // 4.1.3.1.  Serializing a Bare Item\n  //\n  // Given an Item as input_item, return an ASCII string suitable for use\n  // in a HTTP field value.\n  //\n  // 1.  If input_item is an Integer, return the result of running\n  //     Serializing an Integer (Section 4.1.4) with input_item.\n  //\n  // 2.  If input_item is a Decimal, return the result of running\n  //     Serializing a Decimal (Section 4.1.5) with input_item.\n  //\n  // 3.  If input_item is a String, return the result of running\n  //     Serializing a String (Section 4.1.6) with input_item.\n  //\n  // 4.  If input_item is a Token, return the result of running\n  //     Serializing a Token (Section 4.1.7) with input_item.\n  //\n  // 5.  If input_item is a Boolean, return the result of running\n  //     Serializing a Boolean (Section 4.1.9) with input_item.\n  //\n  // 6.  If input_item is a Byte Sequence, return the result of running\n  //     Serializing a Byte Sequence (Section 4.1.8) with input_item.\n  //\n  // 7.  If input_item is a Date, return the result of running Serializing\n  //     a Date (Section 4.1.10) with input_item.\n  //\n  // 8.  Otherwise, fail serialization.\n  function serializeBareItem(value) {\n    switch (typeof value) {\n      case 'number':\n        if (!isFiniteNumber(value)) {\n          throw serializeError(value, BARE_ITEM);\n        }\n        if (Number.isInteger(value)) {\n          return serializeInteger(value);\n        }\n        return serializeDecimal(value);\n      case 'string':\n        return serializeString(value);\n      case 'symbol':\n        return serializeToken(value);\n      case 'boolean':\n        return serializeBoolean(value);\n      case 'object':\n        if (value instanceof Date) {\n          return serializeDate(value);\n        }\n        if (value instanceof Uint8Array) {\n          return serializeByteSequence(value);\n        }\n        if (value instanceof SfToken) {\n          return serializeToken(value);\n        }\n      default:\n        // fail\n        throw serializeError(value, BARE_ITEM);\n    }\n  }\n\n  var KEY = 'Key';\n\n  // 4.1.1.3.  Serializing a Key\n  //\n  // Given a key as input_key, return an ASCII string suitable for use in\n  // a HTTP field value.\n  //\n  // 1.  Convert input_key into a sequence of ASCII characters; if\n  //     conversion fails, fail serialization.\n  //\n  // 2.  If input_key contains characters not in lcalpha, DIGIT, \"_\", \"-\",\n  //     \".\", or \"*\" fail serialization.\n  //\n  // 3.  If the first character of input_key is not lcalpha or \"*\", fail\n  //     serialization.\n  //\n  // 4.  Let output be an empty string.\n  //\n  // 5.  Append input_key to output.\n  //\n  // 6.  Return output.\n  function serializeKey(value) {\n    if (/^[a-z*][a-z0-9\\-_.*]*$/.test(value) === false) {\n      throw serializeError(value, KEY);\n    }\n    return value;\n  }\n\n  // 4.1.1.2.  Serializing Parameters\n  //\n  // Given an ordered Dictionary as input_parameters (each member having a\n  // param_name and a param_value), return an ASCII string suitable for\n  // use in a HTTP field value.\n  //\n  // 1.  Let output be an empty string.\n  //\n  // 2.  For each param_name with a value of param_value in\n  //     input_parameters:\n  //\n  //     1.  Append \";\" to output.\n  //\n  //     2.  Append the result of running Serializing a Key\n  //         (Section 4.1.1.3) with param_name to output.\n  //\n  //     3.  If param_value is not Boolean true:\n  //\n  //         1.  Append \"=\" to output.\n  //\n  //         2.  Append the result of running Serializing a bare Item\n  //             (Section 4.1.3.1) with param_value to output.\n  //\n  // 3.  Return output.\n  function serializeParams(params) {\n    if (params == null) {\n      return '';\n    }\n    return Object.entries(params).map(function (_ref) {\n      var key = _ref[0],\n        value = _ref[1];\n      if (value === true) {\n        return \";\" + serializeKey(key); // omit true\n      }\n      return \";\" + serializeKey(key) + \"=\" + serializeBareItem(value);\n    }).join('');\n  }\n\n  // 4.1.3.  Serializing an Item\n  //\n  // Given an Item as bare_item and Parameters as item_parameters, return\n  // an ASCII string suitable for use in a HTTP field value.\n  //\n  // 1.  Let output be an empty string.\n  //\n  // 2.  Append the result of running Serializing a Bare Item\n  //     Section 4.1.3.1 with bare_item to output.\n  //\n  // 3.  Append the result of running Serializing Parameters\n  //     Section 4.1.1.2 with item_parameters to output.\n  //\n  // 4.  Return output.\n  function serializeItem(value) {\n    if (value instanceof SfItem) {\n      return \"\" + serializeBareItem(value.value) + serializeParams(value.params);\n    } else {\n      return serializeBareItem(value);\n    }\n  }\n\n  // 4.1.1.1.  Serializing an Inner List\n  //\n  // Given an array of (member_value, parameters) tuples as inner_list,\n  // and parameters as list_parameters, return an ASCII string suitable\n  // for use in a HTTP field value.\n  //\n  // 1.  Let output be the string \"(\".\n  //\n  // 2.  For each (member_value, parameters) of inner_list:\n  //\n  //     1.  Append the result of running Serializing an Item\n  //         (Section 4.1.3) with (member_value, parameters) to output.\n  //\n  //     2.  If more values remain in inner_list, append a single SP to\n  //         output.\n  //\n  // 3.  Append \")\" to output.\n  //\n  // 4.  Append the result of running Serializing Parameters\n  //     (Section 4.1.1.2) with list_parameters to output.\n  //\n  // 5.  Return output.\n  function serializeInnerList(value) {\n    return \"(\" + value.value.map(serializeItem).join(' ') + \")\" + serializeParams(value.params);\n  }\n\n  // 4.1.2.  Serializing a Dictionary\n  //\n  // Given an ordered Dictionary as input_dictionary (each member having a\n  // member_name and a tuple value of (member_value, parameters)), return\n  // an ASCII string suitable for use in a HTTP field value.\n  //\n  // 1.  Let output be an empty string.\n  //\n  // 2.  For each member_name with a value of (member_value, parameters)\n  //     in input_dictionary:\n  //\n  //     1.  Append the result of running Serializing a Key\n  //         (Section 4.1.1.3) with member's member_name to output.\n  //\n  //     2.  If member_value is Boolean true:\n  //\n  //         1.  Append the result of running Serializing Parameters\n  //             (Section 4.1.1.2) with parameters to output.\n  //\n  //     3.  Otherwise:\n  //\n  //         1.  Append \"=\" to output.\n  //\n  //         2.  If member_value is an array, append the result of running\n  //             Serializing an Inner List (Section 4.1.1.1) with\n  //             (member_value, parameters) to output.\n  //\n  //         3.  Otherwise, append the result of running Serializing an\n  //             Item (Section 4.1.3) with (member_value, parameters) to\n  //             output.\n  //\n  //     4.  If more members remain in input_dictionary:\n  //\n  //         1.  Append \",\" to output.\n  //\n  //         2.  Append a single SP to output.\n  //\n  // 3.  Return output.\n  function serializeDict(dict, options) {\n    if (options === void 0) {\n      options = {\n        whitespace: true\n      };\n    }\n    if (typeof dict !== 'object') {\n      throw serializeError(dict, DICT);\n    }\n    var entries = dict instanceof Map ? dict.entries() : Object.entries(dict);\n    var optionalWhiteSpace = (options === null || options === void 0 ? void 0 : options.whitespace) ? ' ' : '';\n    return Array.from(entries).map(function (_ref) {\n      var key = _ref[0],\n        item = _ref[1];\n      if (item instanceof SfItem === false) {\n        item = new SfItem(item);\n      }\n      var output = serializeKey(key);\n      if (item.value === true) {\n        output += serializeParams(item.params);\n      } else {\n        output += '=';\n        if (Array.isArray(item.value)) {\n          output += serializeInnerList(item);\n        } else {\n          output += serializeItem(item);\n        }\n      }\n      return output;\n    }).join(\",\" + optionalWhiteSpace);\n  }\n\n  /**\n   * Encode an object into a structured field dictionary\n   *\n   * @param value - The structured field dictionary to encode\n   * @param options - Encoding options\n   *\n   * @returns The structured field string\n   *\n   * @group Structured Field\n   *\n   * @beta\n   */\n  function encodeSfDict(value, options) {\n    return serializeDict(value, options);\n  }\n\n  /**\n   * Checks if the given key is a token field.\n   *\n   * @param key - The key to check.\n   *\n   * @returns `true` if the key is a token field.\n   *\n   * @internal\n   */\n  function isTokenField(key) {\n    return key === 'ot' || key === 'sf' || key === 'st';\n  }\n\n  /**\n   * Checks if the given value is valid\n   *\n   * @param value - The value to check.\n   *\n   * @returns `true` if the key is a value is valid.\n   *\n   * @internal\n   */\n  function isValid(value) {\n    if (typeof value === 'number') {\n      return isFiniteNumber(value);\n    }\n    return value != null && value !== '' && value !== false;\n  }\n\n  /**\n   * Constructs a relative path from a URL.\n   *\n   * @param url - The destination URL\n   * @param base - The base URL\n   * @returns The relative path\n   *\n   * @group Utils\n   *\n   * @beta\n   */\n  function urlToRelativePath(url, base) {\n    var to = new URL(url);\n    var from = new URL(base);\n    if (to.origin !== from.origin) {\n      return url;\n    }\n    var toPath = to.pathname.split('/').slice(1);\n    var fromPath = from.pathname.split('/').slice(1, -1);\n    // remove common parents\n    while (toPath[0] === fromPath[0]) {\n      toPath.shift();\n      fromPath.shift();\n    }\n    // add back paths\n    while (fromPath.length) {\n      fromPath.shift();\n      toPath.unshift('..');\n    }\n    return toPath.join('/');\n  }\n\n  var toRounded = function toRounded(value) {\n    return Math.round(value);\n  };\n  var toUrlSafe = function toUrlSafe(value, options) {\n    if (options === null || options === void 0 ? void 0 : options.baseUrl) {\n      value = urlToRelativePath(value, options.baseUrl);\n    }\n    return encodeURIComponent(value);\n  };\n  var toHundred = function toHundred(value) {\n    return toRounded(value / 100) * 100;\n  };\n  /**\n   * The default formatters for CMCD values.\n   *\n   * @group CMCD\n   *\n   * @beta\n   */\n  var CmcdFormatters = {\n    /**\n     * Bitrate (kbps) rounded integer\n     */\n    br: toRounded,\n    /**\n     * Duration (milliseconds) rounded integer\n     */\n    d: toRounded,\n    /**\n     * Buffer Length (milliseconds) rounded nearest 100ms\n     */\n    bl: toHundred,\n    /**\n     * Deadline (milliseconds) rounded nearest 100ms\n     */\n    dl: toHundred,\n    /**\n     * Measured Throughput (kbps) rounded nearest 100kbps\n     */\n    mtp: toHundred,\n    /**\n     * Next Object Request URL encoded\n     */\n    nor: toUrlSafe,\n    /**\n     * Requested maximum throughput (kbps) rounded nearest 100kbps\n     */\n    rtp: toHundred,\n    /**\n     * Top Bitrate (kbps) rounded integer\n     */\n    tb: toRounded\n  };\n\n  /**\n   * Internal CMCD processing function.\n   *\n   * @param obj - The CMCD object to process.\n   * @param map - The mapping function to use.\n   * @param options - Options for encoding.\n   *\n   * @internal\n   *\n   * @group CMCD\n   */\n  function processCmcd(obj, options) {\n    var results = {};\n    if (obj == null || typeof obj !== 'object') {\n      return results;\n    }\n    var keys = Object.keys(obj).sort();\n    var formatters = _extends({}, CmcdFormatters, options === null || options === void 0 ? void 0 : options.formatters);\n    var filter = options === null || options === void 0 ? void 0 : options.filter;\n    keys.forEach(function (key) {\n      if (filter === null || filter === void 0 ? void 0 : filter(key)) {\n        return;\n      }\n      var value = obj[key];\n      var formatter = formatters[key];\n      if (formatter) {\n        value = formatter(value, options);\n      }\n      // Version should only be reported if not equal to 1.\n      if (key === 'v' && value === 1) {\n        return;\n      }\n      // Playback rate should only be sent if not equal to 1.\n      if (key == 'pr' && value === 1) {\n        return;\n      }\n      // ignore invalid values\n      if (!isValid(value)) {\n        return;\n      }\n      if (isTokenField(key) && typeof value === 'string') {\n        value = new SfToken(value);\n      }\n      results[key] = value;\n    });\n    return results;\n  }\n\n  /**\n   * Encode a CMCD object to a string.\n   *\n   * @param cmcd - The CMCD object to encode.\n   * @param options - Options for encoding.\n   *\n   * @returns The encoded CMCD string.\n   *\n   * @group CMCD\n   *\n   * @beta\n   */\n  function encodeCmcd(cmcd, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (!cmcd) {\n      return '';\n    }\n    return encodeSfDict(processCmcd(cmcd, options), _extends({\n      whitespace: false\n    }, options));\n  }\n\n  /**\n   * Convert a CMCD data object to request headers\n   *\n   * @param cmcd - The CMCD data object to convert.\n   * @param options - Options for encoding the CMCD object.\n   *\n   * @returns The CMCD header shards.\n   *\n   * @group CMCD\n   *\n   * @beta\n   */\n  function toCmcdHeaders(cmcd, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var result = {};\n    if (!cmcd) {\n      return result;\n    }\n    var entries = Object.entries(cmcd);\n    var headerMap = Object.entries(CmcdHeaderMap).concat(Object.entries((options === null || options === void 0 ? void 0 : options.customHeaderMap) || {}));\n    var shards = entries.reduce(function (acc, entry) {\n      var _a, _b;\n      var key = entry[0],\n        value = entry[1];\n      var field = ((_a = headerMap.find(function (entry) {\n        return entry[1].includes(key);\n      })) === null || _a === void 0 ? void 0 : _a[0]) || CmcdHeaderField.REQUEST;\n      (_b = acc[field]) !== null && _b !== void 0 ? _b : acc[field] = {};\n      acc[field][key] = value;\n      return acc;\n    }, {});\n    return Object.entries(shards).reduce(function (acc, _ref) {\n      var field = _ref[0],\n        value = _ref[1];\n      acc[field] = encodeCmcd(value, options);\n      return acc;\n    }, result);\n  }\n\n  /**\n   * Append CMCD query args to a header object.\n   *\n   * @param headers - The headers to append to.\n   * @param cmcd - The CMCD object to append.\n   * @param options - Encode options.\n   *\n   * @returns The headers with the CMCD header shards appended.\n   *\n   * @group CMCD\n   *\n   * @beta\n   */\n  function appendCmcdHeaders(headers, cmcd, options) {\n    return _extends(headers, toCmcdHeaders(cmcd, options));\n  }\n\n  /**\n   * CMCD parameter name.\n   *\n   * @group CMCD\n   *\n   * @beta\n   */\n  var CMCD_PARAM = 'CMCD';\n\n  /**\n   * Convert a CMCD data object to a query arg.\n   *\n   * @param cmcd - The CMCD object to convert.\n   * @param options - Options for encoding the CMCD object.\n   *\n   * @returns The CMCD query arg.\n   *\n   * @group CMCD\n   *\n   * @beta\n   */\n  function toCmcdQuery(cmcd, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (!cmcd) {\n      return '';\n    }\n    var params = encodeCmcd(cmcd, options);\n    return CMCD_PARAM + \"=\" + encodeURIComponent(params);\n  }\n\n  var REGEX = /CMCD=[^&#]+/;\n  /**\n   * Append CMCD query args to a URL.\n   *\n   * @param url - The URL to append to.\n   * @param cmcd - The CMCD object to append.\n   * @param options - Options for encoding the CMCD object.\n   *\n   * @returns The URL with the CMCD query args appended.\n   *\n   * @group CMCD\n   *\n   * @beta\n   */\n  function appendCmcdQuery(url, cmcd, options) {\n    // TODO: Replace with URLSearchParams once we drop Safari < 10.1 & Chrome < 49 support.\n    // https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n    var query = toCmcdQuery(cmcd, options);\n    if (!query) {\n      return url;\n    }\n    if (REGEX.test(url)) {\n      return url.replace(REGEX, query);\n    }\n    var separator = url.includes('?') ? '&' : '?';\n    return \"\" + url + separator + query;\n  }\n\n  /**\n   * Controller to deal with Common Media Client Data (CMCD)\n   * @see https://cdn.cta.tech/cta/media/media/resources/standards/pdfs/cta-5004-final.pdf\n   */\n  var CMCDController = /*#__PURE__*/function () {\n    function CMCDController(hls) {\n      var _this = this;\n      this.hls = void 0;\n      this.config = void 0;\n      this.media = void 0;\n      this.sid = void 0;\n      this.cid = void 0;\n      this.useHeaders = false;\n      this.includeKeys = void 0;\n      this.initialized = false;\n      this.starved = false;\n      this.buffering = true;\n      this.audioBuffer = void 0;\n      this.videoBuffer = void 0;\n      this.onWaiting = function () {\n        if (_this.initialized) {\n          _this.starved = true;\n        }\n        _this.buffering = true;\n      };\n      this.onPlaying = function () {\n        if (!_this.initialized) {\n          _this.initialized = true;\n        }\n        _this.buffering = false;\n      };\n      /**\n       * Apply CMCD data to a manifest request.\n       */\n      this.applyPlaylistData = function (context) {\n        try {\n          _this.apply(context, {\n            ot: CmcdObjectType.MANIFEST,\n            su: !_this.initialized\n          });\n        } catch (error) {\n          _this.hls.logger.warn('Could not generate manifest CMCD data.', error);\n        }\n      };\n      /**\n       * Apply CMCD data to a segment request\n       */\n      this.applyFragmentData = function (context) {\n        try {\n          var frag = context.frag,\n            part = context.part;\n          var level = _this.hls.levels[frag.level];\n          var ot = _this.getObjectType(frag);\n          var data = {\n            d: (part || frag).duration * 1000,\n            ot: ot\n          };\n          if (ot === CmcdObjectType.VIDEO || ot === CmcdObjectType.AUDIO || ot == CmcdObjectType.MUXED) {\n            data.br = level.bitrate / 1000;\n            data.tb = _this.getTopBandwidth(ot) / 1000;\n            data.bl = _this.getBufferLength(ot);\n          }\n          var next = part ? _this.getNextPart(part) : _this.getNextFrag(frag);\n          if (next != null && next.url && next.url !== frag.url) {\n            data.nor = next.url;\n          }\n          _this.apply(context, data);\n        } catch (error) {\n          _this.hls.logger.warn('Could not generate segment CMCD data.', error);\n        }\n      };\n      this.hls = hls;\n      var config = this.config = hls.config;\n      var cmcd = config.cmcd;\n      if (cmcd != null) {\n        config.pLoader = this.createPlaylistLoader();\n        config.fLoader = this.createFragmentLoader();\n        this.sid = cmcd.sessionId || hls.sessionId;\n        this.cid = cmcd.contentId;\n        this.useHeaders = cmcd.useHeaders === true;\n        this.includeKeys = cmcd.includeKeys;\n        this.registerListeners();\n      }\n    }\n    var _proto = CMCDController.prototype;\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.on(Events.MEDIA_DETACHED, this.onMediaDetached, this);\n      hls.on(Events.BUFFER_CREATED, this.onBufferCreated, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.off(Events.MEDIA_DETACHED, this.onMediaDetached, this);\n      hls.off(Events.BUFFER_CREATED, this.onBufferCreated, this);\n    };\n    _proto.destroy = function destroy() {\n      this.unregisterListeners();\n      this.onMediaDetached();\n\n      // @ts-ignore\n      this.hls = this.config = this.audioBuffer = this.videoBuffer = null;\n      // @ts-ignore\n      this.onWaiting = this.onPlaying = this.media = null;\n    };\n    _proto.onMediaAttached = function onMediaAttached(event, data) {\n      this.media = data.media;\n      this.media.addEventListener('waiting', this.onWaiting);\n      this.media.addEventListener('playing', this.onPlaying);\n    };\n    _proto.onMediaDetached = function onMediaDetached() {\n      if (!this.media) {\n        return;\n      }\n      this.media.removeEventListener('waiting', this.onWaiting);\n      this.media.removeEventListener('playing', this.onPlaying);\n\n      // @ts-ignore\n      this.media = null;\n    };\n    _proto.onBufferCreated = function onBufferCreated(event, data) {\n      var _data$tracks$audio, _data$tracks$video;\n      this.audioBuffer = (_data$tracks$audio = data.tracks.audio) == null ? void 0 : _data$tracks$audio.buffer;\n      this.videoBuffer = (_data$tracks$video = data.tracks.video) == null ? void 0 : _data$tracks$video.buffer;\n    };\n    /**\n     * Create baseline CMCD data\n     */\n    _proto.createData = function createData() {\n      var _this$media;\n      return {\n        v: 1,\n        sf: CmcdStreamingFormat.HLS,\n        sid: this.sid,\n        cid: this.cid,\n        pr: (_this$media = this.media) == null ? void 0 : _this$media.playbackRate,\n        mtp: this.hls.bandwidthEstimate / 1000\n      };\n    }\n\n    /**\n     * Apply CMCD data to a request.\n     */;\n    _proto.apply = function apply(context, data) {\n      if (data === void 0) {\n        data = {};\n      }\n      // apply baseline data\n      _extends(data, this.createData());\n      var isVideo = data.ot === CmcdObjectType.INIT || data.ot === CmcdObjectType.VIDEO || data.ot === CmcdObjectType.MUXED;\n      if (this.starved && isVideo) {\n        data.bs = true;\n        data.su = true;\n        this.starved = false;\n      }\n      if (data.su == null) {\n        data.su = this.buffering;\n      }\n\n      // TODO: Implement rtp, nrr, dl\n\n      var includeKeys = this.includeKeys;\n      if (includeKeys) {\n        data = Object.keys(data).reduce(function (acc, key) {\n          includeKeys.includes(key) && (acc[key] = data[key]);\n          return acc;\n        }, {});\n      }\n      var options = {\n        baseUrl: context.url\n      };\n      if (this.useHeaders) {\n        if (!context.headers) {\n          context.headers = {};\n        }\n        appendCmcdHeaders(context.headers, data, options);\n      } else {\n        context.url = appendCmcdQuery(context.url, data, options);\n      }\n    };\n    _proto.getNextFrag = function getNextFrag(fragment) {\n      var _this$hls$levels$frag;\n      var levelDetails = (_this$hls$levels$frag = this.hls.levels[fragment.level]) == null ? void 0 : _this$hls$levels$frag.details;\n      if (levelDetails) {\n        var index = fragment.sn - levelDetails.startSN;\n        return levelDetails.fragments[index + 1];\n      }\n      return undefined;\n    };\n    _proto.getNextPart = function getNextPart(part) {\n      var _this$hls$levels$frag2, _this$hls$levels$frag3;\n      var index = part.index,\n        fragment = part.fragment;\n      var partList = (_this$hls$levels$frag2 = this.hls.levels[fragment.level]) == null ? void 0 : (_this$hls$levels$frag3 = _this$hls$levels$frag2.details) == null ? void 0 : _this$hls$levels$frag3.partList;\n      if (partList) {\n        var sn = fragment.sn;\n        for (var i = partList.length - 1; i >= 0; i--) {\n          var p = partList[i];\n          if (p.index === index && p.fragment.sn === sn) {\n            return partList[i + 1];\n          }\n        }\n      }\n      return undefined;\n    }\n\n    /**\n     * The CMCD object type.\n     */;\n    _proto.getObjectType = function getObjectType(fragment) {\n      var type = fragment.type;\n      if (type === 'subtitle') {\n        return CmcdObjectType.TIMED_TEXT;\n      }\n      if (fragment.sn === 'initSegment') {\n        return CmcdObjectType.INIT;\n      }\n      if (type === 'audio') {\n        return CmcdObjectType.AUDIO;\n      }\n      if (type === 'main') {\n        if (!this.hls.audioTracks.length) {\n          return CmcdObjectType.MUXED;\n        }\n        return CmcdObjectType.VIDEO;\n      }\n      return undefined;\n    }\n\n    /**\n     * Get the highest bitrate.\n     */;\n    _proto.getTopBandwidth = function getTopBandwidth(type) {\n      var bitrate = 0;\n      var levels;\n      var hls = this.hls;\n      if (type === CmcdObjectType.AUDIO) {\n        levels = hls.audioTracks;\n      } else {\n        var max = hls.maxAutoLevel;\n        var len = max > -1 ? max + 1 : hls.levels.length;\n        levels = hls.levels.slice(0, len);\n      }\n      levels.forEach(function (level) {\n        if (level.bitrate > bitrate) {\n          bitrate = level.bitrate;\n        }\n      });\n      return bitrate > 0 ? bitrate : NaN;\n    }\n\n    /**\n     * Get the buffer length for a media type in milliseconds\n     */;\n    _proto.getBufferLength = function getBufferLength(type) {\n      var media = this.media;\n      var buffer = type === CmcdObjectType.AUDIO ? this.audioBuffer : this.videoBuffer;\n      if (!buffer || !media) {\n        return NaN;\n      }\n      var info = BufferHelper.bufferInfo(buffer, media.currentTime, this.config.maxBufferHole);\n      return info.len * 1000;\n    }\n\n    /**\n     * Create a playlist loader\n     */;\n    _proto.createPlaylistLoader = function createPlaylistLoader() {\n      var pLoader = this.config.pLoader;\n      var apply = this.applyPlaylistData;\n      var Ctor = pLoader || this.config.loader;\n      return /*#__PURE__*/function () {\n        function CmcdPlaylistLoader(config) {\n          this.loader = void 0;\n          this.loader = new Ctor(config);\n        }\n        var _proto2 = CmcdPlaylistLoader.prototype;\n        _proto2.destroy = function destroy() {\n          this.loader.destroy();\n        };\n        _proto2.abort = function abort() {\n          this.loader.abort();\n        };\n        _proto2.load = function load(context, config, callbacks) {\n          apply(context);\n          this.loader.load(context, config, callbacks);\n        };\n        return _createClass(CmcdPlaylistLoader, [{\n          key: \"stats\",\n          get: function get() {\n            return this.loader.stats;\n          }\n        }, {\n          key: \"context\",\n          get: function get() {\n            return this.loader.context;\n          }\n        }]);\n      }();\n    }\n\n    /**\n     * Create a playlist loader\n     */;\n    _proto.createFragmentLoader = function createFragmentLoader() {\n      var fLoader = this.config.fLoader;\n      var apply = this.applyFragmentData;\n      var Ctor = fLoader || this.config.loader;\n      return /*#__PURE__*/function () {\n        function CmcdFragmentLoader(config) {\n          this.loader = void 0;\n          this.loader = new Ctor(config);\n        }\n        var _proto3 = CmcdFragmentLoader.prototype;\n        _proto3.destroy = function destroy() {\n          this.loader.destroy();\n        };\n        _proto3.abort = function abort() {\n          this.loader.abort();\n        };\n        _proto3.load = function load(context, config, callbacks) {\n          apply(context);\n          this.loader.load(context, config, callbacks);\n        };\n        return _createClass(CmcdFragmentLoader, [{\n          key: \"stats\",\n          get: function get() {\n            return this.loader.stats;\n          }\n        }, {\n          key: \"context\",\n          get: function get() {\n            return this.loader.context;\n          }\n        }]);\n      }();\n    };\n    return CMCDController;\n  }();\n\n  var PATHWAY_PENALTY_DURATION_MS = 300000;\n  var ContentSteeringController = /*#__PURE__*/function (_Logger) {\n    function ContentSteeringController(hls) {\n      var _this;\n      _this = _Logger.call(this, 'content-steering', hls.logger) || this;\n      _this.hls = void 0;\n      _this.loader = null;\n      _this.uri = null;\n      _this.pathwayId = '.';\n      _this._pathwayPriority = null;\n      _this.timeToLoad = 300;\n      _this.reloadTimer = -1;\n      _this.updated = 0;\n      _this.started = false;\n      _this.enabled = true;\n      _this.levels = null;\n      _this.audioTracks = null;\n      _this.subtitleTracks = null;\n      _this.penalizedPathways = {};\n      _this.hls = hls;\n      _this.registerListeners();\n      return _this;\n    }\n    _inheritsLoose(ContentSteeringController, _Logger);\n    var _proto = ContentSteeringController.prototype;\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n      hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.on(Events.ERROR, this.onError, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      if (!hls) {\n        return;\n      }\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n      hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.off(Events.ERROR, this.onError, this);\n    };\n    _proto.pathways = function pathways() {\n      return (this.levels || []).reduce(function (pathways, level) {\n        if (pathways.indexOf(level.pathwayId) === -1) {\n          pathways.push(level.pathwayId);\n        }\n        return pathways;\n      }, []);\n    };\n    _proto.startLoad = function startLoad() {\n      this.started = true;\n      this.clearTimeout();\n      if (this.enabled && this.uri) {\n        if (this.updated) {\n          var ttl = this.timeToLoad * 1000 - (performance.now() - this.updated);\n          if (ttl > 0) {\n            this.scheduleRefresh(this.uri, ttl);\n            return;\n          }\n        }\n        this.loadSteeringManifest(this.uri);\n      }\n    };\n    _proto.stopLoad = function stopLoad() {\n      this.started = false;\n      if (this.loader) {\n        this.loader.destroy();\n        this.loader = null;\n      }\n      this.clearTimeout();\n    };\n    _proto.clearTimeout = function clearTimeout() {\n      if (this.reloadTimer !== -1) {\n        self.clearTimeout(this.reloadTimer);\n        this.reloadTimer = -1;\n      }\n    };\n    _proto.destroy = function destroy() {\n      this.unregisterListeners();\n      this.stopLoad();\n      // @ts-ignore\n      this.hls = null;\n      this.levels = this.audioTracks = this.subtitleTracks = null;\n    };\n    _proto.removeLevel = function removeLevel(levelToRemove) {\n      var levels = this.levels;\n      if (levels) {\n        this.levels = levels.filter(function (level) {\n          return level !== levelToRemove;\n        });\n      }\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      this.stopLoad();\n      this.enabled = true;\n      this.timeToLoad = 300;\n      this.updated = 0;\n      this.uri = null;\n      this.pathwayId = '.';\n      this.levels = this.audioTracks = this.subtitleTracks = null;\n    };\n    _proto.onManifestLoaded = function onManifestLoaded(event, data) {\n      var contentSteering = data.contentSteering;\n      if (contentSteering === null) {\n        return;\n      }\n      this.pathwayId = contentSteering.pathwayId;\n      this.uri = contentSteering.uri;\n      if (this.started) {\n        this.startLoad();\n      }\n    };\n    _proto.onManifestParsed = function onManifestParsed(event, data) {\n      this.audioTracks = data.audioTracks;\n      this.subtitleTracks = data.subtitleTracks;\n    };\n    _proto.onError = function onError(event, data) {\n      var errorAction = data.errorAction;\n      if ((errorAction == null ? void 0 : errorAction.action) === NetworkErrorAction.SendAlternateToPenaltyBox && errorAction.flags === ErrorActionFlags.MoveAllAlternatesMatchingHost) {\n        var levels = this.levels;\n        var pathwayPriority = this._pathwayPriority;\n        var errorPathway = this.pathwayId;\n        if (data.context) {\n          var _data$context = data.context,\n            groupId = _data$context.groupId,\n            pathwayId = _data$context.pathwayId,\n            type = _data$context.type;\n          if (groupId && levels) {\n            errorPathway = this.getPathwayForGroupId(groupId, type, errorPathway);\n          } else if (pathwayId) {\n            errorPathway = pathwayId;\n          }\n        }\n        if (!(errorPathway in this.penalizedPathways)) {\n          this.penalizedPathways[errorPathway] = performance.now();\n        }\n        if (!pathwayPriority && levels) {\n          // If PATHWAY-PRIORITY was not provided, list pathways for error handling\n          pathwayPriority = this.pathways();\n        }\n        if (pathwayPriority && pathwayPriority.length > 1) {\n          this.updatePathwayPriority(pathwayPriority);\n          errorAction.resolved = this.pathwayId !== errorPathway;\n        }\n        if (!errorAction.resolved) {\n          this.warn(\"Could not resolve \" + data.details + \" (\\\"\" + data.error.message + \"\\\") with content-steering for Pathway: \" + errorPathway + \" levels: \" + (levels ? levels.length : levels) + \" priorities: \" + stringify(pathwayPriority) + \" penalized: \" + stringify(this.penalizedPathways));\n        }\n      }\n    };\n    _proto.filterParsedLevels = function filterParsedLevels(levels) {\n      // Filter levels to only include those that are in the initial pathway\n      this.levels = levels;\n      var pathwayLevels = this.getLevelsForPathway(this.pathwayId);\n      if (pathwayLevels.length === 0) {\n        var pathwayId = levels[0].pathwayId;\n        this.log(\"No levels found in Pathway \" + this.pathwayId + \". Setting initial Pathway to \\\"\" + pathwayId + \"\\\"\");\n        pathwayLevels = this.getLevelsForPathway(pathwayId);\n        this.pathwayId = pathwayId;\n      }\n      if (pathwayLevels.length !== levels.length) {\n        this.log(\"Found \" + pathwayLevels.length + \"/\" + levels.length + \" levels in Pathway \\\"\" + this.pathwayId + \"\\\"\");\n      }\n      return pathwayLevels;\n    };\n    _proto.getLevelsForPathway = function getLevelsForPathway(pathwayId) {\n      if (this.levels === null) {\n        return [];\n      }\n      return this.levels.filter(function (level) {\n        return pathwayId === level.pathwayId;\n      });\n    };\n    _proto.updatePathwayPriority = function updatePathwayPriority(pathwayPriority) {\n      this._pathwayPriority = pathwayPriority;\n      var levels;\n\n      // Evaluate if we should remove the pathway from the penalized list\n      var penalizedPathways = this.penalizedPathways;\n      var now = performance.now();\n      Object.keys(penalizedPathways).forEach(function (pathwayId) {\n        if (now - penalizedPathways[pathwayId] > PATHWAY_PENALTY_DURATION_MS) {\n          delete penalizedPathways[pathwayId];\n        }\n      });\n      for (var i = 0; i < pathwayPriority.length; i++) {\n        var pathwayId = pathwayPriority[i];\n        if (pathwayId in penalizedPathways) {\n          continue;\n        }\n        if (pathwayId === this.pathwayId) {\n          return;\n        }\n        var selectedIndex = this.hls.nextLoadLevel;\n        var selectedLevel = this.hls.levels[selectedIndex];\n        levels = this.getLevelsForPathway(pathwayId);\n        if (levels.length > 0) {\n          this.log(\"Setting Pathway to \\\"\" + pathwayId + \"\\\"\");\n          this.pathwayId = pathwayId;\n          reassignFragmentLevelIndexes(levels);\n          this.hls.trigger(Events.LEVELS_UPDATED, {\n            levels: levels\n          });\n          // Set LevelController's level to trigger LEVEL_SWITCHING which loads playlist if needed\n          var levelAfterChange = this.hls.levels[selectedIndex];\n          if (selectedLevel && levelAfterChange && this.levels) {\n            if (levelAfterChange.attrs['STABLE-VARIANT-ID'] !== selectedLevel.attrs['STABLE-VARIANT-ID'] && levelAfterChange.bitrate !== selectedLevel.bitrate) {\n              this.log(\"Unstable Pathways change from bitrate \" + selectedLevel.bitrate + \" to \" + levelAfterChange.bitrate);\n            }\n            this.hls.nextLoadLevel = selectedIndex;\n          }\n          break;\n        }\n      }\n    };\n    _proto.getPathwayForGroupId = function getPathwayForGroupId(groupId, type, defaultPathway) {\n      var levels = this.getLevelsForPathway(defaultPathway).concat(this.levels || []);\n      for (var i = 0; i < levels.length; i++) {\n        if (type === PlaylistContextType.AUDIO_TRACK && levels[i].hasAudioGroup(groupId) || type === PlaylistContextType.SUBTITLE_TRACK && levels[i].hasSubtitleGroup(groupId)) {\n          return levels[i].pathwayId;\n        }\n      }\n      return defaultPathway;\n    };\n    _proto.clonePathways = function clonePathways(pathwayClones) {\n      var _this2 = this;\n      var levels = this.levels;\n      if (!levels) {\n        return;\n      }\n      var audioGroupCloneMap = {};\n      var subtitleGroupCloneMap = {};\n      pathwayClones.forEach(function (pathwayClone) {\n        var cloneId = pathwayClone.ID,\n          baseId = pathwayClone['BASE-ID'],\n          uriReplacement = pathwayClone['URI-REPLACEMENT'];\n        if (levels.some(function (level) {\n          return level.pathwayId === cloneId;\n        })) {\n          return;\n        }\n        var clonedVariants = _this2.getLevelsForPathway(baseId).map(function (baseLevel) {\n          var attributes = new AttrList(baseLevel.attrs);\n          attributes['PATHWAY-ID'] = cloneId;\n          var clonedAudioGroupId = attributes.AUDIO && attributes.AUDIO + \"_clone_\" + cloneId;\n          var clonedSubtitleGroupId = attributes.SUBTITLES && attributes.SUBTITLES + \"_clone_\" + cloneId;\n          if (clonedAudioGroupId) {\n            audioGroupCloneMap[attributes.AUDIO] = clonedAudioGroupId;\n            attributes.AUDIO = clonedAudioGroupId;\n          }\n          if (clonedSubtitleGroupId) {\n            subtitleGroupCloneMap[attributes.SUBTITLES] = clonedSubtitleGroupId;\n            attributes.SUBTITLES = clonedSubtitleGroupId;\n          }\n          var url = performUriReplacement(baseLevel.uri, attributes['STABLE-VARIANT-ID'], 'PER-VARIANT-URIS', uriReplacement);\n          var clonedLevel = new Level({\n            attrs: attributes,\n            audioCodec: baseLevel.audioCodec,\n            bitrate: baseLevel.bitrate,\n            height: baseLevel.height,\n            name: baseLevel.name,\n            url: url,\n            videoCodec: baseLevel.videoCodec,\n            width: baseLevel.width\n          });\n          if (baseLevel.audioGroups) {\n            for (var i = 1; i < baseLevel.audioGroups.length; i++) {\n              clonedLevel.addGroupId('audio', baseLevel.audioGroups[i] + \"_clone_\" + cloneId);\n            }\n          }\n          if (baseLevel.subtitleGroups) {\n            for (var _i = 1; _i < baseLevel.subtitleGroups.length; _i++) {\n              clonedLevel.addGroupId('text', baseLevel.subtitleGroups[_i] + \"_clone_\" + cloneId);\n            }\n          }\n          return clonedLevel;\n        });\n        levels.push.apply(levels, clonedVariants);\n        cloneRenditionGroups(_this2.audioTracks, audioGroupCloneMap, uriReplacement, cloneId);\n        cloneRenditionGroups(_this2.subtitleTracks, subtitleGroupCloneMap, uriReplacement, cloneId);\n      });\n    };\n    _proto.loadSteeringManifest = function loadSteeringManifest(uri) {\n      var _this3 = this;\n      var config = this.hls.config;\n      var Loader = config.loader;\n      if (this.loader) {\n        this.loader.destroy();\n      }\n      this.loader = new Loader(config);\n      var url;\n      try {\n        url = new self.URL(uri);\n      } catch (error) {\n        this.enabled = false;\n        this.log(\"Failed to parse Steering Manifest URI: \" + uri);\n        return;\n      }\n      if (url.protocol !== 'data:') {\n        var throughput = (this.hls.bandwidthEstimate || config.abrEwmaDefaultEstimate) | 0;\n        url.searchParams.set('_HLS_pathway', this.pathwayId);\n        url.searchParams.set('_HLS_throughput', '' + throughput);\n      }\n      var context = {\n        responseType: 'json',\n        url: url.href\n      };\n      var loadPolicy = config.steeringManifestLoadPolicy.default;\n      var legacyRetryCompatibility = loadPolicy.errorRetry || loadPolicy.timeoutRetry || {};\n      var loaderConfig = {\n        loadPolicy: loadPolicy,\n        timeout: loadPolicy.maxLoadTimeMs,\n        maxRetry: legacyRetryCompatibility.maxNumRetry || 0,\n        retryDelay: legacyRetryCompatibility.retryDelayMs || 0,\n        maxRetryDelay: legacyRetryCompatibility.maxRetryDelayMs || 0\n      };\n      var callbacks = {\n        onSuccess: function onSuccess(response, stats, context, networkDetails) {\n          _this3.log(\"Loaded steering manifest: \\\"\" + url + \"\\\"\");\n          var steeringData = response.data;\n          if ((steeringData == null ? void 0 : steeringData.VERSION) !== 1) {\n            _this3.log(\"Steering VERSION \" + steeringData.VERSION + \" not supported!\");\n            return;\n          }\n          _this3.updated = performance.now();\n          _this3.timeToLoad = steeringData.TTL;\n          var reloadUri = steeringData['RELOAD-URI'],\n            pathwayClones = steeringData['PATHWAY-CLONES'],\n            pathwayPriority = steeringData['PATHWAY-PRIORITY'];\n          if (reloadUri) {\n            try {\n              _this3.uri = new self.URL(reloadUri, url).href;\n            } catch (error) {\n              _this3.enabled = false;\n              _this3.log(\"Failed to parse Steering Manifest RELOAD-URI: \" + reloadUri);\n              return;\n            }\n          }\n          _this3.scheduleRefresh(_this3.uri || context.url);\n          if (pathwayClones) {\n            _this3.clonePathways(pathwayClones);\n          }\n          var loadedSteeringData = {\n            steeringManifest: steeringData,\n            url: url.toString()\n          };\n          _this3.hls.trigger(Events.STEERING_MANIFEST_LOADED, loadedSteeringData);\n          if (pathwayPriority) {\n            _this3.updatePathwayPriority(pathwayPriority);\n          }\n        },\n        onError: function onError(error, context, networkDetails, stats) {\n          _this3.log(\"Error loading steering manifest: \" + error.code + \" \" + error.text + \" (\" + context.url + \")\");\n          _this3.stopLoad();\n          if (error.code === 410) {\n            _this3.enabled = false;\n            _this3.log(\"Steering manifest \" + context.url + \" no longer available\");\n            return;\n          }\n          var ttl = _this3.timeToLoad * 1000;\n          if (error.code === 429) {\n            var loader = _this3.loader;\n            if (typeof (loader == null ? void 0 : loader.getResponseHeader) === 'function') {\n              var retryAfter = loader.getResponseHeader('Retry-After');\n              if (retryAfter) {\n                ttl = parseFloat(retryAfter) * 1000;\n              }\n            }\n            _this3.log(\"Steering manifest \" + context.url + \" rate limited\");\n            return;\n          }\n          _this3.scheduleRefresh(_this3.uri || context.url, ttl);\n        },\n        onTimeout: function onTimeout(stats, context, networkDetails) {\n          _this3.log(\"Timeout loading steering manifest (\" + context.url + \")\");\n          _this3.scheduleRefresh(_this3.uri || context.url);\n        }\n      };\n      this.log(\"Requesting steering manifest: \" + url);\n      this.loader.load(context, loaderConfig, callbacks);\n    };\n    _proto.scheduleRefresh = function scheduleRefresh(uri, ttlMs) {\n      var _this4 = this;\n      if (ttlMs === void 0) {\n        ttlMs = this.timeToLoad * 1000;\n      }\n      this.clearTimeout();\n      this.reloadTimer = self.setTimeout(function () {\n        var _this4$hls;\n        var media = (_this4$hls = _this4.hls) == null ? void 0 : _this4$hls.media;\n        if (media && !media.ended) {\n          _this4.loadSteeringManifest(uri);\n          return;\n        }\n        _this4.scheduleRefresh(uri, _this4.timeToLoad * 1000);\n      }, ttlMs);\n    };\n    return _createClass(ContentSteeringController, [{\n      key: \"pathwayPriority\",\n      get: function get() {\n        return this._pathwayPriority;\n      },\n      set: function set(pathwayPriority) {\n        this.updatePathwayPriority(pathwayPriority);\n      }\n    }]);\n  }(Logger);\n  function cloneRenditionGroups(tracks, groupCloneMap, uriReplacement, cloneId) {\n    if (!tracks) {\n      return;\n    }\n    Object.keys(groupCloneMap).forEach(function (audioGroupId) {\n      var clonedTracks = tracks.filter(function (track) {\n        return track.groupId === audioGroupId;\n      }).map(function (track) {\n        var clonedTrack = _extends({}, track);\n        clonedTrack.details = undefined;\n        clonedTrack.attrs = new AttrList(clonedTrack.attrs);\n        clonedTrack.url = clonedTrack.attrs.URI = performUriReplacement(track.url, track.attrs['STABLE-RENDITION-ID'], 'PER-RENDITION-URIS', uriReplacement);\n        clonedTrack.groupId = clonedTrack.attrs['GROUP-ID'] = groupCloneMap[audioGroupId];\n        clonedTrack.attrs['PATHWAY-ID'] = cloneId;\n        return clonedTrack;\n      });\n      tracks.push.apply(tracks, clonedTracks);\n    });\n  }\n  function performUriReplacement(uri, stableId, perOptionKey, uriReplacement) {\n    var host = uriReplacement.HOST,\n      params = uriReplacement.PARAMS,\n      perOptionUris = uriReplacement[perOptionKey];\n    var perVariantUri;\n    if (stableId) {\n      perVariantUri = perOptionUris == null ? void 0 : perOptionUris[stableId];\n      if (perVariantUri) {\n        uri = perVariantUri;\n      }\n    }\n    var url = new self.URL(uri);\n    if (host && !perVariantUri) {\n      url.host = host;\n    }\n    if (params) {\n      Object.keys(params).sort().forEach(function (key) {\n        if (key) {\n          url.searchParams.set(key, params[key]);\n        }\n      });\n    }\n    return url.href;\n  }\n\n  function addEventListener(el, type, listener) {\n    removeEventListener(el, type, listener);\n    el.addEventListener(type, listener);\n  }\n  function removeEventListener(el, type, listener) {\n    el.removeEventListener(type, listener);\n  }\n\n  /**\n   * Controller to deal with encrypted media extensions (EME)\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API\n   *\n   * @class\n   * @constructor\n   */\n  var EMEController = /*#__PURE__*/function (_Logger) {\n    function EMEController(hls) {\n      var _this;\n      _this = _Logger.call(this, 'eme', hls.logger) || this;\n      _this.hls = void 0;\n      _this.config = void 0;\n      _this.media = null;\n      _this.keyFormatPromise = null;\n      _this.keySystemAccessPromises = {};\n      _this._requestLicenseFailureCount = 0;\n      _this.mediaKeySessions = [];\n      _this.keyIdToKeySessionPromise = {};\n      _this.mediaKeys = null;\n      _this.setMediaKeysQueue = EMEController.CDMCleanupPromise ? [EMEController.CDMCleanupPromise] : [];\n      _this.onMediaEncrypted = function (event) {\n        var initDataType = event.initDataType,\n          initData = event.initData;\n        var logMessage = \"\\\"\" + event.type + \"\\\" event: init data type: \\\"\" + initDataType + \"\\\"\";\n        _this.debug(logMessage);\n\n        // Ignore event when initData is null\n        if (initData === null) {\n          return;\n        }\n        if (!_this.keyFormatPromise) {\n          var keySystems = Object.keys(_this.keySystemAccessPromises);\n          if (!keySystems.length) {\n            keySystems = getKeySystemsForConfig(_this.config);\n          }\n          var keyFormats = keySystems.map(keySystemDomainToKeySystemFormat).filter(function (k) {\n            return !!k;\n          });\n          _this.keyFormatPromise = _this.getKeyFormatPromise(keyFormats);\n        }\n        _this.keyFormatPromise.then(function (keySystemFormat) {\n          var keySystem = keySystemFormatToKeySystemDomain(keySystemFormat);\n          var keyId;\n          var keySystemDomain;\n          if (initDataType === 'sinf') {\n            if (keySystem !== KeySystems.FAIRPLAY) {\n              _this.warn(\"Ignoring unexpected \\\"\" + event.type + \"\\\" event with init data type: \\\"\" + initDataType + \"\\\" for selected key-system \" + keySystem);\n              return;\n            }\n            // Match sinf keyId to playlist skd://keyId=\n            var json = bin2str(new Uint8Array(initData));\n            try {\n              var sinf = base64Decode(JSON.parse(json).sinf);\n              var tenc = parseSinf(sinf);\n              if (!tenc) {\n                throw new Error(\"'schm' box missing or not cbcs/cenc with schi > tenc\");\n              }\n              keyId = new Uint8Array(tenc.subarray(8, 24));\n              keySystemDomain = KeySystems.FAIRPLAY;\n            } catch (error) {\n              _this.warn(logMessage + \" Failed to parse sinf: \" + error);\n              return;\n            }\n          } else {\n            if (keySystem !== KeySystems.WIDEVINE && keySystem !== KeySystems.PLAYREADY) {\n              _this.warn(\"Ignoring unexpected \\\"\" + event.type + \"\\\" event with init data type: \\\"\" + initDataType + \"\\\" for selected key-system \" + keySystem);\n              return;\n            }\n            // Support Widevine/PlayReady clear-lead key-session creation (otherwise depend on playlist keys)\n            var psshResults = parseMultiPssh(initData);\n            var psshInfos = psshResults.filter(function (pssh) {\n              return !!pssh.systemId && keySystemIdToKeySystemDomain(pssh.systemId) === keySystem;\n            });\n            if (psshInfos.length > 1) {\n              _this.warn(logMessage + \" Using first of \" + psshInfos.length + \" pssh found for selected key-system \" + keySystem);\n            }\n            var psshInfo = psshInfos[0];\n            if (!psshInfo) {\n              if (psshResults.length === 0 || psshResults.some(function (pssh) {\n                return !pssh.systemId;\n              })) {\n                _this.warn(logMessage + \" contains incomplete or invalid pssh data\");\n              } else {\n                _this.log(\"ignoring \" + logMessage + \" for \" + psshResults.map(function (pssh) {\n                  return keySystemIdToKeySystemDomain(pssh.systemId);\n                }).join(',') + \" pssh data in favor of playlist keys\");\n              }\n              return;\n            }\n            keySystemDomain = keySystemIdToKeySystemDomain(psshInfo.systemId);\n            if (psshInfo.version === 0 && psshInfo.data) {\n              if (keySystemDomain === KeySystems.WIDEVINE) {\n                var offset = psshInfo.data.length - 22;\n                keyId = new Uint8Array(psshInfo.data.subarray(offset, offset + 16));\n              } else if (keySystemDomain === KeySystems.PLAYREADY) {\n                keyId = parsePlayReadyWRM(psshInfo.data);\n              }\n            }\n          }\n          if (!keySystemDomain || !keyId) {\n            return;\n          }\n          var keyIdHex = Hex.hexDump(keyId);\n          var _this2 = _this,\n            keyIdToKeySessionPromise = _this2.keyIdToKeySessionPromise,\n            mediaKeySessions = _this2.mediaKeySessions;\n          var keySessionContextPromise = keyIdToKeySessionPromise[keyIdHex];\n          var _loop = function _loop() {\n              // Match playlist key\n              var keyContext = mediaKeySessions[i];\n              var decryptdata = keyContext.decryptdata;\n              if (!decryptdata.keyId) {\n                return 0; // continue\n              }\n              var oldKeyIdHex = Hex.hexDump(decryptdata.keyId);\n              if (keyIdHex === oldKeyIdHex || decryptdata.uri.replace(/-/g, '').indexOf(keyIdHex) !== -1) {\n                keySessionContextPromise = keyIdToKeySessionPromise[oldKeyIdHex];\n                if (decryptdata.pssh) {\n                  return 1; // break\n                }\n                delete keyIdToKeySessionPromise[oldKeyIdHex];\n                decryptdata.pssh = new Uint8Array(initData);\n                decryptdata.keyId = keyId;\n                keySessionContextPromise = keyIdToKeySessionPromise[keyIdHex] = keySessionContextPromise.then(function () {\n                  return _this.generateRequestWithPreferredKeySession(keyContext, initDataType, initData, 'encrypted-event-key-match');\n                });\n                keySessionContextPromise.catch(function (error) {\n                  return _this.handleError(error);\n                });\n                return 1; // break\n              }\n            },\n            _ret;\n          for (var i = 0; i < mediaKeySessions.length; i++) {\n            _ret = _loop();\n            if (_ret === 0) continue;\n            if (_ret === 1) break;\n          }\n          if (!keySessionContextPromise) {\n            if (keySystemDomain !== keySystem) {\n              _this.log(\"Ignoring \\\"\" + event.type + \"\\\" event with \" + keySystemDomain + \" init data for selected key-system \" + keySystem);\n              return;\n            }\n            // \"Clear-lead\" (misc key not encountered in playlist)\n            keySessionContextPromise = keyIdToKeySessionPromise[keyIdHex] = _this.getKeySystemSelectionPromise([keySystemDomain]).then(function (_ref) {\n              var _keySystemToKeySystem;\n              var keySystem = _ref.keySystem,\n                mediaKeys = _ref.mediaKeys;\n              _this.throwIfDestroyed();\n              var decryptdata = new LevelKey('ISO-23001-7', keyIdHex, (_keySystemToKeySystem = keySystemDomainToKeySystemFormat(keySystem)) != null ? _keySystemToKeySystem : '');\n              decryptdata.pssh = new Uint8Array(initData);\n              decryptdata.keyId = keyId;\n              return _this.attemptSetMediaKeys(keySystem, mediaKeys).then(function () {\n                _this.throwIfDestroyed();\n                var keySessionContext = _this.createMediaKeySessionContext({\n                  decryptdata: decryptdata,\n                  keySystem: keySystem,\n                  mediaKeys: mediaKeys\n                });\n                return _this.generateRequestWithPreferredKeySession(keySessionContext, initDataType, initData, 'encrypted-event-no-match');\n              });\n            });\n            keySessionContextPromise.catch(function (error) {\n              return _this.handleError(error);\n            });\n          }\n        });\n      };\n      _this.onWaitingForKey = function (event) {\n        _this.log(\"\\\"\" + event.type + \"\\\" event\");\n      };\n      _this.hls = hls;\n      _this.config = hls.config;\n      _this.registerListeners();\n      return _this;\n    }\n    _inheritsLoose(EMEController, _Logger);\n    var _proto = EMEController.prototype;\n    _proto.destroy = function destroy() {\n      this.onDestroying();\n      this.onMediaDetached();\n      // Remove any references that could be held in config options or callbacks\n      var config = this.config;\n      config.requestMediaKeySystemAccessFunc = null;\n      config.licenseXhrSetup = config.licenseResponseCallback = undefined;\n      config.drmSystems = config.drmSystemOptions = {};\n      // @ts-ignore\n      this.hls = this.config = this.keyIdToKeySessionPromise = null;\n      // @ts-ignore\n      this.onMediaEncrypted = this.onWaitingForKey = null;\n    };\n    _proto.registerListeners = function registerListeners() {\n      this.hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      this.hls.on(Events.MEDIA_DETACHED, this.onMediaDetached, this);\n      this.hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      this.hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n      this.hls.on(Events.DESTROYING, this.onDestroying, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      this.hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      this.hls.off(Events.MEDIA_DETACHED, this.onMediaDetached, this);\n      this.hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      this.hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n      this.hls.off(Events.DESTROYING, this.onDestroying, this);\n    };\n    _proto.getLicenseServerUrl = function getLicenseServerUrl(keySystem) {\n      var _this$config = this.config,\n        drmSystems = _this$config.drmSystems,\n        widevineLicenseUrl = _this$config.widevineLicenseUrl;\n      var keySystemConfiguration = drmSystems[keySystem];\n      if (keySystemConfiguration) {\n        return keySystemConfiguration.licenseUrl;\n      }\n\n      // For backward compatibility\n      if (keySystem === KeySystems.WIDEVINE && widevineLicenseUrl) {\n        return widevineLicenseUrl;\n      }\n    };\n    _proto.getLicenseServerUrlOrThrow = function getLicenseServerUrlOrThrow(keySystem) {\n      var url = this.getLicenseServerUrl(keySystem);\n      if (url === undefined) {\n        throw new Error(\"no license server URL configured for key-system \\\"\" + keySystem + \"\\\"\");\n      }\n      return url;\n    };\n    _proto.getServerCertificateUrl = function getServerCertificateUrl(keySystem) {\n      var drmSystems = this.config.drmSystems;\n      var keySystemConfiguration = drmSystems[keySystem];\n      if (keySystemConfiguration) {\n        return keySystemConfiguration.serverCertificateUrl;\n      } else {\n        this.log(\"No Server Certificate in config.drmSystems[\\\"\" + keySystem + \"\\\"]\");\n      }\n    };\n    _proto.attemptKeySystemAccess = function attemptKeySystemAccess(keySystemsToAttempt) {\n      var _this3 = this;\n      var levels = this.hls.levels;\n      var uniqueCodec = function uniqueCodec(value, i, a) {\n        return !!value && a.indexOf(value) === i;\n      };\n      var audioCodecs = levels.map(function (level) {\n        return level.audioCodec;\n      }).filter(uniqueCodec);\n      var videoCodecs = levels.map(function (level) {\n        return level.videoCodec;\n      }).filter(uniqueCodec);\n      if (audioCodecs.length + videoCodecs.length === 0) {\n        videoCodecs.push('avc1.42e01e');\n      }\n      return new Promise(function (resolve, reject) {\n        var _attempt = function attempt(keySystems) {\n          var keySystem = keySystems.shift();\n          _this3.getMediaKeysPromise(keySystem, audioCodecs, videoCodecs).then(function (mediaKeys) {\n            return resolve({\n              keySystem: keySystem,\n              mediaKeys: mediaKeys\n            });\n          }).catch(function (error) {\n            if (keySystems.length) {\n              _attempt(keySystems);\n            } else if (error instanceof EMEKeyError) {\n              reject(error);\n            } else {\n              reject(new EMEKeyError({\n                type: ErrorTypes.KEY_SYSTEM_ERROR,\n                details: ErrorDetails.KEY_SYSTEM_NO_ACCESS,\n                error: error,\n                fatal: true\n              }, error.message));\n            }\n          });\n        };\n        _attempt(keySystemsToAttempt);\n      });\n    };\n    _proto.requestMediaKeySystemAccess = function requestMediaKeySystemAccess$1(keySystem, supportedConfigurations) {\n      var requestMediaKeySystemAccessFunc = this.config.requestMediaKeySystemAccessFunc;\n      if (!(typeof requestMediaKeySystemAccessFunc === 'function')) {\n        var errMessage = \"Configured requestMediaKeySystemAccess is not a function \" + requestMediaKeySystemAccessFunc;\n        if (requestMediaKeySystemAccess === null && self.location.protocol === 'http:') {\n          errMessage = \"navigator.requestMediaKeySystemAccess is not available over insecure protocol \" + location.protocol;\n        }\n        return Promise.reject(new Error(errMessage));\n      }\n      return requestMediaKeySystemAccessFunc(keySystem, supportedConfigurations);\n    };\n    _proto.getMediaKeysPromise = function getMediaKeysPromise(keySystem, audioCodecs, videoCodecs) {\n      var _this4 = this;\n      // This can throw, but is caught in event handler callpath\n      var mediaKeySystemConfigs = getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, this.config.drmSystemOptions);\n      var keySystemAccessPromises = this.keySystemAccessPromises[keySystem];\n      var keySystemAccess = keySystemAccessPromises == null ? void 0 : keySystemAccessPromises.keySystemAccess;\n      if (!keySystemAccess) {\n        this.log(\"Requesting encrypted media \\\"\" + keySystem + \"\\\" key-system access with config: \" + stringify(mediaKeySystemConfigs));\n        keySystemAccess = this.requestMediaKeySystemAccess(keySystem, mediaKeySystemConfigs);\n        var _keySystemAccessPromises = this.keySystemAccessPromises[keySystem] = {\n          keySystemAccess: keySystemAccess\n        };\n        keySystemAccess.catch(function (error) {\n          _this4.log(\"Failed to obtain access to key-system \\\"\" + keySystem + \"\\\": \" + error);\n        });\n        return keySystemAccess.then(function (mediaKeySystemAccess) {\n          _this4.log(\"Access for key-system \\\"\" + mediaKeySystemAccess.keySystem + \"\\\" obtained\");\n          var certificateRequest = _this4.fetchServerCertificate(keySystem);\n          _this4.log(\"Create media-keys for \\\"\" + keySystem + \"\\\"\");\n          _keySystemAccessPromises.mediaKeys = mediaKeySystemAccess.createMediaKeys().then(function (mediaKeys) {\n            _this4.log(\"Media-keys created for \\\"\" + keySystem + \"\\\"\");\n            _keySystemAccessPromises.hasMediaKeys = true;\n            return certificateRequest.then(function (certificate) {\n              if (certificate) {\n                return _this4.setMediaKeysServerCertificate(mediaKeys, keySystem, certificate);\n              }\n              return mediaKeys;\n            });\n          });\n          _keySystemAccessPromises.mediaKeys.catch(function (error) {\n            _this4.error(\"Failed to create media-keys for \\\"\" + keySystem + \"\\\"}: \" + error);\n          });\n          return _keySystemAccessPromises.mediaKeys;\n        });\n      }\n      return keySystemAccess.then(function () {\n        return keySystemAccessPromises.mediaKeys;\n      });\n    };\n    _proto.createMediaKeySessionContext = function createMediaKeySessionContext(_ref2) {\n      var decryptdata = _ref2.decryptdata,\n        keySystem = _ref2.keySystem,\n        mediaKeys = _ref2.mediaKeys;\n      this.log(\"Creating key-system session \\\"\" + keySystem + \"\\\" keyId: \" + Hex.hexDump(decryptdata.keyId || []));\n      var mediaKeysSession = mediaKeys.createSession();\n      var mediaKeySessionContext = {\n        decryptdata: decryptdata,\n        keySystem: keySystem,\n        mediaKeys: mediaKeys,\n        mediaKeysSession: mediaKeysSession,\n        keyStatus: 'status-pending'\n      };\n      this.mediaKeySessions.push(mediaKeySessionContext);\n      return mediaKeySessionContext;\n    };\n    _proto.renewKeySession = function renewKeySession(mediaKeySessionContext) {\n      var decryptdata = mediaKeySessionContext.decryptdata;\n      if (decryptdata.pssh) {\n        var keySessionContext = this.createMediaKeySessionContext(mediaKeySessionContext);\n        var keyId = this.getKeyIdString(decryptdata);\n        var scheme = 'cenc';\n        this.keyIdToKeySessionPromise[keyId] = this.generateRequestWithPreferredKeySession(keySessionContext, scheme, decryptdata.pssh.buffer, 'expired');\n      } else {\n        this.warn(\"Could not renew expired session. Missing pssh initData.\");\n      }\n      this.removeSession(mediaKeySessionContext);\n    };\n    _proto.getKeyIdString = function getKeyIdString(decryptdata) {\n      if (!decryptdata) {\n        throw new Error('Could not read keyId of undefined decryptdata');\n      }\n      if (decryptdata.keyId === null) {\n        throw new Error('keyId is null');\n      }\n      return Hex.hexDump(decryptdata.keyId);\n    };\n    _proto.updateKeySession = function updateKeySession(mediaKeySessionContext, data) {\n      var _mediaKeySessionConte;\n      var keySession = mediaKeySessionContext.mediaKeysSession;\n      this.log(\"Updating key-session \\\"\" + keySession.sessionId + \"\\\" for keyID \" + Hex.hexDump(((_mediaKeySessionConte = mediaKeySessionContext.decryptdata) == null ? void 0 : _mediaKeySessionConte.keyId) || []) + \"\\n      } (data length: \" + (data ? data.byteLength : data) + \")\");\n      return keySession.update(data);\n    };\n    _proto.getSelectedKeySystemFormats = function getSelectedKeySystemFormats() {\n      var _this5 = this;\n      return Object.keys(this.keySystemAccessPromises).map(function (keySystem) {\n        return {\n          keySystem: keySystem,\n          hasMediaKeys: _this5.keySystemAccessPromises[keySystem].hasMediaKeys\n        };\n      }).filter(function (_ref3) {\n        var hasMediaKeys = _ref3.hasMediaKeys;\n        return !!hasMediaKeys;\n      }).map(function (_ref4) {\n        var keySystem = _ref4.keySystem;\n        return keySystemDomainToKeySystemFormat(keySystem);\n      }).filter(function (keySystem) {\n        return !!keySystem;\n      });\n    };\n    _proto.getKeySystemAccess = function getKeySystemAccess(keySystemsToAttempt) {\n      var _this6 = this;\n      return this.getKeySystemSelectionPromise(keySystemsToAttempt).then(function (_ref5) {\n        var keySystem = _ref5.keySystem,\n          mediaKeys = _ref5.mediaKeys;\n        return _this6.attemptSetMediaKeys(keySystem, mediaKeys);\n      });\n    };\n    _proto.selectKeySystem = function selectKeySystem(keySystemsToAttempt) {\n      var _this7 = this;\n      return new Promise(function (resolve, reject) {\n        return _this7.getKeySystemSelectionPromise(keySystemsToAttempt).then(function (_ref6) {\n          var keySystem = _ref6.keySystem;\n          var keySystemFormat = keySystemDomainToKeySystemFormat(keySystem);\n          if (keySystemFormat) {\n            resolve(keySystemFormat);\n          } else {\n            reject(new Error(\"Unable to find format for key-system \\\"\" + keySystem + \"\\\"\"));\n          }\n        }).catch(reject);\n      });\n    };\n    _proto.selectKeySystemFormat = function selectKeySystemFormat(frag) {\n      var keyFormats = Object.keys(frag.levelkeys || {});\n      if (!this.keyFormatPromise) {\n        this.log(\"Selecting key-system from fragment (sn: \" + frag.sn + \" \" + frag.type + \": \" + frag.level + \") key formats \" + keyFormats.join(', '));\n        this.keyFormatPromise = this.getKeyFormatPromise(keyFormats);\n      }\n      return this.keyFormatPromise;\n    };\n    _proto.getKeyFormatPromise = function getKeyFormatPromise(keyFormats) {\n      var keySystemsInConfig = getKeySystemsForConfig(this.config);\n      var keySystemsToAttempt = keyFormats.map(keySystemFormatToKeySystemDomain).filter(function (value) {\n        return !!value && keySystemsInConfig.indexOf(value) !== -1;\n      });\n      return this.selectKeySystem(keySystemsToAttempt);\n    };\n    _proto.loadKey = function loadKey(data) {\n      var _this8 = this;\n      var decryptdata = data.keyInfo.decryptdata;\n      var keyId = this.getKeyIdString(decryptdata);\n      var keyDetails = \"(keyId: \" + keyId + \" format: \\\"\" + decryptdata.keyFormat + \"\\\" method: \" + decryptdata.method + \" uri: \" + decryptdata.uri + \")\";\n      this.log(\"Starting session for key \" + keyDetails);\n      var keyContextPromise = this.keyIdToKeySessionPromise[keyId];\n      if (!keyContextPromise) {\n        keyContextPromise = this.getKeySystemForKeyPromise(decryptdata).then(function (_ref7) {\n          var keySystem = _ref7.keySystem,\n            mediaKeys = _ref7.mediaKeys;\n          _this8.throwIfDestroyed();\n          _this8.log(\"Handle encrypted media sn: \" + data.frag.sn + \" \" + data.frag.type + \": \" + data.frag.level + \" using key \" + keyDetails);\n          return _this8.attemptSetMediaKeys(keySystem, mediaKeys).then(function () {\n            _this8.throwIfDestroyed();\n            return _this8.createMediaKeySessionContext({\n              keySystem: keySystem,\n              mediaKeys: mediaKeys,\n              decryptdata: decryptdata\n            });\n          });\n        });\n        var keySessionContextPromise = this.keyIdToKeySessionPromise[keyId] = keyContextPromise.then(function (keySessionContext) {\n          var scheme = 'cenc';\n          var initData = decryptdata.pssh ? decryptdata.pssh.buffer : null;\n          return _this8.generateRequestWithPreferredKeySession(keySessionContext, scheme, initData, 'playlist-key');\n        });\n        keySessionContextPromise.catch(function (error) {\n          return _this8.handleError(error);\n        });\n      }\n      return keyContextPromise;\n    };\n    _proto.throwIfDestroyed = function throwIfDestroyed(message) {\n      if (!this.hls) {\n        throw new Error('invalid state');\n      }\n    };\n    _proto.handleError = function handleError(error) {\n      if (!this.hls) {\n        return;\n      }\n      this.error(error.message);\n      if (error instanceof EMEKeyError) {\n        this.hls.trigger(Events.ERROR, error.data);\n      } else {\n        this.hls.trigger(Events.ERROR, {\n          type: ErrorTypes.KEY_SYSTEM_ERROR,\n          details: ErrorDetails.KEY_SYSTEM_NO_KEYS,\n          error: error,\n          fatal: true\n        });\n      }\n    };\n    _proto.getKeySystemForKeyPromise = function getKeySystemForKeyPromise(decryptdata) {\n      var keyId = this.getKeyIdString(decryptdata);\n      var mediaKeySessionContext = this.keyIdToKeySessionPromise[keyId];\n      if (!mediaKeySessionContext) {\n        var keySystem = keySystemFormatToKeySystemDomain(decryptdata.keyFormat);\n        var keySystemsToAttempt = keySystem ? [keySystem] : getKeySystemsForConfig(this.config);\n        return this.attemptKeySystemAccess(keySystemsToAttempt);\n      }\n      return mediaKeySessionContext;\n    };\n    _proto.getKeySystemSelectionPromise = function getKeySystemSelectionPromise(keySystemsToAttempt) {\n      if (!keySystemsToAttempt.length) {\n        keySystemsToAttempt = getKeySystemsForConfig(this.config);\n      }\n      if (keySystemsToAttempt.length === 0) {\n        throw new EMEKeyError({\n          type: ErrorTypes.KEY_SYSTEM_ERROR,\n          details: ErrorDetails.KEY_SYSTEM_NO_CONFIGURED_LICENSE,\n          fatal: true\n        }, \"Missing key-system license configuration options \" + stringify({\n          drmSystems: this.config.drmSystems\n        }));\n      }\n      return this.attemptKeySystemAccess(keySystemsToAttempt);\n    };\n    _proto.attemptSetMediaKeys = function attemptSetMediaKeys(keySystem, mediaKeys) {\n      var _this9 = this;\n      if (this.mediaKeys === mediaKeys) {\n        return Promise.resolve();\n      }\n      var queue = this.setMediaKeysQueue.slice();\n      this.log(\"Setting media-keys for \\\"\" + keySystem + \"\\\"\");\n      // Only one setMediaKeys() can run at one time, and multiple setMediaKeys() operations\n      // can be queued for execution for multiple key sessions.\n      var setMediaKeysPromise = Promise.all(queue).then(function () {\n        if (!_this9.media) {\n          _this9.mediaKeys = null;\n          throw new Error('Attempted to set mediaKeys without media element attached');\n        }\n        return _this9.media.setMediaKeys(mediaKeys);\n      });\n      this.mediaKeys = mediaKeys;\n      this.setMediaKeysQueue.push(setMediaKeysPromise);\n      return setMediaKeysPromise.then(function () {\n        _this9.log(\"Media-keys set for \\\"\" + keySystem + \"\\\"\");\n        queue.push(setMediaKeysPromise);\n        _this9.setMediaKeysQueue = _this9.setMediaKeysQueue.filter(function (p) {\n          return queue.indexOf(p) === -1;\n        });\n      });\n    };\n    _proto.generateRequestWithPreferredKeySession = function generateRequestWithPreferredKeySession(context, initDataType, initData, reason) {\n      var _this$config$drmSyste,\n        _this$config$drmSyste2,\n        _this0 = this;\n      var generateRequestFilter = (_this$config$drmSyste = this.config.drmSystems) == null ? void 0 : (_this$config$drmSyste2 = _this$config$drmSyste[context.keySystem]) == null ? void 0 : _this$config$drmSyste2.generateRequest;\n      if (generateRequestFilter) {\n        try {\n          var mappedInitData = generateRequestFilter.call(this.hls, initDataType, initData, context);\n          if (!mappedInitData) {\n            throw new Error('Invalid response from configured generateRequest filter');\n          }\n          initDataType = mappedInitData.initDataType;\n          initData = mappedInitData.initData ? mappedInitData.initData : null;\n          context.decryptdata.pssh = initData ? new Uint8Array(initData) : null;\n        } catch (error) {\n          var _this$hls;\n          this.warn(error.message);\n          if ((_this$hls = this.hls) != null && _this$hls.config.debug) {\n            throw error;\n          }\n        }\n      }\n      if (initData === null) {\n        this.log(\"Skipping key-session request for \\\"\" + reason + \"\\\" (no initData)\");\n        return Promise.resolve(context);\n      }\n      var keyId = this.getKeyIdString(context.decryptdata);\n      this.log(\"Generating key-session request for \\\"\" + reason + \"\\\": \" + keyId + \" (init data type: \" + initDataType + \" length: \" + (initData ? initData.byteLength : null) + \")\");\n      var licenseStatus = new EventEmitter();\n      var onmessage = context._onmessage = function (event) {\n        var keySession = context.mediaKeysSession;\n        if (!keySession) {\n          licenseStatus.emit('error', new Error('invalid state'));\n          return;\n        }\n        var messageType = event.messageType,\n          message = event.message;\n        _this0.log(\"\\\"\" + messageType + \"\\\" message event for session \\\"\" + keySession.sessionId + \"\\\" message size: \" + message.byteLength);\n        if (messageType === 'license-request' || messageType === 'license-renewal') {\n          _this0.renewLicense(context, message).catch(function (error) {\n            if (licenseStatus.eventNames().length) {\n              licenseStatus.emit('error', error);\n            } else {\n              _this0.handleError(error);\n            }\n          });\n        } else if (messageType === 'license-release') {\n          if (context.keySystem === KeySystems.FAIRPLAY) {\n            _this0.updateKeySession(context, strToUtf8array('acknowledged'));\n            _this0.removeSession(context);\n          }\n        } else {\n          _this0.warn(\"unhandled media key message type \\\"\" + messageType + \"\\\"\");\n        }\n      };\n      var onkeystatuseschange = context._onkeystatuseschange = function (event) {\n        var keySession = context.mediaKeysSession;\n        if (!keySession) {\n          licenseStatus.emit('error', new Error('invalid state'));\n          return;\n        }\n        _this0.onKeyStatusChange(context);\n        var keyStatus = context.keyStatus;\n        licenseStatus.emit('keyStatus', keyStatus);\n        if (keyStatus === 'expired') {\n          _this0.warn(context.keySystem + \" expired for key \" + keyId);\n          _this0.renewKeySession(context);\n        }\n      };\n      addEventListener(context.mediaKeysSession, 'message', onmessage);\n      addEventListener(context.mediaKeysSession, 'keystatuseschange', onkeystatuseschange);\n      var keyUsablePromise = new Promise(function (resolve, reject) {\n        licenseStatus.on('error', reject);\n        licenseStatus.on('keyStatus', function (keyStatus) {\n          if (keyStatus.startsWith('usable')) {\n            resolve();\n          } else if (keyStatus === 'output-restricted') {\n            reject(new EMEKeyError({\n              type: ErrorTypes.KEY_SYSTEM_ERROR,\n              details: ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED,\n              fatal: false\n            }, 'HDCP level output restricted'));\n          } else if (keyStatus === 'internal-error') {\n            reject(new EMEKeyError({\n              type: ErrorTypes.KEY_SYSTEM_ERROR,\n              details: ErrorDetails.KEY_SYSTEM_STATUS_INTERNAL_ERROR,\n              fatal: true\n            }, \"key status changed to \\\"\" + keyStatus + \"\\\"\"));\n          } else if (keyStatus === 'expired') {\n            reject(new Error('key expired while generating request'));\n          } else {\n            _this0.warn(\"unhandled key status change \\\"\" + keyStatus + \"\\\"\");\n          }\n        });\n      });\n      return context.mediaKeysSession.generateRequest(initDataType, initData).then(function () {\n        var _context$mediaKeysSes;\n        _this0.log(\"Request generated for key-session \\\"\" + ((_context$mediaKeysSes = context.mediaKeysSession) == null ? void 0 : _context$mediaKeysSes.sessionId) + \"\\\" keyId: \" + keyId);\n      }).catch(function (error) {\n        throw new EMEKeyError({\n          type: ErrorTypes.KEY_SYSTEM_ERROR,\n          details: ErrorDetails.KEY_SYSTEM_NO_SESSION,\n          error: error,\n          fatal: false\n        }, \"Error generating key-session request: \" + error);\n      }).then(function () {\n        return keyUsablePromise;\n      }).catch(function (error) {\n        licenseStatus.removeAllListeners();\n        _this0.removeSession(context);\n        throw error;\n      }).then(function () {\n        licenseStatus.removeAllListeners();\n        return context;\n      });\n    };\n    _proto.onKeyStatusChange = function onKeyStatusChange(mediaKeySessionContext) {\n      var _this1 = this;\n      mediaKeySessionContext.mediaKeysSession.keyStatuses.forEach(function (status, keyId) {\n        // keyStatuses.forEach is not standard API so the callback value looks weird on xboxone\n        // xboxone callback(keyId, status) so we need to exchange them\n        if (typeof keyId === 'string' && typeof status === 'object') {\n          var temp = keyId;\n          keyId = status;\n          status = temp;\n        }\n        _this1.log(\"key status change \\\"\" + status + \"\\\" for keyStatuses keyId: \" + Hex.hexDump('buffer' in keyId ? new Uint8Array(keyId.buffer, keyId.byteOffset, keyId.byteLength) : new Uint8Array(keyId)) + \" session keyId: \" + Hex.hexDump(new Uint8Array(mediaKeySessionContext.decryptdata.keyId || [])) + \" uri: \" + mediaKeySessionContext.decryptdata.uri);\n        mediaKeySessionContext.keyStatus = status;\n      });\n    };\n    _proto.fetchServerCertificate = function fetchServerCertificate(keySystem) {\n      var config = this.config;\n      var Loader = config.loader;\n      var certLoader = new Loader(config);\n      var url = this.getServerCertificateUrl(keySystem);\n      if (!url) {\n        return Promise.resolve();\n      }\n      this.log(\"Fetching server certificate for \\\"\" + keySystem + \"\\\"\");\n      return new Promise(function (resolve, reject) {\n        var loaderContext = {\n          responseType: 'arraybuffer',\n          url: url\n        };\n        var loadPolicy = config.certLoadPolicy.default;\n        var loaderConfig = {\n          loadPolicy: loadPolicy,\n          timeout: loadPolicy.maxLoadTimeMs,\n          maxRetry: 0,\n          retryDelay: 0,\n          maxRetryDelay: 0\n        };\n        var loaderCallbacks = {\n          onSuccess: function onSuccess(response, stats, context, networkDetails) {\n            resolve(response.data);\n          },\n          onError: function onError(response, contex, networkDetails, stats) {\n            reject(new EMEKeyError({\n              type: ErrorTypes.KEY_SYSTEM_ERROR,\n              details: ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,\n              fatal: true,\n              networkDetails: networkDetails,\n              response: _objectSpread2({\n                url: loaderContext.url,\n                data: undefined\n              }, response)\n            }, \"\\\"\" + keySystem + \"\\\" certificate request failed (\" + url + \"). Status: \" + response.code + \" (\" + response.text + \")\"));\n          },\n          onTimeout: function onTimeout(stats, context, networkDetails) {\n            reject(new EMEKeyError({\n              type: ErrorTypes.KEY_SYSTEM_ERROR,\n              details: ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,\n              fatal: true,\n              networkDetails: networkDetails,\n              response: {\n                url: loaderContext.url,\n                data: undefined\n              }\n            }, \"\\\"\" + keySystem + \"\\\" certificate request timed out (\" + url + \")\"));\n          },\n          onAbort: function onAbort(stats, context, networkDetails) {\n            reject(new Error('aborted'));\n          }\n        };\n        certLoader.load(loaderContext, loaderConfig, loaderCallbacks);\n      });\n    };\n    _proto.setMediaKeysServerCertificate = function setMediaKeysServerCertificate(mediaKeys, keySystem, cert) {\n      var _this10 = this;\n      return new Promise(function (resolve, reject) {\n        mediaKeys.setServerCertificate(cert).then(function (success) {\n          _this10.log(\"setServerCertificate \" + (success ? 'success' : 'not supported by CDM') + \" (\" + (cert == null ? void 0 : cert.byteLength) + \") on \\\"\" + keySystem + \"\\\"\");\n          resolve(mediaKeys);\n        }).catch(function (error) {\n          reject(new EMEKeyError({\n            type: ErrorTypes.KEY_SYSTEM_ERROR,\n            details: ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED,\n            error: error,\n            fatal: true\n          }, error.message));\n        });\n      });\n    };\n    _proto.renewLicense = function renewLicense(context, keyMessage) {\n      var _this11 = this;\n      return this.requestLicense(context, new Uint8Array(keyMessage)).then(function (data) {\n        return _this11.updateKeySession(context, new Uint8Array(data)).catch(function (error) {\n          throw new EMEKeyError({\n            type: ErrorTypes.KEY_SYSTEM_ERROR,\n            details: ErrorDetails.KEY_SYSTEM_SESSION_UPDATE_FAILED,\n            error: error,\n            fatal: true\n          }, error.message);\n        });\n      });\n    };\n    _proto.unpackPlayReadyKeyMessage = function unpackPlayReadyKeyMessage(xhr, licenseChallenge) {\n      // On Edge, the raw license message is UTF-16-encoded XML.  We need\n      // to unpack the Challenge element (base64-encoded string containing the\n      // actual license request) and any HttpHeader elements (sent as request\n      // headers).\n      // For PlayReady CDMs, we need to dig the Challenge out of the XML.\n      var xmlString = String.fromCharCode.apply(null, new Uint16Array(licenseChallenge.buffer));\n      if (!xmlString.includes('PlayReadyKeyMessage')) {\n        // This does not appear to be a wrapped message as on Edge.  Some\n        // clients do not need this unwrapping, so we will assume this is one of\n        // them.  Note that \"xml\" at this point probably looks like random\n        // garbage, since we interpreted UTF-8 as UTF-16.\n        xhr.setRequestHeader('Content-Type', 'text/xml; charset=utf-8');\n        return licenseChallenge;\n      }\n      var keyMessageXml = new DOMParser().parseFromString(xmlString, 'application/xml');\n      // Set request headers.\n      var headers = keyMessageXml.querySelectorAll('HttpHeader');\n      if (headers.length > 0) {\n        var header;\n        for (var i = 0, len = headers.length; i < len; i++) {\n          var _header$querySelector, _header$querySelector2;\n          header = headers[i];\n          var name = (_header$querySelector = header.querySelector('name')) == null ? void 0 : _header$querySelector.textContent;\n          var value = (_header$querySelector2 = header.querySelector('value')) == null ? void 0 : _header$querySelector2.textContent;\n          if (name && value) {\n            xhr.setRequestHeader(name, value);\n          }\n        }\n      }\n      var challengeElement = keyMessageXml.querySelector('Challenge');\n      var challengeText = challengeElement == null ? void 0 : challengeElement.textContent;\n      if (!challengeText) {\n        throw new Error(\"Cannot find <Challenge> in key message\");\n      }\n      return strToUtf8array(atob(challengeText));\n    };\n    _proto.setupLicenseXHR = function setupLicenseXHR(xhr, url, keysListItem, licenseChallenge) {\n      var _this12 = this;\n      var licenseXhrSetup = this.config.licenseXhrSetup;\n      if (!licenseXhrSetup) {\n        xhr.open('POST', url, true);\n        return Promise.resolve({\n          xhr: xhr,\n          licenseChallenge: licenseChallenge\n        });\n      }\n      return Promise.resolve().then(function () {\n        if (!keysListItem.decryptdata) {\n          throw new Error('Key removed');\n        }\n        return licenseXhrSetup.call(_this12.hls, xhr, url, keysListItem, licenseChallenge);\n      }).catch(function (error) {\n        if (!keysListItem.decryptdata) {\n          // Key session removed. Cancel license request.\n          throw error;\n        }\n        // let's try to open before running setup\n        xhr.open('POST', url, true);\n        return licenseXhrSetup.call(_this12.hls, xhr, url, keysListItem, licenseChallenge);\n      }).then(function (licenseXhrSetupResult) {\n        // if licenseXhrSetup did not yet call open, let's do it now\n        if (!xhr.readyState) {\n          xhr.open('POST', url, true);\n        }\n        var finalLicenseChallenge = licenseXhrSetupResult ? licenseXhrSetupResult : licenseChallenge;\n        return {\n          xhr: xhr,\n          licenseChallenge: finalLicenseChallenge\n        };\n      });\n    };\n    _proto.requestLicense = function requestLicense(keySessionContext, licenseChallenge) {\n      var _this13 = this;\n      var keyLoadPolicy = this.config.keyLoadPolicy.default;\n      return new Promise(function (resolve, reject) {\n        var url = _this13.getLicenseServerUrlOrThrow(keySessionContext.keySystem);\n        _this13.log(\"Sending license request to URL: \" + url);\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'arraybuffer';\n        xhr.onreadystatechange = function () {\n          if (!_this13.hls || !keySessionContext.mediaKeysSession) {\n            return reject(new Error('invalid state'));\n          }\n          if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n              _this13._requestLicenseFailureCount = 0;\n              var data = xhr.response;\n              _this13.log(\"License received \" + (data instanceof ArrayBuffer ? data.byteLength : data));\n              var licenseResponseCallback = _this13.config.licenseResponseCallback;\n              if (licenseResponseCallback) {\n                try {\n                  data = licenseResponseCallback.call(_this13.hls, xhr, url, keySessionContext);\n                } catch (error) {\n                  _this13.error(error);\n                }\n              }\n              resolve(data);\n            } else {\n              var retryConfig = keyLoadPolicy.errorRetry;\n              var maxNumRetry = retryConfig ? retryConfig.maxNumRetry : 0;\n              _this13._requestLicenseFailureCount++;\n              if (_this13._requestLicenseFailureCount > maxNumRetry || xhr.status >= 400 && xhr.status < 500) {\n                reject(new EMEKeyError({\n                  type: ErrorTypes.KEY_SYSTEM_ERROR,\n                  details: ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,\n                  fatal: true,\n                  networkDetails: xhr,\n                  response: {\n                    url: url,\n                    data: undefined,\n                    code: xhr.status,\n                    text: xhr.statusText\n                  }\n                }, \"License Request XHR failed (\" + url + \"). Status: \" + xhr.status + \" (\" + xhr.statusText + \")\"));\n              } else {\n                var attemptsLeft = maxNumRetry - _this13._requestLicenseFailureCount + 1;\n                _this13.warn(\"Retrying license request, \" + attemptsLeft + \" attempts left\");\n                _this13.requestLicense(keySessionContext, licenseChallenge).then(resolve, reject);\n              }\n            }\n          }\n        };\n        if (keySessionContext.licenseXhr && keySessionContext.licenseXhr.readyState !== XMLHttpRequest.DONE) {\n          keySessionContext.licenseXhr.abort();\n        }\n        keySessionContext.licenseXhr = xhr;\n        _this13.setupLicenseXHR(xhr, url, keySessionContext, licenseChallenge).then(function (_ref8) {\n          var xhr = _ref8.xhr,\n            licenseChallenge = _ref8.licenseChallenge;\n          if (keySessionContext.keySystem == KeySystems.PLAYREADY) {\n            licenseChallenge = _this13.unpackPlayReadyKeyMessage(xhr, licenseChallenge);\n          }\n          xhr.send(licenseChallenge);\n        });\n      });\n    };\n    _proto.onDestroying = function onDestroying() {\n      this.unregisterListeners();\n      this._clear();\n    };\n    _proto.onMediaAttached = function onMediaAttached(event, data) {\n      if (!this.config.emeEnabled) {\n        return;\n      }\n      var media = data.media;\n\n      // keep reference of media\n      this.media = media;\n      addEventListener(media, 'encrypted', this.onMediaEncrypted);\n      addEventListener(media, 'waitingforkey', this.onWaitingForKey);\n    };\n    _proto.onMediaDetached = function onMediaDetached() {\n      var media = this.media;\n      if (media) {\n        removeEventListener(media, 'encrypted', this.onMediaEncrypted);\n        removeEventListener(media, 'waitingforkey', this.onWaitingForKey);\n        this.media = null;\n        this.mediaKeys = null;\n      }\n    };\n    _proto._clear = function _clear() {\n      var _this14 = this,\n        _media$setMediaKeys;\n      this._requestLicenseFailureCount = 0;\n      this.keyIdToKeySessionPromise = {};\n      if (!this.mediaKeys && !this.mediaKeySessions.length) {\n        return;\n      }\n      var media = this.media;\n      var mediaKeysList = this.mediaKeySessions.slice();\n      this.mediaKeySessions = [];\n      this.mediaKeys = null;\n      LevelKey.clearKeyUriToKeyIdMap();\n\n      // Close all sessions and remove media keys from the video element.\n      var keySessionCount = mediaKeysList.length;\n      EMEController.CDMCleanupPromise = Promise.all(mediaKeysList.map(function (mediaKeySessionContext) {\n        return _this14.removeSession(mediaKeySessionContext);\n      }).concat(media == null ? void 0 : (_media$setMediaKeys = media.setMediaKeys(null)) == null ? void 0 : _media$setMediaKeys.catch(function (error) {\n        var _this14$hls;\n        _this14.log(\"Could not clear media keys: \" + error);\n        (_this14$hls = _this14.hls) == null ? void 0 : _this14$hls.trigger(Events.ERROR, {\n          type: ErrorTypes.OTHER_ERROR,\n          details: ErrorDetails.KEY_SYSTEM_DESTROY_MEDIA_KEYS_ERROR,\n          fatal: false,\n          error: new Error(\"Could not clear media keys: \" + error)\n        });\n      }))).catch(function (error) {\n        var _this14$hls2;\n        _this14.log(\"Could not close sessions and clear media keys: \" + error);\n        (_this14$hls2 = _this14.hls) == null ? void 0 : _this14$hls2.trigger(Events.ERROR, {\n          type: ErrorTypes.OTHER_ERROR,\n          details: ErrorDetails.KEY_SYSTEM_DESTROY_CLOSE_SESSION_ERROR,\n          fatal: false,\n          error: new Error(\"Could not close sessions and clear media keys: \" + error)\n        });\n      }).then(function () {\n        if (keySessionCount) {\n          _this14.log('finished closing key sessions and clearing media keys');\n        }\n      });\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      this.keyFormatPromise = null;\n    };\n    _proto.onManifestLoaded = function onManifestLoaded(event, _ref9) {\n      var sessionKeys = _ref9.sessionKeys;\n      if (!sessionKeys || !this.config.emeEnabled) {\n        return;\n      }\n      if (!this.keyFormatPromise) {\n        var keyFormats = sessionKeys.reduce(function (formats, sessionKey) {\n          if (formats.indexOf(sessionKey.keyFormat) === -1) {\n            formats.push(sessionKey.keyFormat);\n          }\n          return formats;\n        }, []);\n        this.log(\"Selecting key-system from session-keys \" + keyFormats.join(', '));\n        this.keyFormatPromise = this.getKeyFormatPromise(keyFormats);\n      }\n    };\n    _proto.removeSession = function removeSession(mediaKeySessionContext) {\n      var _this15 = this;\n      var mediaKeysSession = mediaKeySessionContext.mediaKeysSession,\n        licenseXhr = mediaKeySessionContext.licenseXhr;\n      if (mediaKeysSession) {\n        this.log(\"Remove licenses and keys and close session \" + mediaKeysSession.sessionId);\n        if (mediaKeySessionContext._onmessage) {\n          mediaKeysSession.removeEventListener('message', mediaKeySessionContext._onmessage);\n          mediaKeySessionContext._onmessage = undefined;\n        }\n        if (mediaKeySessionContext._onkeystatuseschange) {\n          mediaKeysSession.removeEventListener('keystatuseschange', mediaKeySessionContext._onkeystatuseschange);\n          mediaKeySessionContext._onkeystatuseschange = undefined;\n        }\n        if (licenseXhr && licenseXhr.readyState !== XMLHttpRequest.DONE) {\n          licenseXhr.abort();\n        }\n        mediaKeySessionContext.mediaKeysSession = mediaKeySessionContext.decryptdata = mediaKeySessionContext.licenseXhr = undefined;\n        var index = this.mediaKeySessions.indexOf(mediaKeySessionContext);\n        if (index > -1) {\n          this.mediaKeySessions.splice(index, 1);\n        }\n        var drmSystemOptions = this.config.drmSystemOptions;\n        var removePromise = isPersistentSessionType(drmSystemOptions) ? new Promise(function (resolve, reject) {\n          self.setTimeout(function () {\n            return reject(new Error(\"MediaKeySession.remove() timeout\"));\n          }, 8000);\n          mediaKeysSession.remove().then(resolve);\n        }) : Promise.resolve();\n        return removePromise.catch(function (error) {\n          var _this15$hls;\n          _this15.log(\"Could not remove session: \" + error);\n          (_this15$hls = _this15.hls) == null ? void 0 : _this15$hls.trigger(Events.ERROR, {\n            type: ErrorTypes.OTHER_ERROR,\n            details: ErrorDetails.KEY_SYSTEM_DESTROY_REMOVE_SESSION_ERROR,\n            fatal: false,\n            error: new Error(\"Could not remove session: \" + error)\n          });\n        }).then(function () {\n          return mediaKeysSession.close();\n        }).catch(function (error) {\n          var _this15$hls2;\n          _this15.log(\"Could not close session: \" + error);\n          (_this15$hls2 = _this15.hls) == null ? void 0 : _this15$hls2.trigger(Events.ERROR, {\n            type: ErrorTypes.OTHER_ERROR,\n            details: ErrorDetails.KEY_SYSTEM_DESTROY_CLOSE_SESSION_ERROR,\n            fatal: false,\n            error: new Error(\"Could not close session: \" + error)\n          });\n        });\n      }\n    };\n    return EMEController;\n  }(Logger);\n  EMEController.CDMCleanupPromise = void 0;\n  var EMEKeyError = /*#__PURE__*/function (_Error) {\n    function EMEKeyError(data, message) {\n      var _this16;\n      _this16 = _Error.call(this, message) || this;\n      _this16.data = void 0;\n      data.error || (data.error = new Error(message));\n      _this16.data = data;\n      data.err = data.error;\n      return _this16;\n    }\n    _inheritsLoose(EMEKeyError, _Error);\n    return EMEKeyError;\n  }(/*#__PURE__*/_wrapNativeSuper(Error));\n\n  var FPSController = /*#__PURE__*/function () {\n    function FPSController(hls) {\n      this.hls = void 0;\n      this.isVideoPlaybackQualityAvailable = false;\n      this.timer = void 0;\n      this.media = null;\n      this.lastTime = void 0;\n      this.lastDroppedFrames = 0;\n      this.lastDecodedFrames = 0;\n      // stream controller must be provided as a dependency!\n      this.streamController = void 0;\n      this.hls = hls;\n      this.registerListeners();\n    }\n    var _proto = FPSController.prototype;\n    _proto.setStreamController = function setStreamController(streamController) {\n      this.streamController = streamController;\n    };\n    _proto.registerListeners = function registerListeners() {\n      this.hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      this.hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      this.hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      this.hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    };\n    _proto.destroy = function destroy() {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n      this.unregisterListeners();\n      this.isVideoPlaybackQualityAvailable = false;\n      this.media = null;\n    };\n    _proto.onMediaAttaching = function onMediaAttaching(event, data) {\n      var config = this.hls.config;\n      if (config.capLevelOnFPSDrop) {\n        var media = data.media instanceof self.HTMLVideoElement ? data.media : null;\n        this.media = media;\n        if (media && typeof media.getVideoPlaybackQuality === 'function') {\n          this.isVideoPlaybackQualityAvailable = true;\n        }\n        self.clearInterval(this.timer);\n        this.timer = self.setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);\n      }\n    };\n    _proto.onMediaDetaching = function onMediaDetaching() {\n      this.media = null;\n    };\n    _proto.checkFPS = function checkFPS(video, decodedFrames, droppedFrames) {\n      var currentTime = performance.now();\n      if (decodedFrames) {\n        if (this.lastTime) {\n          var currentPeriod = currentTime - this.lastTime;\n          var currentDropped = droppedFrames - this.lastDroppedFrames;\n          var currentDecoded = decodedFrames - this.lastDecodedFrames;\n          var droppedFPS = 1000 * currentDropped / currentPeriod;\n          var hls = this.hls;\n          hls.trigger(Events.FPS_DROP, {\n            currentDropped: currentDropped,\n            currentDecoded: currentDecoded,\n            totalDroppedFrames: droppedFrames\n          });\n          if (droppedFPS > 0) {\n            // hls.logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));\n            if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {\n              var currentLevel = hls.currentLevel;\n              hls.logger.warn('drop FPS ratio greater than max allowed value for currentLevel: ' + currentLevel);\n              if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {\n                currentLevel = currentLevel - 1;\n                hls.trigger(Events.FPS_DROP_LEVEL_CAPPING, {\n                  level: currentLevel,\n                  droppedLevel: hls.currentLevel\n                });\n                hls.autoLevelCapping = currentLevel;\n                this.streamController.nextLevelSwitch();\n              }\n            }\n          }\n        }\n        this.lastTime = currentTime;\n        this.lastDroppedFrames = droppedFrames;\n        this.lastDecodedFrames = decodedFrames;\n      }\n    };\n    _proto.checkFPSInterval = function checkFPSInterval() {\n      var video = this.media;\n      if (video) {\n        if (this.isVideoPlaybackQualityAvailable) {\n          var videoPlaybackQuality = video.getVideoPlaybackQuality();\n          this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);\n        } else {\n          // HTMLVideoElement doesn't include the webkit types\n          this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);\n        }\n      }\n    };\n    return FPSController;\n  }();\n\n  // From https://github.com/darkskyapp/string-hash\n  function hash(text) {\n    var hash = 5381;\n    var i = text.length;\n    while (i) {\n      hash = hash * 33 ^ text.charCodeAt(--i);\n    }\n    return (hash >>> 0).toString();\n  }\n\n  var ALIGNED_END_THRESHOLD_SECONDS = 0.025;\n  var TimelineOccupancy = /*#__PURE__*/function (TimelineOccupancy) {\n    TimelineOccupancy[TimelineOccupancy[\"Point\"] = 0] = \"Point\";\n    TimelineOccupancy[TimelineOccupancy[\"Range\"] = 1] = \"Range\";\n    return TimelineOccupancy;\n  }({});\n  function generateAssetIdentifier(interstitial, uri, assetListIndex) {\n    return interstitial.identifier + \"-\" + (assetListIndex + 1) + \"-\" + hash(uri);\n  }\n  var InterstitialEvent = /*#__PURE__*/function () {\n    function InterstitialEvent(dateRange, base) {\n      this.base = void 0;\n      this._duration = null;\n      this._timelineStart = null;\n      this.appendInPlaceDisabled = void 0;\n      this.appendInPlaceStarted = void 0;\n      this.dateRange = void 0;\n      this.hasPlayed = false;\n      this.cumulativeDuration = 0;\n      this.resumeOffset = NaN;\n      this.playoutLimit = NaN;\n      this.restrictions = {\n        skip: false,\n        jump: false\n      };\n      this.snapOptions = {\n        out: false,\n        in: false\n      };\n      this.assetList = [];\n      this.assetListLoader = void 0;\n      this.assetListResponse = null;\n      this.resumeAnchor = void 0;\n      this.error = void 0;\n      this.resetOnResume = void 0;\n      this.base = base;\n      this.dateRange = dateRange;\n      this.setDateRange(dateRange);\n    }\n    var _proto = InterstitialEvent.prototype;\n    _proto.setDateRange = function setDateRange(dateRange) {\n      this.dateRange = dateRange;\n      this.resumeOffset = dateRange.attr.optionalFloat('X-RESUME-OFFSET', this.resumeOffset);\n      this.playoutLimit = dateRange.attr.optionalFloat('X-PLAYOUT-LIMIT', this.playoutLimit);\n      this.restrictions = dateRange.attr.enumeratedStringList('X-RESTRICT', this.restrictions);\n      this.snapOptions = dateRange.attr.enumeratedStringList('X-SNAP', this.snapOptions);\n    };\n    _proto.reset = function reset() {\n      var _this$assetListLoader;\n      this.appendInPlaceStarted = false;\n      (_this$assetListLoader = this.assetListLoader) == null ? void 0 : _this$assetListLoader.destroy();\n      this.assetListLoader = undefined;\n      if (!this.supplementsPrimary) {\n        this.assetListResponse = null;\n        this.assetList = [];\n        this._duration = null;\n      }\n      // `error?` is reset when seeking back over interstitial `startOffset`\n      //  using `schedule.resetErrorsInRange(start, end)`.\n    };\n    _proto.isAssetPastPlayoutLimit = function isAssetPastPlayoutLimit(assetIndex) {\n      var _this$assetList$asset;\n      if (assetIndex > 0 && assetIndex >= this.assetList.length) {\n        return true;\n      }\n      var playoutLimit = this.playoutLimit;\n      if (assetIndex <= 0 || isNaN(playoutLimit)) {\n        return false;\n      }\n      if (playoutLimit === 0) {\n        return true;\n      }\n      var assetOffset = ((_this$assetList$asset = this.assetList[assetIndex]) == null ? void 0 : _this$assetList$asset.startOffset) || 0;\n      return assetOffset > playoutLimit;\n    };\n    _proto.findAssetIndex = function findAssetIndex(asset) {\n      var index = this.assetList.indexOf(asset);\n      return index;\n    };\n    _proto.toString = function toString() {\n      return eventToString(this);\n    };\n    return _createClass(InterstitialEvent, [{\n      key: \"identifier\",\n      get: function get() {\n        return this.dateRange.id;\n      }\n    }, {\n      key: \"startDate\",\n      get: function get() {\n        return this.dateRange.startDate;\n      }\n    }, {\n      key: \"startTime\",\n      get: function get() {\n        // Primary media timeline start time\n        var startTime = this.dateRange.startTime;\n        if (this.snapOptions.out) {\n          var frag = this.dateRange.tagAnchor;\n          if (frag) {\n            return getSnapToFragmentTime(startTime, frag);\n          }\n        }\n        return startTime;\n      }\n    }, {\n      key: \"startOffset\",\n      get: function get() {\n        return this.cue.pre ? 0 : this.startTime;\n      }\n    }, {\n      key: \"startIsAligned\",\n      get: function get() {\n        if (this.startTime === 0 || this.snapOptions.out) {\n          return true;\n        }\n        var frag = this.dateRange.tagAnchor;\n        if (frag) {\n          var startTime = this.dateRange.startTime;\n          var snappedStart = getSnapToFragmentTime(startTime, frag);\n          return startTime - snappedStart < 0.1;\n        }\n        return false;\n      }\n    }, {\n      key: \"resumptionOffset\",\n      get: function get() {\n        var resumeOffset = this.resumeOffset;\n        var offset = isFiniteNumber(resumeOffset) ? resumeOffset : this.duration;\n        return this.cumulativeDuration + offset;\n      }\n    }, {\n      key: \"resumeTime\",\n      get: function get() {\n        // Primary media timeline resumption time\n        var resumeTime = this.startOffset + this.resumptionOffset;\n        if (this.snapOptions.in) {\n          var frag = this.resumeAnchor;\n          if (frag) {\n            return getSnapToFragmentTime(resumeTime, frag);\n          }\n        }\n        return resumeTime;\n      }\n    }, {\n      key: \"appendInPlace\",\n      get: function get() {\n        if (this.appendInPlaceStarted) {\n          return true;\n        }\n        if (this.appendInPlaceDisabled) {\n          return false;\n        }\n        if (!this.cue.once && !this.cue.pre &&\n        // preroll starts at startPosition before startPosition is known (live)\n        this.startIsAligned && (isNaN(this.playoutLimit) && isNaN(this.resumeOffset) || this.resumeOffset && this.duration && Math.abs(this.resumeOffset - this.duration) < ALIGNED_END_THRESHOLD_SECONDS)) {\n          return true;\n        }\n        return false;\n      },\n      set: function set(value) {\n        if (this.appendInPlaceStarted) {\n          this.resetOnResume = !value;\n          return;\n        }\n        this.appendInPlaceDisabled = !value;\n      }\n\n      // Extended timeline start time\n    }, {\n      key: \"timelineStart\",\n      get: function get() {\n        if (this._timelineStart !== null) {\n          return this._timelineStart;\n        }\n        return this.startTime;\n      },\n      set: function set(value) {\n        this._timelineStart = value;\n      }\n    }, {\n      key: \"duration\",\n      get: function get() {\n        var playoutLimit = this.playoutLimit;\n        var duration;\n        if (this._duration !== null) {\n          duration = this._duration;\n        } else if (this.dateRange.duration) {\n          duration = this.dateRange.duration;\n        } else {\n          duration = this.dateRange.plannedDuration || 0;\n        }\n        if (!isNaN(playoutLimit) && playoutLimit < duration) {\n          duration = playoutLimit;\n        }\n        return duration;\n      },\n      set: function set(value) {\n        this._duration = value;\n      }\n    }, {\n      key: \"cue\",\n      get: function get() {\n        return this.dateRange.cue;\n      }\n    }, {\n      key: \"timelineOccupancy\",\n      get: function get() {\n        if (this.dateRange.attr['X-TIMELINE-OCCUPIES'] === 'RANGE') {\n          return TimelineOccupancy.Range;\n        }\n        return TimelineOccupancy.Point;\n      }\n    }, {\n      key: \"supplementsPrimary\",\n      get: function get() {\n        return this.dateRange.attr['X-TIMELINE-STYLE'] === 'PRIMARY';\n      }\n    }, {\n      key: \"contentMayVary\",\n      get: function get() {\n        return this.dateRange.attr['X-CONTENT-MAY-VARY'] !== 'NO';\n      }\n    }, {\n      key: \"assetUrl\",\n      get: function get() {\n        return this.dateRange.attr['X-ASSET-URI'];\n      }\n    }, {\n      key: \"assetListUrl\",\n      get: function get() {\n        return this.dateRange.attr['X-ASSET-LIST'];\n      }\n    }, {\n      key: \"baseUrl\",\n      get: function get() {\n        return this.base.url;\n      }\n    }, {\n      key: \"assetListLoaded\",\n      get: function get() {\n        return this.assetList.length > 0 || this.assetListResponse !== null;\n      }\n    }]);\n  }();\n  function getSnapToFragmentTime(time, frag) {\n    return time - frag.start < frag.duration / 2 && !(Math.abs(time - (frag.start + frag.duration)) < ALIGNED_END_THRESHOLD_SECONDS) ? frag.start : frag.start + frag.duration;\n  }\n  function getInterstitialUrl(uri, sessionId, baseUrl) {\n    var url = new self.URL(uri, baseUrl);\n    if (url.protocol !== 'data:') {\n      url.searchParams.set('_HLS_primary_id', sessionId);\n    }\n    return url;\n  }\n  function getNextAssetIndex(interstitial, assetListIndex) {\n    while ((_interstitial$assetLi = interstitial.assetList[++assetListIndex]) != null && _interstitial$assetLi.error) {\n      var _interstitial$assetLi;\n    } /* no-op */\n    return assetListIndex;\n  }\n  function eventToString(interstitial) {\n    return \"[\\\"\" + interstitial.identifier + \"\\\" \" + (interstitial.cue.pre ? '<pre>' : interstitial.cue.post ? '<post>' : '') + interstitial.timelineStart.toFixed(2) + \"-\" + interstitial.resumeTime.toFixed(2) + \"]\";\n  }\n  function eventAssetToString(asset) {\n    var start = asset.timelineStart;\n    var duration = asset.duration || 0;\n    return \"[\\\"\" + asset.identifier + \"\\\" \" + start.toFixed(2) + \"-\" + (start + duration).toFixed(2) + \"]\";\n  }\n\n  var HlsAssetPlayer = /*#__PURE__*/function () {\n    function HlsAssetPlayer(HlsPlayerClass, userConfig, interstitial, assetItem) {\n      var _this = this;\n      this.hls = void 0;\n      this.interstitial = void 0;\n      this.assetItem = void 0;\n      this.tracks = null;\n      this.hasDetails = false;\n      this.mediaAttached = null;\n      this._currentTime = void 0;\n      this._bufferedEosTime = void 0;\n      this.checkPlayout = function () {\n        if (_this.reachedPlayout(_this.currentTime)) {\n          _this.hls.trigger(Events.PLAYOUT_LIMIT_REACHED, {});\n        }\n      };\n      var hls = this.hls = new HlsPlayerClass(userConfig);\n      this.interstitial = interstitial;\n      this.assetItem = assetItem;\n      var uri = assetItem.uri;\n      try {\n        uri = getInterstitialUrl(uri, userConfig.primarySessionId).href;\n      } catch (error) {\n        // Ignore error parsing ASSET_URI or adding _HLS_primary_id to it. The\n        // issue should surface as an INTERSTITIAL_ASSET_ERROR loading the asset.\n      }\n      hls.loadSource(uri);\n      var detailsLoaded = function detailsLoaded() {\n        _this.hasDetails = true;\n      };\n      hls.once(Events.LEVEL_LOADED, detailsLoaded);\n      hls.once(Events.AUDIO_TRACK_LOADED, detailsLoaded);\n      hls.once(Events.SUBTITLE_TRACK_LOADED, detailsLoaded);\n      hls.on(Events.MEDIA_ATTACHING, function (name, _ref) {\n        var media = _ref.media;\n        _this.removeMediaListeners();\n        _this.mediaAttached = media;\n        var event = _this.interstitial;\n        if (event.playoutLimit) {\n          media.addEventListener('timeupdate', _this.checkPlayout);\n          if (_this.appendInPlace) {\n            hls.on(Events.BUFFER_APPENDED, function () {\n              var bufferedEnd = _this.bufferedEnd;\n              if (_this.reachedPlayout(bufferedEnd)) {\n                _this._bufferedEosTime = bufferedEnd;\n                hls.trigger(Events.BUFFERED_TO_END, undefined);\n              }\n            });\n          }\n        }\n      });\n    }\n    var _proto = HlsAssetPlayer.prototype;\n    _proto.bufferedInPlaceToEnd = function bufferedInPlaceToEnd(media) {\n      var _this$hls;\n      if (!this.appendInPlace) {\n        return false;\n      }\n      if ((_this$hls = this.hls) != null && _this$hls.bufferedToEnd) {\n        return true;\n      }\n      if (!media || !this._bufferedEosTime) {\n        return false;\n      }\n      var start = this.timelineOffset;\n      var bufferInfo = BufferHelper.bufferInfo(media, start, 0);\n      var bufferedEnd = this.getAssetTime(bufferInfo.end);\n      return bufferedEnd >= this._bufferedEosTime - 0.02;\n    };\n    _proto.reachedPlayout = function reachedPlayout(time) {\n      var interstitial = this.interstitial;\n      var playoutLimit = interstitial.playoutLimit;\n      return this.startOffset + time >= playoutLimit;\n    };\n    _proto.getAssetTime = function getAssetTime(time) {\n      var timelineOffset = this.timelineOffset;\n      var duration = this.duration;\n      return Math.min(Math.max(0, time - timelineOffset), duration);\n    };\n    _proto.removeMediaListeners = function removeMediaListeners() {\n      var media = this.mediaAttached;\n      if (media) {\n        this._currentTime = media.currentTime;\n        this.bufferSnapShot();\n        media.removeEventListener('timeupdate', this.checkPlayout);\n      }\n    };\n    _proto.bufferSnapShot = function bufferSnapShot() {\n      if (this.mediaAttached) {\n        var _this$hls2;\n        if ((_this$hls2 = this.hls) != null && _this$hls2.bufferedToEnd) {\n          this._bufferedEosTime = this.bufferedEnd;\n        }\n      }\n    };\n    _proto.destroy = function destroy() {\n      this.removeMediaListeners();\n      this.hls.destroy();\n      // @ts-ignore\n      this.hls = this.interstitial = null;\n      // @ts-ignore\n      this.tracks = this.mediaAttached = this.checkPlayout = null;\n    };\n    _proto.attachMedia = function attachMedia(data) {\n      this.hls.attachMedia(data);\n    };\n    _proto.detachMedia = function detachMedia() {\n      this.removeMediaListeners();\n      this.mediaAttached = null;\n      this.hls.detachMedia();\n    };\n    _proto.resumeBuffering = function resumeBuffering() {\n      this.hls.resumeBuffering();\n    };\n    _proto.pauseBuffering = function pauseBuffering() {\n      this.hls.pauseBuffering();\n    };\n    _proto.transferMedia = function transferMedia() {\n      this.bufferSnapShot();\n      return this.hls.transferMedia();\n    };\n    _proto.resetDetails = function resetDetails() {\n      var hls = this.hls;\n      if (this.hasDetails) {\n        hls.stopLoad();\n        var deleteDetails = function deleteDetails(obj) {\n          return delete obj.details;\n        };\n        hls.levels.forEach(deleteDetails);\n        hls.allAudioTracks.forEach(deleteDetails);\n        hls.allSubtitleTracks.forEach(deleteDetails);\n        this.hasDetails = false;\n      }\n    };\n    _proto.on = function on(event, listener, context) {\n      this.hls.on(event, listener);\n    };\n    _proto.once = function once(event, listener, context) {\n      this.hls.once(event, listener);\n    };\n    _proto.off = function off(event, listener, context) {\n      this.hls.off(event, listener);\n    };\n    _proto.toString = function toString() {\n      var _this$hls3;\n      return \"HlsAssetPlayer: \" + eventAssetToString(this.assetItem) + \" \" + ((_this$hls3 = this.hls) == null ? void 0 : _this$hls3.sessionId) + \" \" + (this.appendInPlace ? 'append-in-place' : '');\n    };\n    return _createClass(HlsAssetPlayer, [{\n      key: \"appendInPlace\",\n      get: function get() {\n        var _this$interstitial;\n        return ((_this$interstitial = this.interstitial) == null ? void 0 : _this$interstitial.appendInPlace) || false;\n      }\n    }, {\n      key: \"destroyed\",\n      get: function get() {\n        var _this$hls4;\n        return !((_this$hls4 = this.hls) != null && _this$hls4.userConfig);\n      }\n    }, {\n      key: \"assetId\",\n      get: function get() {\n        return this.assetItem.identifier;\n      }\n    }, {\n      key: \"interstitialId\",\n      get: function get() {\n        return this.assetItem.parentIdentifier;\n      }\n    }, {\n      key: \"media\",\n      get: function get() {\n        var _this$hls5;\n        return ((_this$hls5 = this.hls) == null ? void 0 : _this$hls5.media) || null;\n      }\n    }, {\n      key: \"bufferedEnd\",\n      get: function get() {\n        var media = this.media || this.mediaAttached;\n        if (!media) {\n          if (this._bufferedEosTime) {\n            return this._bufferedEosTime;\n          }\n          return this.currentTime;\n        }\n        var bufferInfo = BufferHelper.bufferInfo(media, media.currentTime, 0.001);\n        return this.getAssetTime(bufferInfo.end);\n      }\n    }, {\n      key: \"currentTime\",\n      get: function get() {\n        var media = this.media || this.mediaAttached;\n        if (!media) {\n          return this._currentTime || 0;\n        }\n        return this.getAssetTime(media.currentTime);\n      }\n    }, {\n      key: \"duration\",\n      get: function get() {\n        var duration = this.assetItem.duration;\n        if (!duration) {\n          return 0;\n        }\n        return duration;\n      }\n    }, {\n      key: \"remaining\",\n      get: function get() {\n        var duration = this.duration;\n        if (!duration) {\n          return 0;\n        }\n        return Math.max(0, duration - this.currentTime);\n      }\n    }, {\n      key: \"startOffset\",\n      get: function get() {\n        return this.assetItem.startOffset;\n      }\n    }, {\n      key: \"timelineOffset\",\n      get: function get() {\n        var _this$hls6;\n        return ((_this$hls6 = this.hls) == null ? void 0 : _this$hls6.config.timelineOffset) || 0;\n      },\n      set: function set(value) {\n        var timelineOffset = this.timelineOffset;\n        if (value !== timelineOffset) {\n          var diff = value - timelineOffset;\n          if (Math.abs(diff) > 1 / 90000) {\n            if (this.hasDetails) {\n              throw new Error(\"Cannot set timelineOffset after playlists are loaded\");\n            }\n            this.hls.config.timelineOffset = value;\n          }\n        }\n      }\n    }]);\n  }();\n\n  var ABUTTING_THRESHOLD_SECONDS = 0.033;\n  var InterstitialsSchedule = /*#__PURE__*/function (_Logger) {\n    function InterstitialsSchedule(onScheduleUpdate, logger) {\n      var _this;\n      _this = _Logger.call(this, 'interstitials-sched', logger) || this;\n      _this.onScheduleUpdate = void 0;\n      _this.eventMap = {};\n      _this.events = null;\n      _this.items = null;\n      _this.durations = {\n        primary: 0,\n        playout: 0,\n        integrated: 0\n      };\n      _this.onScheduleUpdate = onScheduleUpdate;\n      return _this;\n    }\n    _inheritsLoose(InterstitialsSchedule, _Logger);\n    var _proto = InterstitialsSchedule.prototype;\n    _proto.destroy = function destroy() {\n      this.reset();\n      // @ts-ignore\n      this.onScheduleUpdate = null;\n    };\n    _proto.reset = function reset() {\n      this.eventMap = {};\n      this.setDurations(0, 0, 0);\n      if (this.events) {\n        this.events.forEach(function (interstitial) {\n          return interstitial.reset();\n        });\n      }\n      this.events = this.items = null;\n    };\n    _proto.resetErrorsInRange = function resetErrorsInRange(start, end) {\n      if (this.events) {\n        return this.events.reduce(function (count, interstitial) {\n          if (start <= interstitial.startOffset && end > interstitial.startOffset) {\n            delete interstitial.error;\n            return count + 1;\n          }\n          return count;\n        }, 0);\n      }\n      return 0;\n    };\n    _proto.getEvent = function getEvent(identifier) {\n      return identifier ? this.eventMap[identifier] || null : null;\n    };\n    _proto.hasEvent = function hasEvent(identifier) {\n      return identifier in this.eventMap;\n    };\n    _proto.findItemIndex = function findItemIndex(item, time) {\n      if (item.event) {\n        // Find Event Item\n        return this.findEventIndex(item.event.identifier);\n      }\n      // Find Primary Item\n      var index = -1;\n      if (item.nextEvent) {\n        index = this.findEventIndex(item.nextEvent.identifier) - 1;\n      } else if (item.previousEvent) {\n        index = this.findEventIndex(item.previousEvent.identifier) + 1;\n      }\n      var items = this.items;\n      if (items) {\n        if (!items[index]) {\n          if (time === undefined) {\n            time = item.start;\n          }\n          index = this.findItemIndexAtTime(time);\n        }\n        // Only return index of a Primary Item\n        while (index >= 0 && (_items$index = items[index]) != null && _items$index.event) {\n          var _items$index;\n          // If index found is an interstitial it is not a valid result as it should have been matched up top\n          // decrement until result is negative (not found) or a primary segment\n          index--;\n        }\n      }\n      return index;\n    };\n    _proto.findItemIndexAtTime = function findItemIndexAtTime(timelinePos, timelineType) {\n      var items = this.items;\n      if (items) {\n        for (var i = 0; i < items.length; i++) {\n          var timeRange = items[i];\n          if (timelineType && timelineType !== 'primary') {\n            timeRange = timeRange[timelineType];\n          }\n          if (timelinePos === timeRange.start || timelinePos > timeRange.start && timelinePos < timeRange.end) {\n            return i;\n          }\n        }\n      }\n      return -1;\n    };\n    _proto.findJumpRestrictedIndex = function findJumpRestrictedIndex(startIndex, endIndex) {\n      var items = this.items;\n      if (items) {\n        for (var i = startIndex; i <= endIndex; i++) {\n          if (!items[i]) {\n            break;\n          }\n          var event = items[i].event;\n          if (event != null && event.restrictions.jump && !event.appendInPlace) {\n            return i;\n          }\n        }\n      }\n      return -1;\n    };\n    _proto.findEventIndex = function findEventIndex(identifier) {\n      var items = this.items;\n      if (items) {\n        for (var i = items.length; i--;) {\n          var _items$i$event;\n          if (((_items$i$event = items[i].event) == null ? void 0 : _items$i$event.identifier) === identifier) {\n            return i;\n          }\n        }\n      }\n      return -1;\n    };\n    _proto.findAssetIndex = function findAssetIndex(event, timelinePos) {\n      var assetList = event.assetList;\n      var length = assetList.length;\n      if (length > 1) {\n        for (var i = 0; i < length; i++) {\n          var asset = assetList[i];\n          if (!asset.error) {\n            var timelineStart = asset.timelineStart;\n            if (timelinePos === timelineStart || timelinePos > timelineStart && timelinePos < timelineStart + (asset.duration || 0)) {\n              return i;\n            }\n          }\n        }\n      }\n      return 0;\n    };\n    _proto.parseInterstitialDateRanges = function parseInterstitialDateRanges(mediaSelection, enableAppendInPlace) {\n      var _this2 = this;\n      var details = mediaSelection.main.details;\n      var dateRanges = details.dateRanges;\n      var previousInterstitialEvents = this.events;\n      var interstitialEvents = this.parseDateRanges(dateRanges, {\n        url: details.url\n      }, enableAppendInPlace);\n      var ids = Object.keys(dateRanges);\n      var removedInterstitials = previousInterstitialEvents ? previousInterstitialEvents.filter(function (event) {\n        return !ids.includes(event.identifier);\n      }) : [];\n      if (interstitialEvents.length) {\n        // pre-rolls, post-rolls, and events with the same start time are played in playlist tag order\n        // all other events are ordered by start time\n        interstitialEvents.sort(function (a, b) {\n          var aPre = a.cue.pre;\n          var aPost = a.cue.post;\n          var bPre = b.cue.pre;\n          var bPost = b.cue.post;\n          if (aPre && !bPre) {\n            return -1;\n          }\n          if (bPre && !aPre) {\n            return 1;\n          }\n          if (aPost && !bPost) {\n            return 1;\n          }\n          if (bPost && !aPost) {\n            return -1;\n          }\n          if (!aPre && !bPre && !aPost && !bPost) {\n            var startA = a.startTime;\n            var startB = b.startTime;\n            if (startA !== startB) {\n              return startA - startB;\n            }\n          }\n          return a.dateRange.tagOrder - b.dateRange.tagOrder;\n        });\n      }\n      this.events = interstitialEvents;\n\n      // Clear removed DateRanges from buffered list (kills playback of active Interstitials)\n      removedInterstitials.forEach(function (interstitial) {\n        _this2.removeEvent(interstitial);\n      });\n      this.updateSchedule(mediaSelection, removedInterstitials);\n    };\n    _proto.updateSchedule = function updateSchedule(mediaSelection, removedInterstitials) {\n      if (removedInterstitials === void 0) {\n        removedInterstitials = [];\n      }\n      var events = this.events || [];\n      if (events.length || removedInterstitials.length || this.length < 2) {\n        var currentItems = this.items;\n        var updatedItems = this.parseSchedule(events, mediaSelection);\n        var updated = removedInterstitials.length || (currentItems == null ? void 0 : currentItems.length) !== updatedItems.length || updatedItems.some(function (item, i) {\n          return Math.abs(item.playout.start - currentItems[i].playout.start) > 0.005 || Math.abs(item.playout.end - currentItems[i].playout.end) > 0.005;\n        });\n        if (updated) {\n          this.items = updatedItems;\n          // call interstitials-controller onScheduleUpdated()\n          this.onScheduleUpdate(removedInterstitials, currentItems);\n        }\n      }\n    };\n    _proto.parseDateRanges = function parseDateRanges(dateRanges, baseData, enableAppendInPlace) {\n      var interstitialEvents = [];\n      var ids = Object.keys(dateRanges);\n      for (var i = 0; i < ids.length; i++) {\n        var id = ids[i];\n        var dateRange = dateRanges[id];\n        if (dateRange.isInterstitial) {\n          var interstitial = this.eventMap[id];\n          if (interstitial) {\n            // Update InterstitialEvent already parsed and mapped\n            // This retains already loaded duration and loaded asset list info\n            interstitial.setDateRange(dateRange);\n          } else {\n            interstitial = new InterstitialEvent(dateRange, baseData);\n            this.eventMap[id] = interstitial;\n            if (enableAppendInPlace === false) {\n              interstitial.appendInPlace = enableAppendInPlace;\n            }\n          }\n          interstitialEvents.push(interstitial);\n        }\n      }\n      return interstitialEvents;\n    };\n    _proto.parseSchedule = function parseSchedule(interstitialEvents, mediaSelection) {\n      var schedule = [];\n      var details = mediaSelection.main.details;\n      var primaryDuration = details.live ? Infinity : details.edge;\n      var playoutDuration = 0;\n\n      // Filter events that have errored from the schedule (Primary fallback)\n      interstitialEvents = interstitialEvents.filter(function (event) {\n        return !event.error && !(event.cue.once && event.hasPlayed);\n      });\n      if (interstitialEvents.length) {\n        // Update Schedule\n        this.resolveOffsets(interstitialEvents, mediaSelection);\n\n        // Populate Schedule with Interstitial Event and Primary Segment Items\n        var primaryPosition = 0;\n        var integratedTime = 0;\n        interstitialEvents.forEach(function (interstitial, i) {\n          var preroll = interstitial.cue.pre;\n          var postroll = interstitial.cue.post;\n          var previousEvent = interstitialEvents[i - 1] || null;\n          var appendInPlace = interstitial.appendInPlace;\n          var eventStart = postroll ? primaryDuration : interstitial.startOffset;\n          var interstitialDuration = interstitial.duration;\n          var timelineDuration = interstitial.timelineOccupancy === TimelineOccupancy.Range ? interstitialDuration : 0;\n          var resumptionOffset = interstitial.resumptionOffset;\n          var inSameStartTimeSequence = (previousEvent == null ? void 0 : previousEvent.startTime) === eventStart;\n          var start = eventStart + interstitial.cumulativeDuration;\n          var end = appendInPlace ? start + interstitialDuration : eventStart + resumptionOffset;\n          if (preroll || !postroll && eventStart <= 0) {\n            // preroll or in-progress midroll\n            var integratedStart = integratedTime;\n            integratedTime += timelineDuration;\n            interstitial.timelineStart = start;\n            var playoutStart = playoutDuration;\n            playoutDuration += interstitialDuration;\n            schedule.push({\n              event: interstitial,\n              start: start,\n              end: end,\n              playout: {\n                start: playoutStart,\n                end: playoutDuration\n              },\n              integrated: {\n                start: integratedStart,\n                end: integratedTime\n              }\n            });\n          } else if (eventStart <= primaryDuration) {\n            if (!inSameStartTimeSequence) {\n              var segmentDuration = eventStart - primaryPosition;\n              // Do not schedule a primary segment if interstitials are abutting by less than ABUTTING_THRESHOLD_SECONDS\n              if (segmentDuration > ABUTTING_THRESHOLD_SECONDS) {\n                // primary segment\n                var timelineStart = primaryPosition;\n                var _integratedStart = integratedTime;\n                integratedTime += segmentDuration;\n                var _playoutStart = playoutDuration;\n                playoutDuration += segmentDuration;\n                var primarySegment = {\n                  previousEvent: interstitialEvents[i - 1] || null,\n                  nextEvent: interstitial,\n                  start: timelineStart,\n                  end: timelineStart + segmentDuration,\n                  playout: {\n                    start: _playoutStart,\n                    end: playoutDuration\n                  },\n                  integrated: {\n                    start: _integratedStart,\n                    end: integratedTime\n                  }\n                };\n                schedule.push(primarySegment);\n              } else if (segmentDuration > 0 && previousEvent) {\n                // Add previous event `resumeTime` (based on duration or resumeOffset) so that it ends aligned with this one\n                previousEvent.cumulativeDuration += segmentDuration;\n                schedule[schedule.length - 1].end = eventStart;\n              }\n            }\n            // midroll / postroll\n            if (postroll) {\n              end = start;\n            }\n            interstitial.timelineStart = start;\n            var _integratedStart2 = integratedTime;\n            integratedTime += timelineDuration;\n            var _playoutStart2 = playoutDuration;\n            playoutDuration += interstitialDuration;\n            schedule.push({\n              event: interstitial,\n              start: start,\n              end: end,\n              playout: {\n                start: _playoutStart2,\n                end: playoutDuration\n              },\n              integrated: {\n                start: _integratedStart2,\n                end: integratedTime\n              }\n            });\n          } else {\n            // Interstitial starts after end of primary VOD - not included in schedule\n            return;\n          }\n          var resumeTime = interstitial.resumeTime;\n          if (postroll || resumeTime > primaryDuration) {\n            primaryPosition = primaryDuration;\n          } else {\n            primaryPosition = resumeTime;\n          }\n        });\n        if (primaryPosition < primaryDuration) {\n          var _schedule;\n          // last primary segment\n          var timelineStart = primaryPosition;\n          var integratedStart = integratedTime;\n          var segmentDuration = primaryDuration - primaryPosition;\n          integratedTime += segmentDuration;\n          var playoutStart = playoutDuration;\n          playoutDuration += segmentDuration;\n          schedule.push({\n            previousEvent: ((_schedule = schedule[schedule.length - 1]) == null ? void 0 : _schedule.event) || null,\n            nextEvent: null,\n            start: primaryPosition,\n            end: timelineStart + segmentDuration,\n            playout: {\n              start: playoutStart,\n              end: playoutDuration\n            },\n            integrated: {\n              start: integratedStart,\n              end: integratedTime\n            }\n          });\n        }\n        this.setDurations(primaryDuration, playoutDuration, integratedTime);\n      } else {\n        // no interstials - schedule is one primary segment\n        var start = 0;\n        schedule.push({\n          previousEvent: null,\n          nextEvent: null,\n          start: start,\n          end: primaryDuration,\n          playout: {\n            start: start,\n            end: primaryDuration\n          },\n          integrated: {\n            start: start,\n            end: primaryDuration\n          }\n        });\n        this.setDurations(primaryDuration, primaryDuration, primaryDuration);\n      }\n      return schedule;\n    };\n    _proto.setDurations = function setDurations(primary, playout, integrated) {\n      this.durations = {\n        primary: primary,\n        playout: playout,\n        integrated: integrated\n      };\n    };\n    _proto.resolveOffsets = function resolveOffsets(interstitialEvents, mediaSelection) {\n      var _this3 = this;\n      var details = mediaSelection.main.details;\n      var primaryDuration = details.live ? Infinity : details.edge;\n\n      // First resolve cumulative resumption offsets for Interstitials that start at the same DateTime\n      var cumulativeDuration = 0;\n      var lastScheduledStart = -1;\n      interstitialEvents.forEach(function (interstitial, i) {\n        var preroll = interstitial.cue.pre;\n        var postroll = interstitial.cue.post;\n        var eventStart = preroll ? 0 : postroll ? primaryDuration : interstitial.startTime;\n        _this3.updateAssetDurations(interstitial);\n\n        // X-RESUME-OFFSET values of interstitials scheduled at the same time are cumulative\n        var inSameStartTimeSequence = lastScheduledStart === eventStart;\n        if (inSameStartTimeSequence) {\n          interstitial.cumulativeDuration = cumulativeDuration;\n        } else {\n          cumulativeDuration = 0;\n          lastScheduledStart = eventStart;\n        }\n        if (!postroll && interstitial.snapOptions.in) {\n          // FIXME: Include audio playlist in snapping\n          interstitial.resumeAnchor = findFragmentByPTS(null, details.fragments, interstitial.startOffset + interstitial.resumptionOffset, 0, 0) || undefined;\n        }\n        // Check if primary fragments align with resumption offset and disable appendInPlace if they do not\n        if (interstitial.appendInPlace && !interstitial.appendInPlaceStarted) {\n          var alignedSegmentStart = _this3.primaryCanResumeInPlaceAt(interstitial, mediaSelection);\n          if (!alignedSegmentStart) {\n            interstitial.appendInPlace = false;\n          }\n        }\n        if (!interstitial.appendInPlace && i + 1 < interstitialEvents.length) {\n          // abutting Interstitials must use the same MediaSource strategy, this applies to all whether or not they are back to back:\n          var timeBetween = interstitialEvents[i + 1].startTime - interstitialEvents[i].resumeTime;\n          if (timeBetween < ABUTTING_THRESHOLD_SECONDS) {\n            interstitialEvents[i + 1].appendInPlace = false;\n            if (interstitialEvents[i + 1].appendInPlace) {\n              _this3.warn(\"Could not change append strategy for abutting event \" + interstitial);\n            }\n          }\n        }\n        // Update cumulativeDuration for next abutting interstitial with the same start date\n        var resumeOffset = isFiniteNumber(interstitial.resumeOffset) ? interstitial.resumeOffset : interstitial.duration;\n        cumulativeDuration += resumeOffset;\n      });\n    };\n    _proto.primaryCanResumeInPlaceAt = function primaryCanResumeInPlaceAt(interstitial, mediaSelection) {\n      var _this4 = this;\n      var resumeTime = interstitial.resumeTime;\n      var resumesInPlaceAt = interstitial.startTime + interstitial.resumptionOffset;\n      if (Math.abs(resumeTime - resumesInPlaceAt) > ALIGNED_END_THRESHOLD_SECONDS) {\n        this.log(\"\\\"\" + interstitial.identifier + \"\\\" resumption \" + resumeTime + \" not aligned with estimated timeline end \" + resumesInPlaceAt);\n        return false;\n      }\n      if (!mediaSelection) {\n        this.log(\"\\\"\" + interstitial.identifier + \"\\\" resumption \" + resumeTime + \" can not be aligned with media (none selected)\");\n        return false;\n      }\n      var playlists = Object.keys(mediaSelection);\n      return !playlists.some(function (playlistType) {\n        var details = mediaSelection[playlistType].details;\n        var playlistEnd = details.edge;\n        if (resumeTime >= playlistEnd) {\n          // Live playback - resumption segments are not yet available\n          _this4.log(\"\\\"\" + interstitial.identifier + \"\\\" resumption \" + resumeTime + \" past \" + playlistType + \" playlist end \" + playlistEnd);\n          // Assume alignment is possible (or reset can take place)\n          return false;\n        }\n        var startFragment = findFragmentByPTS(null, details.fragments, resumeTime);\n        if (!startFragment) {\n          _this4.log(\"\\\"\" + interstitial.identifier + \"\\\" resumption \" + resumeTime + \" does not align with any fragments in \" + playlistType + \" playlist (\" + details.fragStart + \"-\" + details.fragmentEnd + \")\");\n          return true;\n        }\n        var allowance = playlistType === 'audio' ? 0.175 : 0;\n        var alignedWithSegment = Math.abs(startFragment.start - resumeTime) < ALIGNED_END_THRESHOLD_SECONDS + allowance || Math.abs(startFragment.end - resumeTime) < ALIGNED_END_THRESHOLD_SECONDS + allowance;\n        if (!alignedWithSegment) {\n          _this4.log(\"\\\"\" + interstitial.identifier + \"\\\" resumption \" + resumeTime + \" not aligned with \" + playlistType + \" fragment bounds (\" + startFragment.start + \"-\" + startFragment.end + \" sn: \" + startFragment.sn + \" cc: \" + startFragment.cc + \")\");\n          return true;\n        }\n        return false;\n      });\n    };\n    _proto.updateAssetDurations = function updateAssetDurations(interstitial) {\n      if (!interstitial.assetListLoaded) {\n        return;\n      }\n      var eventStart = interstitial.timelineStart;\n      var sumDuration = 0;\n      var hasUnknownDuration = false;\n      var hasErrors = false;\n      interstitial.assetList.forEach(function (asset, i) {\n        var timelineStart = eventStart + sumDuration;\n        asset.startOffset = sumDuration;\n        asset.timelineStart = timelineStart;\n        hasUnknownDuration || (hasUnknownDuration = asset.duration === null);\n        hasErrors || (hasErrors = !!asset.error);\n        var duration = asset.error ? 0 : asset.duration || 0;\n        sumDuration += duration;\n      });\n      // Use the sum of known durations when it is greater than the stated duration\n      if (hasUnknownDuration && !hasErrors) {\n        interstitial.duration = Math.max(sumDuration, interstitial.duration);\n      } else {\n        interstitial.duration = sumDuration;\n      }\n    };\n    _proto.removeEvent = function removeEvent(interstitial) {\n      interstitial.reset();\n      delete this.eventMap[interstitial.identifier];\n    };\n    return _createClass(InterstitialsSchedule, [{\n      key: \"duration\",\n      get: function get() {\n        var items = this.items;\n        return items ? items[items.length - 1].end : 0;\n      }\n    }, {\n      key: \"length\",\n      get: function get() {\n        return this.items ? this.items.length : 0;\n      }\n    }, {\n      key: \"assetIdAtEnd\",\n      get: function get() {\n        var _this$items, _this$items2;\n        var interstitialAtEnd = (_this$items = this.items) == null ? void 0 : (_this$items2 = _this$items[this.length - 1]) == null ? void 0 : _this$items2.event;\n        if (interstitialAtEnd) {\n          var assetList = interstitialAtEnd.assetList;\n          var assetAtEnd = assetList[assetList.length - 1];\n          if (assetAtEnd) {\n            return assetAtEnd.identifier;\n          }\n        }\n        return null;\n      }\n    }]);\n  }(Logger);\n  function segmentToString(segment) {\n    return \"[\" + (segment.event ? '\"' + segment.event.identifier + '\"' : 'primary') + \": \" + segment.start.toFixed(2) + \"-\" + segment.end.toFixed(2) + \"]\";\n  }\n\n  var AssetListLoader = /*#__PURE__*/function () {\n    function AssetListLoader(hls) {\n      this.hls = void 0;\n      this.hls = hls;\n    }\n    var _proto = AssetListLoader.prototype;\n    _proto.destroy = function destroy() {\n      // @ts-ignore\n      this.hls = null;\n    };\n    _proto.loadAssetList = function loadAssetList(interstitial, hlsStartOffset) {\n      var _this = this;\n      var assetListUrl = interstitial.assetListUrl;\n      var url;\n      try {\n        url = getInterstitialUrl(assetListUrl, this.hls.sessionId, interstitial.baseUrl);\n      } catch (error) {\n        var errorData = this.assignAssetListError(interstitial, ErrorDetails.ASSET_LIST_LOAD_ERROR, error, assetListUrl);\n        this.hls.trigger(Events.ERROR, errorData);\n        return;\n      }\n      if (hlsStartOffset && url.protocol !== 'data:') {\n        url.searchParams.set('_HLS_start_offset', '' + hlsStartOffset);\n      }\n      var config = this.hls.config;\n      var Loader = config.loader;\n      var loader = new Loader(config);\n      var context = {\n        responseType: 'json',\n        url: url.href\n      };\n      var loadPolicy = config.interstitialAssetListLoadPolicy.default;\n      var loaderConfig = {\n        loadPolicy: loadPolicy,\n        timeout: loadPolicy.maxLoadTimeMs,\n        maxRetry: 0,\n        retryDelay: 0,\n        maxRetryDelay: 0\n      };\n      var callbacks = {\n        onSuccess: function onSuccess(response, stats, context, networkDetails) {\n          var assetListResponse = response.data;\n          var assets = assetListResponse == null ? void 0 : assetListResponse.ASSETS;\n          if (!Array.isArray(assets)) {\n            var _errorData = _this.assignAssetListError(interstitial, ErrorDetails.ASSET_LIST_PARSING_ERROR, new Error(\"Invalid interstitial asset list\"), context.url, stats, networkDetails);\n            _this.hls.trigger(Events.ERROR, _errorData);\n            return;\n          }\n          interstitial.assetListResponse = assetListResponse;\n          _this.hls.trigger(Events.ASSET_LIST_LOADED, {\n            event: interstitial,\n            assetListResponse: assetListResponse,\n            networkDetails: networkDetails\n          });\n        },\n        onError: function onError(error, context, networkDetails, stats) {\n          var errorData = _this.assignAssetListError(interstitial, ErrorDetails.ASSET_LIST_LOAD_ERROR, new Error(\"Error loading X-ASSET-LIST: HTTP status \" + error.code + \" \" + error.text + \" (\" + context.url + \")\"), context.url, stats, networkDetails);\n          _this.hls.trigger(Events.ERROR, errorData);\n        },\n        onTimeout: function onTimeout(stats, context, networkDetails) {\n          var errorData = _this.assignAssetListError(interstitial, ErrorDetails.ASSET_LIST_LOAD_TIMEOUT, new Error(\"Timeout loading X-ASSET-LIST (\" + context.url + \")\"), context.url, stats, networkDetails);\n          _this.hls.trigger(Events.ERROR, errorData);\n        }\n      };\n      loader.load(context, loaderConfig, callbacks);\n      this.hls.trigger(Events.ASSET_LIST_LOADING, {\n        event: interstitial\n      });\n      return loader;\n    };\n    _proto.assignAssetListError = function assignAssetListError(interstitial, details, error, url, stats, networkDetails) {\n      interstitial.error = error;\n      return {\n        type: ErrorTypes.NETWORK_ERROR,\n        details: details,\n        fatal: false,\n        interstitial: interstitial,\n        url: url,\n        error: error,\n        networkDetails: networkDetails,\n        stats: stats\n      };\n    };\n    return AssetListLoader;\n  }();\n\n  function playWithCatch(media) {\n    media == null ? void 0 : media.play().catch(function () {\n      /* no-op */\n    });\n  }\n  var InterstitialsController = /*#__PURE__*/function (_Logger) {\n    function InterstitialsController(hls, HlsPlayerClass) {\n      var _this;\n      _this = _Logger.call(this, 'interstitials', hls.logger) || this;\n      _this.HlsPlayerClass = void 0;\n      _this.hls = void 0;\n      _this.assetListLoader = void 0;\n      // Last updated LevelDetails\n      _this.mediaSelection = null;\n      _this.altSelection = null;\n      // Media and MediaSource/SourceBuffers\n      _this.media = null;\n      _this.detachedData = null;\n      _this.requiredTracks = null;\n      // Public Interface for Interstitial playback state and control\n      _this.manager = null;\n      // Interstitial Asset Players\n      _this.playerQueue = [];\n      // Timeline position tracking\n      _this.bufferedPos = -1;\n      _this.timelinePos = -1;\n      // Schedule\n      _this.schedule = void 0;\n      // Schedule playback and buffering state\n      _this.playingItem = null;\n      _this.bufferingItem = null;\n      _this.waitingItem = null;\n      _this.endedItem = null;\n      _this.playingAsset = null;\n      _this.endedAsset = null;\n      _this.bufferingAsset = null;\n      _this.shouldPlay = false;\n      _this.onPlay = function () {\n        _this.shouldPlay = true;\n      };\n      _this.onPause = function () {\n        _this.shouldPlay = false;\n      };\n      _this.onSeeking = function () {\n        var currentTime = _this.currentTime;\n        if (currentTime === undefined || _this.playbackDisabled) {\n          return;\n        }\n        var diff = currentTime - _this.timelinePos;\n        var roundingError = Math.abs(diff) < 1 / 705600000; // one flick\n        if (roundingError) {\n          return;\n        }\n        var backwardSeek = diff <= -0.01;\n        _this.timelinePos = currentTime;\n        _this.bufferedPos = currentTime;\n\n        // Check if seeking out of an item\n        var playingItem = _this.playingItem;\n        if (!playingItem) {\n          _this.checkBuffer();\n          return;\n        }\n        if (backwardSeek) {\n          var resetCount = _this.schedule.resetErrorsInRange(currentTime, currentTime - diff);\n          if (resetCount) {\n            _this.updateSchedule();\n          }\n        }\n        _this.checkBuffer();\n        if (backwardSeek && currentTime < playingItem.start || currentTime >= playingItem.end) {\n          var _this$media;\n          var scheduleIndex = _this.schedule.findItemIndexAtTime(_this.timelinePos);\n          if (!_this.isInterstitial(playingItem) && (_this$media = _this.media) != null && _this$media.paused) {\n            _this.shouldPlay = false;\n          }\n          if (!backwardSeek) {\n            // check if an Interstitial between the current item and target item has an X-RESTRICT JUMP restriction\n            var playingIndex = _this.findItemIndex(playingItem);\n            if (scheduleIndex > playingIndex) {\n              var jumpIndex = _this.schedule.findJumpRestrictedIndex(playingIndex + 1, scheduleIndex);\n              if (jumpIndex > playingIndex) {\n                _this.setSchedulePosition(jumpIndex);\n                return;\n              }\n            }\n          }\n          _this.setSchedulePosition(scheduleIndex);\n          return;\n        }\n        // Check if seeking out of an asset (assumes same item following above check)\n        var playingAsset = _this.playingAsset;\n        if (!playingAsset) {\n          // restart Interstitial at end\n          if (_this.playingLastItem && _this.isInterstitial(playingItem)) {\n            var restartAsset = playingItem.event.assetList[0];\n            if (restartAsset) {\n              _this.endedItem = _this.playingItem;\n              _this.playingItem = null;\n              _this.setScheduleToAssetAtTime(currentTime, restartAsset);\n            }\n          }\n          return;\n        }\n        var start = playingAsset.timelineStart;\n        var duration = playingAsset.duration || 0;\n        if (backwardSeek && currentTime < start || currentTime >= start + duration) {\n          _this.setScheduleToAssetAtTime(currentTime, playingAsset);\n        }\n      };\n      _this.onTimeupdate = function () {\n        var currentTime = _this.currentTime;\n        if (currentTime === undefined || _this.playbackDisabled) {\n          return;\n        }\n\n        // Only allow timeupdate to advance primary position, seeking is used for jumping back\n        // this prevents primaryPos from being reset to 0 after re-attach\n        if (currentTime > _this.timelinePos) {\n          _this.timelinePos = currentTime;\n          if (currentTime > _this.bufferedPos) {\n            _this.checkBuffer();\n          }\n        } else {\n          return;\n        }\n\n        // Check if playback has entered the next item\n        var playingItem = _this.playingItem;\n        if (!playingItem || _this.playingLastItem) {\n          return;\n        }\n        if (currentTime >= playingItem.end) {\n          _this.timelinePos = playingItem.end;\n          var playingIndex = _this.findItemIndex(playingItem);\n          _this.setSchedulePosition(playingIndex + 1);\n        }\n        // Check if playback has entered the next asset\n        var playingAsset = _this.playingAsset;\n        if (!playingAsset) {\n          return;\n        }\n        var end = playingAsset.timelineStart + (playingAsset.duration || 0);\n        if (currentTime >= end) {\n          _this.setScheduleToAssetAtTime(currentTime, playingAsset);\n        }\n      };\n      // Schedule update callback\n      _this.onScheduleUpdate = function (removedInterstitials, previousItems) {\n        var schedule = _this.schedule;\n        var playingItem = _this.playingItem;\n        var interstitialEvents = schedule.events || [];\n        var scheduleItems = schedule.items || [];\n        var durations = schedule.durations;\n        var removedIds = removedInterstitials.map(function (interstitial) {\n          return interstitial.identifier;\n        });\n        var interstitialsUpdated = !!(interstitialEvents.length || removedIds.length);\n        if (interstitialsUpdated || previousItems) {\n          _this.log(\"INTERSTITIALS_UPDATED (\" + interstitialEvents.length + \"): \" + interstitialEvents + \"\\nSchedule: \" + scheduleItems.map(function (seg) {\n            return segmentToString(seg);\n          }) + \" pos: \" + _this.timelinePos);\n        }\n        if (removedIds.length) {\n          _this.log(\"Removed events \" + removedIds);\n        }\n        _this.playerQueue.forEach(function (player) {\n          if (player.interstitial.appendInPlace) {\n            var timelineStart = player.assetItem.timelineStart;\n            var diff = player.timelineOffset - timelineStart;\n            if (diff) {\n              try {\n                player.timelineOffset = timelineStart;\n              } catch (e) {\n                if (Math.abs(diff) > ALIGNED_END_THRESHOLD_SECONDS) {\n                  _this.warn(e + \" (\\\"\" + player.assetId + \"\\\" \" + player.timelineOffset + \"->\" + timelineStart + \")\");\n                }\n              }\n            }\n          }\n        });\n\n        // Update schedule item references\n        // Do not replace Interstitial playingItem without a match - used for INTERSTITIAL_ASSET_ENDED and INTERSTITIAL_ENDED\n        var trimInPlaceForPlayout = null;\n        if (playingItem) {\n          var updatedPlayingItem = _this.updateItem(playingItem, _this.timelinePos);\n          if (_this.itemsMatch(playingItem, updatedPlayingItem)) {\n            _this.playingItem = updatedPlayingItem;\n            _this.waitingItem = _this.endedItem = null;\n            trimInPlaceForPlayout = function trimInPlaceForPlayout() {\n              return _this.trimInPlace(updatedPlayingItem, playingItem);\n            };\n          }\n        } else {\n          // Clear waitingItem if it has been removed from the schedule\n          _this.waitingItem = _this.updateItem(_this.waitingItem);\n          _this.endedItem = _this.updateItem(_this.endedItem);\n        }\n        // Do not replace Interstitial bufferingItem without a match - used for transfering media element or source\n        var bufferingItem = _this.bufferingItem;\n        if (bufferingItem) {\n          var updatedBufferingItem = _this.updateItem(bufferingItem, _this.bufferedPos);\n          if (_this.itemsMatch(bufferingItem, updatedBufferingItem)) {\n            _this.bufferingItem = updatedBufferingItem;\n            trimInPlaceForPlayout || (trimInPlaceForPlayout = function trimInPlaceForPlayout() {\n              return _this.trimInPlace(updatedBufferingItem, bufferingItem);\n            });\n          } else if (bufferingItem.event) {\n            // Interstitial removed from schedule (Live -> VOD or other scenario where Start Date is outside the range of VOD Playlist)\n            _this.bufferingItem = _this.playingItem;\n            _this.clearInterstitial(bufferingItem.event, null);\n          }\n        }\n        removedInterstitials.forEach(function (interstitial) {\n          interstitial.assetList.forEach(function (asset) {\n            _this.clearAssetPlayer(asset.identifier, null);\n          });\n        });\n        if (interstitialsUpdated || previousItems) {\n          _this.hls.trigger(Events.INTERSTITIALS_UPDATED, {\n            events: interstitialEvents.slice(0),\n            schedule: scheduleItems.slice(0),\n            durations: durations,\n            removedIds: removedIds\n          });\n          if (_this.isInterstitial(playingItem) && removedIds.includes(playingItem.event.identifier)) {\n            _this.warn(\"Interstitial \\\"\" + playingItem.event.identifier + \"\\\" removed while playing\");\n            _this.primaryFallback(playingItem.event);\n            return;\n          }\n          if (trimInPlaceForPlayout) {\n            trimInPlaceForPlayout();\n          }\n\n          // Check is buffered to new Interstitial event boundary\n          // (Live update publishes Interstitial with new segment)\n          _this.checkBuffer();\n        }\n      };\n      _this.hls = hls;\n      _this.HlsPlayerClass = HlsPlayerClass;\n      _this.assetListLoader = new AssetListLoader(hls);\n      _this.schedule = new InterstitialsSchedule(_this.onScheduleUpdate, hls.logger);\n      _this.registerListeners();\n      return _this;\n    }\n    _inheritsLoose(InterstitialsController, _Logger);\n    var _proto = InterstitialsController.prototype;\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.on(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n      hls.on(Events.AUDIO_TRACK_UPDATED, this.onAudioTrackUpdated, this);\n      hls.on(Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);\n      hls.on(Events.SUBTITLE_TRACK_UPDATED, this.onSubtitleTrackUpdated, this);\n      hls.on(Events.EVENT_CUE_ENTER, this.onInterstitialCueEnter, this);\n      hls.on(Events.ASSET_LIST_LOADED, this.onAssetListLoaded, this);\n      hls.on(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n      hls.on(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n      hls.on(Events.BUFFERED_TO_END, this.onBufferedToEnd, this);\n      hls.on(Events.MEDIA_ENDED, this.onMediaEnded, this);\n      hls.on(Events.ERROR, this.onError, this);\n      hls.on(Events.DESTROYING, this.onDestroying, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      if (!hls) {\n        return;\n      }\n      hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.off(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n      hls.off(Events.AUDIO_TRACK_UPDATED, this.onAudioTrackUpdated, this);\n      hls.off(Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);\n      hls.off(Events.SUBTITLE_TRACK_UPDATED, this.onSubtitleTrackUpdated, this);\n      hls.off(Events.EVENT_CUE_ENTER, this.onInterstitialCueEnter, this);\n      hls.off(Events.ASSET_LIST_LOADED, this.onAssetListLoaded, this);\n      hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n      hls.off(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n      hls.off(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n      hls.off(Events.BUFFERED_TO_END, this.onBufferedToEnd, this);\n      hls.off(Events.MEDIA_ENDED, this.onMediaEnded, this);\n      hls.off(Events.ERROR, this.onError, this);\n      hls.off(Events.DESTROYING, this.onDestroying, this);\n    };\n    _proto.startLoad = function startLoad() {\n      // TODO: startLoad - check for waitingItem and retry by resetting schedule\n      this.resumeBuffering();\n    };\n    _proto.stopLoad = function stopLoad() {\n      // TODO: stopLoad - stop all scheule.events[].assetListLoader?.abort() then delete the loaders\n      this.pauseBuffering();\n    };\n    _proto.resumeBuffering = function resumeBuffering() {\n      var _this$getBufferingPla;\n      (_this$getBufferingPla = this.getBufferingPlayer()) == null ? void 0 : _this$getBufferingPla.resumeBuffering();\n    };\n    _proto.pauseBuffering = function pauseBuffering() {\n      var _this$getBufferingPla2;\n      (_this$getBufferingPla2 = this.getBufferingPlayer()) == null ? void 0 : _this$getBufferingPla2.pauseBuffering();\n    };\n    _proto.destroy = function destroy() {\n      this.unregisterListeners();\n      this.stopLoad();\n      if (this.assetListLoader) {\n        this.assetListLoader.destroy();\n      }\n      this.emptyPlayerQueue();\n      this.clearScheduleState();\n      if (this.schedule) {\n        this.schedule.destroy();\n      }\n      this.media = this.detachedData = this.mediaSelection = this.requiredTracks = this.altSelection = this.manager = null;\n      // @ts-ignore\n      this.hls = this.HlsPlayerClass = this.schedule = this.log = null;\n      // @ts-ignore\n      this.assetListLoader = null;\n      // @ts-ignore\n      this.onPlay = this.onPause = this.onSeeking = this.onTimeupdate = null;\n      // @ts-ignore\n      this.onScheduleUpdate = null;\n    };\n    _proto.onDestroying = function onDestroying() {\n      var media = this.primaryMedia || this.media;\n      if (media) {\n        this.removeMediaListeners(media);\n      }\n    };\n    _proto.removeMediaListeners = function removeMediaListeners(media) {\n      removeEventListener(media, 'play', this.onPlay);\n      removeEventListener(media, 'pause', this.onPause);\n      removeEventListener(media, 'seeking', this.onSeeking);\n      removeEventListener(media, 'timeupdate', this.onTimeupdate);\n    };\n    _proto.onMediaAttaching = function onMediaAttaching(event, data) {\n      var media = this.media = data.media;\n      addEventListener(media, 'seeking', this.onSeeking);\n      addEventListener(media, 'timeupdate', this.onTimeupdate);\n      addEventListener(media, 'play', this.onPlay);\n      addEventListener(media, 'pause', this.onPause);\n    };\n    _proto.onMediaAttached = function onMediaAttached(event, data) {\n      var playingItem = this.effectivePlayingItem;\n      var detachedMedia = this.detachedData;\n      this.detachedData = null;\n      if (playingItem === null) {\n        this.checkStart();\n      } else if (!detachedMedia) {\n        // Resume schedule after detached externally\n        this.clearScheduleState();\n        var playingIndex = this.findItemIndex(playingItem);\n        this.setSchedulePosition(playingIndex);\n      }\n    };\n    _proto.clearScheduleState = function clearScheduleState() {\n      this.playingItem = this.bufferingItem = this.waitingItem = this.endedItem = this.playingAsset = this.endedAsset = this.bufferingAsset = null;\n    };\n    _proto.onMediaDetaching = function onMediaDetaching(event, data) {\n      var transferringMedia = !!data.transferMedia;\n      var media = this.media;\n      this.media = null;\n      if (transferringMedia) {\n        return;\n      }\n      if (media) {\n        this.removeMediaListeners(media);\n      }\n      // If detachMedia is called while in an Interstitial, detach the asset player as well and reset the schedule position\n      if (this.detachedData) {\n        var player = this.getBufferingPlayer();\n        if (player) {\n          this.playingAsset = this.endedAsset = this.bufferingAsset = this.bufferingItem = this.waitingItem = this.detachedData = null;\n          player.detachMedia();\n        }\n        this.shouldPlay = false;\n      }\n    };\n    _proto.isInterstitial = function isInterstitial(item) {\n      return !!(item != null && item.event);\n    };\n    _proto.retreiveMediaSource = function retreiveMediaSource(assetId, toSegment) {\n      var player = this.getAssetPlayer(assetId);\n      if (player) {\n        this.transferMediaFromPlayer(player, toSegment);\n      }\n    };\n    _proto.transferMediaFromPlayer = function transferMediaFromPlayer(player, toSegment) {\n      var appendInPlace = player.interstitial.appendInPlace;\n      var playerMedia = player.media;\n      if (appendInPlace && playerMedia === this.primaryMedia) {\n        this.bufferingAsset = null;\n        if (!toSegment || this.isInterstitial(toSegment) && !toSegment.event.appendInPlace) {\n          // MediaSource cannot be transfered back to an Interstitial that requires a source reset\n          // no-op when toSegment is undefined\n          if (toSegment && playerMedia) {\n            this.detachedData = {\n              media: playerMedia\n            };\n            return;\n          }\n        }\n        var attachMediaSourceData = player.transferMedia();\n        this.log(\"transfer MediaSource from \" + player + \" \" + stringify(attachMediaSourceData));\n        this.detachedData = attachMediaSourceData;\n      } else if (toSegment && playerMedia) {\n        this.shouldPlay || (this.shouldPlay = !playerMedia.paused);\n      }\n    };\n    _proto.transferMediaTo = function transferMediaTo(player, media) {\n      var _this$detachedData,\n        _this2 = this,\n        _attachMediaSourceDat;\n      if (player.media === media) {\n        return;\n      }\n      var attachMediaSourceData = null;\n      var primaryPlayer = this.hls;\n      var isAssetPlayer = player !== primaryPlayer;\n      var appendInPlace = isAssetPlayer && player.interstitial.appendInPlace;\n      var detachedMediaSource = (_this$detachedData = this.detachedData) == null ? void 0 : _this$detachedData.mediaSource;\n      var logFromSource;\n      if (primaryPlayer.media) {\n        if (appendInPlace) {\n          attachMediaSourceData = primaryPlayer.transferMedia();\n          this.detachedData = attachMediaSourceData;\n        }\n        logFromSource = \"Primary\";\n      } else if (detachedMediaSource) {\n        var bufferingPlayer = this.getBufferingPlayer();\n        if (bufferingPlayer) {\n          attachMediaSourceData = bufferingPlayer.transferMedia();\n          logFromSource = \"\" + bufferingPlayer;\n        } else {\n          logFromSource = \"detached MediaSource\";\n        }\n      } else {\n        logFromSource = \"detached media\";\n      }\n      if (!attachMediaSourceData) {\n        if (detachedMediaSource) {\n          attachMediaSourceData = this.detachedData;\n          this.log(\"using detachedData: MediaSource \" + stringify(attachMediaSourceData));\n        } else if (!this.detachedData || primaryPlayer.media === media) {\n          // Keep interstitial media transition consistent\n          var playerQueue = this.playerQueue;\n          if (playerQueue.length > 1) {\n            playerQueue.forEach(function (queuedPlayer) {\n              if (isAssetPlayer && queuedPlayer.interstitial.appendInPlace !== appendInPlace) {\n                var interstitial = queuedPlayer.interstitial;\n                _this2.clearInterstitial(queuedPlayer.interstitial, null);\n                interstitial.appendInPlace = false;\n                if (interstitial.appendInPlace) {\n                  _this2.warn(\"Could not change append strategy for queued assets \" + interstitial);\n                }\n              }\n            });\n          }\n          this.hls.detachMedia();\n          this.detachedData = {\n            media: media\n          };\n        }\n      }\n      var transferring = attachMediaSourceData && 'mediaSource' in attachMediaSourceData && ((_attachMediaSourceDat = attachMediaSourceData.mediaSource) == null ? void 0 : _attachMediaSourceDat.readyState) !== 'closed';\n      var dataToAttach = transferring && attachMediaSourceData ? attachMediaSourceData : media;\n      this.log((transferring ? 'transfering MediaSource' : 'attaching media') + \" to \" + (isAssetPlayer ? player : 'Primary') + \" from \" + logFromSource);\n      if (dataToAttach === attachMediaSourceData) {\n        var isAssetAtEndOfSchedule = isAssetPlayer && player.assetId === this.schedule.assetIdAtEnd;\n        // Prevent asset players from marking EoS on transferred MediaSource\n        dataToAttach.overrides = {\n          duration: this.schedule.duration,\n          endOfStream: !isAssetPlayer || isAssetAtEndOfSchedule,\n          cueRemoval: !isAssetPlayer\n        };\n      }\n      player.attachMedia(dataToAttach);\n    };\n    _proto.onInterstitialCueEnter = function onInterstitialCueEnter() {\n      this.onTimeupdate();\n    };\n    // Scheduling methods\n    _proto.checkStart = function checkStart() {\n      var schedule = this.schedule;\n      var interstitialEvents = schedule.events;\n      if (!interstitialEvents || this.playbackDisabled || !this.media) {\n        return;\n      }\n      // Check buffered to pre-roll\n      if (this.bufferedPos === -1) {\n        this.bufferedPos = 0;\n      }\n      // Start stepping through schedule when playback begins for the first time and we have a pre-roll\n      var timelinePos = this.timelinePos;\n      var effectivePlayingItem = this.effectivePlayingItem;\n      if (timelinePos === -1) {\n        var startPosition = this.hls.startPosition;\n        this.timelinePos = startPosition;\n        if (interstitialEvents.length && interstitialEvents[0].cue.pre) {\n          var index = schedule.findEventIndex(interstitialEvents[0].identifier);\n          this.setSchedulePosition(index);\n        } else if (startPosition >= 0 || !this.primaryLive) {\n          var start = this.timelinePos = startPosition > 0 ? startPosition : 0;\n          var _index = schedule.findItemIndexAtTime(start);\n          this.setSchedulePosition(_index);\n        }\n      } else if (effectivePlayingItem && !this.playingItem) {\n        var _index2 = schedule.findItemIndex(effectivePlayingItem);\n        this.setSchedulePosition(_index2);\n      }\n    };\n    _proto.advanceAfterAssetEnded = function advanceAfterAssetEnded(interstitial, index, assetListIndex) {\n      var nextAssetIndex = getNextAssetIndex(interstitial, assetListIndex);\n      if (!interstitial.isAssetPastPlayoutLimit(nextAssetIndex)) {\n        // Advance to next asset list item\n        this.setSchedulePosition(index, nextAssetIndex);\n      } else {\n        // Advance to next schedule segment\n        // check if we've reached the end of the program\n        var scheduleItems = this.schedule.items;\n        if (scheduleItems) {\n          var nextIndex = index + 1;\n          var scheduleLength = scheduleItems.length;\n          if (nextIndex >= scheduleLength) {\n            this.setSchedulePosition(-1);\n            return;\n          }\n          var resumptionTime = interstitial.resumeTime;\n          if (this.timelinePos < resumptionTime) {\n            this.timelinePos = resumptionTime;\n            this.checkBuffer();\n          }\n          this.setSchedulePosition(nextIndex);\n        }\n      }\n    };\n    _proto.setScheduleToAssetAtTime = function setScheduleToAssetAtTime(time, playingAsset) {\n      var schedule = this.schedule;\n      var parentIdentifier = playingAsset.parentIdentifier;\n      var interstitial = schedule.getEvent(parentIdentifier);\n      if (interstitial) {\n        var itemIndex = schedule.findEventIndex(parentIdentifier);\n        var assetListIndex = schedule.findAssetIndex(interstitial, time);\n        this.advanceAfterAssetEnded(interstitial, itemIndex, assetListIndex - 1);\n      }\n    };\n    _proto.setSchedulePosition = function setSchedulePosition(index, assetListIndex) {\n      var scheduleItems = this.schedule.items;\n      if (!scheduleItems || this.playbackDisabled) {\n        return;\n      }\n      this.log(\"setSchedulePosition \" + index + \", \" + assetListIndex);\n      var scheduledItem = index >= 0 ? scheduleItems[index] : null;\n      // Cleanup current item / asset\n      var currentItem = this.playingItem;\n      var playingLastItem = this.playingLastItem;\n      if (this.isInterstitial(currentItem)) {\n        var _interstitial$assetLi;\n        var interstitial = currentItem.event;\n        var playingAsset = this.playingAsset;\n        var assetId = playingAsset == null ? void 0 : playingAsset.identifier;\n        var player = assetId ? this.getAssetPlayer(assetId) : null;\n        if (player && assetId && (!this.eventItemsMatch(currentItem, scheduledItem) || assetListIndex !== undefined && assetId !== ((_interstitial$assetLi = interstitial.assetList) == null ? void 0 : _interstitial$assetLi[assetListIndex].identifier))) {\n          var _this$detachedData2;\n          var playingAssetListIndex = interstitial.findAssetIndex(playingAsset);\n          this.log(\"INTERSTITIAL_ASSET_ENDED \" + (playingAssetListIndex + 1) + \"/\" + interstitial.assetList.length + \" \" + eventAssetToString(playingAsset));\n          this.endedAsset = playingAsset;\n          this.playingAsset = null;\n          this.hls.trigger(Events.INTERSTITIAL_ASSET_ENDED, {\n            asset: playingAsset,\n            assetListIndex: playingAssetListIndex,\n            event: interstitial,\n            schedule: scheduleItems.slice(0),\n            scheduleIndex: index,\n            player: player\n          });\n          this.retreiveMediaSource(assetId, scheduledItem);\n          if (player.media && !((_this$detachedData2 = this.detachedData) != null && _this$detachedData2.mediaSource)) {\n            player.detachMedia();\n          }\n        }\n        if (!this.eventItemsMatch(currentItem, scheduledItem)) {\n          this.endedItem = currentItem;\n          this.playingItem = null;\n          this.log(\"INTERSTITIAL_ENDED \" + interstitial + \" \" + segmentToString(currentItem));\n          interstitial.hasPlayed = true;\n          this.hls.trigger(Events.INTERSTITIAL_ENDED, {\n            event: interstitial,\n            schedule: scheduleItems.slice(0),\n            scheduleIndex: index\n          });\n          // Exiting an Interstitial\n          if (interstitial.cue.once) {\n            // Remove interstitial with CUE attribute value of ONCE after it has played\n            this.updateSchedule();\n            var items = this.schedule.items;\n            if (scheduledItem && items) {\n              var updatedIndex = this.schedule.findItemIndex(scheduledItem);\n              this.advanceSchedule(updatedIndex, items, assetListIndex, currentItem, playingLastItem);\n            }\n            return;\n          }\n        }\n      }\n      this.advanceSchedule(index, scheduleItems, assetListIndex, currentItem, playingLastItem);\n    };\n    _proto.advanceSchedule = function advanceSchedule(index, scheduleItems, assetListIndex, currentItem, playedLastItem) {\n      var _this3 = this;\n      var scheduledItem = index >= 0 ? scheduleItems[index] : null;\n      var media = this.primaryMedia;\n      // Cleanup out of range Interstitials\n      var playerQueue = this.playerQueue;\n      if (playerQueue.length) {\n        playerQueue.forEach(function (player) {\n          var interstitial = player.interstitial;\n          var queuedIndex = _this3.schedule.findEventIndex(interstitial.identifier);\n          if (queuedIndex < index || queuedIndex > index + 1) {\n            _this3.clearInterstitial(interstitial, scheduledItem);\n          }\n        });\n      }\n      // Setup scheduled item\n      if (this.isInterstitial(scheduledItem)) {\n        this.timelinePos = Math.min(Math.max(this.timelinePos, scheduledItem.start), scheduledItem.end);\n        // Handle Interstitial\n        var interstitial = scheduledItem.event;\n        // find asset index\n        if (assetListIndex === undefined) {\n          assetListIndex = this.schedule.findAssetIndex(interstitial, this.timelinePos);\n          var assetIndexCandidate = getNextAssetIndex(interstitial, assetListIndex - 1);\n          if (interstitial.isAssetPastPlayoutLimit(assetIndexCandidate)) {\n            this.advanceAfterAssetEnded(interstitial, index, assetListIndex);\n            return;\n          }\n          assetListIndex = assetIndexCandidate;\n        }\n        // Ensure Interstitial is enqueued\n        var waitingItem = this.waitingItem;\n        if (!this.assetsBuffered(scheduledItem, media)) {\n          this.setBufferingItem(scheduledItem);\n        }\n        var player = this.preloadAssets(interstitial, assetListIndex);\n        if (!this.eventItemsMatch(scheduledItem, waitingItem || currentItem)) {\n          this.waitingItem = scheduledItem;\n          this.log(\"INTERSTITIAL_STARTED \" + segmentToString(scheduledItem) + \" \" + (interstitial.appendInPlace ? 'append in place' : ''));\n          this.hls.trigger(Events.INTERSTITIAL_STARTED, {\n            event: interstitial,\n            schedule: scheduleItems.slice(0),\n            scheduleIndex: index\n          });\n        }\n        if (!interstitial.assetListLoaded) {\n          // Waiting at end of primary content segment\n          // Expect setSchedulePosition to be called again once ASSET-LIST is loaded\n          this.log(\"Waiting for ASSET-LIST to complete loading \" + interstitial);\n          return;\n        }\n        if (interstitial.assetListLoader) {\n          interstitial.assetListLoader.destroy();\n          interstitial.assetListLoader = undefined;\n        }\n        if (!media) {\n          this.log(\"Waiting for attachMedia to start Interstitial \" + interstitial);\n          return;\n        }\n        // Update schedule and asset list position now that it can start\n        this.waitingItem = this.endedItem = null;\n        this.playingItem = scheduledItem;\n\n        // If asset-list is empty or missing asset index, advance to next item\n        var assetItem = interstitial.assetList[assetListIndex];\n        if (!assetItem) {\n          var nextItem = scheduleItems[index + 1];\n          var _media = this.media;\n          if (nextItem && _media && !this.isInterstitial(nextItem) && _media.currentTime < nextItem.start) {\n            _media.currentTime = this.timelinePos = nextItem.start;\n          }\n          this.advanceAfterAssetEnded(interstitial, index, assetListIndex || 0);\n          return;\n        }\n\n        // Start Interstitial Playback\n        if (!player) {\n          player = this.getAssetPlayer(assetItem.identifier);\n        }\n        if (player === null || player.destroyed) {\n          var assetListLength = interstitial.assetList.length;\n          this.warn(\"asset \" + (assetListIndex + 1) + \"/\" + assetListLength + \" player destroyed \" + interstitial);\n          player = this.createAssetPlayer(interstitial, assetItem, assetListIndex);\n        }\n        if (!this.eventItemsMatch(scheduledItem, this.bufferingItem)) {\n          if (interstitial.appendInPlace && this.isAssetBuffered(assetItem)) {\n            return;\n          }\n        }\n        this.startAssetPlayer(player, assetListIndex, scheduleItems, index, media);\n        if (this.shouldPlay) {\n          playWithCatch(player.media);\n        }\n      } else if (scheduledItem !== null) {\n        this.resumePrimary(scheduledItem, index, currentItem);\n        if (this.shouldPlay) {\n          playWithCatch(this.hls.media);\n        }\n      } else if (playedLastItem && this.isInterstitial(currentItem)) {\n        // Maintain playingItem state at end of schedule (setSchedulePosition(-1) called to end program)\n        // this allows onSeeking handler to update schedule position\n        this.endedItem = null;\n        this.playingItem = currentItem;\n        if (!currentItem.event.appendInPlace) {\n          // Media must be re-attached to resume primary schedule if not sharing source\n          this.attachPrimary(this.schedule.durations.primary, null);\n        }\n      }\n    };\n    _proto.resumePrimary = function resumePrimary(scheduledItem, index, fromItem) {\n      var _this$detachedData3;\n      this.playingItem = scheduledItem;\n      this.playingAsset = this.endedAsset = null;\n      this.waitingItem = this.endedItem = null;\n      this.bufferedToItem(scheduledItem);\n      this.log(\"resuming \" + segmentToString(scheduledItem));\n      if (!((_this$detachedData3 = this.detachedData) != null && _this$detachedData3.mediaSource)) {\n        var timelinePos = this.timelinePos;\n        if (timelinePos < scheduledItem.start || timelinePos >= scheduledItem.end) {\n          timelinePos = this.getPrimaryResumption(scheduledItem, index);\n          this.timelinePos = timelinePos;\n        }\n        this.attachPrimary(timelinePos, scheduledItem);\n      }\n      if (!fromItem) {\n        return;\n      }\n      var scheduleItems = this.schedule.items;\n      if (!scheduleItems) {\n        return;\n      }\n      this.log(\"INTERSTITIALS_PRIMARY_RESUMED \" + segmentToString(scheduledItem));\n      this.hls.trigger(Events.INTERSTITIALS_PRIMARY_RESUMED, {\n        schedule: scheduleItems.slice(0),\n        scheduleIndex: index\n      });\n      this.checkBuffer();\n    };\n    _proto.getPrimaryResumption = function getPrimaryResumption(scheduledItem, index) {\n      var itemStart = scheduledItem.start;\n      if (this.primaryLive) {\n        var details = this.primaryDetails;\n        if (index === 0) {\n          return this.hls.startPosition;\n        } else if (details && (itemStart < details.fragmentStart || itemStart > details.edge)) {\n          return this.hls.liveSyncPosition || -1;\n        }\n      }\n      return itemStart;\n    };\n    _proto.isAssetBuffered = function isAssetBuffered(asset) {\n      var player = this.getAssetPlayer(asset.identifier);\n      if (player != null && player.hls) {\n        return player.hls.bufferedToEnd;\n      }\n      var bufferInfo = BufferHelper.bufferInfo(this.primaryMedia, this.timelinePos, 0);\n      return bufferInfo.end + 1 >= asset.timelineStart + (asset.duration || 0);\n    };\n    _proto.attachPrimary = function attachPrimary(timelinePos, item, skipSeekToStartPosition) {\n      if (item) {\n        this.setBufferingItem(item);\n      } else {\n        this.bufferingItem = this.playingItem;\n      }\n      this.bufferingAsset = null;\n      var media = this.primaryMedia;\n      if (!media) {\n        return;\n      }\n      var hls = this.hls;\n      if (hls.media) {\n        this.checkBuffer();\n      } else {\n        this.transferMediaTo(hls, media);\n        if (skipSeekToStartPosition) {\n          this.startLoadingPrimaryAt(timelinePos, skipSeekToStartPosition);\n        }\n      }\n      if (!skipSeekToStartPosition) {\n        // Set primary position to resume time\n        this.timelinePos = timelinePos;\n        this.startLoadingPrimaryAt(timelinePos, skipSeekToStartPosition);\n      }\n    };\n    _proto.startLoadingPrimaryAt = function startLoadingPrimaryAt(timelinePos, skipSeekToStartPosition) {\n      var _hls$mainForwardBuffe;\n      var hls = this.hls;\n      if (!hls.loadingEnabled || !hls.media || Math.abs((((_hls$mainForwardBuffe = hls.mainForwardBufferInfo) == null ? void 0 : _hls$mainForwardBuffe.start) || hls.media.currentTime) - timelinePos) > 0.5) {\n        hls.startLoad(timelinePos, skipSeekToStartPosition);\n      } else if (!hls.bufferingEnabled) {\n        hls.resumeBuffering();\n      }\n    }\n\n    // HLS.js event callbacks\n    ;\n    _proto.onManifestLoading = function onManifestLoading() {\n      this.stopLoad();\n      this.schedule.reset();\n      this.emptyPlayerQueue();\n      this.clearScheduleState();\n      this.shouldPlay = false;\n      this.bufferedPos = this.timelinePos = -1;\n      this.mediaSelection = this.altSelection = this.manager = this.requiredTracks = null;\n      // BUFFER_CODECS listener added here for buffer-controller to handle it first where it adds tracks\n      this.hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n      this.hls.on(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n    };\n    _proto.onLevelUpdated = function onLevelUpdated(event, data) {\n      if (data.level === -1) {\n        // level was removed\n        return;\n      }\n      var main = this.hls.levels[data.level];\n      var currentSelection = _objectSpread2(_objectSpread2({}, this.mediaSelection || this.altSelection), {}, {\n        main: main\n      });\n      this.mediaSelection = currentSelection;\n      this.schedule.parseInterstitialDateRanges(currentSelection, this.hls.config.interstitialAppendInPlace);\n      if (!this.effectivePlayingItem && this.schedule.items) {\n        this.checkStart();\n      }\n    };\n    _proto.onAudioTrackUpdated = function onAudioTrackUpdated(event, data) {\n      var audio = this.hls.audioTracks[data.id];\n      var previousSelection = this.mediaSelection;\n      if (!previousSelection) {\n        this.altSelection = _objectSpread2(_objectSpread2({}, this.altSelection), {}, {\n          audio: audio\n        });\n        return;\n      }\n      var currentSelection = _objectSpread2(_objectSpread2({}, previousSelection), {}, {\n        audio: audio\n      });\n      this.mediaSelection = currentSelection;\n    };\n    _proto.onSubtitleTrackUpdated = function onSubtitleTrackUpdated(event, data) {\n      var subtitles = this.hls.subtitleTracks[data.id];\n      var previousSelection = this.mediaSelection;\n      if (!previousSelection) {\n        this.altSelection = _objectSpread2(_objectSpread2({}, this.altSelection), {}, {\n          subtitles: subtitles\n        });\n        return;\n      }\n      var currentSelection = _objectSpread2(_objectSpread2({}, previousSelection), {}, {\n        subtitles: subtitles\n      });\n      this.mediaSelection = currentSelection;\n    };\n    _proto.onAudioTrackSwitching = function onAudioTrackSwitching(event, data) {\n      var audioOption = getBasicSelectionOption(data);\n      this.playerQueue.forEach(function (player) {\n        return player.hls.setAudioOption(data) || player.hls.setAudioOption(audioOption);\n      });\n    };\n    _proto.onSubtitleTrackSwitch = function onSubtitleTrackSwitch(event, data) {\n      var subtitleOption = getBasicSelectionOption(data);\n      this.playerQueue.forEach(function (player) {\n        return player.hls.setSubtitleOption(data) || data.id !== -1 && player.hls.setSubtitleOption(subtitleOption);\n      });\n    };\n    _proto.onBufferCodecs = function onBufferCodecs(event, data) {\n      var requiredTracks = data.tracks;\n      if (requiredTracks) {\n        this.requiredTracks = requiredTracks;\n      }\n    };\n    _proto.onBufferAppended = function onBufferAppended(event, data) {\n      this.checkBuffer();\n    };\n    _proto.onBufferFlushed = function onBufferFlushed(event, data) {\n      var playingItem = this.playingItem;\n      if (playingItem && !this.itemsMatch(playingItem, this.bufferingItem) && !this.isInterstitial(playingItem)) {\n        var timelinePos = this.timelinePos;\n        this.bufferedPos = timelinePos;\n        this.checkBuffer();\n      }\n    };\n    _proto.onBufferedToEnd = function onBufferedToEnd(event) {\n      // Buffered to post-roll\n      var interstitialEvents = this.schedule.events;\n      if (this.bufferedPos < Number.MAX_VALUE && interstitialEvents) {\n        for (var i = 0; i < interstitialEvents.length; i++) {\n          var interstitial = interstitialEvents[i];\n          if (interstitial.cue.post) {\n            var _this$schedule$items;\n            var scheduleIndex = this.schedule.findEventIndex(interstitial.identifier);\n            var item = (_this$schedule$items = this.schedule.items) == null ? void 0 : _this$schedule$items[scheduleIndex];\n            if (this.isInterstitial(item) && this.eventItemsMatch(item, this.bufferingItem)) {\n              this.bufferedToItem(item, 0);\n            }\n            break;\n          }\n        }\n        this.bufferedPos = Number.MAX_VALUE;\n      }\n    };\n    _proto.onMediaEnded = function onMediaEnded(event) {\n      var playingItem = this.playingItem;\n      if (!this.playingLastItem && playingItem) {\n        var playingIndex = this.findItemIndex(playingItem);\n        this.setSchedulePosition(playingIndex + 1);\n      } else {\n        this.shouldPlay = false;\n      }\n    };\n    _proto.updateItem = function updateItem(previousItem, time) {\n      // find item in this.schedule.items;\n      var items = this.schedule.items;\n      if (previousItem && items) {\n        var index = this.findItemIndex(previousItem, time);\n        return items[index] || null;\n      }\n      return null;\n    };\n    _proto.trimInPlace = function trimInPlace(updatedItem, itemBeforeUpdate) {\n      var _this4 = this;\n      if (this.isInterstitial(updatedItem) && updatedItem.event.appendInPlace && itemBeforeUpdate.end - updatedItem.end > 0.25) {\n        updatedItem.event.assetList.forEach(function (asset, index) {\n          if (updatedItem.event.isAssetPastPlayoutLimit(index)) {\n            _this4.clearAssetPlayer(asset.identifier, null);\n          }\n        });\n        var flushStart = updatedItem.end + 0.25;\n        var bufferInfo = BufferHelper.bufferInfo(this.primaryMedia, flushStart, 0);\n        if (bufferInfo.end > flushStart || (bufferInfo.nextStart || 0) > flushStart) {\n          this.attachPrimary(flushStart, null);\n          this.flushFrontBuffer(flushStart);\n        }\n      }\n    };\n    _proto.itemsMatch = function itemsMatch(a, b) {\n      return !!b && (a === b || a.event && b.event && this.eventItemsMatch(a, b) || !a.event && !b.event && this.findItemIndex(a) === this.findItemIndex(b));\n    };\n    _proto.eventItemsMatch = function eventItemsMatch(a, b) {\n      var _b$event;\n      return !!b && (a === b || a.event.identifier === ((_b$event = b.event) == null ? void 0 : _b$event.identifier));\n    };\n    _proto.findItemIndex = function findItemIndex(item, time) {\n      return item ? this.schedule.findItemIndex(item, time) : -1;\n    };\n    _proto.updateSchedule = function updateSchedule() {\n      var mediaSelection = this.mediaSelection;\n      if (!mediaSelection) {\n        return;\n      }\n      this.schedule.updateSchedule(mediaSelection, []);\n    }\n\n    // Schedule buffer control\n    ;\n    _proto.checkBuffer = function checkBuffer(starved) {\n      var items = this.schedule.items;\n      if (!items) {\n        return;\n      }\n      // Find when combined forward buffer change reaches next schedule segment\n      var bufferInfo = BufferHelper.bufferInfo(this.primaryMedia, this.timelinePos, 0);\n      if (starved) {\n        this.bufferedPos = this.timelinePos;\n      }\n      starved || (starved = bufferInfo.len < 1);\n      this.updateBufferedPos(bufferInfo.end, items, starved);\n    };\n    _proto.updateBufferedPos = function updateBufferedPos(bufferEnd, items, bufferIsEmpty) {\n      var schedule = this.schedule;\n      var bufferingItem = this.bufferingItem;\n      if (this.bufferedPos > bufferEnd) {\n        return;\n      }\n      if (items.length === 1 && this.itemsMatch(items[0], bufferingItem)) {\n        this.bufferedPos = bufferEnd;\n        return;\n      }\n      var playingItem = this.playingItem;\n      var playingIndex = this.findItemIndex(playingItem);\n      var bufferEndIndex = schedule.findItemIndexAtTime(bufferEnd);\n      if (this.bufferedPos < bufferEnd) {\n        var _nextItemToBuffer$eve, _bufferingItem$event;\n        var bufferingIndex = this.findItemIndex(bufferingItem);\n        var nextToBufferIndex = Math.min(bufferingIndex + 1, items.length - 1);\n        var nextItemToBuffer = items[nextToBufferIndex];\n        if (bufferEndIndex === -1 && bufferingItem && bufferEnd >= bufferingItem.end || (_nextItemToBuffer$eve = nextItemToBuffer.event) != null && _nextItemToBuffer$eve.appendInPlace && bufferEnd + 0.01 >= nextItemToBuffer.start) {\n          bufferEndIndex = nextToBufferIndex;\n        }\n        if (nextToBufferIndex - playingIndex > 1 && (bufferingItem == null ? void 0 : (_bufferingItem$event = bufferingItem.event) == null ? void 0 : _bufferingItem$event.appendInPlace) === false) {\n          // do not advance buffering item past Interstitial that requires source reset\n          return;\n        }\n        this.bufferedPos = bufferEnd;\n        if (bufferEndIndex > bufferingIndex && bufferEndIndex > playingIndex) {\n          this.bufferedToItem(nextItemToBuffer);\n        } else {\n          // allow more time than distance from edge for assets to load\n          var details = this.primaryDetails;\n          if (this.primaryLive && details && bufferEnd > details.edge - details.targetduration && nextItemToBuffer.start < details.edge + this.hls.config.interstitialLiveLookAhead && this.isInterstitial(nextItemToBuffer)) {\n            this.preloadAssets(nextItemToBuffer.event, 0);\n          }\n        }\n      } else if (bufferIsEmpty && playingItem && !this.itemsMatch(playingItem, bufferingItem)) {\n        if (bufferEndIndex === playingIndex) {\n          this.bufferedToItem(playingItem);\n        } else if (bufferEndIndex === playingIndex + 1) {\n          this.bufferedToItem(items[bufferEndIndex]);\n        }\n      }\n    };\n    _proto.assetsBuffered = function assetsBuffered(item, media) {\n      var _this5 = this;\n      var assetList = item.event.assetList;\n      if (assetList.length === 0) {\n        return false;\n      }\n      return !item.event.assetList.some(function (asset) {\n        var player = _this5.getAssetPlayer(asset.identifier);\n        return !(player != null && player.bufferedInPlaceToEnd(media));\n      });\n    };\n    _proto.setBufferingItem = function setBufferingItem(item) {\n      var _this6 = this;\n      var bufferingLast = this.bufferingItem;\n      var schedule = this.schedule;\n      if (!this.itemsMatch(item, bufferingLast)) {\n        var items = schedule.items,\n          events = schedule.events;\n        if (!items || !events) {\n          return bufferingLast;\n        }\n        var isInterstitial = this.isInterstitial(item);\n        var bufferingPlayer = this.getBufferingPlayer();\n        this.bufferingItem = item;\n        this.bufferedPos = Math.max(item.start, Math.min(item.end, this.timelinePos));\n        var timeRemaining = bufferingPlayer ? bufferingPlayer.remaining : bufferingLast ? bufferingLast.end - this.timelinePos : 0;\n        this.log(\"INTERSTITIALS_BUFFERED_TO_BOUNDARY \" + segmentToString(item) + (bufferingLast ? \" (\" + timeRemaining.toFixed(2) + \" remaining)\" : ''));\n        if (!this.playbackDisabled) {\n          if (isInterstitial) {\n            // primary fragment loading will exit early in base-stream-controller while `bufferingItem` is set to an Interstitial block\n            item.event.assetList.forEach(function (asset) {\n              var player = _this6.getAssetPlayer(asset.identifier);\n              if (player) {\n                player.resumeBuffering();\n              }\n            });\n          } else {\n            this.hls.resumeBuffering();\n            this.playerQueue.forEach(function (player) {\n              return player.pauseBuffering();\n            });\n          }\n        }\n        this.hls.trigger(Events.INTERSTITIALS_BUFFERED_TO_BOUNDARY, {\n          events: events.slice(0),\n          schedule: items.slice(0),\n          bufferingIndex: this.findItemIndex(item),\n          playingIndex: this.findItemIndex(this.playingItem)\n        });\n      } else if (this.bufferingItem !== item) {\n        this.bufferingItem = item;\n      }\n      return bufferingLast;\n    };\n    _proto.bufferedToItem = function bufferedToItem(item, assetListIndex) {\n      if (assetListIndex === void 0) {\n        assetListIndex = 0;\n      }\n      var bufferingLast = this.setBufferingItem(item);\n      if (this.playbackDisabled) {\n        return;\n      }\n      if (this.isInterstitial(item)) {\n        // Ensure asset list is loaded\n        this.bufferedToEvent(item, assetListIndex);\n      } else if (bufferingLast !== null) {\n        // If primary player is detached, it is also stopped, restart loading at primary position\n        this.bufferingAsset = null;\n        var detachedData = this.detachedData;\n        if (detachedData) {\n          if (detachedData.mediaSource) {\n            var skipSeekToStartPosition = true;\n            this.attachPrimary(item.start, item, skipSeekToStartPosition);\n          } else {\n            this.preloadPrimary(item);\n          }\n        } else {\n          // If not detached seek to resumption point\n          this.preloadPrimary(item);\n        }\n      }\n    };\n    _proto.preloadPrimary = function preloadPrimary(item) {\n      var index = this.findItemIndex(item);\n      var timelinePos = this.getPrimaryResumption(item, index);\n      this.startLoadingPrimaryAt(timelinePos);\n    };\n    _proto.bufferedToEvent = function bufferedToEvent(item, assetListIndex) {\n      var interstitial = item.event;\n      var neverLoaded = interstitial.assetList.length === 0 && !interstitial.assetListLoader;\n      var playOnce = interstitial.cue.once;\n      if (neverLoaded || !playOnce) {\n        // Buffered to Interstitial boundary\n        var player = this.preloadAssets(interstitial, assetListIndex);\n        if (player != null && player.interstitial.appendInPlace) {\n          // If we have a player and asset list info, start buffering\n          var assetItem = interstitial.assetList[assetListIndex];\n          var media = this.primaryMedia;\n          if (assetItem && media) {\n            this.bufferAssetPlayer(player, media);\n          }\n        }\n      }\n    };\n    _proto.preloadAssets = function preloadAssets(interstitial, assetListIndex) {\n      var uri = interstitial.assetUrl;\n      var assetListLength = interstitial.assetList.length;\n      var neverLoaded = assetListLength === 0 && !interstitial.assetListLoader;\n      var playOnce = interstitial.cue.once;\n      if (neverLoaded) {\n        var timelineStart = interstitial.timelineStart;\n        if (interstitial.appendInPlace) {\n          var _playingItem$nextEven;\n          var playingItem = this.playingItem;\n          if (!this.isInterstitial(playingItem) && (playingItem == null ? void 0 : (_playingItem$nextEven = playingItem.nextEvent) == null ? void 0 : _playingItem$nextEven.identifier) === interstitial.identifier) {\n            this.flushFrontBuffer(timelineStart + 0.25);\n          }\n        }\n        var hlsStartOffset;\n        var liveStartPosition = 0;\n        if (!this.playingItem && this.primaryLive) {\n          liveStartPosition = this.hls.startPosition;\n          if (liveStartPosition === -1) {\n            liveStartPosition = this.hls.liveSyncPosition || 0;\n          }\n        }\n        if (liveStartPosition && !(interstitial.cue.pre || interstitial.cue.post)) {\n          var startOffset = liveStartPosition - timelineStart;\n          if (startOffset > 0) {\n            hlsStartOffset = Math.round(startOffset * 1000) / 1000;\n          }\n        }\n        this.log(\"Load interstitial asset \" + (assetListIndex + 1) + \"/\" + (uri ? 1 : assetListLength) + \" \" + interstitial + (hlsStartOffset ? \" live-start: \" + liveStartPosition + \" start-offset: \" + hlsStartOffset : ''));\n        if (uri) {\n          return this.createAsset(interstitial, 0, 0, timelineStart, interstitial.duration, uri);\n        }\n        var assetListLoader = this.assetListLoader.loadAssetList(interstitial, hlsStartOffset);\n        if (assetListLoader) {\n          interstitial.assetListLoader = assetListLoader;\n        }\n      } else if (!playOnce && assetListLength) {\n        // Re-buffered to Interstitial boundary, re-create asset player(s)\n        for (var i = assetListIndex; i < assetListLength; i++) {\n          var asset = interstitial.assetList[i];\n          var playerIndex = this.getAssetPlayerQueueIndex(asset.identifier);\n          if ((playerIndex === -1 || this.playerQueue[playerIndex].destroyed) && !asset.error) {\n            this.createAssetPlayer(interstitial, asset, i);\n          }\n        }\n        return this.getAssetPlayer(interstitial.assetList[assetListIndex].identifier);\n      }\n      return null;\n    };\n    _proto.flushFrontBuffer = function flushFrontBuffer(startOffset) {\n      var _this7 = this;\n      // Force queued flushing of all buffers\n      var requiredTracks = this.requiredTracks;\n      if (!requiredTracks) {\n        return;\n      }\n      this.log(\"Removing front buffer starting at \" + startOffset);\n      var sourceBufferNames = Object.keys(requiredTracks);\n      sourceBufferNames.forEach(function (type) {\n        _this7.hls.trigger(Events.BUFFER_FLUSHING, {\n          startOffset: startOffset,\n          endOffset: Infinity,\n          type: type\n        });\n      });\n    }\n\n    // Interstitial Asset Player control\n    ;\n    _proto.getAssetPlayerQueueIndex = function getAssetPlayerQueueIndex(assetId) {\n      var playerQueue = this.playerQueue;\n      for (var i = 0; i < playerQueue.length; i++) {\n        if (assetId === playerQueue[i].assetId) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    _proto.getAssetPlayer = function getAssetPlayer(assetId) {\n      var index = this.getAssetPlayerQueueIndex(assetId);\n      return this.playerQueue[index] || null;\n    };\n    _proto.getBufferingPlayer = function getBufferingPlayer() {\n      var playerQueue = this.playerQueue,\n        primaryMedia = this.primaryMedia;\n      if (primaryMedia) {\n        for (var i = 0; i < playerQueue.length; i++) {\n          if (playerQueue[i].media === primaryMedia) {\n            return playerQueue[i];\n          }\n        }\n      }\n      return null;\n    };\n    _proto.createAsset = function createAsset(interstitial, assetListIndex, startOffset, timelineStart, duration, uri) {\n      var assetItem = {\n        parentIdentifier: interstitial.identifier,\n        identifier: generateAssetIdentifier(interstitial, uri, assetListIndex),\n        duration: duration,\n        startOffset: startOffset,\n        timelineStart: timelineStart,\n        uri: uri\n      };\n      return this.createAssetPlayer(interstitial, assetItem, assetListIndex);\n    };\n    _proto.createAssetPlayer = function createAssetPlayer(interstitial, assetItem, assetListIndex) {\n      var _this8 = this;\n      var primary = this.hls;\n      var userConfig = primary.userConfig;\n      var videoPreference = userConfig.videoPreference;\n      var currentLevel = primary.loadLevelObj || primary.levels[primary.currentLevel];\n      if (videoPreference || currentLevel) {\n        videoPreference = _extends({}, videoPreference);\n        if (currentLevel.videoCodec) {\n          videoPreference.videoCodec = currentLevel.videoCodec;\n        }\n        if (currentLevel.videoRange) {\n          videoPreference.allowedVideoRanges = [currentLevel.videoRange];\n        }\n      }\n      var selectedAudio = primary.audioTracks[primary.audioTrack];\n      var selectedSubtitle = primary.subtitleTracks[primary.subtitleTrack];\n      var startPosition = 0;\n      if (this.primaryLive || interstitial.appendInPlace) {\n        var timePastStart = this.timelinePos - assetItem.timelineStart;\n        if (timePastStart > 1) {\n          var duration = assetItem.duration;\n          if (duration && timePastStart < duration) {\n            startPosition = timePastStart;\n          }\n        }\n      }\n      var assetId = assetItem.identifier;\n      var playerConfig = _objectSpread2(_objectSpread2({}, userConfig), {}, {\n        autoStartLoad: true,\n        startFragPrefetch: true,\n        primarySessionId: primary.sessionId,\n        assetPlayerId: assetId,\n        abrEwmaDefaultEstimate: primary.bandwidthEstimate,\n        interstitialsController: undefined,\n        startPosition: startPosition,\n        liveDurationInfinity: false,\n        testBandwidth: false,\n        videoPreference: videoPreference,\n        audioPreference: selectedAudio || userConfig.audioPreference,\n        subtitlePreference: selectedSubtitle || userConfig.subtitlePreference\n      });\n      if (interstitial.appendInPlace) {\n        interstitial.appendInPlaceStarted = true;\n        if (assetItem.timelineStart) {\n          playerConfig.timelineOffset = assetItem.timelineStart;\n        }\n      }\n      var cmcd = playerConfig.cmcd;\n      if (cmcd != null && cmcd.sessionId && cmcd.contentId) {\n        playerConfig.cmcd = _extends({}, cmcd, {\n          contentId: hash(assetItem.uri)\n        });\n      }\n      if (this.getAssetPlayer(assetId)) {\n        this.warn(\"Duplicate date range identifier \" + interstitial + \" and asset \" + assetId);\n      }\n      var player = new HlsAssetPlayer(this.HlsPlayerClass, playerConfig, interstitial, assetItem);\n      this.playerQueue.push(player);\n      interstitial.assetList[assetListIndex] = assetItem;\n      // Listen for LevelDetails and PTS change to update duration\n      var updateAssetPlayerDetails = function updateAssetPlayerDetails(details) {\n        if (details.live) {\n          var error = new Error(\"Interstitials MUST be VOD assets \" + interstitial);\n          var errorData = {\n            fatal: true,\n            type: ErrorTypes.OTHER_ERROR,\n            details: ErrorDetails.INTERSTITIAL_ASSET_ITEM_ERROR,\n            error: error\n          };\n          _this8.handleAssetItemError(errorData, interstitial, _this8.schedule.findEventIndex(interstitial.identifier), assetListIndex, error.message);\n          return;\n        }\n        // Get time at end of last fragment\n        var duration = details.edge - details.fragmentStart;\n        var currentAssetDuration = assetItem.duration;\n        if (currentAssetDuration === null || duration > currentAssetDuration) {\n          _this8.log(\"Interstitial asset \\\"\" + assetId + \"\\\" duration change \" + currentAssetDuration + \" > \" + duration);\n          assetItem.duration = duration;\n          // Update schedule with new event and asset duration\n          _this8.updateSchedule();\n        }\n      };\n      player.on(Events.LEVEL_UPDATED, function (event, _ref) {\n        var details = _ref.details;\n        return updateAssetPlayerDetails(details);\n      });\n      player.on(Events.LEVEL_PTS_UPDATED, function (event, _ref2) {\n        var details = _ref2.details;\n        return updateAssetPlayerDetails(details);\n      });\n      var _onBufferCodecs = function onBufferCodecs(event, data) {\n        var inQueuPlayer = _this8.getAssetPlayer(assetId);\n        if (inQueuPlayer && data.tracks) {\n          inQueuPlayer.off(Events.BUFFER_CODECS, _onBufferCodecs);\n          inQueuPlayer.tracks = data.tracks;\n          var media = _this8.primaryMedia;\n          if (_this8.bufferingAsset === inQueuPlayer.assetItem && media && !inQueuPlayer.media) {\n            _this8.bufferAssetPlayer(inQueuPlayer, media);\n          }\n        }\n      };\n      player.on(Events.BUFFER_CODECS, _onBufferCodecs);\n      var bufferedToEnd = function bufferedToEnd() {\n        var _this8$schedule$items;\n        var inQueuPlayer = _this8.getAssetPlayer(assetId);\n        _this8.log(\"buffered to end of asset \" + inQueuPlayer);\n        if (!inQueuPlayer) {\n          return;\n        }\n        // Preload at end of asset\n        var scheduleIndex = _this8.schedule.findEventIndex(interstitial.identifier);\n        var item = (_this8$schedule$items = _this8.schedule.items) == null ? void 0 : _this8$schedule$items[scheduleIndex];\n        if (_this8.isInterstitial(item)) {\n          var _assetListIndex = interstitial.findAssetIndex(assetItem);\n          var nextAssetIndex = getNextAssetIndex(interstitial, _assetListIndex);\n          if (!interstitial.isAssetPastPlayoutLimit(nextAssetIndex)) {\n            _this8.bufferedToItem(item, nextAssetIndex);\n          } else {\n            var _this8$schedule$items2;\n            var nextItem = (_this8$schedule$items2 = _this8.schedule.items) == null ? void 0 : _this8$schedule$items2[scheduleIndex + 1];\n            if (nextItem) {\n              _this8.bufferedToItem(nextItem);\n            }\n          }\n        }\n      };\n      player.on(Events.BUFFERED_TO_END, bufferedToEnd);\n      var endedWithAssetIndex = function endedWithAssetIndex(assetIndex) {\n        return function () {\n          var inQueuPlayer = _this8.getAssetPlayer(assetId);\n          if (!inQueuPlayer) {\n            return;\n          }\n          _this8.shouldPlay = true;\n          var scheduleIndex = _this8.schedule.findEventIndex(interstitial.identifier);\n          _this8.advanceAfterAssetEnded(interstitial, scheduleIndex, assetIndex);\n        };\n      };\n      player.once(Events.MEDIA_ENDED, endedWithAssetIndex(assetListIndex));\n      player.once(Events.PLAYOUT_LIMIT_REACHED, endedWithAssetIndex(Infinity));\n      player.on(Events.ERROR, function (event, data) {\n        var inQueuPlayer = _this8.getAssetPlayer(assetId);\n        if (data.details === ErrorDetails.BUFFER_STALLED_ERROR) {\n          if (inQueuPlayer != null && inQueuPlayer.media) {\n            var assetCurrentTime = inQueuPlayer.currentTime;\n            var distanceFromEnd = inQueuPlayer.duration - assetCurrentTime;\n            if (assetCurrentTime && interstitial.appendInPlace && distanceFromEnd / inQueuPlayer.media.playbackRate < 0.5) {\n              _this8.log(\"Advancing buffer past end of asset \" + assetId + \" \" + interstitial + \" at \" + inQueuPlayer.media.currentTime);\n              bufferedToEnd();\n            } else {\n              _this8.warn(\"Stalled at \" + assetCurrentTime + \" of \" + (assetCurrentTime + distanceFromEnd) + \" in asset \" + assetId + \" \" + interstitial);\n              _this8.onTimeupdate();\n              _this8.checkBuffer(true);\n            }\n          }\n          return;\n        }\n        _this8.handleAssetItemError(data, interstitial, _this8.schedule.findEventIndex(interstitial.identifier), assetListIndex, \"Asset player error \" + data.error + \" \" + interstitial);\n      });\n      player.on(Events.DESTROYING, function () {\n        var inQueuPlayer = _this8.getAssetPlayer(assetId);\n        if (!inQueuPlayer) {\n          return;\n        }\n        var error = new Error(\"Asset player destroyed unexpectedly \" + assetId);\n        var errorData = {\n          fatal: true,\n          type: ErrorTypes.OTHER_ERROR,\n          details: ErrorDetails.INTERSTITIAL_ASSET_ITEM_ERROR,\n          error: error\n        };\n        _this8.handleAssetItemError(errorData, interstitial, _this8.schedule.findEventIndex(interstitial.identifier), assetListIndex, error.message);\n      });\n      this.log(\"INTERSTITIAL_ASSET_PLAYER_CREATED \" + eventAssetToString(assetItem));\n      this.hls.trigger(Events.INTERSTITIAL_ASSET_PLAYER_CREATED, {\n        asset: assetItem,\n        assetListIndex: assetListIndex,\n        event: interstitial,\n        player: player\n      });\n      return player;\n    };\n    _proto.clearInterstitial = function clearInterstitial(interstitial, toSegment) {\n      var _this9 = this;\n      interstitial.assetList.forEach(function (asset) {\n        _this9.clearAssetPlayer(asset.identifier, toSegment);\n      });\n      // Remove asset list and resolved duration\n      interstitial.reset();\n    };\n    _proto.resetAssetPlayer = function resetAssetPlayer(assetId) {\n      // Reset asset player so that it's timeline can be adjusted without reloading the MVP\n      var playerIndex = this.getAssetPlayerQueueIndex(assetId);\n      if (playerIndex !== -1) {\n        this.log(\"reset asset player \\\"\" + assetId + \"\\\" after error\");\n        var player = this.playerQueue[playerIndex];\n        this.transferMediaFromPlayer(player, null);\n        player.resetDetails();\n      }\n    };\n    _proto.clearAssetPlayer = function clearAssetPlayer(assetId, toSegment) {\n      var playerIndex = this.getAssetPlayerQueueIndex(assetId);\n      if (playerIndex !== -1) {\n        this.log(\"clear asset player \\\"\" + assetId + \"\\\" toSegment: \" + (toSegment ? segmentToString(toSegment) : toSegment));\n        var player = this.playerQueue[playerIndex];\n        this.transferMediaFromPlayer(player, toSegment);\n        this.playerQueue.splice(playerIndex, 1);\n        player.destroy();\n      }\n    };\n    _proto.emptyPlayerQueue = function emptyPlayerQueue() {\n      var player;\n      while (player = this.playerQueue.pop()) {\n        player.destroy();\n      }\n      this.playerQueue = [];\n    };\n    _proto.startAssetPlayer = function startAssetPlayer(player, assetListIndex, scheduleItems, scheduleIndex, media) {\n      var interstitial = player.interstitial,\n        assetItem = player.assetItem,\n        assetId = player.assetId;\n      var assetListLength = interstitial.assetList.length;\n      var playingAsset = this.playingAsset;\n      this.endedAsset = null;\n      this.playingAsset = assetItem;\n      if (!playingAsset || playingAsset.identifier !== assetId) {\n        if (playingAsset) {\n          // Exiting another Interstitial asset\n          this.clearAssetPlayer(playingAsset.identifier, scheduleItems[scheduleIndex]);\n          delete playingAsset.error;\n        }\n        this.log(\"INTERSTITIAL_ASSET_STARTED \" + (assetListIndex + 1) + \"/\" + assetListLength + \" \" + eventAssetToString(assetItem));\n        this.hls.trigger(Events.INTERSTITIAL_ASSET_STARTED, {\n          asset: assetItem,\n          assetListIndex: assetListIndex,\n          event: interstitial,\n          schedule: scheduleItems.slice(0),\n          scheduleIndex: scheduleIndex,\n          player: player\n        });\n      }\n\n      // detach media and attach to interstitial player if it does not have another element attached\n      this.bufferAssetPlayer(player, media);\n    };\n    _proto.bufferAssetPlayer = function bufferAssetPlayer(player, media) {\n      var _this$schedule$items2, _this$detachedData4;\n      var interstitial = player.interstitial,\n        assetItem = player.assetItem;\n      var scheduleIndex = this.schedule.findEventIndex(interstitial.identifier);\n      var item = (_this$schedule$items2 = this.schedule.items) == null ? void 0 : _this$schedule$items2[scheduleIndex];\n      if (!item) {\n        return;\n      }\n      this.setBufferingItem(item);\n      this.bufferingAsset = assetItem;\n      var bufferingPlayer = this.getBufferingPlayer();\n      if (bufferingPlayer === player) {\n        return;\n      }\n      var appendInPlaceNext = interstitial.appendInPlace;\n      if (appendInPlaceNext && (bufferingPlayer == null ? void 0 : bufferingPlayer.interstitial.appendInPlace) === false) {\n        // Media is detached and not available to append in place\n        return;\n      }\n      var activeTracks = (bufferingPlayer == null ? void 0 : bufferingPlayer.tracks) || ((_this$detachedData4 = this.detachedData) == null ? void 0 : _this$detachedData4.tracks) || this.requiredTracks;\n      if (appendInPlaceNext && assetItem !== this.playingAsset) {\n        // Do not buffer another item if tracks are unknown or incompatible\n        if (!player.tracks) {\n          return;\n        }\n        if (activeTracks && !isCompatibleTrackChange(activeTracks, player.tracks)) {\n          var error = new Error(\"Asset \" + eventAssetToString(assetItem) + \" SourceBuffer tracks ('\" + Object.keys(player.tracks) + \"') are not compatible with primary content tracks ('\" + Object.keys(activeTracks) + \"')\");\n          var errorData = {\n            fatal: true,\n            type: ErrorTypes.OTHER_ERROR,\n            details: ErrorDetails.INTERSTITIAL_ASSET_ITEM_ERROR,\n            error: error\n          };\n          var assetListIndex = interstitial.findAssetIndex(assetItem);\n          this.handleAssetItemError(errorData, interstitial, scheduleIndex, assetListIndex, error.message);\n          return;\n        }\n      }\n      this.transferMediaTo(player, media);\n    };\n    _proto.handleAssetItemError = function handleAssetItemError(data, interstitial, scheduleIndex, assetListIndex, errorMessage) {\n      if (data.details === ErrorDetails.BUFFER_STALLED_ERROR) {\n        return;\n      }\n      var assetItem = interstitial.assetList[assetListIndex];\n      this.warn(\"INTERSTITIAL_ASSET_ERROR \" + (assetItem ? eventAssetToString(assetItem) : assetItem) + \" \" + data.error);\n      var assetId = assetItem == null ? void 0 : assetItem.identifier;\n      var playerIndex = this.getAssetPlayerQueueIndex(assetId);\n      var player = this.playerQueue[playerIndex] || null;\n      var items = this.schedule.items;\n      var interstitialAssetError = _extends({}, data, {\n        fatal: false,\n        errorAction: createDoNothingErrorAction(true),\n        asset: assetItem,\n        assetListIndex: assetListIndex,\n        event: interstitial,\n        schedule: items,\n        scheduleIndex: scheduleIndex,\n        player: player\n      });\n      this.hls.trigger(Events.INTERSTITIAL_ASSET_ERROR, interstitialAssetError);\n      if (!data.fatal) {\n        return;\n      }\n      var playingAsset = this.playingAsset;\n      var error = new Error(errorMessage);\n      if (assetItem) {\n        this.clearAssetPlayer(assetId, null);\n        assetItem.error = error;\n      }\n\n      // If all assets in interstitial fail, mark the interstitial with an error\n      if (!interstitial.assetList.some(function (asset) {\n        return !asset.error;\n      })) {\n        interstitial.error = error;\n      } else if (interstitial.appendInPlace) {\n        // Reset level details and reload/parse media playlists to align with updated schedule\n        for (var i = assetListIndex; i < interstitial.assetList.length; i++) {\n          this.resetAssetPlayer(interstitial.assetList[i].identifier);\n        }\n        this.updateSchedule();\n      }\n      if (interstitial.error) {\n        this.primaryFallback(interstitial);\n      } else if (playingAsset && playingAsset.identifier === assetId) {\n        this.advanceAfterAssetEnded(interstitial, scheduleIndex, assetListIndex);\n      }\n    };\n    _proto.primaryFallback = function primaryFallback(interstitial) {\n      // Fallback to Primary by on current or future events by updating schedule to skip errored interstitials/assets\n      var flushStart = interstitial.timelineStart;\n      var playingItem = this.effectivePlayingItem;\n      // Update schedule now that interstitial/assets are flagged with `error` for fallback\n      this.updateSchedule();\n      if (playingItem) {\n        this.log(\"Fallback to primary from event \\\"\" + interstitial.identifier + \"\\\" start: \" + flushStart + \" pos: \" + this.timelinePos + \" playing: \" + (playingItem ? segmentToString(playingItem) : '<none>') + \" error: \" + interstitial.error);\n        var timelinePos = this.timelinePos;\n        if (timelinePos === -1) {\n          timelinePos = this.hls.startPosition;\n        }\n        var newPlayingItem = this.updateItem(playingItem, timelinePos);\n        if (this.itemsMatch(playingItem, newPlayingItem)) {\n          this.clearInterstitial(interstitial, null);\n        }\n        if (interstitial.appendInPlace) {\n          this.attachPrimary(flushStart, null);\n          this.flushFrontBuffer(flushStart);\n        }\n        var scheduleIndex = this.schedule.findItemIndexAtTime(timelinePos);\n        this.setSchedulePosition(scheduleIndex);\n      } else {\n        this.checkStart();\n      }\n    }\n\n    // Asset List loading\n    ;\n    _proto.onAssetListLoaded = function onAssetListLoaded(event, data) {\n      var _this0 = this,\n        _this$bufferingItem;\n      var interstitial = data.event;\n      var interstitialId = interstitial.identifier;\n      var assets = data.assetListResponse.ASSETS;\n      if (!this.schedule.hasEvent(interstitialId)) {\n        // Interstitial with id was removed\n        return;\n      }\n      var eventStart = interstitial.timelineStart;\n      var previousDuration = interstitial.duration;\n      var sumDuration = 0;\n      assets.forEach(function (asset, assetListIndex) {\n        var duration = parseFloat(asset.DURATION);\n        _this0.createAsset(interstitial, assetListIndex, sumDuration, eventStart + sumDuration, duration, asset.URI);\n        sumDuration += duration;\n      });\n      interstitial.duration = sumDuration;\n      this.log(\"Loaded asset-list with duration: \" + sumDuration + \" (was: \" + previousDuration + \") \" + interstitial);\n      var waitingItem = this.waitingItem;\n      var waitingForItem = (waitingItem == null ? void 0 : waitingItem.event.identifier) === interstitialId;\n\n      // Update schedule now that asset.DURATION(s) are parsed\n      this.updateSchedule();\n      var bufferingEvent = (_this$bufferingItem = this.bufferingItem) == null ? void 0 : _this$bufferingItem.event;\n\n      // If buffer reached Interstitial, start buffering first asset\n      if (waitingForItem) {\n        var _this$schedule$items3;\n        // Advance schedule when waiting for asset list data to play\n        var scheduleIndex = this.schedule.findEventIndex(interstitialId);\n        var item = (_this$schedule$items3 = this.schedule.items) == null ? void 0 : _this$schedule$items3[scheduleIndex];\n        if (item) {\n          if (!this.playingItem && this.timelinePos > item.end) {\n            // Abandon if new duration is reduced enough to land playback in primary start\n            var index = this.schedule.findItemIndexAtTime(this.timelinePos);\n            if (index !== scheduleIndex) {\n              interstitial.error = new Error(\"Interstitial no longer within playback range \" + this.timelinePos + \" \" + interstitial);\n              this.primaryFallback(interstitial);\n              return;\n            }\n          }\n          this.setBufferingItem(item);\n        }\n        this.setSchedulePosition(scheduleIndex);\n      } else if ((bufferingEvent == null ? void 0 : bufferingEvent.identifier) === interstitialId && bufferingEvent.appendInPlace) {\n        // If buffering (but not playback) has reached this item transfer media-source\n        var assetItem = interstitial.assetList[0];\n        var player = this.getAssetPlayer(assetItem.identifier);\n        var media = this.primaryMedia;\n        if (assetItem && player && media) {\n          this.bufferAssetPlayer(player, media);\n        }\n      }\n    };\n    _proto.onError = function onError(event, data) {\n      switch (data.details) {\n        case ErrorDetails.ASSET_LIST_PARSING_ERROR:\n        case ErrorDetails.ASSET_LIST_LOAD_ERROR:\n        case ErrorDetails.ASSET_LIST_LOAD_TIMEOUT:\n          {\n            var interstitial = data.interstitial;\n            if (interstitial) {\n              this.primaryFallback(interstitial);\n            }\n            break;\n          }\n        case ErrorDetails.BUFFER_STALLED_ERROR:\n          {\n            this.onTimeupdate();\n            this.checkBuffer(true);\n            break;\n          }\n      }\n    };\n    return _createClass(InterstitialsController, [{\n      key: \"interstitialsManager\",\n      get: function get() {\n        if (!this.manager) {\n          if (!this.hls) {\n            return null;\n          }\n          var c = this;\n          var effectiveBufferingItem = function effectiveBufferingItem() {\n            return c.bufferingItem || c.waitingItem;\n          };\n          var getAssetPlayer = function getAssetPlayer(asset) {\n            return asset ? c.getAssetPlayer(asset.identifier) : asset;\n          };\n          var getMappedTime = function getMappedTime(item, timelineType, asset, controllerField, assetPlayerField) {\n            if (item) {\n              var time = item[timelineType].start;\n              var interstitial = item.event;\n              if (interstitial) {\n                if (timelineType === 'playout' || interstitial.timelineOccupancy !== TimelineOccupancy.Point) {\n                  var assetPlayer = getAssetPlayer(asset);\n                  if ((assetPlayer == null ? void 0 : assetPlayer.interstitial) === interstitial) {\n                    time += assetPlayer.assetItem.startOffset + assetPlayer[assetPlayerField];\n                  }\n                }\n              } else {\n                var value = controllerField === 'bufferedPos' ? getBufferedEnd() : c[controllerField];\n                time += value - item.start;\n              }\n              return time;\n            }\n            return 0;\n          };\n          var findMappedTime = function findMappedTime(primaryTime, timelineType) {\n            if (primaryTime !== 0 && timelineType !== 'primary' && c.schedule.length) {\n              var _c$schedule$items;\n              var index = c.schedule.findItemIndexAtTime(primaryTime);\n              var item = (_c$schedule$items = c.schedule.items) == null ? void 0 : _c$schedule$items[index];\n              if (item) {\n                var diff = item[timelineType].start - item.start;\n                return primaryTime + diff;\n              }\n            }\n            return primaryTime;\n          };\n          var getBufferedEnd = function getBufferedEnd() {\n            var value = c.bufferedPos;\n            if (value === Number.MAX_VALUE) {\n              return getMappedDuration('primary');\n            }\n            return Math.max(value, 0);\n          };\n          var getMappedDuration = function getMappedDuration(timelineType) {\n            var _c$primaryDetails;\n            if ((_c$primaryDetails = c.primaryDetails) != null && _c$primaryDetails.live) {\n              // return end of last event item or playlist\n              return c.primaryDetails.edge;\n            }\n            return c.schedule.durations[timelineType];\n          };\n          var seekTo = function seekTo(time, timelineType) {\n            var _item$event, _c$schedule$items2;\n            var item = c.effectivePlayingItem;\n            if (item != null && (_item$event = item.event) != null && _item$event.restrictions.skip) {\n              return;\n            }\n            c.log(\"seek to \" + time + \" \\\"\" + timelineType + \"\\\"\");\n            var playingItem = c.effectivePlayingItem;\n            var targetIndex = c.schedule.findItemIndexAtTime(time, timelineType);\n            var targetItem = (_c$schedule$items2 = c.schedule.items) == null ? void 0 : _c$schedule$items2[targetIndex];\n            var bufferingPlayer = c.getBufferingPlayer();\n            var bufferingInterstitial = bufferingPlayer == null ? void 0 : bufferingPlayer.interstitial;\n            var appendInPlace = bufferingInterstitial == null ? void 0 : bufferingInterstitial.appendInPlace;\n            var seekInItem = playingItem && c.itemsMatch(playingItem, targetItem);\n            if (playingItem && (appendInPlace || seekInItem)) {\n              // seek in asset player or primary media (appendInPlace)\n              var assetPlayer = getAssetPlayer(c.playingAsset);\n              var media = (assetPlayer == null ? void 0 : assetPlayer.media) || c.primaryMedia;\n              if (media) {\n                var currentTime = timelineType === 'primary' ? media.currentTime : getMappedTime(playingItem, timelineType, c.playingAsset, 'timelinePos', 'currentTime');\n                var diff = time - currentTime;\n                var seekToTime = (appendInPlace ? currentTime : media.currentTime) + diff;\n                if (seekToTime >= 0 && (!assetPlayer || appendInPlace || seekToTime <= assetPlayer.duration)) {\n                  media.currentTime = seekToTime;\n                  return;\n                }\n              }\n            }\n            // seek out of item or asset\n            if (targetItem) {\n              var _seekToTime = time;\n              if (timelineType !== 'primary') {\n                var primarySegmentStart = targetItem[timelineType].start;\n                var _diff = time - primarySegmentStart;\n                _seekToTime = targetItem.start + _diff;\n              }\n              var targetIsPrimary = !c.isInterstitial(targetItem);\n              if ((!c.isInterstitial(playingItem) || playingItem.event.appendInPlace) && (targetIsPrimary || targetItem.event.appendInPlace)) {\n                var _media2 = c.media || (appendInPlace ? bufferingPlayer == null ? void 0 : bufferingPlayer.media : null);\n                if (_media2) {\n                  _media2.currentTime = _seekToTime;\n                }\n              } else if (playingItem) {\n                // check if an Interstitial between the current item and target item has an X-RESTRICT JUMP restriction\n                var playingIndex = c.findItemIndex(playingItem);\n                if (targetIndex > playingIndex) {\n                  var jumpIndex = c.schedule.findJumpRestrictedIndex(playingIndex + 1, targetIndex);\n                  if (jumpIndex > playingIndex) {\n                    c.setSchedulePosition(jumpIndex);\n                    return;\n                  }\n                }\n                var assetIndex = 0;\n                if (targetIsPrimary) {\n                  c.timelinePos = _seekToTime;\n                  c.checkBuffer();\n                } else {\n                  var _targetItem$event;\n                  var assetList = targetItem == null ? void 0 : (_targetItem$event = targetItem.event) == null ? void 0 : _targetItem$event.assetList;\n                  if (assetList) {\n                    var eventTime = time - (targetItem[timelineType] || targetItem).start;\n                    for (var i = assetList.length; i--;) {\n                      var asset = assetList[i];\n                      if (asset.duration && eventTime >= asset.startOffset && eventTime < asset.startOffset + asset.duration) {\n                        assetIndex = i;\n                        break;\n                      }\n                    }\n                  }\n                }\n                c.setSchedulePosition(targetIndex, assetIndex);\n              }\n            }\n          };\n          var getActiveInterstitial = function getActiveInterstitial() {\n            var playingItem = c.effectivePlayingItem;\n            if (c.isInterstitial(playingItem)) {\n              return playingItem;\n            }\n            var bufferingItem = effectiveBufferingItem();\n            if (c.isInterstitial(bufferingItem)) {\n              return bufferingItem;\n            }\n            return null;\n          };\n          var interstitialPlayer = {\n            get currentTime() {\n              var interstitialItem = getActiveInterstitial();\n              var playingItem = c.effectivePlayingItem;\n              if (playingItem && playingItem === interstitialItem) {\n                return getMappedTime(playingItem, 'playout', c.effectivePlayingAsset, 'timelinePos', 'currentTime') - playingItem.playout.start;\n              }\n              return 0;\n            },\n            set currentTime(time) {\n              var interstitialItem = getActiveInterstitial();\n              var playingItem = c.effectivePlayingItem;\n              if (playingItem && playingItem === interstitialItem) {\n                seekTo(time + playingItem.playout.start, 'playout');\n              }\n            },\n            get duration() {\n              var interstitialItem = getActiveInterstitial();\n              if (interstitialItem) {\n                return interstitialItem.playout.end - interstitialItem.playout.start;\n              }\n              return 0;\n            },\n            get assetPlayers() {\n              var _getActiveInterstitia;\n              var assetList = (_getActiveInterstitia = getActiveInterstitial()) == null ? void 0 : _getActiveInterstitia.event.assetList;\n              if (assetList) {\n                return assetList.map(function (asset) {\n                  return c.getAssetPlayer(asset.identifier);\n                });\n              }\n              return [];\n            },\n            get playingIndex() {\n              var _getActiveInterstitia2;\n              var interstitial = (_getActiveInterstitia2 = getActiveInterstitial()) == null ? void 0 : _getActiveInterstitia2.event;\n              if (interstitial && c.effectivePlayingAsset) {\n                return interstitial.findAssetIndex(c.effectivePlayingAsset);\n              }\n              return -1;\n            },\n            get scheduleItem() {\n              return getActiveInterstitial();\n            }\n          };\n          this.manager = {\n            get events() {\n              var _c$schedule, _c$schedule$events;\n              return ((_c$schedule = c.schedule) == null ? void 0 : (_c$schedule$events = _c$schedule.events) == null ? void 0 : _c$schedule$events.slice(0)) || [];\n            },\n            get schedule() {\n              var _c$schedule2, _c$schedule2$items;\n              return ((_c$schedule2 = c.schedule) == null ? void 0 : (_c$schedule2$items = _c$schedule2.items) == null ? void 0 : _c$schedule2$items.slice(0)) || [];\n            },\n            get interstitialPlayer() {\n              if (getActiveInterstitial()) {\n                return interstitialPlayer;\n              }\n              return null;\n            },\n            get playerQueue() {\n              return c.playerQueue.slice(0);\n            },\n            get bufferingAsset() {\n              return c.bufferingAsset;\n            },\n            get bufferingItem() {\n              return effectiveBufferingItem();\n            },\n            get bufferingIndex() {\n              var item = effectiveBufferingItem();\n              return c.findItemIndex(item);\n            },\n            get playingAsset() {\n              return c.effectivePlayingAsset;\n            },\n            get playingItem() {\n              return c.effectivePlayingItem;\n            },\n            get playingIndex() {\n              var item = c.effectivePlayingItem;\n              return c.findItemIndex(item);\n            },\n            primary: {\n              get bufferedEnd() {\n                return getBufferedEnd();\n              },\n              get currentTime() {\n                var timelinePos = c.timelinePos;\n                return timelinePos > 0 ? timelinePos : 0;\n              },\n              set currentTime(time) {\n                seekTo(time, 'primary');\n              },\n              get duration() {\n                return getMappedDuration('primary');\n              },\n              get seekableStart() {\n                var _c$primaryDetails2;\n                return ((_c$primaryDetails2 = c.primaryDetails) == null ? void 0 : _c$primaryDetails2.fragmentStart) || 0;\n              }\n            },\n            integrated: {\n              get bufferedEnd() {\n                return getMappedTime(effectiveBufferingItem(), 'integrated', c.bufferingAsset, 'bufferedPos', 'bufferedEnd');\n              },\n              get currentTime() {\n                return getMappedTime(c.effectivePlayingItem, 'integrated', c.effectivePlayingAsset, 'timelinePos', 'currentTime');\n              },\n              set currentTime(time) {\n                seekTo(time, 'integrated');\n              },\n              get duration() {\n                return getMappedDuration('integrated');\n              },\n              get seekableStart() {\n                var _c$primaryDetails3;\n                return findMappedTime(((_c$primaryDetails3 = c.primaryDetails) == null ? void 0 : _c$primaryDetails3.fragmentStart) || 0, 'integrated');\n              }\n            },\n            skip: function skip() {\n              var item = c.effectivePlayingItem;\n              var event = item == null ? void 0 : item.event;\n              if (event && !event.restrictions.skip) {\n                var index = c.findItemIndex(item);\n                if (event.appendInPlace) {\n                  var time = item.playout.start + item.event.duration;\n                  seekTo(time + 0.001, 'playout');\n                } else {\n                  c.advanceAfterAssetEnded(event, index, Infinity);\n                }\n              }\n            }\n          };\n        }\n        return this.manager;\n      }\n\n      // Schedule getters\n    }, {\n      key: \"effectivePlayingItem\",\n      get: function get() {\n        return this.waitingItem || this.playingItem || this.endedItem;\n      }\n    }, {\n      key: \"effectivePlayingAsset\",\n      get: function get() {\n        return this.playingAsset || this.endedAsset;\n      }\n    }, {\n      key: \"playingLastItem\",\n      get: function get() {\n        var _this$schedule;\n        var playingItem = this.playingItem;\n        var items = (_this$schedule = this.schedule) == null ? void 0 : _this$schedule.items;\n        if (!this.playbackStarted || !playingItem || !items) {\n          return false;\n        }\n        return this.findItemIndex(playingItem) === items.length - 1;\n      }\n    }, {\n      key: \"playbackStarted\",\n      get: function get() {\n        return this.effectivePlayingItem !== null;\n      }\n\n      // Media getters and event callbacks\n    }, {\n      key: \"currentTime\",\n      get: function get() {\n        var _this$bufferingItem2, _this$bufferingItem2$, _media3;\n        if (this.mediaSelection === null) {\n          // Do not advance before schedule is known\n          return undefined;\n        }\n        // Ignore currentTime when detached for Interstitial playback with source reset\n        var queuedForPlayback = this.waitingItem || this.playingItem;\n        if (this.isInterstitial(queuedForPlayback) && !queuedForPlayback.event.appendInPlace) {\n          return undefined;\n        }\n        var media = this.media;\n        if (!media && (_this$bufferingItem2 = this.bufferingItem) != null && (_this$bufferingItem2$ = _this$bufferingItem2.event) != null && _this$bufferingItem2$.appendInPlace) {\n          // Observe detached media currentTime when appending in place\n          media = this.primaryMedia;\n        }\n        var currentTime = (_media3 = media) == null ? void 0 : _media3.currentTime;\n        if (currentTime === undefined || !isFiniteNumber(currentTime)) {\n          return undefined;\n        }\n        return currentTime;\n      }\n    }, {\n      key: \"primaryMedia\",\n      get: function get() {\n        var _this$detachedData5;\n        return this.media || ((_this$detachedData5 = this.detachedData) == null ? void 0 : _this$detachedData5.media) || null;\n      }\n    }, {\n      key: \"playbackDisabled\",\n      get: function get() {\n        return this.hls.config.enableInterstitialPlayback === false;\n      }\n    }, {\n      key: \"primaryDetails\",\n      get: function get() {\n        var _this$mediaSelection, _this$mediaSelection$;\n        return (_this$mediaSelection = this.mediaSelection) == null ? void 0 : (_this$mediaSelection$ = _this$mediaSelection.main) == null ? void 0 : _this$mediaSelection$.details;\n      }\n    }, {\n      key: \"primaryLive\",\n      get: function get() {\n        var _this$primaryDetails;\n        return !!((_this$primaryDetails = this.primaryDetails) != null && _this$primaryDetails.live);\n      }\n    }]);\n  }(Logger);\n\n  var TICK_INTERVAL$2 = 500; // how often to tick in ms\n\n  var SubtitleStreamController = /*#__PURE__*/function (_BaseStreamController) {\n    function SubtitleStreamController(hls, fragmentTracker, keyLoader) {\n      var _this;\n      _this = _BaseStreamController.call(this, hls, fragmentTracker, keyLoader, 'subtitle-stream-controller', PlaylistLevelType.SUBTITLE) || this;\n      _this.currentTrackId = -1;\n      _this.tracksBuffered = [];\n      _this.mainDetails = null;\n      _this.registerListeners();\n      return _this;\n    }\n    _inheritsLoose(SubtitleStreamController, _BaseStreamController);\n    var _proto = SubtitleStreamController.prototype;\n    _proto.onHandlerDestroying = function onHandlerDestroying() {\n      this.unregisterListeners();\n      _BaseStreamController.prototype.onHandlerDestroying.call(this);\n      this.mainDetails = null;\n    };\n    _proto.registerListeners = function registerListeners() {\n      _BaseStreamController.prototype.registerListeners.call(this);\n      var hls = this.hls;\n      hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n      hls.on(Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n      hls.on(Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);\n      hls.on(Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n      hls.on(Events.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);\n      hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      _BaseStreamController.prototype.unregisterListeners.call(this);\n      var hls = this.hls;\n      hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n      hls.off(Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n      hls.off(Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);\n      hls.off(Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n      hls.off(Events.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);\n      hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n    };\n    _proto.startLoad = function startLoad(startPosition, skipSeekToStartPosition) {\n      this.stopLoad();\n      this.state = State.IDLE;\n      this.setInterval(TICK_INTERVAL$2);\n      this.nextLoadPosition = this.lastCurrentTime = startPosition + this.timelineOffset;\n      this.startPosition = skipSeekToStartPosition ? -1 : startPosition;\n      this.tick();\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      _BaseStreamController.prototype.onManifestLoading.call(this);\n      this.mainDetails = null;\n    };\n    _proto.onMediaDetaching = function onMediaDetaching(event, data) {\n      this.tracksBuffered = [];\n      _BaseStreamController.prototype.onMediaDetaching.call(this, event, data);\n    };\n    _proto.onLevelLoaded = function onLevelLoaded(event, data) {\n      this.mainDetails = data.details;\n    };\n    _proto.onSubtitleFragProcessed = function onSubtitleFragProcessed(event, data) {\n      var frag = data.frag,\n        success = data.success;\n      if (isMediaFragment(frag)) {\n        this.fragPrevious = frag;\n      }\n      this.state = State.IDLE;\n      if (!success) {\n        return;\n      }\n      var buffered = this.tracksBuffered[this.currentTrackId];\n      if (!buffered) {\n        return;\n      }\n\n      // Create/update a buffered array matching the interface used by BufferHelper.bufferedInfo\n      // so we can re-use the logic used to detect how much has been buffered\n      var timeRange;\n      var fragStart = frag.start;\n      for (var i = 0; i < buffered.length; i++) {\n        if (fragStart >= buffered[i].start && fragStart <= buffered[i].end) {\n          timeRange = buffered[i];\n          break;\n        }\n      }\n      var fragEnd = frag.start + frag.duration;\n      if (timeRange) {\n        timeRange.end = fragEnd;\n      } else {\n        timeRange = {\n          start: fragStart,\n          end: fragEnd\n        };\n        buffered.push(timeRange);\n      }\n      this.fragmentTracker.fragBuffered(frag);\n      this.fragBufferedComplete(frag, null);\n      if (this.media) {\n        this.tick();\n      }\n    };\n    _proto.onBufferFlushing = function onBufferFlushing(event, data) {\n      var startOffset = data.startOffset,\n        endOffset = data.endOffset;\n      if (startOffset === 0 && endOffset !== Number.POSITIVE_INFINITY) {\n        var endOffsetSubtitles = endOffset - 1;\n        if (endOffsetSubtitles <= 0) {\n          return;\n        }\n        data.endOffsetSubtitles = Math.max(0, endOffsetSubtitles);\n        this.tracksBuffered.forEach(function (buffered) {\n          for (var i = 0; i < buffered.length;) {\n            if (buffered[i].end <= endOffsetSubtitles) {\n              buffered.shift();\n              continue;\n            } else if (buffered[i].start < endOffsetSubtitles) {\n              buffered[i].start = endOffsetSubtitles;\n            } else {\n              break;\n            }\n            i++;\n          }\n        });\n        this.fragmentTracker.removeFragmentsInRange(startOffset, endOffsetSubtitles, PlaylistLevelType.SUBTITLE);\n      }\n    }\n\n    // If something goes wrong, proceed to next frag, if we were processing one.\n    ;\n    _proto.onError = function onError(event, data) {\n      var frag = data.frag;\n      if ((frag == null ? void 0 : frag.type) === PlaylistLevelType.SUBTITLE) {\n        if (data.details === ErrorDetails.FRAG_GAP) {\n          this.fragmentTracker.fragBuffered(frag, true);\n        }\n        if (this.fragCurrent) {\n          this.fragCurrent.abortRequests();\n        }\n        if (this.state !== State.STOPPED) {\n          this.state = State.IDLE;\n        }\n      }\n    }\n\n    // Got all new subtitle levels.\n    ;\n    _proto.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(event, _ref) {\n      var _this2 = this;\n      var subtitleTracks = _ref.subtitleTracks;\n      if (this.levels && subtitleOptionsIdentical(this.levels, subtitleTracks)) {\n        this.levels = subtitleTracks.map(function (mediaPlaylist) {\n          return new Level(mediaPlaylist);\n        });\n        return;\n      }\n      this.tracksBuffered = [];\n      this.levels = subtitleTracks.map(function (mediaPlaylist) {\n        var level = new Level(mediaPlaylist);\n        _this2.tracksBuffered[level.id] = [];\n        return level;\n      });\n      this.fragmentTracker.removeFragmentsInRange(0, Number.POSITIVE_INFINITY, PlaylistLevelType.SUBTITLE);\n      this.fragPrevious = null;\n      this.mediaBuffer = null;\n    };\n    _proto.onSubtitleTrackSwitch = function onSubtitleTrackSwitch(event, data) {\n      var _this$levels;\n      this.currentTrackId = data.id;\n      if (!((_this$levels = this.levels) != null && _this$levels.length) || this.currentTrackId === -1) {\n        this.clearInterval();\n        return;\n      }\n\n      // Check if track has the necessary details to load fragments\n      var currentTrack = this.levels[this.currentTrackId];\n      if (currentTrack != null && currentTrack.details) {\n        this.mediaBuffer = this.mediaBufferTimeRanges;\n      } else {\n        this.mediaBuffer = null;\n      }\n      if (currentTrack && this.state !== State.STOPPED) {\n        this.setInterval(TICK_INTERVAL$2);\n      }\n    }\n\n    // Got a new set of subtitle fragments.\n    ;\n    _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(event, data) {\n      var _track$details;\n      var currentTrackId = this.currentTrackId,\n        levels = this.levels;\n      var newDetails = data.details,\n        trackId = data.id;\n      if (!levels) {\n        this.warn(\"Subtitle tracks were reset while loading level \" + trackId);\n        return;\n      }\n      var track = levels[trackId];\n      if (trackId >= levels.length || !track) {\n        return;\n      }\n      this.log(\"Subtitle track \" + trackId + \" loaded [\" + newDetails.startSN + \",\" + newDetails.endSN + \"]\" + (newDetails.lastPartSn ? \"[part-\" + newDetails.lastPartSn + \"-\" + newDetails.lastPartIndex + \"]\" : '') + \",duration:\" + newDetails.totalduration);\n      this.mediaBuffer = this.mediaBufferTimeRanges;\n      var sliding = 0;\n      if (newDetails.live || (_track$details = track.details) != null && _track$details.live) {\n        var mainDetails = this.mainDetails;\n        if (newDetails.deltaUpdateFailed || !mainDetails) {\n          return;\n        }\n        var mainSlidingStartFragment = mainDetails.fragments[0];\n        if (!track.details) {\n          if (newDetails.hasProgramDateTime && mainDetails.hasProgramDateTime) {\n            alignMediaPlaylistByPDT(newDetails, mainDetails);\n            sliding = newDetails.fragmentStart;\n          } else if (mainSlidingStartFragment) {\n            // line up live playlist with main so that fragments in range are loaded\n            sliding = mainSlidingStartFragment.start;\n            addSliding(newDetails, sliding);\n          }\n        } else {\n          var _this$levelLastLoaded;\n          sliding = this.alignPlaylists(newDetails, track.details, (_this$levelLastLoaded = this.levelLastLoaded) == null ? void 0 : _this$levelLastLoaded.details);\n          if (sliding === 0 && mainSlidingStartFragment) {\n            // realign with main when there is no overlap with last refresh\n            sliding = mainSlidingStartFragment.start;\n            addSliding(newDetails, sliding);\n          }\n        }\n      }\n      track.details = newDetails;\n      this.levelLastLoaded = track;\n      if (trackId !== currentTrackId) {\n        return;\n      }\n      this.hls.trigger(Events.SUBTITLE_TRACK_UPDATED, {\n        details: newDetails,\n        id: trackId,\n        groupId: data.groupId\n      });\n\n      // trigger handler right now\n      this.tick();\n\n      // If playlist is misaligned because of bad PDT or drift, delete details to resync with main on reload\n      if (newDetails.live && !this.fragCurrent && this.media && this.state === State.IDLE) {\n        var foundFrag = findFragmentByPTS(null, newDetails.fragments, this.media.currentTime, 0);\n        if (!foundFrag) {\n          this.warn('Subtitle playlist not aligned with playback');\n          track.details = undefined;\n        }\n      }\n    };\n    _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedData) {\n      var _this3 = this;\n      var frag = fragLoadedData.frag,\n        payload = fragLoadedData.payload;\n      var decryptData = frag.decryptdata;\n      var hls = this.hls;\n      if (this.fragContextChanged(frag)) {\n        return;\n      }\n      // check to see if the payload needs to be decrypted\n      if (payload && payload.byteLength > 0 && decryptData != null && decryptData.key && decryptData.iv && isFullSegmentEncryption(decryptData.method)) {\n        var startTime = performance.now();\n        // decrypt the subtitles\n        this.decrypter.decrypt(new Uint8Array(payload), decryptData.key.buffer, decryptData.iv.buffer, getAesModeFromFullSegmentMethod(decryptData.method)).catch(function (err) {\n          hls.trigger(Events.ERROR, {\n            type: ErrorTypes.MEDIA_ERROR,\n            details: ErrorDetails.FRAG_DECRYPT_ERROR,\n            fatal: false,\n            error: err,\n            reason: err.message,\n            frag: frag\n          });\n          throw err;\n        }).then(function (decryptedData) {\n          var endTime = performance.now();\n          hls.trigger(Events.FRAG_DECRYPTED, {\n            frag: frag,\n            payload: decryptedData,\n            stats: {\n              tstart: startTime,\n              tdecrypt: endTime\n            }\n          });\n        }).catch(function (err) {\n          _this3.warn(err.name + \": \" + err.message);\n          _this3.state = State.IDLE;\n        });\n      }\n    };\n    _proto.doTick = function doTick() {\n      if (!this.media) {\n        this.state = State.IDLE;\n        return;\n      }\n      if (this.state === State.IDLE) {\n        var currentTrackId = this.currentTrackId,\n          levels = this.levels;\n        var track = levels == null ? void 0 : levels[currentTrackId];\n        if (!track || !levels.length || !track.details) {\n          return;\n        }\n        if (this.waitForLive(track)) {\n          return;\n        }\n        var config = this.config;\n        var currentTime = this.getLoadPosition();\n        var bufferedInfo = BufferHelper.bufferedInfo(this.tracksBuffered[this.currentTrackId] || [], currentTime, config.maxBufferHole);\n        var targetBufferTime = bufferedInfo.end,\n          bufferLen = bufferedInfo.len;\n        var trackDetails = track.details;\n        var maxBufLen = this.hls.maxBufferLength + trackDetails.levelTargetDuration;\n        if (bufferLen > maxBufLen) {\n          return;\n        }\n        var fragments = trackDetails.fragments;\n        var fragLen = fragments.length;\n        var end = trackDetails.edge;\n        var foundFrag = null;\n        var fragPrevious = this.fragPrevious;\n        if (targetBufferTime < end) {\n          var tolerance = config.maxFragLookUpTolerance;\n          var lookupTolerance = targetBufferTime > end - tolerance ? 0 : tolerance;\n          foundFrag = findFragmentByPTS(fragPrevious, fragments, Math.max(fragments[0].start, targetBufferTime), lookupTolerance);\n          if (!foundFrag && fragPrevious && fragPrevious.start < fragments[0].start) {\n            foundFrag = fragments[0];\n          }\n        } else {\n          foundFrag = fragments[fragLen - 1];\n        }\n        foundFrag = this.filterReplacedPrimary(foundFrag, track.details);\n        if (!foundFrag) {\n          return;\n        }\n        // Load earlier fragment in same discontinuity to make up for misaligned playlists and cues that extend beyond end of segment\n        var curSNIdx = foundFrag.sn - trackDetails.startSN;\n        var prevFrag = fragments[curSNIdx - 1];\n        if (prevFrag && prevFrag.cc === foundFrag.cc && this.fragmentTracker.getState(prevFrag) === FragmentState.NOT_LOADED) {\n          foundFrag = prevFrag;\n        }\n        if (this.fragmentTracker.getState(foundFrag) === FragmentState.NOT_LOADED) {\n          // only load if fragment is not loaded\n          var fragToLoad = this.mapToInitFragWhenRequired(foundFrag);\n          if (fragToLoad) {\n            this.loadFragment(fragToLoad, track, targetBufferTime);\n          }\n        }\n      }\n    };\n    _proto.loadFragment = function loadFragment(frag, level, targetBufferTime) {\n      if (!isMediaFragment(frag)) {\n        this._loadInitSegment(frag, level);\n      } else {\n        _BaseStreamController.prototype.loadFragment.call(this, frag, level, targetBufferTime);\n      }\n    };\n    return _createClass(SubtitleStreamController, [{\n      key: \"mediaBufferTimeRanges\",\n      get: function get() {\n        return new BufferableInstance(this.tracksBuffered[this.currentTrackId] || []);\n      }\n    }]);\n  }(BaseStreamController);\n  var BufferableInstance = function BufferableInstance(timeranges) {\n    this.buffered = void 0;\n    var getRange = function getRange(name, index, length) {\n      index = index >>> 0;\n      if (index > length - 1) {\n        throw new DOMException(\"Failed to execute '\" + name + \"' on 'TimeRanges': The index provided (\" + index + \") is greater than the maximum bound (\" + length + \")\");\n      }\n      return timeranges[index][name];\n    };\n    this.buffered = {\n      get length() {\n        return timeranges.length;\n      },\n      end: function end(index) {\n        return getRange('end', index, timeranges.length);\n      },\n      start: function start(index) {\n        return getRange('start', index, timeranges.length);\n      }\n    };\n  };\n\n  function sendAddTrackEvent(track, videoEl) {\n    var event;\n    try {\n      event = new Event('addtrack');\n    } catch (err) {\n      // for IE11\n      event = document.createEvent('Event');\n      event.initEvent('addtrack', false, false);\n    }\n    event.track = track;\n    videoEl.dispatchEvent(event);\n  }\n  function addCueToTrack(track, cue) {\n    // Sometimes there are cue overlaps on segmented vtts so the same\n    // cue can appear more than once in different vtt files.\n    // This avoid showing duplicated cues with same timecode and text.\n    var mode = track.mode;\n    if (mode === 'disabled') {\n      track.mode = 'hidden';\n    }\n    if (track.cues && !track.cues.getCueById(cue.id)) {\n      try {\n        track.addCue(cue);\n        if (!track.cues.getCueById(cue.id)) {\n          throw new Error(\"addCue is failed for: \" + cue);\n        }\n      } catch (err) {\n        logger.debug(\"[texttrack-utils]: \" + err);\n        try {\n          var textTrackCue = new self.TextTrackCue(cue.startTime, cue.endTime, cue.text);\n          textTrackCue.id = cue.id;\n          track.addCue(textTrackCue);\n        } catch (err2) {\n          logger.debug(\"[texttrack-utils]: Legacy TextTrackCue fallback failed: \" + err2);\n        }\n      }\n    }\n    if (mode === 'disabled') {\n      track.mode = mode;\n    }\n  }\n  function clearCurrentCues(track, enterHandler) {\n    // When track.mode is disabled, track.cues will be null.\n    // To guarantee the removal of cues, we need to temporarily\n    // change the mode to hidden\n    var mode = track.mode;\n    if (mode === 'disabled') {\n      track.mode = 'hidden';\n    }\n    if (track.cues) {\n      for (var i = track.cues.length; i--;) {\n        if (enterHandler) {\n          track.cues[i].removeEventListener('enter', enterHandler);\n        }\n        track.removeCue(track.cues[i]);\n      }\n    }\n    if (mode === 'disabled') {\n      track.mode = mode;\n    }\n  }\n  function removeCuesInRange(track, start, end, predicate) {\n    var mode = track.mode;\n    if (mode === 'disabled') {\n      track.mode = 'hidden';\n    }\n    if (track.cues && track.cues.length > 0) {\n      var cues = getCuesInRange(track.cues, start, end);\n      for (var i = 0; i < cues.length; i++) {\n        if (!predicate || predicate(cues[i])) {\n          track.removeCue(cues[i]);\n        }\n      }\n    }\n    if (mode === 'disabled') {\n      track.mode = mode;\n    }\n  }\n\n  // Find first cue starting at or after given time.\n  // Modified version of binary search O(log(n)).\n  function getFirstCueIndexFromTime(cues, time) {\n    // If first cue starts at or after time, start there\n    if (time <= cues[0].startTime) {\n      return 0;\n    }\n    // If the last cue ends before time there is no overlap\n    var len = cues.length - 1;\n    if (time > cues[len].endTime) {\n      return -1;\n    }\n    var left = 0;\n    var right = len;\n    var mid;\n    while (left <= right) {\n      mid = Math.floor((right + left) / 2);\n      if (time < cues[mid].startTime) {\n        right = mid - 1;\n      } else if (time > cues[mid].startTime && left < len) {\n        left = mid + 1;\n      } else {\n        // If it's not lower or higher, it must be equal.\n        return mid;\n      }\n    }\n    // At this point, left and right have swapped.\n    // No direct match was found, left or right element must be the closest. Check which one has the smallest diff.\n    return cues[left].startTime - time < time - cues[right].startTime ? left : right;\n  }\n  function getCuesInRange(cues, start, end) {\n    var cuesFound = [];\n    var firstCueInRange = getFirstCueIndexFromTime(cues, start);\n    if (firstCueInRange > -1) {\n      for (var i = firstCueInRange, len = cues.length; i < len; i++) {\n        var cue = cues[i];\n        if (cue.startTime >= start && cue.endTime <= end) {\n          cuesFound.push(cue);\n        } else if (cue.startTime > end) {\n          return cuesFound;\n        }\n      }\n    }\n    return cuesFound;\n  }\n  function filterSubtitleTracks(textTrackList) {\n    var tracks = [];\n    for (var i = 0; i < textTrackList.length; i++) {\n      var track = textTrackList[i];\n      // Edge adds a track without a label; we don't want to use it\n      if ((track.kind === 'subtitles' || track.kind === 'captions') && track.label) {\n        tracks.push(textTrackList[i]);\n      }\n    }\n    return tracks;\n  }\n\n  var SubtitleTrackController = /*#__PURE__*/function (_BasePlaylistControll) {\n    function SubtitleTrackController(hls) {\n      var _this;\n      _this = _BasePlaylistControll.call(this, hls, 'subtitle-track-controller') || this;\n      _this.media = null;\n      _this.tracks = [];\n      _this.groupIds = null;\n      _this.tracksInGroup = [];\n      _this.trackId = -1;\n      _this.currentTrack = null;\n      _this.selectDefaultTrack = true;\n      _this.queuedDefaultTrack = -1;\n      _this.useTextTrackPolling = false;\n      _this.subtitlePollingInterval = -1;\n      _this._subtitleDisplay = true;\n      _this.asyncPollTrackChange = function () {\n        return _this.pollTrackChange(0);\n      };\n      _this.onTextTracksChanged = function () {\n        if (!_this.useTextTrackPolling) {\n          self.clearInterval(_this.subtitlePollingInterval);\n        }\n        // Media is undefined when switching streams via loadSource()\n        if (!_this.media || !_this.hls.config.renderTextTracksNatively) {\n          return;\n        }\n        var textTrack = null;\n        var tracks = filterSubtitleTracks(_this.media.textTracks);\n        for (var i = 0; i < tracks.length; i++) {\n          if (tracks[i].mode === 'hidden') {\n            // Do not break in case there is a following track with showing.\n            textTrack = tracks[i];\n          } else if (tracks[i].mode === 'showing') {\n            textTrack = tracks[i];\n            break;\n          }\n        }\n\n        // Find internal track index for TextTrack\n        var trackId = _this.findTrackForTextTrack(textTrack);\n        if (_this.subtitleTrack !== trackId) {\n          _this.setSubtitleTrack(trackId);\n        }\n      };\n      _this.registerListeners();\n      return _this;\n    }\n    _inheritsLoose(SubtitleTrackController, _BasePlaylistControll);\n    var _proto = SubtitleTrackController.prototype;\n    _proto.destroy = function destroy() {\n      this.unregisterListeners();\n      this.tracks.length = 0;\n      this.tracksInGroup.length = 0;\n      this.currentTrack = null;\n      // @ts-ignore\n      this.onTextTracksChanged = this.asyncPollTrackChange = null;\n      _BasePlaylistControll.prototype.destroy.call(this);\n    };\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.on(Events.LEVEL_LOADING, this.onLevelLoading, this);\n      hls.on(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n      hls.on(Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n      hls.on(Events.ERROR, this.onError, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.off(Events.LEVEL_LOADING, this.onLevelLoading, this);\n      hls.off(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n      hls.off(Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n      hls.off(Events.ERROR, this.onError, this);\n    }\n\n    // Listen for subtitle track change, then extract the current track ID.\n    ;\n    _proto.onMediaAttached = function onMediaAttached(event, data) {\n      this.media = data.media;\n      if (!this.media) {\n        return;\n      }\n      if (this.queuedDefaultTrack > -1) {\n        this.subtitleTrack = this.queuedDefaultTrack;\n        this.queuedDefaultTrack = -1;\n      }\n      this.useTextTrackPolling = !(this.media.textTracks && 'onchange' in this.media.textTracks);\n      if (this.useTextTrackPolling) {\n        this.pollTrackChange(500);\n      } else {\n        this.media.textTracks.addEventListener('change', this.asyncPollTrackChange);\n      }\n    };\n    _proto.pollTrackChange = function pollTrackChange(timeout) {\n      self.clearInterval(this.subtitlePollingInterval);\n      this.subtitlePollingInterval = self.setInterval(this.onTextTracksChanged, timeout);\n    };\n    _proto.onMediaDetaching = function onMediaDetaching(event, data) {\n      var media = this.media;\n      if (!media) {\n        return;\n      }\n      var transferringMedia = !!data.transferMedia;\n      self.clearInterval(this.subtitlePollingInterval);\n      if (!this.useTextTrackPolling) {\n        media.textTracks.removeEventListener('change', this.asyncPollTrackChange);\n      }\n      if (this.trackId > -1) {\n        this.queuedDefaultTrack = this.trackId;\n      }\n\n      // Disable all subtitle tracks before detachment so when reattached only tracks in that content are enabled.\n      this.subtitleTrack = -1;\n      this.media = null;\n      if (transferringMedia) {\n        return;\n      }\n      var textTracks = filterSubtitleTracks(media.textTracks);\n      // Clear loaded cues on media detachment from tracks\n      textTracks.forEach(function (track) {\n        clearCurrentCues(track);\n      });\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      this.tracks = [];\n      this.groupIds = null;\n      this.tracksInGroup = [];\n      this.trackId = -1;\n      this.currentTrack = null;\n      this.selectDefaultTrack = true;\n    }\n\n    // Fired whenever a new manifest is loaded.\n    ;\n    _proto.onManifestParsed = function onManifestParsed(event, data) {\n      this.tracks = data.subtitleTracks;\n    };\n    _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(event, data) {\n      var id = data.id,\n        groupId = data.groupId,\n        details = data.details;\n      var trackInActiveGroup = this.tracksInGroup[id];\n      if (!trackInActiveGroup || trackInActiveGroup.groupId !== groupId) {\n        this.warn(\"Subtitle track with id:\" + id + \" and group:\" + groupId + \" not found in active group \" + (trackInActiveGroup == null ? void 0 : trackInActiveGroup.groupId));\n        return;\n      }\n      var curDetails = trackInActiveGroup.details;\n      trackInActiveGroup.details = data.details;\n      this.log(\"Subtitle track \" + id + \" \\\"\" + trackInActiveGroup.name + \"\\\" lang:\" + trackInActiveGroup.lang + \" group:\" + groupId + \" loaded [\" + details.startSN + \"-\" + details.endSN + \"]\");\n      if (id === this.trackId) {\n        this.playlistLoaded(id, data, curDetails);\n      }\n    };\n    _proto.onLevelLoading = function onLevelLoading(event, data) {\n      this.switchLevel(data.level);\n    };\n    _proto.onLevelSwitching = function onLevelSwitching(event, data) {\n      this.switchLevel(data.level);\n    };\n    _proto.switchLevel = function switchLevel(levelIndex) {\n      var levelInfo = this.hls.levels[levelIndex];\n      if (!levelInfo) {\n        return;\n      }\n      var subtitleGroups = levelInfo.subtitleGroups || null;\n      var currentGroups = this.groupIds;\n      var currentTrack = this.currentTrack;\n      if (!subtitleGroups || (currentGroups == null ? void 0 : currentGroups.length) !== (subtitleGroups == null ? void 0 : subtitleGroups.length) || subtitleGroups != null && subtitleGroups.some(function (groupId) {\n        return (currentGroups == null ? void 0 : currentGroups.indexOf(groupId)) === -1;\n      })) {\n        this.groupIds = subtitleGroups;\n        this.trackId = -1;\n        this.currentTrack = null;\n        var subtitleTracks = this.tracks.filter(function (track) {\n          return !subtitleGroups || subtitleGroups.indexOf(track.groupId) !== -1;\n        });\n        if (subtitleTracks.length) {\n          // Disable selectDefaultTrack if there are no default tracks\n          if (this.selectDefaultTrack && !subtitleTracks.some(function (track) {\n            return track.default;\n          })) {\n            this.selectDefaultTrack = false;\n          }\n          // track.id should match hls.audioTracks index\n          subtitleTracks.forEach(function (track, i) {\n            track.id = i;\n          });\n        } else if (!currentTrack && !this.tracksInGroup.length) {\n          // Do not dispatch SUBTITLE_TRACKS_UPDATED when there were and are no tracks\n          return;\n        }\n        this.tracksInGroup = subtitleTracks;\n\n        // Find preferred track\n        var subtitlePreference = this.hls.config.subtitlePreference;\n        if (!currentTrack && subtitlePreference) {\n          this.selectDefaultTrack = false;\n          var groupIndex = findMatchingOption(subtitlePreference, subtitleTracks);\n          if (groupIndex > -1) {\n            currentTrack = subtitleTracks[groupIndex];\n          } else {\n            var allIndex = findMatchingOption(subtitlePreference, this.tracks);\n            currentTrack = this.tracks[allIndex];\n          }\n        }\n\n        // Select initial track\n        var trackId = this.findTrackId(currentTrack);\n        if (trackId === -1 && currentTrack) {\n          trackId = this.findTrackId(null);\n        }\n\n        // Dispatch events and load track if needed\n        var subtitleTracksUpdated = {\n          subtitleTracks: subtitleTracks\n        };\n        this.log(\"Updating subtitle tracks, \" + subtitleTracks.length + \" track(s) found in \\\"\" + (subtitleGroups == null ? void 0 : subtitleGroups.join(',')) + \"\\\" group-id\");\n        this.hls.trigger(Events.SUBTITLE_TRACKS_UPDATED, subtitleTracksUpdated);\n        if (trackId !== -1 && this.trackId === -1) {\n          this.setSubtitleTrack(trackId);\n        }\n      }\n    };\n    _proto.findTrackId = function findTrackId(currentTrack) {\n      var tracks = this.tracksInGroup;\n      var selectDefault = this.selectDefaultTrack;\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n        if (selectDefault && !track.default || !selectDefault && !currentTrack) {\n          continue;\n        }\n        if (!currentTrack || matchesOption(track, currentTrack)) {\n          return i;\n        }\n      }\n      if (currentTrack) {\n        for (var _i = 0; _i < tracks.length; _i++) {\n          var _track = tracks[_i];\n          if (mediaAttributesIdentical(currentTrack.attrs, _track.attrs, ['LANGUAGE', 'ASSOC-LANGUAGE', 'CHARACTERISTICS'])) {\n            return _i;\n          }\n        }\n        for (var _i2 = 0; _i2 < tracks.length; _i2++) {\n          var _track2 = tracks[_i2];\n          if (mediaAttributesIdentical(currentTrack.attrs, _track2.attrs, ['LANGUAGE'])) {\n            return _i2;\n          }\n        }\n      }\n      return -1;\n    };\n    _proto.findTrackForTextTrack = function findTrackForTextTrack(textTrack) {\n      if (textTrack) {\n        var tracks = this.tracksInGroup;\n        for (var i = 0; i < tracks.length; i++) {\n          var track = tracks[i];\n          if (subtitleTrackMatchesTextTrack(track, textTrack)) {\n            return i;\n          }\n        }\n      }\n      return -1;\n    };\n    _proto.onError = function onError(event, data) {\n      if (data.fatal || !data.context) {\n        return;\n      }\n      if (data.context.type === PlaylistContextType.SUBTITLE_TRACK && data.context.id === this.trackId && (!this.groupIds || this.groupIds.indexOf(data.context.groupId) !== -1)) {\n        this.checkRetry(data);\n      }\n    };\n    _proto.setSubtitleOption = function setSubtitleOption(subtitleOption) {\n      this.hls.config.subtitlePreference = subtitleOption;\n      if (subtitleOption) {\n        if (subtitleOption.id === -1) {\n          this.setSubtitleTrack(-1);\n          return null;\n        }\n        var allSubtitleTracks = this.allSubtitleTracks;\n        this.selectDefaultTrack = false;\n        if (allSubtitleTracks.length) {\n          // First see if current option matches (no switch op)\n          var currentTrack = this.currentTrack;\n          if (currentTrack && matchesOption(subtitleOption, currentTrack)) {\n            return currentTrack;\n          }\n          // Find option in current group\n          var groupIndex = findMatchingOption(subtitleOption, this.tracksInGroup);\n          if (groupIndex > -1) {\n            var track = this.tracksInGroup[groupIndex];\n            this.setSubtitleTrack(groupIndex);\n            return track;\n          } else if (currentTrack) {\n            // If this is not the initial selection return null\n            // option should have matched one in active group\n            return null;\n          } else {\n            // Find the option in all tracks for initial selection\n            var allIndex = findMatchingOption(subtitleOption, allSubtitleTracks);\n            if (allIndex > -1) {\n              return allSubtitleTracks[allIndex];\n            }\n          }\n        }\n      }\n      return null;\n    };\n    _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {\n      _BasePlaylistControll.prototype.loadPlaylist.call(this);\n      if (this.shouldLoadPlaylist(this.currentTrack)) {\n        this.scheduleLoading(this.currentTrack, hlsUrlParameters);\n      }\n    };\n    _proto.loadingPlaylist = function loadingPlaylist(currentTrack, hlsUrlParameters) {\n      _BasePlaylistControll.prototype.loadingPlaylist.call(this, currentTrack, hlsUrlParameters);\n      var id = currentTrack.id;\n      var groupId = currentTrack.groupId;\n      var url = this.getUrlWithDirectives(currentTrack.url, hlsUrlParameters);\n      var details = currentTrack.details;\n      var age = details == null ? void 0 : details.age;\n      this.log(\"Loading subtitle \" + id + \" \\\"\" + currentTrack.name + \"\\\" lang:\" + currentTrack.lang + \" group:\" + groupId + ((hlsUrlParameters == null ? void 0 : hlsUrlParameters.msn) !== undefined ? ' at sn ' + hlsUrlParameters.msn + ' part ' + hlsUrlParameters.part : '') + (age && details.live ? ' age ' + age.toFixed(1) + (details.type ? ' ' + details.type || 0 : '') : '') + \" \" + url);\n      this.hls.trigger(Events.SUBTITLE_TRACK_LOADING, {\n        url: url,\n        id: id,\n        groupId: groupId,\n        deliveryDirectives: hlsUrlParameters || null,\n        track: currentTrack\n      });\n    }\n\n    /**\n     * Disables the old subtitleTrack and sets current mode on the next subtitleTrack.\n     * This operates on the DOM textTracks.\n     * A value of -1 will disable all subtitle tracks.\n     */;\n    _proto.toggleTrackModes = function toggleTrackModes() {\n      var media = this.media;\n      if (!media) {\n        return;\n      }\n      var textTracks = filterSubtitleTracks(media.textTracks);\n      var currentTrack = this.currentTrack;\n      var nextTrack;\n      if (currentTrack) {\n        nextTrack = textTracks.filter(function (textTrack) {\n          return subtitleTrackMatchesTextTrack(currentTrack, textTrack);\n        })[0];\n        if (!nextTrack) {\n          this.warn(\"Unable to find subtitle TextTrack with name \\\"\" + currentTrack.name + \"\\\" and language \\\"\" + currentTrack.lang + \"\\\"\");\n        }\n      }\n      [].slice.call(textTracks).forEach(function (track) {\n        if (track.mode !== 'disabled' && track !== nextTrack) {\n          track.mode = 'disabled';\n        }\n      });\n      if (nextTrack) {\n        var mode = this.subtitleDisplay ? 'showing' : 'hidden';\n        if (nextTrack.mode !== mode) {\n          nextTrack.mode = mode;\n        }\n      }\n    }\n\n    /**\n     * This method is responsible for validating the subtitle index and periodically reloading if live.\n     * Dispatches the SUBTITLE_TRACK_SWITCH event, which instructs the subtitle-stream-controller to load the selected track.\n     */;\n    _proto.setSubtitleTrack = function setSubtitleTrack(newId) {\n      var tracks = this.tracksInGroup;\n\n      // setting this.subtitleTrack will trigger internal logic\n      // if media has not been attached yet, it will fail\n      // we keep a reference to the default track id\n      // and we'll set subtitleTrack when onMediaAttached is triggered\n      if (!this.media) {\n        this.queuedDefaultTrack = newId;\n        return;\n      }\n\n      // exit if track id as already set or invalid\n      if (newId < -1 || newId >= tracks.length || !isFiniteNumber(newId)) {\n        this.warn(\"Invalid subtitle track id: \" + newId);\n        return;\n      }\n      this.selectDefaultTrack = false;\n      var lastTrack = this.currentTrack;\n      var track = tracks[newId] || null;\n      this.trackId = newId;\n      this.currentTrack = track;\n      this.toggleTrackModes();\n      if (!track) {\n        // switch to -1\n        this.hls.trigger(Events.SUBTITLE_TRACK_SWITCH, {\n          id: newId\n        });\n        return;\n      }\n      var trackLoaded = !!track.details && !track.details.live;\n      if (newId === this.trackId && track === lastTrack && trackLoaded) {\n        return;\n      }\n      this.log(\"Switching to subtitle-track \" + newId + (track ? \" \\\"\" + track.name + \"\\\" lang:\" + track.lang + \" group:\" + track.groupId : ''));\n      var id = track.id,\n        _track$groupId = track.groupId,\n        groupId = _track$groupId === void 0 ? '' : _track$groupId,\n        name = track.name,\n        type = track.type,\n        url = track.url;\n      this.hls.trigger(Events.SUBTITLE_TRACK_SWITCH, {\n        id: id,\n        groupId: groupId,\n        name: name,\n        type: type,\n        url: url\n      });\n      var hlsUrlParameters = this.switchParams(track.url, lastTrack == null ? void 0 : lastTrack.details, track.details);\n      this.loadPlaylist(hlsUrlParameters);\n    };\n    return _createClass(SubtitleTrackController, [{\n      key: \"subtitleDisplay\",\n      get: function get() {\n        return this._subtitleDisplay;\n      },\n      set: function set(value) {\n        this._subtitleDisplay = value;\n        if (this.trackId > -1) {\n          this.toggleTrackModes();\n        }\n      }\n    }, {\n      key: \"allSubtitleTracks\",\n      get: function get() {\n        return this.tracks;\n      }\n\n      /** get alternate subtitle tracks list from playlist **/\n    }, {\n      key: \"subtitleTracks\",\n      get: function get() {\n        return this.tracksInGroup;\n      }\n\n      /** get/set index of the selected subtitle track (based on index in subtitle track lists) **/\n    }, {\n      key: \"subtitleTrack\",\n      get: function get() {\n        return this.trackId;\n      },\n      set: function set(newId) {\n        this.selectDefaultTrack = false;\n        this.setSubtitleTrack(newId);\n      }\n    }]);\n  }(BasePlaylistController);\n\n  /**\n   *\n   * This code was ported from the dash.js project at:\n   *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js\n   *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2\n   *\n   * The original copyright appears below:\n   *\n   * The copyright in this software is being made available under the BSD License,\n   * included below. This software may be subject to other third party and contributor\n   * rights, including patent rights, and no such rights are granted under this license.\n   *\n   * Copyright (c) 2015-2016, DASH Industry Forum.\n   * All rights reserved.\n   *\n   * Redistribution and use in source and binary forms, with or without modification,\n   * are permitted provided that the following conditions are met:\n   *  1. Redistributions of source code must retain the above copyright notice, this\n   *  list of conditions and the following disclaimer.\n   *  * Redistributions in binary form must reproduce the above copyright notice,\n   *  this list of conditions and the following disclaimer in the documentation and/or\n   *  other materials provided with the distribution.\n   *  2. Neither the name of Dash Industry Forum nor the names of its\n   *  contributors may be used to endorse or promote products derived from this software\n   *  without specific prior written permission.\n   *\n   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n   *  POSSIBILITY OF SUCH DAMAGE.\n   */\n  /**\n   *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes\n   */\n\n  var specialCea608CharsCodes = {\n    0x2a: 0xe1,\n    // lowercase a, acute accent\n    0x5c: 0xe9,\n    // lowercase e, acute accent\n    0x5e: 0xed,\n    // lowercase i, acute accent\n    0x5f: 0xf3,\n    // lowercase o, acute accent\n    0x60: 0xfa,\n    // lowercase u, acute accent\n    0x7b: 0xe7,\n    // lowercase c with cedilla\n    0x7c: 0xf7,\n    // division symbol\n    0x7d: 0xd1,\n    // uppercase N tilde\n    0x7e: 0xf1,\n    // lowercase n tilde\n    0x7f: 0x2588,\n    // Full block\n    // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n    // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F\n    // THIS MEANS THAT \\x50 MUST BE ADDED TO THE VALUES\n    0x80: 0xae,\n    // Registered symbol (R)\n    0x81: 0xb0,\n    // degree sign\n    0x82: 0xbd,\n    // 1/2 symbol\n    0x83: 0xbf,\n    // Inverted (open) question mark\n    0x84: 0x2122,\n    // Trademark symbol (TM)\n    0x85: 0xa2,\n    // Cents symbol\n    0x86: 0xa3,\n    // Pounds sterling\n    0x87: 0x266a,\n    // Music 8'th note\n    0x88: 0xe0,\n    // lowercase a, grave accent\n    0x89: 0x20,\n    // transparent space (regular)\n    0x8a: 0xe8,\n    // lowercase e, grave accent\n    0x8b: 0xe2,\n    // lowercase a, circumflex accent\n    0x8c: 0xea,\n    // lowercase e, circumflex accent\n    0x8d: 0xee,\n    // lowercase i, circumflex accent\n    0x8e: 0xf4,\n    // lowercase o, circumflex accent\n    0x8f: 0xfb,\n    // lowercase u, circumflex accent\n    // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n    // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F\n    0x90: 0xc1,\n    // capital letter A with acute\n    0x91: 0xc9,\n    // capital letter E with acute\n    0x92: 0xd3,\n    // capital letter O with acute\n    0x93: 0xda,\n    // capital letter U with acute\n    0x94: 0xdc,\n    // capital letter U with diaresis\n    0x95: 0xfc,\n    // lowercase letter U with diaeresis\n    0x96: 0x2018,\n    // opening single quote\n    0x97: 0xa1,\n    // inverted exclamation mark\n    0x98: 0x2a,\n    // asterisk\n    0x99: 0x2019,\n    // closing single quote\n    0x9a: 0x2501,\n    // box drawings heavy horizontal\n    0x9b: 0xa9,\n    // copyright sign\n    0x9c: 0x2120,\n    // Service mark\n    0x9d: 0x2022,\n    // (round) bullet\n    0x9e: 0x201c,\n    // Left double quotation mark\n    0x9f: 0x201d,\n    // Right double quotation mark\n    0xa0: 0xc0,\n    // uppercase A, grave accent\n    0xa1: 0xc2,\n    // uppercase A, circumflex\n    0xa2: 0xc7,\n    // uppercase C with cedilla\n    0xa3: 0xc8,\n    // uppercase E, grave accent\n    0xa4: 0xca,\n    // uppercase E, circumflex\n    0xa5: 0xcb,\n    // capital letter E with diaresis\n    0xa6: 0xeb,\n    // lowercase letter e with diaresis\n    0xa7: 0xce,\n    // uppercase I, circumflex\n    0xa8: 0xcf,\n    // uppercase I, with diaresis\n    0xa9: 0xef,\n    // lowercase i, with diaresis\n    0xaa: 0xd4,\n    // uppercase O, circumflex\n    0xab: 0xd9,\n    // uppercase U, grave accent\n    0xac: 0xf9,\n    // lowercase u, grave accent\n    0xad: 0xdb,\n    // uppercase U, circumflex\n    0xae: 0xab,\n    // left-pointing double angle quotation mark\n    0xaf: 0xbb,\n    // right-pointing double angle quotation mark\n    // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n    // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F\n    0xb0: 0xc3,\n    // Uppercase A, tilde\n    0xb1: 0xe3,\n    // Lowercase a, tilde\n    0xb2: 0xcd,\n    // Uppercase I, acute accent\n    0xb3: 0xcc,\n    // Uppercase I, grave accent\n    0xb4: 0xec,\n    // Lowercase i, grave accent\n    0xb5: 0xd2,\n    // Uppercase O, grave accent\n    0xb6: 0xf2,\n    // Lowercase o, grave accent\n    0xb7: 0xd5,\n    // Uppercase O, tilde\n    0xb8: 0xf5,\n    // Lowercase o, tilde\n    0xb9: 0x7b,\n    // Open curly brace\n    0xba: 0x7d,\n    // Closing curly brace\n    0xbb: 0x5c,\n    // Backslash\n    0xbc: 0x5e,\n    // Caret\n    0xbd: 0x5f,\n    // Underscore\n    0xbe: 0x7c,\n    // Pipe (vertical line)\n    0xbf: 0x223c,\n    // Tilde operator\n    0xc0: 0xc4,\n    // Uppercase A, umlaut\n    0xc1: 0xe4,\n    // Lowercase A, umlaut\n    0xc2: 0xd6,\n    // Uppercase O, umlaut\n    0xc3: 0xf6,\n    // Lowercase o, umlaut\n    0xc4: 0xdf,\n    // Esszett (sharp S)\n    0xc5: 0xa5,\n    // Yen symbol\n    0xc6: 0xa4,\n    // Generic currency sign\n    0xc7: 0x2503,\n    // Box drawings heavy vertical\n    0xc8: 0xc5,\n    // Uppercase A, ring\n    0xc9: 0xe5,\n    // Lowercase A, ring\n    0xca: 0xd8,\n    // Uppercase O, stroke\n    0xcb: 0xf8,\n    // Lowercase o, strok\n    0xcc: 0x250f,\n    // Box drawings heavy down and right\n    0xcd: 0x2513,\n    // Box drawings heavy down and left\n    0xce: 0x2517,\n    // Box drawings heavy up and right\n    0xcf: 0x251b // Box drawings heavy up and left\n  };\n\n  /**\n   * Utils\n   */\n  var getCharForByte = function getCharForByte(_byte) {\n    return String.fromCharCode(specialCea608CharsCodes[_byte] || _byte);\n  };\n  var NR_ROWS = 15;\n  var NR_COLS = 100;\n  // Tables to look up row from PAC data\n  var rowsLowCh1 = {\n    0x11: 1,\n    0x12: 3,\n    0x15: 5,\n    0x16: 7,\n    0x17: 9,\n    0x10: 11,\n    0x13: 12,\n    0x14: 14\n  };\n  var rowsHighCh1 = {\n    0x11: 2,\n    0x12: 4,\n    0x15: 6,\n    0x16: 8,\n    0x17: 10,\n    0x13: 13,\n    0x14: 15\n  };\n  var rowsLowCh2 = {\n    0x19: 1,\n    0x1a: 3,\n    0x1d: 5,\n    0x1e: 7,\n    0x1f: 9,\n    0x18: 11,\n    0x1b: 12,\n    0x1c: 14\n  };\n  var rowsHighCh2 = {\n    0x19: 2,\n    0x1a: 4,\n    0x1d: 6,\n    0x1e: 8,\n    0x1f: 10,\n    0x1b: 13,\n    0x1c: 15\n  };\n  var backgroundColors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'black', 'transparent'];\n  var CaptionsLogger = /*#__PURE__*/function () {\n    function CaptionsLogger() {\n      this.time = null;\n      this.verboseLevel = 0;\n    }\n    var _proto = CaptionsLogger.prototype;\n    _proto.log = function log(severity, msg) {\n      if (this.verboseLevel >= severity) {\n        var m = typeof msg === 'function' ? msg() : msg;\n        logger.log(this.time + \" [\" + severity + \"] \" + m);\n      }\n    };\n    return CaptionsLogger;\n  }();\n  var numArrayToHexArray = function numArrayToHexArray(numArray) {\n    var hexArray = [];\n    for (var j = 0; j < numArray.length; j++) {\n      hexArray.push(numArray[j].toString(16));\n    }\n    return hexArray;\n  };\n  var PenState = /*#__PURE__*/function () {\n    function PenState() {\n      this.foreground = 'white';\n      this.underline = false;\n      this.italics = false;\n      this.background = 'black';\n      this.flash = false;\n    }\n    var _proto2 = PenState.prototype;\n    _proto2.reset = function reset() {\n      this.foreground = 'white';\n      this.underline = false;\n      this.italics = false;\n      this.background = 'black';\n      this.flash = false;\n    };\n    _proto2.setStyles = function setStyles(styles) {\n      var attribs = ['foreground', 'underline', 'italics', 'background', 'flash'];\n      for (var i = 0; i < attribs.length; i++) {\n        var style = attribs[i];\n        if (styles.hasOwnProperty(style)) {\n          this[style] = styles[style];\n        }\n      }\n    };\n    _proto2.isDefault = function isDefault() {\n      return this.foreground === 'white' && !this.underline && !this.italics && this.background === 'black' && !this.flash;\n    };\n    _proto2.equals = function equals(other) {\n      return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;\n    };\n    _proto2.copy = function copy(newPenState) {\n      this.foreground = newPenState.foreground;\n      this.underline = newPenState.underline;\n      this.italics = newPenState.italics;\n      this.background = newPenState.background;\n      this.flash = newPenState.flash;\n    };\n    _proto2.toString = function toString() {\n      return 'color=' + this.foreground + ', underline=' + this.underline + ', italics=' + this.italics + ', background=' + this.background + ', flash=' + this.flash;\n    };\n    return PenState;\n  }();\n  /**\n   * Unicode character with styling and background.\n   * @constructor\n   */\n  var StyledUnicodeChar = /*#__PURE__*/function () {\n    function StyledUnicodeChar() {\n      this.uchar = ' ';\n      this.penState = new PenState();\n    }\n    var _proto3 = StyledUnicodeChar.prototype;\n    _proto3.reset = function reset() {\n      this.uchar = ' ';\n      this.penState.reset();\n    };\n    _proto3.setChar = function setChar(uchar, newPenState) {\n      this.uchar = uchar;\n      this.penState.copy(newPenState);\n    };\n    _proto3.setPenState = function setPenState(newPenState) {\n      this.penState.copy(newPenState);\n    };\n    _proto3.equals = function equals(other) {\n      return this.uchar === other.uchar && this.penState.equals(other.penState);\n    };\n    _proto3.copy = function copy(newChar) {\n      this.uchar = newChar.uchar;\n      this.penState.copy(newChar.penState);\n    };\n    _proto3.isEmpty = function isEmpty() {\n      return this.uchar === ' ' && this.penState.isDefault();\n    };\n    return StyledUnicodeChar;\n  }();\n  /**\n   * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.\n   * @constructor\n   */\n  var Row = /*#__PURE__*/function () {\n    function Row(logger) {\n      this.chars = [];\n      this.pos = 0;\n      this.currPenState = new PenState();\n      this.cueStartTime = null;\n      this.logger = void 0;\n      for (var i = 0; i < NR_COLS; i++) {\n        this.chars.push(new StyledUnicodeChar());\n      }\n      this.logger = logger;\n    }\n    var _proto4 = Row.prototype;\n    _proto4.equals = function equals(other) {\n      for (var i = 0; i < NR_COLS; i++) {\n        if (!this.chars[i].equals(other.chars[i])) {\n          return false;\n        }\n      }\n      return true;\n    };\n    _proto4.copy = function copy(other) {\n      for (var i = 0; i < NR_COLS; i++) {\n        this.chars[i].copy(other.chars[i]);\n      }\n    };\n    _proto4.isEmpty = function isEmpty() {\n      var empty = true;\n      for (var i = 0; i < NR_COLS; i++) {\n        if (!this.chars[i].isEmpty()) {\n          empty = false;\n          break;\n        }\n      }\n      return empty;\n    }\n\n    /**\n     *  Set the cursor to a valid column.\n     */;\n    _proto4.setCursor = function setCursor(absPos) {\n      if (this.pos !== absPos) {\n        this.pos = absPos;\n      }\n      if (this.pos < 0) {\n        this.logger.log(3, 'Negative cursor position ' + this.pos);\n        this.pos = 0;\n      } else if (this.pos > NR_COLS) {\n        this.logger.log(3, 'Too large cursor position ' + this.pos);\n        this.pos = NR_COLS;\n      }\n    }\n\n    /**\n     * Move the cursor relative to current position.\n     */;\n    _proto4.moveCursor = function moveCursor(relPos) {\n      var newPos = this.pos + relPos;\n      if (relPos > 1) {\n        for (var i = this.pos + 1; i < newPos + 1; i++) {\n          this.chars[i].setPenState(this.currPenState);\n        }\n      }\n      this.setCursor(newPos);\n    }\n\n    /**\n     * Backspace, move one step back and clear character.\n     */;\n    _proto4.backSpace = function backSpace() {\n      this.moveCursor(-1);\n      this.chars[this.pos].setChar(' ', this.currPenState);\n    };\n    _proto4.insertChar = function insertChar(_byte2) {\n      var _this = this;\n      if (_byte2 >= 0x90) {\n        // Extended char\n        this.backSpace();\n      }\n      var _char = getCharForByte(_byte2);\n      if (this.pos >= NR_COLS) {\n        this.logger.log(0, function () {\n          return 'Cannot insert ' + _byte2.toString(16) + ' (' + _char + ') at position ' + _this.pos + '. Skipping it!';\n        });\n        return;\n      }\n      this.chars[this.pos].setChar(_char, this.currPenState);\n      this.moveCursor(1);\n    };\n    _proto4.clearFromPos = function clearFromPos(startPos) {\n      var i;\n      for (i = startPos; i < NR_COLS; i++) {\n        this.chars[i].reset();\n      }\n    };\n    _proto4.clear = function clear() {\n      this.clearFromPos(0);\n      this.pos = 0;\n      this.currPenState.reset();\n    };\n    _proto4.clearToEndOfRow = function clearToEndOfRow() {\n      this.clearFromPos(this.pos);\n    };\n    _proto4.getTextString = function getTextString() {\n      var chars = [];\n      var empty = true;\n      for (var i = 0; i < NR_COLS; i++) {\n        var _char2 = this.chars[i].uchar;\n        if (_char2 !== ' ') {\n          empty = false;\n        }\n        chars.push(_char2);\n      }\n      if (empty) {\n        return '';\n      } else {\n        return chars.join('');\n      }\n    };\n    _proto4.setPenStyles = function setPenStyles(styles) {\n      this.currPenState.setStyles(styles);\n      var currChar = this.chars[this.pos];\n      currChar.setPenState(this.currPenState);\n    };\n    return Row;\n  }();\n\n  /**\n   * Keep a CEA-608 screen of 32x15 styled characters\n   * @constructor\n   */\n  var CaptionScreen = /*#__PURE__*/function () {\n    function CaptionScreen(logger) {\n      this.rows = [];\n      this.currRow = NR_ROWS - 1;\n      this.nrRollUpRows = null;\n      this.lastOutputScreen = null;\n      this.logger = void 0;\n      for (var i = 0; i < NR_ROWS; i++) {\n        this.rows.push(new Row(logger));\n      }\n      this.logger = logger;\n    }\n    var _proto5 = CaptionScreen.prototype;\n    _proto5.reset = function reset() {\n      for (var i = 0; i < NR_ROWS; i++) {\n        this.rows[i].clear();\n      }\n      this.currRow = NR_ROWS - 1;\n    };\n    _proto5.equals = function equals(other) {\n      var equal = true;\n      for (var i = 0; i < NR_ROWS; i++) {\n        if (!this.rows[i].equals(other.rows[i])) {\n          equal = false;\n          break;\n        }\n      }\n      return equal;\n    };\n    _proto5.copy = function copy(other) {\n      for (var i = 0; i < NR_ROWS; i++) {\n        this.rows[i].copy(other.rows[i]);\n      }\n    };\n    _proto5.isEmpty = function isEmpty() {\n      var empty = true;\n      for (var i = 0; i < NR_ROWS; i++) {\n        if (!this.rows[i].isEmpty()) {\n          empty = false;\n          break;\n        }\n      }\n      return empty;\n    };\n    _proto5.backSpace = function backSpace() {\n      var row = this.rows[this.currRow];\n      row.backSpace();\n    };\n    _proto5.clearToEndOfRow = function clearToEndOfRow() {\n      var row = this.rows[this.currRow];\n      row.clearToEndOfRow();\n    }\n\n    /**\n     * Insert a character (without styling) in the current row.\n     */;\n    _proto5.insertChar = function insertChar(_char3) {\n      var row = this.rows[this.currRow];\n      row.insertChar(_char3);\n    };\n    _proto5.setPen = function setPen(styles) {\n      var row = this.rows[this.currRow];\n      row.setPenStyles(styles);\n    };\n    _proto5.moveCursor = function moveCursor(relPos) {\n      var row = this.rows[this.currRow];\n      row.moveCursor(relPos);\n    };\n    _proto5.setCursor = function setCursor(absPos) {\n      this.logger.log(2, 'setCursor: ' + absPos);\n      var row = this.rows[this.currRow];\n      row.setCursor(absPos);\n    };\n    _proto5.setPAC = function setPAC(pacData) {\n      this.logger.log(2, function () {\n        return 'pacData = ' + stringify(pacData);\n      });\n      var newRow = pacData.row - 1;\n      if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {\n        newRow = this.nrRollUpRows - 1;\n      }\n\n      // Make sure this only affects Roll-up Captions by checking this.nrRollUpRows\n      if (this.nrRollUpRows && this.currRow !== newRow) {\n        // clear all rows first\n        for (var i = 0; i < NR_ROWS; i++) {\n          this.rows[i].clear();\n        }\n\n        // Copy this.nrRollUpRows rows from lastOutputScreen and place it in the newRow location\n        // topRowIndex - the start of rows to copy (inclusive index)\n        var topRowIndex = this.currRow + 1 - this.nrRollUpRows;\n        // We only copy if the last position was already shown.\n        // We use the cueStartTime value to check this.\n        var lastOutputScreen = this.lastOutputScreen;\n        if (lastOutputScreen) {\n          var prevLineTime = lastOutputScreen.rows[topRowIndex].cueStartTime;\n          var time = this.logger.time;\n          if (prevLineTime !== null && time !== null && prevLineTime < time) {\n            for (var _i = 0; _i < this.nrRollUpRows; _i++) {\n              this.rows[newRow - this.nrRollUpRows + _i + 1].copy(lastOutputScreen.rows[topRowIndex + _i]);\n            }\n          }\n        }\n      }\n      this.currRow = newRow;\n      var row = this.rows[this.currRow];\n      if (pacData.indent !== null) {\n        var indent = pacData.indent;\n        var prevPos = Math.max(indent - 1, 0);\n        row.setCursor(pacData.indent);\n        pacData.color = row.chars[prevPos].penState.foreground;\n      }\n      var styles = {\n        foreground: pacData.color,\n        underline: pacData.underline,\n        italics: pacData.italics,\n        background: 'black',\n        flash: false\n      };\n      this.setPen(styles);\n    }\n\n    /**\n     * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).\n     */;\n    _proto5.setBkgData = function setBkgData(bkgData) {\n      this.logger.log(2, function () {\n        return 'bkgData = ' + stringify(bkgData);\n      });\n      this.backSpace();\n      this.setPen(bkgData);\n      this.insertChar(0x20); // Space\n    };\n    _proto5.setRollUpRows = function setRollUpRows(nrRows) {\n      this.nrRollUpRows = nrRows;\n    };\n    _proto5.rollUp = function rollUp() {\n      var _this2 = this;\n      if (this.nrRollUpRows === null) {\n        this.logger.log(3, 'roll_up but nrRollUpRows not set yet');\n        return; // Not properly setup\n      }\n      this.logger.log(1, function () {\n        return _this2.getDisplayText();\n      });\n      var topRowIndex = this.currRow + 1 - this.nrRollUpRows;\n      var topRow = this.rows.splice(topRowIndex, 1)[0];\n      topRow.clear();\n      this.rows.splice(this.currRow, 0, topRow);\n      this.logger.log(2, 'Rolling up');\n      // this.logger.log(VerboseLevel.TEXT, this.get_display_text())\n    }\n\n    /**\n     * Get all non-empty rows with as unicode text.\n     */;\n    _proto5.getDisplayText = function getDisplayText(asOneRow) {\n      asOneRow = asOneRow || false;\n      var displayText = [];\n      var text = '';\n      var rowNr = -1;\n      for (var i = 0; i < NR_ROWS; i++) {\n        var rowText = this.rows[i].getTextString();\n        if (rowText) {\n          rowNr = i + 1;\n          if (asOneRow) {\n            displayText.push('Row ' + rowNr + \": '\" + rowText + \"'\");\n          } else {\n            displayText.push(rowText.trim());\n          }\n        }\n      }\n      if (displayText.length > 0) {\n        if (asOneRow) {\n          text = '[' + displayText.join(' | ') + ']';\n        } else {\n          text = displayText.join('\\n');\n        }\n      }\n      return text;\n    };\n    _proto5.getTextAndFormat = function getTextAndFormat() {\n      return this.rows;\n    };\n    return CaptionScreen;\n  }();\n\n  // var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];\n  var Cea608Channel = /*#__PURE__*/function () {\n    function Cea608Channel(channelNumber, outputFilter, logger) {\n      this.chNr = void 0;\n      this.outputFilter = void 0;\n      this.mode = void 0;\n      this.verbose = void 0;\n      this.displayedMemory = void 0;\n      this.nonDisplayedMemory = void 0;\n      this.lastOutputScreen = void 0;\n      this.currRollUpRow = void 0;\n      this.writeScreen = void 0;\n      this.cueStartTime = void 0;\n      this.logger = void 0;\n      this.chNr = channelNumber;\n      this.outputFilter = outputFilter;\n      this.mode = null;\n      this.verbose = 0;\n      this.displayedMemory = new CaptionScreen(logger);\n      this.nonDisplayedMemory = new CaptionScreen(logger);\n      this.lastOutputScreen = new CaptionScreen(logger);\n      this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];\n      this.writeScreen = this.displayedMemory;\n      this.mode = null;\n      this.cueStartTime = null; // Keeps track of where a cue started.\n      this.logger = logger;\n    }\n    var _proto6 = Cea608Channel.prototype;\n    _proto6.reset = function reset() {\n      this.mode = null;\n      this.displayedMemory.reset();\n      this.nonDisplayedMemory.reset();\n      this.lastOutputScreen.reset();\n      this.outputFilter.reset();\n      this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];\n      this.writeScreen = this.displayedMemory;\n      this.mode = null;\n      this.cueStartTime = null;\n    };\n    _proto6.getHandler = function getHandler() {\n      return this.outputFilter;\n    };\n    _proto6.setHandler = function setHandler(newHandler) {\n      this.outputFilter = newHandler;\n    };\n    _proto6.setPAC = function setPAC(pacData) {\n      this.writeScreen.setPAC(pacData);\n    };\n    _proto6.setBkgData = function setBkgData(bkgData) {\n      this.writeScreen.setBkgData(bkgData);\n    };\n    _proto6.setMode = function setMode(newMode) {\n      if (newMode === this.mode) {\n        return;\n      }\n      this.mode = newMode;\n      this.logger.log(2, function () {\n        return 'MODE=' + newMode;\n      });\n      if (this.mode === 'MODE_POP-ON') {\n        this.writeScreen = this.nonDisplayedMemory;\n      } else {\n        this.writeScreen = this.displayedMemory;\n        this.writeScreen.reset();\n      }\n      if (this.mode !== 'MODE_ROLL-UP') {\n        this.displayedMemory.nrRollUpRows = null;\n        this.nonDisplayedMemory.nrRollUpRows = null;\n      }\n      this.mode = newMode;\n    };\n    _proto6.insertChars = function insertChars(chars) {\n      var _this3 = this;\n      for (var i = 0; i < chars.length; i++) {\n        this.writeScreen.insertChar(chars[i]);\n      }\n      var screen = this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP';\n      this.logger.log(2, function () {\n        return screen + ': ' + _this3.writeScreen.getDisplayText(true);\n      });\n      if (this.mode === 'MODE_PAINT-ON' || this.mode === 'MODE_ROLL-UP') {\n        this.logger.log(1, function () {\n          return 'DISPLAYED: ' + _this3.displayedMemory.getDisplayText(true);\n        });\n        this.outputDataUpdate();\n      }\n    };\n    _proto6.ccRCL = function ccRCL() {\n      // Resume Caption Loading (switch mode to Pop On)\n      this.logger.log(2, 'RCL - Resume Caption Loading');\n      this.setMode('MODE_POP-ON');\n    };\n    _proto6.ccBS = function ccBS() {\n      // BackSpace\n      this.logger.log(2, 'BS - BackSpace');\n      if (this.mode === 'MODE_TEXT') {\n        return;\n      }\n      this.writeScreen.backSpace();\n      if (this.writeScreen === this.displayedMemory) {\n        this.outputDataUpdate();\n      }\n    };\n    _proto6.ccAOF = function ccAOF() {\n      // Reserved (formerly Alarm Off)\n    };\n    _proto6.ccAON = function ccAON() {\n      // Reserved (formerly Alarm On)\n    };\n    _proto6.ccDER = function ccDER() {\n      // Delete to End of Row\n      this.logger.log(2, 'DER- Delete to End of Row');\n      this.writeScreen.clearToEndOfRow();\n      this.outputDataUpdate();\n    };\n    _proto6.ccRU = function ccRU(nrRows) {\n      // Roll-Up Captions-2,3,or 4 Rows\n      this.logger.log(2, 'RU(' + nrRows + ') - Roll Up');\n      this.writeScreen = this.displayedMemory;\n      this.setMode('MODE_ROLL-UP');\n      this.writeScreen.setRollUpRows(nrRows);\n    };\n    _proto6.ccFON = function ccFON() {\n      // Flash On\n      this.logger.log(2, 'FON - Flash On');\n      this.writeScreen.setPen({\n        flash: true\n      });\n    };\n    _proto6.ccRDC = function ccRDC() {\n      // Resume Direct Captioning (switch mode to PaintOn)\n      this.logger.log(2, 'RDC - Resume Direct Captioning');\n      this.setMode('MODE_PAINT-ON');\n    };\n    _proto6.ccTR = function ccTR() {\n      // Text Restart in text mode (not supported, however)\n      this.logger.log(2, 'TR');\n      this.setMode('MODE_TEXT');\n    };\n    _proto6.ccRTD = function ccRTD() {\n      // Resume Text Display in Text mode (not supported, however)\n      this.logger.log(2, 'RTD');\n      this.setMode('MODE_TEXT');\n    };\n    _proto6.ccEDM = function ccEDM() {\n      // Erase Displayed Memory\n      this.logger.log(2, 'EDM - Erase Displayed Memory');\n      this.displayedMemory.reset();\n      this.outputDataUpdate(true);\n    };\n    _proto6.ccCR = function ccCR() {\n      // Carriage Return\n      this.logger.log(2, 'CR - Carriage Return');\n      this.writeScreen.rollUp();\n      this.outputDataUpdate(true);\n    };\n    _proto6.ccENM = function ccENM() {\n      // Erase Non-Displayed Memory\n      this.logger.log(2, 'ENM - Erase Non-displayed Memory');\n      this.nonDisplayedMemory.reset();\n    };\n    _proto6.ccEOC = function ccEOC() {\n      var _this4 = this;\n      // End of Caption (Flip Memories)\n      this.logger.log(2, 'EOC - End Of Caption');\n      if (this.mode === 'MODE_POP-ON') {\n        var tmp = this.displayedMemory;\n        this.displayedMemory = this.nonDisplayedMemory;\n        this.nonDisplayedMemory = tmp;\n        this.writeScreen = this.nonDisplayedMemory;\n        this.logger.log(1, function () {\n          return 'DISP: ' + _this4.displayedMemory.getDisplayText();\n        });\n      }\n      this.outputDataUpdate(true);\n    };\n    _proto6.ccTO = function ccTO(nrCols) {\n      // Tab Offset 1,2, or 3 columns\n      this.logger.log(2, 'TO(' + nrCols + ') - Tab Offset');\n      this.writeScreen.moveCursor(nrCols);\n    };\n    _proto6.ccMIDROW = function ccMIDROW(secondByte) {\n      // Parse MIDROW command\n      var styles = {\n        flash: false\n      };\n      styles.underline = secondByte % 2 === 1;\n      styles.italics = secondByte >= 0x2e;\n      if (!styles.italics) {\n        var colorIndex = Math.floor(secondByte / 2) - 0x10;\n        var colors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta'];\n        styles.foreground = colors[colorIndex];\n      } else {\n        styles.foreground = 'white';\n      }\n      this.logger.log(2, 'MIDROW: ' + stringify(styles));\n      this.writeScreen.setPen(styles);\n    };\n    _proto6.outputDataUpdate = function outputDataUpdate(dispatch) {\n      if (dispatch === void 0) {\n        dispatch = false;\n      }\n      var time = this.logger.time;\n      if (time === null) {\n        return;\n      }\n      if (this.outputFilter) {\n        if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {\n          // Start of a new cue\n          this.cueStartTime = time;\n        } else {\n          if (!this.displayedMemory.equals(this.lastOutputScreen)) {\n            this.outputFilter.newCue(this.cueStartTime, time, this.lastOutputScreen);\n            if (dispatch && this.outputFilter.dispatchCue) {\n              this.outputFilter.dispatchCue();\n            }\n            this.cueStartTime = this.displayedMemory.isEmpty() ? null : time;\n          }\n        }\n        this.lastOutputScreen.copy(this.displayedMemory);\n      }\n    };\n    _proto6.cueSplitAtTime = function cueSplitAtTime(t) {\n      if (this.outputFilter) {\n        if (!this.displayedMemory.isEmpty()) {\n          if (this.outputFilter.newCue) {\n            this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);\n          }\n          this.cueStartTime = t;\n        }\n      }\n    };\n    return Cea608Channel;\n  }(); // Will be 1 or 2 when parsing captions\n  var Cea608Parser = /*#__PURE__*/function () {\n    function Cea608Parser(field, out1, out2) {\n      this.channels = void 0;\n      this.currentChannel = 0;\n      this.cmdHistory = createCmdHistory();\n      this.logger = void 0;\n      var logger = this.logger = new CaptionsLogger();\n      this.channels = [null, new Cea608Channel(field, out1, logger), new Cea608Channel(field + 1, out2, logger)];\n    }\n    var _proto7 = Cea608Parser.prototype;\n    _proto7.getHandler = function getHandler(channel) {\n      return this.channels[channel].getHandler();\n    };\n    _proto7.setHandler = function setHandler(channel, newHandler) {\n      this.channels[channel].setHandler(newHandler);\n    }\n\n    /**\n     * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.\n     */;\n    _proto7.addData = function addData(time, byteList) {\n      var _this5 = this;\n      this.logger.time = time;\n      var _loop = function _loop(i) {\n          var a = byteList[i] & 0x7f;\n          var b = byteList[i + 1] & 0x7f;\n          var cmdFound = false;\n          var charsFound = null;\n          if (a === 0 && b === 0) {\n            return 0; // continue\n          } else {\n            _this5.logger.log(3, function () {\n              return '[' + numArrayToHexArray([byteList[i], byteList[i + 1]]) + '] -> (' + numArrayToHexArray([a, b]) + ')';\n            });\n          }\n          var cmdHistory = _this5.cmdHistory;\n          var isControlCode = a >= 0x10 && a <= 0x1f;\n          if (isControlCode) {\n            // Skip redundant control codes\n            if (hasCmdRepeated(a, b, cmdHistory)) {\n              setLastCmd(null, null, cmdHistory);\n              _this5.logger.log(3, function () {\n                return 'Repeated command (' + numArrayToHexArray([a, b]) + ') is dropped';\n              });\n              return 0; // continue\n            }\n            setLastCmd(a, b, _this5.cmdHistory);\n            cmdFound = _this5.parseCmd(a, b);\n            if (!cmdFound) {\n              cmdFound = _this5.parseMidrow(a, b);\n            }\n            if (!cmdFound) {\n              cmdFound = _this5.parsePAC(a, b);\n            }\n            if (!cmdFound) {\n              cmdFound = _this5.parseBackgroundAttributes(a, b);\n            }\n          } else {\n            setLastCmd(null, null, cmdHistory);\n          }\n          if (!cmdFound) {\n            charsFound = _this5.parseChars(a, b);\n            if (charsFound) {\n              var currChNr = _this5.currentChannel;\n              if (currChNr && currChNr > 0) {\n                var channel = _this5.channels[currChNr];\n                channel.insertChars(charsFound);\n              } else {\n                _this5.logger.log(2, 'No channel found yet. TEXT-MODE?');\n              }\n            }\n          }\n          if (!cmdFound && !charsFound) {\n            _this5.logger.log(2, function () {\n              return \"Couldn't parse cleaned data \" + numArrayToHexArray([a, b]) + ' orig: ' + numArrayToHexArray([byteList[i], byteList[i + 1]]);\n            });\n          }\n        },\n        _ret;\n      for (var i = 0; i < byteList.length; i += 2) {\n        _ret = _loop(i);\n        if (_ret === 0) continue;\n      }\n    }\n\n    /**\n     * Parse Command.\n     * @returns True if a command was found\n     */;\n    _proto7.parseCmd = function parseCmd(a, b) {\n      var cond1 = (a === 0x14 || a === 0x1c || a === 0x15 || a === 0x1d) && b >= 0x20 && b <= 0x2f;\n      var cond2 = (a === 0x17 || a === 0x1f) && b >= 0x21 && b <= 0x23;\n      if (!(cond1 || cond2)) {\n        return false;\n      }\n      var chNr = a === 0x14 || a === 0x15 || a === 0x17 ? 1 : 2;\n      var channel = this.channels[chNr];\n      if (a === 0x14 || a === 0x15 || a === 0x1c || a === 0x1d) {\n        if (b === 0x20) {\n          channel.ccRCL();\n        } else if (b === 0x21) {\n          channel.ccBS();\n        } else if (b === 0x22) {\n          channel.ccAOF();\n        } else if (b === 0x23) {\n          channel.ccAON();\n        } else if (b === 0x24) {\n          channel.ccDER();\n        } else if (b === 0x25) {\n          channel.ccRU(2);\n        } else if (b === 0x26) {\n          channel.ccRU(3);\n        } else if (b === 0x27) {\n          channel.ccRU(4);\n        } else if (b === 0x28) {\n          channel.ccFON();\n        } else if (b === 0x29) {\n          channel.ccRDC();\n        } else if (b === 0x2a) {\n          channel.ccTR();\n        } else if (b === 0x2b) {\n          channel.ccRTD();\n        } else if (b === 0x2c) {\n          channel.ccEDM();\n        } else if (b === 0x2d) {\n          channel.ccCR();\n        } else if (b === 0x2e) {\n          channel.ccENM();\n        } else if (b === 0x2f) {\n          channel.ccEOC();\n        }\n      } else {\n        // a == 0x17 || a == 0x1F\n        channel.ccTO(b - 0x20);\n      }\n      this.currentChannel = chNr;\n      return true;\n    }\n\n    /**\n     * Parse midrow styling command\n     */;\n    _proto7.parseMidrow = function parseMidrow(a, b) {\n      var chNr = 0;\n      if ((a === 0x11 || a === 0x19) && b >= 0x20 && b <= 0x2f) {\n        if (a === 0x11) {\n          chNr = 1;\n        } else {\n          chNr = 2;\n        }\n        if (chNr !== this.currentChannel) {\n          this.logger.log(0, 'Mismatch channel in midrow parsing');\n          return false;\n        }\n        var channel = this.channels[chNr];\n        if (!channel) {\n          return false;\n        }\n        channel.ccMIDROW(b);\n        this.logger.log(3, function () {\n          return 'MIDROW (' + numArrayToHexArray([a, b]) + ')';\n        });\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Parse Preable Access Codes (Table 53).\n     * @returns {Boolean} Tells if PAC found\n     */;\n    _proto7.parsePAC = function parsePAC(a, b) {\n      var row;\n      var case1 = (a >= 0x11 && a <= 0x17 || a >= 0x19 && a <= 0x1f) && b >= 0x40 && b <= 0x7f;\n      var case2 = (a === 0x10 || a === 0x18) && b >= 0x40 && b <= 0x5f;\n      if (!(case1 || case2)) {\n        return false;\n      }\n      var chNr = a <= 0x17 ? 1 : 2;\n      if (b >= 0x40 && b <= 0x5f) {\n        row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];\n      } else {\n        // 0x60 <= b <= 0x7F\n        row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];\n      }\n      var channel = this.channels[chNr];\n      if (!channel) {\n        return false;\n      }\n      channel.setPAC(this.interpretPAC(row, b));\n      this.currentChannel = chNr;\n      return true;\n    }\n\n    /**\n     * Interpret the second byte of the pac, and return the information.\n     * @returns pacData with style parameters\n     */;\n    _proto7.interpretPAC = function interpretPAC(row, _byte3) {\n      var pacIndex;\n      var pacData = {\n        color: null,\n        italics: false,\n        indent: null,\n        underline: false,\n        row: row\n      };\n      if (_byte3 > 0x5f) {\n        pacIndex = _byte3 - 0x60;\n      } else {\n        pacIndex = _byte3 - 0x40;\n      }\n      pacData.underline = (pacIndex & 1) === 1;\n      if (pacIndex <= 0xd) {\n        pacData.color = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'white'][Math.floor(pacIndex / 2)];\n      } else if (pacIndex <= 0xf) {\n        pacData.italics = true;\n        pacData.color = 'white';\n      } else {\n        pacData.indent = Math.floor((pacIndex - 0x10) / 2) * 4;\n      }\n      return pacData; // Note that row has zero offset. The spec uses 1.\n    }\n\n    /**\n     * Parse characters.\n     * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.\n     */;\n    _proto7.parseChars = function parseChars(a, b) {\n      var channelNr;\n      var charCodes = null;\n      var charCode1 = null;\n      if (a >= 0x19) {\n        channelNr = 2;\n        charCode1 = a - 8;\n      } else {\n        channelNr = 1;\n        charCode1 = a;\n      }\n      if (charCode1 >= 0x11 && charCode1 <= 0x13) {\n        // Special character\n        var oneCode;\n        if (charCode1 === 0x11) {\n          oneCode = b + 0x50;\n        } else if (charCode1 === 0x12) {\n          oneCode = b + 0x70;\n        } else {\n          oneCode = b + 0x90;\n        }\n        this.logger.log(2, function () {\n          return \"Special char '\" + getCharForByte(oneCode) + \"' in channel \" + channelNr;\n        });\n        charCodes = [oneCode];\n      } else if (a >= 0x20 && a <= 0x7f) {\n        charCodes = b === 0 ? [a] : [a, b];\n      }\n      if (charCodes) {\n        this.logger.log(3, function () {\n          return 'Char codes =  ' + numArrayToHexArray(charCodes).join(',');\n        });\n      }\n      return charCodes;\n    }\n\n    /**\n     * Parse extended background attributes as well as new foreground color black.\n     * @returns True if background attributes are found\n     */;\n    _proto7.parseBackgroundAttributes = function parseBackgroundAttributes(a, b) {\n      var case1 = (a === 0x10 || a === 0x18) && b >= 0x20 && b <= 0x2f;\n      var case2 = (a === 0x17 || a === 0x1f) && b >= 0x2d && b <= 0x2f;\n      if (!(case1 || case2)) {\n        return false;\n      }\n      var index;\n      var bkgData = {};\n      if (a === 0x10 || a === 0x18) {\n        index = Math.floor((b - 0x20) / 2);\n        bkgData.background = backgroundColors[index];\n        if (b % 2 === 1) {\n          bkgData.background = bkgData.background + '_semi';\n        }\n      } else if (b === 0x2d) {\n        bkgData.background = 'transparent';\n      } else {\n        bkgData.foreground = 'black';\n        if (b === 0x2f) {\n          bkgData.underline = true;\n        }\n      }\n      var chNr = a <= 0x17 ? 1 : 2;\n      var channel = this.channels[chNr];\n      channel.setBkgData(bkgData);\n      return true;\n    }\n\n    /**\n     * Reset state of parser and its channels.\n     */;\n    _proto7.reset = function reset() {\n      for (var i = 0; i < Object.keys(this.channels).length; i++) {\n        var channel = this.channels[i];\n        if (channel) {\n          channel.reset();\n        }\n      }\n      setLastCmd(null, null, this.cmdHistory);\n    }\n\n    /**\n     * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.\n     */;\n    _proto7.cueSplitAtTime = function cueSplitAtTime(t) {\n      for (var i = 0; i < this.channels.length; i++) {\n        var channel = this.channels[i];\n        if (channel) {\n          channel.cueSplitAtTime(t);\n        }\n      }\n    };\n    return Cea608Parser;\n  }();\n  function setLastCmd(a, b, cmdHistory) {\n    cmdHistory.a = a;\n    cmdHistory.b = b;\n  }\n  function hasCmdRepeated(a, b, cmdHistory) {\n    return cmdHistory.a === a && cmdHistory.b === b;\n  }\n  function createCmdHistory() {\n    return {\n      a: null,\n      b: null\n    };\n  }\n\n  /**\n   * Copyright 2013 vtt.js Contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the 'License');\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an 'AS IS' BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var VTTCue = (function () {\n    if (optionalSelf != null && optionalSelf.VTTCue) {\n      return self.VTTCue;\n    }\n    var AllowedDirections = ['', 'lr', 'rl'];\n    var AllowedAlignments = ['start', 'middle', 'end', 'left', 'right'];\n    function isAllowedValue(allowed, value) {\n      if (typeof value !== 'string') {\n        return false;\n      }\n      // necessary for assuring the generic conforms to the Array interface\n      if (!Array.isArray(allowed)) {\n        return false;\n      }\n      // reset the type so that the next narrowing works well\n      var lcValue = value.toLowerCase();\n      // use the allow list to narrow the type to a specific subset of strings\n      if (~allowed.indexOf(lcValue)) {\n        return lcValue;\n      }\n      return false;\n    }\n    function findDirectionSetting(value) {\n      return isAllowedValue(AllowedDirections, value);\n    }\n    function findAlignSetting(value) {\n      return isAllowedValue(AllowedAlignments, value);\n    }\n    function extend(obj) {\n      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        rest[_key - 1] = arguments[_key];\n      }\n      var i = 1;\n      for (; i < arguments.length; i++) {\n        var cobj = arguments[i];\n        for (var p in cobj) {\n          obj[p] = cobj[p];\n        }\n      }\n      return obj;\n    }\n    function VTTCue(startTime, endTime, text) {\n      var cue = this;\n      var baseObj = {\n        enumerable: true\n      };\n      /**\n       * Shim implementation specific properties. These properties are not in\n       * the spec.\n       */\n\n      // Lets us know when the VTTCue's data has changed in such a way that we need\n      // to recompute its display state. This lets us compute its display state\n      // lazily.\n      cue.hasBeenReset = false;\n\n      /**\n       * VTTCue and TextTrackCue properties\n       * http://dev.w3.org/html5/webvtt/#vttcue-interface\n       */\n\n      var _id = '';\n      var _pauseOnExit = false;\n      var _startTime = startTime;\n      var _endTime = endTime;\n      var _text = text;\n      var _region = null;\n      var _vertical = '';\n      var _snapToLines = true;\n      var _line = 'auto';\n      var _lineAlign = 'start';\n      var _position = 50;\n      var _positionAlign = 'middle';\n      var _size = 50;\n      var _align = 'middle';\n      Object.defineProperty(cue, 'id', extend({}, baseObj, {\n        get: function get() {\n          return _id;\n        },\n        set: function set(value) {\n          _id = '' + value;\n        }\n      }));\n      Object.defineProperty(cue, 'pauseOnExit', extend({}, baseObj, {\n        get: function get() {\n          return _pauseOnExit;\n        },\n        set: function set(value) {\n          _pauseOnExit = !!value;\n        }\n      }));\n      Object.defineProperty(cue, 'startTime', extend({}, baseObj, {\n        get: function get() {\n          return _startTime;\n        },\n        set: function set(value) {\n          if (typeof value !== 'number') {\n            throw new TypeError('Start time must be set to a number.');\n          }\n          _startTime = value;\n          this.hasBeenReset = true;\n        }\n      }));\n      Object.defineProperty(cue, 'endTime', extend({}, baseObj, {\n        get: function get() {\n          return _endTime;\n        },\n        set: function set(value) {\n          if (typeof value !== 'number') {\n            throw new TypeError('End time must be set to a number.');\n          }\n          _endTime = value;\n          this.hasBeenReset = true;\n        }\n      }));\n      Object.defineProperty(cue, 'text', extend({}, baseObj, {\n        get: function get() {\n          return _text;\n        },\n        set: function set(value) {\n          _text = '' + value;\n          this.hasBeenReset = true;\n        }\n      }));\n\n      // todo: implement VTTRegion polyfill?\n      Object.defineProperty(cue, 'region', extend({}, baseObj, {\n        get: function get() {\n          return _region;\n        },\n        set: function set(value) {\n          _region = value;\n          this.hasBeenReset = true;\n        }\n      }));\n      Object.defineProperty(cue, 'vertical', extend({}, baseObj, {\n        get: function get() {\n          return _vertical;\n        },\n        set: function set(value) {\n          var setting = findDirectionSetting(value);\n          // Have to check for false because the setting an be an empty string.\n          if (setting === false) {\n            throw new SyntaxError('An invalid or illegal string was specified.');\n          }\n          _vertical = setting;\n          this.hasBeenReset = true;\n        }\n      }));\n      Object.defineProperty(cue, 'snapToLines', extend({}, baseObj, {\n        get: function get() {\n          return _snapToLines;\n        },\n        set: function set(value) {\n          _snapToLines = !!value;\n          this.hasBeenReset = true;\n        }\n      }));\n      Object.defineProperty(cue, 'line', extend({}, baseObj, {\n        get: function get() {\n          return _line;\n        },\n        set: function set(value) {\n          if (typeof value !== 'number' && value !== 'auto') {\n            throw new SyntaxError('An invalid number or illegal string was specified.');\n          }\n          _line = value;\n          this.hasBeenReset = true;\n        }\n      }));\n      Object.defineProperty(cue, 'lineAlign', extend({}, baseObj, {\n        get: function get() {\n          return _lineAlign;\n        },\n        set: function set(value) {\n          var setting = findAlignSetting(value);\n          if (!setting) {\n            throw new SyntaxError('An invalid or illegal string was specified.');\n          }\n          _lineAlign = setting;\n          this.hasBeenReset = true;\n        }\n      }));\n      Object.defineProperty(cue, 'position', extend({}, baseObj, {\n        get: function get() {\n          return _position;\n        },\n        set: function set(value) {\n          if (value < 0 || value > 100) {\n            throw new Error('Position must be between 0 and 100.');\n          }\n          _position = value;\n          this.hasBeenReset = true;\n        }\n      }));\n      Object.defineProperty(cue, 'positionAlign', extend({}, baseObj, {\n        get: function get() {\n          return _positionAlign;\n        },\n        set: function set(value) {\n          var setting = findAlignSetting(value);\n          if (!setting) {\n            throw new SyntaxError('An invalid or illegal string was specified.');\n          }\n          _positionAlign = setting;\n          this.hasBeenReset = true;\n        }\n      }));\n      Object.defineProperty(cue, 'size', extend({}, baseObj, {\n        get: function get() {\n          return _size;\n        },\n        set: function set(value) {\n          if (value < 0 || value > 100) {\n            throw new Error('Size must be between 0 and 100.');\n          }\n          _size = value;\n          this.hasBeenReset = true;\n        }\n      }));\n      Object.defineProperty(cue, 'align', extend({}, baseObj, {\n        get: function get() {\n          return _align;\n        },\n        set: function set(value) {\n          var setting = findAlignSetting(value);\n          if (!setting) {\n            throw new SyntaxError('An invalid or illegal string was specified.');\n          }\n          _align = setting;\n          this.hasBeenReset = true;\n        }\n      }));\n\n      /**\n       * Other <track> spec defined properties\n       */\n\n      // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state\n      cue.displayState = undefined;\n    }\n\n    /**\n     * VTTCue methods\n     */\n\n    VTTCue.prototype.getCueAsHTML = function () {\n      // Assume WebVTT.convertCueToDOMTree is on the global.\n      var WebVTT = self.WebVTT;\n      return WebVTT.convertCueToDOMTree(self, this.text);\n    };\n    // this is a polyfill hack\n    return VTTCue;\n  })();\n\n  /*\n   * Source: https://github.com/mozilla/vtt.js/blob/master/dist/vtt.js\n   */\n\n  var StringDecoder = /*#__PURE__*/function () {\n    function StringDecoder() {}\n    var _proto = StringDecoder.prototype;\n    _proto.decode = function decode(data, options) {\n      if (!data) {\n        return '';\n      }\n      if (typeof data !== 'string') {\n        throw new Error('Error - expected string data.');\n      }\n      return decodeURIComponent(encodeURIComponent(data));\n    };\n    return StringDecoder;\n  }(); // Try to parse input as a time stamp.\n  function parseTimeStamp(input) {\n    function computeSeconds(h, m, s, f) {\n      return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + parseFloat(f || 0);\n    }\n    var m = input.match(/^(?:(\\d+):)?(\\d{2}):(\\d{2})(\\.\\d+)?/);\n    if (!m) {\n      return null;\n    }\n    if (parseFloat(m[2]) > 59) {\n      // Timestamp takes the form of [hours]:[minutes].[milliseconds]\n      // First position is hours as it's over 59.\n      return computeSeconds(m[2], m[3], 0, m[4]);\n    }\n    // Timestamp takes the form of [hours (optional)]:[minutes]:[seconds].[milliseconds]\n    return computeSeconds(m[1], m[2], m[3], m[4]);\n  }\n\n  // A settings object holds key/value pairs and will ignore anything but the first\n  // assignment to a specific key.\n  var Settings = /*#__PURE__*/function () {\n    function Settings() {\n      this.values = Object.create(null);\n    }\n    var _proto2 = Settings.prototype;\n    // Only accept the first assignment to any key.\n    _proto2.set = function set(k, v) {\n      if (!this.get(k) && v !== '') {\n        this.values[k] = v;\n      }\n    }\n    // Return the value for a key, or a default value.\n    // If 'defaultKey' is passed then 'dflt' is assumed to be an object with\n    // a number of possible default values as properties where 'defaultKey' is\n    // the key of the property that will be chosen; otherwise it's assumed to be\n    // a single value.\n    ;\n    _proto2.get = function get(k, dflt, defaultKey) {\n      if (defaultKey) {\n        return this.has(k) ? this.values[k] : dflt[defaultKey];\n      }\n      return this.has(k) ? this.values[k] : dflt;\n    }\n    // Check whether we have a value for a key.\n    ;\n    _proto2.has = function has(k) {\n      return k in this.values;\n    }\n    // Accept a setting if its one of the given alternatives.\n    ;\n    _proto2.alt = function alt(k, v, a) {\n      for (var n = 0; n < a.length; ++n) {\n        if (v === a[n]) {\n          this.set(k, v);\n          break;\n        }\n      }\n    }\n    // Accept a setting if its a valid (signed) integer.\n    ;\n    _proto2.integer = function integer(k, v) {\n      if (/^-?\\d+$/.test(v)) {\n        // integer\n        this.set(k, parseInt(v, 10));\n      }\n    }\n    // Accept a setting if its a valid percentage.\n    ;\n    _proto2.percent = function percent(k, v) {\n      if (/^([\\d]{1,3})(\\.[\\d]*)?%$/.test(v)) {\n        var _percent = parseFloat(v);\n        if (_percent >= 0 && _percent <= 100) {\n          this.set(k, _percent);\n          return true;\n        }\n      }\n      return false;\n    };\n    return Settings;\n  }(); // Helper function to parse input into groups separated by 'groupDelim', and\n  // interpret each group as a key/value pair separated by 'keyValueDelim'.\n  function parseOptions(input, callback, keyValueDelim, groupDelim) {\n    var groups = groupDelim ? input.split(groupDelim) : [input];\n    for (var i in groups) {\n      if (typeof groups[i] !== 'string') {\n        continue;\n      }\n      var kv = groups[i].split(keyValueDelim);\n      if (kv.length !== 2) {\n        continue;\n      }\n      var k = kv[0];\n      var v = kv[1];\n      callback(k, v);\n    }\n  }\n  var defaults = new VTTCue(0, 0, '');\n  // 'middle' was changed to 'center' in the spec: https://github.com/w3c/webvtt/pull/244\n  //  Safari doesn't yet support this change, but FF and Chrome do.\n  var center = defaults.align === 'middle' ? 'middle' : 'center';\n  function parseCue(input, cue, regionList) {\n    // Remember the original input if we need to throw an error.\n    var oInput = input;\n    // 4.1 WebVTT timestamp\n    function consumeTimeStamp() {\n      var ts = parseTimeStamp(input);\n      if (ts === null) {\n        throw new Error('Malformed timestamp: ' + oInput);\n      }\n\n      // Remove time stamp from input.\n      input = input.replace(/^[^\\sa-zA-Z-]+/, '');\n      return ts;\n    }\n\n    // 4.4.2 WebVTT cue settings\n    function consumeCueSettings(input, cue) {\n      var settings = new Settings();\n      parseOptions(input, function (k, v) {\n        var vals;\n        switch (k) {\n          case 'region':\n            // Find the last region we parsed with the same region id.\n            for (var i = regionList.length - 1; i >= 0; i--) {\n              if (regionList[i].id === v) {\n                settings.set(k, regionList[i].region);\n                break;\n              }\n            }\n            break;\n          case 'vertical':\n            settings.alt(k, v, ['rl', 'lr']);\n            break;\n          case 'line':\n            vals = v.split(',');\n            settings.integer(k, vals[0]);\n            if (settings.percent(k, vals[0])) {\n              settings.set('snapToLines', false);\n            }\n            settings.alt(k, vals[0], ['auto']);\n            if (vals.length === 2) {\n              settings.alt('lineAlign', vals[1], ['start', center, 'end']);\n            }\n            break;\n          case 'position':\n            vals = v.split(',');\n            settings.percent(k, vals[0]);\n            if (vals.length === 2) {\n              settings.alt('positionAlign', vals[1], ['start', center, 'end', 'line-left', 'line-right', 'auto']);\n            }\n            break;\n          case 'size':\n            settings.percent(k, v);\n            break;\n          case 'align':\n            settings.alt(k, v, ['start', center, 'end', 'left', 'right']);\n            break;\n        }\n      }, /:/, /\\s/);\n\n      // Apply default values for any missing fields.\n      cue.region = settings.get('region', null);\n      cue.vertical = settings.get('vertical', '');\n      var line = settings.get('line', 'auto');\n      if (line === 'auto' && defaults.line === -1) {\n        // set numeric line number for Safari\n        line = -1;\n      }\n      cue.line = line;\n      cue.lineAlign = settings.get('lineAlign', 'start');\n      cue.snapToLines = settings.get('snapToLines', true);\n      cue.size = settings.get('size', 100);\n      cue.align = settings.get('align', center);\n      var position = settings.get('position', 'auto');\n      if (position === 'auto' && defaults.position === 50) {\n        // set numeric position for Safari\n        position = cue.align === 'start' || cue.align === 'left' ? 0 : cue.align === 'end' || cue.align === 'right' ? 100 : 50;\n      }\n      cue.position = position;\n    }\n    function skipWhitespace() {\n      input = input.replace(/^\\s+/, '');\n    }\n\n    // 4.1 WebVTT cue timings.\n    skipWhitespace();\n    cue.startTime = consumeTimeStamp(); // (1) collect cue start time\n    skipWhitespace();\n    if (input.slice(0, 3) !== '-->') {\n      // (3) next characters must match '-->'\n      throw new Error(\"Malformed time stamp (time stamps must be separated by '-->'): \" + oInput);\n    }\n    input = input.slice(3);\n    skipWhitespace();\n    cue.endTime = consumeTimeStamp(); // (5) collect cue end time\n\n    // 4.1 WebVTT cue settings list.\n    skipWhitespace();\n    consumeCueSettings(input, cue);\n  }\n  function fixLineBreaks(input) {\n    return input.replace(/<br(?: \\/)?>/gi, '\\n');\n  }\n  var VTTParser = /*#__PURE__*/function () {\n    function VTTParser() {\n      this.state = 'INITIAL';\n      this.buffer = '';\n      this.decoder = new StringDecoder();\n      this.regionList = [];\n      this.cue = null;\n      this.oncue = void 0;\n      this.onparsingerror = void 0;\n      this.onflush = void 0;\n    }\n    var _proto3 = VTTParser.prototype;\n    _proto3.parse = function parse(data) {\n      var _this = this;\n\n      // If there is no data then we won't decode it, but will just try to parse\n      // whatever is in buffer already. This may occur in circumstances, for\n      // example when flush() is called.\n      if (data) {\n        // Try to decode the data that we received.\n        _this.buffer += _this.decoder.decode(data, {\n          stream: true\n        });\n      }\n      function collectNextLine() {\n        var buffer = _this.buffer;\n        var pos = 0;\n        buffer = fixLineBreaks(buffer);\n        while (pos < buffer.length && buffer[pos] !== '\\r' && buffer[pos] !== '\\n') {\n          ++pos;\n        }\n        var line = buffer.slice(0, pos);\n        // Advance the buffer early in case we fail below.\n        if (buffer[pos] === '\\r') {\n          ++pos;\n        }\n        if (buffer[pos] === '\\n') {\n          ++pos;\n        }\n        _this.buffer = buffer.slice(pos);\n        return line;\n      }\n\n      // 3.2 WebVTT metadata header syntax\n      function parseHeader(input) {\n        parseOptions(input, function (k, v) {\n          // switch (k) {\n          // case 'region':\n          // 3.3 WebVTT region metadata header syntax\n          // console.log('parse region', v);\n          // parseRegion(v);\n          // break;\n          // }\n        }, /:/);\n      }\n\n      // 5.1 WebVTT file parsing.\n      try {\n        var line = '';\n        if (_this.state === 'INITIAL') {\n          // We can't start parsing until we have the first line.\n          if (!/\\r\\n|\\n/.test(_this.buffer)) {\n            return this;\n          }\n          line = collectNextLine();\n          // strip of UTF-8 BOM if any\n          // https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8\n          var m = line.match(/^(ï»¿)?WEBVTT([ \\t].*)?$/);\n          if (!(m != null && m[0])) {\n            throw new Error('Malformed WebVTT signature.');\n          }\n          _this.state = 'HEADER';\n        }\n        var alreadyCollectedLine = false;\n        while (_this.buffer) {\n          // We can't parse a line until we have the full line.\n          if (!/\\r\\n|\\n/.test(_this.buffer)) {\n            return this;\n          }\n          if (!alreadyCollectedLine) {\n            line = collectNextLine();\n          } else {\n            alreadyCollectedLine = false;\n          }\n          switch (_this.state) {\n            case 'HEADER':\n              // 13-18 - Allow a header (metadata) under the WEBVTT line.\n              if (/:/.test(line)) {\n                parseHeader(line);\n              } else if (!line) {\n                // An empty line terminates the header and starts the body (cues).\n                _this.state = 'ID';\n              }\n              continue;\n            case 'NOTE':\n              // Ignore NOTE blocks.\n              if (!line) {\n                _this.state = 'ID';\n              }\n              continue;\n            case 'ID':\n              // Check for the start of NOTE blocks.\n              if (/^NOTE($|[ \\t])/.test(line)) {\n                _this.state = 'NOTE';\n                break;\n              }\n              // 19-29 - Allow any number of line terminators, then initialize new cue values.\n              if (!line) {\n                continue;\n              }\n              _this.cue = new VTTCue(0, 0, '');\n              _this.state = 'CUE';\n              // 30-39 - Check if self line contains an optional identifier or timing data.\n              if (line.indexOf('-->') === -1) {\n                _this.cue.id = line;\n                continue;\n              }\n            // Process line as start of a cue.\n            /* falls through */\n            case 'CUE':\n              // 40 - Collect cue timings and settings.\n              if (!_this.cue) {\n                _this.state = 'BADCUE';\n                continue;\n              }\n              try {\n                parseCue(line, _this.cue, _this.regionList);\n              } catch (e) {\n                // In case of an error ignore rest of the cue.\n                _this.cue = null;\n                _this.state = 'BADCUE';\n                continue;\n              }\n              _this.state = 'CUETEXT';\n              continue;\n            case 'CUETEXT':\n              {\n                var hasSubstring = line.indexOf('-->') !== -1;\n                // 34 - If we have an empty line then report the cue.\n                // 35 - If we have the special substring '-->' then report the cue,\n                // but do not collect the line as we need to process the current\n                // one as a new cue.\n                if (!line || hasSubstring && (alreadyCollectedLine = true)) {\n                  // We are done parsing self cue.\n                  if (_this.oncue && _this.cue) {\n                    _this.oncue(_this.cue);\n                  }\n                  _this.cue = null;\n                  _this.state = 'ID';\n                  continue;\n                }\n                if (_this.cue === null) {\n                  continue;\n                }\n                if (_this.cue.text) {\n                  _this.cue.text += '\\n';\n                }\n                _this.cue.text += line;\n              }\n              continue;\n            case 'BADCUE':\n              // 54-62 - Collect and discard the remaining cue.\n              if (!line) {\n                _this.state = 'ID';\n              }\n          }\n        }\n      } catch (e) {\n        // If we are currently parsing a cue, report what we have.\n        if (_this.state === 'CUETEXT' && _this.cue && _this.oncue) {\n          _this.oncue(_this.cue);\n        }\n        _this.cue = null;\n        // Enter BADWEBVTT state if header was not parsed correctly otherwise\n        // another exception occurred so enter BADCUE state.\n        _this.state = _this.state === 'INITIAL' ? 'BADWEBVTT' : 'BADCUE';\n      }\n      return this;\n    };\n    _proto3.flush = function flush() {\n      var _this = this;\n      try {\n        // Finish decoding the stream.\n        // _this.buffer += _this.decoder.decode();\n        // Synthesize the end of the current cue or region.\n        if (_this.cue || _this.state === 'HEADER') {\n          _this.buffer += '\\n\\n';\n          _this.parse();\n        }\n        // If we've flushed, parsed, and we're still on the INITIAL state then\n        // that means we don't have enough of the stream to parse the first\n        // line.\n        if (_this.state === 'INITIAL' || _this.state === 'BADWEBVTT') {\n          throw new Error('Malformed WebVTT signature.');\n        }\n      } catch (e) {\n        if (_this.onparsingerror) {\n          _this.onparsingerror(e);\n        }\n      }\n      if (_this.onflush) {\n        _this.onflush();\n      }\n      return this;\n    };\n    return VTTParser;\n  }();\n\n  var LINEBREAKS = /\\r\\n|\\n\\r|\\n|\\r/g;\n\n  // String.prototype.startsWith is not supported in IE11\n  var startsWith = function startsWith(inputString, searchString, position) {\n    if (position === void 0) {\n      position = 0;\n    }\n    return inputString.slice(position, position + searchString.length) === searchString;\n  };\n  var cueString2millis = function cueString2millis(timeString) {\n    var ts = parseInt(timeString.slice(-3));\n    var secs = parseInt(timeString.slice(-6, -4));\n    var mins = parseInt(timeString.slice(-9, -7));\n    var hours = timeString.length > 9 ? parseInt(timeString.substring(0, timeString.indexOf(':'))) : 0;\n    if (!isFiniteNumber(ts) || !isFiniteNumber(secs) || !isFiniteNumber(mins) || !isFiniteNumber(hours)) {\n      throw Error(\"Malformed X-TIMESTAMP-MAP: Local:\" + timeString);\n    }\n    ts += 1000 * secs;\n    ts += 60 * 1000 * mins;\n    ts += 60 * 60 * 1000 * hours;\n    return ts;\n  };\n\n  // Create a unique hash id for a cue based on start/end times and text.\n  // This helps timeline-controller to avoid showing repeated captions.\n  function generateCueId(startTime, endTime, text) {\n    return hash(startTime.toString()) + hash(endTime.toString()) + hash(text);\n  }\n  var calculateOffset = function calculateOffset(vttCCs, cc, presentationTime) {\n    var currCC = vttCCs[cc];\n    var prevCC = vttCCs[currCC.prevCC];\n\n    // This is the first discontinuity or cues have been processed since the last discontinuity\n    // Offset = current discontinuity time\n    if (!prevCC || !prevCC.new && currCC.new) {\n      vttCCs.ccOffset = vttCCs.presentationOffset = currCC.start;\n      currCC.new = false;\n      return;\n    }\n\n    // There have been discontinuities since cues were last parsed.\n    // Offset = time elapsed\n    while ((_prevCC = prevCC) != null && _prevCC.new) {\n      var _prevCC;\n      vttCCs.ccOffset += currCC.start - prevCC.start;\n      currCC.new = false;\n      currCC = prevCC;\n      prevCC = vttCCs[currCC.prevCC];\n    }\n    vttCCs.presentationOffset = presentationTime;\n  };\n  function parseWebVTT(vttByteArray, initPTS, vttCCs, cc, timeOffset, callBack, errorCallBack) {\n    var parser = new VTTParser();\n    // Convert byteArray into string, replacing any somewhat exotic linefeeds with \"\\n\", then split on that character.\n    // Uint8Array.prototype.reduce is not implemented in IE11\n    var vttLines = utf8ArrayToStr(new Uint8Array(vttByteArray)).trim().replace(LINEBREAKS, '\\n').split('\\n');\n    var cues = [];\n    var init90kHz = initPTS ? toMpegTsClockFromTimescale(initPTS.baseTime, initPTS.timescale) : 0;\n    var cueTime = '00:00.000';\n    var timestampMapMPEGTS = 0;\n    var timestampMapLOCAL = 0;\n    var parsingError;\n    var inHeader = true;\n    parser.oncue = function (cue) {\n      // Adjust cue timing; clamp cues to start no earlier than - and drop cues that don't end after - 0 on timeline.\n      var currCC = vttCCs[cc];\n      var cueOffset = vttCCs.ccOffset;\n\n      // Calculate subtitle PTS offset\n      var webVttMpegTsMapOffset = (timestampMapMPEGTS - init90kHz) / 90000;\n\n      // Update offsets for new discontinuities\n      if (currCC != null && currCC.new) {\n        if (timestampMapLOCAL !== undefined) {\n          // When local time is provided, offset = discontinuity start time - local time\n          cueOffset = vttCCs.ccOffset = currCC.start;\n        } else {\n          calculateOffset(vttCCs, cc, webVttMpegTsMapOffset);\n        }\n      }\n      if (webVttMpegTsMapOffset) {\n        if (!initPTS) {\n          parsingError = new Error('Missing initPTS for VTT MPEGTS');\n          return;\n        }\n        // If we have MPEGTS, offset = presentation time + discontinuity offset\n        cueOffset = webVttMpegTsMapOffset - vttCCs.presentationOffset;\n      }\n      var duration = cue.endTime - cue.startTime;\n      var startTime = normalizePts((cue.startTime + cueOffset - timestampMapLOCAL) * 90000, timeOffset * 90000) / 90000;\n      cue.startTime = Math.max(startTime, 0);\n      cue.endTime = Math.max(startTime + duration, 0);\n\n      //trim trailing webvtt block whitespaces\n      var text = cue.text.trim();\n\n      // Fix encoding of special characters\n      cue.text = decodeURIComponent(encodeURIComponent(text));\n\n      // If the cue was not assigned an id from the VTT file (line above the content), create one.\n      if (!cue.id) {\n        cue.id = generateCueId(cue.startTime, cue.endTime, text);\n      }\n      if (cue.endTime > 0) {\n        cues.push(cue);\n      }\n    };\n    parser.onparsingerror = function (error) {\n      parsingError = error;\n    };\n    parser.onflush = function () {\n      if (parsingError) {\n        errorCallBack(parsingError);\n        return;\n      }\n      callBack(cues);\n    };\n\n    // Go through contents line by line.\n    vttLines.forEach(function (line) {\n      if (inHeader) {\n        // Look for X-TIMESTAMP-MAP in header.\n        if (startsWith(line, 'X-TIMESTAMP-MAP=')) {\n          // Once found, no more are allowed anyway, so stop searching.\n          inHeader = false;\n          // Extract LOCAL and MPEGTS.\n          line.slice(16).split(',').forEach(function (timestamp) {\n            if (startsWith(timestamp, 'LOCAL:')) {\n              cueTime = timestamp.slice(6);\n            } else if (startsWith(timestamp, 'MPEGTS:')) {\n              timestampMapMPEGTS = parseInt(timestamp.slice(7));\n            }\n          });\n          try {\n            // Convert cue time to seconds\n            timestampMapLOCAL = cueString2millis(cueTime) / 1000;\n          } catch (error) {\n            parsingError = error;\n          }\n          // Return without parsing X-TIMESTAMP-MAP line.\n          return;\n        } else if (line === '') {\n          inHeader = false;\n        }\n      }\n      // Parse line by default.\n      parser.parse(line + '\\n');\n    });\n    parser.flush();\n  }\n\n  var IMSC1_CODEC = 'stpp.ttml.im1t';\n\n  // Time format: h:m:s:frames(.subframes)\n  var HMSF_REGEX = /^(\\d{2,}):(\\d{2}):(\\d{2}):(\\d{2})\\.?(\\d+)?$/;\n\n  // Time format: hours, minutes, seconds, milliseconds, frames, ticks\n  var TIME_UNIT_REGEX = /^(\\d*(?:\\.\\d*)?)(h|m|s|ms|f|t)$/;\n  var textAlignToLineAlign = {\n    left: 'start',\n    center: 'center',\n    right: 'end',\n    start: 'start',\n    end: 'end'\n  };\n  function parseIMSC1(payload, initPTS, callBack, errorCallBack) {\n    var results = findBox(new Uint8Array(payload), ['mdat']);\n    if (results.length === 0) {\n      errorCallBack(new Error('Could not parse IMSC1 mdat'));\n      return;\n    }\n    var ttmlList = results.map(function (mdat) {\n      return utf8ArrayToStr(mdat);\n    });\n    var syncTime = toTimescaleFromScale(initPTS.baseTime, 1, initPTS.timescale);\n    try {\n      ttmlList.forEach(function (ttml) {\n        return callBack(parseTTML(ttml, syncTime));\n      });\n    } catch (error) {\n      errorCallBack(error);\n    }\n  }\n  function parseTTML(ttml, syncTime) {\n    var parser = new DOMParser();\n    var xmlDoc = parser.parseFromString(ttml, 'text/xml');\n    var tt = xmlDoc.getElementsByTagName('tt')[0];\n    if (!tt) {\n      throw new Error('Invalid ttml');\n    }\n    var defaultRateInfo = {\n      frameRate: 30,\n      subFrameRate: 1,\n      frameRateMultiplier: 0,\n      tickRate: 0\n    };\n    var rateInfo = Object.keys(defaultRateInfo).reduce(function (result, key) {\n      result[key] = tt.getAttribute(\"ttp:\" + key) || defaultRateInfo[key];\n      return result;\n    }, {});\n    var trim = tt.getAttribute('xml:space') !== 'preserve';\n    var styleElements = collectionToDictionary(getElementCollection(tt, 'styling', 'style'));\n    var regionElements = collectionToDictionary(getElementCollection(tt, 'layout', 'region'));\n    var cueElements = getElementCollection(tt, 'body', '[begin]');\n    return [].map.call(cueElements, function (cueElement) {\n      var cueText = getTextContent(cueElement, trim);\n      if (!cueText || !cueElement.hasAttribute('begin')) {\n        return null;\n      }\n      var startTime = parseTtmlTime(cueElement.getAttribute('begin'), rateInfo);\n      var duration = parseTtmlTime(cueElement.getAttribute('dur'), rateInfo);\n      var endTime = parseTtmlTime(cueElement.getAttribute('end'), rateInfo);\n      if (startTime === null) {\n        throw timestampParsingError(cueElement);\n      }\n      if (endTime === null) {\n        if (duration === null) {\n          throw timestampParsingError(cueElement);\n        }\n        endTime = startTime + duration;\n      }\n      var cue = new VTTCue(startTime - syncTime, endTime - syncTime, cueText);\n      cue.id = generateCueId(cue.startTime, cue.endTime, cue.text);\n      var region = regionElements[cueElement.getAttribute('region')];\n      var style = styleElements[cueElement.getAttribute('style')];\n\n      // Apply styles to cue\n      var styles = getTtmlStyles(region, style, styleElements);\n      var textAlign = styles.textAlign;\n      if (textAlign) {\n        // cue.positionAlign not settable in FF~2016\n        var lineAlign = textAlignToLineAlign[textAlign];\n        if (lineAlign) {\n          cue.lineAlign = lineAlign;\n        }\n        cue.align = textAlign;\n      }\n      _extends(cue, styles);\n      return cue;\n    }).filter(function (cue) {\n      return cue !== null;\n    });\n  }\n  function getElementCollection(fromElement, parentName, childName) {\n    var parent = fromElement.getElementsByTagName(parentName)[0];\n    if (parent) {\n      return [].slice.call(parent.querySelectorAll(childName));\n    }\n    return [];\n  }\n  function collectionToDictionary(elementsWithId) {\n    return elementsWithId.reduce(function (dict, element) {\n      var id = element.getAttribute('xml:id');\n      if (id) {\n        dict[id] = element;\n      }\n      return dict;\n    }, {});\n  }\n  function getTextContent(element, trim) {\n    return [].slice.call(element.childNodes).reduce(function (str, node, i) {\n      var _node$childNodes;\n      if (node.nodeName === 'br' && i) {\n        return str + '\\n';\n      }\n      if ((_node$childNodes = node.childNodes) != null && _node$childNodes.length) {\n        return getTextContent(node, trim);\n      } else if (trim) {\n        return str + node.textContent.trim().replace(/\\s+/g, ' ');\n      }\n      return str + node.textContent;\n    }, '');\n  }\n  function getTtmlStyles(region, style, styleElements) {\n    var ttsNs = 'http://www.w3.org/ns/ttml#styling';\n    var regionStyle = null;\n    var styleAttributes = ['displayAlign', 'textAlign', 'color', 'backgroundColor', 'fontSize', 'fontFamily'\n    // 'fontWeight',\n    // 'lineHeight',\n    // 'wrapOption',\n    // 'fontStyle',\n    // 'direction',\n    // 'writingMode'\n    ];\n    var regionStyleName = region != null && region.hasAttribute('style') ? region.getAttribute('style') : null;\n    if (regionStyleName && styleElements.hasOwnProperty(regionStyleName)) {\n      regionStyle = styleElements[regionStyleName];\n    }\n    return styleAttributes.reduce(function (styles, name) {\n      var value = getAttributeNS(style, ttsNs, name) || getAttributeNS(region, ttsNs, name) || getAttributeNS(regionStyle, ttsNs, name);\n      if (value) {\n        styles[name] = value;\n      }\n      return styles;\n    }, {});\n  }\n  function getAttributeNS(element, ns, name) {\n    if (!element) {\n      return null;\n    }\n    return element.hasAttributeNS(ns, name) ? element.getAttributeNS(ns, name) : null;\n  }\n  function timestampParsingError(node) {\n    return new Error(\"Could not parse ttml timestamp \" + node);\n  }\n  function parseTtmlTime(timeAttributeValue, rateInfo) {\n    if (!timeAttributeValue) {\n      return null;\n    }\n    var seconds = parseTimeStamp(timeAttributeValue);\n    if (seconds === null) {\n      if (HMSF_REGEX.test(timeAttributeValue)) {\n        seconds = parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo);\n      } else if (TIME_UNIT_REGEX.test(timeAttributeValue)) {\n        seconds = parseTimeUnits(timeAttributeValue, rateInfo);\n      }\n    }\n    return seconds;\n  }\n  function parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo) {\n    var m = HMSF_REGEX.exec(timeAttributeValue);\n    var frames = (m[4] | 0) + (m[5] | 0) / rateInfo.subFrameRate;\n    return (m[1] | 0) * 3600 + (m[2] | 0) * 60 + (m[3] | 0) + frames / rateInfo.frameRate;\n  }\n  function parseTimeUnits(timeAttributeValue, rateInfo) {\n    var m = TIME_UNIT_REGEX.exec(timeAttributeValue);\n    var value = Number(m[1]);\n    var unit = m[2];\n    switch (unit) {\n      case 'h':\n        return value * 3600;\n      case 'm':\n        return value * 60;\n      case 'ms':\n        return value * 1000;\n      case 'f':\n        return value / rateInfo.frameRate;\n      case 't':\n        return value / rateInfo.tickRate;\n    }\n    return value;\n  }\n\n  var OutputFilter = /*#__PURE__*/function () {\n    function OutputFilter(timelineController, trackName) {\n      this.timelineController = void 0;\n      this.cueRanges = [];\n      this.trackName = void 0;\n      this.startTime = null;\n      this.endTime = null;\n      this.screen = null;\n      this.timelineController = timelineController;\n      this.trackName = trackName;\n    }\n    var _proto = OutputFilter.prototype;\n    _proto.dispatchCue = function dispatchCue() {\n      if (this.startTime === null) {\n        return;\n      }\n      this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges);\n      this.startTime = null;\n    };\n    _proto.newCue = function newCue(startTime, endTime, screen) {\n      if (this.startTime === null || this.startTime > startTime) {\n        this.startTime = startTime;\n      }\n      this.endTime = endTime;\n      this.screen = screen;\n      this.timelineController.createCaptionsTrack(this.trackName);\n    };\n    _proto.reset = function reset() {\n      this.cueRanges = [];\n      this.startTime = null;\n    };\n    return OutputFilter;\n  }();\n\n  var TimelineController = /*#__PURE__*/function () {\n    function TimelineController(hls) {\n      this.hls = void 0;\n      this.media = null;\n      this.config = void 0;\n      this.enabled = true;\n      this.Cues = void 0;\n      this.textTracks = [];\n      this.tracks = [];\n      this.initPTS = [];\n      this.unparsedVttFrags = [];\n      this.captionsTracks = {};\n      this.nonNativeCaptionsTracks = {};\n      this.cea608Parser1 = void 0;\n      this.cea608Parser2 = void 0;\n      this.lastCc = -1;\n      // Last video (CEA-608) fragment CC\n      this.lastSn = -1;\n      // Last video (CEA-608) fragment MSN\n      this.lastPartIndex = -1;\n      // Last video (CEA-608) fragment Part Index\n      this.prevCC = -1;\n      // Last subtitle fragment CC\n      this.vttCCs = newVTTCCs();\n      this.captionsProperties = void 0;\n      this.hls = hls;\n      this.config = hls.config;\n      this.Cues = hls.config.cueHandler;\n      this.captionsProperties = {\n        textTrack1: {\n          label: this.config.captionsTextTrack1Label,\n          languageCode: this.config.captionsTextTrack1LanguageCode\n        },\n        textTrack2: {\n          label: this.config.captionsTextTrack2Label,\n          languageCode: this.config.captionsTextTrack2LanguageCode\n        },\n        textTrack3: {\n          label: this.config.captionsTextTrack3Label,\n          languageCode: this.config.captionsTextTrack3LanguageCode\n        },\n        textTrack4: {\n          label: this.config.captionsTextTrack4Label,\n          languageCode: this.config.captionsTextTrack4LanguageCode\n        }\n      };\n      hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n      hls.on(Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n      hls.on(Events.FRAG_LOADING, this.onFragLoading, this);\n      hls.on(Events.FRAG_LOADED, this.onFragLoaded, this);\n      hls.on(Events.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);\n      hls.on(Events.FRAG_DECRYPTED, this.onFragDecrypted, this);\n      hls.on(Events.INIT_PTS_FOUND, this.onInitPtsFound, this);\n      hls.on(Events.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);\n      hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n    }\n    var _proto = TimelineController.prototype;\n    _proto.destroy = function destroy() {\n      var hls = this.hls;\n      hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n      hls.off(Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n      hls.off(Events.FRAG_LOADING, this.onFragLoading, this);\n      hls.off(Events.FRAG_LOADED, this.onFragLoaded, this);\n      hls.off(Events.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);\n      hls.off(Events.FRAG_DECRYPTED, this.onFragDecrypted, this);\n      hls.off(Events.INIT_PTS_FOUND, this.onInitPtsFound, this);\n      hls.off(Events.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);\n      hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n      // @ts-ignore\n      this.hls = this.config = this.media = null;\n      this.cea608Parser1 = this.cea608Parser2 = undefined;\n    };\n    _proto.initCea608Parsers = function initCea608Parsers() {\n      var channel1 = new OutputFilter(this, 'textTrack1');\n      var channel2 = new OutputFilter(this, 'textTrack2');\n      var channel3 = new OutputFilter(this, 'textTrack3');\n      var channel4 = new OutputFilter(this, 'textTrack4');\n      this.cea608Parser1 = new Cea608Parser(1, channel1, channel2);\n      this.cea608Parser2 = new Cea608Parser(3, channel3, channel4);\n    };\n    _proto.addCues = function addCues(trackName, startTime, endTime, screen, cueRanges) {\n      // skip cues which overlap more than 50% with previously parsed time ranges\n      var merged = false;\n      for (var i = cueRanges.length; i--;) {\n        var cueRange = cueRanges[i];\n        var overlap = intersection(cueRange[0], cueRange[1], startTime, endTime);\n        if (overlap >= 0) {\n          cueRange[0] = Math.min(cueRange[0], startTime);\n          cueRange[1] = Math.max(cueRange[1], endTime);\n          merged = true;\n          if (overlap / (endTime - startTime) > 0.5) {\n            return;\n          }\n        }\n      }\n      if (!merged) {\n        cueRanges.push([startTime, endTime]);\n      }\n      if (this.config.renderTextTracksNatively) {\n        var track = this.captionsTracks[trackName];\n        this.Cues.newCue(track, startTime, endTime, screen);\n      } else {\n        var cues = this.Cues.newCue(null, startTime, endTime, screen);\n        this.hls.trigger(Events.CUES_PARSED, {\n          type: 'captions',\n          cues: cues,\n          track: trackName\n        });\n      }\n    }\n\n    // Triggered when an initial PTS is found; used for synchronisation of WebVTT.\n    ;\n    _proto.onInitPtsFound = function onInitPtsFound(event, _ref) {\n      var _this = this;\n      var frag = _ref.frag,\n        id = _ref.id,\n        initPTS = _ref.initPTS,\n        timescale = _ref.timescale;\n      var unparsedVttFrags = this.unparsedVttFrags;\n      if (id === PlaylistLevelType.MAIN) {\n        this.initPTS[frag.cc] = {\n          baseTime: initPTS,\n          timescale: timescale\n        };\n      }\n\n      // Due to asynchronous processing, initial PTS may arrive later than the first VTT fragments are loaded.\n      // Parse any unparsed fragments upon receiving the initial PTS.\n      if (unparsedVttFrags.length) {\n        this.unparsedVttFrags = [];\n        unparsedVttFrags.forEach(function (frag) {\n          _this.onFragLoaded(Events.FRAG_LOADED, frag);\n        });\n      }\n    };\n    _proto.getExistingTrack = function getExistingTrack(label, language) {\n      var media = this.media;\n      if (media) {\n        for (var i = 0; i < media.textTracks.length; i++) {\n          var textTrack = media.textTracks[i];\n          if (canReuseVttTextTrack(textTrack, {\n            name: label,\n            lang: language,\n            characteristics: 'transcribes-spoken-dialog,describes-music-and-sound'})) {\n            return textTrack;\n          }\n        }\n      }\n      return null;\n    };\n    _proto.createCaptionsTrack = function createCaptionsTrack(trackName) {\n      if (this.config.renderTextTracksNatively) {\n        this.createNativeTrack(trackName);\n      } else {\n        this.createNonNativeTrack(trackName);\n      }\n    };\n    _proto.createNativeTrack = function createNativeTrack(trackName) {\n      if (this.captionsTracks[trackName]) {\n        return;\n      }\n      var captionsProperties = this.captionsProperties,\n        captionsTracks = this.captionsTracks,\n        media = this.media;\n      var _captionsProperties$t = captionsProperties[trackName],\n        label = _captionsProperties$t.label,\n        languageCode = _captionsProperties$t.languageCode;\n      // Enable reuse of existing text track.\n      var existingTrack = this.getExistingTrack(label, languageCode);\n      if (!existingTrack) {\n        var textTrack = this.createTextTrack('captions', label, languageCode);\n        if (textTrack) {\n          // Set a special property on the track so we know it's managed by Hls.js\n          textTrack[trackName] = true;\n          captionsTracks[trackName] = textTrack;\n        }\n      } else {\n        captionsTracks[trackName] = existingTrack;\n        clearCurrentCues(captionsTracks[trackName]);\n        sendAddTrackEvent(captionsTracks[trackName], media);\n      }\n    };\n    _proto.createNonNativeTrack = function createNonNativeTrack(trackName) {\n      if (this.nonNativeCaptionsTracks[trackName]) {\n        return;\n      }\n      // Create a list of a single track for the provider to consume\n      var trackProperties = this.captionsProperties[trackName];\n      if (!trackProperties) {\n        return;\n      }\n      var label = trackProperties.label;\n      var track = {\n        _id: trackName,\n        label: label,\n        kind: 'captions',\n        default: trackProperties.media ? !!trackProperties.media.default : false,\n        closedCaptions: trackProperties.media\n      };\n      this.nonNativeCaptionsTracks[trackName] = track;\n      this.hls.trigger(Events.NON_NATIVE_TEXT_TRACKS_FOUND, {\n        tracks: [track]\n      });\n    };\n    _proto.createTextTrack = function createTextTrack(kind, label, lang) {\n      var media = this.media;\n      if (!media) {\n        return;\n      }\n      return media.addTextTrack(kind, label, lang);\n    };\n    _proto.onMediaAttaching = function onMediaAttaching(event, data) {\n      this.media = data.media;\n      if (!data.mediaSource) {\n        this._cleanTracks();\n      }\n    };\n    _proto.onMediaDetaching = function onMediaDetaching(event, data) {\n      var transferringMedia = !!data.transferMedia;\n      this.media = null;\n      if (transferringMedia) {\n        return;\n      }\n      var captionsTracks = this.captionsTracks;\n      Object.keys(captionsTracks).forEach(function (trackName) {\n        clearCurrentCues(captionsTracks[trackName]);\n        delete captionsTracks[trackName];\n      });\n      this.nonNativeCaptionsTracks = {};\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      // Detect discontinuity in video fragment (CEA-608) parsing\n      this.lastCc = -1;\n      this.lastSn = -1;\n      this.lastPartIndex = -1;\n      // Detect discontinuity in subtitle manifests\n      this.prevCC = -1;\n      this.vttCCs = newVTTCCs();\n      // Reset tracks\n      this._cleanTracks();\n      this.tracks = [];\n      this.captionsTracks = {};\n      this.nonNativeCaptionsTracks = {};\n      this.textTracks = [];\n      this.unparsedVttFrags = [];\n      this.initPTS = [];\n      if (this.cea608Parser1 && this.cea608Parser2) {\n        this.cea608Parser1.reset();\n        this.cea608Parser2.reset();\n      }\n    };\n    _proto._cleanTracks = function _cleanTracks() {\n      // clear outdated subtitles\n      var media = this.media;\n      if (!media) {\n        return;\n      }\n      var textTracks = media.textTracks;\n      if (textTracks) {\n        for (var i = 0; i < textTracks.length; i++) {\n          clearCurrentCues(textTracks[i]);\n        }\n      }\n    };\n    _proto.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(event, data) {\n      var _this2 = this;\n      var tracks = data.subtitleTracks || [];\n      var hasIMSC1 = tracks.some(function (track) {\n        return track.textCodec === IMSC1_CODEC;\n      });\n      if (this.config.enableWebVTT || hasIMSC1 && this.config.enableIMSC1) {\n        var listIsIdentical = subtitleOptionsIdentical(this.tracks, tracks);\n        if (listIsIdentical) {\n          this.tracks = tracks;\n          return;\n        }\n        this.textTracks = [];\n        this.tracks = tracks;\n        if (this.config.renderTextTracksNatively) {\n          var media = this.media;\n          var inUseTracks = media ? filterSubtitleTracks(media.textTracks) : null;\n          this.tracks.forEach(function (track, index) {\n            // Reuse tracks with the same label and lang, but do not reuse 608/708 tracks\n            var textTrack;\n            if (inUseTracks) {\n              var inUseTrack = null;\n              for (var i = 0; i < inUseTracks.length; i++) {\n                if (inUseTracks[i] && canReuseVttTextTrack(inUseTracks[i], track)) {\n                  inUseTrack = inUseTracks[i];\n                  inUseTracks[i] = null;\n                  break;\n                }\n              }\n              if (inUseTrack) {\n                textTrack = inUseTrack;\n              }\n            }\n            if (textTrack) {\n              clearCurrentCues(textTrack);\n            } else {\n              var textTrackKind = captionsOrSubtitlesFromCharacteristics(track);\n              textTrack = _this2.createTextTrack(textTrackKind, track.name, track.lang);\n              if (textTrack) {\n                textTrack.mode = 'disabled';\n              }\n            }\n            if (textTrack) {\n              _this2.textTracks.push(textTrack);\n            }\n          });\n          // Warn when video element has captions or subtitle TextTracks carried over from another source\n          if (inUseTracks != null && inUseTracks.length) {\n            var unusedTextTracks = inUseTracks.filter(function (t) {\n              return t !== null;\n            }).map(function (t) {\n              return t.label;\n            });\n            if (unusedTextTracks.length) {\n              this.hls.logger.warn(\"Media element contains unused subtitle tracks: \" + unusedTextTracks.join(', ') + \". Replace media element for each source to clear TextTracks and captions menu.\");\n            }\n          }\n        } else if (this.tracks.length) {\n          // Create a list of tracks for the provider to consume\n          var tracksList = this.tracks.map(function (track) {\n            return {\n              label: track.name,\n              kind: track.type.toLowerCase(),\n              default: track.default,\n              subtitleTrack: track\n            };\n          });\n          this.hls.trigger(Events.NON_NATIVE_TEXT_TRACKS_FOUND, {\n            tracks: tracksList\n          });\n        }\n      }\n    };\n    _proto.onManifestLoaded = function onManifestLoaded(event, data) {\n      var _this3 = this;\n      if (this.config.enableCEA708Captions && data.captions) {\n        data.captions.forEach(function (captionsTrack) {\n          var instreamIdMatch = /(?:CC|SERVICE)([1-4])/.exec(captionsTrack.instreamId);\n          if (!instreamIdMatch) {\n            return;\n          }\n          var trackName = \"textTrack\" + instreamIdMatch[1];\n          var trackProperties = _this3.captionsProperties[trackName];\n          if (!trackProperties) {\n            return;\n          }\n          trackProperties.label = captionsTrack.name;\n          if (captionsTrack.lang) {\n            // optional attribute\n            trackProperties.languageCode = captionsTrack.lang;\n          }\n          trackProperties.media = captionsTrack;\n        });\n      }\n    };\n    _proto.closedCaptionsForLevel = function closedCaptionsForLevel(frag) {\n      var level = this.hls.levels[frag.level];\n      return level == null ? void 0 : level.attrs['CLOSED-CAPTIONS'];\n    };\n    _proto.onFragLoading = function onFragLoading(event, data) {\n      // if this frag isn't contiguous, clear the parser so cues with bad start/end times aren't added to the textTrack\n      if (this.enabled && data.frag.type === PlaylistLevelType.MAIN) {\n        var _data$part$index, _data$part;\n        var cea608Parser1 = this.cea608Parser1,\n          cea608Parser2 = this.cea608Parser2,\n          lastSn = this.lastSn;\n        var _data$frag = data.frag,\n          cc = _data$frag.cc,\n          sn = _data$frag.sn;\n        var partIndex = (_data$part$index = (_data$part = data.part) == null ? void 0 : _data$part.index) != null ? _data$part$index : -1;\n        if (cea608Parser1 && cea608Parser2) {\n          if (sn !== lastSn + 1 || sn === lastSn && partIndex !== this.lastPartIndex + 1 || cc !== this.lastCc) {\n            cea608Parser1.reset();\n            cea608Parser2.reset();\n          }\n        }\n        this.lastCc = cc;\n        this.lastSn = sn;\n        this.lastPartIndex = partIndex;\n      }\n    };\n    _proto.onFragLoaded = function onFragLoaded(event, data) {\n      var frag = data.frag,\n        payload = data.payload;\n      if (frag.type === PlaylistLevelType.SUBTITLE) {\n        // If fragment is subtitle type, parse as WebVTT.\n        if (payload.byteLength) {\n          var decryptData = frag.decryptdata;\n          // fragment after decryption has a stats object\n          var decrypted = 'stats' in data;\n          // If the subtitles are not encrypted, parse VTTs now. Otherwise, we need to wait.\n          if (decryptData == null || !decryptData.encrypted || decrypted) {\n            var trackPlaylistMedia = this.tracks[frag.level];\n            var vttCCs = this.vttCCs;\n            if (!vttCCs[frag.cc]) {\n              vttCCs[frag.cc] = {\n                start: frag.start,\n                prevCC: this.prevCC,\n                new: true\n              };\n              this.prevCC = frag.cc;\n            }\n            if (trackPlaylistMedia && trackPlaylistMedia.textCodec === IMSC1_CODEC) {\n              this._parseIMSC1(frag, payload);\n            } else {\n              this._parseVTTs(data);\n            }\n          }\n        } else {\n          // In case there is no payload, finish unsuccessfully.\n          this.hls.trigger(Events.SUBTITLE_FRAG_PROCESSED, {\n            success: false,\n            frag: frag,\n            error: new Error('Empty subtitle payload')\n          });\n        }\n      }\n    };\n    _proto._parseIMSC1 = function _parseIMSC1(frag, payload) {\n      var _this4 = this;\n      var hls = this.hls;\n      parseIMSC1(payload, this.initPTS[frag.cc], function (cues) {\n        _this4._appendCues(cues, frag.level);\n        hls.trigger(Events.SUBTITLE_FRAG_PROCESSED, {\n          success: true,\n          frag: frag\n        });\n      }, function (error) {\n        hls.logger.log(\"Failed to parse IMSC1: \" + error);\n        hls.trigger(Events.SUBTITLE_FRAG_PROCESSED, {\n          success: false,\n          frag: frag,\n          error: error\n        });\n      });\n    };\n    _proto._parseVTTs = function _parseVTTs(data) {\n      var _frag$initSegment,\n        _this5 = this;\n      var frag = data.frag,\n        payload = data.payload;\n      // We need an initial synchronisation PTS. Store fragments as long as none has arrived\n      var initPTS = this.initPTS,\n        unparsedVttFrags = this.unparsedVttFrags;\n      var maxAvCC = initPTS.length - 1;\n      if (!initPTS[frag.cc] && maxAvCC === -1) {\n        unparsedVttFrags.push(data);\n        return;\n      }\n      var hls = this.hls;\n      // Parse the WebVTT file contents.\n      var payloadWebVTT = (_frag$initSegment = frag.initSegment) != null && _frag$initSegment.data ? appendUint8Array(frag.initSegment.data, new Uint8Array(payload)).buffer : payload;\n      parseWebVTT(payloadWebVTT, this.initPTS[frag.cc], this.vttCCs, frag.cc, frag.start, function (cues) {\n        _this5._appendCues(cues, frag.level);\n        hls.trigger(Events.SUBTITLE_FRAG_PROCESSED, {\n          success: true,\n          frag: frag\n        });\n      }, function (error) {\n        var missingInitPTS = error.message === 'Missing initPTS for VTT MPEGTS';\n        if (missingInitPTS) {\n          unparsedVttFrags.push(data);\n        } else {\n          _this5._fallbackToIMSC1(frag, payload);\n        }\n        // Something went wrong while parsing. Trigger event with success false.\n        hls.logger.log(\"Failed to parse VTT cue: \" + error);\n        if (missingInitPTS && maxAvCC > frag.cc) {\n          return;\n        }\n        hls.trigger(Events.SUBTITLE_FRAG_PROCESSED, {\n          success: false,\n          frag: frag,\n          error: error\n        });\n      });\n    };\n    _proto._fallbackToIMSC1 = function _fallbackToIMSC1(frag, payload) {\n      var _this6 = this;\n      // If textCodec is unknown, try parsing as IMSC1. Set textCodec based on the result\n      var trackPlaylistMedia = this.tracks[frag.level];\n      if (!trackPlaylistMedia.textCodec) {\n        parseIMSC1(payload, this.initPTS[frag.cc], function () {\n          trackPlaylistMedia.textCodec = IMSC1_CODEC;\n          _this6._parseIMSC1(frag, payload);\n        }, function () {\n          trackPlaylistMedia.textCodec = 'wvtt';\n        });\n      }\n    };\n    _proto._appendCues = function _appendCues(cues, fragLevel) {\n      var hls = this.hls;\n      if (this.config.renderTextTracksNatively) {\n        var textTrack = this.textTracks[fragLevel];\n        // WebVTTParser.parse is an async method and if the currently selected text track mode is set to \"disabled\"\n        // before parsing is done then don't try to access currentTrack.cues.getCueById as cues will be null\n        // and trying to access getCueById method of cues will throw an exception\n        // Because we check if the mode is disabled, we can force check `cues` below. They can't be null.\n        if (!textTrack || textTrack.mode === 'disabled') {\n          return;\n        }\n        cues.forEach(function (cue) {\n          return addCueToTrack(textTrack, cue);\n        });\n      } else {\n        var currentTrack = this.tracks[fragLevel];\n        if (!currentTrack) {\n          return;\n        }\n        var track = currentTrack.default ? 'default' : 'subtitles' + fragLevel;\n        hls.trigger(Events.CUES_PARSED, {\n          type: 'subtitles',\n          cues: cues,\n          track: track\n        });\n      }\n    };\n    _proto.onFragDecrypted = function onFragDecrypted(event, data) {\n      var frag = data.frag;\n      if (frag.type === PlaylistLevelType.SUBTITLE) {\n        this.onFragLoaded(Events.FRAG_LOADED, data);\n      }\n    };\n    _proto.onSubtitleTracksCleared = function onSubtitleTracksCleared() {\n      this.tracks = [];\n      this.captionsTracks = {};\n    };\n    _proto.onFragParsingUserdata = function onFragParsingUserdata(event, data) {\n      if (!this.enabled || !this.config.enableCEA708Captions) {\n        return;\n      }\n      var frag = data.frag,\n        samples = data.samples;\n      if (frag.type === PlaylistLevelType.MAIN && this.closedCaptionsForLevel(frag) === 'NONE') {\n        return;\n      }\n      // If the event contains captions (found in the bytes property), push all bytes into the parser immediately\n      // It will create the proper timestamps based on the PTS value\n      for (var i = 0; i < samples.length; i++) {\n        var ccBytes = samples[i].bytes;\n        if (ccBytes) {\n          if (!this.cea608Parser1) {\n            this.initCea608Parsers();\n          }\n          var ccdatas = this.extractCea608Data(ccBytes);\n          this.cea608Parser1.addData(samples[i].pts, ccdatas[0]);\n          this.cea608Parser2.addData(samples[i].pts, ccdatas[1]);\n        }\n      }\n    };\n    _proto.onBufferFlushing = function onBufferFlushing(event, _ref2) {\n      var startOffset = _ref2.startOffset,\n        endOffset = _ref2.endOffset,\n        endOffsetSubtitles = _ref2.endOffsetSubtitles,\n        type = _ref2.type;\n      var media = this.media;\n      if (!media || media.currentTime < endOffset) {\n        return;\n      }\n      // Clear 608 caption cues from the captions TextTracks when the video back buffer is flushed\n      // Forward cues are never removed because we can loose streamed 608 content from recent fragments\n      if (!type || type === 'video') {\n        var captionsTracks = this.captionsTracks;\n        Object.keys(captionsTracks).forEach(function (trackName) {\n          return removeCuesInRange(captionsTracks[trackName], startOffset, endOffset);\n        });\n      }\n      if (this.config.renderTextTracksNatively) {\n        // Clear VTT/IMSC1 subtitle cues from the subtitle TextTracks when the back buffer is flushed\n        if (startOffset === 0 && endOffsetSubtitles !== undefined) {\n          var textTracks = this.textTracks;\n          Object.keys(textTracks).forEach(function (trackName) {\n            return removeCuesInRange(textTracks[trackName], startOffset, endOffsetSubtitles);\n          });\n        }\n      }\n    };\n    _proto.extractCea608Data = function extractCea608Data(byteArray) {\n      var actualCCBytes = [[], []];\n      var count = byteArray[0] & 0x1f;\n      var position = 2;\n      for (var j = 0; j < count; j++) {\n        var tmpByte = byteArray[position++];\n        var ccbyte1 = 0x7f & byteArray[position++];\n        var ccbyte2 = 0x7f & byteArray[position++];\n        if (ccbyte1 === 0 && ccbyte2 === 0) {\n          continue;\n        }\n        var ccValid = (0x04 & tmpByte) !== 0; // Support all four channels\n        if (ccValid) {\n          var ccType = 0x03 & tmpByte;\n          if (0x00 /* CEA608 field1*/ === ccType || 0x01 /* CEA608 field2*/ === ccType) {\n            // Exclude CEA708 CC data.\n            actualCCBytes[ccType].push(ccbyte1);\n            actualCCBytes[ccType].push(ccbyte2);\n          }\n        }\n      }\n      return actualCCBytes;\n    };\n    return TimelineController;\n  }();\n  function captionsOrSubtitlesFromCharacteristics(track) {\n    if (track.characteristics) {\n      if (/transcribes-spoken-dialog/gi.test(track.characteristics) && /describes-music-and-sound/gi.test(track.characteristics)) {\n        return 'captions';\n      }\n    }\n    return 'subtitles';\n  }\n  function canReuseVttTextTrack(inUseTrack, manifestTrack) {\n    return !!inUseTrack && inUseTrack.kind === captionsOrSubtitlesFromCharacteristics(manifestTrack) && subtitleTrackMatchesTextTrack(manifestTrack, inUseTrack);\n  }\n  function intersection(x1, x2, y1, y2) {\n    return Math.min(x2, y2) - Math.max(x1, y1);\n  }\n  function newVTTCCs() {\n    return {\n      ccOffset: 0,\n      presentationOffset: 0,\n      0: {\n        start: 0,\n        prevCC: -1,\n        new: true\n      }\n    };\n  }\n\n  var WHITESPACE_CHAR = /\\s/;\n  var Cues = {\n    newCue: function newCue(track, startTime, endTime, captionScreen) {\n      var result = [];\n      var row;\n      // the type data states this is VTTCue, but it can potentially be a TextTrackCue on old browsers\n      var cue;\n      var indenting;\n      var indent;\n      var text;\n      var Cue = self.VTTCue || self.TextTrackCue;\n      for (var r = 0; r < captionScreen.rows.length; r++) {\n        row = captionScreen.rows[r];\n        indenting = true;\n        indent = 0;\n        text = '';\n        if (!row.isEmpty()) {\n          var _track$cues;\n          for (var c = 0; c < row.chars.length; c++) {\n            if (WHITESPACE_CHAR.test(row.chars[c].uchar) && indenting) {\n              indent++;\n            } else {\n              text += row.chars[c].uchar;\n              indenting = false;\n            }\n          }\n          // To be used for cleaning-up orphaned roll-up captions\n          row.cueStartTime = startTime;\n\n          // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE\n          if (startTime === endTime) {\n            endTime += 0.0001;\n          }\n          if (indent >= 16) {\n            indent--;\n          } else {\n            indent++;\n          }\n          var cueText = fixLineBreaks(text.trim());\n          var id = generateCueId(startTime, endTime, cueText);\n\n          // If this cue already exists in the track do not push it\n          if (!(track != null && (_track$cues = track.cues) != null && _track$cues.getCueById(id))) {\n            cue = new Cue(startTime, endTime, cueText);\n            cue.id = id;\n            cue.line = r + 1;\n            cue.align = 'left';\n            // Clamp the position between 10 and 80 percent (CEA-608 PAC indent code)\n            // https://dvcs.w3.org/hg/text-tracks/raw-file/default/608toVTT/608toVTT.html#positioning-in-cea-608\n            // Firefox throws an exception and captions break with out of bounds 0-100 values\n            cue.position = 10 + Math.min(80, Math.floor(indent * 8 / 32) * 10);\n            result.push(cue);\n          }\n        }\n      }\n      if (track && result.length) {\n        // Sort bottom cues in reverse order so that they render in line order when overlapping in Chrome\n        result.sort(function (cueA, cueB) {\n          if (cueA.line === 'auto' || cueB.line === 'auto') {\n            return 0;\n          }\n          if (cueA.line > 8 && cueB.line > 8) {\n            return cueB.line - cueA.line;\n          }\n          return cueA.line - cueB.line;\n        });\n        result.forEach(function (cue) {\n          return addCueToTrack(track, cue);\n        });\n      }\n      return result;\n    }\n  };\n\n  function fetchSupported() {\n    if (\n    // @ts-ignore\n    self.fetch && self.AbortController && self.ReadableStream && self.Request) {\n      try {\n        new self.ReadableStream({}); // eslint-disable-line no-new\n        return true;\n      } catch (e) {\n        /* noop */\n      }\n    }\n    return false;\n  }\n  var BYTERANGE = /(\\d+)-(\\d+)\\/(\\d+)/;\n  var FetchLoader = /*#__PURE__*/function () {\n    function FetchLoader(config) {\n      this.fetchSetup = void 0;\n      this.requestTimeout = void 0;\n      this.request = null;\n      this.response = null;\n      this.controller = void 0;\n      this.context = null;\n      this.config = null;\n      this.callbacks = null;\n      this.stats = void 0;\n      this.loader = null;\n      this.fetchSetup = config.fetchSetup || getRequest;\n      this.controller = new self.AbortController();\n      this.stats = new LoadStats();\n    }\n    var _proto = FetchLoader.prototype;\n    _proto.destroy = function destroy() {\n      this.loader = this.callbacks = this.context = this.config = this.request = null;\n      this.abortInternal();\n      this.response = null;\n      // @ts-ignore\n      this.fetchSetup = this.controller = this.stats = null;\n    };\n    _proto.abortInternal = function abortInternal() {\n      if (this.controller && !this.stats.loading.end) {\n        this.stats.aborted = true;\n        this.controller.abort();\n      }\n    };\n    _proto.abort = function abort() {\n      var _this$callbacks;\n      this.abortInternal();\n      if ((_this$callbacks = this.callbacks) != null && _this$callbacks.onAbort) {\n        this.callbacks.onAbort(this.stats, this.context, this.response);\n      }\n    };\n    _proto.load = function load(context, config, callbacks) {\n      var _this = this;\n      var stats = this.stats;\n      if (stats.loading.start) {\n        throw new Error('Loader can only be used once.');\n      }\n      stats.loading.start = self.performance.now();\n      var initParams = getRequestParameters(context, this.controller.signal);\n      var isArrayBuffer = context.responseType === 'arraybuffer';\n      var LENGTH = isArrayBuffer ? 'byteLength' : 'length';\n      var _config$loadPolicy = config.loadPolicy,\n        maxTimeToFirstByteMs = _config$loadPolicy.maxTimeToFirstByteMs,\n        maxLoadTimeMs = _config$loadPolicy.maxLoadTimeMs;\n      this.context = context;\n      this.config = config;\n      this.callbacks = callbacks;\n      this.request = this.fetchSetup(context, initParams);\n      self.clearTimeout(this.requestTimeout);\n      config.timeout = maxTimeToFirstByteMs && isFiniteNumber(maxTimeToFirstByteMs) ? maxTimeToFirstByteMs : maxLoadTimeMs;\n      this.requestTimeout = self.setTimeout(function () {\n        if (_this.callbacks) {\n          _this.abortInternal();\n          _this.callbacks.onTimeout(stats, context, _this.response);\n        }\n      }, config.timeout);\n      var fetchPromise = isPromise(this.request) ? this.request.then(self.fetch) : self.fetch(this.request);\n      fetchPromise.then(function (response) {\n        var _this$callbacks2;\n        _this.response = _this.loader = response;\n        var first = Math.max(self.performance.now(), stats.loading.start);\n        self.clearTimeout(_this.requestTimeout);\n        config.timeout = maxLoadTimeMs;\n        _this.requestTimeout = self.setTimeout(function () {\n          if (_this.callbacks) {\n            _this.abortInternal();\n            _this.callbacks.onTimeout(stats, context, _this.response);\n          }\n        }, maxLoadTimeMs - (first - stats.loading.start));\n        if (!response.ok) {\n          var status = response.status,\n            statusText = response.statusText;\n          throw new FetchError(statusText || 'fetch, bad network response', status, response);\n        }\n        stats.loading.first = first;\n        stats.total = getContentLength(response.headers) || stats.total;\n        var onProgress = (_this$callbacks2 = _this.callbacks) == null ? void 0 : _this$callbacks2.onProgress;\n        if (onProgress && isFiniteNumber(config.highWaterMark)) {\n          return _this.loadProgressively(response, stats, context, config.highWaterMark, onProgress);\n        }\n        if (isArrayBuffer) {\n          return response.arrayBuffer();\n        }\n        if (context.responseType === 'json') {\n          return response.json();\n        }\n        return response.text();\n      }).then(function (responseData) {\n        var _this$callbacks3, _this$callbacks4;\n        var response = _this.response;\n        if (!response) {\n          throw new Error('loader destroyed');\n        }\n        self.clearTimeout(_this.requestTimeout);\n        stats.loading.end = Math.max(self.performance.now(), stats.loading.first);\n        var total = responseData[LENGTH];\n        if (total) {\n          stats.loaded = stats.total = total;\n        }\n        var loaderResponse = {\n          url: response.url,\n          data: responseData,\n          code: response.status\n        };\n        var onProgress = (_this$callbacks3 = _this.callbacks) == null ? void 0 : _this$callbacks3.onProgress;\n        if (onProgress && !isFiniteNumber(config.highWaterMark)) {\n          onProgress(stats, context, responseData, response);\n        }\n        (_this$callbacks4 = _this.callbacks) == null ? void 0 : _this$callbacks4.onSuccess(loaderResponse, stats, context, response);\n      }).catch(function (error) {\n        var _this$callbacks5;\n        self.clearTimeout(_this.requestTimeout);\n        if (stats.aborted) {\n          return;\n        }\n        // CORS errors result in an undefined code. Set it to 0 here to align with XHR's behavior\n        // when destroying, 'error' itself can be undefined\n        var code = !error ? 0 : error.code || 0;\n        var text = !error ? null : error.message;\n        (_this$callbacks5 = _this.callbacks) == null ? void 0 : _this$callbacks5.onError({\n          code: code,\n          text: text\n        }, context, error ? error.details : null, stats);\n      });\n    };\n    _proto.getCacheAge = function getCacheAge() {\n      var result = null;\n      if (this.response) {\n        var ageHeader = this.response.headers.get('age');\n        result = ageHeader ? parseFloat(ageHeader) : null;\n      }\n      return result;\n    };\n    _proto.getResponseHeader = function getResponseHeader(name) {\n      return this.response ? this.response.headers.get(name) : null;\n    };\n    _proto.loadProgressively = function loadProgressively(response, stats, context, highWaterMark, onProgress) {\n      if (highWaterMark === void 0) {\n        highWaterMark = 0;\n      }\n      var chunkCache = new ChunkCache();\n      var reader = response.body.getReader();\n      var _pump = function pump() {\n        return reader.read().then(function (data) {\n          if (data.done) {\n            if (chunkCache.dataLength) {\n              onProgress(stats, context, chunkCache.flush().buffer, response);\n            }\n            return Promise.resolve(new ArrayBuffer(0));\n          }\n          var chunk = data.value;\n          var len = chunk.length;\n          stats.loaded += len;\n          if (len < highWaterMark || chunkCache.dataLength) {\n            // The current chunk is too small to to be emitted or the cache already has data\n            // Push it to the cache\n            chunkCache.push(chunk);\n            if (chunkCache.dataLength >= highWaterMark) {\n              // flush in order to join the typed arrays\n              onProgress(stats, context, chunkCache.flush().buffer, response);\n            }\n          } else {\n            // If there's nothing cached already, and the chache is large enough\n            // just emit the progress event\n            onProgress(stats, context, chunk.buffer, response);\n          }\n          return _pump();\n        }).catch(function () {\n          /* aborted */\n          return Promise.reject();\n        });\n      };\n      return _pump();\n    };\n    return FetchLoader;\n  }();\n  function getRequestParameters(context, signal) {\n    var initParams = {\n      method: 'GET',\n      mode: 'cors',\n      credentials: 'same-origin',\n      signal: signal,\n      headers: new self.Headers(_extends({}, context.headers))\n    };\n    if (context.rangeEnd) {\n      initParams.headers.set('Range', 'bytes=' + context.rangeStart + '-' + String(context.rangeEnd - 1));\n    }\n    return initParams;\n  }\n  function getByteRangeLength(byteRangeHeader) {\n    var result = BYTERANGE.exec(byteRangeHeader);\n    if (result) {\n      return parseInt(result[2]) - parseInt(result[1]) + 1;\n    }\n  }\n  function getContentLength(headers) {\n    var contentRange = headers.get('Content-Range');\n    if (contentRange) {\n      var byteRangeLength = getByteRangeLength(contentRange);\n      if (isFiniteNumber(byteRangeLength)) {\n        return byteRangeLength;\n      }\n    }\n    var contentLength = headers.get('Content-Length');\n    if (contentLength) {\n      return parseInt(contentLength);\n    }\n  }\n  function getRequest(context, initParams) {\n    return new self.Request(context.url, initParams);\n  }\n  var FetchError = /*#__PURE__*/function (_Error) {\n    function FetchError(message, code, details) {\n      var _this2;\n      _this2 = _Error.call(this, message) || this;\n      _this2.code = void 0;\n      _this2.details = void 0;\n      _this2.code = code;\n      _this2.details = details;\n      return _this2;\n    }\n    _inheritsLoose(FetchError, _Error);\n    return FetchError;\n  }(/*#__PURE__*/_wrapNativeSuper(Error));\n\n  var AGE_HEADER_LINE_REGEX = /^age:\\s*[\\d.]+\\s*$/im;\n  var XhrLoader = /*#__PURE__*/function () {\n    function XhrLoader(config) {\n      this.xhrSetup = void 0;\n      this.requestTimeout = void 0;\n      this.retryTimeout = void 0;\n      this.retryDelay = void 0;\n      this.config = null;\n      this.callbacks = null;\n      this.context = null;\n      this.loader = null;\n      this.stats = void 0;\n      this.xhrSetup = config ? config.xhrSetup || null : null;\n      this.stats = new LoadStats();\n      this.retryDelay = 0;\n    }\n    var _proto = XhrLoader.prototype;\n    _proto.destroy = function destroy() {\n      this.callbacks = null;\n      this.abortInternal();\n      this.loader = null;\n      this.config = null;\n      this.context = null;\n      this.xhrSetup = null;\n    };\n    _proto.abortInternal = function abortInternal() {\n      var loader = this.loader;\n      self.clearTimeout(this.requestTimeout);\n      self.clearTimeout(this.retryTimeout);\n      if (loader) {\n        loader.onreadystatechange = null;\n        loader.onprogress = null;\n        if (loader.readyState !== 4) {\n          this.stats.aborted = true;\n          loader.abort();\n        }\n      }\n    };\n    _proto.abort = function abort() {\n      var _this$callbacks;\n      this.abortInternal();\n      if ((_this$callbacks = this.callbacks) != null && _this$callbacks.onAbort) {\n        this.callbacks.onAbort(this.stats, this.context, this.loader);\n      }\n    };\n    _proto.load = function load(context, config, callbacks) {\n      if (this.stats.loading.start) {\n        throw new Error('Loader can only be used once.');\n      }\n      this.stats.loading.start = self.performance.now();\n      this.context = context;\n      this.config = config;\n      this.callbacks = callbacks;\n      this.loadInternal();\n    };\n    _proto.loadInternal = function loadInternal() {\n      var _this = this;\n      var config = this.config,\n        context = this.context;\n      if (!config || !context) {\n        return;\n      }\n      var xhr = this.loader = new self.XMLHttpRequest();\n      var stats = this.stats;\n      stats.loading.first = 0;\n      stats.loaded = 0;\n      stats.aborted = false;\n      var xhrSetup = this.xhrSetup;\n      if (xhrSetup) {\n        Promise.resolve().then(function () {\n          if (_this.loader !== xhr || _this.stats.aborted) return;\n          return xhrSetup(xhr, context.url);\n        }).catch(function (error) {\n          if (_this.loader !== xhr || _this.stats.aborted) return;\n          xhr.open('GET', context.url, true);\n          return xhrSetup(xhr, context.url);\n        }).then(function () {\n          if (_this.loader !== xhr || _this.stats.aborted) return;\n          _this.openAndSendXhr(xhr, context, config);\n        }).catch(function (error) {\n          var _this$callbacks2;\n          // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS\n          (_this$callbacks2 = _this.callbacks) == null ? void 0 : _this$callbacks2.onError({\n            code: xhr.status,\n            text: error.message\n          }, context, xhr, stats);\n          return;\n        });\n      } else {\n        this.openAndSendXhr(xhr, context, config);\n      }\n    };\n    _proto.openAndSendXhr = function openAndSendXhr(xhr, context, config) {\n      if (!xhr.readyState) {\n        xhr.open('GET', context.url, true);\n      }\n      var headers = context.headers;\n      var _config$loadPolicy = config.loadPolicy,\n        maxTimeToFirstByteMs = _config$loadPolicy.maxTimeToFirstByteMs,\n        maxLoadTimeMs = _config$loadPolicy.maxLoadTimeMs;\n      if (headers) {\n        for (var header in headers) {\n          xhr.setRequestHeader(header, headers[header]);\n        }\n      }\n      if (context.rangeEnd) {\n        xhr.setRequestHeader('Range', 'bytes=' + context.rangeStart + '-' + (context.rangeEnd - 1));\n      }\n      xhr.onreadystatechange = this.readystatechange.bind(this);\n      xhr.onprogress = this.loadprogress.bind(this);\n      xhr.responseType = context.responseType;\n      // setup timeout before we perform request\n      self.clearTimeout(this.requestTimeout);\n      config.timeout = maxTimeToFirstByteMs && isFiniteNumber(maxTimeToFirstByteMs) ? maxTimeToFirstByteMs : maxLoadTimeMs;\n      this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config.timeout);\n      xhr.send();\n    };\n    _proto.readystatechange = function readystatechange() {\n      var context = this.context,\n        xhr = this.loader,\n        stats = this.stats;\n      if (!context || !xhr) {\n        return;\n      }\n      var readyState = xhr.readyState;\n      var config = this.config;\n\n      // don't proceed if xhr has been aborted\n      if (stats.aborted) {\n        return;\n      }\n\n      // >= HEADERS_RECEIVED\n      if (readyState >= 2) {\n        if (stats.loading.first === 0) {\n          stats.loading.first = Math.max(self.performance.now(), stats.loading.start);\n          // readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet\n          if (config.timeout !== config.loadPolicy.maxLoadTimeMs) {\n            self.clearTimeout(this.requestTimeout);\n            config.timeout = config.loadPolicy.maxLoadTimeMs;\n            this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config.loadPolicy.maxLoadTimeMs - (stats.loading.first - stats.loading.start));\n          }\n        }\n        if (readyState === 4) {\n          self.clearTimeout(this.requestTimeout);\n          xhr.onreadystatechange = null;\n          xhr.onprogress = null;\n          var _status = xhr.status;\n          // http status between 200 to 299 are all successful\n          var useResponseText = xhr.responseType === 'text' ? xhr.responseText : null;\n          if (_status >= 200 && _status < 300) {\n            var data = useResponseText != null ? useResponseText : xhr.response;\n            if (data != null) {\n              var _this$callbacks3, _this$callbacks4;\n              stats.loading.end = Math.max(self.performance.now(), stats.loading.first);\n              var len = xhr.responseType === 'arraybuffer' ? data.byteLength : data.length;\n              stats.loaded = stats.total = len;\n              stats.bwEstimate = stats.total * 8000 / (stats.loading.end - stats.loading.first);\n              var onProgress = (_this$callbacks3 = this.callbacks) == null ? void 0 : _this$callbacks3.onProgress;\n              if (onProgress) {\n                onProgress(stats, context, data, xhr);\n              }\n              var _response = {\n                url: xhr.responseURL,\n                data: data,\n                code: _status\n              };\n              (_this$callbacks4 = this.callbacks) == null ? void 0 : _this$callbacks4.onSuccess(_response, stats, context, xhr);\n              return;\n            }\n          }\n\n          // Handle bad status or nullish response\n          var retryConfig = config.loadPolicy.errorRetry;\n          var retryCount = stats.retry;\n          // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error\n          var response = {\n            url: context.url,\n            data: undefined,\n            code: _status\n          };\n          if (shouldRetry(retryConfig, retryCount, false, response)) {\n            this.retry(retryConfig);\n          } else {\n            var _this$callbacks5;\n            logger.error(_status + \" while loading \" + context.url);\n            (_this$callbacks5 = this.callbacks) == null ? void 0 : _this$callbacks5.onError({\n              code: _status,\n              text: xhr.statusText\n            }, context, xhr, stats);\n          }\n        }\n      }\n    };\n    _proto.loadtimeout = function loadtimeout() {\n      if (!this.config) return;\n      var retryConfig = this.config.loadPolicy.timeoutRetry;\n      var retryCount = this.stats.retry;\n      if (shouldRetry(retryConfig, retryCount, true)) {\n        this.retry(retryConfig);\n      } else {\n        var _this$context;\n        logger.warn(\"timeout while loading \" + ((_this$context = this.context) == null ? void 0 : _this$context.url));\n        var callbacks = this.callbacks;\n        if (callbacks) {\n          this.abortInternal();\n          callbacks.onTimeout(this.stats, this.context, this.loader);\n        }\n      }\n    };\n    _proto.retry = function retry(retryConfig) {\n      var context = this.context,\n        stats = this.stats;\n      this.retryDelay = getRetryDelay(retryConfig, stats.retry);\n      stats.retry++;\n      logger.warn((status ? 'HTTP Status ' + status : 'Timeout') + \" while loading \" + (context == null ? void 0 : context.url) + \", retrying \" + stats.retry + \"/\" + retryConfig.maxNumRetry + \" in \" + this.retryDelay + \"ms\");\n      // abort and reset internal state\n      this.abortInternal();\n      this.loader = null;\n      // schedule retry\n      self.clearTimeout(this.retryTimeout);\n      this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay);\n    };\n    _proto.loadprogress = function loadprogress(event) {\n      var stats = this.stats;\n      stats.loaded = event.loaded;\n      if (event.lengthComputable) {\n        stats.total = event.total;\n      }\n    };\n    _proto.getCacheAge = function getCacheAge() {\n      var result = null;\n      if (this.loader && AGE_HEADER_LINE_REGEX.test(this.loader.getAllResponseHeaders())) {\n        var ageHeader = this.loader.getResponseHeader('age');\n        result = ageHeader ? parseFloat(ageHeader) : null;\n      }\n      return result;\n    };\n    _proto.getResponseHeader = function getResponseHeader(name) {\n      if (this.loader && new RegExp(\"^\" + name + \":\\\\s*[\\\\d.]+\\\\s*$\", 'im').test(this.loader.getAllResponseHeaders())) {\n        return this.loader.getResponseHeader(name);\n      }\n      return null;\n    };\n    return XhrLoader;\n  }();\n\n  /**\n   * @deprecated use fragLoadPolicy.default\n   */\n\n  /**\n   * @deprecated use manifestLoadPolicy.default and playlistLoadPolicy.default\n   */\n\n  var defaultLoadPolicy = {\n    maxTimeToFirstByteMs: 8000,\n    maxLoadTimeMs: 20000,\n    timeoutRetry: null,\n    errorRetry: null\n  };\n\n  /**\n   * @ignore\n   * If possible, keep hlsDefaultConfig shallow\n   * It is cloned whenever a new Hls instance is created, by keeping the config\n   * shallow the properties are cloned, and we don't end up manipulating the default\n   */\n  var hlsDefaultConfig = _objectSpread2(_objectSpread2({\n    autoStartLoad: true,\n    // used by stream-controller\n    startPosition: -1,\n    // used by stream-controller\n    defaultAudioCodec: undefined,\n    // used by stream-controller\n    debug: false,\n    // used by logger\n    capLevelOnFPSDrop: false,\n    // used by fps-controller\n    capLevelToPlayerSize: false,\n    // used by cap-level-controller\n    ignoreDevicePixelRatio: false,\n    // used by cap-level-controller\n    maxDevicePixelRatio: Number.POSITIVE_INFINITY,\n    // used by cap-level-controller\n    preferManagedMediaSource: true,\n    initialLiveManifestSize: 1,\n    // used by stream-controller\n    maxBufferLength: 30,\n    // used by stream-controller\n    backBufferLength: Infinity,\n    // used by buffer-controller\n    frontBufferFlushThreshold: Infinity,\n    startOnSegmentBoundary: false,\n    // used by stream-controller\n    maxBufferSize: 60 * 1000 * 1000,\n    // used by stream-controller\n    maxFragLookUpTolerance: 0.25,\n    // used by stream-controller\n    maxBufferHole: 0.1,\n    // used by stream-controller and gap-controller\n    detectStallWithCurrentTimeMs: 1250,\n    // used by gap-controller\n    highBufferWatchdogPeriod: 2,\n    // used by gap-controller\n    nudgeOffset: 0.1,\n    // used by gap-controller\n    nudgeMaxRetry: 3,\n    // used by gap-controller\n    nudgeOnVideoHole: true,\n    // used by gap-controller\n    liveSyncMode: 'edge',\n    // used by stream-controller\n    liveSyncDurationCount: 3,\n    // used by latency-controller\n    liveSyncOnStallIncrease: 1,\n    // used by latency-controller\n    liveMaxLatencyDurationCount: Infinity,\n    // used by latency-controller\n    liveSyncDuration: undefined,\n    // used by latency-controller\n    liveMaxLatencyDuration: undefined,\n    // used by latency-controller\n    maxLiveSyncPlaybackRate: 1,\n    // used by latency-controller\n    liveDurationInfinity: false,\n    // used by buffer-controller\n    /**\n     * @deprecated use backBufferLength\n     */\n    liveBackBufferLength: null,\n    // used by buffer-controller\n    maxMaxBufferLength: 600,\n    // used by stream-controller\n    enableWorker: true,\n    // used by transmuxer\n    workerPath: null,\n    // used by transmuxer\n    enableSoftwareAES: true,\n    // used by decrypter\n    startLevel: undefined,\n    // used by level-controller\n    startFragPrefetch: false,\n    // used by stream-controller\n    fpsDroppedMonitoringPeriod: 5000,\n    // used by fps-controller\n    fpsDroppedMonitoringThreshold: 0.2,\n    // used by fps-controller\n    appendErrorMaxRetry: 3,\n    // used by buffer-controller\n    ignorePlaylistParsingErrors: false,\n    loader: XhrLoader,\n    // loader: FetchLoader,\n    fLoader: undefined,\n    // used by fragment-loader\n    pLoader: undefined,\n    // used by playlist-loader\n    xhrSetup: undefined,\n    // used by xhr-loader\n    licenseXhrSetup: undefined,\n    // used by eme-controller\n    licenseResponseCallback: undefined,\n    // used by eme-controller\n    abrController: AbrController,\n    bufferController: BufferController,\n    capLevelController: CapLevelController,\n    errorController: ErrorController,\n    fpsController: FPSController,\n    stretchShortVideoTrack: false,\n    // used by mp4-remuxer\n    maxAudioFramesDrift: 1,\n    // used by mp4-remuxer\n    forceKeyFrameOnDiscontinuity: true,\n    // used by ts-demuxer\n    abrEwmaFastLive: 3,\n    // used by abr-controller\n    abrEwmaSlowLive: 9,\n    // used by abr-controller\n    abrEwmaFastVoD: 3,\n    // used by abr-controller\n    abrEwmaSlowVoD: 9,\n    // used by abr-controller\n    abrEwmaDefaultEstimate: 5e5,\n    // 500 kbps  // used by abr-controller\n    abrEwmaDefaultEstimateMax: 5e6,\n    // 5 mbps\n    abrBandWidthFactor: 0.95,\n    // used by abr-controller\n    abrBandWidthUpFactor: 0.7,\n    // used by abr-controller\n    abrMaxWithRealBitrate: false,\n    // used by abr-controller\n    maxStarvationDelay: 4,\n    // used by abr-controller\n    maxLoadingDelay: 4,\n    // used by abr-controller\n    minAutoBitrate: 0,\n    // used by hls\n    emeEnabled: false,\n    // used by eme-controller\n    widevineLicenseUrl: undefined,\n    // used by eme-controller\n    drmSystems: {},\n    // used by eme-controller\n    drmSystemOptions: {},\n    // used by eme-controller\n    requestMediaKeySystemAccessFunc: requestMediaKeySystemAccess ,\n    // used by eme-controller\n    requireKeySystemAccessOnStart: false,\n    // used by eme-controller\n    testBandwidth: true,\n    progressive: false,\n    lowLatencyMode: true,\n    cmcd: undefined,\n    enableDateRangeMetadataCues: true,\n    enableEmsgMetadataCues: true,\n    enableEmsgKLVMetadata: false,\n    enableID3MetadataCues: true,\n    enableInterstitialPlayback: true,\n    interstitialAppendInPlace: true,\n    interstitialLiveLookAhead: 10,\n    useMediaCapabilities: true,\n    preserveManualLevelOnError: false,\n    certLoadPolicy: {\n      default: defaultLoadPolicy\n    },\n    keyLoadPolicy: {\n      default: {\n        maxTimeToFirstByteMs: 8000,\n        maxLoadTimeMs: 20000,\n        timeoutRetry: {\n          maxNumRetry: 1,\n          retryDelayMs: 1000,\n          maxRetryDelayMs: 20000,\n          backoff: 'linear'\n        },\n        errorRetry: {\n          maxNumRetry: 8,\n          retryDelayMs: 1000,\n          maxRetryDelayMs: 20000,\n          backoff: 'linear'\n        }\n      }\n    },\n    manifestLoadPolicy: {\n      default: {\n        maxTimeToFirstByteMs: Infinity,\n        maxLoadTimeMs: 20000,\n        timeoutRetry: {\n          maxNumRetry: 2,\n          retryDelayMs: 0,\n          maxRetryDelayMs: 0\n        },\n        errorRetry: {\n          maxNumRetry: 1,\n          retryDelayMs: 1000,\n          maxRetryDelayMs: 8000\n        }\n      }\n    },\n    playlistLoadPolicy: {\n      default: {\n        maxTimeToFirstByteMs: 10000,\n        maxLoadTimeMs: 20000,\n        timeoutRetry: {\n          maxNumRetry: 2,\n          retryDelayMs: 0,\n          maxRetryDelayMs: 0\n        },\n        errorRetry: {\n          maxNumRetry: 2,\n          retryDelayMs: 1000,\n          maxRetryDelayMs: 8000\n        }\n      }\n    },\n    fragLoadPolicy: {\n      default: {\n        maxTimeToFirstByteMs: 10000,\n        maxLoadTimeMs: 120000,\n        timeoutRetry: {\n          maxNumRetry: 4,\n          retryDelayMs: 0,\n          maxRetryDelayMs: 0\n        },\n        errorRetry: {\n          maxNumRetry: 6,\n          retryDelayMs: 1000,\n          maxRetryDelayMs: 8000\n        }\n      }\n    },\n    steeringManifestLoadPolicy: {\n      default: {\n        maxTimeToFirstByteMs: 10000,\n        maxLoadTimeMs: 20000,\n        timeoutRetry: {\n          maxNumRetry: 2,\n          retryDelayMs: 0,\n          maxRetryDelayMs: 0\n        },\n        errorRetry: {\n          maxNumRetry: 1,\n          retryDelayMs: 1000,\n          maxRetryDelayMs: 8000\n        }\n      } \n    },\n    interstitialAssetListLoadPolicy: {\n      default: {\n        maxTimeToFirstByteMs: 10000,\n        maxLoadTimeMs: 30000,\n        timeoutRetry: {\n          maxNumRetry: 0,\n          retryDelayMs: 0,\n          maxRetryDelayMs: 0\n        },\n        errorRetry: {\n          maxNumRetry: 0,\n          retryDelayMs: 1000,\n          maxRetryDelayMs: 8000\n        }\n      } \n    },\n    // These default settings are deprecated in favor of the above policies\n    // and are maintained for backwards compatibility\n    manifestLoadingTimeOut: 10000,\n    manifestLoadingMaxRetry: 1,\n    manifestLoadingRetryDelay: 1000,\n    manifestLoadingMaxRetryTimeout: 64000,\n    levelLoadingTimeOut: 10000,\n    levelLoadingMaxRetry: 4,\n    levelLoadingRetryDelay: 1000,\n    levelLoadingMaxRetryTimeout: 64000,\n    fragLoadingTimeOut: 20000,\n    fragLoadingMaxRetry: 6,\n    fragLoadingRetryDelay: 1000,\n    fragLoadingMaxRetryTimeout: 64000\n  }, timelineConfig()), {}, {\n    subtitleStreamController: SubtitleStreamController ,\n    subtitleTrackController: SubtitleTrackController ,\n    timelineController: TimelineController ,\n    audioStreamController: AudioStreamController ,\n    audioTrackController: AudioTrackController ,\n    emeController: EMEController ,\n    cmcdController: CMCDController ,\n    contentSteeringController: ContentSteeringController ,\n    interstitialsController: InterstitialsController \n  });\n  function timelineConfig() {\n    return {\n      cueHandler: Cues,\n      // used by timeline-controller\n      enableWebVTT: true,\n      // used by timeline-controller\n      enableIMSC1: true,\n      // used by timeline-controller\n      enableCEA708Captions: true,\n      // used by timeline-controller\n      captionsTextTrack1Label: 'English',\n      // used by timeline-controller\n      captionsTextTrack1LanguageCode: 'en',\n      // used by timeline-controller\n      captionsTextTrack2Label: 'Spanish',\n      // used by timeline-controller\n      captionsTextTrack2LanguageCode: 'es',\n      // used by timeline-controller\n      captionsTextTrack3Label: 'Unknown CC',\n      // used by timeline-controller\n      captionsTextTrack3LanguageCode: '',\n      // used by timeline-controller\n      captionsTextTrack4Label: 'Unknown CC',\n      // used by timeline-controller\n      captionsTextTrack4LanguageCode: '',\n      // used by timeline-controller\n      renderTextTracksNatively: true\n    };\n  }\n\n  /**\n   * @ignore\n   */\n  function mergeConfig(defaultConfig, userConfig, logger) {\n    if ((userConfig.liveSyncDurationCount || userConfig.liveMaxLatencyDurationCount) && (userConfig.liveSyncDuration || userConfig.liveMaxLatencyDuration)) {\n      throw new Error(\"Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration\");\n    }\n    if (userConfig.liveMaxLatencyDurationCount !== undefined && (userConfig.liveSyncDurationCount === undefined || userConfig.liveMaxLatencyDurationCount <= userConfig.liveSyncDurationCount)) {\n      throw new Error('Illegal hls.js config: \"liveMaxLatencyDurationCount\" must be greater than \"liveSyncDurationCount\"');\n    }\n    if (userConfig.liveMaxLatencyDuration !== undefined && (userConfig.liveSyncDuration === undefined || userConfig.liveMaxLatencyDuration <= userConfig.liveSyncDuration)) {\n      throw new Error('Illegal hls.js config: \"liveMaxLatencyDuration\" must be greater than \"liveSyncDuration\"');\n    }\n    var defaultsCopy = deepCpy(defaultConfig);\n\n    // Backwards compatibility with deprecated config values\n    var deprecatedSettingTypes = ['manifest', 'level', 'frag'];\n    var deprecatedSettings = ['TimeOut', 'MaxRetry', 'RetryDelay', 'MaxRetryTimeout'];\n    deprecatedSettingTypes.forEach(function (type) {\n      var policyName = (type === 'level' ? 'playlist' : type) + \"LoadPolicy\";\n      var policyNotSet = userConfig[policyName] === undefined;\n      var report = [];\n      deprecatedSettings.forEach(function (setting) {\n        var deprecatedSetting = type + \"Loading\" + setting;\n        var value = userConfig[deprecatedSetting];\n        if (value !== undefined && policyNotSet) {\n          report.push(deprecatedSetting);\n          var settings = defaultsCopy[policyName].default;\n          userConfig[policyName] = {\n            default: settings\n          };\n          switch (setting) {\n            case 'TimeOut':\n              settings.maxLoadTimeMs = value;\n              settings.maxTimeToFirstByteMs = value;\n              break;\n            case 'MaxRetry':\n              settings.errorRetry.maxNumRetry = value;\n              settings.timeoutRetry.maxNumRetry = value;\n              break;\n            case 'RetryDelay':\n              settings.errorRetry.retryDelayMs = value;\n              settings.timeoutRetry.retryDelayMs = value;\n              break;\n            case 'MaxRetryTimeout':\n              settings.errorRetry.maxRetryDelayMs = value;\n              settings.timeoutRetry.maxRetryDelayMs = value;\n              break;\n          }\n        }\n      });\n      if (report.length) {\n        logger.warn(\"hls.js config: \\\"\" + report.join('\", \"') + \"\\\" setting(s) are deprecated, use \\\"\" + policyName + \"\\\": \" + stringify(userConfig[policyName]));\n      }\n    });\n    return _objectSpread2(_objectSpread2({}, defaultsCopy), userConfig);\n  }\n  function deepCpy(obj) {\n    if (obj && typeof obj === 'object') {\n      if (Array.isArray(obj)) {\n        return obj.map(deepCpy);\n      }\n      return Object.keys(obj).reduce(function (result, key) {\n        result[key] = deepCpy(obj[key]);\n        return result;\n      }, {});\n    }\n    return obj;\n  }\n\n  /**\n   * @ignore\n   */\n  function enableStreamingMode(config, logger) {\n    var currentLoader = config.loader;\n    if (currentLoader !== FetchLoader && currentLoader !== XhrLoader) {\n      // If a developer has configured their own loader, respect that choice\n      logger.log('[config]: Custom loader detected, cannot enable progressive streaming');\n      config.progressive = false;\n    } else {\n      var canStreamProgressively = fetchSupported();\n      if (canStreamProgressively) {\n        config.loader = FetchLoader;\n        config.progressive = true;\n        config.enableSoftwareAES = true;\n        logger.log('[config]: Progressive streaming enabled, using FetchLoader');\n      }\n    }\n  }\n\n  var MAX_START_GAP_JUMP = 2.0;\n  var SKIP_BUFFER_HOLE_STEP_SECONDS = 0.1;\n  var SKIP_BUFFER_RANGE_START = 0.05;\n  var TICK_INTERVAL$1 = 100;\n  var GapController = /*#__PURE__*/function (_TaskLoop) {\n    function GapController(hls, fragmentTracker) {\n      var _this;\n      _this = _TaskLoop.call(this, 'gap-controller', hls.logger) || this;\n      _this.hls = null;\n      _this.fragmentTracker = null;\n      _this.media = null;\n      _this.mediaSource = void 0;\n      _this.nudgeRetry = 0;\n      _this.stallReported = false;\n      _this.stalled = null;\n      _this.moved = false;\n      _this.seeking = false;\n      _this.buffered = {};\n      _this.lastCurrentTime = 0;\n      _this.ended = 0;\n      _this.waiting = 0;\n      _this.onMediaPlaying = function () {\n        _this.ended = 0;\n        _this.waiting = 0;\n      };\n      _this.onMediaWaiting = function () {\n        var _this$media;\n        if ((_this$media = _this.media) != null && _this$media.seeking) {\n          return;\n        }\n        _this.waiting = self.performance.now();\n        _this.tick();\n      };\n      _this.onMediaEnded = function () {\n        if (_this.hls) {\n          var _this$media2;\n          // ended is set when triggering MEDIA_ENDED so that we do not trigger it again on stall or on tick with media.ended\n          _this.ended = ((_this$media2 = _this.media) == null ? void 0 : _this$media2.currentTime) || 1;\n          _this.hls.trigger(Events.MEDIA_ENDED, {\n            stalled: false\n          });\n        }\n      };\n      _this.hls = hls;\n      _this.fragmentTracker = fragmentTracker;\n      _this.registerListeners();\n      return _this;\n    }\n    _inheritsLoose(GapController, _TaskLoop);\n    var _proto = GapController.prototype;\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      if (hls) {\n        hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n        hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n        hls.on(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n      }\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      if (hls) {\n        hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n        hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n        hls.off(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n      }\n    };\n    _proto.destroy = function destroy() {\n      _TaskLoop.prototype.destroy.call(this);\n      this.unregisterListeners();\n      this.media = this.hls = this.fragmentTracker = null;\n      this.mediaSource = undefined;\n    };\n    _proto.onMediaAttached = function onMediaAttached(event, data) {\n      this.setInterval(TICK_INTERVAL$1);\n      this.mediaSource = data.mediaSource;\n      var media = this.media = data.media;\n      addEventListener(media, 'playing', this.onMediaPlaying);\n      addEventListener(media, 'waiting', this.onMediaWaiting);\n      addEventListener(media, 'ended', this.onMediaEnded);\n    };\n    _proto.onMediaDetaching = function onMediaDetaching(event, data) {\n      this.clearInterval();\n      var media = this.media;\n      if (media) {\n        removeEventListener(media, 'playing', this.onMediaPlaying);\n        removeEventListener(media, 'waiting', this.onMediaWaiting);\n        removeEventListener(media, 'ended', this.onMediaEnded);\n        this.media = null;\n      }\n      this.mediaSource = undefined;\n    };\n    _proto.onBufferAppended = function onBufferAppended(event, data) {\n      this.buffered = data.timeRanges;\n    };\n    _proto.tick = function tick() {\n      var _this$media3;\n      if (!((_this$media3 = this.media) != null && _this$media3.readyState) || !this.hasBuffered) {\n        return;\n      }\n      var currentTime = this.media.currentTime;\n      this.poll(currentTime, this.lastCurrentTime);\n      this.lastCurrentTime = currentTime;\n    }\n\n    /**\n     * Checks if the playhead is stuck within a gap, and if so, attempts to free it.\n     * A gap is an unbuffered range between two buffered ranges (or the start and the first buffered range).\n     *\n     * @param lastCurrentTime - Previously read playhead position\n     */;\n    _proto.poll = function poll(currentTime, lastCurrentTime) {\n      var _this$hls, _this$hls2;\n      var config = (_this$hls = this.hls) == null ? void 0 : _this$hls.config;\n      if (!config) {\n        return;\n      }\n      var media = this.media;\n      if (!media) {\n        return;\n      }\n      var seeking = media.seeking;\n      var seeked = this.seeking && !seeking;\n      var beginSeek = !this.seeking && seeking;\n      var pausedEndedOrHalted = media.paused && !seeking || media.ended || media.playbackRate === 0;\n      this.seeking = seeking;\n\n      // The playhead is moving, no-op\n      if (currentTime !== lastCurrentTime) {\n        if (lastCurrentTime) {\n          this.ended = 0;\n        }\n        this.moved = true;\n        if (!seeking) {\n          this.nudgeRetry = 0;\n          // When crossing between buffered video time ranges, but not audio, flush pipeline with seek (Chrome)\n          if (config.nudgeOnVideoHole && !pausedEndedOrHalted && currentTime > lastCurrentTime) {\n            this.nudgeOnVideoHole(currentTime, lastCurrentTime);\n          }\n        }\n        if (this.waiting === 0) {\n          this.stallResolved(currentTime);\n        }\n        return;\n      }\n\n      // Clear stalled state when beginning or finishing seeking so that we don't report stalls coming out of a seek\n      if (beginSeek || seeked) {\n        if (seeked) {\n          this.stallResolved(currentTime);\n        }\n        return;\n      }\n\n      // The playhead should not be moving\n      if (pausedEndedOrHalted) {\n        this.nudgeRetry = 0;\n        this.stallResolved(currentTime);\n        // Fire MEDIA_ENDED to workaround event not being dispatched by browser\n        if (!this.ended && media.ended && this.hls) {\n          this.ended = currentTime || 1;\n          this.hls.trigger(Events.MEDIA_ENDED, {\n            stalled: false\n          });\n        }\n        return;\n      }\n      if (!BufferHelper.getBuffered(media).length) {\n        this.nudgeRetry = 0;\n        return;\n      }\n\n      // Resolve stalls at buffer holes using the main buffer, whose ranges are the intersections of the A/V sourcebuffers\n      var bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);\n      var nextStart = bufferInfo.nextStart || 0;\n      var fragmentTracker = this.fragmentTracker;\n      if (seeking && fragmentTracker && this.hls) {\n        // Is there a fragment loading/parsing/appending before currentTime?\n        var inFlightDependency = getInFlightDependency(this.hls.inFlightFragments, currentTime);\n\n        // Waiting for seeking in a buffered range to complete\n        var hasEnoughBuffer = bufferInfo.len > MAX_START_GAP_JUMP;\n        // Next buffered range is too far ahead to jump to while still seeking\n        var noBufferHole = !nextStart || inFlightDependency || nextStart - currentTime > MAX_START_GAP_JUMP && !fragmentTracker.getPartialFragment(currentTime);\n        if (hasEnoughBuffer || noBufferHole) {\n          return;\n        }\n        // Reset moved state when seeking to a point in or before a gap/hole\n        this.moved = false;\n      }\n\n      // Skip start gaps if we haven't played, but the last poll detected the start of a stall\n      // The addition poll gives the browser a chance to jump the gap for us\n      var levelDetails = (_this$hls2 = this.hls) == null ? void 0 : _this$hls2.latestLevelDetails;\n      if (!this.moved && this.stalled !== null && fragmentTracker) {\n        // There is no playable buffer (seeked, waiting for buffer)\n        var isBuffered = bufferInfo.len > 0;\n        if (!isBuffered && !nextStart) {\n          return;\n        }\n        // Jump start gaps within jump threshold\n        var startJump = Math.max(nextStart, bufferInfo.start || 0) - currentTime;\n\n        // When joining a live stream with audio tracks, account for live playlist window sliding by allowing\n        // a larger jump over start gaps caused by the audio-stream-controller buffering a start fragment\n        // that begins over 1 target duration after the video start position.\n        var isLive = !!(levelDetails != null && levelDetails.live);\n        var maxStartGapJump = isLive ? levelDetails.targetduration * 2 : MAX_START_GAP_JUMP;\n        var partialOrGap = fragmentTracker.getPartialFragment(currentTime);\n        if (startJump > 0 && (startJump <= maxStartGapJump || partialOrGap)) {\n          if (!media.paused) {\n            this._trySkipBufferHole(partialOrGap);\n          }\n          return;\n        }\n      }\n\n      // Start tracking stall time\n      var detectStallWithCurrentTimeMs = config.detectStallWithCurrentTimeMs;\n      var tnow = self.performance.now();\n      var tWaiting = this.waiting;\n      var stalled = this.stalled;\n      if (stalled === null) {\n        // Use time of recent \"waiting\" event\n        if (tWaiting > 0 && tnow - tWaiting < detectStallWithCurrentTimeMs) {\n          stalled = this.stalled = tWaiting;\n        } else {\n          this.stalled = tnow;\n          return;\n        }\n      }\n      var stalledDuration = tnow - stalled;\n      if (!seeking && (stalledDuration >= detectStallWithCurrentTimeMs || tWaiting) && this.hls) {\n        var _this$mediaSource;\n        // Dispatch MEDIA_ENDED when media.ended/ended event is not signalled at end of stream\n        if (((_this$mediaSource = this.mediaSource) == null ? void 0 : _this$mediaSource.readyState) === 'ended' && !(levelDetails != null && levelDetails.live) && Math.abs(currentTime - ((levelDetails == null ? void 0 : levelDetails.edge) || 0)) < 1) {\n          if (this.ended) {\n            return;\n          }\n          this.ended = currentTime || 1;\n          this.hls.trigger(Events.MEDIA_ENDED, {\n            stalled: true\n          });\n          return;\n        }\n        // Report stalling after trying to fix\n        this._reportStall(bufferInfo);\n        if (!this.media || !this.hls) {\n          return;\n        }\n      }\n      var bufferedWithHoles = BufferHelper.bufferInfo(media, currentTime, config.maxBufferHole);\n      this._tryFixBufferStall(bufferedWithHoles, stalledDuration, currentTime);\n    };\n    _proto.stallResolved = function stallResolved(currentTime) {\n      var stalled = this.stalled;\n      if (stalled && this.hls) {\n        this.stalled = null;\n        // The playhead is now moving, but was previously stalled\n        if (this.stallReported) {\n          var stalledDuration = self.performance.now() - stalled;\n          this.log(\"playback not stuck anymore @\" + currentTime + \", after \" + Math.round(stalledDuration) + \"ms\");\n          this.stallReported = false;\n          this.waiting = 0;\n          this.hls.trigger(Events.STALL_RESOLVED, {});\n        }\n      }\n    };\n    _proto.nudgeOnVideoHole = function nudgeOnVideoHole(currentTime, lastCurrentTime) {\n      var _this$buffered$audio;\n      // Chrome will play one second past a hole in video buffered time ranges without rendering any video from the subsequent range and then stall as long as audio is buffered:\n      // https://github.com/video-dev/hls.js/issues/5631\n      // https://issues.chromium.org/issues/40280613#comment10\n      // Detect the potential for this situation and proactively seek to flush the video pipeline once the playhead passes the start of the video hole.\n      // When there are audio and video buffers and currentTime is past the end of the first video buffered range...\n      var videoSourceBuffered = this.buffered.video;\n      if (this.hls && this.media && this.fragmentTracker && (_this$buffered$audio = this.buffered.audio) != null && _this$buffered$audio.length && videoSourceBuffered && videoSourceBuffered.length > 1 && currentTime > videoSourceBuffered.end(0)) {\n        // and audio is buffered at the playhead\n        var audioBufferInfo = BufferHelper.bufferedInfo(BufferHelper.timeRangesToArray(this.buffered.audio), currentTime, 0);\n        if (audioBufferInfo.len > 1 && lastCurrentTime >= audioBufferInfo.start) {\n          var videoTimes = BufferHelper.timeRangesToArray(videoSourceBuffered);\n          var lastBufferedIndex = BufferHelper.bufferedInfo(videoTimes, lastCurrentTime, 0).bufferedIndex;\n          // nudge when crossing into another video buffered range (hole).\n          if (lastBufferedIndex > -1 && lastBufferedIndex < videoTimes.length - 1) {\n            var bufferedIndex = BufferHelper.bufferedInfo(videoTimes, currentTime, 0).bufferedIndex;\n            var holeStart = videoTimes[lastBufferedIndex].end;\n            var holeEnd = videoTimes[lastBufferedIndex + 1].start;\n            if ((bufferedIndex === -1 || bufferedIndex > lastBufferedIndex) && holeEnd - holeStart < 1 &&\n            // `maxBufferHole` may be too small and setting it to 0 should not disable this feature\n            currentTime - holeStart < 2) {\n              var error = new Error(\"nudging playhead to flush pipeline after video hole. currentTime: \" + currentTime + \" hole: \" + holeStart + \" -> \" + holeEnd + \" buffered index: \" + bufferedIndex);\n              this.warn(error.message);\n              // Magic number to flush the pipeline without interuption to audio playback:\n              this.media.currentTime += 0.000001;\n              var frag = this.fragmentTracker.getPartialFragment(currentTime) || undefined;\n              var bufferInfo = BufferHelper.bufferInfo(this.media, currentTime, 0);\n              this.hls.trigger(Events.ERROR, {\n                type: ErrorTypes.MEDIA_ERROR,\n                details: ErrorDetails.BUFFER_SEEK_OVER_HOLE,\n                fatal: false,\n                error: error,\n                reason: error.message,\n                frag: frag,\n                buffer: bufferInfo.len,\n                bufferInfo: bufferInfo\n              });\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Detects and attempts to fix known buffer stalling issues.\n     * @param bufferInfo - The properties of the current buffer.\n     * @param stalledDurationMs - The amount of time Hls.js has been stalling for.\n     * @private\n     */;\n    _proto._tryFixBufferStall = function _tryFixBufferStall(bufferInfo, stalledDurationMs, currentTime) {\n      var _this$hls3, _this$hls4;\n      var fragmentTracker = this.fragmentTracker,\n        media = this.media;\n      var config = (_this$hls3 = this.hls) == null ? void 0 : _this$hls3.config;\n      if (!media || !fragmentTracker || !config) {\n        return;\n      }\n      var levelDetails = (_this$hls4 = this.hls) == null ? void 0 : _this$hls4.latestLevelDetails;\n      var partial = fragmentTracker.getPartialFragment(currentTime);\n      if (partial || levelDetails != null && levelDetails.live && currentTime < levelDetails.fragmentStart) {\n        // Try to skip over the buffer hole caused by a partial fragment\n        // This method isn't limited by the size of the gap between buffered ranges\n        var targetTime = this._trySkipBufferHole(partial);\n        // we return here in this case, meaning\n        // the branch below only executes when we haven't seeked to a new position\n        if (targetTime || !this.media) {\n          return;\n        }\n      }\n\n      // if we haven't had to skip over a buffer hole of a partial fragment\n      // we may just have to \"nudge\" the playlist as the browser decoding/rendering engine\n      // needs to cross some sort of threshold covering all source-buffers content\n      // to start playing properly.\n      var bufferedRanges = bufferInfo.buffered;\n      var adjacentTraversal = this.adjacentTraversal(bufferInfo, currentTime);\n      if ((bufferedRanges && bufferedRanges.length > 1 && bufferInfo.len > config.maxBufferHole || bufferInfo.nextStart && (bufferInfo.nextStart - currentTime < config.maxBufferHole || adjacentTraversal)) && (stalledDurationMs > config.highBufferWatchdogPeriod * 1000 || this.waiting)) {\n        this.warn('Trying to nudge playhead over buffer-hole');\n        // Try to nudge currentTime over a buffer hole if we've been stalling for the configured amount of seconds\n        // We only try to jump the hole if it's under the configured size\n        this._tryNudgeBuffer(bufferInfo);\n      }\n    };\n    _proto.adjacentTraversal = function adjacentTraversal(bufferInfo, currentTime) {\n      var fragmentTracker = this.fragmentTracker;\n      var nextStart = bufferInfo.nextStart;\n      if (fragmentTracker && nextStart) {\n        var current = fragmentTracker.getFragAtPos(currentTime, PlaylistLevelType.MAIN);\n        var next = fragmentTracker.getFragAtPos(nextStart, PlaylistLevelType.MAIN);\n        if (current && next) {\n          return next.sn - current.sn < 2;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Triggers a BUFFER_STALLED_ERROR event, but only once per stall period.\n     * @param bufferLen - The playhead distance from the end of the current buffer segment.\n     * @private\n     */;\n    _proto._reportStall = function _reportStall(bufferInfo) {\n      var hls = this.hls,\n        media = this.media,\n        stallReported = this.stallReported,\n        stalled = this.stalled;\n      if (!stallReported && stalled !== null && media && hls) {\n        // Report stalled error once\n        this.stallReported = true;\n        var error = new Error(\"Playback stalling at @\" + media.currentTime + \" due to low buffer (\" + stringify(bufferInfo) + \")\");\n        this.warn(error.message);\n        hls.trigger(Events.ERROR, {\n          type: ErrorTypes.MEDIA_ERROR,\n          details: ErrorDetails.BUFFER_STALLED_ERROR,\n          fatal: false,\n          error: error,\n          buffer: bufferInfo.len,\n          bufferInfo: bufferInfo,\n          stalled: {\n            start: stalled\n          }\n        });\n      }\n    }\n\n    /**\n     * Attempts to fix buffer stalls by jumping over known gaps caused by partial fragments\n     * @param partial - The partial fragment found at the current time (where playback is stalling).\n     * @private\n     */;\n    _proto._trySkipBufferHole = function _trySkipBufferHole(partial) {\n      var _this$hls5;\n      var fragmentTracker = this.fragmentTracker,\n        media = this.media;\n      var config = (_this$hls5 = this.hls) == null ? void 0 : _this$hls5.config;\n      if (!media || !fragmentTracker || !config) {\n        return 0;\n      }\n\n      // Check if currentTime is between unbuffered regions of partial fragments\n      var currentTime = media.currentTime;\n      var bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);\n      var startTime = currentTime < bufferInfo.start ? bufferInfo.start : bufferInfo.nextStart;\n      if (startTime && this.hls) {\n        var bufferStarved = bufferInfo.len <= config.maxBufferHole;\n        var waiting = bufferInfo.len > 0 && bufferInfo.len < 1 && media.readyState < 3;\n        var gapLength = startTime - currentTime;\n        if (gapLength > 0 && (bufferStarved || waiting)) {\n          // Only allow large gaps to be skipped if it is a start gap, or all fragments in skip range are partial\n          if (gapLength > config.maxBufferHole) {\n            var startGap = false;\n            if (currentTime === 0) {\n              var startFrag = fragmentTracker.getAppendedFrag(0, PlaylistLevelType.MAIN);\n              if (startFrag && startTime < startFrag.end) {\n                startGap = true;\n              }\n            }\n            if (!startGap) {\n              var startProvisioned = partial || fragmentTracker.getAppendedFrag(currentTime, PlaylistLevelType.MAIN);\n              if (startProvisioned) {\n                var _this$hls$loadLevelOb;\n                // Do not seek when selected variant playlist is unloaded\n                if (!((_this$hls$loadLevelOb = this.hls.loadLevelObj) != null && _this$hls$loadLevelOb.details)) {\n                  return 0;\n                }\n                // Do not seek when required fragments are inflight or appending\n                var inFlightDependency = getInFlightDependency(this.hls.inFlightFragments, startTime);\n                if (inFlightDependency) {\n                  return 0;\n                }\n                // Do not seek if we can't walk tracked fragments to end of gap\n                var moreToLoad = false;\n                var pos = startProvisioned.end;\n                while (pos < startTime) {\n                  var provisioned = fragmentTracker.getPartialFragment(pos);\n                  if (provisioned) {\n                    pos += provisioned.duration;\n                  } else {\n                    moreToLoad = true;\n                    break;\n                  }\n                }\n                if (moreToLoad) {\n                  return 0;\n                }\n              }\n            }\n          }\n          var targetTime = Math.max(startTime + SKIP_BUFFER_RANGE_START, currentTime + SKIP_BUFFER_HOLE_STEP_SECONDS);\n          this.warn(\"skipping hole, adjusting currentTime from \" + currentTime + \" to \" + targetTime);\n          this.moved = true;\n          media.currentTime = targetTime;\n          if (!(partial != null && partial.gap)) {\n            var error = new Error(\"fragment loaded with buffer holes, seeking from \" + currentTime + \" to \" + targetTime);\n            this.hls.trigger(Events.ERROR, {\n              type: ErrorTypes.MEDIA_ERROR,\n              details: ErrorDetails.BUFFER_SEEK_OVER_HOLE,\n              fatal: false,\n              error: error,\n              reason: error.message,\n              frag: partial || undefined,\n              buffer: bufferInfo.len,\n              bufferInfo: bufferInfo\n            });\n          }\n          return targetTime;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Attempts to fix buffer stalls by advancing the mediaElement's current time by a small amount.\n     * @private\n     */;\n    _proto._tryNudgeBuffer = function _tryNudgeBuffer(bufferInfo) {\n      var hls = this.hls,\n        media = this.media,\n        nudgeRetry = this.nudgeRetry;\n      var config = hls == null ? void 0 : hls.config;\n      if (!media || !config) {\n        return 0;\n      }\n      var currentTime = media.currentTime;\n      this.nudgeRetry++;\n      if (nudgeRetry < config.nudgeMaxRetry) {\n        var targetTime = currentTime + (nudgeRetry + 1) * config.nudgeOffset;\n        // playback stalled in buffered area ... let's nudge currentTime to try to overcome this\n        var error = new Error(\"Nudging 'currentTime' from \" + currentTime + \" to \" + targetTime);\n        this.warn(error.message);\n        media.currentTime = targetTime;\n        hls.trigger(Events.ERROR, {\n          type: ErrorTypes.MEDIA_ERROR,\n          details: ErrorDetails.BUFFER_NUDGE_ON_STALL,\n          error: error,\n          fatal: false,\n          buffer: bufferInfo.len,\n          bufferInfo: bufferInfo\n        });\n      } else {\n        var _error = new Error(\"Playhead still not moving while enough data buffered @\" + currentTime + \" after \" + config.nudgeMaxRetry + \" nudges\");\n        this.error(_error.message);\n        hls.trigger(Events.ERROR, {\n          type: ErrorTypes.MEDIA_ERROR,\n          details: ErrorDetails.BUFFER_STALLED_ERROR,\n          error: _error,\n          fatal: true,\n          buffer: bufferInfo.len,\n          bufferInfo: bufferInfo\n        });\n      }\n    };\n    return _createClass(GapController, [{\n      key: \"hasBuffered\",\n      get: function get() {\n        return Object.keys(this.buffered).length > 0;\n      }\n    }]);\n  }(TaskLoop);\n  function getInFlightDependency(inFlightFragments, currentTime) {\n    var main = inFlight(inFlightFragments.main);\n    if (main && main.start <= currentTime) {\n      return main;\n    }\n    var audio = inFlight(inFlightFragments.audio);\n    if (audio && audio.start <= currentTime) {\n      return audio;\n    }\n    return null;\n  }\n  function inFlight(inFlightData) {\n    if (!inFlightData) {\n      return null;\n    }\n    switch (inFlightData.state) {\n      case State.IDLE:\n      case State.STOPPED:\n      case State.ENDED:\n      case State.ERROR:\n        return null;\n    }\n    return inFlightData.frag;\n  }\n\n  var MIN_CUE_DURATION = 0.25;\n  function getCueClass() {\n    if (typeof self === 'undefined') return undefined;\n    return self.VTTCue || self.TextTrackCue;\n  }\n  function createCueWithDataFields(Cue, startTime, endTime, data, type) {\n    var cue = new Cue(startTime, endTime, '');\n    try {\n      cue.value = data;\n      if (type) {\n        cue.type = type;\n      }\n    } catch (e) {\n      cue = new Cue(startTime, endTime, stringify(type ? _objectSpread2({\n        type: type\n      }, data) : data));\n    }\n    return cue;\n  }\n\n  // VTTCue latest draft allows an infinite duration, fallback\n  // to MAX_VALUE if necessary\n  var MAX_CUE_ENDTIME = function () {\n    var Cue = getCueClass();\n    try {\n      Cue && new Cue(0, Number.POSITIVE_INFINITY, '');\n    } catch (e) {\n      return Number.MAX_VALUE;\n    }\n    return Number.POSITIVE_INFINITY;\n  }();\n  function hexToArrayBuffer(str) {\n    return Uint8Array.from(str.replace(/^0x/, '').replace(/([\\da-fA-F]{2}) ?/g, '0x$1 ').replace(/ +$/, '').split(' ')).buffer;\n  }\n  var ID3TrackController = /*#__PURE__*/function () {\n    function ID3TrackController(hls) {\n      var _this = this;\n      this.hls = void 0;\n      this.id3Track = null;\n      this.media = null;\n      this.dateRangeCuesAppended = {};\n      this.removeCues = true;\n      this.onEventCueEnter = function () {\n        if (!_this.hls) {\n          return;\n        }\n        _this.hls.trigger(Events.EVENT_CUE_ENTER, {});\n      };\n      this.hls = hls;\n      this._registerListeners();\n    }\n    var _proto = ID3TrackController.prototype;\n    _proto.destroy = function destroy() {\n      this._unregisterListeners();\n      this.id3Track = null;\n      this.media = null;\n      this.dateRangeCuesAppended = {};\n      // @ts-ignore\n      this.hls = this.onEventCueEnter = null;\n    };\n    _proto._registerListeners = function _registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);\n      hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n      hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.on(Events.LEVEL_PTS_UPDATED, this.onLevelPtsUpdated, this);\n    };\n    _proto._unregisterListeners = function _unregisterListeners() {\n      var hls = this.hls;\n      hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);\n      hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n      hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.off(Events.LEVEL_PTS_UPDATED, this.onLevelPtsUpdated, this);\n    };\n    // Add ID3 metatadata text track.\n    _proto.onMediaAttaching = function onMediaAttaching(event, data) {\n      var _data$overrides;\n      this.media = data.media;\n      if (((_data$overrides = data.overrides) == null ? void 0 : _data$overrides.cueRemoval) === false) {\n        this.removeCues = false;\n      }\n    };\n    _proto.onMediaAttached = function onMediaAttached() {\n      var details = this.hls.latestLevelDetails;\n      if (details) {\n        this.updateDateRangeCues(details);\n      }\n    };\n    _proto.onMediaDetaching = function onMediaDetaching(event, data) {\n      this.media = null;\n      var transferringMedia = !!data.transferMedia;\n      if (transferringMedia) {\n        return;\n      }\n      if (this.id3Track) {\n        if (this.removeCues) {\n          clearCurrentCues(this.id3Track, this.onEventCueEnter);\n        }\n        this.id3Track = null;\n      }\n      this.dateRangeCuesAppended = {};\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      this.dateRangeCuesAppended = {};\n    };\n    _proto.createTrack = function createTrack(media) {\n      var track = this.getID3Track(media.textTracks);\n      track.mode = 'hidden';\n      return track;\n    };\n    _proto.getID3Track = function getID3Track(textTracks) {\n      if (!this.media) {\n        return;\n      }\n      for (var i = 0; i < textTracks.length; i++) {\n        var textTrack = textTracks[i];\n        if (textTrack.kind === 'metadata' && textTrack.label === 'id3') {\n          // send 'addtrack' when reusing the textTrack for metadata,\n          // same as what we do for captions\n          sendAddTrackEvent(textTrack, this.media);\n          return textTrack;\n        }\n      }\n      return this.media.addTextTrack('metadata', 'id3');\n    };\n    _proto.onFragParsingMetadata = function onFragParsingMetadata(event, data) {\n      if (!this.media) {\n        return;\n      }\n      var _this$hls$config = this.hls.config,\n        enableEmsgMetadataCues = _this$hls$config.enableEmsgMetadataCues,\n        enableID3MetadataCues = _this$hls$config.enableID3MetadataCues;\n      if (!enableEmsgMetadataCues && !enableID3MetadataCues) {\n        return;\n      }\n      var samples = data.samples;\n\n      // create track dynamically\n      if (!this.id3Track) {\n        this.id3Track = this.createTrack(this.media);\n      }\n      var Cue = getCueClass();\n      if (!Cue) {\n        return;\n      }\n      for (var i = 0; i < samples.length; i++) {\n        var type = samples[i].type;\n        if (type === MetadataSchema.emsg && !enableEmsgMetadataCues || !enableID3MetadataCues) {\n          continue;\n        }\n        var frames = getId3Frames(samples[i].data);\n        if (frames) {\n          var startTime = samples[i].pts;\n          var endTime = startTime + samples[i].duration;\n          if (endTime > MAX_CUE_ENDTIME) {\n            endTime = MAX_CUE_ENDTIME;\n          }\n          var timeDiff = endTime - startTime;\n          if (timeDiff <= 0) {\n            endTime = startTime + MIN_CUE_DURATION;\n          }\n          for (var j = 0; j < frames.length; j++) {\n            var frame = frames[j];\n            // Safari doesn't put the timestamp frame in the TextTrack\n            if (!isId3TimestampFrame(frame)) {\n              // add a bounds to any unbounded cues\n              this.updateId3CueEnds(startTime, type);\n              var cue = createCueWithDataFields(Cue, startTime, endTime, frame, type);\n              if (cue) {\n                this.id3Track.addCue(cue);\n              }\n            }\n          }\n        }\n      }\n    };\n    _proto.updateId3CueEnds = function updateId3CueEnds(startTime, type) {\n      var _this$id3Track;\n      var cues = (_this$id3Track = this.id3Track) == null ? void 0 : _this$id3Track.cues;\n      if (cues) {\n        for (var i = cues.length; i--;) {\n          var cue = cues[i];\n          if (cue.type === type && cue.startTime < startTime && cue.endTime === MAX_CUE_ENDTIME) {\n            cue.endTime = startTime;\n          }\n        }\n      }\n    };\n    _proto.onBufferFlushing = function onBufferFlushing(event, _ref) {\n      var startOffset = _ref.startOffset,\n        endOffset = _ref.endOffset,\n        type = _ref.type;\n      var id3Track = this.id3Track,\n        hls = this.hls;\n      if (!hls) {\n        return;\n      }\n      var _hls$config = hls.config,\n        enableEmsgMetadataCues = _hls$config.enableEmsgMetadataCues,\n        enableID3MetadataCues = _hls$config.enableID3MetadataCues;\n      if (id3Track && (enableEmsgMetadataCues || enableID3MetadataCues)) {\n        var predicate;\n        if (type === 'audio') {\n          predicate = function predicate(cue) {\n            return cue.type === MetadataSchema.audioId3 && enableID3MetadataCues;\n          };\n        } else if (type === 'video') {\n          predicate = function predicate(cue) {\n            return cue.type === MetadataSchema.emsg && enableEmsgMetadataCues;\n          };\n        } else {\n          predicate = function predicate(cue) {\n            return cue.type === MetadataSchema.audioId3 && enableID3MetadataCues || cue.type === MetadataSchema.emsg && enableEmsgMetadataCues;\n          };\n        }\n        removeCuesInRange(id3Track, startOffset, endOffset, predicate);\n      }\n    };\n    _proto.onLevelUpdated = function onLevelUpdated(event, _ref2) {\n      var details = _ref2.details;\n      this.updateDateRangeCues(details, true);\n    };\n    _proto.onLevelPtsUpdated = function onLevelPtsUpdated(event, data) {\n      if (Math.abs(data.drift) > 0.01) {\n        this.updateDateRangeCues(data.details);\n      }\n    };\n    _proto.updateDateRangeCues = function updateDateRangeCues(details, removeOldCues) {\n      var _this2 = this;\n      if (!this.media || !details.hasProgramDateTime || !this.hls.config.enableDateRangeMetadataCues) {\n        return;\n      }\n      var id3Track = this.id3Track;\n      var dateRanges = details.dateRanges;\n      var ids = Object.keys(dateRanges);\n      var dateRangeCuesAppended = this.dateRangeCuesAppended;\n      // Remove cues from track not found in details.dateRanges\n      if (id3Track && removeOldCues) {\n        var _id3Track$cues;\n        if ((_id3Track$cues = id3Track.cues) != null && _id3Track$cues.length) {\n          var idsToRemove = Object.keys(dateRangeCuesAppended).filter(function (id) {\n            return !ids.includes(id);\n          });\n          var _loop = function _loop() {\n            var id = idsToRemove[i];\n            var cues = dateRangeCuesAppended[id].cues;\n            delete dateRangeCuesAppended[id];\n            Object.keys(cues).forEach(function (key) {\n              try {\n                var cue = cues[key];\n                cue.removeEventListener('enter', _this2.onEventCueEnter);\n                id3Track.removeCue(cue);\n              } catch (e) {\n                /* no-op */\n              }\n            });\n          };\n          for (var i = idsToRemove.length; i--;) {\n            _loop();\n          }\n        } else {\n          dateRangeCuesAppended = this.dateRangeCuesAppended = {};\n        }\n      }\n      // Exit if the playlist does not have Date Ranges or does not have Program Date Time\n      var lastFragment = details.fragments[details.fragments.length - 1];\n      if (ids.length === 0 || !isFiniteNumber(lastFragment == null ? void 0 : lastFragment.programDateTime)) {\n        return;\n      }\n      if (!this.id3Track) {\n        this.id3Track = this.createTrack(this.media);\n      }\n      var Cue = getCueClass();\n      var _loop2 = function _loop2() {\n        var id = ids[_i];\n        var dateRange = dateRanges[id];\n        var startTime = dateRange.startTime;\n\n        // Process DateRanges to determine end-time (known DURATION, END-DATE, or END-ON-NEXT)\n        var appendedDateRangeCues = dateRangeCuesAppended[id];\n        var cues = (appendedDateRangeCues == null ? void 0 : appendedDateRangeCues.cues) || {};\n        var durationKnown = (appendedDateRangeCues == null ? void 0 : appendedDateRangeCues.durationKnown) || false;\n        var endTime = MAX_CUE_ENDTIME;\n        var duration = dateRange.duration,\n          endDate = dateRange.endDate;\n        if (endDate && duration !== null) {\n          endTime = startTime + duration;\n          durationKnown = true;\n        } else if (dateRange.endOnNext && !durationKnown) {\n          var nextDateRangeWithSameClass = ids.reduce(function (candidateDateRange, id) {\n            if (id !== dateRange.id) {\n              var otherDateRange = dateRanges[id];\n              if (otherDateRange.class === dateRange.class && otherDateRange.startDate > dateRange.startDate && (!candidateDateRange || dateRange.startDate < candidateDateRange.startDate)) {\n                return otherDateRange;\n              }\n            }\n            return candidateDateRange;\n          }, null);\n          if (nextDateRangeWithSameClass) {\n            endTime = nextDateRangeWithSameClass.startTime;\n            durationKnown = true;\n          }\n        }\n\n        // Create TextTrack Cues for each MetadataGroup Item (select DateRange attribute)\n        // This is to emulate Safari HLS playback handling of DateRange tags\n        var attributes = Object.keys(dateRange.attr);\n        for (var j = 0; j < attributes.length; j++) {\n          var key = attributes[j];\n          if (!isDateRangeCueAttribute(key)) {\n            continue;\n          }\n          var cue = cues[key];\n          if (cue) {\n            if (durationKnown && !appendedDateRangeCues.durationKnown) {\n              cue.endTime = endTime;\n            } else if (Math.abs(cue.startTime - startTime) > 0.01) {\n              cue.startTime = startTime;\n              cue.endTime = endTime;\n            }\n          } else if (Cue) {\n            var data = dateRange.attr[key];\n            if (isSCTE35Attribute(key)) {\n              data = hexToArrayBuffer(data);\n            }\n            var payload = {\n              key: key,\n              data: data\n            };\n            var _cue = createCueWithDataFields(Cue, startTime, endTime, payload, MetadataSchema.dateRange);\n            if (_cue) {\n              _cue.id = id;\n              _this2.id3Track.addCue(_cue);\n              cues[key] = _cue;\n              if (_this2.hls.config.interstitialsController) {\n                if (key === 'X-ASSET-LIST' || key === 'X-ASSET-URL') {\n                  _cue.addEventListener('enter', _this2.onEventCueEnter);\n                }\n              }\n            }\n          }\n        }\n\n        // Keep track of processed DateRanges by ID for updating cues with new DateRange tag attributes\n        dateRangeCuesAppended[id] = {\n          cues: cues,\n          dateRange: dateRange,\n          durationKnown: durationKnown\n        };\n      };\n      for (var _i = 0; _i < ids.length; _i++) {\n        _loop2();\n      }\n    };\n    return ID3TrackController;\n  }();\n\n  var LatencyController = /*#__PURE__*/function () {\n    function LatencyController(hls) {\n      var _this = this;\n      this.hls = void 0;\n      this.config = void 0;\n      this.media = null;\n      this.currentTime = 0;\n      this.stallCount = 0;\n      this._latency = null;\n      this._targetLatencyUpdated = false;\n      this.onTimeupdate = function () {\n        var media = _this.media;\n        var levelDetails = _this.levelDetails;\n        if (!media || !levelDetails) {\n          return;\n        }\n        _this.currentTime = media.currentTime;\n        var latency = _this.computeLatency();\n        if (latency === null) {\n          return;\n        }\n        _this._latency = latency;\n\n        // Adapt playbackRate to meet target latency in low-latency mode\n        var _this$config = _this.config,\n          lowLatencyMode = _this$config.lowLatencyMode,\n          maxLiveSyncPlaybackRate = _this$config.maxLiveSyncPlaybackRate;\n        if (!lowLatencyMode || maxLiveSyncPlaybackRate === 1 || !levelDetails.live) {\n          return;\n        }\n        var targetLatency = _this.targetLatency;\n        if (targetLatency === null) {\n          return;\n        }\n        var distanceFromTarget = latency - targetLatency;\n        // Only adjust playbackRate when within one target duration of targetLatency\n        // and more than one second from under-buffering.\n        // Playback further than one target duration from target can be considered DVR playback.\n        var liveMinLatencyDuration = Math.min(_this.maxLatency, targetLatency + levelDetails.targetduration);\n        var inLiveRange = distanceFromTarget < liveMinLatencyDuration;\n        if (inLiveRange && distanceFromTarget > 0.05 && _this.forwardBufferLength > 1) {\n          var max = Math.min(2, Math.max(1.0, maxLiveSyncPlaybackRate));\n          var rate = Math.round(2 / (1 + Math.exp(-0.75 * distanceFromTarget - _this.edgeStalled)) * 20) / 20;\n          var playbackRate = Math.min(max, Math.max(1, rate));\n          _this.changeMediaPlaybackRate(media, playbackRate);\n        } else if (media.playbackRate !== 1 && media.playbackRate !== 0) {\n          _this.changeMediaPlaybackRate(media, 1);\n        }\n      };\n      this.hls = hls;\n      this.config = hls.config;\n      this.registerListeners();\n    }\n    var _proto = LatencyController.prototype;\n    _proto.destroy = function destroy() {\n      this.unregisterListeners();\n      this.onMediaDetaching();\n      this.hls = null;\n    };\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      if (!hls) {\n        return;\n      }\n      hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.on(Events.ERROR, this.onError, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      if (!hls) {\n        return;\n      }\n      hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.off(Events.ERROR, this.onError, this);\n    };\n    _proto.onMediaAttached = function onMediaAttached(event, data) {\n      this.media = data.media;\n      this.media.addEventListener('timeupdate', this.onTimeupdate);\n    };\n    _proto.onMediaDetaching = function onMediaDetaching() {\n      if (this.media) {\n        this.media.removeEventListener('timeupdate', this.onTimeupdate);\n        this.media = null;\n      }\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      this._latency = null;\n      this.stallCount = 0;\n    };\n    _proto.onLevelUpdated = function onLevelUpdated(event, _ref) {\n      var details = _ref.details;\n      if (details.advanced) {\n        this.onTimeupdate();\n      }\n      if (!details.live && this.media) {\n        this.media.removeEventListener('timeupdate', this.onTimeupdate);\n      }\n    };\n    _proto.onError = function onError(event, data) {\n      var _this$levelDetails;\n      if (data.details !== ErrorDetails.BUFFER_STALLED_ERROR) {\n        return;\n      }\n      this.stallCount++;\n      if (this.hls && (_this$levelDetails = this.levelDetails) != null && _this$levelDetails.live) {\n        this.hls.logger.warn('[latency-controller]: Stall detected, adjusting target latency');\n      }\n    };\n    _proto.changeMediaPlaybackRate = function changeMediaPlaybackRate(media, playbackRate) {\n      var _this$hls, _this$targetLatency;\n      if (media.playbackRate === playbackRate) {\n        return;\n      }\n      (_this$hls = this.hls) == null ? void 0 : _this$hls.logger.debug(\"[latency-controller]: latency=\" + this.latency.toFixed(3) + \", targetLatency=\" + ((_this$targetLatency = this.targetLatency) == null ? void 0 : _this$targetLatency.toFixed(3)) + \", forwardBufferLength=\" + this.forwardBufferLength.toFixed(3) + \": adjusting playback rate from \" + media.playbackRate + \" to \" + playbackRate);\n      media.playbackRate = playbackRate;\n    };\n    _proto.estimateLiveEdge = function estimateLiveEdge() {\n      var levelDetails = this.levelDetails;\n      if (levelDetails === null) {\n        return null;\n      }\n      return levelDetails.edge + levelDetails.age;\n    };\n    _proto.computeLatency = function computeLatency() {\n      var liveEdge = this.estimateLiveEdge();\n      if (liveEdge === null) {\n        return null;\n      }\n      return liveEdge - this.currentTime;\n    };\n    return _createClass(LatencyController, [{\n      key: \"levelDetails\",\n      get: function get() {\n        var _this$hls2;\n        return ((_this$hls2 = this.hls) == null ? void 0 : _this$hls2.latestLevelDetails) || null;\n      }\n    }, {\n      key: \"latency\",\n      get: function get() {\n        return this._latency || 0;\n      }\n    }, {\n      key: \"maxLatency\",\n      get: function get() {\n        var config = this.config;\n        if (config.liveMaxLatencyDuration !== undefined) {\n          return config.liveMaxLatencyDuration;\n        }\n        var levelDetails = this.levelDetails;\n        return levelDetails ? config.liveMaxLatencyDurationCount * levelDetails.targetduration : 0;\n      }\n    }, {\n      key: \"targetLatency\",\n      get: function get() {\n        var levelDetails = this.levelDetails;\n        if (levelDetails === null || this.hls === null) {\n          return null;\n        }\n        var holdBack = levelDetails.holdBack,\n          partHoldBack = levelDetails.partHoldBack,\n          targetduration = levelDetails.targetduration;\n        var _this$config2 = this.config,\n          liveSyncDuration = _this$config2.liveSyncDuration,\n          liveSyncDurationCount = _this$config2.liveSyncDurationCount,\n          lowLatencyMode = _this$config2.lowLatencyMode;\n        var userConfig = this.hls.userConfig;\n        var targetLatency = lowLatencyMode ? partHoldBack || holdBack : holdBack;\n        if (this._targetLatencyUpdated || userConfig.liveSyncDuration || userConfig.liveSyncDurationCount || targetLatency === 0) {\n          targetLatency = liveSyncDuration !== undefined ? liveSyncDuration : liveSyncDurationCount * targetduration;\n        }\n        var maxLiveSyncOnStallIncrease = targetduration;\n        return targetLatency + Math.min(this.stallCount * this.config.liveSyncOnStallIncrease, maxLiveSyncOnStallIncrease);\n      },\n      set: function set(latency) {\n        this.stallCount = 0;\n        this.config.liveSyncDuration = latency;\n        this._targetLatencyUpdated = true;\n      }\n    }, {\n      key: \"liveSyncPosition\",\n      get: function get() {\n        var liveEdge = this.estimateLiveEdge();\n        var targetLatency = this.targetLatency;\n        if (liveEdge === null || targetLatency === null) {\n          return null;\n        }\n        var levelDetails = this.levelDetails;\n        if (levelDetails === null) {\n          return null;\n        }\n        var edge = levelDetails.edge;\n        var syncPosition = liveEdge - targetLatency - this.edgeStalled;\n        var min = edge - levelDetails.totalduration;\n        var max = edge - (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration);\n        return Math.min(Math.max(min, syncPosition), max);\n      }\n    }, {\n      key: \"drift\",\n      get: function get() {\n        var levelDetails = this.levelDetails;\n        if (levelDetails === null) {\n          return 1;\n        }\n        return levelDetails.drift;\n      }\n    }, {\n      key: \"edgeStalled\",\n      get: function get() {\n        var levelDetails = this.levelDetails;\n        if (levelDetails === null) {\n          return 0;\n        }\n        var maxLevelUpdateAge = (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration) * 3;\n        return Math.max(levelDetails.age - maxLevelUpdateAge, 0);\n      }\n    }, {\n      key: \"forwardBufferLength\",\n      get: function get() {\n        var media = this.media;\n        var levelDetails = this.levelDetails;\n        if (!media || !levelDetails) {\n          return 0;\n        }\n        var bufferedRanges = media.buffered.length;\n        return (bufferedRanges ? media.buffered.end(bufferedRanges - 1) : levelDetails.edge) - this.currentTime;\n      }\n    }]);\n  }();\n\n  var LevelController = /*#__PURE__*/function (_BasePlaylistControll) {\n    function LevelController(hls, contentSteeringController) {\n      var _this;\n      _this = _BasePlaylistControll.call(this, hls, 'level-controller') || this;\n      _this._levels = [];\n      _this._firstLevel = -1;\n      _this._maxAutoLevel = -1;\n      _this._startLevel = void 0;\n      _this.currentLevel = null;\n      _this.currentLevelIndex = -1;\n      _this.manualLevelIndex = -1;\n      _this.steering = void 0;\n      _this.onParsedComplete = void 0;\n      _this.steering = contentSteeringController;\n      _this._registerListeners();\n      return _this;\n    }\n    _inheritsLoose(LevelController, _BasePlaylistControll);\n    var _proto = LevelController.prototype;\n    _proto._registerListeners = function _registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n      hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n      hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n      hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n      hls.on(Events.ERROR, this.onError, this);\n    };\n    _proto._unregisterListeners = function _unregisterListeners() {\n      var hls = this.hls;\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n      hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n      hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n      hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n      hls.off(Events.ERROR, this.onError, this);\n    };\n    _proto.destroy = function destroy() {\n      this._unregisterListeners();\n      this.steering = null;\n      this.resetLevels();\n      _BasePlaylistControll.prototype.destroy.call(this);\n    };\n    _proto.stopLoad = function stopLoad() {\n      var levels = this._levels;\n\n      // clean up live level details to force reload them, and reset load errors\n      levels.forEach(function (level) {\n        level.loadError = 0;\n        level.fragmentError = 0;\n      });\n      _BasePlaylistControll.prototype.stopLoad.call(this);\n    };\n    _proto.resetLevels = function resetLevels() {\n      this._startLevel = undefined;\n      this.manualLevelIndex = -1;\n      this.currentLevelIndex = -1;\n      this.currentLevel = null;\n      this._levels = [];\n      this._maxAutoLevel = -1;\n    };\n    _proto.onManifestLoading = function onManifestLoading(event, data) {\n      this.resetLevels();\n    };\n    _proto.onManifestLoaded = function onManifestLoaded(event, data) {\n      var _this2 = this;\n      var preferManagedMediaSource = this.hls.config.preferManagedMediaSource;\n      var levels = [];\n      var redundantSet = {};\n      var generatePathwaySet = {};\n      var resolutionFound = false;\n      var videoCodecFound = false;\n      var audioCodecFound = false;\n      data.levels.forEach(function (levelParsed) {\n        var attributes = levelParsed.attrs;\n        var audioCodec = levelParsed.audioCodec,\n          videoCodec = levelParsed.videoCodec;\n        if (audioCodec) {\n          // Returns empty and set to undefined for 'mp4a.40.34' with fallback to 'audio/mpeg' SourceBuffer\n          levelParsed.audioCodec = audioCodec = getCodecCompatibleName(audioCodec, preferManagedMediaSource) || undefined;\n        }\n        if (videoCodec) {\n          videoCodec = levelParsed.videoCodec = convertAVC1ToAVCOTI(videoCodec);\n        }\n\n        // only keep levels with supported audio/video codecs\n        var width = levelParsed.width,\n          height = levelParsed.height,\n          unknownCodecs = levelParsed.unknownCodecs;\n        var unknownUnsupportedCodecCount = unknownCodecs ? unknownCodecs.length : 0;\n        if (unknownCodecs) {\n          // Treat unknown codec as audio or video codec based on passing `isTypeSupported` check\n          // (allows for playback of any supported codec even if not indexed in utils/codecs)\n          for (var i = unknownUnsupportedCodecCount; i--;) {\n            var unknownCodec = unknownCodecs[i];\n            if (_this2.isAudioSupported(unknownCodec)) {\n              levelParsed.audioCodec = audioCodec = audioCodec ? audioCodec + \",\" + unknownCodec : unknownCodec;\n              unknownUnsupportedCodecCount--;\n              sampleEntryCodesISO.audio[audioCodec.substring(0, 4)] = 2;\n            } else if (_this2.isVideoSupported(unknownCodec)) {\n              levelParsed.videoCodec = videoCodec = videoCodec ? videoCodec + \",\" + unknownCodec : unknownCodec;\n              unknownUnsupportedCodecCount--;\n              sampleEntryCodesISO.video[videoCodec.substring(0, 4)] = 2;\n            }\n          }\n        }\n        resolutionFound || (resolutionFound = !!(width && height));\n        videoCodecFound || (videoCodecFound = !!videoCodec);\n        audioCodecFound || (audioCodecFound = !!audioCodec);\n        if (unknownUnsupportedCodecCount || audioCodec && !_this2.isAudioSupported(audioCodec) || videoCodec && !_this2.isVideoSupported(videoCodec)) {\n          _this2.log(\"Some or all CODECS not supported \\\"\" + attributes.CODECS + \"\\\"\");\n          return;\n        }\n        var CODECS = attributes.CODECS,\n          FRAMERATE = attributes['FRAME-RATE'],\n          HDCP = attributes['HDCP-LEVEL'],\n          PATHWAY = attributes['PATHWAY-ID'],\n          RESOLUTION = attributes.RESOLUTION,\n          VIDEO_RANGE = attributes['VIDEO-RANGE'];\n        var contentSteeringPrefix = (PATHWAY || '.') + \"-\";\n        var levelKey = \"\" + contentSteeringPrefix + levelParsed.bitrate + \"-\" + RESOLUTION + \"-\" + FRAMERATE + \"-\" + CODECS + \"-\" + VIDEO_RANGE + \"-\" + HDCP;\n        if (!redundantSet[levelKey]) {\n          var level = _this2.createLevel(levelParsed);\n          redundantSet[levelKey] = level;\n          generatePathwaySet[levelKey] = 1;\n          levels.push(level);\n        } else if (redundantSet[levelKey].uri !== levelParsed.url && !levelParsed.attrs['PATHWAY-ID']) {\n          // Assign Pathway IDs to Redundant Streams (default Pathways is \".\". Redundant Streams \"..\", \"...\", and so on.)\n          // Content Steering controller to handles Pathway fallback on error\n          var pathwayCount = generatePathwaySet[levelKey] += 1;\n          levelParsed.attrs['PATHWAY-ID'] = new Array(pathwayCount + 1).join('.');\n          var _level = _this2.createLevel(levelParsed);\n          redundantSet[levelKey] = _level;\n          levels.push(_level);\n        } else {\n          redundantSet[levelKey].addGroupId('audio', attributes.AUDIO);\n          redundantSet[levelKey].addGroupId('text', attributes.SUBTITLES);\n        }\n      });\n      this.filterAndSortMediaOptions(levels, data, resolutionFound, videoCodecFound, audioCodecFound);\n    };\n    _proto.createLevel = function createLevel(levelParsed) {\n      var level = new Level(levelParsed);\n      var supplemental = levelParsed.supplemental;\n      if (supplemental != null && supplemental.videoCodec && !this.isVideoSupported(supplemental.videoCodec)) {\n        var error = new Error(\"SUPPLEMENTAL-CODECS not supported \\\"\" + supplemental.videoCodec + \"\\\"\");\n        this.log(error.message);\n        level.supportedResult = getUnsupportedResult(error, []);\n      }\n      return level;\n    };\n    _proto.isAudioSupported = function isAudioSupported(codec) {\n      return areCodecsMediaSourceSupported(codec, 'audio', this.hls.config.preferManagedMediaSource);\n    };\n    _proto.isVideoSupported = function isVideoSupported(codec) {\n      return areCodecsMediaSourceSupported(codec, 'video', this.hls.config.preferManagedMediaSource);\n    };\n    _proto.filterAndSortMediaOptions = function filterAndSortMediaOptions(filteredLevels, data, resolutionFound, videoCodecFound, audioCodecFound) {\n      var _this3 = this;\n      var audioTracks = [];\n      var subtitleTracks = [];\n      var levels = filteredLevels;\n\n      // remove audio-only and invalid video-range levels if we also have levels with video codecs or RESOLUTION signalled\n      if ((resolutionFound || videoCodecFound) && audioCodecFound) {\n        levels = levels.filter(function (_ref) {\n          var videoCodec = _ref.videoCodec,\n            videoRange = _ref.videoRange,\n            width = _ref.width,\n            height = _ref.height;\n          return (!!videoCodec || !!(width && height)) && isVideoRange(videoRange);\n        });\n      }\n      if (levels.length === 0) {\n        // Dispatch error after MANIFEST_LOADED is done propagating\n        Promise.resolve().then(function () {\n          if (_this3.hls) {\n            var message = 'no level with compatible codecs found in manifest';\n            var reason = message;\n            if (data.levels.length) {\n              reason = \"one or more CODECS in variant not supported: \" + stringify(data.levels.map(function (level) {\n                return level.attrs.CODECS;\n              }).filter(function (value, index, array) {\n                return array.indexOf(value) === index;\n              }));\n              _this3.warn(reason);\n              message += \" (\" + reason + \")\";\n            }\n            var error = new Error(message);\n            _this3.hls.trigger(Events.ERROR, {\n              type: ErrorTypes.MEDIA_ERROR,\n              details: ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,\n              fatal: true,\n              url: data.url,\n              error: error,\n              reason: reason\n            });\n          }\n        });\n        return;\n      }\n      if (data.audioTracks) {\n        audioTracks = data.audioTracks.filter(function (track) {\n          return !track.audioCodec || _this3.isAudioSupported(track.audioCodec);\n        });\n        // Assign ids after filtering as array indices by group-id\n        assignTrackIdsByGroup(audioTracks);\n      }\n      if (data.subtitles) {\n        subtitleTracks = data.subtitles;\n        assignTrackIdsByGroup(subtitleTracks);\n      }\n      // start bitrate is the first bitrate of the manifest\n      var unsortedLevels = levels.slice(0);\n      // sort levels from lowest to highest\n      levels.sort(function (a, b) {\n        if (a.attrs['HDCP-LEVEL'] !== b.attrs['HDCP-LEVEL']) {\n          return (a.attrs['HDCP-LEVEL'] || '') > (b.attrs['HDCP-LEVEL'] || '') ? 1 : -1;\n        }\n        // sort on height before bitrate for cap-level-controller\n        if (resolutionFound && a.height !== b.height) {\n          return a.height - b.height;\n        }\n        if (a.frameRate !== b.frameRate) {\n          return a.frameRate - b.frameRate;\n        }\n        if (a.videoRange !== b.videoRange) {\n          return VideoRangeValues.indexOf(a.videoRange) - VideoRangeValues.indexOf(b.videoRange);\n        }\n        if (a.videoCodec !== b.videoCodec) {\n          var valueA = videoCodecPreferenceValue(a.videoCodec);\n          var valueB = videoCodecPreferenceValue(b.videoCodec);\n          if (valueA !== valueB) {\n            return valueB - valueA;\n          }\n        }\n        if (a.uri === b.uri && a.codecSet !== b.codecSet) {\n          var _valueA = codecsSetSelectionPreferenceValue(a.codecSet);\n          var _valueB = codecsSetSelectionPreferenceValue(b.codecSet);\n          if (_valueA !== _valueB) {\n            return _valueB - _valueA;\n          }\n        }\n        if (a.averageBitrate !== b.averageBitrate) {\n          return a.averageBitrate - b.averageBitrate;\n        }\n        return 0;\n      });\n      var firstLevelInPlaylist = unsortedLevels[0];\n      if (this.steering) {\n        levels = this.steering.filterParsedLevels(levels);\n        if (levels.length !== unsortedLevels.length) {\n          for (var i = 0; i < unsortedLevels.length; i++) {\n            if (unsortedLevels[i].pathwayId === levels[0].pathwayId) {\n              firstLevelInPlaylist = unsortedLevels[i];\n              break;\n            }\n          }\n        }\n      }\n      this._levels = levels;\n\n      // find index of first level in sorted levels\n      for (var _i = 0; _i < levels.length; _i++) {\n        if (levels[_i] === firstLevelInPlaylist) {\n          var _this$hls$userConfig;\n          this._firstLevel = _i;\n          var firstLevelBitrate = firstLevelInPlaylist.bitrate;\n          var bandwidthEstimate = this.hls.bandwidthEstimate;\n          this.log(\"manifest loaded, \" + levels.length + \" level(s) found, first bitrate: \" + firstLevelBitrate);\n          // Update default bwe to first variant bitrate as long it has not been configured or set\n          if (((_this$hls$userConfig = this.hls.userConfig) == null ? void 0 : _this$hls$userConfig.abrEwmaDefaultEstimate) === undefined) {\n            var startingBwEstimate = Math.min(firstLevelBitrate, this.hls.config.abrEwmaDefaultEstimateMax);\n            if (startingBwEstimate > bandwidthEstimate && bandwidthEstimate === this.hls.abrEwmaDefaultEstimate) {\n              this.hls.bandwidthEstimate = startingBwEstimate;\n            }\n          }\n          break;\n        }\n      }\n\n      // Audio is only alternate if manifest include a URI along with the audio group tag,\n      // and this is not an audio-only stream where levels contain audio-only\n      var audioOnly = audioCodecFound && !videoCodecFound;\n      var config = this.hls.config;\n      var altAudioEnabled = !!(config.audioStreamController && config.audioTrackController);\n      var edata = {\n        levels: levels,\n        audioTracks: audioTracks,\n        subtitleTracks: subtitleTracks,\n        sessionData: data.sessionData,\n        sessionKeys: data.sessionKeys,\n        firstLevel: this._firstLevel,\n        stats: data.stats,\n        audio: audioCodecFound,\n        video: videoCodecFound,\n        altAudio: altAudioEnabled && !audioOnly && audioTracks.some(function (t) {\n          return !!t.url;\n        })\n      };\n      this.hls.trigger(Events.MANIFEST_PARSED, edata);\n    };\n    _proto.onError = function onError(event, data) {\n      if (data.fatal || !data.context) {\n        return;\n      }\n      if (data.context.type === PlaylistContextType.LEVEL && data.context.level === this.level) {\n        this.checkRetry(data);\n      }\n    }\n\n    // reset errors on the successful load of a fragment\n    ;\n    _proto.onFragBuffered = function onFragBuffered(event, _ref2) {\n      var frag = _ref2.frag;\n      if (frag !== undefined && frag.type === PlaylistLevelType.MAIN) {\n        var el = frag.elementaryStreams;\n        if (!Object.keys(el).some(function (type) {\n          return !!el[type];\n        })) {\n          return;\n        }\n        var level = this._levels[frag.level];\n        if (level != null && level.loadError) {\n          this.log(\"Resetting level error count of \" + level.loadError + \" on frag buffered\");\n          level.loadError = 0;\n        }\n      }\n    };\n    _proto.onLevelLoaded = function onLevelLoaded(event, data) {\n      var _data$deliveryDirecti2;\n      var level = data.level,\n        details = data.details;\n      var curLevel = data.levelInfo;\n      if (!curLevel) {\n        var _data$deliveryDirecti;\n        this.warn(\"Invalid level index \" + level);\n        if ((_data$deliveryDirecti = data.deliveryDirectives) != null && _data$deliveryDirecti.skip) {\n          details.deltaUpdateFailed = true;\n        }\n        return;\n      }\n\n      // only process level loaded events matching with expected level or prior to switch when media playlist is loaded directly\n      if (curLevel === this.currentLevel || data.withoutMultiVariant) {\n        // reset level load error counter on successful level loaded only if there is no issues with fragments\n        if (curLevel.fragmentError === 0) {\n          curLevel.loadError = 0;\n        }\n        // Ignore matching details populated by loading a Media Playlist directly\n        var previousDetails = curLevel.details;\n        if (previousDetails === data.details && previousDetails.advanced) {\n          previousDetails = undefined;\n        }\n        this.playlistLoaded(level, data, previousDetails);\n      } else if ((_data$deliveryDirecti2 = data.deliveryDirectives) != null && _data$deliveryDirecti2.skip) {\n        // received a delta playlist update that cannot be merged\n        details.deltaUpdateFailed = true;\n      }\n    };\n    _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {\n      _BasePlaylistControll.prototype.loadPlaylist.call(this);\n      if (this.shouldLoadPlaylist(this.currentLevel)) {\n        this.scheduleLoading(this.currentLevel, hlsUrlParameters);\n      }\n    };\n    _proto.loadingPlaylist = function loadingPlaylist(currentLevel, hlsUrlParameters) {\n      _BasePlaylistControll.prototype.loadingPlaylist.call(this, currentLevel, hlsUrlParameters);\n      var url = this.getUrlWithDirectives(currentLevel.uri, hlsUrlParameters);\n      var currentLevelIndex = this.currentLevelIndex;\n      var pathwayId = currentLevel.attrs['PATHWAY-ID'];\n      var details = currentLevel.details;\n      var age = details == null ? void 0 : details.age;\n      this.log(\"Loading level index \" + currentLevelIndex + ((hlsUrlParameters == null ? void 0 : hlsUrlParameters.msn) !== undefined ? ' at sn ' + hlsUrlParameters.msn + ' part ' + hlsUrlParameters.part : '') + (pathwayId ? ' Pathway ' + pathwayId : '') + (age && details.live ? ' age ' + age.toFixed(1) + (details.type ? ' ' + details.type || 0 : '') : '') + \" \" + url);\n      this.hls.trigger(Events.LEVEL_LOADING, {\n        url: url,\n        level: currentLevelIndex,\n        levelInfo: currentLevel,\n        pathwayId: currentLevel.attrs['PATHWAY-ID'],\n        id: 0,\n        // Deprecated Level urlId\n        deliveryDirectives: hlsUrlParameters || null\n      });\n    };\n    _proto.removeLevel = function removeLevel(levelIndex) {\n      var _this4 = this,\n        _this$currentLevel;\n      if (this._levels.length === 1) {\n        return;\n      }\n      var levels = this._levels.filter(function (level, index) {\n        if (index !== levelIndex) {\n          return true;\n        }\n        if (_this4.steering) {\n          _this4.steering.removeLevel(level);\n        }\n        if (level === _this4.currentLevel) {\n          _this4.currentLevel = null;\n          _this4.currentLevelIndex = -1;\n          if (level.details) {\n            level.details.fragments.forEach(function (f) {\n              return f.level = -1;\n            });\n          }\n        }\n        return false;\n      });\n      reassignFragmentLevelIndexes(levels);\n      this._levels = levels;\n      if (this.currentLevelIndex > -1 && (_this$currentLevel = this.currentLevel) != null && _this$currentLevel.details) {\n        this.currentLevelIndex = this.currentLevel.details.fragments[0].level;\n      }\n      if (this.manualLevelIndex > -1) {\n        this.manualLevelIndex = this.currentLevelIndex;\n      }\n      var maxLevel = levels.length - 1;\n      this._firstLevel = Math.min(this._firstLevel, maxLevel);\n      if (this._startLevel) {\n        this._startLevel = Math.min(this._startLevel, maxLevel);\n      }\n      this.hls.trigger(Events.LEVELS_UPDATED, {\n        levels: levels\n      });\n    };\n    _proto.onLevelsUpdated = function onLevelsUpdated(event, _ref3) {\n      var levels = _ref3.levels;\n      this._levels = levels;\n    };\n    _proto.checkMaxAutoUpdated = function checkMaxAutoUpdated() {\n      var _this$hls = this.hls,\n        autoLevelCapping = _this$hls.autoLevelCapping,\n        maxAutoLevel = _this$hls.maxAutoLevel,\n        maxHdcpLevel = _this$hls.maxHdcpLevel;\n      if (this._maxAutoLevel !== maxAutoLevel) {\n        this._maxAutoLevel = maxAutoLevel;\n        this.hls.trigger(Events.MAX_AUTO_LEVEL_UPDATED, {\n          autoLevelCapping: autoLevelCapping,\n          levels: this.levels,\n          maxAutoLevel: maxAutoLevel,\n          minAutoLevel: this.hls.minAutoLevel,\n          maxHdcpLevel: maxHdcpLevel\n        });\n      }\n    };\n    return _createClass(LevelController, [{\n      key: \"levels\",\n      get: function get() {\n        if (this._levels.length === 0) {\n          return null;\n        }\n        return this._levels;\n      }\n    }, {\n      key: \"loadLevelObj\",\n      get: function get() {\n        return this.currentLevel;\n      }\n    }, {\n      key: \"level\",\n      get: function get() {\n        return this.currentLevelIndex;\n      },\n      set: function set(newLevel) {\n        var levels = this._levels;\n        if (levels.length === 0) {\n          return;\n        }\n        // check if level idx is valid\n        if (newLevel < 0 || newLevel >= levels.length) {\n          // invalid level id given, trigger error\n          var error = new Error('invalid level idx');\n          var fatal = newLevel < 0;\n          this.hls.trigger(Events.ERROR, {\n            type: ErrorTypes.OTHER_ERROR,\n            details: ErrorDetails.LEVEL_SWITCH_ERROR,\n            level: newLevel,\n            fatal: fatal,\n            error: error,\n            reason: error.message\n          });\n          if (fatal) {\n            return;\n          }\n          newLevel = Math.min(newLevel, levels.length - 1);\n        }\n        var lastLevelIndex = this.currentLevelIndex;\n        var lastLevel = this.currentLevel;\n        var lastPathwayId = lastLevel ? lastLevel.attrs['PATHWAY-ID'] : undefined;\n        var level = levels[newLevel];\n        var pathwayId = level.attrs['PATHWAY-ID'];\n        this.currentLevelIndex = newLevel;\n        this.currentLevel = level;\n        if (lastLevelIndex === newLevel && lastLevel && lastPathwayId === pathwayId) {\n          return;\n        }\n        this.log(\"Switching to level \" + newLevel + \" (\" + (level.height ? level.height + 'p ' : '') + (level.videoRange ? level.videoRange + ' ' : '') + (level.codecSet ? level.codecSet + ' ' : '') + \"@\" + level.bitrate + \")\" + (pathwayId ? ' with Pathway ' + pathwayId : '') + \" from level \" + lastLevelIndex + (lastPathwayId ? ' with Pathway ' + lastPathwayId : ''));\n        var levelSwitchingData = {\n          level: newLevel,\n          attrs: level.attrs,\n          details: level.details,\n          bitrate: level.bitrate,\n          averageBitrate: level.averageBitrate,\n          maxBitrate: level.maxBitrate,\n          realBitrate: level.realBitrate,\n          width: level.width,\n          height: level.height,\n          codecSet: level.codecSet,\n          audioCodec: level.audioCodec,\n          videoCodec: level.videoCodec,\n          audioGroups: level.audioGroups,\n          subtitleGroups: level.subtitleGroups,\n          loaded: level.loaded,\n          loadError: level.loadError,\n          fragmentError: level.fragmentError,\n          name: level.name,\n          id: level.id,\n          uri: level.uri,\n          url: level.url,\n          urlId: 0,\n          audioGroupIds: level.audioGroupIds,\n          textGroupIds: level.textGroupIds\n        };\n        this.hls.trigger(Events.LEVEL_SWITCHING, levelSwitchingData);\n        // check if we need to load playlist for this level\n        var levelDetails = level.details;\n        if (!levelDetails || levelDetails.live) {\n          // level not retrieved yet, or live playlist we need to (re)load it\n          var hlsUrlParameters = this.switchParams(level.uri, lastLevel == null ? void 0 : lastLevel.details, levelDetails);\n          this.loadPlaylist(hlsUrlParameters);\n        }\n      }\n    }, {\n      key: \"manualLevel\",\n      get: function get() {\n        return this.manualLevelIndex;\n      },\n      set: function set(newLevel) {\n        this.manualLevelIndex = newLevel;\n        if (this._startLevel === undefined) {\n          this._startLevel = newLevel;\n        }\n        if (newLevel !== -1) {\n          this.level = newLevel;\n        }\n      }\n    }, {\n      key: \"firstLevel\",\n      get: function get() {\n        return this._firstLevel;\n      },\n      set: function set(newLevel) {\n        this._firstLevel = newLevel;\n      }\n    }, {\n      key: \"startLevel\",\n      get: function get() {\n        // Setting hls.startLevel (this._startLevel) overrides config.startLevel\n        if (this._startLevel === undefined) {\n          var configStartLevel = this.hls.config.startLevel;\n          if (configStartLevel !== undefined) {\n            return configStartLevel;\n          }\n          return this.hls.firstAutoLevel;\n        }\n        return this._startLevel;\n      },\n      set: function set(newLevel) {\n        this._startLevel = newLevel;\n      }\n    }, {\n      key: \"pathways\",\n      get: function get() {\n        if (this.steering) {\n          return this.steering.pathways();\n        }\n        return [];\n      }\n    }, {\n      key: \"pathwayPriority\",\n      get: function get() {\n        if (this.steering) {\n          return this.steering.pathwayPriority;\n        }\n        return null;\n      },\n      set: function set(pathwayPriority) {\n        if (this.steering) {\n          var pathwaysList = this.steering.pathways();\n          var filteredPathwayPriority = pathwayPriority.filter(function (pathwayId) {\n            return pathwaysList.indexOf(pathwayId) !== -1;\n          });\n          if (pathwayPriority.length < 1) {\n            this.warn(\"pathwayPriority \" + pathwayPriority + \" should contain at least one pathway from list: \" + pathwaysList);\n            return;\n          }\n          this.steering.pathwayPriority = filteredPathwayPriority;\n        }\n      }\n    }, {\n      key: \"nextLoadLevel\",\n      get: function get() {\n        if (this.manualLevelIndex !== -1) {\n          return this.manualLevelIndex;\n        } else {\n          return this.hls.nextAutoLevel;\n        }\n      },\n      set: function set(nextLevel) {\n        this.level = nextLevel;\n        if (this.manualLevelIndex === -1) {\n          this.hls.nextAutoLevel = nextLevel;\n        }\n      }\n    }]);\n  }(BasePlaylistController);\n  function assignTrackIdsByGroup(tracks) {\n    var groups = {};\n    tracks.forEach(function (track) {\n      var groupId = track.groupId || '';\n      track.id = groups[groupId] = groups[groupId] || 0;\n      groups[groupId]++;\n    });\n  }\n\n  function getSourceBuffer() {\n    return self.SourceBuffer || self.WebKitSourceBuffer;\n  }\n  function isMSESupported() {\n    var mediaSource = getMediaSource();\n    if (!mediaSource) {\n      return false;\n    }\n\n    // if SourceBuffer is exposed ensure its API is valid\n    // Older browsers do not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible\n    var sourceBuffer = getSourceBuffer();\n    return !sourceBuffer || sourceBuffer.prototype && typeof sourceBuffer.prototype.appendBuffer === 'function' && typeof sourceBuffer.prototype.remove === 'function';\n  }\n  function isSupported() {\n    if (!isMSESupported()) {\n      return false;\n    }\n    var mediaSource = getMediaSource();\n    return typeof (mediaSource == null ? void 0 : mediaSource.isTypeSupported) === 'function' && (['avc1.42E01E,mp4a.40.2', 'av01.0.01M.08', 'vp09.00.50.08'].some(function (codecsForVideoContainer) {\n      return mediaSource.isTypeSupported(mimeTypeForCodec(codecsForVideoContainer, 'video'));\n    }) || ['mp4a.40.2', 'fLaC'].some(function (codecForAudioContainer) {\n      return mediaSource.isTypeSupported(mimeTypeForCodec(codecForAudioContainer, 'audio'));\n    }));\n  }\n  function changeTypeSupported() {\n    var _sourceBuffer$prototy;\n    var sourceBuffer = getSourceBuffer();\n    return typeof (sourceBuffer == null ? void 0 : (_sourceBuffer$prototy = sourceBuffer.prototype) == null ? void 0 : _sourceBuffer$prototy.changeType) === 'function';\n  }\n\n  var TICK_INTERVAL = 100; // how often to tick in ms\n  var StreamController = /*#__PURE__*/function (_BaseStreamController) {\n    function StreamController(hls, fragmentTracker, keyLoader) {\n      var _this;\n      _this = _BaseStreamController.call(this, hls, fragmentTracker, keyLoader, 'stream-controller', PlaylistLevelType.MAIN) || this;\n      _this.audioCodecSwap = false;\n      _this.level = -1;\n      _this._forceStartLoad = false;\n      _this._hasEnoughToStart = false;\n      _this.altAudio = 0;\n      _this.audioOnly = false;\n      _this.fragPlaying = null;\n      _this.fragLastKbps = 0;\n      _this.couldBacktrack = false;\n      _this.backtrackFragment = null;\n      _this.audioCodecSwitch = false;\n      _this.videoBuffer = null;\n      _this.onMediaPlaying = function () {\n        // tick to speed up FRAG_CHANGED triggering\n        _this.tick();\n      };\n      _this.onMediaSeeked = function () {\n        var media = _this.media;\n        var currentTime = media ? media.currentTime : null;\n        if (currentTime === null || !isFiniteNumber(currentTime)) {\n          return;\n        }\n        _this.log(\"Media seeked to \" + currentTime.toFixed(3));\n\n        // If seeked was issued before buffer was appended do not tick immediately\n        if (!_this.getBufferedFrag(currentTime)) {\n          return;\n        }\n        var bufferInfo = _this.getFwdBufferInfoAtPos(media, currentTime, PlaylistLevelType.MAIN, 0);\n        if (bufferInfo === null || bufferInfo.len === 0) {\n          _this.warn(\"Main forward buffer length at \" + currentTime + \" on \\\"seeked\\\" event \" + (bufferInfo ? bufferInfo.len : 'empty') + \")\");\n          return;\n        }\n\n        // tick to speed up FRAG_CHANGED triggering\n        _this.tick();\n      };\n      _this.registerListeners();\n      return _this;\n    }\n    _inheritsLoose(StreamController, _BaseStreamController);\n    var _proto = StreamController.prototype;\n    _proto.registerListeners = function registerListeners() {\n      _BaseStreamController.prototype.registerListeners.call(this);\n      var hls = this.hls;\n      hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.on(Events.LEVEL_LOADING, this.onLevelLoading, this);\n      hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n      hls.on(Events.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);\n      hls.on(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n      hls.on(Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);\n      hls.on(Events.BUFFER_CREATED, this.onBufferCreated, this);\n      hls.on(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n      hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n      hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      _BaseStreamController.prototype.unregisterListeners.call(this);\n      var hls = this.hls;\n      hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n      hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n      hls.off(Events.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);\n      hls.off(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n      hls.off(Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);\n      hls.off(Events.BUFFER_CREATED, this.onBufferCreated, this);\n      hls.off(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n      hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n      hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n    };\n    _proto.onHandlerDestroying = function onHandlerDestroying() {\n      // @ts-ignore\n      this.onMediaPlaying = this.onMediaSeeked = null;\n      this.unregisterListeners();\n      _BaseStreamController.prototype.onHandlerDestroying.call(this);\n    };\n    _proto.startLoad = function startLoad(startPosition, skipSeekToStartPosition) {\n      if (this.levels) {\n        var lastCurrentTime = this.lastCurrentTime,\n          hls = this.hls;\n        this.stopLoad();\n        this.setInterval(TICK_INTERVAL);\n        this.level = -1;\n        if (!this.startFragRequested) {\n          // determine load level\n          var startLevel = hls.startLevel;\n          if (startLevel === -1) {\n            if (hls.config.testBandwidth && this.levels.length > 1) {\n              // -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level\n              startLevel = 0;\n              this.bitrateTest = true;\n            } else {\n              startLevel = hls.firstAutoLevel;\n            }\n          }\n          // set new level to playlist loader : this will trigger start level load\n          // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded\n          hls.nextLoadLevel = startLevel;\n          this.level = hls.loadLevel;\n          this._hasEnoughToStart = !!skipSeekToStartPosition;\n        }\n        // if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime\n        if (lastCurrentTime > 0 && startPosition === -1 && !skipSeekToStartPosition) {\n          this.log(\"Override startPosition with lastCurrentTime @\" + lastCurrentTime.toFixed(3));\n          startPosition = lastCurrentTime;\n        }\n        this.state = State.IDLE;\n        this.nextLoadPosition = this.lastCurrentTime = startPosition + this.timelineOffset;\n        this.startPosition = skipSeekToStartPosition ? -1 : startPosition;\n        this.tick();\n      } else {\n        this._forceStartLoad = true;\n        this.state = State.STOPPED;\n      }\n    };\n    _proto.stopLoad = function stopLoad() {\n      this._forceStartLoad = false;\n      _BaseStreamController.prototype.stopLoad.call(this);\n    };\n    _proto.doTick = function doTick() {\n      switch (this.state) {\n        case State.WAITING_LEVEL:\n          {\n            var levels = this.levels,\n              level = this.level;\n            var currentLevel = levels == null ? void 0 : levels[level];\n            var details = currentLevel == null ? void 0 : currentLevel.details;\n            if (details && (!details.live || this.levelLastLoaded === currentLevel && !this.waitForLive(currentLevel))) {\n              if (this.waitForCdnTuneIn(details)) {\n                break;\n              }\n              this.state = State.IDLE;\n              break;\n            } else if (this.hls.nextLoadLevel !== this.level) {\n              this.state = State.IDLE;\n              break;\n            }\n            break;\n          }\n        case State.FRAG_LOADING_WAITING_RETRY:\n          {\n            var _this$media;\n            var now = self.performance.now();\n            var retryDate = this.retryDate;\n            // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading\n            if (!retryDate || now >= retryDate || (_this$media = this.media) != null && _this$media.seeking) {\n              var _levels = this.levels,\n                _level = this.level;\n              var _currentLevel = _levels == null ? void 0 : _levels[_level];\n              this.resetStartWhenNotLoaded(_currentLevel || null);\n              this.state = State.IDLE;\n            }\n          }\n          break;\n      }\n      if (this.state === State.IDLE) {\n        this.doTickIdle();\n      }\n      this.onTickEnd();\n    };\n    _proto.onTickEnd = function onTickEnd() {\n      var _this$media2;\n      _BaseStreamController.prototype.onTickEnd.call(this);\n      if ((_this$media2 = this.media) != null && _this$media2.readyState && this.media.seeking === false) {\n        this.lastCurrentTime = this.media.currentTime;\n      }\n      this.checkFragmentChanged();\n    };\n    _proto.doTickIdle = function doTickIdle() {\n      var hls = this.hls,\n        levelLastLoaded = this.levelLastLoaded,\n        levels = this.levels,\n        media = this.media;\n\n      // if start level not parsed yet OR\n      // if video not attached AND start fragment already requested OR start frag prefetch not enabled\n      // exit loop, as we either need more info (level not parsed) or we need media to be attached to load new fragment\n      if (levelLastLoaded === null || !media && !this.primaryPrefetch && (this.startFragRequested || !hls.config.startFragPrefetch)) {\n        return;\n      }\n\n      // If the \"main\" level is audio-only but we are loading an alternate track in the same group, do not load anything\n      if (this.altAudio && this.audioOnly) {\n        return;\n      }\n      var level = this.buffering ? hls.nextLoadLevel : hls.loadLevel;\n      if (!(levels != null && levels[level])) {\n        return;\n      }\n      var levelInfo = levels[level];\n\n      // if buffer length is less than maxBufLen try to load a new fragment\n\n      var bufferInfo = this.getMainFwdBufferInfo();\n      if (bufferInfo === null) {\n        return;\n      }\n      var lastDetails = this.getLevelDetails();\n      if (lastDetails && this._streamEnded(bufferInfo, lastDetails)) {\n        var data = {};\n        if (this.altAudio === 2) {\n          data.type = 'video';\n        }\n        this.hls.trigger(Events.BUFFER_EOS, data);\n        this.state = State.ENDED;\n        return;\n      }\n      if (!this.buffering) {\n        return;\n      }\n\n      // set next load level : this will trigger a playlist load if needed\n      if (hls.loadLevel !== level && hls.manualLevel === -1) {\n        this.log(\"Adapting to level \" + level + \" from level \" + this.level);\n      }\n      this.level = hls.nextLoadLevel = level;\n      var levelDetails = levelInfo.details;\n      // if level info not retrieved yet, switch state and wait for level retrieval\n      // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load\n      // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)\n      if (!levelDetails || this.state === State.WAITING_LEVEL || this.waitForLive(levelInfo)) {\n        this.level = level;\n        this.state = State.WAITING_LEVEL;\n        this.startFragRequested = false;\n        return;\n      }\n      var bufferLen = bufferInfo.len;\n\n      // compute max Buffer Length that we could get from this load level, based on level bitrate. don't buffer more than 60 MB and more than 30s\n      var maxBufLen = this.getMaxBufferLength(levelInfo.maxBitrate);\n\n      // Stay idle if we are still with buffer margins\n      if (bufferLen >= maxBufLen) {\n        return;\n      }\n      if (this.backtrackFragment && this.backtrackFragment.start > bufferInfo.end) {\n        this.backtrackFragment = null;\n      }\n      var targetBufferTime = this.backtrackFragment ? this.backtrackFragment.start : bufferInfo.end;\n      var frag = this.getNextFragment(targetBufferTime, levelDetails);\n      // Avoid backtracking by loading an earlier segment in streams with segments that do not start with a key frame (flagged by `couldBacktrack`)\n      if (this.couldBacktrack && !this.fragPrevious && frag && isMediaFragment(frag) && this.fragmentTracker.getState(frag) !== FragmentState.OK) {\n        var _this$backtrackFragme;\n        var backtrackSn = ((_this$backtrackFragme = this.backtrackFragment) != null ? _this$backtrackFragme : frag).sn;\n        var fragIdx = backtrackSn - levelDetails.startSN;\n        var backtrackFrag = levelDetails.fragments[fragIdx - 1];\n        if (backtrackFrag && frag.cc === backtrackFrag.cc) {\n          frag = backtrackFrag;\n          this.fragmentTracker.removeFragment(backtrackFrag);\n        }\n      } else if (this.backtrackFragment && bufferInfo.len) {\n        this.backtrackFragment = null;\n      }\n      // Avoid loop loading by using nextLoadPosition set for backtracking and skipping consecutive GAP tags\n      if (frag && this.isLoopLoading(frag, targetBufferTime)) {\n        var gapStart = frag.gap;\n        if (!gapStart) {\n          // Cleanup the fragment tracker before trying to find the next unbuffered fragment\n          var type = this.audioOnly && !this.altAudio ? ElementaryStreamTypes.AUDIO : ElementaryStreamTypes.VIDEO;\n          var mediaBuffer = (type === ElementaryStreamTypes.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;\n          if (mediaBuffer) {\n            this.afterBufferFlushed(mediaBuffer, type, PlaylistLevelType.MAIN);\n          }\n        }\n        frag = this.getNextFragmentLoopLoading(frag, levelDetails, bufferInfo, PlaylistLevelType.MAIN, maxBufLen);\n      }\n      if (!frag) {\n        return;\n      }\n      if (frag.initSegment && !frag.initSegment.data && !this.bitrateTest) {\n        frag = frag.initSegment;\n      }\n      this.loadFragment(frag, levelInfo, targetBufferTime);\n    };\n    _proto.loadFragment = function loadFragment(frag, level, targetBufferTime) {\n      // Check if fragment is not loaded\n      var fragState = this.fragmentTracker.getState(frag);\n      if (fragState === FragmentState.NOT_LOADED || fragState === FragmentState.PARTIAL) {\n        if (!isMediaFragment(frag)) {\n          this._loadInitSegment(frag, level);\n        } else if (this.bitrateTest) {\n          this.log(\"Fragment \" + frag.sn + \" of level \" + frag.level + \" is being downloaded to test bitrate and will not be buffered\");\n          this._loadBitrateTestFrag(frag, level);\n        } else {\n          _BaseStreamController.prototype.loadFragment.call(this, frag, level, targetBufferTime);\n        }\n      } else {\n        this.clearTrackerIfNeeded(frag);\n      }\n    };\n    _proto.getBufferedFrag = function getBufferedFrag(position) {\n      return this.fragmentTracker.getBufferedFrag(position, PlaylistLevelType.MAIN);\n    };\n    _proto.followingBufferedFrag = function followingBufferedFrag(frag) {\n      if (frag) {\n        // try to get range of next fragment (500ms after this range)\n        return this.getBufferedFrag(frag.end + 0.5);\n      }\n      return null;\n    }\n\n    /*\n      on immediate level switch :\n       - pause playback if playing\n       - cancel any pending load request\n       - and trigger a buffer flush\n    */;\n    _proto.immediateLevelSwitch = function immediateLevelSwitch() {\n      this.abortCurrentFrag();\n      this.flushMainBuffer(0, Number.POSITIVE_INFINITY);\n    }\n\n    /**\n     * try to switch ASAP without breaking video playback:\n     * in order to ensure smooth but quick level switching,\n     * we need to find the next flushable buffer range\n     * we should take into account new segment fetch time\n     */;\n    _proto.nextLevelSwitch = function nextLevelSwitch() {\n      var levels = this.levels,\n        media = this.media;\n      // ensure that media is defined and that metadata are available (to retrieve currentTime)\n      if (media != null && media.readyState) {\n        var fetchdelay;\n        var fragPlayingCurrent = this.getAppendedFrag(media.currentTime);\n        if (fragPlayingCurrent && fragPlayingCurrent.start > 1) {\n          // flush buffer preceding current fragment (flush until current fragment start offset)\n          // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...\n          this.flushMainBuffer(0, fragPlayingCurrent.start - 1);\n        }\n        var levelDetails = this.getLevelDetails();\n        if (levelDetails != null && levelDetails.live) {\n          var bufferInfo = this.getMainFwdBufferInfo();\n          // Do not flush in live stream with low buffer\n          if (!bufferInfo || bufferInfo.len < levelDetails.targetduration * 2) {\n            return;\n          }\n        }\n        if (!media.paused && levels) {\n          // add a safety delay of 1s\n          var nextLevelId = this.hls.nextLoadLevel;\n          var nextLevel = levels[nextLevelId];\n          var fragLastKbps = this.fragLastKbps;\n          if (fragLastKbps && this.fragCurrent) {\n            fetchdelay = this.fragCurrent.duration * nextLevel.maxBitrate / (1000 * fragLastKbps) + 1;\n          } else {\n            fetchdelay = 0;\n          }\n        } else {\n          fetchdelay = 0;\n        }\n        // this.log('fetchdelay:'+fetchdelay);\n        // find buffer range that will be reached once new fragment will be fetched\n        var bufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);\n        if (bufferedFrag) {\n          // we can flush buffer range following this one without stalling playback\n          var nextBufferedFrag = this.followingBufferedFrag(bufferedFrag);\n          if (nextBufferedFrag) {\n            // if we are here, we can also cancel any loading/demuxing in progress, as they are useless\n            this.abortCurrentFrag();\n            // start flush position is in next buffered frag. Leave some padding for non-independent segments and smoother playback.\n            var maxStart = nextBufferedFrag.maxStartPTS ? nextBufferedFrag.maxStartPTS : nextBufferedFrag.start;\n            var fragDuration = nextBufferedFrag.duration;\n            var startPts = Math.max(bufferedFrag.end, maxStart + Math.min(Math.max(fragDuration - this.config.maxFragLookUpTolerance, fragDuration * (this.couldBacktrack ? 0.5 : 0.125)), fragDuration * (this.couldBacktrack ? 0.75 : 0.25)));\n            this.flushMainBuffer(startPts, Number.POSITIVE_INFINITY);\n          }\n        }\n      }\n    };\n    _proto.abortCurrentFrag = function abortCurrentFrag() {\n      var fragCurrent = this.fragCurrent;\n      this.fragCurrent = null;\n      this.backtrackFragment = null;\n      if (fragCurrent) {\n        fragCurrent.abortRequests();\n        this.fragmentTracker.removeFragment(fragCurrent);\n      }\n      switch (this.state) {\n        case State.KEY_LOADING:\n        case State.FRAG_LOADING:\n        case State.FRAG_LOADING_WAITING_RETRY:\n        case State.PARSING:\n        case State.PARSED:\n          this.state = State.IDLE;\n          break;\n      }\n      this.nextLoadPosition = this.getLoadPosition();\n    };\n    _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset) {\n      _BaseStreamController.prototype.flushMainBuffer.call(this, startOffset, endOffset, this.altAudio === 2 ? 'video' : null);\n    };\n    _proto.onMediaAttached = function onMediaAttached(event, data) {\n      _BaseStreamController.prototype.onMediaAttached.call(this, event, data);\n      var media = data.media;\n      addEventListener(media, 'playing', this.onMediaPlaying);\n      addEventListener(media, 'seeked', this.onMediaSeeked);\n    };\n    _proto.onMediaDetaching = function onMediaDetaching(event, data) {\n      var media = this.media;\n      if (media) {\n        removeEventListener(media, 'playing', this.onMediaPlaying);\n        removeEventListener(media, 'seeked', this.onMediaSeeked);\n      }\n      this.videoBuffer = null;\n      this.fragPlaying = null;\n      _BaseStreamController.prototype.onMediaDetaching.call(this, event, data);\n      var transferringMedia = !!data.transferMedia;\n      if (transferringMedia) {\n        return;\n      }\n      this._hasEnoughToStart = false;\n    };\n    _proto.onManifestLoading = function onManifestLoading() {\n      _BaseStreamController.prototype.onManifestLoading.call(this);\n      // reset buffer on manifest loading\n      this.log('Trigger BUFFER_RESET');\n      this.hls.trigger(Events.BUFFER_RESET, undefined);\n      this.couldBacktrack = false;\n      this.fragLastKbps = 0;\n      this.fragPlaying = this.backtrackFragment = null;\n      this.altAudio = 0;\n      this.audioOnly = false;\n    };\n    _proto.onManifestParsed = function onManifestParsed(event, data) {\n      // detect if we have different kind of audio codecs used amongst playlists\n      var aac = false;\n      var heaac = false;\n      data.levels.forEach(function (level) {\n        var codec = level.audioCodec;\n        if (codec) {\n          aac = aac || codec.indexOf('mp4a.40.2') !== -1;\n          heaac = heaac || codec.indexOf('mp4a.40.5') !== -1;\n        }\n      });\n      this.audioCodecSwitch = aac && heaac && !changeTypeSupported();\n      if (this.audioCodecSwitch) {\n        this.log('Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');\n      }\n      this.levels = data.levels;\n      this.startFragRequested = false;\n    };\n    _proto.onLevelLoading = function onLevelLoading(event, data) {\n      var levels = this.levels;\n      if (!levels || this.state !== State.IDLE) {\n        return;\n      }\n      var level = data.levelInfo;\n      if (!level.details || level.details.live && (this.levelLastLoaded !== level || level.details.expired) || this.waitForCdnTuneIn(level.details)) {\n        this.state = State.WAITING_LEVEL;\n      }\n    };\n    _proto.onLevelLoaded = function onLevelLoaded(event, data) {\n      var _curLevel$details;\n      var levels = this.levels,\n        startFragRequested = this.startFragRequested;\n      var newLevelId = data.level;\n      var newDetails = data.details;\n      var duration = newDetails.totalduration;\n      if (!levels) {\n        this.warn(\"Levels were reset while loading level \" + newLevelId);\n        return;\n      }\n      this.log(\"Level \" + newLevelId + \" loaded [\" + newDetails.startSN + \",\" + newDetails.endSN + \"]\" + (newDetails.lastPartSn ? \"[part-\" + newDetails.lastPartSn + \"-\" + newDetails.lastPartIndex + \"]\" : '') + \", cc [\" + newDetails.startCC + \", \" + newDetails.endCC + \"] duration:\" + duration);\n      var curLevel = data.levelInfo;\n      var fragCurrent = this.fragCurrent;\n      if (fragCurrent && (this.state === State.FRAG_LOADING || this.state === State.FRAG_LOADING_WAITING_RETRY)) {\n        if (fragCurrent.level !== data.level && fragCurrent.loader) {\n          this.abortCurrentFrag();\n        }\n      }\n      var sliding = 0;\n      if (newDetails.live || (_curLevel$details = curLevel.details) != null && _curLevel$details.live) {\n        var _this$levelLastLoaded;\n        this.checkLiveUpdate(newDetails);\n        if (newDetails.deltaUpdateFailed) {\n          return;\n        }\n        sliding = this.alignPlaylists(newDetails, curLevel.details, (_this$levelLastLoaded = this.levelLastLoaded) == null ? void 0 : _this$levelLastLoaded.details);\n      }\n      // override level info\n      curLevel.details = newDetails;\n      this.levelLastLoaded = curLevel;\n      if (!startFragRequested) {\n        this.setStartPosition(newDetails, sliding);\n      }\n      this.hls.trigger(Events.LEVEL_UPDATED, {\n        details: newDetails,\n        level: newLevelId\n      });\n\n      // only switch back to IDLE state if we were waiting for level to start downloading a new fragment\n      if (this.state === State.WAITING_LEVEL) {\n        if (this.waitForCdnTuneIn(newDetails)) {\n          // Wait for Low-Latency CDN Tune-in\n          return;\n        }\n        this.state = State.IDLE;\n      }\n      if (startFragRequested && newDetails.live) {\n        this.synchronizeToLiveEdge(newDetails);\n      }\n\n      // trigger handler right now\n      this.tick();\n    };\n    _proto.synchronizeToLiveEdge = function synchronizeToLiveEdge(levelDetails) {\n      var config = this.config,\n        media = this.media;\n      if (!media) {\n        return;\n      }\n      var liveSyncPosition = this.hls.liveSyncPosition;\n      var currentTime = this.getLoadPosition();\n      var start = levelDetails.fragmentStart;\n      var end = levelDetails.edge;\n      var withinSlidingWindow = currentTime >= start - config.maxFragLookUpTolerance && currentTime <= end;\n      // Continue if we can seek forward to sync position or if current time is outside of sliding window\n      if (liveSyncPosition !== null && media.duration > liveSyncPosition && (currentTime < liveSyncPosition || !withinSlidingWindow)) {\n        // Continue if buffer is starving or if current time is behind max latency\n        var maxLatency = config.liveMaxLatencyDuration !== undefined ? config.liveMaxLatencyDuration : config.liveMaxLatencyDurationCount * levelDetails.targetduration;\n        if (!withinSlidingWindow && media.readyState < 4 || currentTime < end - maxLatency) {\n          if (!this._hasEnoughToStart) {\n            this.nextLoadPosition = liveSyncPosition;\n          }\n          // Only seek if ready and there is not a significant forward buffer available for playback\n          if (media.readyState) {\n            this.warn(\"Playback: \" + currentTime.toFixed(3) + \" is located too far from the end of live sliding playlist: \" + end + \", reset currentTime to : \" + liveSyncPosition.toFixed(3));\n            if (this.config.liveSyncMode === 'buffered') {\n              var _bufferInfo$buffered;\n              var bufferInfo = BufferHelper.bufferInfo(media, liveSyncPosition, 0);\n              if (!(bufferInfo != null && (_bufferInfo$buffered = bufferInfo.buffered) != null && _bufferInfo$buffered.length)) {\n                media.currentTime = liveSyncPosition;\n                return;\n              }\n              var isLiveSyncInBuffer = bufferInfo.start <= currentTime;\n              if (isLiveSyncInBuffer) {\n                media.currentTime = liveSyncPosition;\n                return;\n              }\n              var _BufferHelper$buffere = BufferHelper.bufferedInfo(bufferInfo.buffered, currentTime, 0),\n                nextStart = _BufferHelper$buffere.nextStart;\n              if (nextStart) {\n                media.currentTime = nextStart;\n              }\n            } else {\n              media.currentTime = liveSyncPosition;\n            }\n          }\n        }\n      }\n    };\n    _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(data) {\n      var _frag$initSegment;\n      var frag = data.frag;\n      var part = data.part,\n        payload = data.payload;\n      var levels = this.levels;\n      if (!levels) {\n        this.warn(\"Levels were reset while fragment load was in progress. Fragment \" + frag.sn + \" of level \" + frag.level + \" will not be buffered\");\n        return;\n      }\n      var currentLevel = levels[frag.level];\n      if (!currentLevel) {\n        this.warn(\"Level \" + frag.level + \" not found on progress\");\n        return;\n      }\n      var details = currentLevel.details;\n      if (!details) {\n        this.warn(\"Dropping fragment \" + frag.sn + \" of level \" + frag.level + \" after level details were reset\");\n        this.fragmentTracker.removeFragment(frag);\n        return;\n      }\n      var videoCodec = currentLevel.videoCodec;\n\n      // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)\n      var accurateTimeOffset = details.PTSKnown || !details.live;\n      var initSegmentData = (_frag$initSegment = frag.initSegment) == null ? void 0 : _frag$initSegment.data;\n      var audioCodec = this._getAudioCodec(currentLevel);\n\n      // transmux the MPEG-TS data to ISO-BMFF segments\n      // this.log(`Transmuxing ${frag.sn} of [${details.startSN} ,${details.endSN}],level ${frag.level}, cc ${frag.cc}`);\n      var transmuxer = this.transmuxer = this.transmuxer || new TransmuxerInterface(this.hls, PlaylistLevelType.MAIN, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this));\n      var partIndex = part ? part.index : -1;\n      var partial = partIndex !== -1;\n      var chunkMeta = new ChunkMetadata(frag.level, frag.sn, frag.stats.chunkCount, payload.byteLength, partIndex, partial);\n      var initPTS = this.initPTS[frag.cc];\n      transmuxer.push(payload, initSegmentData, audioCodec, videoCodec, frag, part, details.totalduration, accurateTimeOffset, chunkMeta, initPTS);\n    };\n    _proto.onAudioTrackSwitching = function onAudioTrackSwitching(event, data) {\n      var _this2 = this;\n      var hls = this.hls;\n      // if any URL found on new audio track, it is an alternate audio track\n      var fromAltAudio = this.altAudio === 2;\n      var altAudio = useAlternateAudio(data.url, hls);\n      // if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered\n      // don't do anything if we switch to alt audio: audio stream controller is handling it.\n      // we will just have to change buffer scheduling on audioTrackSwitched\n      if (!altAudio) {\n        if (this.mediaBuffer !== this.media) {\n          this.log('Switching on main audio, use media.buffered to schedule main fragment loading');\n          this.mediaBuffer = this.media;\n          var fragCurrent = this.fragCurrent;\n          // we need to refill audio buffer from main: cancel any frag loading to speed up audio switch\n          if (fragCurrent) {\n            this.log('Switching to main audio track, cancel main fragment load');\n            fragCurrent.abortRequests();\n            this.fragmentTracker.removeFragment(fragCurrent);\n          }\n          // destroy transmuxer to force init segment generation (following audio switch)\n          this.resetTransmuxer();\n          // switch to IDLE state to load new fragment\n          this.resetLoadingState();\n        } else if (this.audioOnly) {\n          // Reset audio transmuxer so when switching back to main audio we're not still appending where we left off\n          this.resetTransmuxer();\n        }\n        // If switching from alt to main audio, flush all audio and trigger track switched\n        if (fromAltAudio) {\n          this.fragmentTracker.removeAllFragments();\n          hls.once(Events.BUFFER_FLUSHED, function () {\n            var _this2$hls;\n            (_this2$hls = _this2.hls) == null ? void 0 : _this2$hls.trigger(Events.AUDIO_TRACK_SWITCHED, data);\n          });\n          hls.trigger(Events.BUFFER_FLUSHING, {\n            startOffset: 0,\n            endOffset: Number.POSITIVE_INFINITY,\n            type: null\n          });\n          return;\n        }\n        hls.trigger(Events.AUDIO_TRACK_SWITCHED, data);\n      } else {\n        this.altAudio = 1;\n      }\n    };\n    _proto.onAudioTrackSwitched = function onAudioTrackSwitched(event, data) {\n      var altAudio = useAlternateAudio(data.url, this.hls);\n      if (altAudio) {\n        var videoBuffer = this.videoBuffer;\n        // if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered\n        if (videoBuffer && this.mediaBuffer !== videoBuffer) {\n          this.log('Switching on alternate audio, use video.buffered to schedule main fragment loading');\n          this.mediaBuffer = videoBuffer;\n        }\n      }\n      this.altAudio = altAudio ? 2 : 0;\n      this.tick();\n    };\n    _proto.onBufferCreated = function onBufferCreated(event, data) {\n      var tracks = data.tracks;\n      var mediaTrack;\n      var name;\n      var alternate = false;\n      for (var type in tracks) {\n        var track = tracks[type];\n        if (track.id === 'main') {\n          name = type;\n          mediaTrack = track;\n          // keep video source buffer reference\n          if (type === 'video') {\n            var videoTrack = tracks[type];\n            if (videoTrack) {\n              this.videoBuffer = videoTrack.buffer;\n            }\n          }\n        } else {\n          alternate = true;\n        }\n      }\n      if (alternate && mediaTrack) {\n        this.log(\"Alternate track found, use \" + name + \".buffered to schedule main fragment loading\");\n        this.mediaBuffer = mediaTrack.buffer;\n      } else {\n        this.mediaBuffer = this.media;\n      }\n    };\n    _proto.onFragBuffered = function onFragBuffered(event, data) {\n      var frag = data.frag,\n        part = data.part;\n      var bufferedMainFragment = frag.type === PlaylistLevelType.MAIN;\n      if (bufferedMainFragment) {\n        if (this.fragContextChanged(frag)) {\n          // If a level switch was requested while a fragment was buffering, it will emit the FRAG_BUFFERED event upon completion\n          // Avoid setting state back to IDLE, since that will interfere with a level switch\n          this.warn(\"Fragment \" + frag.sn + (part ? ' p: ' + part.index : '') + \" of level \" + frag.level + \" finished buffering, but was aborted. state: \" + this.state);\n          if (this.state === State.PARSED) {\n            this.state = State.IDLE;\n          }\n          return;\n        }\n        var stats = part ? part.stats : frag.stats;\n        this.fragLastKbps = Math.round(8 * stats.total / (stats.buffering.end - stats.loading.first));\n        if (isMediaFragment(frag)) {\n          this.fragPrevious = frag;\n        }\n        this.fragBufferedComplete(frag, part);\n      }\n      var media = this.media;\n      if (!media) {\n        return;\n      }\n      if (!this._hasEnoughToStart && BufferHelper.getBuffered(media).length) {\n        this._hasEnoughToStart = true;\n        this.seekToStartPos();\n      }\n      if (bufferedMainFragment) {\n        this.tick();\n      }\n    };\n    _proto.onError = function onError(event, data) {\n      var _data$context;\n      if (data.fatal) {\n        this.state = State.ERROR;\n        return;\n      }\n      switch (data.details) {\n        case ErrorDetails.FRAG_GAP:\n        case ErrorDetails.FRAG_PARSING_ERROR:\n        case ErrorDetails.FRAG_DECRYPT_ERROR:\n        case ErrorDetails.FRAG_LOAD_ERROR:\n        case ErrorDetails.FRAG_LOAD_TIMEOUT:\n        case ErrorDetails.KEY_LOAD_ERROR:\n        case ErrorDetails.KEY_LOAD_TIMEOUT:\n          this.onFragmentOrKeyLoadError(PlaylistLevelType.MAIN, data);\n          break;\n        case ErrorDetails.LEVEL_LOAD_ERROR:\n        case ErrorDetails.LEVEL_LOAD_TIMEOUT:\n        case ErrorDetails.LEVEL_PARSING_ERROR:\n          // in case of non fatal error while loading level, if level controller is not retrying to load level, switch back to IDLE\n          if (!data.levelRetry && this.state === State.WAITING_LEVEL && ((_data$context = data.context) == null ? void 0 : _data$context.type) === PlaylistContextType.LEVEL) {\n            this.state = State.IDLE;\n          }\n          break;\n        case ErrorDetails.BUFFER_ADD_CODEC_ERROR:\n        case ErrorDetails.BUFFER_APPEND_ERROR:\n          if (data.parent !== 'main') {\n            return;\n          }\n          this.resetLoadingState();\n          break;\n        case ErrorDetails.BUFFER_FULL_ERROR:\n          if (data.parent !== 'main') {\n            return;\n          }\n          if (this.reduceLengthAndFlushBuffer(data)) {\n            this.flushMainBuffer(0, Number.POSITIVE_INFINITY);\n          }\n          break;\n        case ErrorDetails.INTERNAL_EXCEPTION:\n          this.recoverWorkerError(data);\n          break;\n      }\n    };\n    _proto.onFragLoadEmergencyAborted = function onFragLoadEmergencyAborted() {\n      this.state = State.IDLE;\n      // if loadedmetadata is not set, it means that we are emergency switch down on first frag\n      // in that case, reset startFragRequested flag\n      if (!this._hasEnoughToStart) {\n        this.startFragRequested = false;\n        this.nextLoadPosition = this.lastCurrentTime;\n      }\n      this.tickImmediate();\n    };\n    _proto.onBufferFlushed = function onBufferFlushed(event, _ref) {\n      var type = _ref.type;\n      if (type !== ElementaryStreamTypes.AUDIO || !this.altAudio) {\n        var mediaBuffer = (type === ElementaryStreamTypes.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;\n        if (mediaBuffer) {\n          this.afterBufferFlushed(mediaBuffer, type, PlaylistLevelType.MAIN);\n          this.tick();\n        }\n      }\n    };\n    _proto.onLevelsUpdated = function onLevelsUpdated(event, data) {\n      if (this.level > -1 && this.fragCurrent) {\n        this.level = this.fragCurrent.level;\n        if (this.level === -1) {\n          this.resetWhenMissingContext(this.fragCurrent);\n        }\n      }\n      this.levels = data.levels;\n    };\n    _proto.swapAudioCodec = function swapAudioCodec() {\n      this.audioCodecSwap = !this.audioCodecSwap;\n    }\n\n    /**\n     * Seeks to the set startPosition if not equal to the mediaElement's current time.\n     */;\n    _proto.seekToStartPos = function seekToStartPos() {\n      var media = this.media;\n      if (!media) {\n        return;\n      }\n      var currentTime = media.currentTime;\n      var startPosition = this.startPosition;\n      // only adjust currentTime if different from startPosition or if startPosition not buffered\n      // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered\n      if (startPosition >= 0 && currentTime < startPosition) {\n        if (media.seeking) {\n          this.log(\"could not seek to \" + startPosition + \", already seeking at \" + currentTime);\n          return;\n        }\n\n        // Offset start position by timeline offset\n        var timelineOffset = this.timelineOffset;\n        if (timelineOffset && startPosition) {\n          startPosition += timelineOffset;\n        }\n        var details = this.getLevelDetails();\n        var buffered = BufferHelper.getBuffered(media);\n        var bufferStart = buffered.length ? buffered.start(0) : 0;\n        var delta = bufferStart - startPosition;\n        var skipTolerance = Math.max(this.config.maxBufferHole, this.config.maxFragLookUpTolerance);\n        if (this.config.startOnSegmentBoundary || delta > 0 && (delta < skipTolerance || this.loadingParts && delta < 2 * ((details == null ? void 0 : details.partTarget) || 0))) {\n          this.log(\"adjusting start position by \" + delta + \" to match buffer start\");\n          startPosition += delta;\n          this.startPosition = startPosition;\n        }\n        if (currentTime < startPosition) {\n          this.log(\"seek to target start position \" + startPosition + \" from current time \" + currentTime + \" buffer start \" + bufferStart);\n          media.currentTime = startPosition;\n        }\n      }\n    };\n    _proto._getAudioCodec = function _getAudioCodec(currentLevel) {\n      var audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;\n      if (this.audioCodecSwap && audioCodec) {\n        this.log('Swapping audio codec');\n        if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n          audioCodec = 'mp4a.40.2';\n        } else {\n          audioCodec = 'mp4a.40.5';\n        }\n      }\n      return audioCodec;\n    };\n    _proto._loadBitrateTestFrag = function _loadBitrateTestFrag(fragment, level) {\n      var _this3 = this;\n      fragment.bitrateTest = true;\n      this._doFragLoad(fragment, level).then(function (data) {\n        var hls = _this3.hls;\n        var frag = data == null ? void 0 : data.frag;\n        if (!frag || _this3.fragContextChanged(frag)) {\n          return;\n        }\n        level.fragmentError = 0;\n        _this3.state = State.IDLE;\n        _this3.startFragRequested = false;\n        _this3.bitrateTest = false;\n        var stats = frag.stats;\n        // Bitrate tests fragments are neither parsed nor buffered\n        stats.parsing.start = stats.parsing.end = stats.buffering.start = stats.buffering.end = self.performance.now();\n        hls.trigger(Events.FRAG_LOADED, data);\n        frag.bitrateTest = false;\n      });\n    };\n    _proto._handleTransmuxComplete = function _handleTransmuxComplete(transmuxResult) {\n      var _id3$samples;\n      var id = this.playlistType;\n      var hls = this.hls;\n      var remuxResult = transmuxResult.remuxResult,\n        chunkMeta = transmuxResult.chunkMeta;\n      var context = this.getCurrentContext(chunkMeta);\n      if (!context) {\n        this.resetWhenMissingContext(chunkMeta);\n        return;\n      }\n      var frag = context.frag,\n        part = context.part,\n        level = context.level;\n      var video = remuxResult.video,\n        text = remuxResult.text,\n        id3 = remuxResult.id3,\n        initSegment = remuxResult.initSegment;\n      var details = level.details;\n      // The audio-stream-controller handles audio buffering if Hls.js is playing an alternate audio track\n      var audio = this.altAudio ? undefined : remuxResult.audio;\n\n      // Check if the current fragment has been aborted. We check this by first seeing if we're still playing the current level.\n      // If we are, subsequently check if the currently loading fragment (fragCurrent) has changed.\n      if (this.fragContextChanged(frag)) {\n        this.fragmentTracker.removeFragment(frag);\n        return;\n      }\n      this.state = State.PARSING;\n      if (initSegment) {\n        if (initSegment != null && initSegment.tracks) {\n          var mapFragment = frag.initSegment || frag;\n          this._bufferInitSegment(level, initSegment.tracks, mapFragment, chunkMeta);\n          hls.trigger(Events.FRAG_PARSING_INIT_SEGMENT, {\n            frag: mapFragment,\n            id: id,\n            tracks: initSegment.tracks\n          });\n        }\n\n        // This would be nice if Number.isFinite acted as a typeguard, but it doesn't. See: https://github.com/Microsoft/TypeScript/issues/10038\n        var initPTS = initSegment.initPTS;\n        var timescale = initSegment.timescale;\n        if (isFiniteNumber(initPTS)) {\n          this.initPTS[frag.cc] = {\n            baseTime: initPTS,\n            timescale: timescale\n          };\n          hls.trigger(Events.INIT_PTS_FOUND, {\n            frag: frag,\n            id: id,\n            initPTS: initPTS,\n            timescale: timescale\n          });\n        }\n      }\n\n      // Avoid buffering if backtracking this fragment\n      if (video && details) {\n        if (audio && video.type === 'audiovideo') {\n          this.logMuxedErr(frag);\n        }\n        var prevFrag = details.fragments[frag.sn - 1 - details.startSN];\n        var isFirstFragment = frag.sn === details.startSN;\n        var isFirstInDiscontinuity = !prevFrag || frag.cc > prevFrag.cc;\n        if (remuxResult.independent !== false) {\n          var startPTS = video.startPTS,\n            endPTS = video.endPTS,\n            startDTS = video.startDTS,\n            endDTS = video.endDTS;\n          if (part) {\n            part.elementaryStreams[video.type] = {\n              startPTS: startPTS,\n              endPTS: endPTS,\n              startDTS: startDTS,\n              endDTS: endDTS\n            };\n          } else {\n            if (video.firstKeyFrame && video.independent && chunkMeta.id === 1 && !isFirstInDiscontinuity) {\n              this.couldBacktrack = true;\n            }\n            if (video.dropped && video.independent) {\n              // Backtrack if dropped frames create a gap after currentTime\n\n              var bufferInfo = this.getMainFwdBufferInfo();\n              var targetBufferTime = (bufferInfo ? bufferInfo.end : this.getLoadPosition()) + this.config.maxBufferHole;\n              var startTime = video.firstKeyFramePTS ? video.firstKeyFramePTS : startPTS;\n              if (!isFirstFragment && targetBufferTime < startTime - this.config.maxBufferHole && !isFirstInDiscontinuity) {\n                this.backtrack(frag);\n                return;\n              } else if (isFirstInDiscontinuity) {\n                // Mark segment with a gap to avoid loop loading\n                frag.gap = true;\n              }\n              // Set video stream start to fragment start so that truncated samples do not distort the timeline, and mark it partial\n              frag.setElementaryStreamInfo(video.type, frag.start, endPTS, frag.start, endDTS, true);\n            } else if (isFirstFragment && startPTS - (details.appliedTimelineOffset || 0) > MAX_START_GAP_JUMP) {\n              // Mark segment with a gap to skip large start gap\n              frag.gap = true;\n            }\n          }\n          frag.setElementaryStreamInfo(video.type, startPTS, endPTS, startDTS, endDTS);\n          if (this.backtrackFragment) {\n            this.backtrackFragment = frag;\n          }\n          this.bufferFragmentData(video, frag, part, chunkMeta, isFirstFragment || isFirstInDiscontinuity);\n        } else if (isFirstFragment || isFirstInDiscontinuity) {\n          // Mark segment with a gap to avoid loop loading\n          frag.gap = true;\n        } else {\n          this.backtrack(frag);\n          return;\n        }\n      }\n      if (audio) {\n        var _startPTS = audio.startPTS,\n          _endPTS = audio.endPTS,\n          _startDTS = audio.startDTS,\n          _endDTS = audio.endDTS;\n        if (part) {\n          part.elementaryStreams[ElementaryStreamTypes.AUDIO] = {\n            startPTS: _startPTS,\n            endPTS: _endPTS,\n            startDTS: _startDTS,\n            endDTS: _endDTS\n          };\n        }\n        frag.setElementaryStreamInfo(ElementaryStreamTypes.AUDIO, _startPTS, _endPTS, _startDTS, _endDTS);\n        this.bufferFragmentData(audio, frag, part, chunkMeta);\n      }\n      if (details && id3 != null && (_id3$samples = id3.samples) != null && _id3$samples.length) {\n        var emittedID3 = {\n          id: id,\n          frag: frag,\n          details: details,\n          samples: id3.samples\n        };\n        hls.trigger(Events.FRAG_PARSING_METADATA, emittedID3);\n      }\n      if (details && text) {\n        var emittedText = {\n          id: id,\n          frag: frag,\n          details: details,\n          samples: text.samples\n        };\n        hls.trigger(Events.FRAG_PARSING_USERDATA, emittedText);\n      }\n    };\n    _proto.logMuxedErr = function logMuxedErr(frag) {\n      this.warn((isMediaFragment(frag) ? 'Media' : 'Init') + \" segment with muxed audiovideo where only video expected: \" + frag.url);\n    };\n    _proto._bufferInitSegment = function _bufferInitSegment(currentLevel, tracks, frag, chunkMeta) {\n      var _this4 = this;\n      if (this.state !== State.PARSING) {\n        return;\n      }\n      this.audioOnly = !!tracks.audio && !tracks.video;\n\n      // if audio track is expected to come from audio stream controller, discard any coming from main\n      if (this.altAudio && !this.audioOnly) {\n        delete tracks.audio;\n        if (tracks.audiovideo) {\n          this.logMuxedErr(frag);\n        }\n      }\n      // include levelCodec in audio and video tracks\n      var audio = tracks.audio,\n        video = tracks.video,\n        audiovideo = tracks.audiovideo;\n      if (audio) {\n        var audioCodec = pickMostCompleteCodecName(audio.codec, currentLevel.audioCodec);\n        // Add level and profile to make up for passthrough-remuxer not being able to parse full codec\n        // (logger warning \"Unhandled audio codec...\")\n        if (audioCodec === 'mp4a') {\n          audioCodec = 'mp4a.40.5';\n        }\n        // Handle `audioCodecSwitch`\n        var ua = navigator.userAgent.toLowerCase();\n        if (this.audioCodecSwitch) {\n          if (audioCodec) {\n            if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n              audioCodec = 'mp4a.40.2';\n            } else {\n              audioCodec = 'mp4a.40.5';\n            }\n          }\n          // In the case that AAC and HE-AAC audio codecs are signalled in manifest,\n          // force HE-AAC, as it seems that most browsers prefers it.\n          // don't force HE-AAC if mono stream, or in Firefox\n          var audioMetadata = audio.metadata;\n          if (audioMetadata && 'channelCount' in audioMetadata && (audioMetadata.channelCount || 1) !== 1 && ua.indexOf('firefox') === -1) {\n            audioCodec = 'mp4a.40.5';\n          }\n        }\n        // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise\n        if (audioCodec && audioCodec.indexOf('mp4a.40.5') !== -1 && ua.indexOf('android') !== -1 && audio.container !== 'audio/mpeg') {\n          // Exclude mpeg audio\n          audioCodec = 'mp4a.40.2';\n          this.log(\"Android: force audio codec to \" + audioCodec);\n        }\n        if (currentLevel.audioCodec && currentLevel.audioCodec !== audioCodec) {\n          this.log(\"Swapping manifest audio codec \\\"\" + currentLevel.audioCodec + \"\\\" for \\\"\" + audioCodec + \"\\\"\");\n        }\n        audio.levelCodec = audioCodec;\n        audio.id = PlaylistLevelType.MAIN;\n        this.log(\"Init audio buffer, container:\" + audio.container + \", codecs[selected/level/parsed]=[\" + (audioCodec || '') + \"/\" + (currentLevel.audioCodec || '') + \"/\" + audio.codec + \"]\");\n        delete tracks.audiovideo;\n      }\n      if (video) {\n        video.levelCodec = currentLevel.videoCodec;\n        video.id = PlaylistLevelType.MAIN;\n        var parsedVideoCodec = video.codec;\n        if ((parsedVideoCodec == null ? void 0 : parsedVideoCodec.length) === 4) {\n          // Make up for passthrough-remuxer not being able to parse full codec\n          // (logger warning \"Unhandled video codec...\")\n          switch (parsedVideoCodec) {\n            case 'hvc1':\n            case 'hev1':\n              video.codec = 'hvc1.1.6.L120.90';\n              break;\n            case 'av01':\n              video.codec = 'av01.0.04M.08';\n              break;\n            case 'avc1':\n              video.codec = 'avc1.42e01e';\n              break;\n          }\n        }\n        this.log(\"Init video buffer, container:\" + video.container + \", codecs[level/parsed]=[\" + (currentLevel.videoCodec || '') + \"/\" + parsedVideoCodec + \"]\" + (video.codec !== parsedVideoCodec ? ' parsed-corrected=' + video.codec : '') + (video.supplemental ? ' supplemental=' + video.supplemental : ''));\n        delete tracks.audiovideo;\n      }\n      if (audiovideo) {\n        this.log(\"Init audiovideo buffer, container:\" + audiovideo.container + \", codecs[level/parsed]=[\" + currentLevel.codecs + \"/\" + audiovideo.codec + \"]\");\n        delete tracks.video;\n        delete tracks.audio;\n      }\n      var trackTypes = Object.keys(tracks);\n      if (trackTypes.length) {\n        this.hls.trigger(Events.BUFFER_CODECS, tracks);\n        if (!this.hls) {\n          // Exit after fatal tracks error\n          return;\n        }\n        // loop through tracks that are going to be provided to bufferController\n        trackTypes.forEach(function (trackName) {\n          var track = tracks[trackName];\n          var initSegment = track.initSegment;\n          if (initSegment != null && initSegment.byteLength) {\n            _this4.hls.trigger(Events.BUFFER_APPENDING, {\n              type: trackName,\n              data: initSegment,\n              frag: frag,\n              part: null,\n              chunkMeta: chunkMeta,\n              parent: frag.type\n            });\n          }\n        });\n      }\n      // trigger handler right now\n      this.tickImmediate();\n    };\n    _proto.getMainFwdBufferInfo = function getMainFwdBufferInfo() {\n      // Observe video SourceBuffer (this.mediaBuffer) only when alt-audio is used, otherwise observe combined media buffer\n      var bufferOutput = this.mediaBuffer && this.altAudio === 2 ? this.mediaBuffer : this.media;\n      return this.getFwdBufferInfo(bufferOutput, PlaylistLevelType.MAIN);\n    };\n    _proto.backtrack = function backtrack(frag) {\n      this.couldBacktrack = true;\n      // Causes findFragments to backtrack through fragments to find the keyframe\n      this.backtrackFragment = frag;\n      this.resetTransmuxer();\n      this.flushBufferGap(frag);\n      this.fragmentTracker.removeFragment(frag);\n      this.fragPrevious = null;\n      this.nextLoadPosition = frag.start;\n      this.state = State.IDLE;\n    };\n    _proto.checkFragmentChanged = function checkFragmentChanged() {\n      var video = this.media;\n      var fragPlayingCurrent = null;\n      if (video && video.readyState > 1 && video.seeking === false) {\n        var currentTime = video.currentTime;\n        /* if video element is in seeked state, currentTime can only increase.\n          (assuming that playback rate is positive ...)\n          As sometimes currentTime jumps back to zero after a\n          media decode error, check this, to avoid seeking back to\n          wrong position after a media decode error\n        */\n\n        if (BufferHelper.isBuffered(video, currentTime)) {\n          fragPlayingCurrent = this.getAppendedFrag(currentTime);\n        } else if (BufferHelper.isBuffered(video, currentTime + 0.1)) {\n          /* ensure that FRAG_CHANGED event is triggered at startup,\n            when first video frame is displayed and playback is paused.\n            add a tolerance of 100ms, in case current position is not buffered,\n            check if current pos+100ms is buffered and use that buffer range\n            for FRAG_CHANGED event reporting */\n          fragPlayingCurrent = this.getAppendedFrag(currentTime + 0.1);\n        }\n        if (fragPlayingCurrent) {\n          this.backtrackFragment = null;\n          var fragPlaying = this.fragPlaying;\n          var fragCurrentLevel = fragPlayingCurrent.level;\n          if (!fragPlaying || fragPlayingCurrent.sn !== fragPlaying.sn || fragPlaying.level !== fragCurrentLevel) {\n            this.fragPlaying = fragPlayingCurrent;\n            this.hls.trigger(Events.FRAG_CHANGED, {\n              frag: fragPlayingCurrent\n            });\n            if (!fragPlaying || fragPlaying.level !== fragCurrentLevel) {\n              this.hls.trigger(Events.LEVEL_SWITCHED, {\n                level: fragCurrentLevel\n              });\n            }\n          }\n        }\n      }\n    };\n    return _createClass(StreamController, [{\n      key: \"hasEnoughToStart\",\n      get: function get() {\n        return this._hasEnoughToStart;\n      }\n    }, {\n      key: \"maxBufferLength\",\n      get: function get() {\n        var levels = this.levels,\n          level = this.level;\n        var levelInfo = levels == null ? void 0 : levels[level];\n        if (!levelInfo) {\n          return this.config.maxBufferLength;\n        }\n        return this.getMaxBufferLength(levelInfo.maxBitrate);\n      }\n    }, {\n      key: \"nextLevel\",\n      get: function get() {\n        var frag = this.nextBufferedFrag;\n        if (frag) {\n          return frag.level;\n        }\n        return -1;\n      }\n    }, {\n      key: \"currentFrag\",\n      get: function get() {\n        var _this$media3;\n        if (this.fragPlaying) {\n          return this.fragPlaying;\n        }\n        var currentTime = ((_this$media3 = this.media) == null ? void 0 : _this$media3.currentTime) || this.lastCurrentTime;\n        if (isFiniteNumber(currentTime)) {\n          return this.getAppendedFrag(currentTime);\n        }\n        return null;\n      }\n    }, {\n      key: \"currentProgramDateTime\",\n      get: function get() {\n        var _this$media4;\n        var currentTime = ((_this$media4 = this.media) == null ? void 0 : _this$media4.currentTime) || this.lastCurrentTime;\n        if (isFiniteNumber(currentTime)) {\n          var details = this.getLevelDetails();\n          var frag = this.currentFrag || (details ? findFragmentByPTS(null, details.fragments, currentTime) : null);\n          if (frag) {\n            var programDateTime = frag.programDateTime;\n            if (programDateTime !== null) {\n              var epocMs = programDateTime + (currentTime - frag.start) * 1000;\n              return new Date(epocMs);\n            }\n          }\n        }\n        return null;\n      }\n    }, {\n      key: \"currentLevel\",\n      get: function get() {\n        var frag = this.currentFrag;\n        if (frag) {\n          return frag.level;\n        }\n        return -1;\n      }\n    }, {\n      key: \"nextBufferedFrag\",\n      get: function get() {\n        var frag = this.currentFrag;\n        if (frag) {\n          return this.followingBufferedFrag(frag);\n        }\n        return null;\n      }\n    }, {\n      key: \"forceStartLoad\",\n      get: function get() {\n        return this._forceStartLoad;\n      }\n    }]);\n  }(BaseStreamController);\n\n  var KeyLoader = /*#__PURE__*/function () {\n    function KeyLoader(config) {\n      this.config = void 0;\n      this.keyUriToKeyInfo = {};\n      this.emeController = null;\n      this.config = config;\n    }\n    var _proto = KeyLoader.prototype;\n    _proto.abort = function abort(type) {\n      for (var uri in this.keyUriToKeyInfo) {\n        var loader = this.keyUriToKeyInfo[uri].loader;\n        if (loader) {\n          var _loader$context;\n          if (type && type !== ((_loader$context = loader.context) == null ? void 0 : _loader$context.frag.type)) {\n            return;\n          }\n          loader.abort();\n        }\n      }\n    };\n    _proto.detach = function detach() {\n      for (var uri in this.keyUriToKeyInfo) {\n        var keyInfo = this.keyUriToKeyInfo[uri];\n        // Remove cached EME keys on detach\n        if (keyInfo.mediaKeySessionContext || keyInfo.decryptdata.isCommonEncryption) {\n          delete this.keyUriToKeyInfo[uri];\n        }\n      }\n    };\n    _proto.destroy = function destroy() {\n      this.detach();\n      for (var uri in this.keyUriToKeyInfo) {\n        var loader = this.keyUriToKeyInfo[uri].loader;\n        if (loader) {\n          loader.destroy();\n        }\n      }\n      this.keyUriToKeyInfo = {};\n    };\n    _proto.createKeyLoadError = function createKeyLoadError(frag, details, error, networkDetails, response) {\n      if (details === void 0) {\n        details = ErrorDetails.KEY_LOAD_ERROR;\n      }\n      return new LoadError({\n        type: ErrorTypes.NETWORK_ERROR,\n        details: details,\n        fatal: false,\n        frag: frag,\n        response: response,\n        error: error,\n        networkDetails: networkDetails\n      });\n    };\n    _proto.loadClear = function loadClear(loadingFrag, encryptedFragments) {\n      var _this = this;\n      if (this.emeController && this.config.emeEnabled && !this.emeController.getSelectedKeySystemFormats().length) {\n        // access key-system with nearest key on start (loading frag is unencrypted)\n        if (encryptedFragments.length) {\n          var sn = loadingFrag.sn,\n            cc = loadingFrag.cc;\n          var _loop = function _loop() {\n              var frag = encryptedFragments[i];\n              if (cc <= frag.cc && (sn === 'initSegment' || frag.sn === 'initSegment' || sn < frag.sn)) {\n                return {\n                  v: _this.emeController.selectKeySystemFormat(frag).then(function (keySystemFormat) {\n                    frag.setKeyFormat(keySystemFormat);\n                    if (_this.emeController && _this.config.requireKeySystemAccessOnStart) {\n                      var keySystem = keySystemFormatToKeySystemDomain(keySystemFormat);\n                      if (keySystem) {\n                        return _this.emeController.getKeySystemAccess([keySystem]);\n                      }\n                    }\n                  })\n                };\n              }\n            },\n            _ret;\n          for (var i = 0; i < encryptedFragments.length; i++) {\n            _ret = _loop();\n            if (_ret) return _ret.v;\n          }\n        } else if (this.config.requireKeySystemAccessOnStart) {\n          var keySystemsInConfig = getKeySystemsForConfig(this.config);\n          if (keySystemsInConfig.length) {\n            return this.emeController.getKeySystemAccess(keySystemsInConfig);\n          }\n        }\n      }\n      return null;\n    };\n    _proto.load = function load(frag) {\n      var _this2 = this;\n      if (!frag.decryptdata && frag.encrypted && this.emeController && this.config.emeEnabled) {\n        // Multiple keys, but none selected, resolve in eme-controller\n        return this.emeController.selectKeySystemFormat(frag).then(function (keySystemFormat) {\n          return _this2.loadInternal(frag, keySystemFormat);\n        });\n      }\n      return this.loadInternal(frag);\n    };\n    _proto.loadInternal = function loadInternal(frag, keySystemFormat) {\n      var _keyInfo, _keyInfo2;\n      if (keySystemFormat) {\n        frag.setKeyFormat(keySystemFormat);\n      }\n      var decryptdata = frag.decryptdata;\n      if (!decryptdata) {\n        var error = new Error(keySystemFormat ? \"Expected frag.decryptdata to be defined after setting format \" + keySystemFormat : 'Missing decryption data on fragment in onKeyLoading');\n        return Promise.reject(this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, error));\n      }\n      var uri = decryptdata.uri;\n      if (!uri) {\n        return Promise.reject(this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, new Error(\"Invalid key URI: \\\"\" + uri + \"\\\"\")));\n      }\n      var keyInfo = this.keyUriToKeyInfo[uri];\n      if ((_keyInfo = keyInfo) != null && _keyInfo.decryptdata.key) {\n        decryptdata.key = keyInfo.decryptdata.key;\n        return Promise.resolve({\n          frag: frag,\n          keyInfo: keyInfo\n        });\n      }\n      // Return key load promise as long as it does not have a mediakey session with an unusable key status\n      if ((_keyInfo2 = keyInfo) != null && _keyInfo2.keyLoadPromise) {\n        var _keyInfo$mediaKeySess;\n        switch ((_keyInfo$mediaKeySess = keyInfo.mediaKeySessionContext) == null ? void 0 : _keyInfo$mediaKeySess.keyStatus) {\n          case undefined:\n          case 'status-pending':\n          case 'usable':\n          case 'usable-in-future':\n            return keyInfo.keyLoadPromise.then(function (keyLoadedData) {\n              // Return the correct fragment with updated decryptdata key and loaded keyInfo\n              decryptdata.key = keyLoadedData.keyInfo.decryptdata.key;\n              return {\n                frag: frag,\n                keyInfo: keyInfo\n              };\n            });\n        }\n        // If we have a key session and status and it is not pending or usable, continue\n        // This will go back to the eme-controller for expired keys to get a new keyLoadPromise\n      }\n\n      // Load the key or return the loading promise\n      keyInfo = this.keyUriToKeyInfo[uri] = {\n        decryptdata: decryptdata,\n        keyLoadPromise: null,\n        loader: null,\n        mediaKeySessionContext: null\n      };\n      switch (decryptdata.method) {\n        case 'ISO-23001-7':\n        case 'SAMPLE-AES':\n        case 'SAMPLE-AES-CENC':\n        case 'SAMPLE-AES-CTR':\n          if (decryptdata.keyFormat === 'identity') {\n            // loadKeyHTTP handles http(s) and data URLs\n            return this.loadKeyHTTP(keyInfo, frag);\n          }\n          return this.loadKeyEME(keyInfo, frag);\n        case 'AES-128':\n        case 'AES-256':\n        case 'AES-256-CTR':\n          return this.loadKeyHTTP(keyInfo, frag);\n        default:\n          return Promise.reject(this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, new Error(\"Key supplied with unsupported METHOD: \\\"\" + decryptdata.method + \"\\\"\")));\n      }\n    };\n    _proto.loadKeyEME = function loadKeyEME(keyInfo, frag) {\n      var keyLoadedData = {\n        frag: frag,\n        keyInfo: keyInfo\n      };\n      if (this.emeController && this.config.emeEnabled) {\n        var keySessionContextPromise = this.emeController.loadKey(keyLoadedData);\n        if (keySessionContextPromise) {\n          return (keyInfo.keyLoadPromise = keySessionContextPromise.then(function (keySessionContext) {\n            keyInfo.mediaKeySessionContext = keySessionContext;\n            return keyLoadedData;\n          })).catch(function (error) {\n            // Remove promise for license renewal or retry\n            keyInfo.keyLoadPromise = null;\n            throw error;\n          });\n        }\n      }\n      return Promise.resolve(keyLoadedData);\n    };\n    _proto.loadKeyHTTP = function loadKeyHTTP(keyInfo, frag) {\n      var _this3 = this;\n      var config = this.config;\n      var Loader = config.loader;\n      var keyLoader = new Loader(config);\n      frag.keyLoader = keyInfo.loader = keyLoader;\n      return keyInfo.keyLoadPromise = new Promise(function (resolve, reject) {\n        var loaderContext = {\n          keyInfo: keyInfo,\n          frag: frag,\n          responseType: 'arraybuffer',\n          url: keyInfo.decryptdata.uri\n        };\n\n        // maxRetry is 0 so that instead of retrying the same key on the same variant multiple times,\n        // key-loader will trigger an error and rely on stream-controller to handle retry logic.\n        // this will also align retry logic with fragment-loader\n        var loadPolicy = config.keyLoadPolicy.default;\n        var loaderConfig = {\n          loadPolicy: loadPolicy,\n          timeout: loadPolicy.maxLoadTimeMs,\n          maxRetry: 0,\n          retryDelay: 0,\n          maxRetryDelay: 0\n        };\n        var loaderCallbacks = {\n          onSuccess: function onSuccess(response, stats, context, networkDetails) {\n            var frag = context.frag,\n              keyInfo = context.keyInfo,\n              uri = context.url;\n            if (!frag.decryptdata || keyInfo !== _this3.keyUriToKeyInfo[uri]) {\n              return reject(_this3.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, new Error('after key load, decryptdata unset or changed'), networkDetails));\n            }\n            keyInfo.decryptdata.key = frag.decryptdata.key = new Uint8Array(response.data);\n\n            // detach fragment key loader on load success\n            frag.keyLoader = null;\n            keyInfo.loader = null;\n            resolve({\n              frag: frag,\n              keyInfo: keyInfo\n            });\n          },\n          onError: function onError(response, context, networkDetails, stats) {\n            _this3.resetLoader(context);\n            reject(_this3.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, new Error(\"HTTP Error \" + response.code + \" loading key \" + response.text), networkDetails, _objectSpread2({\n              url: loaderContext.url,\n              data: undefined\n            }, response)));\n          },\n          onTimeout: function onTimeout(stats, context, networkDetails) {\n            _this3.resetLoader(context);\n            reject(_this3.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_TIMEOUT, new Error('key loading timed out'), networkDetails));\n          },\n          onAbort: function onAbort(stats, context, networkDetails) {\n            _this3.resetLoader(context);\n            reject(_this3.createKeyLoadError(frag, ErrorDetails.INTERNAL_ABORTED, new Error('key loading aborted'), networkDetails));\n          }\n        };\n        keyLoader.load(loaderContext, loaderConfig, loaderCallbacks);\n      });\n    };\n    _proto.resetLoader = function resetLoader(context) {\n      var frag = context.frag,\n        keyInfo = context.keyInfo,\n        uri = context.url;\n      var loader = keyInfo.loader;\n      if (frag.keyLoader === loader) {\n        frag.keyLoader = null;\n        keyInfo.loader = null;\n      }\n      delete this.keyUriToKeyInfo[uri];\n      if (loader) {\n        loader.destroy();\n      }\n    };\n    return KeyLoader;\n  }();\n\n  function mapContextToLevelType(context) {\n    var type = context.type;\n    switch (type) {\n      case PlaylistContextType.AUDIO_TRACK:\n        return PlaylistLevelType.AUDIO;\n      case PlaylistContextType.SUBTITLE_TRACK:\n        return PlaylistLevelType.SUBTITLE;\n      default:\n        return PlaylistLevelType.MAIN;\n    }\n  }\n  function getResponseUrl(response, context) {\n    var url = response.url;\n    // responseURL not supported on some browsers (it is used to detect URL redirection)\n    // data-uri mode also not supported (but no need to detect redirection)\n    if (url === undefined || url.indexOf('data:') === 0) {\n      // fallback to initial URL\n      url = context.url;\n    }\n    return url;\n  }\n  var PlaylistLoader = /*#__PURE__*/function () {\n    function PlaylistLoader(hls) {\n      this.hls = void 0;\n      this.loaders = Object.create(null);\n      this.variableList = null;\n      this.onManifestLoaded = this.checkAutostartLoad;\n      this.hls = hls;\n      this.registerListeners();\n    }\n    var _proto = PlaylistLoader.prototype;\n    _proto.startLoad = function startLoad(startPosition) {};\n    _proto.stopLoad = function stopLoad() {\n      this.destroyInternalLoaders();\n    };\n    _proto.registerListeners = function registerListeners() {\n      var hls = this.hls;\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.LEVEL_LOADING, this.onLevelLoading, this);\n      hls.on(Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);\n      hls.on(Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);\n      hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n    };\n    _proto.unregisterListeners = function unregisterListeners() {\n      var hls = this.hls;\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.LEVEL_LOADING, this.onLevelLoading, this);\n      hls.off(Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);\n      hls.off(Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);\n      hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n    }\n\n    /**\n     * Returns defaults or configured loader-type overloads (pLoader and loader config params)\n     */;\n    _proto.createInternalLoader = function createInternalLoader(context) {\n      var config = this.hls.config;\n      var PLoader = config.pLoader;\n      var Loader = config.loader;\n      var InternalLoader = PLoader || Loader;\n      var loader = new InternalLoader(config);\n      this.loaders[context.type] = loader;\n      return loader;\n    };\n    _proto.getInternalLoader = function getInternalLoader(context) {\n      return this.loaders[context.type];\n    };\n    _proto.resetInternalLoader = function resetInternalLoader(contextType) {\n      if (this.loaders[contextType]) {\n        delete this.loaders[contextType];\n      }\n    }\n\n    /**\n     * Call `destroy` on all internal loader instances mapped (one per context type)\n     */;\n    _proto.destroyInternalLoaders = function destroyInternalLoaders() {\n      for (var contextType in this.loaders) {\n        var loader = this.loaders[contextType];\n        if (loader) {\n          loader.destroy();\n        }\n        this.resetInternalLoader(contextType);\n      }\n    };\n    _proto.destroy = function destroy() {\n      this.variableList = null;\n      this.unregisterListeners();\n      this.destroyInternalLoaders();\n    };\n    _proto.onManifestLoading = function onManifestLoading(event, data) {\n      var url = data.url;\n      this.variableList = null;\n      this.load({\n        id: null,\n        level: 0,\n        responseType: 'text',\n        type: PlaylistContextType.MANIFEST,\n        url: url,\n        deliveryDirectives: null,\n        levelOrTrack: null\n      });\n    };\n    _proto.onLevelLoading = function onLevelLoading(event, data) {\n      var id = data.id,\n        level = data.level,\n        pathwayId = data.pathwayId,\n        url = data.url,\n        deliveryDirectives = data.deliveryDirectives,\n        levelInfo = data.levelInfo;\n      this.load({\n        id: id,\n        level: level,\n        pathwayId: pathwayId,\n        responseType: 'text',\n        type: PlaylistContextType.LEVEL,\n        url: url,\n        deliveryDirectives: deliveryDirectives,\n        levelOrTrack: levelInfo\n      });\n    };\n    _proto.onAudioTrackLoading = function onAudioTrackLoading(event, data) {\n      var id = data.id,\n        groupId = data.groupId,\n        url = data.url,\n        deliveryDirectives = data.deliveryDirectives,\n        track = data.track;\n      this.load({\n        id: id,\n        groupId: groupId,\n        level: null,\n        responseType: 'text',\n        type: PlaylistContextType.AUDIO_TRACK,\n        url: url,\n        deliveryDirectives: deliveryDirectives,\n        levelOrTrack: track\n      });\n    };\n    _proto.onSubtitleTrackLoading = function onSubtitleTrackLoading(event, data) {\n      var id = data.id,\n        groupId = data.groupId,\n        url = data.url,\n        deliveryDirectives = data.deliveryDirectives,\n        track = data.track;\n      this.load({\n        id: id,\n        groupId: groupId,\n        level: null,\n        responseType: 'text',\n        type: PlaylistContextType.SUBTITLE_TRACK,\n        url: url,\n        deliveryDirectives: deliveryDirectives,\n        levelOrTrack: track\n      });\n    };\n    _proto.onLevelsUpdated = function onLevelsUpdated(event, data) {\n      // abort and delete loader of removed levels\n      var loader = this.loaders[PlaylistContextType.LEVEL];\n      if (loader) {\n        var context = loader.context;\n        if (context && !data.levels.some(function (lvl) {\n          return lvl === context.levelOrTrack;\n        })) {\n          loader.abort();\n          delete this.loaders[PlaylistContextType.LEVEL];\n        }\n      }\n    };\n    _proto.load = function load(context) {\n      var _context$deliveryDire,\n        _this = this;\n      var config = this.hls.config;\n\n      // logger.debug(`[playlist-loader]: Loading playlist of type ${context.type}, level: ${context.level}, id: ${context.id}`);\n\n      // Check if a loader for this context already exists\n      var loader = this.getInternalLoader(context);\n      if (loader) {\n        var logger = this.hls.logger;\n        var loaderContext = loader.context;\n        if (loaderContext && loaderContext.levelOrTrack === context.levelOrTrack && (loaderContext.url === context.url || loaderContext.deliveryDirectives && !context.deliveryDirectives)) {\n          // same URL can't overlap, or wait for blocking request\n          if (loaderContext.url === context.url) {\n            logger.log(\"[playlist-loader]: ignore \" + context.url + \" ongoing request\");\n          } else {\n            logger.log(\"[playlist-loader]: ignore \" + context.url + \" in favor of \" + loaderContext.url);\n          }\n          return;\n        }\n        logger.log(\"[playlist-loader]: aborting previous loader for type: \" + context.type);\n        loader.abort();\n      }\n\n      // apply different configs for retries depending on\n      // context (manifest, level, audio/subs playlist)\n      var loadPolicy;\n      if (context.type === PlaylistContextType.MANIFEST) {\n        loadPolicy = config.manifestLoadPolicy.default;\n      } else {\n        loadPolicy = _extends({}, config.playlistLoadPolicy.default, {\n          timeoutRetry: null,\n          errorRetry: null\n        });\n      }\n      loader = this.createInternalLoader(context);\n\n      // Override level/track timeout for LL-HLS requests\n      // (the default of 10000ms is counter productive to blocking playlist reload requests)\n      if (isFiniteNumber((_context$deliveryDire = context.deliveryDirectives) == null ? void 0 : _context$deliveryDire.part)) {\n        var levelDetails;\n        if (context.type === PlaylistContextType.LEVEL && context.level !== null) {\n          levelDetails = this.hls.levels[context.level].details;\n        } else if (context.type === PlaylistContextType.AUDIO_TRACK && context.id !== null) {\n          levelDetails = this.hls.audioTracks[context.id].details;\n        } else if (context.type === PlaylistContextType.SUBTITLE_TRACK && context.id !== null) {\n          levelDetails = this.hls.subtitleTracks[context.id].details;\n        }\n        if (levelDetails) {\n          var partTarget = levelDetails.partTarget;\n          var targetDuration = levelDetails.targetduration;\n          if (partTarget && targetDuration) {\n            var maxLowLatencyPlaylistRefresh = Math.max(partTarget * 3, targetDuration * 0.8) * 1000;\n            loadPolicy = _extends({}, loadPolicy, {\n              maxTimeToFirstByteMs: Math.min(maxLowLatencyPlaylistRefresh, loadPolicy.maxTimeToFirstByteMs),\n              maxLoadTimeMs: Math.min(maxLowLatencyPlaylistRefresh, loadPolicy.maxTimeToFirstByteMs)\n            });\n          }\n        }\n      }\n      var legacyRetryCompatibility = loadPolicy.errorRetry || loadPolicy.timeoutRetry || {};\n      var loaderConfig = {\n        loadPolicy: loadPolicy,\n        timeout: loadPolicy.maxLoadTimeMs,\n        maxRetry: legacyRetryCompatibility.maxNumRetry || 0,\n        retryDelay: legacyRetryCompatibility.retryDelayMs || 0,\n        maxRetryDelay: legacyRetryCompatibility.maxRetryDelayMs || 0\n      };\n      var loaderCallbacks = {\n        onSuccess: function onSuccess(response, stats, context, networkDetails) {\n          var loader = _this.getInternalLoader(context);\n          _this.resetInternalLoader(context.type);\n          var string = response.data;\n\n          // Validate if it is an M3U8 at all\n          if (string.indexOf('#EXTM3U') !== 0) {\n            _this.handleManifestParsingError(response, context, new Error('no EXTM3U delimiter'), networkDetails || null, stats);\n            return;\n          }\n          stats.parsing.start = performance.now();\n          if (M3U8Parser.isMediaPlaylist(string) || context.type !== PlaylistContextType.MANIFEST) {\n            _this.handleTrackOrLevelPlaylist(response, stats, context, networkDetails || null, loader);\n          } else {\n            _this.handleMasterPlaylist(response, stats, context, networkDetails);\n          }\n        },\n        onError: function onError(response, context, networkDetails, stats) {\n          _this.handleNetworkError(context, networkDetails, false, response, stats);\n        },\n        onTimeout: function onTimeout(stats, context, networkDetails) {\n          _this.handleNetworkError(context, networkDetails, true, undefined, stats);\n        }\n      };\n\n      // logger.debug(`[playlist-loader]: Calling internal loader delegate for URL: ${context.url}`);\n\n      loader.load(context, loaderConfig, loaderCallbacks);\n    };\n    _proto.checkAutostartLoad = function checkAutostartLoad() {\n      if (!this.hls) {\n        return;\n      }\n      var _this$hls = this.hls,\n        _this$hls$config = _this$hls.config,\n        autoStartLoad = _this$hls$config.autoStartLoad,\n        startPosition = _this$hls$config.startPosition,\n        forceStartLoad = _this$hls.forceStartLoad;\n      if (autoStartLoad || forceStartLoad) {\n        this.hls.logger.log((autoStartLoad ? 'auto' : 'force') + \" startLoad with configured startPosition \" + startPosition);\n        this.hls.startLoad(startPosition);\n      }\n    };\n    _proto.handleMasterPlaylist = function handleMasterPlaylist(response, stats, context, networkDetails) {\n      var hls = this.hls;\n      var string = response.data;\n      var url = getResponseUrl(response, context);\n      var parsedResult = M3U8Parser.parseMasterPlaylist(string, url);\n      if (parsedResult.playlistParsingError) {\n        this.handleManifestParsingError(response, context, parsedResult.playlistParsingError, networkDetails, stats);\n        return;\n      }\n      var contentSteering = parsedResult.contentSteering,\n        levels = parsedResult.levels,\n        sessionData = parsedResult.sessionData,\n        sessionKeys = parsedResult.sessionKeys,\n        startTimeOffset = parsedResult.startTimeOffset,\n        variableList = parsedResult.variableList;\n      this.variableList = variableList;\n      var _M3U8Parser$parseMast = M3U8Parser.parseMasterPlaylistMedia(string, url, parsedResult),\n        _M3U8Parser$parseMast2 = _M3U8Parser$parseMast.AUDIO,\n        audioTracks = _M3U8Parser$parseMast2 === void 0 ? [] : _M3U8Parser$parseMast2,\n        subtitles = _M3U8Parser$parseMast.SUBTITLES,\n        captions = _M3U8Parser$parseMast['CLOSED-CAPTIONS'];\n      if (audioTracks.length) {\n        // check if we have found an audio track embedded in main playlist (audio track without URI attribute)\n        var embeddedAudioFound = audioTracks.some(function (audioTrack) {\n          return !audioTrack.url;\n        });\n\n        // if no embedded audio track defined, but audio codec signaled in quality level,\n        // we need to signal this main audio track this could happen with playlists with\n        // alt audio rendition in which quality levels (main)\n        // contains both audio+video. but with mixed audio track not signaled\n        if (!embeddedAudioFound && levels[0].audioCodec && !levels[0].attrs.AUDIO) {\n          this.hls.logger.log('[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one');\n          audioTracks.unshift({\n            type: 'main',\n            name: 'main',\n            groupId: 'main',\n            default: false,\n            autoselect: false,\n            forced: false,\n            id: -1,\n            attrs: new AttrList({}),\n            bitrate: 0,\n            url: ''\n          });\n        }\n      }\n      hls.trigger(Events.MANIFEST_LOADED, {\n        levels: levels,\n        audioTracks: audioTracks,\n        subtitles: subtitles,\n        captions: captions,\n        contentSteering: contentSteering,\n        url: url,\n        stats: stats,\n        networkDetails: networkDetails,\n        sessionData: sessionData,\n        sessionKeys: sessionKeys,\n        startTimeOffset: startTimeOffset,\n        variableList: variableList\n      });\n    };\n    _proto.handleTrackOrLevelPlaylist = function handleTrackOrLevelPlaylist(response, stats, context, networkDetails, loader) {\n      var hls = this.hls;\n      var id = context.id,\n        level = context.level,\n        type = context.type;\n      var url = getResponseUrl(response, context);\n      var levelId = isFiniteNumber(level) ? level : isFiniteNumber(id) ? id : 0;\n      var levelType = mapContextToLevelType(context);\n      var levelDetails = M3U8Parser.parseLevelPlaylist(response.data, url, levelId, levelType, 0, this.variableList);\n\n      // We have done our first request (Manifest-type) and receive\n      // not a master playlist but a chunk-list (track/level)\n      // We fire the manifest-loaded event anyway with the parsed level-details\n      // by creating a single-level structure for it.\n      if (type === PlaylistContextType.MANIFEST) {\n        var singleLevel = {\n          attrs: new AttrList({}),\n          bitrate: 0,\n          details: levelDetails,\n          name: '',\n          url: url\n        };\n        levelDetails.requestScheduled = stats.loading.start + computeReloadInterval(levelDetails, 0);\n        hls.trigger(Events.MANIFEST_LOADED, {\n          levels: [singleLevel],\n          audioTracks: [],\n          url: url,\n          stats: stats,\n          networkDetails: networkDetails,\n          sessionData: null,\n          sessionKeys: null,\n          contentSteering: null,\n          startTimeOffset: null,\n          variableList: null\n        });\n      }\n\n      // save parsing time\n      stats.parsing.end = performance.now();\n\n      // extend the context with the new levelDetails property\n      context.levelDetails = levelDetails;\n      this.handlePlaylistLoaded(levelDetails, response, stats, context, networkDetails, loader);\n    };\n    _proto.handleManifestParsingError = function handleManifestParsingError(response, context, error, networkDetails, stats) {\n      this.hls.trigger(Events.ERROR, {\n        type: ErrorTypes.NETWORK_ERROR,\n        details: ErrorDetails.MANIFEST_PARSING_ERROR,\n        fatal: context.type === PlaylistContextType.MANIFEST,\n        url: response.url,\n        err: error,\n        error: error,\n        reason: error.message,\n        response: response,\n        context: context,\n        networkDetails: networkDetails,\n        stats: stats\n      });\n    };\n    _proto.handleNetworkError = function handleNetworkError(context, networkDetails, timeout, response, stats) {\n      if (timeout === void 0) {\n        timeout = false;\n      }\n      var message = \"A network \" + (timeout ? 'timeout' : 'error' + (response ? ' (status ' + response.code + ')' : '')) + \" occurred while loading \" + context.type;\n      if (context.type === PlaylistContextType.LEVEL) {\n        message += \": \" + context.level + \" id: \" + context.id;\n      } else if (context.type === PlaylistContextType.AUDIO_TRACK || context.type === PlaylistContextType.SUBTITLE_TRACK) {\n        message += \" id: \" + context.id + \" group-id: \\\"\" + context.groupId + \"\\\"\";\n      }\n      var error = new Error(message);\n      this.hls.logger.warn(\"[playlist-loader]: \" + message);\n      var details = ErrorDetails.UNKNOWN;\n      var fatal = false;\n      var loader = this.getInternalLoader(context);\n      switch (context.type) {\n        case PlaylistContextType.MANIFEST:\n          details = timeout ? ErrorDetails.MANIFEST_LOAD_TIMEOUT : ErrorDetails.MANIFEST_LOAD_ERROR;\n          fatal = true;\n          break;\n        case PlaylistContextType.LEVEL:\n          details = timeout ? ErrorDetails.LEVEL_LOAD_TIMEOUT : ErrorDetails.LEVEL_LOAD_ERROR;\n          fatal = false;\n          break;\n        case PlaylistContextType.AUDIO_TRACK:\n          details = timeout ? ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT : ErrorDetails.AUDIO_TRACK_LOAD_ERROR;\n          fatal = false;\n          break;\n        case PlaylistContextType.SUBTITLE_TRACK:\n          details = timeout ? ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT : ErrorDetails.SUBTITLE_LOAD_ERROR;\n          fatal = false;\n          break;\n      }\n      if (loader) {\n        this.resetInternalLoader(context.type);\n      }\n      var errorData = {\n        type: ErrorTypes.NETWORK_ERROR,\n        details: details,\n        fatal: fatal,\n        url: context.url,\n        loader: loader,\n        context: context,\n        error: error,\n        networkDetails: networkDetails,\n        stats: stats\n      };\n      if (response) {\n        var url = (networkDetails == null ? void 0 : networkDetails.url) || context.url;\n        errorData.response = _objectSpread2({\n          url: url,\n          data: undefined\n        }, response);\n      }\n      this.hls.trigger(Events.ERROR, errorData);\n    };\n    _proto.handlePlaylistLoaded = function handlePlaylistLoaded(levelDetails, response, stats, context, networkDetails, loader) {\n      var hls = this.hls;\n      var type = context.type,\n        level = context.level,\n        id = context.id,\n        groupId = context.groupId,\n        deliveryDirectives = context.deliveryDirectives;\n      var url = getResponseUrl(response, context);\n      var parent = mapContextToLevelType(context);\n      var levelIndex = typeof context.level === 'number' && parent === PlaylistLevelType.MAIN ? level : undefined;\n      if (!levelDetails.fragments.length) {\n        var _error = levelDetails.playlistParsingError = new Error('No Segments found in Playlist');\n        hls.trigger(Events.ERROR, {\n          type: ErrorTypes.NETWORK_ERROR,\n          details: ErrorDetails.LEVEL_EMPTY_ERROR,\n          fatal: false,\n          url: url,\n          error: _error,\n          reason: _error.message,\n          response: response,\n          context: context,\n          level: levelIndex,\n          parent: parent,\n          networkDetails: networkDetails,\n          stats: stats\n        });\n        return;\n      }\n      if (!levelDetails.targetduration) {\n        levelDetails.playlistParsingError = new Error('Missing Target Duration');\n      }\n      var error = levelDetails.playlistParsingError;\n      if (error) {\n        this.hls.logger.warn(error);\n        if (!hls.config.ignorePlaylistParsingErrors) {\n          hls.trigger(Events.ERROR, {\n            type: ErrorTypes.NETWORK_ERROR,\n            details: ErrorDetails.LEVEL_PARSING_ERROR,\n            fatal: false,\n            url: url,\n            error: error,\n            reason: error.message,\n            response: response,\n            context: context,\n            level: levelIndex,\n            parent: parent,\n            networkDetails: networkDetails,\n            stats: stats\n          });\n          return;\n        }\n        levelDetails.playlistParsingError = null;\n      }\n      if (levelDetails.live && loader) {\n        if (loader.getCacheAge) {\n          levelDetails.ageHeader = loader.getCacheAge() || 0;\n        }\n        if (!loader.getCacheAge || isNaN(levelDetails.ageHeader)) {\n          levelDetails.ageHeader = 0;\n        }\n      }\n      switch (type) {\n        case PlaylistContextType.MANIFEST:\n        case PlaylistContextType.LEVEL:\n          hls.trigger(Events.LEVEL_LOADED, {\n            details: levelDetails,\n            levelInfo: context.levelOrTrack || hls.levels[0],\n            level: levelIndex || 0,\n            id: id || 0,\n            stats: stats,\n            networkDetails: networkDetails,\n            deliveryDirectives: deliveryDirectives,\n            withoutMultiVariant: type === PlaylistContextType.MANIFEST\n          });\n          break;\n        case PlaylistContextType.AUDIO_TRACK:\n          hls.trigger(Events.AUDIO_TRACK_LOADED, {\n            details: levelDetails,\n            track: context.levelOrTrack,\n            id: id || 0,\n            groupId: groupId || '',\n            stats: stats,\n            networkDetails: networkDetails,\n            deliveryDirectives: deliveryDirectives\n          });\n          break;\n        case PlaylistContextType.SUBTITLE_TRACK:\n          hls.trigger(Events.SUBTITLE_TRACK_LOADED, {\n            details: levelDetails,\n            track: context.levelOrTrack,\n            id: id || 0,\n            groupId: groupId || '',\n            stats: stats,\n            networkDetails: networkDetails,\n            deliveryDirectives: deliveryDirectives\n          });\n          break;\n      }\n    };\n    return PlaylistLoader;\n  }();\n\n  /**\n   * The `Hls` class is the core of the HLS.js library used to instantiate player instances.\n   * @public\n   */\n  var Hls = /*#__PURE__*/function () {\n    /**\n     * Creates an instance of an HLS client that can attach to exactly one `HTMLMediaElement`.\n     * @param userConfig - Configuration options applied over `Hls.DefaultConfig`\n     */\n    function Hls(userConfig) {\n      if (userConfig === void 0) {\n        userConfig = {};\n      }\n      /**\n       * The runtime configuration used by the player. At instantiation this is combination of `hls.userConfig` merged over `Hls.DefaultConfig`.\n       */\n      this.config = void 0;\n      /**\n       * The configuration object provided on player instantiation.\n       */\n      this.userConfig = void 0;\n      /**\n       * The logger functions used by this player instance, configured on player instantiation.\n       */\n      this.logger = void 0;\n      this.coreComponents = void 0;\n      this.networkControllers = void 0;\n      this._emitter = new EventEmitter();\n      this._autoLevelCapping = -1;\n      this._maxHdcpLevel = null;\n      this.abrController = void 0;\n      this.bufferController = void 0;\n      this.capLevelController = void 0;\n      this.latencyController = void 0;\n      this.levelController = void 0;\n      this.streamController = void 0;\n      this.audioStreamController = void 0;\n      this.subtititleStreamController = void 0;\n      this.audioTrackController = void 0;\n      this.subtitleTrackController = void 0;\n      this.interstitialsController = void 0;\n      this.gapController = void 0;\n      this.emeController = void 0;\n      this.cmcdController = void 0;\n      this._media = null;\n      this._url = null;\n      this._sessionId = void 0;\n      this.triggeringException = void 0;\n      this.started = false;\n      var logger = this.logger = enableLogs(userConfig.debug || false, 'Hls instance', userConfig.assetPlayerId);\n      var config = this.config = mergeConfig(Hls.DefaultConfig, userConfig, logger);\n      this.userConfig = userConfig;\n      if (config.progressive) {\n        enableStreamingMode(config, logger);\n      }\n\n      // core controllers and network loaders\n      var _AbrController = config.abrController,\n        _BufferController = config.bufferController,\n        _CapLevelController = config.capLevelController,\n        _ErrorController = config.errorController,\n        _FpsController = config.fpsController;\n      var errorController = new _ErrorController(this);\n      var abrController = this.abrController = new _AbrController(this);\n      // FragmentTracker must be defined before StreamController because the order of event handling is important\n      var fragmentTracker = new FragmentTracker(this);\n      var _InterstitialsController = config.interstitialsController;\n      var interstitialsController = _InterstitialsController ? this.interstitialsController = new _InterstitialsController(this, Hls) : null;\n      var bufferController = this.bufferController = new _BufferController(this, fragmentTracker);\n      var capLevelController = this.capLevelController = new _CapLevelController(this);\n      var fpsController = new _FpsController(this);\n      var playListLoader = new PlaylistLoader(this);\n      var _ContentSteeringController = config.contentSteeringController;\n      // Instantiate ConentSteeringController before LevelController to receive Multivariant Playlist events first\n      var contentSteering = _ContentSteeringController ? new _ContentSteeringController(this) : null;\n      var levelController = this.levelController = new LevelController(this, contentSteering);\n      var id3TrackController = new ID3TrackController(this);\n      var keyLoader = new KeyLoader(this.config);\n      var streamController = this.streamController = new StreamController(this, fragmentTracker, keyLoader);\n      var gapController = this.gapController = new GapController(this, fragmentTracker);\n\n      // Cap level controller uses streamController to flush the buffer\n      capLevelController.setStreamController(streamController);\n      // fpsController uses streamController to switch when frames are being dropped\n      fpsController.setStreamController(streamController);\n      var networkControllers = [playListLoader, levelController, streamController];\n      if (interstitialsController) {\n        networkControllers.splice(1, 0, interstitialsController);\n      }\n      if (contentSteering) {\n        networkControllers.splice(1, 0, contentSteering);\n      }\n      this.networkControllers = networkControllers;\n      var coreComponents = [abrController, bufferController, gapController, capLevelController, fpsController, id3TrackController, fragmentTracker];\n      this.audioTrackController = this.createController(config.audioTrackController, networkControllers);\n      var AudioStreamControllerClass = config.audioStreamController;\n      if (AudioStreamControllerClass) {\n        networkControllers.push(this.audioStreamController = new AudioStreamControllerClass(this, fragmentTracker, keyLoader));\n      }\n      // Instantiate subtitleTrackController before SubtitleStreamController to receive level events first\n      this.subtitleTrackController = this.createController(config.subtitleTrackController, networkControllers);\n      var SubtitleStreamControllerClass = config.subtitleStreamController;\n      if (SubtitleStreamControllerClass) {\n        networkControllers.push(this.subtititleStreamController = new SubtitleStreamControllerClass(this, fragmentTracker, keyLoader));\n      }\n      this.createController(config.timelineController, coreComponents);\n      keyLoader.emeController = this.emeController = this.createController(config.emeController, coreComponents);\n      this.cmcdController = this.createController(config.cmcdController, coreComponents);\n      this.latencyController = this.createController(LatencyController, coreComponents);\n      this.coreComponents = coreComponents;\n\n      // Error controller handles errors before and after all other controllers\n      // This listener will be invoked after all other controllers error listeners\n      networkControllers.push(errorController);\n      var onErrorOut = errorController.onErrorOut;\n      if (typeof onErrorOut === 'function') {\n        this.on(Events.ERROR, onErrorOut, errorController);\n      }\n      // Autostart load handler\n      this.on(Events.MANIFEST_LOADED, playListLoader.onManifestLoaded, playListLoader);\n    }\n    /**\n     * Check if the required MediaSource Extensions are available.\n     */\n    Hls.isMSESupported = function isMSESupported$1() {\n      return isMSESupported();\n    }\n\n    /**\n     * Check if MediaSource Extensions are available and isTypeSupported checks pass for any baseline codecs.\n     */;\n    Hls.isSupported = function isSupported$1() {\n      return isSupported();\n    }\n\n    /**\n     * Get the MediaSource global used for MSE playback (ManagedMediaSource, MediaSource, or WebKitMediaSource).\n     */;\n    Hls.getMediaSource = function getMediaSource$1() {\n      return getMediaSource();\n    };\n    var _proto = Hls.prototype;\n    _proto.createController = function createController(ControllerClass, components) {\n      if (ControllerClass) {\n        var controllerInstance = new ControllerClass(this);\n        if (components) {\n          components.push(controllerInstance);\n        }\n        return controllerInstance;\n      }\n      return null;\n    }\n\n    // Delegate the EventEmitter through the public API of Hls.js\n    ;\n    _proto.on = function on(event, listener, context) {\n      if (context === void 0) {\n        context = this;\n      }\n      this._emitter.on(event, listener, context);\n    };\n    _proto.once = function once(event, listener, context) {\n      if (context === void 0) {\n        context = this;\n      }\n      this._emitter.once(event, listener, context);\n    };\n    _proto.removeAllListeners = function removeAllListeners(event) {\n      this._emitter.removeAllListeners(event);\n    };\n    _proto.off = function off(event, listener, context, once) {\n      if (context === void 0) {\n        context = this;\n      }\n      this._emitter.off(event, listener, context, once);\n    };\n    _proto.listeners = function listeners(event) {\n      return this._emitter.listeners(event);\n    };\n    _proto.emit = function emit(event, name, eventObject) {\n      return this._emitter.emit(event, name, eventObject);\n    };\n    _proto.trigger = function trigger(event, eventObject) {\n      if (this.config.debug) {\n        return this.emit(event, event, eventObject);\n      } else {\n        try {\n          return this.emit(event, event, eventObject);\n        } catch (error) {\n          this.logger.error('An internal error happened while handling event ' + event + '. Error message: \"' + error.message + '\". Here is a stacktrace:', error);\n          // Prevent recursion in error event handlers that throw #5497\n          if (!this.triggeringException) {\n            this.triggeringException = true;\n            var fatal = event === Events.ERROR;\n            this.trigger(Events.ERROR, {\n              type: ErrorTypes.OTHER_ERROR,\n              details: ErrorDetails.INTERNAL_EXCEPTION,\n              fatal: fatal,\n              event: event,\n              error: error\n            });\n            this.triggeringException = false;\n          }\n        }\n      }\n      return false;\n    };\n    _proto.listenerCount = function listenerCount(event) {\n      return this._emitter.listenerCount(event);\n    }\n\n    /**\n     * Dispose of the instance\n     */;\n    _proto.destroy = function destroy() {\n      this.logger.log('destroy');\n      this.trigger(Events.DESTROYING, undefined);\n      this.detachMedia();\n      this.removeAllListeners();\n      this._autoLevelCapping = -1;\n      this._url = null;\n      this.networkControllers.forEach(function (component) {\n        return component.destroy();\n      });\n      this.networkControllers.length = 0;\n      this.coreComponents.forEach(function (component) {\n        return component.destroy();\n      });\n      this.coreComponents.length = 0;\n      // Remove any references that could be held in config options or callbacks\n      var config = this.config;\n      config.xhrSetup = config.fetchSetup = undefined;\n      // @ts-ignore\n      this.userConfig = null;\n    }\n\n    /**\n     * Attaches Hls.js to a media element\n     */;\n    _proto.attachMedia = function attachMedia(data) {\n      if (!data || 'media' in data && !data.media) {\n        var error = new Error(\"attachMedia failed: invalid argument (\" + data + \")\");\n        this.trigger(Events.ERROR, {\n          type: ErrorTypes.OTHER_ERROR,\n          details: ErrorDetails.ATTACH_MEDIA_ERROR,\n          fatal: true,\n          error: error\n        });\n        return;\n      }\n      this.logger.log(\"attachMedia\");\n      if (this._media) {\n        this.logger.warn(\"media must be detached before attaching\");\n        this.detachMedia();\n      }\n      var attachMediaSource = 'media' in data;\n      var media = attachMediaSource ? data.media : data;\n      var attachingData = attachMediaSource ? data : {\n        media: media\n      };\n      this._media = media;\n      this.trigger(Events.MEDIA_ATTACHING, attachingData);\n    }\n\n    /**\n     * Detach Hls.js from the media\n     */;\n    _proto.detachMedia = function detachMedia() {\n      this.logger.log('detachMedia');\n      this.trigger(Events.MEDIA_DETACHING, {});\n      this._media = null;\n    }\n\n    /**\n     * Detach HTMLMediaElement, MediaSource, and SourceBuffers without reset, for attaching to another instance\n     */;\n    _proto.transferMedia = function transferMedia() {\n      this._media = null;\n      var transferMedia = this.bufferController.transferMedia();\n      this.trigger(Events.MEDIA_DETACHING, {\n        transferMedia: transferMedia\n      });\n      return transferMedia;\n    }\n\n    /**\n     * Set the source URL. Can be relative or absolute.\n     */;\n    _proto.loadSource = function loadSource(url) {\n      this.stopLoad();\n      var media = this.media;\n      var loadedSource = this._url;\n      var loadingSource = this._url = urlToolkitExports.buildAbsoluteURL(self.location.href, url, {\n        alwaysNormalize: true\n      });\n      this._autoLevelCapping = -1;\n      this._maxHdcpLevel = null;\n      this.logger.log(\"loadSource:\" + loadingSource);\n      if (media && loadedSource && (loadedSource !== loadingSource || this.bufferController.hasSourceTypes())) {\n        // Remove and re-create MediaSource\n        this.detachMedia();\n        this.attachMedia(media);\n      }\n      // when attaching to a source URL, trigger a playlist load\n      this.trigger(Events.MANIFEST_LOADING, {\n        url: url\n      });\n    }\n\n    /**\n     * Gets the currently loaded URL\n     */;\n    /**\n     * Start loading data from the stream source.\n     * Depending on default config, client starts loading automatically when a source is set.\n     *\n     * @param startPosition - Set the start position to stream from.\n     * Defaults to -1 (None: starts from earliest point)\n     */\n    _proto.startLoad = function startLoad(startPosition, skipSeekToStartPosition) {\n      if (startPosition === void 0) {\n        startPosition = -1;\n      }\n      this.logger.log(\"startLoad(\" + (startPosition + (skipSeekToStartPosition ? ', <skip seek to start>' : '')) + \")\");\n      this.started = true;\n      this.resumeBuffering();\n      for (var i = 0; i < this.networkControllers.length; i++) {\n        this.networkControllers[i].startLoad(startPosition, skipSeekToStartPosition);\n        if (!this.started || !this.networkControllers) {\n          break;\n        }\n      }\n    }\n\n    /**\n     * Stop loading of any stream data.\n     */;\n    _proto.stopLoad = function stopLoad() {\n      this.logger.log('stopLoad');\n      this.started = false;\n      for (var i = 0; i < this.networkControllers.length; i++) {\n        this.networkControllers[i].stopLoad();\n        if (this.started || !this.networkControllers) {\n          break;\n        }\n      }\n    }\n\n    /**\n     * Returns whether loading, toggled with `startLoad()` and `stopLoad()`, is active or not`.\n     */;\n    /**\n     * Resumes stream controller segment loading after `pauseBuffering` has been called.\n     */\n    _proto.resumeBuffering = function resumeBuffering() {\n      if (!this.bufferingEnabled) {\n        this.logger.log(\"resume buffering\");\n        this.networkControllers.forEach(function (controller) {\n          if (controller.resumeBuffering) {\n            controller.resumeBuffering();\n          }\n        });\n      }\n    }\n\n    /**\n     * Prevents stream controller from loading new segments until `resumeBuffering` is called.\n     * This allows for media buffering to be paused without interupting playlist loading.\n     */;\n    _proto.pauseBuffering = function pauseBuffering() {\n      if (this.bufferingEnabled) {\n        this.logger.log(\"pause buffering\");\n        this.networkControllers.forEach(function (controller) {\n          if (controller.pauseBuffering) {\n            controller.pauseBuffering();\n          }\n        });\n      }\n    };\n    /**\n     * Swap through possible audio codecs in the stream (for example to switch from stereo to 5.1)\n     */\n    _proto.swapAudioCodec = function swapAudioCodec() {\n      this.logger.log('swapAudioCodec');\n      this.streamController.swapAudioCodec();\n    }\n\n    /**\n     * When the media-element fails, this allows to detach and then re-attach it\n     * as one call (convenience method).\n     *\n     * Automatic recovery of media-errors by this process is configurable.\n     */;\n    _proto.recoverMediaError = function recoverMediaError() {\n      this.logger.log('recoverMediaError');\n      var media = this._media;\n      var time = media == null ? void 0 : media.currentTime;\n      this.detachMedia();\n      if (media) {\n        this.attachMedia(media);\n        if (time) {\n          this.startLoad(time);\n        }\n      }\n    };\n    _proto.removeLevel = function removeLevel(levelIndex) {\n      this.levelController.removeLevel(levelIndex);\n    }\n\n    /**\n     * @returns a UUID for this player instance\n     */;\n    /**\n     * Find and select the best matching audio track, making a level switch when a Group change is necessary.\n     * Updates `hls.config.audioPreference`. Returns the selected track, or null when no matching track is found.\n     */\n    _proto.setAudioOption = function setAudioOption(audioOption) {\n      var _this$audioTrackContr;\n      return ((_this$audioTrackContr = this.audioTrackController) == null ? void 0 : _this$audioTrackContr.setAudioOption(audioOption)) || null;\n    }\n    /**\n     * Find and select the best matching subtitle track, making a level switch when a Group change is necessary.\n     * Updates `hls.config.subtitlePreference`. Returns the selected track, or null when no matching track is found.\n     */;\n    _proto.setSubtitleOption = function setSubtitleOption(subtitleOption) {\n      var _this$subtitleTrackCo;\n      return ((_this$subtitleTrackCo = this.subtitleTrackController) == null ? void 0 : _this$subtitleTrackCo.setSubtitleOption(subtitleOption)) || null;\n    }\n\n    /**\n     * Get the complete list of audio tracks across all media groups\n     */;\n    /**\n     * returns mediaCapabilities.decodingInfo for a variant/rendition\n     */\n    _proto.getMediaDecodingInfo = function getMediaDecodingInfo(level, audioTracks) {\n      if (audioTracks === void 0) {\n        audioTracks = this.allAudioTracks;\n      }\n      var audioTracksByGroup = getAudioTracksByGroup(audioTracks);\n      return getMediaDecodingInfoPromise(level, audioTracksByGroup, navigator.mediaCapabilities);\n    };\n    return _createClass(Hls, [{\n      key: \"url\",\n      get: function get() {\n        return this._url;\n      }\n\n      /**\n       * Whether or not enough has been buffered to seek to start position or use `media.currentTime` to determine next load position\n       */\n    }, {\n      key: \"hasEnoughToStart\",\n      get: function get() {\n        return this.streamController.hasEnoughToStart;\n      }\n\n      /**\n       * Get the startPosition set on startLoad(position) or on autostart with config.startPosition\n       */\n    }, {\n      key: \"startPosition\",\n      get: function get() {\n        return this.streamController.startPositionValue;\n      }\n    }, {\n      key: \"loadingEnabled\",\n      get: function get() {\n        return this.started;\n      }\n\n      /**\n       * Returns state of fragment loading toggled by calling `pauseBuffering()` and `resumeBuffering()`.\n       */\n    }, {\n      key: \"bufferingEnabled\",\n      get: function get() {\n        return this.streamController.bufferingEnabled;\n      }\n    }, {\n      key: \"inFlightFragments\",\n      get: function get() {\n        var _inFlightData;\n        var inFlightData = (_inFlightData = {}, _inFlightData[PlaylistLevelType.MAIN] = this.streamController.inFlightFrag, _inFlightData);\n        if (this.audioStreamController) {\n          inFlightData[PlaylistLevelType.AUDIO] = this.audioStreamController.inFlightFrag;\n        }\n        if (this.subtititleStreamController) {\n          inFlightData[PlaylistLevelType.SUBTITLE] = this.subtititleStreamController.inFlightFrag;\n        }\n        return inFlightData;\n      }\n    }, {\n      key: \"sessionId\",\n      get: function get() {\n        var _sessionId = this._sessionId;\n        if (!_sessionId) {\n          _sessionId = this._sessionId = uuid();\n        }\n        return _sessionId;\n      }\n\n      /**\n       * @returns an array of levels (variants) sorted by HDCP-LEVEL, RESOLUTION (height), FRAME-RATE, CODECS, VIDEO-RANGE, and BANDWIDTH\n       */\n    }, {\n      key: \"levels\",\n      get: function get() {\n        var levels = this.levelController.levels;\n        return levels ? levels : [];\n      }\n\n      /**\n       * @returns LevelDetails of last loaded level (variant) or `null` prior to loading a media playlist.\n       */\n    }, {\n      key: \"latestLevelDetails\",\n      get: function get() {\n        return this.streamController.getLevelDetails() || null;\n      }\n\n      /**\n       * @returns Level object of selected level (variant) or `null` prior to selecting a level or once the level is removed.\n       */\n    }, {\n      key: \"loadLevelObj\",\n      get: function get() {\n        return this.levelController.loadLevelObj;\n      }\n\n      /**\n       * Index of quality level (variant) currently played\n       */\n    }, {\n      key: \"currentLevel\",\n      get: function get() {\n        return this.streamController.currentLevel;\n      }\n\n      /**\n       * Set quality level index immediately. This will flush the current buffer to replace the quality asap. That means playback will interrupt at least shortly to re-buffer and re-sync eventually. Set to -1 for automatic level selection.\n       */,\n      set: function set(newLevel) {\n        this.logger.log(\"set currentLevel:\" + newLevel);\n        this.levelController.manualLevel = newLevel;\n        this.streamController.immediateLevelSwitch();\n      }\n\n      /**\n       * Index of next quality level loaded as scheduled by stream controller.\n       */\n    }, {\n      key: \"nextLevel\",\n      get: function get() {\n        return this.streamController.nextLevel;\n      }\n\n      /**\n       * Set quality level index for next loaded data.\n       * This will switch the video quality asap, without interrupting playback.\n       * May abort current loading of data, and flush parts of buffer (outside currently played fragment region).\n       * @param newLevel - Pass -1 for automatic level selection\n       */,\n      set: function set(newLevel) {\n        this.logger.log(\"set nextLevel:\" + newLevel);\n        this.levelController.manualLevel = newLevel;\n        this.streamController.nextLevelSwitch();\n      }\n\n      /**\n       * Return the quality level of the currently or last (of none is loaded currently) segment\n       */\n    }, {\n      key: \"loadLevel\",\n      get: function get() {\n        return this.levelController.level;\n      }\n\n      /**\n       * Set quality level index for next loaded data in a conservative way.\n       * This will switch the quality without flushing, but interrupt current loading.\n       * Thus the moment when the quality switch will appear in effect will only be after the already existing buffer.\n       * @param newLevel - Pass -1 for automatic level selection\n       */,\n      set: function set(newLevel) {\n        this.logger.log(\"set loadLevel:\" + newLevel);\n        this.levelController.manualLevel = newLevel;\n      }\n\n      /**\n       * get next quality level loaded\n       */\n    }, {\n      key: \"nextLoadLevel\",\n      get: function get() {\n        return this.levelController.nextLoadLevel;\n      }\n\n      /**\n       * Set quality level of next loaded segment in a fully \"non-destructive\" way.\n       * Same as `loadLevel` but will wait for next switch (until current loading is done).\n       */,\n      set: function set(level) {\n        this.levelController.nextLoadLevel = level;\n      }\n\n      /**\n       * Return \"first level\": like a default level, if not set,\n       * falls back to index of first level referenced in manifest\n       */\n    }, {\n      key: \"firstLevel\",\n      get: function get() {\n        return Math.max(this.levelController.firstLevel, this.minAutoLevel);\n      }\n\n      /**\n       * Sets \"first-level\", see getter.\n       */,\n      set: function set(newLevel) {\n        this.logger.log(\"set firstLevel:\" + newLevel);\n        this.levelController.firstLevel = newLevel;\n      }\n\n      /**\n       * Return the desired start level for the first fragment that will be loaded.\n       * The default value of -1 indicates automatic start level selection.\n       * Setting hls.nextAutoLevel without setting a startLevel will result in\n       * the nextAutoLevel value being used for one fragment load.\n       */\n    }, {\n      key: \"startLevel\",\n      get: function get() {\n        var startLevel = this.levelController.startLevel;\n        if (startLevel === -1 && this.abrController.forcedAutoLevel > -1) {\n          return this.abrController.forcedAutoLevel;\n        }\n        return startLevel;\n      }\n\n      /**\n       * set  start level (level of first fragment that will be played back)\n       * if not overrided by user, first level appearing in manifest will be used as start level\n       * if -1 : automatic start level selection, playback will start from level matching download bandwidth\n       * (determined from download of first segment)\n       */,\n      set: function set(newLevel) {\n        this.logger.log(\"set startLevel:\" + newLevel);\n        // if not in automatic start level detection, ensure startLevel is greater than minAutoLevel\n        if (newLevel !== -1) {\n          newLevel = Math.max(newLevel, this.minAutoLevel);\n        }\n        this.levelController.startLevel = newLevel;\n      }\n\n      /**\n       * Whether level capping is enabled.\n       * Default value is set via `config.capLevelToPlayerSize`.\n       */\n    }, {\n      key: \"capLevelToPlayerSize\",\n      get: function get() {\n        return this.config.capLevelToPlayerSize;\n      }\n\n      /**\n       * Enables or disables level capping. If disabled after previously enabled, `nextLevelSwitch` will be immediately called.\n       */,\n      set: function set(shouldStartCapping) {\n        var newCapLevelToPlayerSize = !!shouldStartCapping;\n        if (newCapLevelToPlayerSize !== this.config.capLevelToPlayerSize) {\n          if (newCapLevelToPlayerSize) {\n            this.capLevelController.startCapping(); // If capping occurs, nextLevelSwitch will happen based on size.\n          } else {\n            this.capLevelController.stopCapping();\n            this.autoLevelCapping = -1;\n            this.streamController.nextLevelSwitch(); // Now we're uncapped, get the next level asap.\n          }\n          this.config.capLevelToPlayerSize = newCapLevelToPlayerSize;\n        }\n      }\n\n      /**\n       * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)\n       */\n    }, {\n      key: \"autoLevelCapping\",\n      get: function get() {\n        return this._autoLevelCapping;\n      }\n\n      /**\n       * Returns the current bandwidth estimate in bits per second, when available. Otherwise, `NaN` is returned.\n       */,\n      set:\n      /**\n       * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)\n       */\n      function set(newLevel) {\n        if (this._autoLevelCapping !== newLevel) {\n          this.logger.log(\"set autoLevelCapping:\" + newLevel);\n          this._autoLevelCapping = newLevel;\n          this.levelController.checkMaxAutoUpdated();\n        }\n      }\n    }, {\n      key: \"bandwidthEstimate\",\n      get: function get() {\n        var bwEstimator = this.abrController.bwEstimator;\n        if (!bwEstimator) {\n          return NaN;\n        }\n        return bwEstimator.getEstimate();\n      },\n      set: function set(abrEwmaDefaultEstimate) {\n        this.abrController.resetEstimator(abrEwmaDefaultEstimate);\n      }\n    }, {\n      key: \"abrEwmaDefaultEstimate\",\n      get: function get() {\n        var bwEstimator = this.abrController.bwEstimator;\n        if (!bwEstimator) {\n          return NaN;\n        }\n        return bwEstimator.defaultEstimate;\n      }\n\n      /**\n       * get time to first byte estimate\n       * @type {number}\n       */\n    }, {\n      key: \"ttfbEstimate\",\n      get: function get() {\n        var bwEstimator = this.abrController.bwEstimator;\n        if (!bwEstimator) {\n          return NaN;\n        }\n        return bwEstimator.getEstimateTTFB();\n      }\n    }, {\n      key: \"maxHdcpLevel\",\n      get: function get() {\n        return this._maxHdcpLevel;\n      },\n      set: function set(value) {\n        if (isHdcpLevel(value) && this._maxHdcpLevel !== value) {\n          this._maxHdcpLevel = value;\n          this.levelController.checkMaxAutoUpdated();\n        }\n      }\n\n      /**\n       * True when automatic level selection enabled\n       */\n    }, {\n      key: \"autoLevelEnabled\",\n      get: function get() {\n        return this.levelController.manualLevel === -1;\n      }\n\n      /**\n       * Level set manually (if any)\n       */\n    }, {\n      key: \"manualLevel\",\n      get: function get() {\n        return this.levelController.manualLevel;\n      }\n\n      /**\n       * min level selectable in auto mode according to config.minAutoBitrate\n       */\n    }, {\n      key: \"minAutoLevel\",\n      get: function get() {\n        var levels = this.levels,\n          minAutoBitrate = this.config.minAutoBitrate;\n        if (!levels) return 0;\n        var len = levels.length;\n        for (var i = 0; i < len; i++) {\n          if (levels[i].maxBitrate >= minAutoBitrate) {\n            return i;\n          }\n        }\n        return 0;\n      }\n\n      /**\n       * max level selectable in auto mode according to autoLevelCapping\n       */\n    }, {\n      key: \"maxAutoLevel\",\n      get: function get() {\n        var levels = this.levels,\n          autoLevelCapping = this.autoLevelCapping,\n          maxHdcpLevel = this.maxHdcpLevel;\n        var maxAutoLevel;\n        if (autoLevelCapping === -1 && levels != null && levels.length) {\n          maxAutoLevel = levels.length - 1;\n        } else {\n          maxAutoLevel = autoLevelCapping;\n        }\n        if (maxHdcpLevel) {\n          for (var i = maxAutoLevel; i--;) {\n            var hdcpLevel = levels[i].attrs['HDCP-LEVEL'];\n            if (hdcpLevel && hdcpLevel <= maxHdcpLevel) {\n              return i;\n            }\n          }\n        }\n        return maxAutoLevel;\n      }\n    }, {\n      key: \"firstAutoLevel\",\n      get: function get() {\n        return this.abrController.firstAutoLevel;\n      }\n\n      /**\n       * next automatically selected quality level\n       */\n    }, {\n      key: \"nextAutoLevel\",\n      get: function get() {\n        return this.abrController.nextAutoLevel;\n      }\n\n      /**\n       * this setter is used to force next auto level.\n       * this is useful to force a switch down in auto mode:\n       * in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)\n       * forced value is valid for one fragment. upon successful frag loading at forced level,\n       * this value will be resetted to -1 by ABR controller.\n       */,\n      set: function set(nextLevel) {\n        this.abrController.nextAutoLevel = nextLevel;\n      }\n\n      /**\n       * get the datetime value relative to media.currentTime for the active level Program Date Time if present\n       */\n    }, {\n      key: \"playingDate\",\n      get: function get() {\n        return this.streamController.currentProgramDateTime;\n      }\n    }, {\n      key: \"mainForwardBufferInfo\",\n      get: function get() {\n        return this.streamController.getMainFwdBufferInfo();\n      }\n    }, {\n      key: \"maxBufferLength\",\n      get: function get() {\n        return this.streamController.maxBufferLength;\n      }\n    }, {\n      key: \"allAudioTracks\",\n      get: function get() {\n        var audioTrackController = this.audioTrackController;\n        return audioTrackController ? audioTrackController.allAudioTracks : [];\n      }\n\n      /**\n       * Get the list of selectable audio tracks\n       */\n    }, {\n      key: \"audioTracks\",\n      get: function get() {\n        var audioTrackController = this.audioTrackController;\n        return audioTrackController ? audioTrackController.audioTracks : [];\n      }\n\n      /**\n       * index of the selected audio track (index in audio track lists)\n       */\n    }, {\n      key: \"audioTrack\",\n      get: function get() {\n        var audioTrackController = this.audioTrackController;\n        return audioTrackController ? audioTrackController.audioTrack : -1;\n      }\n\n      /**\n       * selects an audio track, based on its index in audio track lists\n       */,\n      set: function set(audioTrackId) {\n        var audioTrackController = this.audioTrackController;\n        if (audioTrackController) {\n          audioTrackController.audioTrack = audioTrackId;\n        }\n      }\n\n      /**\n       * get the complete list of subtitle tracks across all media groups\n       */\n    }, {\n      key: \"allSubtitleTracks\",\n      get: function get() {\n        var subtitleTrackController = this.subtitleTrackController;\n        return subtitleTrackController ? subtitleTrackController.allSubtitleTracks : [];\n      }\n\n      /**\n       * get alternate subtitle tracks list from playlist\n       */\n    }, {\n      key: \"subtitleTracks\",\n      get: function get() {\n        var subtitleTrackController = this.subtitleTrackController;\n        return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];\n      }\n\n      /**\n       * index of the selected subtitle track (index in subtitle track lists)\n       */\n    }, {\n      key: \"subtitleTrack\",\n      get: function get() {\n        var subtitleTrackController = this.subtitleTrackController;\n        return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;\n      },\n      set:\n      /**\n       * select an subtitle track, based on its index in subtitle track lists\n       */\n      function set(subtitleTrackId) {\n        var subtitleTrackController = this.subtitleTrackController;\n        if (subtitleTrackController) {\n          subtitleTrackController.subtitleTrack = subtitleTrackId;\n        }\n      }\n\n      /**\n       * Whether subtitle display is enabled or not\n       */\n    }, {\n      key: \"media\",\n      get: function get() {\n        return this._media;\n      }\n    }, {\n      key: \"subtitleDisplay\",\n      get: function get() {\n        var subtitleTrackController = this.subtitleTrackController;\n        return subtitleTrackController ? subtitleTrackController.subtitleDisplay : false;\n      }\n\n      /**\n       * Enable/disable subtitle display rendering\n       */,\n      set: function set(value) {\n        var subtitleTrackController = this.subtitleTrackController;\n        if (subtitleTrackController) {\n          subtitleTrackController.subtitleDisplay = value;\n        }\n      }\n\n      /**\n       * get mode for Low-Latency HLS loading\n       */\n    }, {\n      key: \"lowLatencyMode\",\n      get: function get() {\n        return this.config.lowLatencyMode;\n      }\n\n      /**\n       * Enable/disable Low-Latency HLS part playlist and segment loading, and start live streams at playlist PART-HOLD-BACK rather than HOLD-BACK.\n       */,\n      set: function set(mode) {\n        this.config.lowLatencyMode = mode;\n      }\n\n      /**\n       * Position (in seconds) of live sync point (ie edge of live position minus safety delay defined by ```hls.config.liveSyncDuration```)\n       * @returns null prior to loading live Playlist\n       */\n    }, {\n      key: \"liveSyncPosition\",\n      get: function get() {\n        return this.latencyController.liveSyncPosition;\n      }\n\n      /**\n       * Estimated position (in seconds) of live edge (ie edge of live playlist plus time sync playlist advanced)\n       * @returns 0 before first playlist is loaded\n       */\n    }, {\n      key: \"latency\",\n      get: function get() {\n        return this.latencyController.latency;\n      }\n\n      /**\n       * maximum distance from the edge before the player seeks forward to ```hls.liveSyncPosition```\n       * configured using ```liveMaxLatencyDurationCount``` (multiple of target duration) or ```liveMaxLatencyDuration```\n       * @returns 0 before first playlist is loaded\n       */\n    }, {\n      key: \"maxLatency\",\n      get: function get() {\n        return this.latencyController.maxLatency;\n      }\n\n      /**\n       * target distance from the edge as calculated by the latency controller\n       */\n    }, {\n      key: \"targetLatency\",\n      get: function get() {\n        return this.latencyController.targetLatency;\n      },\n      set: function set(latency) {\n        this.latencyController.targetLatency = latency;\n      }\n\n      /**\n       * the rate at which the edge of the current live playlist is advancing or 1 if there is none\n       */\n    }, {\n      key: \"drift\",\n      get: function get() {\n        return this.latencyController.drift;\n      }\n\n      /**\n       * set to true when startLoad is called before MANIFEST_PARSED event\n       */\n    }, {\n      key: \"forceStartLoad\",\n      get: function get() {\n        return this.streamController.forceStartLoad;\n      }\n\n      /**\n       * ContentSteering pathways getter\n       */\n    }, {\n      key: \"pathways\",\n      get: function get() {\n        return this.levelController.pathways;\n      }\n\n      /**\n       * ContentSteering pathwayPriority getter/setter\n       */\n    }, {\n      key: \"pathwayPriority\",\n      get: function get() {\n        return this.levelController.pathwayPriority;\n      },\n      set: function set(pathwayPriority) {\n        this.levelController.pathwayPriority = pathwayPriority;\n      }\n\n      /**\n       * returns true when all SourceBuffers are buffered to the end\n       */\n    }, {\n      key: \"bufferedToEnd\",\n      get: function get() {\n        var _this$bufferControlle;\n        return !!((_this$bufferControlle = this.bufferController) != null && _this$bufferControlle.bufferedToEnd);\n      }\n\n      /**\n       * returns Interstitials Program Manager\n       */\n    }, {\n      key: \"interstitialsManager\",\n      get: function get() {\n        var _this$interstitialsCo;\n        return ((_this$interstitialsCo = this.interstitialsController) == null ? void 0 : _this$interstitialsCo.interstitialsManager) || null;\n      }\n    }], [{\n      key: \"version\",\n      get:\n      /**\n       * Get the video-dev/hls.js package version.\n       */\n      function get() {\n        return version;\n      }\n    }, {\n      key: \"Events\",\n      get: function get() {\n        return Events;\n      }\n    }, {\n      key: \"MetadataSchema\",\n      get: function get() {\n        return MetadataSchema;\n      }\n    }, {\n      key: \"ErrorTypes\",\n      get: function get() {\n        return ErrorTypes;\n      }\n    }, {\n      key: \"ErrorDetails\",\n      get: function get() {\n        return ErrorDetails;\n      }\n\n      /**\n       * Get the default configuration applied to new instances.\n       */\n    }, {\n      key: \"DefaultConfig\",\n      get: function get() {\n        if (!Hls.defaultConfig) {\n          return hlsDefaultConfig;\n        }\n        return Hls.defaultConfig;\n      }\n\n      /**\n       * Replace the default configuration applied to new instances.\n       */,\n      set: function set(defaultConfig) {\n        Hls.defaultConfig = defaultConfig;\n      }\n    }]);\n  }();\n  Hls.defaultConfig = void 0;\n\n  return Hls;\n\n}));\n})(false);\n//# sourceMappingURL=hls.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGxzLmpzL2Rpc3QvaGxzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEtBQTREO0FBQzlELEVBQUUsQ0FDa0c7QUFDcEcsQ0FBQyx1QkFBdUI7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0JBQXNCO0FBQzVDO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJGQUEyRjtBQUMzRixNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCOztBQUV2Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsZUFBZSxHQUFHO0FBQ2xCLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLFVBQVU7QUFDekIsZUFBZSxHQUFHO0FBQ2xCLGVBQWUsU0FBUztBQUN4QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEMsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDhEQUE4RCxPQUFPO0FBQ3JFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQyxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEMsU0FBUztBQUN2RDtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUEsb0JBQW9CLFlBQVk7QUFDaEM7O0FBRUE7QUFDQSxnRUFBZ0U7QUFDaEUsb0VBQW9FO0FBQ3BFLHdFQUF3RTtBQUN4RSw0RUFBNEU7QUFDNUU7QUFDQSwrREFBK0QsU0FBUztBQUN4RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEMsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsY0FBYztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDLGVBQWUsVUFBVTtBQUN6QixlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLGNBQWM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLFVBQVU7QUFDekIsZUFBZSxHQUFHO0FBQ2xCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsY0FBYztBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsZ0VBQWdFLFlBQVk7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQyxpQkFBaUIsY0FBYztBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQjs7QUFFcEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMEZBQTBGLGlCQUFpQjtBQUMzRztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0EsS0FBSztBQUNMLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxHQUFHO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCwrQkFBK0I7QUFDckY7QUFDQSx3REFBd0QsK0JBQStCO0FBQ3ZGO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0EsK0VBQStFO0FBQy9FO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0EsbURBQW1ELCtCQUErQjtBQUNsRjtBQUNBLHFEQUFxRCwrQkFBK0I7QUFDcEY7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQSwwREFBMEQsK0JBQStCO0FBQ3pGO0FBQ0EsNERBQTRELCtCQUErQjtBQUMzRjtBQUNBLDREQUE0RCwrQkFBK0I7QUFDM0Y7QUFDQSw4REFBOEQsK0JBQStCO0FBQzdGO0FBQ0Esb0RBQW9ELHFDQUFxQztBQUN6RjtBQUNBLDREQUE0RDtBQUM1RDtBQUNBLGlFQUFpRTtBQUNqRTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRDtBQUMxRDtBQUNBLHVEQUF1RCxxQ0FBcUM7QUFDNUY7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQSxnR0FBZ0c7QUFDaEc7QUFDQSxvSkFBb0o7QUFDcEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsNkJBQTZCO0FBQ2xHO0FBQ0EsdUVBQXVFLDZCQUE2QjtBQUNwRztBQUNBLHdFQUF3RSxzREFBc0Q7QUFDOUg7QUFDQSx3RUFBd0Usc0RBQXNEO0FBQzlIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxHQUFHOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBGQUEwRixXQUFXO0FBQ3JHO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0Esc0ZBQXNGO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0Esb0hBQW9IO0FBQ3BIO0FBQ0EsZ0dBQWdHO0FBQ2hHO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0EseUVBQXlFO0FBQ3pFO0FBQ0Esa0VBQWtFO0FBQ2xFO0FBQ0Esa0VBQWtFO0FBQ2xFO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0EsNEhBQTRIO0FBQzVIO0FBQ0EsNEVBQTRFO0FBQzVFO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBLDREQUE0RDtBQUM1RDtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBLDhIQUE4SDtBQUM5SDtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBLHNGQUFzRjtBQUN0RjtBQUNBLDJFQUEyRSxZQUFZLGdEQUFnRDtBQUN2STtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBLDhEQUE4RCwwQkFBMEI7QUFDeEY7QUFDQSxpRkFBaUY7QUFDakY7QUFDQSw0REFBNEQ7QUFDNUQ7QUFDQSwrREFBK0QsOEVBQThFO0FBQzdJO0FBQ0EsMEVBQTBFO0FBQzFFO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0EsZ0dBQWdHO0FBQ2hHO0FBQ0EsdUZBQXVGO0FBQ3ZGO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0EscUVBQXFFO0FBQ3JFO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBLCtEQUErRDtBQUMvRDtBQUNBLG1CQUFtQiwwQ0FBMEM7QUFDN0Q7QUFDQSx5R0FBeUc7QUFDekc7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLEdBQUc7O0FBRU47QUFDQSxpRUFBaUUsOEJBQThCO0FBQy9GOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0VBQW9FLG9DQUFvQztBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBLDRFQUE0RSxtQ0FBbUM7QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxLQUFLO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQsOEZBQThGO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrQkFBa0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxnQkFBZ0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsNEJBQTRCLFVBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixjQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixlQUFlO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEZBQThGLGFBQWE7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixTQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ0EsS0FBSztBQUNMLG9CQUFvQiwwQkFBMEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0JBQXNCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsSUFBSTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxpQkFBaUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRCxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCw2QkFBNkI7QUFDOUU7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVywwQ0FBMEM7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpRkFBaUY7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLElBQUk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDhCQUE4QixRQUFRO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGlCQUFpQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsOEJBQThCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhJQUE4STtBQUM5STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnT0FBZ087QUFDaE87QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGlDQUFpQyxtQkFBbUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLE1BQU0sR0FBRyxhQUFhLEdBQUcsZ0JBQWdCLEdBQUcscUNBQXFDLEdBQUcsVUFBVTtBQUM3STtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSwwQkFBMEI7QUFDMUIsZ0JBQWdCO0FBQ2hCO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSxXQUFXO0FBQ1g7QUFDQSxvQ0FBb0MsSUFBSTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsSUFBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxJQUFJO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLElBQUk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNCQUFzQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0JBQXNCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLElBQUk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixPQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdCQUFnQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUgsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLElBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsdUJBQXVCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix1QkFBdUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxzQ0FBc0Msb0JBQW9CO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNEJBQTRCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7O0FBRUE7QUFDQSwyRUFBMkUsMkJBQTJCO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsSUFBSTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsa0JBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHFCQUFxQixRQUFRO0FBQzdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4REFBOEQ7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFtQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFtQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxLQUFLO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLElBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLElBQUk7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxnQkFBZ0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxJQUFJO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixPQUFPO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0IsMEJBQTBCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxRQUFRO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDBCQUEwQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxtREFBbUQsTUFBTTtBQUN6RDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDRCQUE0QiwrQkFBK0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxVQUFVO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixVQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsc0JBQXNCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxJQUFJO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBLDRDQUE0QyxTQUFTO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFNBQVM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsU0FBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJDQUEyQztBQUMzQztBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsSUFBSTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxvQkFBb0IsR0FBRyxZQUFZLEdBQUcsZ0JBQWdCO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsV0FBVyxRQUFRLE9BQU8sdUJBQXVCLFlBQVksR0FBRyxvQkFBb0IsR0FBRyxpQkFBaUIsV0FBVyxRQUFRO0FBQzVKO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGVBQWUsWUFBWSxHQUFHO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixlQUFlLFlBQVksR0FBRztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsR0FBRzs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxpQkFBaUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DLG1DQUFtQztBQUNuQyxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsaUJBQWlCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwR0FBMEc7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG9DQUFvQztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixxQ0FBcUM7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLDhCQUE4QjtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JELDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLGlDQUFpQyx1Q0FBdUM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsUUFBUTtBQUNSLGtDQUFrQztBQUNsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsT0FBTztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFdBQVc7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxtQkFBbUI7QUFDbkIsbUJBQW1CO0FBQ25CLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7O0FBRVYsbUJBQW1CO0FBQ25CLG1CQUFtQjtBQUNuQixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNCQUFzQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixRQUFRO0FBQ1IscUJBQXFCO0FBQ3JCLGtCQUFrQjtBQUNsQixrQkFBa0I7QUFDbEI7QUFDQSxvQkFBb0Isb0NBQW9DO0FBQ3hEO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUixtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLGFBQWE7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG9CQUFvQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSx3QkFBd0I7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkJBQTJCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFFBQVE7QUFDckQ7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDZCQUE2QjtBQUNyRDtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVGQUF1Riw4QkFBOEI7QUFDckgsc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEI7QUFDQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixZQUFZO0FBQzNDLG1DQUFtQyxtQ0FBbUM7QUFDdEU7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsZUFBZTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLG1DQUFtQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHFCQUFxQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsd0JBQXdCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix5QkFBeUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixrQ0FBa0M7QUFDNUQsNEJBQTRCLDZDQUE2QztBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5Qiw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw4QkFBOEI7QUFDNUQsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGVBQWU7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsZUFBZTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsVUFBVTtBQUNsQyw0SEFBNEg7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsbUJBQW1CO0FBQ25CLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsNkJBQTZCO0FBQzdCLFFBQVE7QUFDUiw2QkFBNkI7QUFDN0IsUUFBUTtBQUNSLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUNBQW1DLGFBQWE7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGNBQWM7QUFDZDtBQUNBO0FBQ0EsV0FBVztBQUNYLFVBQVU7QUFDVjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxjQUFjO0FBQy9EO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsYUFBYTtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQzs7QUFFaEMsNkRBQTZEO0FBQzdELHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnR0FBZ0csYUFBYTtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsU0FBUztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixzQkFBc0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0Isa0JBQWtCO0FBQ3hDO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQztBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZUFBZTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsK0JBQStCLDBCQUEwQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsYUFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGVBQWU7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsdUhBQXVIO0FBQ3ZILGNBQWM7QUFDZDtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsV0FBVztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7O0FBRUE7QUFDQTtBQUNBLGdEQUFnRCx5QkFBeUI7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixhQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLGtHQUFrRztBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELGtCQUFrQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFHQUFxRztBQUNyRztBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUhBQW1IO0FBQ25IO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0JBQW9CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxTQUFTO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixlQUFlO0FBQ2YsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixlQUFlO0FBQ2YsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFlBQVksaUJBQWlCLG1CQUFtQixLQUFLLGdCQUFnQixpREFBaUQ7QUFDcEs7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsSUFBSSxNQUFNLGlCQUFpQixHQUFHLGNBQWMsVUFBVSxRQUFRO0FBQ2pHO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw2QkFBNkI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIseUJBQXlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDBCQUEwQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDBCQUEwQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNFdBQTRXLENBQUU7QUFDOVc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4Qyw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdHQUF3RztBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsTUFBTTtBQUNmO0FBQ0EsU0FBUyxNQUFNO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELElBQUk7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHNDQUFzQztBQUN0Qyw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHNDQUFzQztBQUN0Qyw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGtEQUFrRCxNQUFNO0FBQ3hELFNBQVM7QUFDVDtBQUNBLGtEQUFrRCxNQUFNO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLG1FQUFtRSxrQkFBa0IsS0FBSyxnQkFBZ0IsTUFBTSxNQUFNO0FBQ3RILFNBQVM7QUFDVDtBQUNBLG9FQUFvRSxrQkFBa0IsS0FBSyxnQkFBZ0IsTUFBTSxNQUFNO0FBQ3ZIO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVEQUF1RCxTQUFTO0FBQ2hFO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxhQUFhLFNBQVM7QUFDakc7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsbUJBQW1CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQzs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHVCQUF1QjtBQUN4QztBQUNBLGVBQWU7QUFDZixLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlKQUF5SjtBQUN6SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSyxJQUFJO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsSUFBSTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxRQUFRO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1Asc0JBQXNCLDRCQUE0QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFtQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsNEJBQTRCLGtDQUFrQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixzQ0FBc0M7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLDBCQUEwQjtBQUMxQjtBQUNBLGFBQWE7QUFDYjtBQUNBLDBCQUEwQiw2QkFBNkI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQSxnRkFBZ0Y7QUFDaEYsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrT0FBa087QUFDbE87QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFdBQVc7QUFDWCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsU0FBUztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLEdBQUc7QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxJQUFJO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdCQUFnQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsK0NBQStDO0FBQzVHO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELHdCQUF3QjtBQUNwRjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNkRBQTZELHdCQUF3QjtBQUNyRjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsd0JBQXdCO0FBQ3BGO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSw2REFBNkQsd0JBQXdCO0FBQ3JGO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLCtCQUErQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxxQ0FBcUMscUJBQXFCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0JBQXdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsaUJBQWlCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxRQUFRO0FBQ1I7QUFDQSxxQ0FBcUMsbUNBQW1DO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxJQUFJO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSCw2QkFBNkI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHFCQUFxQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG9CQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsSUFBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGlCQUFpQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELFNBQVM7QUFDaEU7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMEJBQTBCO0FBQzlDO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFtQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsb0JBQW9CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIscUJBQXFCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNldBQTZXLENBQUU7QUFDL1c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixvQkFBb0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsYUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsYUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixhQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsYUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsZ0JBQWdCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixhQUFhO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsYUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixhQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixhQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixhQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsYUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGFBQWE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGFBQWE7QUFDckM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix3QkFBd0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixhQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxJQUFJO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLFlBQVk7QUFDWjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZix3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBLHNCQUFzQixxQkFBcUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix1Q0FBdUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMEJBQTBCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkZBQTZGLGFBQWE7QUFDMUc7QUFDQTtBQUNBO0FBQ0EsYUFBYSxzQkFBc0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1Asa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1Asc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1Asc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxJQUFJO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsRUFBRSxNQUFNLEVBQUU7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixjQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsSUFBSTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLElBQUk7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsUUFBUTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHlCQUF5QixHQUFHLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxJQUFJO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDZCQUE2QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsd0JBQXdCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG9CQUFvQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFdBQVc7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLCtCQUErQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsc0JBQXNCO0FBQ2hEO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLEdBQUc7QUFDckM7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLHVCQUF1QjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLElBQUk7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLHVFQUF1RSxFQUFFO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix1QkFBdUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isb0JBQW9CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixtQkFBbUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLElBQUk7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsMkNBQTJDLElBQUk7QUFDL0M7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUJBQWlCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELElBQUk7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwyQkFBMkI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixvQkFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5VkFBeVYsQ0FBRTtBQUMzVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyxTQUFTLE1BQU0saUJBQWlCLEdBQUcsY0FBYyxVQUFVLFdBQVcsT0FBTyxRQUFRO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsMEJBQTBCLCtCQUErQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxRUFBcUUsYUFBYSxXQUFXLGNBQWMsUUFBUSxXQUFXOztBQUU5SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNGQUFzRixZQUFZOztBQUVsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isb0NBQW9DO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isb0NBQW9DO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRCxZQUFZO0FBQ1o7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsU0FBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLElBQUk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7O0FBRUEsQ0FBQztBQUNELENBQUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL21sc2hlbGYvLi9ub2RlX21vZHVsZXMvaGxzLmpzL2Rpc3QvaGxzLmpzPzQ0YjIiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIF9fSExTX1dPUktFUl9CVU5ETEVfXyhfX0lOX1dPUktFUl9fKXtcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLkhscyA9IGZhY3RvcnkoKSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gX2NvbnN0cnVjdCh0LCBlLCByKSB7XG4gICAgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgcmV0dXJuIFJlZmxlY3QuY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgdmFyIG8gPSBbbnVsbF07XG4gICAgby5wdXNoLmFwcGx5KG8sIGUpO1xuICAgIHZhciBwID0gbmV3ICh0LmJpbmQuYXBwbHkodCwgbykpKCk7XG4gICAgcmV0dXJuIHIgJiYgX3NldFByb3RvdHlwZU9mKHAsIHIucHJvdG90eXBlKSwgcDtcbiAgfVxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7XG4gICAgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7XG4gICAgICB2YXIgbyA9IHJbdF07XG4gICAgICBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgZmFsc2UsIG8uY29uZmlndXJhYmxlID0gdHJ1ZSwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSB0cnVlKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7XG4gICAgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwge1xuICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgfSksIGU7XG4gIH1cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KGUsIHIsIHQpIHtcbiAgICByZXR1cm4gKHIgPSBfdG9Qcm9wZXJ0eUtleShyKSkgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCB7XG4gICAgICB2YWx1ZTogdCxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pIDogZVtyXSA9IHQsIGU7XG4gIH1cbiAgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKG4pIHtcbiAgICAgIGZvciAodmFyIGUgPSAxOyBlIDwgYXJndW1lbnRzLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgIHZhciB0ID0gYXJndW1lbnRzW2VdO1xuICAgICAgICBmb3IgKHZhciByIGluIHQpICh7fSkuaGFzT3duUHJvcGVydHkuY2FsbCh0LCByKSAmJiAobltyXSA9IHRbcl0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG47XG4gICAgfSwgX2V4dGVuZHMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfVxuICBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkge1xuICAgIHJldHVybiBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7XG4gICAgfSwgX2dldFByb3RvdHlwZU9mKHQpO1xuICB9XG4gIGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHQsIG8pIHtcbiAgICB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoby5wcm90b3R5cGUpLCB0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHQsIF9zZXRQcm90b3R5cGVPZih0LCBvKTtcbiAgfVxuICBmdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbih0KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAtMSAhPT0gRnVuY3Rpb24udG9TdHJpbmcuY2FsbCh0KS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKTtcbiAgICB9IGNhdGNoIChuKSB7XG4gICAgICByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgfSBjYXRjaCAodCkge31cbiAgICByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gISF0O1xuICAgIH0pKCk7XG4gIH1cbiAgZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7XG4gICAgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTtcbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpO1xuICAgICAgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7XG4gICAgICB9KSksIHQucHVzaC5hcHBseSh0LCBvKTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIoZSkge1xuICAgIGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7XG4gICAgICB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307XG4gICAgICByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTtcbiAgICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGU7XG4gIH1cbiAgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHtcbiAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0O1xuICAgIH0sIF9zZXRQcm90b3R5cGVPZih0LCBlKTtcbiAgfVxuICBmdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikge1xuICAgIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiB0IHx8ICF0KSByZXR1cm4gdDtcbiAgICB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgICBpZiAodm9pZCAwICE9PSBlKSB7XG4gICAgICB2YXIgaSA9IGUuY2FsbCh0LCByKTtcbiAgICAgIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiBpKSByZXR1cm4gaTtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbiAgfVxuICBmdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7XG4gICAgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gICAgcmV0dXJuIFwic3ltYm9sXCIgPT0gdHlwZW9mIGkgPyBpIDogaSArIFwiXCI7XG4gIH1cbiAgZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcih0KSB7XG4gICAgdmFyIHIgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIE1hcCA/IG5ldyBNYXAoKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICBpZiAobnVsbCA9PT0gdCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24odCkpIHJldHVybiB0O1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgICAgaWYgKHZvaWQgMCAhPT0gcikge1xuICAgICAgICBpZiAoci5oYXModCkpIHJldHVybiByLmdldCh0KTtcbiAgICAgICAgci5zZXQodCwgV3JhcHBlcik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBXcmFwcGVyKCkge1xuICAgICAgICByZXR1cm4gX2NvbnN0cnVjdCh0LCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pLCBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgdCk7XG4gICAgfSwgX3dyYXBOYXRpdmVTdXBlcih0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHJhbmRvbSB2NCBVVUlEXG4gICAqXG4gICAqIEByZXR1cm5zIEEgcmFuZG9tIHY0IFVVSURcbiAgICpcbiAgICogQGdyb3VwIFV0aWxzXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICBmdW5jdGlvbiB1dWlkKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbVVVSUQoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoKSk7XG4gICAgICAgIHZhciBfdXVpZCA9IHVybC50b1N0cmluZygpO1xuICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG4gICAgICAgIHJldHVybiBfdXVpZC5zbGljZShfdXVpZC5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB2YXIgZHQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgdmFyIF91dWlkMiA9ICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICB2YXIgciA9IChkdCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgICAgICAgZHQgPSBNYXRoLmZsb29yKGR0IC8gMTYpO1xuICAgICAgICAgIHJldHVybiAoYyA9PSAneCcgPyByIDogciAmIDB4MyB8IDB4OCkudG9TdHJpbmcoMTYpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF91dWlkMjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyAoeCkge1xuICBcdHJldHVybiB4ICYmIHguX19lc01vZHVsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ2RlZmF1bHQnKSA/IHhbJ2RlZmF1bHQnXSA6IHg7XG4gIH1cblxuICB2YXIgZXZlbnRlbWl0dGVyMyA9IHtleHBvcnRzOiB7fX07XG5cbiAgdmFyIGhhc1JlcXVpcmVkRXZlbnRlbWl0dGVyMztcblxuICBmdW5jdGlvbiByZXF1aXJlRXZlbnRlbWl0dGVyMyAoKSB7XG4gIFx0aWYgKGhhc1JlcXVpcmVkRXZlbnRlbWl0dGVyMykgcmV0dXJuIGV2ZW50ZW1pdHRlcjMuZXhwb3J0cztcbiAgXHRoYXNSZXF1aXJlZEV2ZW50ZW1pdHRlcjMgPSAxO1xuICBcdChmdW5jdGlvbiAobW9kdWxlKSB7XG5cbiAgXHRcdHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gIFx0XHQgICwgcHJlZml4ID0gJ34nO1xuXG4gIFx0XHQvKipcbiAgXHRcdCAqIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIHN0b3JhZ2UgZm9yIG91ciBgRUVgIG9iamVjdHMuXG4gIFx0XHQgKiBBbiBgRXZlbnRzYCBpbnN0YW5jZSBpcyBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbiAgXHRcdCAqXG4gIFx0XHQgKiBAY29uc3RydWN0b3JcbiAgXHRcdCAqIEBwcml2YXRlXG4gIFx0XHQgKi9cbiAgXHRcdGZ1bmN0aW9uIEV2ZW50cygpIHt9XG5cbiAgXHRcdC8vXG4gIFx0XHQvLyBXZSB0cnkgdG8gbm90IGluaGVyaXQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuIEluIHNvbWUgZW5naW5lcyBjcmVhdGluZyBhblxuICBcdFx0Ly8gaW5zdGFuY2UgaW4gdGhpcyB3YXkgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgZGlyZWN0bHkuXG4gIFx0XHQvLyBJZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgbm90IHN1cHBvcnRlZCB3ZSBwcmVmaXggdGhlIGV2ZW50IG5hbWVzIHdpdGggYVxuICBcdFx0Ly8gY2hhcmFjdGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBidWlsdC1pbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbm90XG4gIFx0XHQvLyBvdmVycmlkZGVuIG9yIHVzZWQgYXMgYW4gYXR0YWNrIHZlY3Rvci5cbiAgXHRcdC8vXG4gIFx0XHRpZiAoT2JqZWN0LmNyZWF0ZSkge1xuICBcdFx0ICBFdmVudHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBcdFx0ICAvL1xuICBcdFx0ICAvLyBUaGlzIGhhY2sgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGBfX3Byb3RvX19gIHByb3BlcnR5IGlzIHN0aWxsIGluaGVyaXRlZCBpblxuICBcdFx0ICAvLyBzb21lIG9sZCBicm93c2VycyBsaWtlIEFuZHJvaWQgNCwgaVBob25lIDUuMSwgT3BlcmEgMTEgYW5kIFNhZmFyaSA1LlxuICBcdFx0ICAvL1xuICBcdFx0ICBpZiAoIW5ldyBFdmVudHMoKS5fX3Byb3RvX18pIHByZWZpeCA9IGZhbHNlO1xuICBcdFx0fVxuXG4gIFx0XHQvKipcbiAgXHRcdCAqIFJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGV2ZW50IGxpc3RlbmVyLlxuICBcdFx0ICpcbiAgXHRcdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAgXHRcdCAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gIFx0XHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICBcdFx0ICogQGNvbnN0cnVjdG9yXG4gIFx0XHQgKiBAcHJpdmF0ZVxuICBcdFx0ICovXG4gIFx0XHRmdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICBcdFx0ICB0aGlzLmZuID0gZm47XG4gIFx0XHQgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIFx0XHQgIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG4gIFx0XHR9XG5cbiAgXHRcdC8qKlxuICBcdFx0ICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gIFx0XHQgKlxuICBcdFx0ICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAgXHRcdCAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAgXHRcdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAgXHRcdCAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gIFx0XHQgKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAgXHRcdCAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9XG4gIFx0XHQgKiBAcHJpdmF0ZVxuICBcdFx0ICovXG4gIFx0XHRmdW5jdGlvbiBhZGRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgXHRcdCAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICBcdFx0ICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgXHRcdCAgfVxuXG4gIFx0XHQgIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCBlbWl0dGVyLCBvbmNlKVxuICBcdFx0ICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBcdFx0ICBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdKSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCBlbWl0dGVyLl9ldmVudHNDb3VudCsrO1xuICBcdFx0ICBlbHNlIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0uZm4pIGVtaXR0ZXIuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBcdFx0ICBlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gW2VtaXR0ZXIuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgXHRcdCAgcmV0dXJuIGVtaXR0ZXI7XG4gIFx0XHR9XG5cbiAgXHRcdC8qKlxuICBcdFx0ICogQ2xlYXIgZXZlbnQgYnkgbmFtZS5cbiAgXHRcdCAqXG4gIFx0XHQgKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICBcdFx0ICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2dCBUaGUgRXZlbnQgbmFtZS5cbiAgXHRcdCAqIEBwcml2YXRlXG4gIFx0XHQgKi9cbiAgXHRcdGZ1bmN0aW9uIGNsZWFyRXZlbnQoZW1pdHRlciwgZXZ0KSB7XG4gIFx0XHQgIGlmICgtLWVtaXR0ZXIuX2V2ZW50c0NvdW50ID09PSAwKSBlbWl0dGVyLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIFx0XHQgIGVsc2UgZGVsZXRlIGVtaXR0ZXIuX2V2ZW50c1tldnRdO1xuICBcdFx0fVxuXG4gIFx0XHQvKipcbiAgXHRcdCAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAgXHRcdCAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAgXHRcdCAqXG4gIFx0XHQgKiBAY29uc3RydWN0b3JcbiAgXHRcdCAqIEBwdWJsaWNcbiAgXHRcdCAqL1xuICBcdFx0ZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBcdFx0ICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIFx0XHQgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgXHRcdH1cblxuICBcdFx0LyoqXG4gIFx0XHQgKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICBcdFx0ICogbGlzdGVuZXJzLlxuICBcdFx0ICpcbiAgXHRcdCAqIEByZXR1cm5zIHtBcnJheX1cbiAgXHRcdCAqIEBwdWJsaWNcbiAgXHRcdCAqL1xuICBcdFx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgXHRcdCAgdmFyIG5hbWVzID0gW11cbiAgXHRcdCAgICAsIGV2ZW50c1xuICBcdFx0ICAgICwgbmFtZTtcblxuICBcdFx0ICBpZiAodGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHJldHVybiBuYW1lcztcblxuICBcdFx0ICBmb3IgKG5hbWUgaW4gKGV2ZW50cyA9IHRoaXMuX2V2ZW50cykpIHtcbiAgXHRcdCAgICBpZiAoaGFzLmNhbGwoZXZlbnRzLCBuYW1lKSkgbmFtZXMucHVzaChwcmVmaXggPyBuYW1lLnNsaWNlKDEpIDogbmFtZSk7XG4gIFx0XHQgIH1cblxuICBcdFx0ICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBcdFx0ICAgIHJldHVybiBuYW1lcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhldmVudHMpKTtcbiAgXHRcdCAgfVxuXG4gIFx0XHQgIHJldHVybiBuYW1lcztcbiAgXHRcdH07XG5cbiAgXHRcdC8qKlxuICBcdFx0ICogUmV0dXJuIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAgXHRcdCAqXG4gIFx0XHQgKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gIFx0XHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAgXHRcdCAqIEBwdWJsaWNcbiAgXHRcdCAqL1xuICBcdFx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgXHRcdCAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgXHRcdCAgICAsIGhhbmRsZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgXHRcdCAgaWYgKCFoYW5kbGVycykgcmV0dXJuIFtdO1xuICBcdFx0ICBpZiAoaGFuZGxlcnMuZm4pIHJldHVybiBbaGFuZGxlcnMuZm5dO1xuXG4gIFx0XHQgIGZvciAodmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICBcdFx0ICAgIGVlW2ldID0gaGFuZGxlcnNbaV0uZm47XG4gIFx0XHQgIH1cblxuICBcdFx0ICByZXR1cm4gZWU7XG4gIFx0XHR9O1xuXG4gIFx0XHQvKipcbiAgXHRcdCAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBsaXN0ZW5pbmcgdG8gYSBnaXZlbiBldmVudC5cbiAgXHRcdCAqXG4gIFx0XHQgKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gIFx0XHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIGxpc3RlbmVycy5cbiAgXHRcdCAqIEBwdWJsaWNcbiAgXHRcdCAqL1xuICBcdFx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gbGlzdGVuZXJDb3VudChldmVudCkge1xuICBcdFx0ICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICBcdFx0ICAgICwgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgXHRcdCAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybiAwO1xuICBcdFx0ICBpZiAobGlzdGVuZXJzLmZuKSByZXR1cm4gMTtcbiAgXHRcdCAgcmV0dXJuIGxpc3RlbmVycy5sZW5ndGg7XG4gIFx0XHR9O1xuXG4gIFx0XHQvKipcbiAgXHRcdCAqIENhbGxzIGVhY2ggb2YgdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICBcdFx0ICpcbiAgXHRcdCAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAgXHRcdCAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAgXHRcdCAqIEBwdWJsaWNcbiAgXHRcdCAqL1xuICBcdFx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIFx0XHQgIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIFx0XHQgIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICBcdFx0ICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgXHRcdCAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgXHRcdCAgICAsIGFyZ3NcbiAgXHRcdCAgICAsIGk7XG5cbiAgXHRcdCAgaWYgKGxpc3RlbmVycy5mbikge1xuICBcdFx0ICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gIFx0XHQgICAgc3dpdGNoIChsZW4pIHtcbiAgXHRcdCAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgXHRcdCAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gIFx0XHQgICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgXHRcdCAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgXHRcdCAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gIFx0XHQgICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgXHRcdCAgICB9XG5cbiAgXHRcdCAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICBcdFx0ICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gIFx0XHQgICAgfVxuXG4gIFx0XHQgICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgXHRcdCAgfSBlbHNlIHtcbiAgXHRcdCAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICBcdFx0ICAgICAgLCBqO1xuXG4gIFx0XHQgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gIFx0XHQgICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICBcdFx0ICAgICAgc3dpdGNoIChsZW4pIHtcbiAgXHRcdCAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICBcdFx0ICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICBcdFx0ICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgXHRcdCAgICAgICAgY2FzZSA0OiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyLCBhMyk7IGJyZWFrO1xuICBcdFx0ICAgICAgICBkZWZhdWx0OlxuICBcdFx0ICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgXHRcdCAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICBcdFx0ICAgICAgICAgIH1cblxuICBcdFx0ICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gIFx0XHQgICAgICB9XG4gIFx0XHQgICAgfVxuICBcdFx0ICB9XG5cbiAgXHRcdCAgcmV0dXJuIHRydWU7XG4gIFx0XHR9O1xuXG4gIFx0XHQvKipcbiAgXHRcdCAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICBcdFx0ICpcbiAgXHRcdCAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAgXHRcdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAgXHRcdCAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICBcdFx0ICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICBcdFx0ICogQHB1YmxpY1xuICBcdFx0ICovXG4gIFx0XHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIFx0XHQgIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIGZhbHNlKTtcbiAgXHRcdH07XG5cbiAgXHRcdC8qKlxuICBcdFx0ICogQWRkIGEgb25lLXRpbWUgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gIFx0XHQgKlxuICBcdFx0ICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICBcdFx0ICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICBcdFx0ICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gIFx0XHQgKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gIFx0XHQgKiBAcHVibGljXG4gIFx0XHQgKi9cbiAgXHRcdEV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIFx0XHQgIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIHRydWUpO1xuICBcdFx0fTtcblxuICBcdFx0LyoqXG4gIFx0XHQgKiBSZW1vdmUgdGhlIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50LlxuICBcdFx0ICpcbiAgXHRcdCAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAgXHRcdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGlzIGZ1bmN0aW9uLlxuICBcdFx0ICogQHBhcmFtIHsqfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAgXHRcdCAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gIFx0XHQgKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gIFx0XHQgKiBAcHVibGljXG4gIFx0XHQgKi9cbiAgXHRcdEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgXHRcdCAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgXHRcdCAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG4gIFx0XHQgIGlmICghZm4pIHtcbiAgXHRcdCAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIFx0XHQgICAgcmV0dXJuIHRoaXM7XG4gIFx0XHQgIH1cblxuICBcdFx0ICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgXHRcdCAgaWYgKGxpc3RlbmVycy5mbikge1xuICBcdFx0ICAgIGlmIChcbiAgXHRcdCAgICAgIGxpc3RlbmVycy5mbiA9PT0gZm4gJiZcbiAgXHRcdCAgICAgICghb25jZSB8fCBsaXN0ZW5lcnMub25jZSkgJiZcbiAgXHRcdCAgICAgICghY29udGV4dCB8fCBsaXN0ZW5lcnMuY29udGV4dCA9PT0gY29udGV4dClcbiAgXHRcdCAgICApIHtcbiAgXHRcdCAgICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgXHRcdCAgICB9XG4gIFx0XHQgIH0gZWxzZSB7XG4gIFx0XHQgICAgZm9yICh2YXIgaSA9IDAsIGV2ZW50cyA9IFtdLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgXHRcdCAgICAgIGlmIChcbiAgXHRcdCAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmbiB8fFxuICBcdFx0ICAgICAgICAob25jZSAmJiAhbGlzdGVuZXJzW2ldLm9uY2UpIHx8XG4gIFx0XHQgICAgICAgIChjb250ZXh0ICYmIGxpc3RlbmVyc1tpXS5jb250ZXh0ICE9PSBjb250ZXh0KVxuICBcdFx0ICAgICAgKSB7XG4gIFx0XHQgICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVyc1tpXSk7XG4gIFx0XHQgICAgICB9XG4gIFx0XHQgICAgfVxuXG4gIFx0XHQgICAgLy9cbiAgXHRcdCAgICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gIFx0XHQgICAgLy9cbiAgXHRcdCAgICBpZiAoZXZlbnRzLmxlbmd0aCkgdGhpcy5fZXZlbnRzW2V2dF0gPSBldmVudHMubGVuZ3RoID09PSAxID8gZXZlbnRzWzBdIDogZXZlbnRzO1xuICBcdFx0ICAgIGVsc2UgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICBcdFx0ICB9XG5cbiAgXHRcdCAgcmV0dXJuIHRoaXM7XG4gIFx0XHR9O1xuXG4gIFx0XHQvKipcbiAgXHRcdCAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICBcdFx0ICpcbiAgXHRcdCAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBbZXZlbnRdIFRoZSBldmVudCBuYW1lLlxuICBcdFx0ICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICBcdFx0ICogQHB1YmxpY1xuICBcdFx0ICovXG4gIFx0XHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICBcdFx0ICB2YXIgZXZ0O1xuXG4gIFx0XHQgIGlmIChldmVudCkge1xuICBcdFx0ICAgIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG4gIFx0XHQgICAgaWYgKHRoaXMuX2V2ZW50c1tldnRdKSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIFx0XHQgIH0gZWxzZSB7XG4gIFx0XHQgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICBcdFx0ICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgXHRcdCAgfVxuXG4gIFx0XHQgIHJldHVybiB0aGlzO1xuICBcdFx0fTtcblxuICBcdFx0Ly9cbiAgXHRcdC8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4gIFx0XHQvL1xuICBcdFx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuICBcdFx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbiAgXHRcdC8vXG4gIFx0XHQvLyBFeHBvc2UgdGhlIHByZWZpeC5cbiAgXHRcdC8vXG4gIFx0XHRFdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbiAgXHRcdC8vXG4gIFx0XHQvLyBBbGxvdyBgRXZlbnRFbWl0dGVyYCB0byBiZSBpbXBvcnRlZCBhcyBtb2R1bGUgbmFtZXNwYWNlLlxuICBcdFx0Ly9cbiAgXHRcdEV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbiAgXHRcdC8vXG4gIFx0XHQvLyBFeHBvc2UgdGhlIG1vZHVsZS5cbiAgXHRcdC8vXG4gIFx0XHR7XG4gIFx0XHQgIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuICBcdFx0fSBcbiAgXHR9IChldmVudGVtaXR0ZXIzKSk7XG4gIFx0cmV0dXJuIGV2ZW50ZW1pdHRlcjMuZXhwb3J0cztcbiAgfVxuXG4gIHZhciBldmVudGVtaXR0ZXIzRXhwb3J0cyA9IHJlcXVpcmVFdmVudGVtaXR0ZXIzKCk7XG4gIHZhciBFdmVudEVtaXR0ZXIgPSAvKkBfX1BVUkVfXyovZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMoZXZlbnRlbWl0dGVyM0V4cG9ydHMpO1xuXG4gIHZhciB1cmxUb29sa2l0ID0ge2V4cG9ydHM6IHt9fTtcblxuICB2YXIgaGFzUmVxdWlyZWRVcmxUb29sa2l0O1xuXG4gIGZ1bmN0aW9uIHJlcXVpcmVVcmxUb29sa2l0ICgpIHtcbiAgXHRpZiAoaGFzUmVxdWlyZWRVcmxUb29sa2l0KSByZXR1cm4gdXJsVG9vbGtpdC5leHBvcnRzO1xuICBcdGhhc1JlcXVpcmVkVXJsVG9vbGtpdCA9IDE7XG4gIFx0KGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgXHRcdC8vIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMTgwOFxuXG4gIFx0XHQoZnVuY3Rpb24gKHJvb3QpIHtcbiAgXHRcdCAgdmFyIFVSTF9SRUdFWCA9XG4gIFx0XHQgICAgL14oPz0oKD86W2EtekEtWjAtOStcXC0uXSs6KT8pKVxcMSg/PSgoPzpcXC9cXC9bXlxcLz8jXSopPykpXFwyKD89KCg/Oig/OltePyNcXC9dKlxcLykqW147PyNcXC9dKik/KSlcXDMoKD86O1tePyNdKik/KShcXD9bXiNdKik/KCNbXl0qKT8kLztcbiAgXHRcdCAgdmFyIEZJUlNUX1NFR01FTlRfUkVHRVggPSAvXig/PShbXlxcLz8jXSopKVxcMShbXl0qKSQvO1xuICBcdFx0ICB2YXIgU0xBU0hfRE9UX1JFR0VYID0gLyg/OlxcL3xeKVxcLig/PVxcLykvZztcbiAgXHRcdCAgdmFyIFNMQVNIX0RPVF9ET1RfUkVHRVggPSAvKD86XFwvfF4pXFwuXFwuXFwvKD8hXFwuXFwuXFwvKVteXFwvXSooPz1cXC8pL2c7XG5cbiAgXHRcdCAgdmFyIFVSTFRvb2xraXQgPSB7XG4gIFx0XHQgICAgLy8gSWYgb3B0cy5hbHdheXNOb3JtYWxpemUgaXMgdHJ1ZSB0aGVuIHRoZSBwYXRoIHdpbGwgYWx3YXlzIGJlIG5vcm1hbGl6ZWQgZXZlbiB3aGVuIGl0IHN0YXJ0cyB3aXRoIC8gb3IgLy9cbiAgXHRcdCAgICAvLyBFLmdcbiAgXHRcdCAgICAvLyBXaXRoIG9wdHMuYWx3YXlzTm9ybWFsaXplID0gZmFsc2UgKGRlZmF1bHQsIHNwZWMgY29tcGxpYW50KVxuICBcdFx0ICAgIC8vIGh0dHA6Ly9hLmNvbS9iL2NkICsgL2UvZi8uLi9nID0+IGh0dHA6Ly9hLmNvbS9lL2YvLi4vZ1xuICBcdFx0ICAgIC8vIFdpdGggb3B0cy5hbHdheXNOb3JtYWxpemUgPSB0cnVlIChub3Qgc3BlYyBjb21wbGlhbnQpXG4gIFx0XHQgICAgLy8gaHR0cDovL2EuY29tL2IvY2QgKyAvZS9mLy4uL2cgPT4gaHR0cDovL2EuY29tL2UvZ1xuICBcdFx0ICAgIGJ1aWxkQWJzb2x1dGVVUkw6IGZ1bmN0aW9uIChiYXNlVVJMLCByZWxhdGl2ZVVSTCwgb3B0cykge1xuICBcdFx0ICAgICAgb3B0cyA9IG9wdHMgfHwge307XG4gIFx0XHQgICAgICAvLyByZW1vdmUgYW55IHJlbWFpbmluZyBzcGFjZSBhbmQgQ1JMRlxuICBcdFx0ICAgICAgYmFzZVVSTCA9IGJhc2VVUkwudHJpbSgpO1xuICBcdFx0ICAgICAgcmVsYXRpdmVVUkwgPSByZWxhdGl2ZVVSTC50cmltKCk7XG4gIFx0XHQgICAgICBpZiAoIXJlbGF0aXZlVVJMKSB7XG4gIFx0XHQgICAgICAgIC8vIDJhKSBJZiB0aGUgZW1iZWRkZWQgVVJMIGlzIGVudGlyZWx5IGVtcHR5LCBpdCBpbmhlcml0cyB0aGVcbiAgXHRcdCAgICAgICAgLy8gZW50aXJlIGJhc2UgVVJMIChpLmUuLCBpcyBzZXQgZXF1YWwgdG8gdGhlIGJhc2UgVVJMKVxuICBcdFx0ICAgICAgICAvLyBhbmQgd2UgYXJlIGRvbmUuXG4gIFx0XHQgICAgICAgIGlmICghb3B0cy5hbHdheXNOb3JtYWxpemUpIHtcbiAgXHRcdCAgICAgICAgICByZXR1cm4gYmFzZVVSTDtcbiAgXHRcdCAgICAgICAgfVxuICBcdFx0ICAgICAgICB2YXIgYmFzZVBhcnRzRm9yTm9ybWFsaXNlID0gVVJMVG9vbGtpdC5wYXJzZVVSTChiYXNlVVJMKTtcbiAgXHRcdCAgICAgICAgaWYgKCFiYXNlUGFydHNGb3JOb3JtYWxpc2UpIHtcbiAgXHRcdCAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHRyeWluZyB0byBwYXJzZSBiYXNlIFVSTC4nKTtcbiAgXHRcdCAgICAgICAgfVxuICBcdFx0ICAgICAgICBiYXNlUGFydHNGb3JOb3JtYWxpc2UucGF0aCA9IFVSTFRvb2xraXQubm9ybWFsaXplUGF0aChcbiAgXHRcdCAgICAgICAgICBiYXNlUGFydHNGb3JOb3JtYWxpc2UucGF0aFxuICBcdFx0ICAgICAgICApO1xuICBcdFx0ICAgICAgICByZXR1cm4gVVJMVG9vbGtpdC5idWlsZFVSTEZyb21QYXJ0cyhiYXNlUGFydHNGb3JOb3JtYWxpc2UpO1xuICBcdFx0ICAgICAgfVxuICBcdFx0ICAgICAgdmFyIHJlbGF0aXZlUGFydHMgPSBVUkxUb29sa2l0LnBhcnNlVVJMKHJlbGF0aXZlVVJMKTtcbiAgXHRcdCAgICAgIGlmICghcmVsYXRpdmVQYXJ0cykge1xuICBcdFx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHRyeWluZyB0byBwYXJzZSByZWxhdGl2ZSBVUkwuJyk7XG4gIFx0XHQgICAgICB9XG4gIFx0XHQgICAgICBpZiAocmVsYXRpdmVQYXJ0cy5zY2hlbWUpIHtcbiAgXHRcdCAgICAgICAgLy8gMmIpIElmIHRoZSBlbWJlZGRlZCBVUkwgc3RhcnRzIHdpdGggYSBzY2hlbWUgbmFtZSwgaXQgaXNcbiAgXHRcdCAgICAgICAgLy8gaW50ZXJwcmV0ZWQgYXMgYW4gYWJzb2x1dGUgVVJMIGFuZCB3ZSBhcmUgZG9uZS5cbiAgXHRcdCAgICAgICAgaWYgKCFvcHRzLmFsd2F5c05vcm1hbGl6ZSkge1xuICBcdFx0ICAgICAgICAgIHJldHVybiByZWxhdGl2ZVVSTDtcbiAgXHRcdCAgICAgICAgfVxuICBcdFx0ICAgICAgICByZWxhdGl2ZVBhcnRzLnBhdGggPSBVUkxUb29sa2l0Lm5vcm1hbGl6ZVBhdGgocmVsYXRpdmVQYXJ0cy5wYXRoKTtcbiAgXHRcdCAgICAgICAgcmV0dXJuIFVSTFRvb2xraXQuYnVpbGRVUkxGcm9tUGFydHMocmVsYXRpdmVQYXJ0cyk7XG4gIFx0XHQgICAgICB9XG4gIFx0XHQgICAgICB2YXIgYmFzZVBhcnRzID0gVVJMVG9vbGtpdC5wYXJzZVVSTChiYXNlVVJMKTtcbiAgXHRcdCAgICAgIGlmICghYmFzZVBhcnRzKSB7XG4gIFx0XHQgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgdHJ5aW5nIHRvIHBhcnNlIGJhc2UgVVJMLicpO1xuICBcdFx0ICAgICAgfVxuICBcdFx0ICAgICAgaWYgKCFiYXNlUGFydHMubmV0TG9jICYmIGJhc2VQYXJ0cy5wYXRoICYmIGJhc2VQYXJ0cy5wYXRoWzBdICE9PSAnLycpIHtcbiAgXHRcdCAgICAgICAgLy8gSWYgbmV0TG9jIG1pc3NpbmcgYW5kIHBhdGggZG9lc24ndCBzdGFydCB3aXRoICcvJywgYXNzdW1lIGV2ZXJ0aGluZyBiZWZvcmUgdGhlIGZpcnN0ICcvJyBpcyB0aGUgbmV0TG9jXG4gIFx0XHQgICAgICAgIC8vIFRoaXMgY2F1c2VzICdleGFtcGxlLmNvbS9hJyB0byBiZSBoYW5kbGVkIGFzICcvL2V4YW1wbGUuY29tL2EnIGluc3RlYWQgb2YgJy9leGFtcGxlLmNvbS9hJ1xuICBcdFx0ICAgICAgICB2YXIgcGF0aFBhcnRzID0gRklSU1RfU0VHTUVOVF9SRUdFWC5leGVjKGJhc2VQYXJ0cy5wYXRoKTtcbiAgXHRcdCAgICAgICAgYmFzZVBhcnRzLm5ldExvYyA9IHBhdGhQYXJ0c1sxXTtcbiAgXHRcdCAgICAgICAgYmFzZVBhcnRzLnBhdGggPSBwYXRoUGFydHNbMl07XG4gIFx0XHQgICAgICB9XG4gIFx0XHQgICAgICBpZiAoYmFzZVBhcnRzLm5ldExvYyAmJiAhYmFzZVBhcnRzLnBhdGgpIHtcbiAgXHRcdCAgICAgICAgYmFzZVBhcnRzLnBhdGggPSAnLyc7XG4gIFx0XHQgICAgICB9XG4gIFx0XHQgICAgICB2YXIgYnVpbHRQYXJ0cyA9IHtcbiAgXHRcdCAgICAgICAgLy8gMmMpIE90aGVyd2lzZSwgdGhlIGVtYmVkZGVkIFVSTCBpbmhlcml0cyB0aGUgc2NoZW1lIG9mXG4gIFx0XHQgICAgICAgIC8vIHRoZSBiYXNlIFVSTC5cbiAgXHRcdCAgICAgICAgc2NoZW1lOiBiYXNlUGFydHMuc2NoZW1lLFxuICBcdFx0ICAgICAgICBuZXRMb2M6IHJlbGF0aXZlUGFydHMubmV0TG9jLFxuICBcdFx0ICAgICAgICBwYXRoOiBudWxsLFxuICBcdFx0ICAgICAgICBwYXJhbXM6IHJlbGF0aXZlUGFydHMucGFyYW1zLFxuICBcdFx0ICAgICAgICBxdWVyeTogcmVsYXRpdmVQYXJ0cy5xdWVyeSxcbiAgXHRcdCAgICAgICAgZnJhZ21lbnQ6IHJlbGF0aXZlUGFydHMuZnJhZ21lbnQsXG4gIFx0XHQgICAgICB9O1xuICBcdFx0ICAgICAgaWYgKCFyZWxhdGl2ZVBhcnRzLm5ldExvYykge1xuICBcdFx0ICAgICAgICAvLyAzKSBJZiB0aGUgZW1iZWRkZWQgVVJMJ3MgPG5ldF9sb2M+IGlzIG5vbi1lbXB0eSwgd2Ugc2tpcCB0b1xuICBcdFx0ICAgICAgICAvLyBTdGVwIDcuICBPdGhlcndpc2UsIHRoZSBlbWJlZGRlZCBVUkwgaW5oZXJpdHMgdGhlIDxuZXRfbG9jPlxuICBcdFx0ICAgICAgICAvLyAoaWYgYW55KSBvZiB0aGUgYmFzZSBVUkwuXG4gIFx0XHQgICAgICAgIGJ1aWx0UGFydHMubmV0TG9jID0gYmFzZVBhcnRzLm5ldExvYztcbiAgXHRcdCAgICAgICAgLy8gNCkgSWYgdGhlIGVtYmVkZGVkIFVSTCBwYXRoIGlzIHByZWNlZGVkIGJ5IGEgc2xhc2ggXCIvXCIsIHRoZVxuICBcdFx0ICAgICAgICAvLyBwYXRoIGlzIG5vdCByZWxhdGl2ZSBhbmQgd2Ugc2tpcCB0byBTdGVwIDcuXG4gIFx0XHQgICAgICAgIGlmIChyZWxhdGl2ZVBhcnRzLnBhdGhbMF0gIT09ICcvJykge1xuICBcdFx0ICAgICAgICAgIGlmICghcmVsYXRpdmVQYXJ0cy5wYXRoKSB7XG4gIFx0XHQgICAgICAgICAgICAvLyA1KSBJZiB0aGUgZW1iZWRkZWQgVVJMIHBhdGggaXMgZW1wdHkgKGFuZCBub3QgcHJlY2VkZWQgYnkgYVxuICBcdFx0ICAgICAgICAgICAgLy8gc2xhc2gpLCB0aGVuIHRoZSBlbWJlZGRlZCBVUkwgaW5oZXJpdHMgdGhlIGJhc2UgVVJMIHBhdGhcbiAgXHRcdCAgICAgICAgICAgIGJ1aWx0UGFydHMucGF0aCA9IGJhc2VQYXJ0cy5wYXRoO1xuICBcdFx0ICAgICAgICAgICAgLy8gNWEpIGlmIHRoZSBlbWJlZGRlZCBVUkwncyA8cGFyYW1zPiBpcyBub24tZW1wdHksIHdlIHNraXAgdG9cbiAgXHRcdCAgICAgICAgICAgIC8vIHN0ZXAgNzsgb3RoZXJ3aXNlLCBpdCBpbmhlcml0cyB0aGUgPHBhcmFtcz4gb2YgdGhlIGJhc2VcbiAgXHRcdCAgICAgICAgICAgIC8vIFVSTCAoaWYgYW55KSBhbmRcbiAgXHRcdCAgICAgICAgICAgIGlmICghcmVsYXRpdmVQYXJ0cy5wYXJhbXMpIHtcbiAgXHRcdCAgICAgICAgICAgICAgYnVpbHRQYXJ0cy5wYXJhbXMgPSBiYXNlUGFydHMucGFyYW1zO1xuICBcdFx0ICAgICAgICAgICAgICAvLyA1YikgaWYgdGhlIGVtYmVkZGVkIFVSTCdzIDxxdWVyeT4gaXMgbm9uLWVtcHR5LCB3ZSBza2lwIHRvXG4gIFx0XHQgICAgICAgICAgICAgIC8vIHN0ZXAgNzsgb3RoZXJ3aXNlLCBpdCBpbmhlcml0cyB0aGUgPHF1ZXJ5PiBvZiB0aGUgYmFzZVxuICBcdFx0ICAgICAgICAgICAgICAvLyBVUkwgKGlmIGFueSkgYW5kIHdlIHNraXAgdG8gc3RlcCA3LlxuICBcdFx0ICAgICAgICAgICAgICBpZiAoIXJlbGF0aXZlUGFydHMucXVlcnkpIHtcbiAgXHRcdCAgICAgICAgICAgICAgICBidWlsdFBhcnRzLnF1ZXJ5ID0gYmFzZVBhcnRzLnF1ZXJ5O1xuICBcdFx0ICAgICAgICAgICAgICB9XG4gIFx0XHQgICAgICAgICAgICB9XG4gIFx0XHQgICAgICAgICAgfSBlbHNlIHtcbiAgXHRcdCAgICAgICAgICAgIC8vIDYpIFRoZSBsYXN0IHNlZ21lbnQgb2YgdGhlIGJhc2UgVVJMJ3MgcGF0aCAoYW55dGhpbmdcbiAgXHRcdCAgICAgICAgICAgIC8vIGZvbGxvd2luZyB0aGUgcmlnaHRtb3N0IHNsYXNoIFwiL1wiLCBvciB0aGUgZW50aXJlIHBhdGggaWYgbm9cbiAgXHRcdCAgICAgICAgICAgIC8vIHNsYXNoIGlzIHByZXNlbnQpIGlzIHJlbW92ZWQgYW5kIHRoZSBlbWJlZGRlZCBVUkwncyBwYXRoIGlzXG4gIFx0XHQgICAgICAgICAgICAvLyBhcHBlbmRlZCBpbiBpdHMgcGxhY2UuXG4gIFx0XHQgICAgICAgICAgICB2YXIgYmFzZVVSTFBhdGggPSBiYXNlUGFydHMucGF0aDtcbiAgXHRcdCAgICAgICAgICAgIHZhciBuZXdQYXRoID1cbiAgXHRcdCAgICAgICAgICAgICAgYmFzZVVSTFBhdGguc3Vic3RyaW5nKDAsIGJhc2VVUkxQYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxKSArXG4gIFx0XHQgICAgICAgICAgICAgIHJlbGF0aXZlUGFydHMucGF0aDtcbiAgXHRcdCAgICAgICAgICAgIGJ1aWx0UGFydHMucGF0aCA9IFVSTFRvb2xraXQubm9ybWFsaXplUGF0aChuZXdQYXRoKTtcbiAgXHRcdCAgICAgICAgICB9XG4gIFx0XHQgICAgICAgIH1cbiAgXHRcdCAgICAgIH1cbiAgXHRcdCAgICAgIGlmIChidWlsdFBhcnRzLnBhdGggPT09IG51bGwpIHtcbiAgXHRcdCAgICAgICAgYnVpbHRQYXJ0cy5wYXRoID0gb3B0cy5hbHdheXNOb3JtYWxpemVcbiAgXHRcdCAgICAgICAgICA/IFVSTFRvb2xraXQubm9ybWFsaXplUGF0aChyZWxhdGl2ZVBhcnRzLnBhdGgpXG4gIFx0XHQgICAgICAgICAgOiByZWxhdGl2ZVBhcnRzLnBhdGg7XG4gIFx0XHQgICAgICB9XG4gIFx0XHQgICAgICByZXR1cm4gVVJMVG9vbGtpdC5idWlsZFVSTEZyb21QYXJ0cyhidWlsdFBhcnRzKTtcbiAgXHRcdCAgICB9LFxuICBcdFx0ICAgIHBhcnNlVVJMOiBmdW5jdGlvbiAodXJsKSB7XG4gIFx0XHQgICAgICB2YXIgcGFydHMgPSBVUkxfUkVHRVguZXhlYyh1cmwpO1xuICBcdFx0ICAgICAgaWYgKCFwYXJ0cykge1xuICBcdFx0ICAgICAgICByZXR1cm4gbnVsbDtcbiAgXHRcdCAgICAgIH1cbiAgXHRcdCAgICAgIHJldHVybiB7XG4gIFx0XHQgICAgICAgIHNjaGVtZTogcGFydHNbMV0gfHwgJycsXG4gIFx0XHQgICAgICAgIG5ldExvYzogcGFydHNbMl0gfHwgJycsXG4gIFx0XHQgICAgICAgIHBhdGg6IHBhcnRzWzNdIHx8ICcnLFxuICBcdFx0ICAgICAgICBwYXJhbXM6IHBhcnRzWzRdIHx8ICcnLFxuICBcdFx0ICAgICAgICBxdWVyeTogcGFydHNbNV0gfHwgJycsXG4gIFx0XHQgICAgICAgIGZyYWdtZW50OiBwYXJ0c1s2XSB8fCAnJyxcbiAgXHRcdCAgICAgIH07XG4gIFx0XHQgICAgfSxcbiAgXHRcdCAgICBub3JtYWxpemVQYXRoOiBmdW5jdGlvbiAocGF0aCkge1xuICBcdFx0ICAgICAgLy8gVGhlIGZvbGxvd2luZyBvcGVyYXRpb25zIGFyZVxuICBcdFx0ICAgICAgLy8gdGhlbiBhcHBsaWVkLCBpbiBvcmRlciwgdG8gdGhlIG5ldyBwYXRoOlxuICBcdFx0ICAgICAgLy8gNmEpIEFsbCBvY2N1cnJlbmNlcyBvZiBcIi4vXCIsIHdoZXJlIFwiLlwiIGlzIGEgY29tcGxldGUgcGF0aFxuICBcdFx0ICAgICAgLy8gc2VnbWVudCwgYXJlIHJlbW92ZWQuXG4gIFx0XHQgICAgICAvLyA2YikgSWYgdGhlIHBhdGggZW5kcyB3aXRoIFwiLlwiIGFzIGEgY29tcGxldGUgcGF0aCBzZWdtZW50LFxuICBcdFx0ICAgICAgLy8gdGhhdCBcIi5cIiBpcyByZW1vdmVkLlxuICBcdFx0ICAgICAgcGF0aCA9IHBhdGguc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKS5yZXBsYWNlKFNMQVNIX0RPVF9SRUdFWCwgJycpO1xuICBcdFx0ICAgICAgLy8gNmMpIEFsbCBvY2N1cnJlbmNlcyBvZiBcIjxzZWdtZW50Pi8uLi9cIiwgd2hlcmUgPHNlZ21lbnQ+IGlzIGFcbiAgXHRcdCAgICAgIC8vIGNvbXBsZXRlIHBhdGggc2VnbWVudCBub3QgZXF1YWwgdG8gXCIuLlwiLCBhcmUgcmVtb3ZlZC5cbiAgXHRcdCAgICAgIC8vIFJlbW92YWwgb2YgdGhlc2UgcGF0aCBzZWdtZW50cyBpcyBwZXJmb3JtZWQgaXRlcmF0aXZlbHksXG4gIFx0XHQgICAgICAvLyByZW1vdmluZyB0aGUgbGVmdG1vc3QgbWF0Y2hpbmcgcGF0dGVybiBvbiBlYWNoIGl0ZXJhdGlvbixcbiAgXHRcdCAgICAgIC8vIHVudGlsIG5vIG1hdGNoaW5nIHBhdHRlcm4gcmVtYWlucy5cbiAgXHRcdCAgICAgIC8vIDZkKSBJZiB0aGUgcGF0aCBlbmRzIHdpdGggXCI8c2VnbWVudD4vLi5cIiwgd2hlcmUgPHNlZ21lbnQ+IGlzIGFcbiAgXHRcdCAgICAgIC8vIGNvbXBsZXRlIHBhdGggc2VnbWVudCBub3QgZXF1YWwgdG8gXCIuLlwiLCB0aGF0XG4gIFx0XHQgICAgICAvLyBcIjxzZWdtZW50Pi8uLlwiIGlzIHJlbW92ZWQuXG4gIFx0XHQgICAgICB3aGlsZSAoXG4gIFx0XHQgICAgICAgIHBhdGgubGVuZ3RoICE9PSAocGF0aCA9IHBhdGgucmVwbGFjZShTTEFTSF9ET1RfRE9UX1JFR0VYLCAnJykpLmxlbmd0aFxuICBcdFx0ICAgICAgKSB7fVxuICBcdFx0ICAgICAgcmV0dXJuIHBhdGguc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKTtcbiAgXHRcdCAgICB9LFxuICBcdFx0ICAgIGJ1aWxkVVJMRnJvbVBhcnRzOiBmdW5jdGlvbiAocGFydHMpIHtcbiAgXHRcdCAgICAgIHJldHVybiAoXG4gIFx0XHQgICAgICAgIHBhcnRzLnNjaGVtZSArXG4gIFx0XHQgICAgICAgIHBhcnRzLm5ldExvYyArXG4gIFx0XHQgICAgICAgIHBhcnRzLnBhdGggK1xuICBcdFx0ICAgICAgICBwYXJ0cy5wYXJhbXMgK1xuICBcdFx0ICAgICAgICBwYXJ0cy5xdWVyeSArXG4gIFx0XHQgICAgICAgIHBhcnRzLmZyYWdtZW50XG4gIFx0XHQgICAgICApO1xuICBcdFx0ICAgIH0sXG4gIFx0XHQgIH07XG5cbiAgXHRcdCAgbW9kdWxlLmV4cG9ydHMgPSBVUkxUb29sa2l0O1xuICBcdFx0fSkoKTsgXG4gIFx0fSAodXJsVG9vbGtpdCkpO1xuICBcdHJldHVybiB1cmxUb29sa2l0LmV4cG9ydHM7XG4gIH1cblxuICB2YXIgdXJsVG9vbGtpdEV4cG9ydHMgPSByZXF1aXJlVXJsVG9vbGtpdCgpO1xuXG4gIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vbWRuLWphdmFzY3JpcHRfYnVpbHRpbnNfbnVtYmVyX2lzZmluaXRlXG4gIHZhciBpc0Zpbml0ZU51bWJlciA9IE51bWJlci5pc0Zpbml0ZSB8fCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSk7XG4gIH07XG5cbiAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS9tZG4tamF2YXNjcmlwdF9idWlsdGluc19udW1iZXJfaXNzYWZlaW50ZWdlclxuICB2YXIgaXNTYWZlSW50ZWdlciA9IE51bWJlci5pc1NhZmVJbnRlZ2VyIHx8IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIE1hdGguYWJzKHZhbHVlKSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICB9O1xuICB2YXIgTUFYX1NBRkVfSU5URUdFUiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbiAgdmFyIEVycm9yVHlwZXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKEVycm9yVHlwZXMpIHtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhIG5ldHdvcmsgZXJyb3IgKGxvYWRpbmcgZXJyb3IgLyB0aW1lb3V0IC4uLilcbiAgICBFcnJvclR5cGVzW1wiTkVUV09SS19FUlJPUlwiXSA9IFwibmV0d29ya0Vycm9yXCI7XG4gICAgLy8gSWRlbnRpZmllciBmb3IgYSBtZWRpYSBFcnJvciAodmlkZW8vcGFyc2luZy9tZWRpYXNvdXJjZSBlcnJvcilcbiAgICBFcnJvclR5cGVzW1wiTUVESUFfRVJST1JcIl0gPSBcIm1lZGlhRXJyb3JcIjtcbiAgICAvLyBFTUUgKGVuY3J5cHRlZCBtZWRpYSBleHRlbnNpb25zKSBlcnJvcnNcbiAgICBFcnJvclR5cGVzW1wiS0VZX1NZU1RFTV9FUlJPUlwiXSA9IFwia2V5U3lzdGVtRXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhIG11eCBFcnJvciAoZGVtdXhpbmcvcmVtdXhpbmcpXG4gICAgRXJyb3JUeXBlc1tcIk1VWF9FUlJPUlwiXSA9IFwibXV4RXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhbGwgb3RoZXIgZXJyb3JzXG4gICAgRXJyb3JUeXBlc1tcIk9USEVSX0VSUk9SXCJdID0gXCJvdGhlckVycm9yXCI7XG4gICAgcmV0dXJuIEVycm9yVHlwZXM7XG4gIH0oe30pO1xuICB2YXIgRXJyb3JEZXRhaWxzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChFcnJvckRldGFpbHMpIHtcbiAgICBFcnJvckRldGFpbHNbXCJLRVlfU1lTVEVNX05PX0tFWVNcIl0gPSBcImtleVN5c3RlbU5vS2V5c1wiO1xuICAgIEVycm9yRGV0YWlsc1tcIktFWV9TWVNURU1fTk9fQUNDRVNTXCJdID0gXCJrZXlTeXN0ZW1Ob0FjY2Vzc1wiO1xuICAgIEVycm9yRGV0YWlsc1tcIktFWV9TWVNURU1fTk9fU0VTU0lPTlwiXSA9IFwia2V5U3lzdGVtTm9TZXNzaW9uXCI7XG4gICAgRXJyb3JEZXRhaWxzW1wiS0VZX1NZU1RFTV9OT19DT05GSUdVUkVEX0xJQ0VOU0VcIl0gPSBcImtleVN5c3RlbU5vQ29uZmlndXJlZExpY2Vuc2VcIjtcbiAgICBFcnJvckRldGFpbHNbXCJLRVlfU1lTVEVNX0xJQ0VOU0VfUkVRVUVTVF9GQUlMRURcIl0gPSBcImtleVN5c3RlbUxpY2Vuc2VSZXF1ZXN0RmFpbGVkXCI7XG4gICAgRXJyb3JEZXRhaWxzW1wiS0VZX1NZU1RFTV9TRVJWRVJfQ0VSVElGSUNBVEVfUkVRVUVTVF9GQUlMRURcIl0gPSBcImtleVN5c3RlbVNlcnZlckNlcnRpZmljYXRlUmVxdWVzdEZhaWxlZFwiO1xuICAgIEVycm9yRGV0YWlsc1tcIktFWV9TWVNURU1fU0VSVkVSX0NFUlRJRklDQVRFX1VQREFURV9GQUlMRURcIl0gPSBcImtleVN5c3RlbVNlcnZlckNlcnRpZmljYXRlVXBkYXRlRmFpbGVkXCI7XG4gICAgRXJyb3JEZXRhaWxzW1wiS0VZX1NZU1RFTV9TRVNTSU9OX1VQREFURV9GQUlMRURcIl0gPSBcImtleVN5c3RlbVNlc3Npb25VcGRhdGVGYWlsZWRcIjtcbiAgICBFcnJvckRldGFpbHNbXCJLRVlfU1lTVEVNX1NUQVRVU19PVVRQVVRfUkVTVFJJQ1RFRFwiXSA9IFwia2V5U3lzdGVtU3RhdHVzT3V0cHV0UmVzdHJpY3RlZFwiO1xuICAgIEVycm9yRGV0YWlsc1tcIktFWV9TWVNURU1fU1RBVFVTX0lOVEVSTkFMX0VSUk9SXCJdID0gXCJrZXlTeXN0ZW1TdGF0dXNJbnRlcm5hbEVycm9yXCI7XG4gICAgRXJyb3JEZXRhaWxzW1wiS0VZX1NZU1RFTV9ERVNUUk9ZX01FRElBX0tFWVNfRVJST1JcIl0gPSBcImtleVN5c3RlbURlc3Ryb3lNZWRpYUtleXNFcnJvclwiO1xuICAgIEVycm9yRGV0YWlsc1tcIktFWV9TWVNURU1fREVTVFJPWV9DTE9TRV9TRVNTSU9OX0VSUk9SXCJdID0gXCJrZXlTeXN0ZW1EZXN0cm95Q2xvc2VTZXNzaW9uRXJyb3JcIjtcbiAgICBFcnJvckRldGFpbHNbXCJLRVlfU1lTVEVNX0RFU1RST1lfUkVNT1ZFX1NFU1NJT05fRVJST1JcIl0gPSBcImtleVN5c3RlbURlc3Ryb3lSZW1vdmVTZXNzaW9uRXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhIG1hbmlmZXN0IGxvYWQgZXJyb3IgLSBkYXRhOiB7IHVybCA6IGZhdWx0eSBVUkwsIHJlc3BvbnNlIDogeyBjb2RlOiBlcnJvciBjb2RlLCB0ZXh0OiBlcnJvciB0ZXh0IH19XG4gICAgRXJyb3JEZXRhaWxzW1wiTUFOSUZFU1RfTE9BRF9FUlJPUlwiXSA9IFwibWFuaWZlc3RMb2FkRXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhIG1hbmlmZXN0IGxvYWQgdGltZW91dCAtIGRhdGE6IHsgdXJsIDogZmF1bHR5IFVSTCwgcmVzcG9uc2UgOiB7IGNvZGU6IGVycm9yIGNvZGUsIHRleHQ6IGVycm9yIHRleHQgfX1cbiAgICBFcnJvckRldGFpbHNbXCJNQU5JRkVTVF9MT0FEX1RJTUVPVVRcIl0gPSBcIm1hbmlmZXN0TG9hZFRpbWVPdXRcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhIG1hbmlmZXN0IHBhcnNpbmcgZXJyb3IgLSBkYXRhOiB7IHVybCA6IGZhdWx0eSBVUkwsIHJlYXNvbiA6IGVycm9yIHJlYXNvbn1cbiAgICBFcnJvckRldGFpbHNbXCJNQU5JRkVTVF9QQVJTSU5HX0VSUk9SXCJdID0gXCJtYW5pZmVzdFBhcnNpbmdFcnJvclwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGEgbWFuaWZlc3Qgd2l0aCBvbmx5IGluY29tcGF0aWJsZSBjb2RlY3MgZXJyb3IgLSBkYXRhOiB7IHVybCA6IGZhdWx0eSBVUkwsIHJlYXNvbiA6IGVycm9yIHJlYXNvbn1cbiAgICBFcnJvckRldGFpbHNbXCJNQU5JRkVTVF9JTkNPTVBBVElCTEVfQ09ERUNTX0VSUk9SXCJdID0gXCJtYW5pZmVzdEluY29tcGF0aWJsZUNvZGVjc0Vycm9yXCI7XG4gICAgLy8gSWRlbnRpZmllciBmb3IgYSBsZXZlbCB3aGljaCBjb250YWlucyBubyBmcmFnbWVudHMgLSBkYXRhOiB7IHVybDogZmF1bHR5IFVSTCwgcmVhc29uOiBcIm5vIGZyYWdtZW50cyBmb3VuZCBpbiBsZXZlbFwiLCBsZXZlbDogaW5kZXggb2YgdGhlIGJhZCBsZXZlbCB9XG4gICAgRXJyb3JEZXRhaWxzW1wiTEVWRUxfRU1QVFlfRVJST1JcIl0gPSBcImxldmVsRW1wdHlFcnJvclwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGEgbGV2ZWwgbG9hZCBlcnJvciAtIGRhdGE6IHsgdXJsIDogZmF1bHR5IFVSTCwgcmVzcG9uc2UgOiB7IGNvZGU6IGVycm9yIGNvZGUsIHRleHQ6IGVycm9yIHRleHQgfX1cbiAgICBFcnJvckRldGFpbHNbXCJMRVZFTF9MT0FEX0VSUk9SXCJdID0gXCJsZXZlbExvYWRFcnJvclwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGEgbGV2ZWwgbG9hZCB0aW1lb3V0IC0gZGF0YTogeyB1cmwgOiBmYXVsdHkgVVJMLCByZXNwb25zZSA6IHsgY29kZTogZXJyb3IgY29kZSwgdGV4dDogZXJyb3IgdGV4dCB9fVxuICAgIEVycm9yRGV0YWlsc1tcIkxFVkVMX0xPQURfVElNRU9VVFwiXSA9IFwibGV2ZWxMb2FkVGltZU91dFwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGEgbGV2ZWwgcGFyc2UgZXJyb3IgLSBkYXRhOiB7IHVybCA6IGZhdWx0eSBVUkwsIGVycm9yOiBFcnJvciwgcmVhc29uOiBlcnJvciBtZXNzYWdlIH1cbiAgICBFcnJvckRldGFpbHNbXCJMRVZFTF9QQVJTSU5HX0VSUk9SXCJdID0gXCJsZXZlbFBhcnNpbmdFcnJvclwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGEgbGV2ZWwgc3dpdGNoIGVycm9yIC0gZGF0YTogeyBsZXZlbCA6IGZhdWx0eSBsZXZlbCBJZCwgZXZlbnQgOiBlcnJvciBkZXNjcmlwdGlvbn1cbiAgICBFcnJvckRldGFpbHNbXCJMRVZFTF9TV0lUQ0hfRVJST1JcIl0gPSBcImxldmVsU3dpdGNoRXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhbiBhdWRpbyB0cmFjayBsb2FkIGVycm9yIC0gZGF0YTogeyB1cmwgOiBmYXVsdHkgVVJMLCByZXNwb25zZSA6IHsgY29kZTogZXJyb3IgY29kZSwgdGV4dDogZXJyb3IgdGV4dCB9fVxuICAgIEVycm9yRGV0YWlsc1tcIkFVRElPX1RSQUNLX0xPQURfRVJST1JcIl0gPSBcImF1ZGlvVHJhY2tMb2FkRXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhbiBhdWRpbyB0cmFjayBsb2FkIHRpbWVvdXQgLSBkYXRhOiB7IHVybCA6IGZhdWx0eSBVUkwsIHJlc3BvbnNlIDogeyBjb2RlOiBlcnJvciBjb2RlLCB0ZXh0OiBlcnJvciB0ZXh0IH19XG4gICAgRXJyb3JEZXRhaWxzW1wiQVVESU9fVFJBQ0tfTE9BRF9USU1FT1VUXCJdID0gXCJhdWRpb1RyYWNrTG9hZFRpbWVPdXRcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhIHN1YnRpdGxlIHRyYWNrIGxvYWQgZXJyb3IgLSBkYXRhOiB7IHVybCA6IGZhdWx0eSBVUkwsIHJlc3BvbnNlIDogeyBjb2RlOiBlcnJvciBjb2RlLCB0ZXh0OiBlcnJvciB0ZXh0IH19XG4gICAgRXJyb3JEZXRhaWxzW1wiU1VCVElUTEVfTE9BRF9FUlJPUlwiXSA9IFwic3VidGl0bGVUcmFja0xvYWRFcnJvclwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGEgc3VidGl0bGUgdHJhY2sgbG9hZCB0aW1lb3V0IC0gZGF0YTogeyB1cmwgOiBmYXVsdHkgVVJMLCByZXNwb25zZSA6IHsgY29kZTogZXJyb3IgY29kZSwgdGV4dDogZXJyb3IgdGV4dCB9fVxuICAgIEVycm9yRGV0YWlsc1tcIlNVQlRJVExFX1RSQUNLX0xPQURfVElNRU9VVFwiXSA9IFwic3VidGl0bGVUcmFja0xvYWRUaW1lT3V0XCI7XG4gICAgLy8gSWRlbnRpZmllciBmb3IgZnJhZ21lbnQgbG9hZCBlcnJvciAtIGRhdGE6IHsgZnJhZyA6IGZyYWdtZW50IG9iamVjdCwgcmVzcG9uc2UgOiB7IGNvZGU6IGVycm9yIGNvZGUsIHRleHQ6IGVycm9yIHRleHQgfX1cbiAgICBFcnJvckRldGFpbHNbXCJGUkFHX0xPQURfRVJST1JcIl0gPSBcImZyYWdMb2FkRXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBmcmFnbWVudCBsb2FkIHRpbWVvdXQgZXJyb3IgLSBkYXRhOiB7IGZyYWcgOiBmcmFnbWVudCBvYmplY3R9XG4gICAgRXJyb3JEZXRhaWxzW1wiRlJBR19MT0FEX1RJTUVPVVRcIl0gPSBcImZyYWdMb2FkVGltZU91dFwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGEgZnJhZ21lbnQgZGVjcnlwdGlvbiBlcnJvciBldmVudCAtIGRhdGE6IHtpZCA6IGRlbXV4ZXIgSWQsZnJhZzogZnJhZ21lbnQgb2JqZWN0LCByZWFzb24gOiBwYXJzaW5nIGVycm9yIGRlc2NyaXB0aW9uIH1cbiAgICBFcnJvckRldGFpbHNbXCJGUkFHX0RFQ1JZUFRfRVJST1JcIl0gPSBcImZyYWdEZWNyeXB0RXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhIGZyYWdtZW50IHBhcnNpbmcgZXJyb3IgZXZlbnQgLSBkYXRhOiB7IGlkIDogZGVtdXhlciBJZCwgcmVhc29uIDogcGFyc2luZyBlcnJvciBkZXNjcmlwdGlvbiB9XG4gICAgLy8gd2lsbCBiZSByZW5hbWVkIERFTVVYX1BBUlNJTkdfRVJST1IgYW5kIHN3aXRjaGVkIHRvIE1VWF9FUlJPUiBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlXG4gICAgRXJyb3JEZXRhaWxzW1wiRlJBR19QQVJTSU5HX0VSUk9SXCJdID0gXCJmcmFnUGFyc2luZ0Vycm9yXCI7XG4gICAgLy8gSWRlbnRpZmllciBmb3IgYSBmcmFnbWVudCBvciBwYXJ0IGxvYWQgc2tpcHBlZCBiZWNhdXNlIG9mIGEgR0FQIHRhZyBvciBhdHRyaWJ1dGVcbiAgICBFcnJvckRldGFpbHNbXCJGUkFHX0dBUFwiXSA9IFwiZnJhZ0dhcFwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGEgcmVtdXggYWxsb2MgZXJyb3IgZXZlbnQgLSBkYXRhOiB7IGlkIDogZGVtdXhlciBJZCwgZnJhZyA6IGZyYWdtZW50IG9iamVjdCwgYnl0ZXMgOiBuYiBvZiBieXRlcyBvbiB3aGljaCBhbGxvY2F0aW9uIGZhaWxlZCAsIHJlYXNvbiA6IGVycm9yIHRleHQgfVxuICAgIEVycm9yRGV0YWlsc1tcIlJFTVVYX0FMTE9DX0VSUk9SXCJdID0gXCJyZW11eEFsbG9jRXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBkZWNyeXB0IGtleSBsb2FkIGVycm9yIC0gZGF0YTogeyBmcmFnIDogZnJhZ21lbnQgb2JqZWN0LCByZXNwb25zZSA6IHsgY29kZTogZXJyb3IgY29kZSwgdGV4dDogZXJyb3IgdGV4dCB9fVxuICAgIEVycm9yRGV0YWlsc1tcIktFWV9MT0FEX0VSUk9SXCJdID0gXCJrZXlMb2FkRXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBkZWNyeXB0IGtleSBsb2FkIHRpbWVvdXQgZXJyb3IgLSBkYXRhOiB7IGZyYWcgOiBmcmFnbWVudCBvYmplY3R9XG4gICAgRXJyb3JEZXRhaWxzW1wiS0VZX0xPQURfVElNRU9VVFwiXSA9IFwia2V5TG9hZFRpbWVPdXRcIjtcbiAgICAvLyBUcmlnZ2VyZWQgd2hlbiBhbiBleGNlcHRpb24gb2NjdXJzIHdoaWxlIGFkZGluZyBhIHNvdXJjZUJ1ZmZlciB0byBNZWRpYVNvdXJjZSAtIGRhdGEgOiB7IGVycm9yIDogZXhjZXB0aW9uICwgbWltZVR5cGUgOiBtaW1lVHlwZSB9XG4gICAgRXJyb3JEZXRhaWxzW1wiQlVGRkVSX0FERF9DT0RFQ19FUlJPUlwiXSA9IFwiYnVmZmVyQWRkQ29kZWNFcnJvclwiO1xuICAgIC8vIFRyaWdnZXJlZCB3aGVuIHNvdXJjZSBidWZmZXIocykgY291bGQgbm90IGJlIGNyZWF0ZWQgdXNpbmcgbGV2ZWwgKG1hbmlmZXN0IENPREVDUyBhdHRyaWJ1dGUpLCBwYXJzZWQgbWVkaWEsIG9yIGJlc3QgZ3Vlc3MgY29kZWMocykgLSBkYXRhOiB7IHJlYXNvbiA6IGVycm9yIHJlYXNvbiB9XG4gICAgRXJyb3JEZXRhaWxzW1wiQlVGRkVSX0lOQ09NUEFUSUJMRV9DT0RFQ1NfRVJST1JcIl0gPSBcImJ1ZmZlckluY29tcGF0aWJsZUNvZGVjc0Vycm9yXCI7XG4gICAgLy8gSWRlbnRpZmllciBmb3IgYSBidWZmZXIgYXBwZW5kIGVycm9yIC0gZGF0YTogYXBwZW5kIGVycm9yIGRlc2NyaXB0aW9uXG4gICAgRXJyb3JEZXRhaWxzW1wiQlVGRkVSX0FQUEVORF9FUlJPUlwiXSA9IFwiYnVmZmVyQXBwZW5kRXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhIGJ1ZmZlciBhcHBlbmRpbmcgZXJyb3IgZXZlbnQgLSBkYXRhOiBhcHBlbmRpbmcgZXJyb3IgZGVzY3JpcHRpb25cbiAgICBFcnJvckRldGFpbHNbXCJCVUZGRVJfQVBQRU5ESU5HX0VSUk9SXCJdID0gXCJidWZmZXJBcHBlbmRpbmdFcnJvclwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGEgYnVmZmVyIHN0YWxsZWQgZXJyb3IgZXZlbnRcbiAgICBFcnJvckRldGFpbHNbXCJCVUZGRVJfU1RBTExFRF9FUlJPUlwiXSA9IFwiYnVmZmVyU3RhbGxlZEVycm9yXCI7XG4gICAgLy8gSWRlbnRpZmllciBmb3IgYSBidWZmZXIgZnVsbCBldmVudFxuICAgIEVycm9yRGV0YWlsc1tcIkJVRkZFUl9GVUxMX0VSUk9SXCJdID0gXCJidWZmZXJGdWxsRXJyb3JcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhIGJ1ZmZlciBzZWVrIG92ZXIgaG9sZSBldmVudFxuICAgIEVycm9yRGV0YWlsc1tcIkJVRkZFUl9TRUVLX09WRVJfSE9MRVwiXSA9IFwiYnVmZmVyU2Vla092ZXJIb2xlXCI7XG4gICAgLy8gSWRlbnRpZmllciBmb3IgYSBidWZmZXIgbnVkZ2Ugb24gc3RhbGwgKHBsYXliYWNrIGlzIHN0dWNrIGFsdGhvdWdoIGN1cnJlbnRUaW1lIGlzIGluIGEgYnVmZmVyZWQgYXJlYSlcbiAgICBFcnJvckRldGFpbHNbXCJCVUZGRVJfTlVER0VfT05fU1RBTExcIl0gPSBcImJ1ZmZlck51ZGdlT25TdGFsbFwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGEgSW50ZXJzdGl0aWFsIEFzc2V0IExpc3QgbG9hZCBlcnJvciAtIGRhdGE6IHsgdXJsOiBmYXVsdHkgVVJMLCByZXNwb25zZTogeyBjb2RlOiBlcnJvciBjb2RlLCB0ZXh0OiBlcnJvciB0ZXh0IH0gfVxuICAgIEVycm9yRGV0YWlsc1tcIkFTU0VUX0xJU1RfTE9BRF9FUlJPUlwiXSA9IFwiYXNzZXRMaXN0TG9hZEVycm9yXCI7XG4gICAgLy8gSWRlbnRpZmllciBmb3IgYSBJbnRlcnN0aXRpYWwgQXNzZXQgTGlzdCBsb2FkIHRpbWVvdXQgLSBkYXRhOiB7IHVybDogZmF1bHR5IFVSTCwgcmVzcG9uc2U6IHsgY29kZTogZXJyb3IgY29kZSwgdGV4dDogZXJyb3IgdGV4dCB9IH1cbiAgICBFcnJvckRldGFpbHNbXCJBU1NFVF9MSVNUX0xPQURfVElNRU9VVFwiXSA9IFwiYXNzZXRMaXN0TG9hZFRpbWVvdXRcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhIEludGVyc3RpdGlhbCBBc3NldCBMaXN0IHBhcnNpbmcgZXJyb3IgLSBkYXRhOiB7IHVybCA6IGZhdWx0eSBVUkwsIHJlYXNvbiA6IGVycm9yIHJlYXNvbiwgcmVzcG9uc2UgOiB7IGNvZGU6IGVycm9yIGNvZGUsIHRleHQ6IGVycm9yIHRleHQgfX1cbiAgICBFcnJvckRldGFpbHNbXCJBU1NFVF9MSVNUX1BBUlNJTkdfRVJST1JcIl0gPSBcImFzc2V0TGlzdFBhcnNpbmdFcnJvclwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGEgSW50ZXJzdGl0aWFsIEFzc2V0IExpc3QgcGFyc2luZyBlcnJvciAtIGRhdGE6IHsgdXJsIDogZmF1bHR5IFVSTCwgcmVhc29uIDogZXJyb3IgcmVhc29uLCByZXNwb25zZSA6IHsgY29kZTogZXJyb3IgY29kZSwgdGV4dDogZXJyb3IgdGV4dCB9fVxuICAgIEVycm9yRGV0YWlsc1tcIklOVEVSU1RJVElBTF9BU1NFVF9JVEVNX0VSUk9SXCJdID0gXCJpbnRlcnN0aXRpYWxBc3NldEl0ZW1FcnJvclwiO1xuICAgIC8vIElkZW50aWZpZXIgZm9yIGFuIGludGVybmFsIGV4Y2VwdGlvbiBoYXBwZW5pbmcgaW5zaWRlIGhscy5qcyB3aGlsZSBoYW5kbGluZyBhbiBldmVudFxuICAgIEVycm9yRGV0YWlsc1tcIklOVEVSTkFMX0VYQ0VQVElPTlwiXSA9IFwiaW50ZXJuYWxFeGNlcHRpb25cIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhbiBpbnRlcm5hbCBjYWxsIHRvIGFib3J0IGEgbG9hZGVyXG4gICAgRXJyb3JEZXRhaWxzW1wiSU5URVJOQUxfQUJPUlRFRFwiXSA9IFwiYWJvcnRlZFwiO1xuICAgIC8vIFRyaWdnZXJlZCB3aGVuIGF0dGFjaE1lZGlhIGZhaWxzXG4gICAgRXJyb3JEZXRhaWxzW1wiQVRUQUNIX01FRElBX0VSUk9SXCJdID0gXCJhdHRhY2hNZWRpYUVycm9yXCI7XG4gICAgLy8gVW5jYXRlZ29yaXplZCBlcnJvclxuICAgIEVycm9yRGV0YWlsc1tcIlVOS05PV05cIl0gPSBcInVua25vd25cIjtcbiAgICByZXR1cm4gRXJyb3JEZXRhaWxzO1xuICB9KHt9KTtcblxuICB2YXIgRXZlbnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChFdmVudHMpIHtcbiAgICAvLyBGaXJlZCBiZWZvcmUgTWVkaWFTb3VyY2UgaXMgYXR0YWNoaW5nIHRvIG1lZGlhIGVsZW1lbnRcbiAgICBFdmVudHNbXCJNRURJQV9BVFRBQ0hJTkdcIl0gPSBcImhsc01lZGlhQXR0YWNoaW5nXCI7XG4gICAgLy8gRmlyZWQgd2hlbiBNZWRpYVNvdXJjZSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgYXR0YWNoZWQgdG8gbWVkaWEgZWxlbWVudFxuICAgIEV2ZW50c1tcIk1FRElBX0FUVEFDSEVEXCJdID0gXCJobHNNZWRpYUF0dGFjaGVkXCI7XG4gICAgLy8gRmlyZWQgYmVmb3JlIGRldGFjaGluZyBNZWRpYVNvdXJjZSBmcm9tIG1lZGlhIGVsZW1lbnRcbiAgICBFdmVudHNbXCJNRURJQV9ERVRBQ0hJTkdcIl0gPSBcImhsc01lZGlhRGV0YWNoaW5nXCI7XG4gICAgLy8gRmlyZWQgd2hlbiBNZWRpYVNvdXJjZSBoYXMgYmVlbiBkZXRhY2hlZCBmcm9tIG1lZGlhIGVsZW1lbnRcbiAgICBFdmVudHNbXCJNRURJQV9ERVRBQ0hFRFwiXSA9IFwiaGxzTWVkaWFEZXRhY2hlZFwiO1xuICAgIC8vIEZpcmVkIHdoZW4gSFRNTE1lZGlhRWxlbWVudCBkaXNwYXRjaGVzIFwiZW5kZWRcIiBldmVudCwgb3Igc3RhbGxzIGF0IGVuZCBvZiBWT0QgcHJvZ3JhbVxuICAgIEV2ZW50c1tcIk1FRElBX0VOREVEXCJdID0gXCJobHNNZWRpYUVuZGVkXCI7XG4gICAgLy8gRmlyZWQgYWZ0ZXIgcGxheWJhY2sgc3RhbGwgaXMgcmVzb2x2ZWQgd2l0aCBwbGF5aW5nLCBzZWVrZWQsIG9yIGVuZGVkIGV2ZW50IGZvbGxvd2luZyBCVUZGRVJfU1RBTExFRF9FUlJPUlxuICAgIEV2ZW50c1tcIlNUQUxMX1JFU09MVkVEXCJdID0gXCJobHNTdGFsbFJlc29sdmVkXCI7XG4gICAgLy8gRmlyZWQgd2hlbiB0aGUgYnVmZmVyIGlzIGdvaW5nIHRvIGJlIHJlc2V0XG4gICAgRXZlbnRzW1wiQlVGRkVSX1JFU0VUXCJdID0gXCJobHNCdWZmZXJSZXNldFwiO1xuICAgIC8vIEZpcmVkIHdoZW4gd2Uga25vdyBhYm91dCB0aGUgY29kZWNzIHRoYXQgd2UgbmVlZCBidWZmZXJzIGZvciB0byBwdXNoIGludG8gLSBkYXRhOiB7dHJhY2tzIDogeyBjb250YWluZXIsIGNvZGVjLCBsZXZlbENvZGVjLCBpbml0U2VnbWVudCwgbWV0YWRhdGEgfX1cbiAgICBFdmVudHNbXCJCVUZGRVJfQ09ERUNTXCJdID0gXCJobHNCdWZmZXJDb2RlY3NcIjtcbiAgICAvLyBmaXJlZCB3aGVuIHNvdXJjZWJ1ZmZlcnMgaGF2ZSBiZWVuIGNyZWF0ZWQgLSBkYXRhOiB7IHRyYWNrcyA6IHRyYWNrcyB9XG4gICAgRXZlbnRzW1wiQlVGRkVSX0NSRUFURURcIl0gPSBcImhsc0J1ZmZlckNyZWF0ZWRcIjtcbiAgICAvLyBmaXJlZCB3aGVuIHdlIGFwcGVuZCBhIHNlZ21lbnQgdG8gdGhlIGJ1ZmZlciAtIGRhdGE6IHsgc2VnbWVudDogc2VnbWVudCBvYmplY3QgfVxuICAgIEV2ZW50c1tcIkJVRkZFUl9BUFBFTkRJTkdcIl0gPSBcImhsc0J1ZmZlckFwcGVuZGluZ1wiO1xuICAgIC8vIGZpcmVkIHdoZW4gd2UgYXJlIGRvbmUgd2l0aCBhcHBlbmRpbmcgYSBtZWRpYSBzZWdtZW50IHRvIHRoZSBidWZmZXIgLSBkYXRhIDogeyBwYXJlbnQgOiBzZWdtZW50IHBhcmVudCB0aGF0IHRyaWdnZXJlZCBCVUZGRVJfQVBQRU5ESU5HLCBwZW5kaW5nIDogbmIgb2Ygc2VnbWVudHMgd2FpdGluZyBmb3IgYXBwZW5kaW5nIGZvciB0aGlzIHNlZ21lbnQgcGFyZW50fVxuICAgIEV2ZW50c1tcIkJVRkZFUl9BUFBFTkRFRFwiXSA9IFwiaGxzQnVmZmVyQXBwZW5kZWRcIjtcbiAgICAvLyBmaXJlZCB3aGVuIHRoZSBzdHJlYW0gaXMgZmluaXNoZWQgYW5kIHdlIHdhbnQgdG8gbm90aWZ5IHRoZSBtZWRpYSBidWZmZXIgdGhhdCB0aGVyZSB3aWxsIGJlIG5vIG1vcmUgZGF0YSAtIGRhdGE6IHsgfVxuICAgIEV2ZW50c1tcIkJVRkZFUl9FT1NcIl0gPSBcImhsc0J1ZmZlckVvc1wiO1xuICAgIC8vIGZpcmVkIHdoZW4gYWxsIGJ1ZmZlcnMgYXJlIGZ1bGwgdG8gdGhlIGVuZCBvZiB0aGUgcHJvZ3JhbSwgYWZ0ZXIgY2FsbGluZyBNZWRpYVNvdXJjZS5lbmRPZlN0cmVhbSgpICh1bmxlc3MgcmVzdHJpY3RlZClcbiAgICBFdmVudHNbXCJCVUZGRVJFRF9UT19FTkRcIl0gPSBcImhsc0J1ZmZlcmVkVG9FbmRcIjtcbiAgICAvLyBmaXJlZCB3aGVuIHRoZSBtZWRpYSBidWZmZXIgc2hvdWxkIGJlIGZsdXNoZWQgLSBkYXRhIHsgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCB9XG4gICAgRXZlbnRzW1wiQlVGRkVSX0ZMVVNISU5HXCJdID0gXCJobHNCdWZmZXJGbHVzaGluZ1wiO1xuICAgIC8vIGZpcmVkIHdoZW4gdGhlIG1lZGlhIGJ1ZmZlciBoYXMgYmVlbiBmbHVzaGVkIC0gZGF0YTogeyB9XG4gICAgRXZlbnRzW1wiQlVGRkVSX0ZMVVNIRURcIl0gPSBcImhsc0J1ZmZlckZsdXNoZWRcIjtcbiAgICAvLyBmaXJlZCB0byBzaWduYWwgdGhhdCBhIG1hbmlmZXN0IGxvYWRpbmcgc3RhcnRzIC0gZGF0YTogeyB1cmwgOiBtYW5pZmVzdFVSTH1cbiAgICBFdmVudHNbXCJNQU5JRkVTVF9MT0FESU5HXCJdID0gXCJobHNNYW5pZmVzdExvYWRpbmdcIjtcbiAgICAvLyBmaXJlZCBhZnRlciBtYW5pZmVzdCBoYXMgYmVlbiBsb2FkZWQgLSBkYXRhOiB7IGxldmVscyA6IFthdmFpbGFibGUgcXVhbGl0eSBsZXZlbHNdLCBhdWRpb1RyYWNrcyA6IFsgYXZhaWxhYmxlIGF1ZGlvIHRyYWNrcyBdLCB1cmwgOiBtYW5pZmVzdFVSTCwgc3RhdHMgOiBMb2FkZXJTdGF0cyB9XG4gICAgRXZlbnRzW1wiTUFOSUZFU1RfTE9BREVEXCJdID0gXCJobHNNYW5pZmVzdExvYWRlZFwiO1xuICAgIC8vIGZpcmVkIGFmdGVyIG1hbmlmZXN0IGhhcyBiZWVuIHBhcnNlZCAtIGRhdGE6IHsgbGV2ZWxzIDogW2F2YWlsYWJsZSBxdWFsaXR5IGxldmVsc10sIGZpcnN0TGV2ZWwgOiBpbmRleCBvZiBmaXJzdCBxdWFsaXR5IGxldmVsIGFwcGVhcmluZyBpbiBNYW5pZmVzdH1cbiAgICBFdmVudHNbXCJNQU5JRkVTVF9QQVJTRURcIl0gPSBcImhsc01hbmlmZXN0UGFyc2VkXCI7XG4gICAgLy8gZmlyZWQgd2hlbiBhIGxldmVsIHN3aXRjaCBpcyByZXF1ZXN0ZWQgLSBkYXRhOiB7IGxldmVsIDogaWQgb2YgbmV3IGxldmVsIH1cbiAgICBFdmVudHNbXCJMRVZFTF9TV0lUQ0hJTkdcIl0gPSBcImhsc0xldmVsU3dpdGNoaW5nXCI7XG4gICAgLy8gZmlyZWQgd2hlbiBhIGxldmVsIHN3aXRjaCBpcyBlZmZlY3RpdmUgLSBkYXRhOiB7IGxldmVsIDogaWQgb2YgbmV3IGxldmVsIH1cbiAgICBFdmVudHNbXCJMRVZFTF9TV0lUQ0hFRFwiXSA9IFwiaGxzTGV2ZWxTd2l0Y2hlZFwiO1xuICAgIC8vIGZpcmVkIHdoZW4gYSBsZXZlbCBwbGF5bGlzdCBsb2FkaW5nIHN0YXJ0cyAtIGRhdGE6IHsgdXJsIDogbGV2ZWwgVVJMLCBsZXZlbCA6IGlkIG9mIGxldmVsIGJlaW5nIGxvYWRlZH1cbiAgICBFdmVudHNbXCJMRVZFTF9MT0FESU5HXCJdID0gXCJobHNMZXZlbExvYWRpbmdcIjtcbiAgICAvLyBmaXJlZCB3aGVuIGEgbGV2ZWwgcGxheWxpc3QgbG9hZGluZyBmaW5pc2hlcyAtIGRhdGE6IHsgZGV0YWlscyA6IGxldmVsRGV0YWlscyBvYmplY3QsIGxldmVsIDogaWQgb2YgbG9hZGVkIGxldmVsLCBzdGF0cyA6IExvYWRlclN0YXRzIH1cbiAgICBFdmVudHNbXCJMRVZFTF9MT0FERURcIl0gPSBcImhsc0xldmVsTG9hZGVkXCI7XG4gICAgLy8gZmlyZWQgd2hlbiBhIGxldmVsJ3MgZGV0YWlscyBoYXZlIGJlZW4gdXBkYXRlZCBiYXNlZCBvbiBwcmV2aW91cyBkZXRhaWxzLCBhZnRlciBpdCBoYXMgYmVlbiBsb2FkZWQgLSBkYXRhOiB7IGRldGFpbHMgOiBsZXZlbERldGFpbHMgb2JqZWN0LCBsZXZlbCA6IGlkIG9mIHVwZGF0ZWQgbGV2ZWwgfVxuICAgIEV2ZW50c1tcIkxFVkVMX1VQREFURURcIl0gPSBcImhsc0xldmVsVXBkYXRlZFwiO1xuICAgIC8vIGZpcmVkIHdoZW4gYSBsZXZlbCdzIFBUUyBpbmZvcm1hdGlvbiBoYXMgYmVlbiB1cGRhdGVkIGFmdGVyIHBhcnNpbmcgYSBmcmFnbWVudCAtIGRhdGE6IHsgZGV0YWlscyA6IGxldmVsRGV0YWlscyBvYmplY3QsIGxldmVsIDogaWQgb2YgdXBkYXRlZCBsZXZlbCwgZHJpZnQ6IFBUUyBkcmlmdCBvYnNlcnZlZCB3aGVuIHBhcnNpbmcgbGFzdCBmcmFnbWVudCB9XG4gICAgRXZlbnRzW1wiTEVWRUxfUFRTX1VQREFURURcIl0gPSBcImhsc0xldmVsUHRzVXBkYXRlZFwiO1xuICAgIC8vIGZpcmVkIHRvIG5vdGlmeSB0aGF0IGxldmVscyBoYXZlIGNoYW5nZWQgYWZ0ZXIgcmVtb3ZpbmcgYSBsZXZlbCAtIGRhdGE6IHsgbGV2ZWxzIDogW2F2YWlsYWJsZSBxdWFsaXR5IGxldmVsc10gfVxuICAgIEV2ZW50c1tcIkxFVkVMU19VUERBVEVEXCJdID0gXCJobHNMZXZlbHNVcGRhdGVkXCI7XG4gICAgLy8gZmlyZWQgdG8gbm90aWZ5IHRoYXQgYXVkaW8gdHJhY2sgbGlzdHMgaGFzIGJlZW4gdXBkYXRlZCAtIGRhdGE6IHsgYXVkaW9UcmFja3MgOiBhdWRpb1RyYWNrcyB9XG4gICAgRXZlbnRzW1wiQVVESU9fVFJBQ0tTX1VQREFURURcIl0gPSBcImhsc0F1ZGlvVHJhY2tzVXBkYXRlZFwiO1xuICAgIC8vIGZpcmVkIHdoZW4gYW4gYXVkaW8gdHJhY2sgc3dpdGNoaW5nIGlzIHJlcXVlc3RlZCAtIGRhdGE6IHsgaWQgOiBhdWRpbyB0cmFjayBpZCB9XG4gICAgRXZlbnRzW1wiQVVESU9fVFJBQ0tfU1dJVENISU5HXCJdID0gXCJobHNBdWRpb1RyYWNrU3dpdGNoaW5nXCI7XG4gICAgLy8gZmlyZWQgd2hlbiBhbiBhdWRpbyB0cmFjayBzd2l0Y2ggYWN0dWFsbHkgb2NjdXJzIC0gZGF0YTogeyBpZCA6IGF1ZGlvIHRyYWNrIGlkIH1cbiAgICBFdmVudHNbXCJBVURJT19UUkFDS19TV0lUQ0hFRFwiXSA9IFwiaGxzQXVkaW9UcmFja1N3aXRjaGVkXCI7XG4gICAgLy8gZmlyZWQgd2hlbiBhbiBhdWRpbyB0cmFjayBsb2FkaW5nIHN0YXJ0cyAtIGRhdGE6IHsgdXJsIDogYXVkaW8gdHJhY2sgVVJMLCBpZCA6IGF1ZGlvIHRyYWNrIGlkIH1cbiAgICBFdmVudHNbXCJBVURJT19UUkFDS19MT0FESU5HXCJdID0gXCJobHNBdWRpb1RyYWNrTG9hZGluZ1wiO1xuICAgIC8vIGZpcmVkIHdoZW4gYW4gYXVkaW8gdHJhY2sgbG9hZGluZyBmaW5pc2hlcyAtIGRhdGE6IHsgZGV0YWlscyA6IGxldmVsRGV0YWlscyBvYmplY3QsIGlkIDogYXVkaW8gdHJhY2sgaWQsIHN0YXRzIDogTG9hZGVyU3RhdHMgfVxuICAgIEV2ZW50c1tcIkFVRElPX1RSQUNLX0xPQURFRFwiXSA9IFwiaGxzQXVkaW9UcmFja0xvYWRlZFwiO1xuICAgIC8vIGZpcmVkIHdoZW4gYW4gYXVkaW8gdHJhY2tzJ3MgZGV0YWlscyBoYXZlIGJlZW4gdXBkYXRlZCBiYXNlZCBvbiBwcmV2aW91cyBkZXRhaWxzLCBhZnRlciBpdCBoYXMgYmVlbiBsb2FkZWQgLSBkYXRhOiB7IGRldGFpbHMgOiBsZXZlbERldGFpbHMgb2JqZWN0LCBpZCA6IHRyYWNrIGlkIH1cbiAgICBFdmVudHNbXCJBVURJT19UUkFDS19VUERBVEVEXCJdID0gXCJobHNBdWRpb1RyYWNrVXBkYXRlZFwiO1xuICAgIC8vIGZpcmVkIHRvIG5vdGlmeSB0aGF0IHN1YnRpdGxlIHRyYWNrIGxpc3RzIGhhcyBiZWVuIHVwZGF0ZWQgLSBkYXRhOiB7IHN1YnRpdGxlVHJhY2tzIDogc3VidGl0bGVUcmFja3MgfVxuICAgIEV2ZW50c1tcIlNVQlRJVExFX1RSQUNLU19VUERBVEVEXCJdID0gXCJobHNTdWJ0aXRsZVRyYWNrc1VwZGF0ZWRcIjtcbiAgICAvLyBmaXJlZCB0byBub3RpZnkgdGhhdCBzdWJ0aXRsZSB0cmFja3Mgd2VyZSBjbGVhcmVkIGFzIGEgcmVzdWx0IG9mIHN0b3BwaW5nIHRoZSBtZWRpYVxuICAgIEV2ZW50c1tcIlNVQlRJVExFX1RSQUNLU19DTEVBUkVEXCJdID0gXCJobHNTdWJ0aXRsZVRyYWNrc0NsZWFyZWRcIjtcbiAgICAvLyBmaXJlZCB3aGVuIGFuIHN1YnRpdGxlIHRyYWNrIHN3aXRjaCBvY2N1cnMgLSBkYXRhOiB7IGlkIDogc3VidGl0bGUgdHJhY2sgaWQgfVxuICAgIEV2ZW50c1tcIlNVQlRJVExFX1RSQUNLX1NXSVRDSFwiXSA9IFwiaGxzU3VidGl0bGVUcmFja1N3aXRjaFwiO1xuICAgIC8vIGZpcmVkIHdoZW4gYSBzdWJ0aXRsZSB0cmFjayBsb2FkaW5nIHN0YXJ0cyAtIGRhdGE6IHsgdXJsIDogc3VidGl0bGUgdHJhY2sgVVJMLCBpZCA6IHN1YnRpdGxlIHRyYWNrIGlkIH1cbiAgICBFdmVudHNbXCJTVUJUSVRMRV9UUkFDS19MT0FESU5HXCJdID0gXCJobHNTdWJ0aXRsZVRyYWNrTG9hZGluZ1wiO1xuICAgIC8vIGZpcmVkIHdoZW4gYSBzdWJ0aXRsZSB0cmFjayBsb2FkaW5nIGZpbmlzaGVzIC0gZGF0YTogeyBkZXRhaWxzIDogbGV2ZWxEZXRhaWxzIG9iamVjdCwgaWQgOiBzdWJ0aXRsZSB0cmFjayBpZCwgc3RhdHMgOiBMb2FkZXJTdGF0cyB9XG4gICAgRXZlbnRzW1wiU1VCVElUTEVfVFJBQ0tfTE9BREVEXCJdID0gXCJobHNTdWJ0aXRsZVRyYWNrTG9hZGVkXCI7XG4gICAgLy8gZmlyZWQgd2hlbiBhIHN1YnRpdGxlICByYWNrcydzIGRldGFpbHMgaGF2ZSBiZWVuIHVwZGF0ZWQgYmFzZWQgb24gcHJldmlvdXMgZGV0YWlscywgYWZ0ZXIgaXQgaGFzIGJlZW4gbG9hZGVkIC0gZGF0YTogeyBkZXRhaWxzIDogbGV2ZWxEZXRhaWxzIG9iamVjdCwgaWQgOiB0cmFjayBpZCB9XG4gICAgRXZlbnRzW1wiU1VCVElUTEVfVFJBQ0tfVVBEQVRFRFwiXSA9IFwiaGxzU3VidGl0bGVUcmFja1VwZGF0ZWRcIjtcbiAgICAvLyBmaXJlZCB3aGVuIGEgc3VidGl0bGUgZnJhZ21lbnQgaGFzIGJlZW4gcHJvY2Vzc2VkIC0gZGF0YTogeyBzdWNjZXNzIDogYm9vbGVhbiwgZnJhZyA6IHRoZSBwcm9jZXNzZWQgZnJhZyB9XG4gICAgRXZlbnRzW1wiU1VCVElUTEVfRlJBR19QUk9DRVNTRURcIl0gPSBcImhsc1N1YnRpdGxlRnJhZ1Byb2Nlc3NlZFwiO1xuICAgIC8vIGZpcmVkIHdoZW4gYSBzZXQgb2YgVlRUQ3VlcyB0byBiZSBtYW5hZ2VkIGV4dGVybmFsbHkgaGFzIGJlZW4gcGFyc2VkIC0gZGF0YTogeyB0eXBlOiBzdHJpbmcsIHRyYWNrOiBzdHJpbmcsIGN1ZXM6IFsgVlRUQ3VlIF0gfVxuICAgIEV2ZW50c1tcIkNVRVNfUEFSU0VEXCJdID0gXCJobHNDdWVzUGFyc2VkXCI7XG4gICAgLy8gZmlyZWQgd2hlbiBhIHRleHQgdHJhY2sgdG8gYmUgbWFuYWdlZCBleHRlcm5hbGx5IGlzIGZvdW5kIC0gZGF0YTogeyB0cmFja3M6IFsgeyBsYWJlbDogc3RyaW5nLCBraW5kOiBzdHJpbmcsIGRlZmF1bHQ6IGJvb2xlYW4gfSBdIH1cbiAgICBFdmVudHNbXCJOT05fTkFUSVZFX1RFWFRfVFJBQ0tTX0ZPVU5EXCJdID0gXCJobHNOb25OYXRpdmVUZXh0VHJhY2tzRm91bmRcIjtcbiAgICAvLyBmaXJlZCB3aGVuIHRoZSBmaXJzdCB0aW1lc3RhbXAgaXMgZm91bmQgLSBkYXRhOiB7IGlkIDogZGVtdXhlciBpZCwgaW5pdFBUUzogaW5pdFBUUywgdGltZXNjYWxlOiB0aW1lc2NhbGUsIGZyYWcgOiBmcmFnbWVudCBvYmplY3QgfVxuICAgIEV2ZW50c1tcIklOSVRfUFRTX0ZPVU5EXCJdID0gXCJobHNJbml0UHRzRm91bmRcIjtcbiAgICAvLyBmaXJlZCB3aGVuIGEgZnJhZ21lbnQgbG9hZGluZyBzdGFydHMgLSBkYXRhOiB7IGZyYWcgOiBmcmFnbWVudCBvYmplY3QgfVxuICAgIEV2ZW50c1tcIkZSQUdfTE9BRElOR1wiXSA9IFwiaGxzRnJhZ0xvYWRpbmdcIjtcbiAgICAvLyBmaXJlZCB3aGVuIGEgZnJhZ21lbnQgbG9hZGluZyBpcyBwcm9ncmVzc2luZyAtIGRhdGE6IHsgZnJhZyA6IGZyYWdtZW50IG9iamVjdCwgeyB0cmVxdWVzdCwgdGZpcnN0LCBsb2FkZWQgfSB9XG4gICAgLy8gRlJBR19MT0FEX1BST0dSRVNTID0gJ2hsc0ZyYWdMb2FkUHJvZ3Jlc3MnLFxuICAgIC8vIElkZW50aWZpZXIgZm9yIGZyYWdtZW50IGxvYWQgYWJvcnRpbmcgZm9yIGVtZXJnZW5jeSBzd2l0Y2ggZG93biAtIGRhdGE6IHsgZnJhZyA6IGZyYWdtZW50IG9iamVjdCB9XG4gICAgRXZlbnRzW1wiRlJBR19MT0FEX0VNRVJHRU5DWV9BQk9SVEVEXCJdID0gXCJobHNGcmFnTG9hZEVtZXJnZW5jeUFib3J0ZWRcIjtcbiAgICAvLyBmaXJlZCB3aGVuIGEgZnJhZ21lbnQgbG9hZGluZyBpcyBjb21wbGV0ZWQgLSBkYXRhOiB7IGZyYWcgOiBmcmFnbWVudCBvYmplY3QsIHBheWxvYWQgOiBmcmFnbWVudCBwYXlsb2FkLCBzdGF0cyA6IExvYWRlclN0YXRzIH1cbiAgICBFdmVudHNbXCJGUkFHX0xPQURFRFwiXSA9IFwiaGxzRnJhZ0xvYWRlZFwiO1xuICAgIC8vIGZpcmVkIHdoZW4gYSBmcmFnbWVudCBoYXMgZmluaXNoZWQgZGVjcnlwdGluZyAtIGRhdGE6IHsgaWQgOiBkZW11eGVyIGlkLCBmcmFnOiBmcmFnbWVudCBvYmplY3QsIHBheWxvYWQgOiBmcmFnbWVudCBwYXlsb2FkLCBzdGF0cyA6IHsgdHN0YXJ0LCB0ZGVjcnlwdCB9IH1cbiAgICBFdmVudHNbXCJGUkFHX0RFQ1JZUFRFRFwiXSA9IFwiaGxzRnJhZ0RlY3J5cHRlZFwiO1xuICAgIC8vIGZpcmVkIHdoZW4gSW5pdCBTZWdtZW50IGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIGZyYWdtZW50IC0gZGF0YTogeyBpZCA6IGRlbXV4ZXIgaWQsIGZyYWc6IGZyYWdtZW50IG9iamVjdCwgbW9vdiA6IG1vb3YgTVA0IGJveCwgY29kZWNzIDogY29kZWNzIGZvdW5kIHdoaWxlIHBhcnNpbmcgZnJhZ21lbnQgfVxuICAgIEV2ZW50c1tcIkZSQUdfUEFSU0lOR19JTklUX1NFR01FTlRcIl0gPSBcImhsc0ZyYWdQYXJzaW5nSW5pdFNlZ21lbnRcIjtcbiAgICAvLyBmaXJlZCB3aGVuIHBhcnNpbmcgc2VpIHRleHQgaXMgY29tcGxldGVkIC0gZGF0YTogeyBpZCA6IGRlbXV4ZXIgaWQsIGZyYWc6IGZyYWdtZW50IG9iamVjdCwgc2FtcGxlcyA6IFsgc2VpIHNhbXBsZXMgcGVzIF0gfVxuICAgIEV2ZW50c1tcIkZSQUdfUEFSU0lOR19VU0VSREFUQVwiXSA9IFwiaGxzRnJhZ1BhcnNpbmdVc2VyZGF0YVwiO1xuICAgIC8vIGZpcmVkIHdoZW4gcGFyc2luZyBpZDMgaXMgY29tcGxldGVkIC0gZGF0YTogeyBpZCA6IGRlbXV4ZXIgaWQsIGZyYWc6IGZyYWdtZW50IG9iamVjdCwgc2FtcGxlcyA6IFsgaWQzIHNhbXBsZXMgcGVzIF0gfVxuICAgIEV2ZW50c1tcIkZSQUdfUEFSU0lOR19NRVRBREFUQVwiXSA9IFwiaGxzRnJhZ1BhcnNpbmdNZXRhZGF0YVwiO1xuICAgIC8vIGZpcmVkIHdoZW4gZGF0YSBoYXZlIGJlZW4gZXh0cmFjdGVkIGZyb20gZnJhZ21lbnQgLSBkYXRhOiB7IGlkIDogZGVtdXhlciBpZCwgZnJhZzogZnJhZ21lbnQgb2JqZWN0LCBkYXRhMSA6IG1vb2YgTVA0IGJveCBvciBUUyBmcmFnbWVudHMsIGRhdGEyIDogbWRhdCBNUDQgYm94IG9yIG51bGx9XG4gICAgLy8gRlJBR19QQVJTSU5HX0RBVEEgPSAnaGxzRnJhZ1BhcnNpbmdEYXRhJyxcbiAgICAvLyBmaXJlZCB3aGVuIGZyYWdtZW50IHBhcnNpbmcgaXMgY29tcGxldGVkIC0gZGF0YTogeyBpZCA6IGRlbXV4ZXIgaWQsIGZyYWc6IGZyYWdtZW50IG9iamVjdCB9XG4gICAgRXZlbnRzW1wiRlJBR19QQVJTRURcIl0gPSBcImhsc0ZyYWdQYXJzZWRcIjtcbiAgICAvLyBmaXJlZCB3aGVuIGZyYWdtZW50IHJlbXV4ZWQgTVA0IGJveGVzIGhhdmUgYWxsIGJlZW4gYXBwZW5kZWQgaW50byBTb3VyY2VCdWZmZXIgLSBkYXRhOiB7IGlkIDogZGVtdXhlciBpZCwgZnJhZyA6IGZyYWdtZW50IG9iamVjdCwgc3RhdHMgOiBMb2FkZXJTdGF0cyB9XG4gICAgRXZlbnRzW1wiRlJBR19CVUZGRVJFRFwiXSA9IFwiaGxzRnJhZ0J1ZmZlcmVkXCI7XG4gICAgLy8gZmlyZWQgd2hlbiBmcmFnbWVudCBtYXRjaGluZyB3aXRoIGN1cnJlbnQgbWVkaWEgcG9zaXRpb24gaXMgY2hhbmdpbmcgLSBkYXRhIDogeyBpZCA6IGRlbXV4ZXIgaWQsIGZyYWcgOiBmcmFnbWVudCBvYmplY3QgfVxuICAgIEV2ZW50c1tcIkZSQUdfQ0hBTkdFRFwiXSA9IFwiaGxzRnJhZ0NoYW5nZWRcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhIEZQUyBkcm9wIGV2ZW50IC0gZGF0YTogeyBjdXJyZW50RHJvcHBlZCwgY3VycmVudERlY29kZWQsIHRvdGFsRHJvcHBlZEZyYW1lcyB9XG4gICAgRXZlbnRzW1wiRlBTX0RST1BcIl0gPSBcImhsc0Zwc0Ryb3BcIjtcbiAgICAvLyB0cmlnZ2VyZWQgd2hlbiBGUFMgZHJvcCB0cmlnZ2VycyBhdXRvIGxldmVsIGNhcHBpbmcgLSBkYXRhOiB7IGxldmVsLCBkcm9wcGVkTGV2ZWwgfVxuICAgIEV2ZW50c1tcIkZQU19EUk9QX0xFVkVMX0NBUFBJTkdcIl0gPSBcImhsc0Zwc0Ryb3BMZXZlbENhcHBpbmdcIjtcbiAgICAvLyB0cmlnZ2VyZWQgd2hlbiBtYXhBdXRvTGV2ZWwgY2hhbmdlcyAtIGRhdGEgeyBhdXRvTGV2ZWxDYXBwaW5nLCBsZXZlbHMsIG1heEF1dG9MZXZlbCwgbWluQXV0b0xldmVsLCBtYXhIZGNwTGV2ZWwgfVxuICAgIEV2ZW50c1tcIk1BWF9BVVRPX0xFVkVMX1VQREFURURcIl0gPSBcImhsc01heEF1dG9MZXZlbFVwZGF0ZWRcIjtcbiAgICAvLyBJZGVudGlmaWVyIGZvciBhbiBlcnJvciBldmVudCAtIGRhdGE6IHsgdHlwZSA6IGVycm9yIHR5cGUsIGRldGFpbHMgOiBlcnJvciBkZXRhaWxzLCBmYXRhbCA6IGlmIHRydWUsIGhscy5qcyBjYW5ub3Qvd2lsbCBub3QgdHJ5IHRvIHJlY292ZXIsIGlmIGZhbHNlLCBobHMuanMgd2lsbCB0cnkgdG8gcmVjb3ZlcixvdGhlciBlcnJvciBzcGVjaWZpYyBkYXRhIH1cbiAgICBFdmVudHNbXCJFUlJPUlwiXSA9IFwiaGxzRXJyb3JcIjtcbiAgICAvLyBmaXJlZCB3aGVuIGhscy5qcyBpbnN0YW5jZSBzdGFydHMgZGVzdHJveWluZy4gRGlmZmVyZW50IGZyb20gTUVESUFfREVUQUNIRUQgYXMgb25lIGNvdWxkIHdhbnQgdG8gZGV0YWNoIGFuZCByZWF0dGFjaCBhIG1lZGlhIHRvIHRoZSBpbnN0YW5jZSBvZiBobHMuanMgdG8gaGFuZGxlIG1pZC1yb2xscyBmb3IgZXhhbXBsZSAtIGRhdGE6IHsgfVxuICAgIEV2ZW50c1tcIkRFU1RST1lJTkdcIl0gPSBcImhsc0Rlc3Ryb3lpbmdcIjtcbiAgICAvLyBmaXJlZCB3aGVuIGEgZGVjcnlwdCBrZXkgbG9hZGluZyBzdGFydHMgLSBkYXRhOiB7IGZyYWcgOiBmcmFnbWVudCBvYmplY3QgfVxuICAgIEV2ZW50c1tcIktFWV9MT0FESU5HXCJdID0gXCJobHNLZXlMb2FkaW5nXCI7XG4gICAgLy8gZmlyZWQgd2hlbiBhIGRlY3J5cHQga2V5IGxvYWRpbmcgaXMgY29tcGxldGVkIC0gZGF0YTogeyBmcmFnIDogZnJhZ21lbnQgb2JqZWN0LCBrZXlJbmZvIDogS2V5TG9hZGVySW5mbyB9XG4gICAgRXZlbnRzW1wiS0VZX0xPQURFRFwiXSA9IFwiaGxzS2V5TG9hZGVkXCI7XG4gICAgLy8gZGVwcmVjYXRlZDsgcGxlYXNlIHVzZSBCQUNLX0JVRkZFUl9SRUFDSEVEIC0gZGF0YSA6IHsgYnVmZmVyRW5kOiBudW1iZXIgfVxuICAgIEV2ZW50c1tcIkxJVkVfQkFDS19CVUZGRVJfUkVBQ0hFRFwiXSA9IFwiaGxzTGl2ZUJhY2tCdWZmZXJSZWFjaGVkXCI7XG4gICAgLy8gZmlyZWQgd2hlbiB0aGUgYmFjayBidWZmZXIgaXMgcmVhY2hlZCBhcyBkZWZpbmVkIGJ5IHRoZSBiYWNrQnVmZmVyTGVuZ3RoIGNvbmZpZyBvcHRpb24gLSBkYXRhIDogeyBidWZmZXJFbmQ6IG51bWJlciB9XG4gICAgRXZlbnRzW1wiQkFDS19CVUZGRVJfUkVBQ0hFRFwiXSA9IFwiaGxzQmFja0J1ZmZlclJlYWNoZWRcIjtcbiAgICAvLyBmaXJlZCBhZnRlciBzdGVlcmluZyBtYW5pZmVzdCBoYXMgYmVlbiBsb2FkZWQgLSBkYXRhOiB7IHN0ZWVyaW5nTWFuaWZlc3Q6IFN0ZWVyaW5nTWFuaWZlc3Qgb2JqZWN0LCB1cmw6IHN0ZWVyaW5nIG1hbmlmZXN0IFVSTCB9XG4gICAgRXZlbnRzW1wiU1RFRVJJTkdfTUFOSUZFU1RfTE9BREVEXCJdID0gXCJobHNTdGVlcmluZ01hbmlmZXN0TG9hZGVkXCI7XG4gICAgLy8gZmlyZWQgd2hlbiBhc3NldCBsaXN0IGhhcyBiZWd1biBsb2FkaW5nXG4gICAgRXZlbnRzW1wiQVNTRVRfTElTVF9MT0FESU5HXCJdID0gXCJobHNBc3NldExpc3RMb2FkaW5nXCI7XG4gICAgLy8gZmlyZWQgd2hlbiBhIHZhbGlkIGFzc2V0IGxpc3QgaXMgbG9hZGVkXG4gICAgRXZlbnRzW1wiQVNTRVRfTElTVF9MT0FERURcIl0gPSBcImhsc0Fzc2V0TGlzdExvYWRlZFwiO1xuICAgIC8vIGZpcmVkIHdoZW4gdGhlIGxpc3Qgb2YgSW50ZXJzdGl0aWFsIEV2ZW50cyBhbmQgSW50ZXJzdGl0aWFsIFNjaGVkdWxlIGlzIHVwZGF0ZWRcbiAgICBFdmVudHNbXCJJTlRFUlNUSVRJQUxTX1VQREFURURcIl0gPSBcImhsc0ludGVyc3RpdGlhbHNVcGRhdGVkXCI7XG4gICAgLy8gZmlyZWQgd2hlbiB0aGUgYnVmZmVyIHJlYWNoZXMgYW4gSW50ZXJzdGl0aWFsIFNjaGVkdWxlIGJvdW5kYXJ5IChib3RoIFByaW1hcnkgc2VnbWVudHMgYW5kIEludGVyc3RpdGlhbCBBc3NldHMpXG4gICAgRXZlbnRzW1wiSU5URVJTVElUSUFMU19CVUZGRVJFRF9UT19CT1VOREFSWVwiXSA9IFwiaGxzSW50ZXJzdGl0aWFsc0J1ZmZlcmVkVG9Cb3VuZGFyeVwiO1xuICAgIC8vIGZpcmVkIHdoZW4gYSBwbGF5ZXIgaW5zdGFuY2UgZm9yIGFuIEludGVyc3RpdGlhbCBBc3NldCBoYXMgYmVlbiBjcmVhdGVkXG4gICAgRXZlbnRzW1wiSU5URVJTVElUSUFMX0FTU0VUX1BMQVlFUl9DUkVBVEVEXCJdID0gXCJobHNJbnRlcnN0aXRpYWxBc3NldFBsYXllckNyZWF0ZWRcIjtcbiAgICAvLyBJbnRlcnN0aXRpYWwgcGxheWJhY2sgc3RhcnRlZFxuICAgIEV2ZW50c1tcIklOVEVSU1RJVElBTF9TVEFSVEVEXCJdID0gXCJobHNJbnRlcnN0aXRpYWxTdGFydGVkXCI7XG4gICAgLy8gSW50ZXJzdGl0aWFsQXNzZXQgcGxheWJhY2sgc3RhcnRlZFxuICAgIEV2ZW50c1tcIklOVEVSU1RJVElBTF9BU1NFVF9TVEFSVEVEXCJdID0gXCJobHNJbnRlcnN0aXRpYWxBc3NldFN0YXJ0ZWRcIjtcbiAgICAvLyBJbnRlcnN0aXRpYWxBc3NldCBwbGF5YmFjayBlbmRlZFxuICAgIEV2ZW50c1tcIklOVEVSU1RJVElBTF9BU1NFVF9FTkRFRFwiXSA9IFwiaGxzSW50ZXJzdGl0aWFsQXNzZXRFbmRlZFwiO1xuICAgIC8vIEludGVyc3RpdGlhbEFzc2V0IHBsYXliYWNrIGVycm9yZWRcbiAgICBFdmVudHNbXCJJTlRFUlNUSVRJQUxfQVNTRVRfRVJST1JcIl0gPSBcImhsc0ludGVyc3RpdGlhbEFzc2V0RXJyb3JcIjtcbiAgICAvLyBJbnRlcnN0aXRpYWwgcGxheWJhY2sgZW5kZWRcbiAgICBFdmVudHNbXCJJTlRFUlNUSVRJQUxfRU5ERURcIl0gPSBcImhsc0ludGVyc3RpdGlhbEVuZGVkXCI7XG4gICAgLy8gSW50ZXJzdGl0aWFsIHNjaGVkdWxlIHJlc3VtZWQgcHJpbWFyeSBwbGF5YmFja1xuICAgIEV2ZW50c1tcIklOVEVSU1RJVElBTFNfUFJJTUFSWV9SRVNVTUVEXCJdID0gXCJobHNJbnRlcnN0aXRpYWxzUHJpbWFyeVJlc3VtZWRcIjtcbiAgICAvLyBJbnRlcnN0aXRpYWwgcGxheWVycyBkaXNwYXRjaCB0aGlzIGV2ZW50IHdoZW4gcGxheW91dCBsaW1pdCBpcyByZWFjaGVkXG4gICAgRXZlbnRzW1wiUExBWU9VVF9MSU1JVF9SRUFDSEVEXCJdID0gXCJobHNQbGF5b3V0TGltaXRSZWFjaGVkXCI7XG4gICAgLy8gRXZlbnQgRGF0ZVJhbmdlIGN1ZSBcImVudGVyXCIgZXZlbnQgZGlzcGF0Y2hlZFxuICAgIEV2ZW50c1tcIkVWRU5UX0NVRV9FTlRFUlwiXSA9IFwiaGxzRXZlbnRDdWVFbnRlclwiO1xuICAgIHJldHVybiBFdmVudHM7XG4gIH0oe30pO1xuXG4gIC8qKlxuICAgKiBEZWZpbmVzIGVhY2ggRXZlbnQgdHlwZSBhbmQgcGF5bG9hZCBieSBFdmVudCBuYW1lLiBVc2VkIGluIHtAbGluayBobHMuanMjSGxzRXZlbnRFbWl0dGVyfSB0byBzdHJvbmdseSB0eXBlIHRoZSBldmVudCBsaXN0ZW5lciBBUEkuXG4gICAqL1xuXG4gIHZhciBQbGF5bGlzdENvbnRleHRUeXBlID0ge1xuICAgIE1BTklGRVNUOiBcIm1hbmlmZXN0XCIsXG4gICAgTEVWRUw6IFwibGV2ZWxcIixcbiAgICBBVURJT19UUkFDSzogXCJhdWRpb1RyYWNrXCIsXG4gICAgU1VCVElUTEVfVFJBQ0s6IFwic3VidGl0bGVUcmFja1wiXG4gIH07XG4gIHZhciBQbGF5bGlzdExldmVsVHlwZSA9IHtcbiAgICBNQUlOOiBcIm1haW5cIixcbiAgICBBVURJTzogXCJhdWRpb1wiLFxuICAgIFNVQlRJVExFOiBcInN1YnRpdGxlXCJcbiAgfTtcblxuICAvKlxuICAgKiBjb21wdXRlIGFuIEV4cG9uZW50aWFsIFdlaWdodGVkIG1vdmluZyBhdmVyYWdlXG4gICAqIC0gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW92aW5nX2F2ZXJhZ2UjRXhwb25lbnRpYWxfbW92aW5nX2F2ZXJhZ2VcbiAgICogIC0gaGVhdmlseSBpbnNwaXJlZCBmcm9tIHNoYWthLXBsYXllclxuICAgKi9cbiAgdmFyIEVXTUEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIC8vICBBYm91dCBoYWxmIG9mIHRoZSBlc3RpbWF0ZWQgdmFsdWUgd2lsbCBiZSBmcm9tIHRoZSBsYXN0IHxoYWxmTGlmZXwgc2FtcGxlcyBieSB3ZWlnaHQuXG4gICAgZnVuY3Rpb24gRVdNQShoYWxmTGlmZSwgZXN0aW1hdGUsIHdlaWdodCkge1xuICAgICAgaWYgKGVzdGltYXRlID09PSB2b2lkIDApIHtcbiAgICAgICAgZXN0aW1hdGUgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKHdlaWdodCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHdlaWdodCA9IDA7XG4gICAgICB9XG4gICAgICB0aGlzLmhhbGZMaWZlID0gdm9pZCAwO1xuICAgICAgdGhpcy5hbHBoYV8gPSB2b2lkIDA7XG4gICAgICB0aGlzLmVzdGltYXRlXyA9IHZvaWQgMDtcbiAgICAgIHRoaXMudG90YWxXZWlnaHRfID0gdm9pZCAwO1xuICAgICAgdGhpcy5oYWxmTGlmZSA9IGhhbGZMaWZlO1xuICAgICAgLy8gTGFyZ2VyIHZhbHVlcyBvZiBhbHBoYSBleHBpcmUgaGlzdG9yaWNhbCBkYXRhIG1vcmUgc2xvd2x5LlxuICAgICAgdGhpcy5hbHBoYV8gPSBoYWxmTGlmZSA/IE1hdGguZXhwKE1hdGgubG9nKDAuNSkgLyBoYWxmTGlmZSkgOiAwO1xuICAgICAgdGhpcy5lc3RpbWF0ZV8gPSBlc3RpbWF0ZTtcbiAgICAgIHRoaXMudG90YWxXZWlnaHRfID0gd2VpZ2h0O1xuICAgIH1cbiAgICB2YXIgX3Byb3RvID0gRVdNQS5wcm90b3R5cGU7XG4gICAgX3Byb3RvLnNhbXBsZSA9IGZ1bmN0aW9uIHNhbXBsZSh3ZWlnaHQsIHZhbHVlKSB7XG4gICAgICB2YXIgYWRqQWxwaGEgPSBNYXRoLnBvdyh0aGlzLmFscGhhXywgd2VpZ2h0KTtcbiAgICAgIHRoaXMuZXN0aW1hdGVfID0gdmFsdWUgKiAoMSAtIGFkakFscGhhKSArIGFkakFscGhhICogdGhpcy5lc3RpbWF0ZV87XG4gICAgICB0aGlzLnRvdGFsV2VpZ2h0XyArPSB3ZWlnaHQ7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0VG90YWxXZWlnaHQgPSBmdW5jdGlvbiBnZXRUb3RhbFdlaWdodCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvdGFsV2VpZ2h0XztcbiAgICB9O1xuICAgIF9wcm90by5nZXRFc3RpbWF0ZSA9IGZ1bmN0aW9uIGdldEVzdGltYXRlKCkge1xuICAgICAgaWYgKHRoaXMuYWxwaGFfKSB7XG4gICAgICAgIHZhciB6ZXJvRmFjdG9yID0gMSAtIE1hdGgucG93KHRoaXMuYWxwaGFfLCB0aGlzLnRvdGFsV2VpZ2h0Xyk7XG4gICAgICAgIGlmICh6ZXJvRmFjdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXN0aW1hdGVfIC8gemVyb0ZhY3RvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZXN0aW1hdGVfO1xuICAgIH07XG4gICAgcmV0dXJuIEVXTUE7XG4gIH0oKTtcblxuICB2YXIgRXdtYUJhbmRXaWR0aEVzdGltYXRvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXdtYUJhbmRXaWR0aEVzdGltYXRvcihzbG93LCBmYXN0LCBkZWZhdWx0RXN0aW1hdGUsIGRlZmF1bHRUVEZCKSB7XG4gICAgICBpZiAoZGVmYXVsdFRURkIgPT09IHZvaWQgMCkge1xuICAgICAgICBkZWZhdWx0VFRGQiA9IDEwMDtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGVmYXVsdEVzdGltYXRlXyA9IHZvaWQgMDtcbiAgICAgIHRoaXMubWluV2VpZ2h0XyA9IHZvaWQgMDtcbiAgICAgIHRoaXMubWluRGVsYXlNc18gPSB2b2lkIDA7XG4gICAgICB0aGlzLnNsb3dfID0gdm9pZCAwO1xuICAgICAgdGhpcy5mYXN0XyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZGVmYXVsdFRURkJfID0gdm9pZCAwO1xuICAgICAgdGhpcy50dGZiXyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZGVmYXVsdEVzdGltYXRlXyA9IGRlZmF1bHRFc3RpbWF0ZTtcbiAgICAgIHRoaXMubWluV2VpZ2h0XyA9IDAuMDAxO1xuICAgICAgdGhpcy5taW5EZWxheU1zXyA9IDUwO1xuICAgICAgdGhpcy5zbG93XyA9IG5ldyBFV01BKHNsb3cpO1xuICAgICAgdGhpcy5mYXN0XyA9IG5ldyBFV01BKGZhc3QpO1xuICAgICAgdGhpcy5kZWZhdWx0VFRGQl8gPSBkZWZhdWx0VFRGQjtcbiAgICAgIHRoaXMudHRmYl8gPSBuZXcgRVdNQShzbG93KTtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IEV3bWFCYW5kV2lkdGhFc3RpbWF0b3IucHJvdG90eXBlO1xuICAgIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoc2xvdywgZmFzdCkge1xuICAgICAgdmFyIHNsb3dfID0gdGhpcy5zbG93XyxcbiAgICAgICAgZmFzdF8gPSB0aGlzLmZhc3RfLFxuICAgICAgICB0dGZiXyA9IHRoaXMudHRmYl87XG4gICAgICBpZiAoc2xvd18uaGFsZkxpZmUgIT09IHNsb3cpIHtcbiAgICAgICAgdGhpcy5zbG93XyA9IG5ldyBFV01BKHNsb3csIHNsb3dfLmdldEVzdGltYXRlKCksIHNsb3dfLmdldFRvdGFsV2VpZ2h0KCkpO1xuICAgICAgfVxuICAgICAgaWYgKGZhc3RfLmhhbGZMaWZlICE9PSBmYXN0KSB7XG4gICAgICAgIHRoaXMuZmFzdF8gPSBuZXcgRVdNQShmYXN0LCBmYXN0Xy5nZXRFc3RpbWF0ZSgpLCBmYXN0Xy5nZXRUb3RhbFdlaWdodCgpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0dGZiXy5oYWxmTGlmZSAhPT0gc2xvdykge1xuICAgICAgICB0aGlzLnR0ZmJfID0gbmV3IEVXTUEoc2xvdywgdHRmYl8uZ2V0RXN0aW1hdGUoKSwgdHRmYl8uZ2V0VG90YWxXZWlnaHQoKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uc2FtcGxlID0gZnVuY3Rpb24gc2FtcGxlKGR1cmF0aW9uTXMsIG51bUJ5dGVzKSB7XG4gICAgICBkdXJhdGlvbk1zID0gTWF0aC5tYXgoZHVyYXRpb25NcywgdGhpcy5taW5EZWxheU1zXyk7XG4gICAgICB2YXIgbnVtQml0cyA9IDggKiBudW1CeXRlcztcbiAgICAgIC8vIHdlaWdodCBpcyBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAgICB2YXIgZHVyYXRpb25TID0gZHVyYXRpb25NcyAvIDEwMDA7XG4gICAgICAvLyB2YWx1ZSBpcyBiYW5kd2lkdGggaW4gYml0cy9zXG4gICAgICB2YXIgYmFuZHdpZHRoSW5CcHMgPSBudW1CaXRzIC8gZHVyYXRpb25TO1xuICAgICAgdGhpcy5mYXN0Xy5zYW1wbGUoZHVyYXRpb25TLCBiYW5kd2lkdGhJbkJwcyk7XG4gICAgICB0aGlzLnNsb3dfLnNhbXBsZShkdXJhdGlvblMsIGJhbmR3aWR0aEluQnBzKTtcbiAgICB9O1xuICAgIF9wcm90by5zYW1wbGVUVEZCID0gZnVuY3Rpb24gc2FtcGxlVFRGQih0dGZiKSB7XG4gICAgICAvLyB3ZWlnaHQgaXMgZnJlcXVlbmN5IGN1cnZlIGFwcGxpZWQgdG8gVFRGQiBpbiBzZWNvbmRzXG4gICAgICAvLyAobG9uZ2VyIHRpbWVzIGhhdmUgbGVzcyB3ZWlnaHQgd2l0aCBleHBlY3RlZCBpbnB1dCB1bmRlciAxIHNlY29uZClcbiAgICAgIHZhciBzZWNvbmRzID0gdHRmYiAvIDEwMDA7XG4gICAgICB2YXIgd2VpZ2h0ID0gTWF0aC5zcXJ0KDIpICogTWF0aC5leHAoLU1hdGgucG93KHNlY29uZHMsIDIpIC8gMik7XG4gICAgICB0aGlzLnR0ZmJfLnNhbXBsZSh3ZWlnaHQsIE1hdGgubWF4KHR0ZmIsIDUpKTtcbiAgICB9O1xuICAgIF9wcm90by5jYW5Fc3RpbWF0ZSA9IGZ1bmN0aW9uIGNhbkVzdGltYXRlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmFzdF8uZ2V0VG90YWxXZWlnaHQoKSA+PSB0aGlzLm1pbldlaWdodF87XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0RXN0aW1hdGUgPSBmdW5jdGlvbiBnZXRFc3RpbWF0ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNhbkVzdGltYXRlKCkpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3Nsb3cgZXN0aW1hdGU6JysgTWF0aC5yb3VuZCh0aGlzLnNsb3dfLmdldEVzdGltYXRlKCkpKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2Zhc3QgZXN0aW1hdGU6JysgTWF0aC5yb3VuZCh0aGlzLmZhc3RfLmdldEVzdGltYXRlKCkpKTtcbiAgICAgICAgLy8gVGFrZSB0aGUgbWluaW11bSBvZiB0aGVzZSB0d28gZXN0aW1hdGVzLiAgVGhpcyBzaG91bGQgaGF2ZSB0aGUgZWZmZWN0IG9mXG4gICAgICAgIC8vIGFkYXB0aW5nIGRvd24gcXVpY2tseSwgYnV0IHVwIG1vcmUgc2xvd2x5LlxuICAgICAgICByZXR1cm4gTWF0aC5taW4odGhpcy5mYXN0Xy5nZXRFc3RpbWF0ZSgpLCB0aGlzLnNsb3dfLmdldEVzdGltYXRlKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdEVzdGltYXRlXztcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5nZXRFc3RpbWF0ZVRURkIgPSBmdW5jdGlvbiBnZXRFc3RpbWF0ZVRURkIoKSB7XG4gICAgICBpZiAodGhpcy50dGZiXy5nZXRUb3RhbFdlaWdodCgpID49IHRoaXMubWluV2VpZ2h0Xykge1xuICAgICAgICByZXR1cm4gdGhpcy50dGZiXy5nZXRFc3RpbWF0ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFRURkJfO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge307XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhFd21hQmFuZFdpZHRoRXN0aW1hdG9yLCBbe1xuICAgICAga2V5OiBcImRlZmF1bHRFc3RpbWF0ZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRFc3RpbWF0ZV87XG4gICAgICB9XG4gICAgfV0pO1xuICB9KCk7XG5cbiAgdmFyIExvZ2dlciA9IGZ1bmN0aW9uIExvZ2dlcihsYWJlbCwgbG9nZ2VyKSB7XG4gICAgdGhpcy50cmFjZSA9IHZvaWQgMDtcbiAgICB0aGlzLmRlYnVnID0gdm9pZCAwO1xuICAgIHRoaXMubG9nID0gdm9pZCAwO1xuICAgIHRoaXMud2FybiA9IHZvaWQgMDtcbiAgICB0aGlzLmluZm8gPSB2b2lkIDA7XG4gICAgdGhpcy5lcnJvciA9IHZvaWQgMDtcbiAgICB2YXIgbGIgPSBcIltcIiArIGxhYmVsICsgXCJdOlwiO1xuICAgIHRoaXMudHJhY2UgPSBub29wO1xuICAgIHRoaXMuZGVidWcgPSBsb2dnZXIuZGVidWcuYmluZChudWxsLCBsYik7XG4gICAgdGhpcy5sb2cgPSBsb2dnZXIubG9nLmJpbmQobnVsbCwgbGIpO1xuICAgIHRoaXMud2FybiA9IGxvZ2dlci53YXJuLmJpbmQobnVsbCwgbGIpO1xuICAgIHRoaXMuaW5mbyA9IGxvZ2dlci5pbmZvLmJpbmQobnVsbCwgbGIpO1xuICAgIHRoaXMuZXJyb3IgPSBsb2dnZXIuZXJyb3IuYmluZChudWxsLCBsYik7XG4gIH07XG4gIHZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuICB2YXIgZmFrZUxvZ2dlciA9IHtcbiAgICB0cmFjZTogbm9vcCxcbiAgICBkZWJ1Zzogbm9vcCxcbiAgICBsb2c6IG5vb3AsXG4gICAgd2Fybjogbm9vcCxcbiAgICBpbmZvOiBub29wLFxuICAgIGVycm9yOiBub29wXG4gIH07XG4gIGZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcigpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGZha2VMb2dnZXIpO1xuICB9XG5cbiAgLy8gbGV0IGxhc3RDYWxsVGltZTtcbiAgLy8gZnVuY3Rpb24gZm9ybWF0TXNnV2l0aFRpbWVJbmZvKHR5cGUsIG1zZykge1xuICAvLyAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIC8vICAgY29uc3QgZGlmZiA9IGxhc3RDYWxsVGltZSA/ICcrJyArIChub3cgLSBsYXN0Q2FsbFRpbWUpIDogJzAnO1xuICAvLyAgIGxhc3RDYWxsVGltZSA9IG5vdztcbiAgLy8gICBtc2cgPSAobmV3IERhdGUobm93KSkudG9JU09TdHJpbmcoKSArICcgfCBbJyArICB0eXBlICsgJ10gPiAnICsgbXNnICsgJyAoICcgKyBkaWZmICsgJyBtcyApJztcbiAgLy8gICByZXR1cm4gbXNnO1xuICAvLyB9XG5cbiAgZnVuY3Rpb24gY29uc29sZVByaW50Rm4odHlwZSwgaWQpIHtcbiAgICB2YXIgZnVuYyA9IHNlbGYuY29uc29sZVt0eXBlXTtcbiAgICByZXR1cm4gZnVuYyA/IGZ1bmMuYmluZChzZWxmLmNvbnNvbGUsIChpZCA/ICdbJyArIGlkICsgJ10gJyA6ICcnKSArIFwiW1wiICsgdHlwZSArIFwiXSA+XCIpIDogbm9vcDtcbiAgfVxuICBmdW5jdGlvbiBnZXRMb2dnZXJGbihrZXksIGRlYnVnQ29uZmlnLCBpZCkge1xuICAgIHJldHVybiBkZWJ1Z0NvbmZpZ1trZXldID8gZGVidWdDb25maWdba2V5XS5iaW5kKGRlYnVnQ29uZmlnKSA6IGNvbnNvbGVQcmludEZuKGtleSwgaWQpO1xuICB9XG4gIHZhciBleHBvcnRlZExvZ2dlciA9IGNyZWF0ZUxvZ2dlcigpO1xuICBmdW5jdGlvbiBlbmFibGVMb2dzKGRlYnVnQ29uZmlnLCBjb250ZXh0LCBpZCkge1xuICAgIC8vIGNoZWNrIHRoYXQgY29uc29sZSBpcyBhdmFpbGFibGVcbiAgICB2YXIgbmV3TG9nZ2VyID0gY3JlYXRlTG9nZ2VyKCk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSAnb2JqZWN0JyAmJiBkZWJ1Z0NvbmZpZyA9PT0gdHJ1ZSB8fCB0eXBlb2YgZGVidWdDb25maWcgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIga2V5cyA9IFtcbiAgICAgIC8vIFJlbW92ZSBvdXQgZnJvbSBsaXN0IGhlcmUgdG8gaGFyZC1kaXNhYmxlIGEgbG9nLWxldmVsXG4gICAgICAvLyAndHJhY2UnLFxuICAgICAgJ2RlYnVnJywgJ2xvZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXTtcbiAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIG5ld0xvZ2dlcltrZXldID0gZ2V0TG9nZ2VyRm4oa2V5LCBkZWJ1Z0NvbmZpZywgaWQpO1xuICAgICAgfSk7XG4gICAgICAvLyBTb21lIGJyb3dzZXJzIGRvbid0IGFsbG93IHRvIHVzZSBiaW5kIG9uIGNvbnNvbGUgb2JqZWN0IGFueXdheVxuICAgICAgLy8gZmFsbGJhY2sgdG8gZGVmYXVsdCBpZiBuZWVkZWRcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0xvZ2dlci5sb2coXCJEZWJ1ZyBsb2dzIGVuYWJsZWQgZm9yIFxcXCJcIiArIGNvbnRleHQgKyBcIlxcXCIgaW4gaGxzLmpzIHZlcnNpb24gXCIgKyBcIjEuNi41XCIpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvKiBsb2cgZm4gdGhyZXcgYW4gZXhjZXB0aW9uLiBBbGwgbG9nZ2VyIG1ldGhvZHMgYXJlIG5vLW9wcy4gKi9cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvZ2dlcigpO1xuICAgICAgfVxuICAgICAgLy8gZ2xvYmFsIGV4cG9ydGVkIGxvZ2dlciB1c2VzIHRoZSBzYW1lIGZ1bmN0aW9ucyBhcyBuZXcgbG9nZ2VyIHdpdGhvdXQgYGlkYFxuICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZXhwb3J0ZWRMb2dnZXJba2V5XSA9IGdldExvZ2dlckZuKGtleSwgZGVidWdDb25maWcpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlc2V0IGdsb2JhbCBleHBvcnRlZCBsb2dnZXJcbiAgICAgIF9leHRlbmRzKGV4cG9ydGVkTG9nZ2VyLCBuZXdMb2dnZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3TG9nZ2VyO1xuICB9XG4gIHZhciBsb2dnZXIgPSBleHBvcnRlZExvZ2dlcjtcblxuICBmdW5jdGlvbiBnZXRNZWRpYVNvdXJjZShwcmVmZXJNYW5hZ2VkTWVkaWFTb3VyY2UpIHtcbiAgICBpZiAocHJlZmVyTWFuYWdlZE1lZGlhU291cmNlID09PSB2b2lkIDApIHtcbiAgICAgIHByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdmFyIG1tcyA9IChwcmVmZXJNYW5hZ2VkTWVkaWFTb3VyY2UgfHwgIXNlbGYuTWVkaWFTb3VyY2UpICYmIHNlbGYuTWFuYWdlZE1lZGlhU291cmNlO1xuICAgIHJldHVybiBtbXMgfHwgc2VsZi5NZWRpYVNvdXJjZSB8fCBzZWxmLldlYktpdE1lZGlhU291cmNlO1xuICB9XG4gIGZ1bmN0aW9uIGlzTWFuYWdlZE1lZGlhU291cmNlKHNvdXJjZSkge1xuICAgIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc291cmNlID09PSBzZWxmLk1hbmFnZWRNZWRpYVNvdXJjZTtcbiAgfVxuICBmdW5jdGlvbiBpc0NvbXBhdGlibGVUcmFja0NoYW5nZShjdXJyZW50VHJhY2tzLCByZXF1aXJlZFRyYWNrcykge1xuICAgIHZhciB0cmFja05hbWVzID0gT2JqZWN0LmtleXMoY3VycmVudFRyYWNrcyk7XG4gICAgdmFyIHJlcXVpcmVkVHJhY2tOYW1lcyA9IE9iamVjdC5rZXlzKHJlcXVpcmVkVHJhY2tzKTtcbiAgICB2YXIgdHJhY2tDb3VudCA9IHRyYWNrTmFtZXMubGVuZ3RoO1xuICAgIHZhciByZXF1aXJlZFRyYWNrQ291bnQgPSByZXF1aXJlZFRyYWNrTmFtZXMubGVuZ3RoO1xuICAgIHJldHVybiAhdHJhY2tDb3VudCB8fCAhcmVxdWlyZWRUcmFja0NvdW50IHx8IHRyYWNrQ291bnQgPT09IHJlcXVpcmVkVHJhY2tDb3VudCAmJiAhdHJhY2tOYW1lcy5zb21lKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gcmVxdWlyZWRUcmFja05hbWVzLmluZGV4T2YobmFtZSkgPT09IC0xO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84OTM2OTg0L3VpbnQ4YXJyYXktdG8tc3RyaW5nLWluLWphdmFzY3JpcHQvMjIzNzMxOTdcbiAgLy8gaHR0cDovL3d3dy5vbmljb3MuY29tL3N0YWZmL2l6L2FtdXNlL2phdmFzY3JpcHQvZXhwZXJ0L3V0Zi50eHRcbiAgLyogdXRmLmpzIC0gVVRGLTggPD0+IFVURi0xNiBjb252ZXJ0aW9uXG4gICAqXG4gICAqIENvcHlyaWdodCAoQykgMTk5OSBNYXNhbmFvIEl6dW1vIDxpekBvbmljb3MuY28uanA+XG4gICAqIFZlcnNpb246IDEuMFxuICAgKiBMYXN0TW9kaWZpZWQ6IERlYyAyNSAxOTk5XG4gICAqIFRoaXMgbGlicmFyeSBpcyBmcmVlLiAgWW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdC5cbiAgICovXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFVURi04IGFycmF5IHRvIGEgc3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0gYXJyYXkgLSBUaGUgVVRGLTggYXJyYXkgdG8gY29udmVydFxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgc3RyaW5nXG4gICAqXG4gICAqIEBncm91cCBVdGlsc1xuICAgKlxuICAgKiBAYmV0YVxuICAgKi9cbiAgZnVuY3Rpb24gdXRmOEFycmF5VG9TdHIoYXJyYXksIGV4aXRPbk51bGwpIHtcbiAgICBpZiAoZXhpdE9uTnVsbCA9PT0gdm9pZCAwKSB7XG4gICAgICBleGl0T25OdWxsID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKTtcbiAgICAgIHZhciBkZWNvZGVkID0gZGVjb2Rlci5kZWNvZGUoYXJyYXkpO1xuICAgICAgaWYgKGV4aXRPbk51bGwpIHtcbiAgICAgICAgLy8gZ3JhYiB1cCB0byB0aGUgZmlyc3QgbnVsbFxuICAgICAgICB2YXIgaWR4ID0gZGVjb2RlZC5pbmRleE9mKCdcXDAnKTtcbiAgICAgICAgcmV0dXJuIGlkeCAhPT0gLTEgPyBkZWNvZGVkLnN1YnN0cmluZygwLCBpZHgpIDogZGVjb2RlZDtcbiAgICAgIH1cbiAgICAgIC8vIHJlbW92ZSBhbnkgbnVsbCBjaGFyYWN0ZXJzXG4gICAgICByZXR1cm4gZGVjb2RlZC5yZXBsYWNlKC9cXDAvZywgJycpO1xuICAgIH1cbiAgICB2YXIgbGVuID0gYXJyYXkubGVuZ3RoO1xuICAgIHZhciBjO1xuICAgIHZhciBjaGFyMjtcbiAgICB2YXIgY2hhcjM7XG4gICAgdmFyIG91dCA9ICcnO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgYyA9IGFycmF5W2krK107XG4gICAgICBpZiAoYyA9PT0gMHgwMCAmJiBleGl0T25OdWxsKSB7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgICB9IGVsc2UgaWYgKGMgPT09IDB4MDAgfHwgYyA9PT0gMHgwMykge1xuICAgICAgICAvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIDMgKEVORF9PRl9URVhUKSBvciAwIChOVUxMKSB0aGVuIHNraXAgaXRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGMgPj4gNCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICBjYXNlIDM6XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICBjYXNlIDY6XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAvLyAweHh4eHh4eFxuICAgICAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEyOlxuICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgIC8vIDExMHggeHh4eCAgIDEweHggeHh4eFxuICAgICAgICAgIGNoYXIyID0gYXJyYXlbaSsrXTtcbiAgICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyAmIDB4MWYpIDw8IDYgfCBjaGFyMiAmIDB4M2YpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgIC8vIDExMTAgeHh4eCAgMTB4eCB4eHh4ICAxMHh4IHh4eHhcbiAgICAgICAgICBjaGFyMiA9IGFycmF5W2krK107XG4gICAgICAgICAgY2hhcjMgPSBhcnJheVtpKytdO1xuICAgICAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjICYgMHgwZikgPDwgMTIgfCAoY2hhcjIgJiAweDNmKSA8PCA2IHwgKGNoYXIzICYgMHgzZikgPDwgMCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKipcbiAgICogIGhleCBkdW1wIGhlbHBlciBjbGFzc1xuICAgKi9cblxuICB2YXIgSGV4ID0ge1xuICAgIGhleER1bXA6IGZ1bmN0aW9uIGhleER1bXAoYXJyYXkpIHtcbiAgICAgIHZhciBzdHIgPSAnJztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGggPSBhcnJheVtpXS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChoLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICBoID0gJzAnICsgaDtcbiAgICAgICAgfVxuICAgICAgICBzdHIgKz0gaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9O1xuXG4gIHZhciBMb2FkU3RhdHMgPSBmdW5jdGlvbiBMb2FkU3RhdHMoKSB7XG4gICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgdGhpcy5sb2FkZWQgPSAwO1xuICAgIHRoaXMucmV0cnkgPSAwO1xuICAgIHRoaXMudG90YWwgPSAwO1xuICAgIHRoaXMuY2h1bmtDb3VudCA9IDA7XG4gICAgdGhpcy5id0VzdGltYXRlID0gMDtcbiAgICB0aGlzLmxvYWRpbmcgPSB7XG4gICAgICBzdGFydDogMCxcbiAgICAgIGZpcnN0OiAwLFxuICAgICAgZW5kOiAwXG4gICAgfTtcbiAgICB0aGlzLnBhcnNpbmcgPSB7XG4gICAgICBzdGFydDogMCxcbiAgICAgIGVuZDogMFxuICAgIH07XG4gICAgdGhpcy5idWZmZXJpbmcgPSB7XG4gICAgICBzdGFydDogMCxcbiAgICAgIGZpcnN0OiAwLFxuICAgICAgZW5kOiAwXG4gICAgfTtcbiAgfTtcblxuICB2YXIgRWxlbWVudGFyeVN0cmVhbVR5cGVzID0ge1xuICAgIEFVRElPOiBcImF1ZGlvXCIsXG4gICAgVklERU86IFwidmlkZW9cIixcbiAgICBBVURJT1ZJREVPOiBcImF1ZGlvdmlkZW9cIlxuICB9O1xuICB2YXIgQmFzZVNlZ21lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhc2VTZWdtZW50KGJhc2UpIHtcbiAgICAgIHRoaXMuX2J5dGVSYW5nZSA9IG51bGw7XG4gICAgICB0aGlzLl91cmwgPSBudWxsO1xuICAgICAgdGhpcy5fc3RhdHMgPSBudWxsO1xuICAgICAgdGhpcy5fc3RyZWFtcyA9IG51bGw7XG4gICAgICAvLyBiYXNldXJsIGlzIHRoZSBVUkwgdG8gdGhlIHBsYXlsaXN0XG4gICAgICB0aGlzLmJhc2UgPSB2b2lkIDA7XG4gICAgICAvLyByZWx1cmwgaXMgdGhlIHBvcnRpb24gb2YgdGhlIFVSTCB0aGF0IGNvbWVzIGZyb20gaW5zaWRlIHRoZSBwbGF5bGlzdC5cbiAgICAgIHRoaXMucmVsdXJsID0gdm9pZCAwO1xuICAgICAgaWYgKHR5cGVvZiBiYXNlID09PSAnc3RyaW5nJykge1xuICAgICAgICBiYXNlID0ge1xuICAgICAgICAgIHVybDogYmFzZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdGhpcy5iYXNlID0gYmFzZTtcbiAgICAgIG1ha2VFbnVtZXJhYmxlKHRoaXMsICdzdGF0cycpO1xuICAgIH1cblxuICAgIC8vIHNldEJ5dGVSYW5nZSBjb252ZXJ0cyBhIEVYVC1YLUJZVEVSQU5HRSBhdHRyaWJ1dGUgaW50byBhIHR3byBlbGVtZW50IGFycmF5XG4gICAgdmFyIF9wcm90byA9IEJhc2VTZWdtZW50LnByb3RvdHlwZTtcbiAgICBfcHJvdG8uc2V0Qnl0ZVJhbmdlID0gZnVuY3Rpb24gc2V0Qnl0ZVJhbmdlKHZhbHVlLCBwcmV2aW91cykge1xuICAgICAgdmFyIHBhcmFtcyA9IHZhbHVlLnNwbGl0KCdAJywgMik7XG4gICAgICB2YXIgc3RhcnQ7XG4gICAgICBpZiAocGFyYW1zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBzdGFydCA9IChwcmV2aW91cyA9PSBudWxsID8gdm9pZCAwIDogcHJldmlvdXMuYnl0ZVJhbmdlRW5kT2Zmc2V0KSB8fCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBwYXJzZUludChwYXJhbXNbMV0pO1xuICAgICAgfVxuICAgICAgdGhpcy5fYnl0ZVJhbmdlID0gW3N0YXJ0LCBwYXJzZUludChwYXJhbXNbMF0pICsgc3RhcnRdO1xuICAgIH07XG4gICAgX3Byb3RvLmNsZWFyRWxlbWVudGFyeVN0cmVhbUluZm8gPSBmdW5jdGlvbiBjbGVhckVsZW1lbnRhcnlTdHJlYW1JbmZvKCkge1xuICAgICAgdmFyIGVsZW1lbnRhcnlTdHJlYW1zID0gdGhpcy5lbGVtZW50YXJ5U3RyZWFtcztcbiAgICAgIGVsZW1lbnRhcnlTdHJlYW1zW0VsZW1lbnRhcnlTdHJlYW1UeXBlcy5BVURJT10gPSBudWxsO1xuICAgICAgZWxlbWVudGFyeVN0cmVhbXNbRWxlbWVudGFyeVN0cmVhbVR5cGVzLlZJREVPXSA9IG51bGw7XG4gICAgICBlbGVtZW50YXJ5U3RyZWFtc1tFbGVtZW50YXJ5U3RyZWFtVHlwZXMuQVVESU9WSURFT10gPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhCYXNlU2VnbWVudCwgW3tcbiAgICAgIGtleTogXCJiYXNldXJsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZS51cmw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJ5dGVSYW5nZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9ieXRlUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2J5dGVSYW5nZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYnl0ZVJhbmdlU3RhcnRPZmZzZXRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ieXRlUmFuZ2VbMF07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJ5dGVSYW5nZUVuZE9mZnNldFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGVSYW5nZVsxXTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZWxlbWVudGFyeVN0cmVhbXNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fc3RyZWFtcyA9PT0gbnVsbCkge1xuICAgICAgICAgIHZhciBfdGhpcyRfc3RyZWFtcztcbiAgICAgICAgICB0aGlzLl9zdHJlYW1zID0gKF90aGlzJF9zdHJlYW1zID0ge30sIF90aGlzJF9zdHJlYW1zW0VsZW1lbnRhcnlTdHJlYW1UeXBlcy5BVURJT10gPSBudWxsLCBfdGhpcyRfc3RyZWFtc1tFbGVtZW50YXJ5U3RyZWFtVHlwZXMuVklERU9dID0gbnVsbCwgX3RoaXMkX3N0cmVhbXNbRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPVklERU9dID0gbnVsbCwgX3RoaXMkX3N0cmVhbXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHJlYW1zO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3N0cmVhbXMgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGFzU3RhdHNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdHMgIT09IG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhc1N0cmVhbXNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RyZWFtcyAhPT0gbnVsbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RhdHNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdHMgPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLl9zdGF0cyA9IG5ldyBMb2FkU3RhdHMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdHM7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc3RhdHMgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidXJsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl91cmwgJiYgdGhpcy5iYXNldXJsICYmIHRoaXMucmVsdXJsKSB7XG4gICAgICAgICAgdGhpcy5fdXJsID0gdXJsVG9vbGtpdEV4cG9ydHMuYnVpbGRBYnNvbHV0ZVVSTCh0aGlzLmJhc2V1cmwsIHRoaXMucmVsdXJsLCB7XG4gICAgICAgICAgICBhbHdheXNOb3JtYWxpemU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdXJsIHx8ICcnO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3VybCA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1dKTtcbiAgfSgpO1xuICBmdW5jdGlvbiBpc01lZGlhRnJhZ21lbnQoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnNuICE9PSAnaW5pdFNlZ21lbnQnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9iamVjdCByZXByZXNlbnRpbmcgcGFyc2VkIGRhdGEgZnJvbSBhbiBITFMgU2VnbWVudC4gRm91bmQgaW4ge0BsaW5rIGhscy5qcyNMZXZlbERldGFpbHMuZnJhZ21lbnRzfS5cbiAgICovXG4gIHZhciBGcmFnbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VTZWdtZW50Mikge1xuICAgIGZ1bmN0aW9uIEZyYWdtZW50KHR5cGUsIGJhc2UpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF90aGlzID0gX0Jhc2VTZWdtZW50Mi5jYWxsKHRoaXMsIGJhc2UpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5fZGVjcnlwdGRhdGEgPSBudWxsO1xuICAgICAgX3RoaXMuX3Byb2dyYW1EYXRlVGltZSA9IG51bGw7XG4gICAgICBfdGhpcy5fcmVmID0gbnVsbDtcbiAgICAgIC8vIEFwcHJveGltYXRlIGJpdCByYXRlIG9mIHRoZSBmcmFnbWVudCBleHByZXNzZWQgaW4gYml0cyBwZXIgc2Vjb25kIChicHMpIGFzIGluZGljYXRlZCBieSB0aGUgbGFzdCBFWFQtWC1CSVRSQVRFIChrYnBzKSB0YWdcbiAgICAgIF90aGlzLl9iaXRyYXRlID0gdm9pZCAwO1xuICAgICAgX3RoaXMucmF3UHJvZ3JhbURhdGVUaW1lID0gbnVsbDtcbiAgICAgIF90aGlzLnRhZ0xpc3QgPSBbXTtcbiAgICAgIC8vIEVYVElORiBoYXMgdG8gYmUgcHJlc2VudCBmb3IgYSBtM3U4IHRvIGJlIGNvbnNpZGVyZWQgdmFsaWRcbiAgICAgIF90aGlzLmR1cmF0aW9uID0gMDtcbiAgICAgIC8vIHNuIG5vdGF0ZXMgdGhlIHNlcXVlbmNlIG51bWJlciBmb3IgYSBzZWdtZW50LCBhbmQgaWYgc2V0IHRvIGEgc3RyaW5nIGNhbiBiZSAnaW5pdFNlZ21lbnQnXG4gICAgICBfdGhpcy5zbiA9IDA7XG4gICAgICAvLyBsZXZlbGtleXMgYXJlIHRoZSBFWFQtWC1LRVkgdGFncyB0aGF0IGFwcGx5IHRvIHRoaXMgc2VnbWVudCBmb3IgZGVjcnlwdGlvblxuICAgICAgLy8gY29yZSBkaWZmZXJlbmNlIGZyb20gdGhlIHByaXZhdGUgZmllbGQgX2RlY3J5cHRkYXRhIGlzIHRoZSBsYWNrIG9mIHRoZSBpbml0aWFsaXplZCBJVlxuICAgICAgLy8gX2RlY3J5cHRkYXRhIHdpbGwgc2V0IHRoZSBJViBmb3IgdGhpcyBzZWdtZW50IGJhc2VkIG9uIHRoZSBzZWdtZW50IG51bWJlciBpbiB0aGUgZnJhZ21lbnRcbiAgICAgIF90aGlzLmxldmVsa2V5cyA9IHZvaWQgMDtcbiAgICAgIC8vIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZnJhZ21lbnQgdHlwZVxuICAgICAgX3RoaXMudHlwZSA9IHZvaWQgMDtcbiAgICAgIC8vIEEgcmVmZXJlbmNlIHRvIHRoZSBsb2FkZXIuIFNldCB3aGlsZSB0aGUgZnJhZ21lbnQgaXMgbG9hZGluZywgYW5kIHJlbW92ZWQgYWZ0ZXJ3YXJkcy4gVXNlZCB0byBhYm9ydCBmcmFnbWVudCBsb2FkaW5nXG4gICAgICBfdGhpcy5sb2FkZXIgPSBudWxsO1xuICAgICAgLy8gQSByZWZlcmVuY2UgdG8gdGhlIGtleSBsb2FkZXIuIFNldCB3aGlsZSB0aGUga2V5IGlzIGxvYWRpbmcsIGFuZCByZW1vdmVkIGFmdGVyd2FyZHMuIFVzZWQgdG8gYWJvcnQga2V5IGxvYWRpbmdcbiAgICAgIF90aGlzLmtleUxvYWRlciA9IG51bGw7XG4gICAgICAvLyBUaGUgbGV2ZWwvdHJhY2sgaW5kZXggdG8gd2hpY2ggdGhlIGZyYWdtZW50IGJlbG9uZ3NcbiAgICAgIF90aGlzLmxldmVsID0gLTE7XG4gICAgICAvLyBUaGUgY29udGludWl0eSBjb3VudGVyIG9mIHRoZSBmcmFnbWVudFxuICAgICAgX3RoaXMuY2MgPSAwO1xuICAgICAgLy8gVGhlIHN0YXJ0aW5nIFByZXNlbnRhdGlvbiBUaW1lIFN0YW1wIChQVFMpIG9mIHRoZSBmcmFnbWVudC4gU2V0IGFmdGVyIHRyYW5zbXV4IGNvbXBsZXRlLlxuICAgICAgX3RoaXMuc3RhcnRQVFMgPSB2b2lkIDA7XG4gICAgICAvLyBUaGUgZW5kaW5nIFByZXNlbnRhdGlvbiBUaW1lIFN0YW1wIChQVFMpIG9mIHRoZSBmcmFnbWVudC4gU2V0IGFmdGVyIHRyYW5zbXV4IGNvbXBsZXRlLlxuICAgICAgX3RoaXMuZW5kUFRTID0gdm9pZCAwO1xuICAgICAgLy8gVGhlIHN0YXJ0aW5nIERlY29kZSBUaW1lIFN0YW1wIChEVFMpIG9mIHRoZSBmcmFnbWVudC4gU2V0IGFmdGVyIHRyYW5zbXV4IGNvbXBsZXRlLlxuICAgICAgX3RoaXMuc3RhcnREVFMgPSB2b2lkIDA7XG4gICAgICAvLyBUaGUgZW5kaW5nIERlY29kZSBUaW1lIFN0YW1wIChEVFMpIG9mIHRoZSBmcmFnbWVudC4gU2V0IGFmdGVyIHRyYW5zbXV4IGNvbXBsZXRlLlxuICAgICAgX3RoaXMuZW5kRFRTID0gdm9pZCAwO1xuICAgICAgLy8gVGhlIHN0YXJ0IHRpbWUgb2YgdGhlIGZyYWdtZW50LCBhcyBsaXN0ZWQgaW4gdGhlIG1hbmlmZXN0LiBVcGRhdGVkIGFmdGVyIHRyYW5zbXV4IGNvbXBsZXRlLlxuICAgICAgX3RoaXMuc3RhcnQgPSAwO1xuICAgICAgLy8gVGhlIG9mZnNldCB0aW1lIChzZWNvbmRzKSBvZiB0aGUgZnJhZ21lbnQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIFBsYXlsaXN0XG4gICAgICBfdGhpcy5wbGF5bGlzdE9mZnNldCA9IDA7XG4gICAgICAvLyBTZXQgYnkgYHVwZGF0ZUZyYWdQVFNEVFNgIGluIGxldmVsLWhlbHBlclxuICAgICAgX3RoaXMuZGVsdGFQVFMgPSB2b2lkIDA7XG4gICAgICAvLyBUaGUgbWF4aW11bSBzdGFydGluZyBQcmVzZW50YXRpb24gVGltZSBTdGFtcCAoYXVkaW8vdmlkZW8gUFRTKSBvZiB0aGUgZnJhZ21lbnQuIFNldCBhZnRlciB0cmFuc211eCBjb21wbGV0ZS5cbiAgICAgIF90aGlzLm1heFN0YXJ0UFRTID0gdm9pZCAwO1xuICAgICAgLy8gVGhlIG1pbmltdW0gZW5kaW5nIFByZXNlbnRhdGlvbiBUaW1lIFN0YW1wIChhdWRpby92aWRlbyBQVFMpIG9mIHRoZSBmcmFnbWVudC4gU2V0IGFmdGVyIHRyYW5zbXV4IGNvbXBsZXRlLlxuICAgICAgX3RoaXMubWluRW5kUFRTID0gdm9pZCAwO1xuICAgICAgLy8gSW5pdCBTZWdtZW50IGJ5dGVzICh1bnNldCBmb3IgbWVkaWEgc2VnbWVudHMpXG4gICAgICBfdGhpcy5kYXRhID0gdm9pZCAwO1xuICAgICAgLy8gQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgc2VnbWVudCB3YXMgZG93bmxvYWRlZCBpbiBvcmRlciB0byB0ZXN0IGJpdHJhdGUsIGFuZCB3YXMgbm90IGJ1ZmZlcmVkXG4gICAgICBfdGhpcy5iaXRyYXRlVGVzdCA9IGZhbHNlO1xuICAgICAgLy8gI0VYVElORiAgc2VnbWVudCB0aXRsZVxuICAgICAgX3RoaXMudGl0bGUgPSBudWxsO1xuICAgICAgLy8gVGhlIE1lZGlhIEluaXRpYWxpemF0aW9uIFNlY3Rpb24gZm9yIHRoaXMgc2VnbWVudFxuICAgICAgX3RoaXMuaW5pdFNlZ21lbnQgPSBudWxsO1xuICAgICAgLy8gRnJhZ21lbnQgaXMgdGhlIGxhc3QgZnJhZ21lbnQgaW4gdGhlIG1lZGlhIHBsYXlsaXN0XG4gICAgICBfdGhpcy5lbmRMaXN0ID0gdm9pZCAwO1xuICAgICAgLy8gRnJhZ21lbnQgaXMgbWFya2VkIGJ5IGFuIEVYVC1YLUdBUCB0YWcgaW5kaWNhdGluZyB0aGF0IGl0IGRvZXMgbm90IGNvbnRhaW4gbWVkaWEgZGF0YSBhbmQgc2hvdWxkIG5vdCBiZSBsb2FkZWRcbiAgICAgIF90aGlzLmdhcCA9IHZvaWQgMDtcbiAgICAgIC8vIERlcHJlY2F0ZWRcbiAgICAgIF90aGlzLnVybElkID0gMDtcbiAgICAgIF90aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBfaW5oZXJpdHNMb29zZShGcmFnbWVudCwgX0Jhc2VTZWdtZW50Mik7XG4gICAgdmFyIF9wcm90bzIgPSBGcmFnbWVudC5wcm90b3R5cGU7XG4gICAgX3Byb3RvMi5hZGRTdGFydCA9IGZ1bmN0aW9uIGFkZFN0YXJ0KHZhbHVlKSB7XG4gICAgICB0aGlzLnNldFN0YXJ0KHRoaXMuc3RhcnQgKyB2YWx1ZSk7XG4gICAgfTtcbiAgICBfcHJvdG8yLnNldFN0YXJ0ID0gZnVuY3Rpb24gc2V0U3RhcnQodmFsdWUpIHtcbiAgICAgIHRoaXMuc3RhcnQgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLl9yZWYpIHtcbiAgICAgICAgdGhpcy5fcmVmLnN0YXJ0ID0gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8yLnNldER1cmF0aW9uID0gZnVuY3Rpb24gc2V0RHVyYXRpb24odmFsdWUpIHtcbiAgICAgIHRoaXMuZHVyYXRpb24gPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLl9yZWYpIHtcbiAgICAgICAgdGhpcy5fcmVmLmR1cmF0aW9uID0gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8yLnNldEtleUZvcm1hdCA9IGZ1bmN0aW9uIHNldEtleUZvcm1hdChrZXlGb3JtYXQpIHtcbiAgICAgIGlmICh0aGlzLmxldmVsa2V5cykge1xuICAgICAgICB2YXIga2V5ID0gdGhpcy5sZXZlbGtleXNba2V5Rm9ybWF0XTtcbiAgICAgICAgaWYgKGtleSAmJiAhdGhpcy5fZGVjcnlwdGRhdGEpIHtcbiAgICAgICAgICB0aGlzLl9kZWNyeXB0ZGF0YSA9IGtleS5nZXREZWNyeXB0RGF0YSh0aGlzLnNuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvMi5hYm9ydFJlcXVlc3RzID0gZnVuY3Rpb24gYWJvcnRSZXF1ZXN0cygpIHtcbiAgICAgIHZhciBfdGhpcyRsb2FkZXIsIF90aGlzJGtleUxvYWRlcjtcbiAgICAgIChfdGhpcyRsb2FkZXIgPSB0aGlzLmxvYWRlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGxvYWRlci5hYm9ydCgpO1xuICAgICAgKF90aGlzJGtleUxvYWRlciA9IHRoaXMua2V5TG9hZGVyKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMka2V5TG9hZGVyLmFib3J0KCk7XG4gICAgfTtcbiAgICBfcHJvdG8yLnNldEVsZW1lbnRhcnlTdHJlYW1JbmZvID0gZnVuY3Rpb24gc2V0RWxlbWVudGFyeVN0cmVhbUluZm8odHlwZSwgc3RhcnRQVFMsIGVuZFBUUywgc3RhcnREVFMsIGVuZERUUywgcGFydGlhbCkge1xuICAgICAgaWYgKHBhcnRpYWwgPT09IHZvaWQgMCkge1xuICAgICAgICBwYXJ0aWFsID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgZWxlbWVudGFyeVN0cmVhbXMgPSB0aGlzLmVsZW1lbnRhcnlTdHJlYW1zO1xuICAgICAgdmFyIGluZm8gPSBlbGVtZW50YXJ5U3RyZWFtc1t0eXBlXTtcbiAgICAgIGlmICghaW5mbykge1xuICAgICAgICBlbGVtZW50YXJ5U3RyZWFtc1t0eXBlXSA9IHtcbiAgICAgICAgICBzdGFydFBUUzogc3RhcnRQVFMsXG4gICAgICAgICAgZW5kUFRTOiBlbmRQVFMsXG4gICAgICAgICAgc3RhcnREVFM6IHN0YXJ0RFRTLFxuICAgICAgICAgIGVuZERUUzogZW5kRFRTLFxuICAgICAgICAgIHBhcnRpYWw6IHBhcnRpYWxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaW5mby5zdGFydFBUUyA9IE1hdGgubWluKGluZm8uc3RhcnRQVFMsIHN0YXJ0UFRTKTtcbiAgICAgIGluZm8uZW5kUFRTID0gTWF0aC5tYXgoaW5mby5lbmRQVFMsIGVuZFBUUyk7XG4gICAgICBpbmZvLnN0YXJ0RFRTID0gTWF0aC5taW4oaW5mby5zdGFydERUUywgc3RhcnREVFMpO1xuICAgICAgaW5mby5lbmREVFMgPSBNYXRoLm1heChpbmZvLmVuZERUUywgZW5kRFRTKTtcbiAgICB9O1xuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoRnJhZ21lbnQsIFt7XG4gICAgICBrZXk6IFwiYnl0ZUxlbmd0aFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc1N0YXRzKSB7XG4gICAgICAgICAgdmFyIHRvdGFsID0gdGhpcy5zdGF0cy50b3RhbDtcbiAgICAgICAgICBpZiAodG90YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0b3RhbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYnl0ZVJhbmdlKSB7XG4gICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5ieXRlUmFuZ2VbMF07XG4gICAgICAgICAgdmFyIGVuZCA9IHRoaXMuYnl0ZVJhbmdlWzFdO1xuICAgICAgICAgIGlmIChpc0Zpbml0ZU51bWJlcihzdGFydCkgJiYgaXNGaW5pdGVOdW1iZXIoZW5kKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYml0cmF0ZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogOCAvIHRoaXMuZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2JpdHJhdGUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fYml0cmF0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9iaXRyYXRlID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRlY3J5cHRkYXRhXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGxldmVsa2V5cyA9IHRoaXMubGV2ZWxrZXlzO1xuICAgICAgICBpZiAoIWxldmVsa2V5cyAmJiAhdGhpcy5fZGVjcnlwdGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2RlY3J5cHRkYXRhICYmIHRoaXMubGV2ZWxrZXlzICYmICF0aGlzLmxldmVsa2V5cy5OT05FKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHRoaXMubGV2ZWxrZXlzLmlkZW50aXR5O1xuICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlY3J5cHRkYXRhID0ga2V5LmdldERlY3J5cHREYXRhKHRoaXMuc24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIga2V5Rm9ybWF0cyA9IE9iamVjdC5rZXlzKHRoaXMubGV2ZWxrZXlzKTtcbiAgICAgICAgICAgIGlmIChrZXlGb3JtYXRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVjcnlwdGRhdGEgPSB0aGlzLmxldmVsa2V5c1trZXlGb3JtYXRzWzBdXS5nZXREZWNyeXB0RGF0YSh0aGlzLnNuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlY3J5cHRkYXRhO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJlbmRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFydCArIHRoaXMuZHVyYXRpb247XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVuZFByb2dyYW1EYXRlVGltZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb2dyYW1EYXRlVGltZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkdXJhdGlvbiA9ICFpc0Zpbml0ZU51bWJlcih0aGlzLmR1cmF0aW9uKSA/IDAgOiB0aGlzLmR1cmF0aW9uO1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9ncmFtRGF0ZVRpbWUgKyBkdXJhdGlvbiAqIDEwMDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVuY3J5cHRlZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfdGhpcyRfZGVjcnlwdGRhdGE7XG4gICAgICAgIC8vIEF0IHRoZSBtM3U4LXBhcnNlciBsZXZlbCB3ZSBuZWVkIHRvIGFkZCBzdXBwb3J0IGZvciBtYW5pZmVzdCBzaWduYWxsZWQga2V5Zm9ybWF0c1xuICAgICAgICAvLyB3aGVuIHdlIHdhbnQgdGhlIGZyYWdtZW50IHRvIHN0YXJ0IHJlcG9ydGluZyB0aGF0IGl0IGlzIGVuY3J5cHRlZC5cbiAgICAgICAgLy8gQ3VycmVudGx5LCBrZXlGb3JtYXQgd2lsbCBvbmx5IGJlIHNldCBmb3IgaWRlbnRpdHkga2V5c1xuICAgICAgICBpZiAoKF90aGlzJF9kZWNyeXB0ZGF0YSA9IHRoaXMuX2RlY3J5cHRkYXRhKSAhPSBudWxsICYmIF90aGlzJF9kZWNyeXB0ZGF0YS5lbmNyeXB0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmxldmVsa2V5cykge1xuICAgICAgICAgIHZhciBrZXlGb3JtYXRzID0gT2JqZWN0LmtleXModGhpcy5sZXZlbGtleXMpO1xuICAgICAgICAgIHZhciBsZW4gPSBrZXlGb3JtYXRzLmxlbmd0aDtcbiAgICAgICAgICBpZiAobGVuID4gMSB8fCBsZW4gPT09IDEgJiYgdGhpcy5sZXZlbGtleXNba2V5Rm9ybWF0c1swXV0uZW5jcnlwdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwcm9ncmFtRGF0ZVRpbWVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fcHJvZ3JhbURhdGVUaW1lID09PSBudWxsICYmIHRoaXMucmF3UHJvZ3JhbURhdGVUaW1lKSB7XG4gICAgICAgICAgdGhpcy5wcm9ncmFtRGF0ZVRpbWUgPSBEYXRlLnBhcnNlKHRoaXMucmF3UHJvZ3JhbURhdGVUaW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvZ3JhbURhdGVUaW1lO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNGaW5pdGVOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy5fcHJvZ3JhbURhdGVUaW1lID0gdGhpcy5yYXdQcm9ncmFtRGF0ZVRpbWUgPSBudWxsO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcm9ncmFtRGF0ZVRpbWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVmXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKCFpc01lZGlhRnJhZ21lbnQodGhpcykpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3JlZikge1xuICAgICAgICAgIHRoaXMuX3JlZiA9IHtcbiAgICAgICAgICAgIGJhc2U6IHRoaXMuYmFzZSxcbiAgICAgICAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0LFxuICAgICAgICAgICAgZHVyYXRpb246IHRoaXMuZHVyYXRpb24sXG4gICAgICAgICAgICBzbjogdGhpcy5zbixcbiAgICAgICAgICAgIHByb2dyYW1EYXRlVGltZTogdGhpcy5wcm9ncmFtRGF0ZVRpbWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWY7XG4gICAgICB9XG4gICAgfV0pO1xuICB9KEJhc2VTZWdtZW50KTtcblxuICAvKipcbiAgICogT2JqZWN0IHJlcHJlc2VudGluZyBwYXJzZWQgZGF0YSBmcm9tIGFuIEhMUyBQYXJ0aWFsIFNlZ21lbnQuIEZvdW5kIGluIHtAbGluayBobHMuanMjTGV2ZWxEZXRhaWxzLnBhcnRMaXN0fS5cbiAgICovXG4gIHZhciBQYXJ0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVNlZ21lbnQzKSB7XG4gICAgZnVuY3Rpb24gUGFydChwYXJ0QXR0cnMsIGZyYWcsIGJhc2UsIGluZGV4LCBwcmV2aW91cykge1xuICAgICAgdmFyIF90aGlzMjtcbiAgICAgIF90aGlzMiA9IF9CYXNlU2VnbWVudDMuY2FsbCh0aGlzLCBiYXNlKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLmZyYWdPZmZzZXQgPSAwO1xuICAgICAgX3RoaXMyLmR1cmF0aW9uID0gMDtcbiAgICAgIF90aGlzMi5nYXAgPSBmYWxzZTtcbiAgICAgIF90aGlzMi5pbmRlcGVuZGVudCA9IGZhbHNlO1xuICAgICAgX3RoaXMyLnJlbHVybCA9IHZvaWQgMDtcbiAgICAgIF90aGlzMi5mcmFnbWVudCA9IHZvaWQgMDtcbiAgICAgIF90aGlzMi5pbmRleCA9IHZvaWQgMDtcbiAgICAgIF90aGlzMi5kdXJhdGlvbiA9IHBhcnRBdHRycy5kZWNpbWFsRmxvYXRpbmdQb2ludCgnRFVSQVRJT04nKTtcbiAgICAgIF90aGlzMi5nYXAgPSBwYXJ0QXR0cnMuYm9vbCgnR0FQJyk7XG4gICAgICBfdGhpczIuaW5kZXBlbmRlbnQgPSBwYXJ0QXR0cnMuYm9vbCgnSU5ERVBFTkRFTlQnKTtcbiAgICAgIF90aGlzMi5yZWx1cmwgPSBwYXJ0QXR0cnMuZW51bWVyYXRlZFN0cmluZygnVVJJJyk7XG4gICAgICBfdGhpczIuZnJhZ21lbnQgPSBmcmFnO1xuICAgICAgX3RoaXMyLmluZGV4ID0gaW5kZXg7XG4gICAgICB2YXIgYnl0ZVJhbmdlID0gcGFydEF0dHJzLmVudW1lcmF0ZWRTdHJpbmcoJ0JZVEVSQU5HRScpO1xuICAgICAgaWYgKGJ5dGVSYW5nZSkge1xuICAgICAgICBfdGhpczIuc2V0Qnl0ZVJhbmdlKGJ5dGVSYW5nZSwgcHJldmlvdXMpO1xuICAgICAgfVxuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgIF90aGlzMi5mcmFnT2Zmc2V0ID0gcHJldmlvdXMuZnJhZ09mZnNldCArIHByZXZpb3VzLmR1cmF0aW9uO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG4gICAgX2luaGVyaXRzTG9vc2UoUGFydCwgX0Jhc2VTZWdtZW50Myk7XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhQYXJ0LCBbe1xuICAgICAga2V5OiBcInN0YXJ0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJhZ21lbnQuc3RhcnQgKyB0aGlzLmZyYWdPZmZzZXQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVuZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0ICsgdGhpcy5kdXJhdGlvbjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibG9hZGVkXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnRhcnlTdHJlYW1zID0gdGhpcy5lbGVtZW50YXJ5U3RyZWFtcztcbiAgICAgICAgcmV0dXJuICEhKGVsZW1lbnRhcnlTdHJlYW1zLmF1ZGlvIHx8IGVsZW1lbnRhcnlTdHJlYW1zLnZpZGVvIHx8IGVsZW1lbnRhcnlTdHJlYW1zLmF1ZGlvdmlkZW8pO1xuICAgICAgfVxuICAgIH1dKTtcbiAgfShCYXNlU2VnbWVudCk7XG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvckZyb21Qcm90b3R5cGVDaGFpbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICAgIGlmIChwcm90b3R5cGUpIHtcbiAgICAgIHZhciBwcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvdHlwZSwgcHJvcGVydHkpO1xuICAgICAgaWYgKHByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlEZXNjcmlwdG9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdldE93blByb3BlcnR5RGVzY3JpcHRvckZyb21Qcm90b3R5cGVDaGFpbihwcm90b3R5cGUsIHByb3BlcnR5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWFrZUVudW1lcmFibGUob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgIHZhciBkID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yRnJvbVByb3RvdHlwZUNoYWluKG9iamVjdCwgcHJvcGVydHkpO1xuICAgIGlmIChkKSB7XG4gICAgICBkLmVudW1lcmFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGQpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBVSU5UMzJfTUFYJDEgPSBNYXRoLnBvdygyLCAzMikgLSAxO1xuICB2YXIgcHVzaCA9IFtdLnB1c2g7XG5cbiAgLy8gV2UgYXJlIHVzaW5nIGZpeGVkIHRyYWNrIElEcyBmb3IgZHJpdmluZyB0aGUgTVA0IHJlbXV4ZXJcbiAgLy8gaW5zdGVhZCBvZiBmb2xsb3dpbmcgdGhlIFRTIFBJRHMuXG4gIC8vIFRoZXJlIGlzIG5vIHJlYXNvbiBub3QgdG8gZG8gdGhpcyBhbmQgc29tZSBicm93c2Vycy9Tb3VyY2VCdWZmZXItZGVtdXhlcnNcbiAgLy8gbWF5IG5vdCBsaWtlIGlmIHRoZXJlIGFyZSBUcmFja0lEIFwic3dpdGNoZXNcIlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvLWRldi9obHMuanMvaXNzdWVzLzEzMzFcbiAgLy8gSGVyZSB3ZSBhcmUgbWFwcGluZyBvdXIgaW50ZXJuYWwgdHJhY2sgdHlwZXMgdG8gY29uc3RhbnQgTVA0IHRyYWNrIElEc1xuICAvLyBXaXRoIE1TRSBjdXJyZW50bHkgb25lIGNhbiBvbmx5IGhhdmUgb25lIHRyYWNrIG9mIGVhY2gsIGFuZCB3ZSBhcmUgbXV4aW5nXG4gIC8vIHdoYXRldmVyIHZpZGVvL2F1ZGlvIHJlbmRpdGlvbiBpbiB0aGVtLlxuICB2YXIgUmVtdXhlclRyYWNrSWRDb25maWcgPSB7XG4gICAgdmlkZW86IDEsXG4gICAgYXVkaW86IDIsXG4gICAgaWQzOiAzLFxuICAgIHRleHQ6IDRcbiAgfTtcbiAgZnVuY3Rpb24gYmluMnN0cihkYXRhKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZGF0YSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVhZFVpbnQxNihidWZmZXIsIG9mZnNldCkge1xuICAgIHZhciB2YWwgPSBidWZmZXJbb2Zmc2V0XSA8PCA4IHwgYnVmZmVyW29mZnNldCArIDFdO1xuICAgIHJldHVybiB2YWwgPCAwID8gNjU1MzYgKyB2YWwgOiB2YWw7XG4gIH1cbiAgZnVuY3Rpb24gcmVhZFVpbnQzMihidWZmZXIsIG9mZnNldCkge1xuICAgIHZhciB2YWwgPSByZWFkU2ludDMyKGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICByZXR1cm4gdmFsIDwgMCA/IDQyOTQ5NjcyOTYgKyB2YWwgOiB2YWw7XG4gIH1cbiAgZnVuY3Rpb24gcmVhZFVpbnQ2NChidWZmZXIsIG9mZnNldCkge1xuICAgIHZhciByZXN1bHQgPSByZWFkVWludDMyKGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICByZXN1bHQgKj0gTWF0aC5wb3coMiwgMzIpO1xuICAgIHJlc3VsdCArPSByZWFkVWludDMyKGJ1ZmZlciwgb2Zmc2V0ICsgNCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBmdW5jdGlvbiByZWFkU2ludDMyKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIGJ1ZmZlcltvZmZzZXRdIDw8IDI0IHwgYnVmZmVyW29mZnNldCArIDFdIDw8IDE2IHwgYnVmZmVyW29mZnNldCArIDJdIDw8IDggfCBidWZmZXJbb2Zmc2V0ICsgM107XG4gIH1cbiAgZnVuY3Rpb24gd3JpdGVVaW50MzIoYnVmZmVyLCBvZmZzZXQsIHZhbHVlKSB7XG4gICAgYnVmZmVyW29mZnNldF0gPSB2YWx1ZSA+PiAyNDtcbiAgICBidWZmZXJbb2Zmc2V0ICsgMV0gPSB2YWx1ZSA+PiAxNiAmIDB4ZmY7XG4gICAgYnVmZmVyW29mZnNldCArIDJdID0gdmFsdWUgPj4gOCAmIDB4ZmY7XG4gICAgYnVmZmVyW29mZnNldCArIDNdID0gdmFsdWUgJiAweGZmO1xuICB9XG5cbiAgLy8gRmluZCBcIm1vb2ZcIiBib3hcbiAgZnVuY3Rpb24gaGFzTW9vZkRhdGEoZGF0YSkge1xuICAgIHZhciBlbmQgPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmQ7KSB7XG4gICAgICB2YXIgc2l6ZSA9IHJlYWRVaW50MzIoZGF0YSwgaSk7XG4gICAgICBpZiAoc2l6ZSA+IDggJiYgZGF0YVtpICsgNF0gPT09IDB4NmQgJiYgZGF0YVtpICsgNV0gPT09IDB4NmYgJiYgZGF0YVtpICsgNl0gPT09IDB4NmYgJiYgZGF0YVtpICsgN10gPT09IDB4NjYpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpID0gc2l6ZSA+IDEgPyBpICsgc2l6ZSA6IGVuZDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gRmluZCB0aGUgZGF0YSBmb3IgYSBib3ggc3BlY2lmaWVkIGJ5IGl0cyBwYXRoXG4gIGZ1bmN0aW9uIGZpbmRCb3goZGF0YSwgcGF0aCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKCFwYXRoLmxlbmd0aCkge1xuICAgICAgLy8gc2hvcnQtY2lyY3VpdCB0aGUgc2VhcmNoIGZvciBlbXB0eSBwYXRoc1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICAgIHZhciBlbmQgPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmQ7KSB7XG4gICAgICB2YXIgc2l6ZSA9IHJlYWRVaW50MzIoZGF0YSwgaSk7XG4gICAgICB2YXIgdHlwZSA9IGJpbjJzdHIoZGF0YS5zdWJhcnJheShpICsgNCwgaSArIDgpKTtcbiAgICAgIHZhciBlbmRib3ggPSBzaXplID4gMSA/IGkgKyBzaXplIDogZW5kO1xuICAgICAgaWYgKHR5cGUgPT09IHBhdGhbMF0pIHtcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgLy8gdGhpcyBpcyB0aGUgZW5kIG9mIHRoZSBwYXRoIGFuZCB3ZSd2ZSBmb3VuZCB0aGUgYm94IHdlIHdlcmVcbiAgICAgICAgICAvLyBsb29raW5nIGZvclxuICAgICAgICAgIHJlc3VsdHMucHVzaChkYXRhLnN1YmFycmF5KGkgKyA4LCBlbmRib3gpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHRoZSBuZXh0IGJveCBhbG9uZyB0aGUgcGF0aFxuICAgICAgICAgIHZhciBzdWJyZXN1bHRzID0gZmluZEJveChkYXRhLnN1YmFycmF5KGkgKyA4LCBlbmRib3gpLCBwYXRoLnNsaWNlKDEpKTtcbiAgICAgICAgICBpZiAoc3VicmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHB1c2guYXBwbHkocmVzdWx0cywgc3VicmVzdWx0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpID0gZW5kYm94O1xuICAgIH1cblxuICAgIC8vIHdlJ3ZlIGZpbmlzaGVkIHNlYXJjaGluZyBhbGwgb2YgZGF0YVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlU2VnbWVudEluZGV4KHNpZHgpIHtcbiAgICB2YXIgcmVmZXJlbmNlcyA9IFtdO1xuICAgIHZhciB2ZXJzaW9uID0gc2lkeFswXTtcblxuICAgIC8vIHNldCBpbml0aWFsIG9mZnNldCwgd2Ugc2tpcCB0aGUgcmVmZXJlbmNlIElEIChub3QgbmVlZGVkKVxuICAgIHZhciBpbmRleCA9IDg7XG4gICAgdmFyIHRpbWVzY2FsZSA9IHJlYWRVaW50MzIoc2lkeCwgaW5kZXgpO1xuICAgIGluZGV4ICs9IDQ7XG4gICAgdmFyIGVhcmxpZXN0UHJlc2VudGF0aW9uVGltZSA9IDA7XG4gICAgdmFyIGZpcnN0T2Zmc2V0ID0gMDtcbiAgICBpZiAodmVyc2lvbiA9PT0gMCkge1xuICAgICAgZWFybGllc3RQcmVzZW50YXRpb25UaW1lID0gcmVhZFVpbnQzMihzaWR4LCBpbmRleCk7XG4gICAgICBmaXJzdE9mZnNldCA9IHJlYWRVaW50MzIoc2lkeCwgaW5kZXggKyA0KTtcbiAgICAgIGluZGV4ICs9IDg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVhcmxpZXN0UHJlc2VudGF0aW9uVGltZSA9IHJlYWRVaW50NjQoc2lkeCwgaW5kZXgpO1xuICAgICAgZmlyc3RPZmZzZXQgPSByZWFkVWludDY0KHNpZHgsIGluZGV4ICsgOCk7XG4gICAgICBpbmRleCArPSAxNjtcbiAgICB9XG5cbiAgICAvLyBza2lwIHJlc2VydmVkXG4gICAgaW5kZXggKz0gMjtcbiAgICB2YXIgc3RhcnRCeXRlID0gc2lkeC5sZW5ndGggKyBmaXJzdE9mZnNldDtcbiAgICB2YXIgcmVmZXJlbmNlc0NvdW50ID0gcmVhZFVpbnQxNihzaWR4LCBpbmRleCk7XG4gICAgaW5kZXggKz0gMjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZmVyZW5jZXNDb3VudDsgaSsrKSB7XG4gICAgICB2YXIgcmVmZXJlbmNlSW5kZXggPSBpbmRleDtcbiAgICAgIHZhciByZWZlcmVuY2VJbmZvID0gcmVhZFVpbnQzMihzaWR4LCByZWZlcmVuY2VJbmRleCk7XG4gICAgICByZWZlcmVuY2VJbmRleCArPSA0O1xuICAgICAgdmFyIHJlZmVyZW5jZVNpemUgPSByZWZlcmVuY2VJbmZvICYgMHg3ZmZmZmZmZjtcbiAgICAgIHZhciByZWZlcmVuY2VUeXBlID0gKHJlZmVyZW5jZUluZm8gJiAweDgwMDAwMDAwKSA+Pj4gMzE7XG4gICAgICBpZiAocmVmZXJlbmNlVHlwZSA9PT0gMSkge1xuICAgICAgICBsb2dnZXIud2FybignU0lEWCBoYXMgaGllcmFyY2hpY2FsIHJlZmVyZW5jZXMgKG5vdCBzdXBwb3J0ZWQpJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHN1YnNlZ21lbnREdXJhdGlvbiA9IHJlYWRVaW50MzIoc2lkeCwgcmVmZXJlbmNlSW5kZXgpO1xuICAgICAgcmVmZXJlbmNlSW5kZXggKz0gNDtcbiAgICAgIHJlZmVyZW5jZXMucHVzaCh7XG4gICAgICAgIHJlZmVyZW5jZVNpemU6IHJlZmVyZW5jZVNpemUsXG4gICAgICAgIHN1YnNlZ21lbnREdXJhdGlvbjogc3Vic2VnbWVudER1cmF0aW9uLFxuICAgICAgICAvLyB1bnNjYWxlZFxuICAgICAgICBpbmZvOiB7XG4gICAgICAgICAgZHVyYXRpb246IHN1YnNlZ21lbnREdXJhdGlvbiAvIHRpbWVzY2FsZSxcbiAgICAgICAgICBzdGFydDogc3RhcnRCeXRlLFxuICAgICAgICAgIGVuZDogc3RhcnRCeXRlICsgcmVmZXJlbmNlU2l6ZSAtIDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzdGFydEJ5dGUgKz0gcmVmZXJlbmNlU2l6ZTtcblxuICAgICAgLy8gU2tpcHBpbmcgMSBiaXQgZm9yIHxzdGFydHNXaXRoU2FwfCwgMyBiaXRzIGZvciB8c2FwVHlwZXwsIGFuZCAyOCBiaXRzXG4gICAgICAvLyBmb3IgfHNhcERlbHRhfC5cbiAgICAgIHJlZmVyZW5jZUluZGV4ICs9IDQ7XG5cbiAgICAgIC8vIHNraXAgdG8gbmV4dCByZWZcbiAgICAgIGluZGV4ID0gcmVmZXJlbmNlSW5kZXg7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBlYXJsaWVzdFByZXNlbnRhdGlvblRpbWU6IGVhcmxpZXN0UHJlc2VudGF0aW9uVGltZSxcbiAgICAgIHRpbWVzY2FsZTogdGltZXNjYWxlLFxuICAgICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICAgIHJlZmVyZW5jZXNDb3VudDogcmVmZXJlbmNlc0NvdW50LFxuICAgICAgcmVmZXJlbmNlczogcmVmZXJlbmNlc1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VzIGFuIE1QNCBpbml0aWFsaXphdGlvbiBzZWdtZW50IGFuZCBleHRyYWN0cyBzdHJlYW0gdHlwZSBhbmRcbiAgICogdGltZXNjYWxlIHZhbHVlcyBmb3IgYW55IGRlY2xhcmVkIHRyYWNrcy4gVGltZXNjYWxlIHZhbHVlcyBpbmRpY2F0ZSB0aGVcbiAgICogbnVtYmVyIG9mIGNsb2NrIHRpY2tzIHBlciBzZWNvbmQgdG8gYXNzdW1lIGZvciB0aW1lLWJhc2VkIHZhbHVlc1xuICAgKiBlbHNld2hlcmUgaW4gdGhlIE1QNC5cbiAgICpcbiAgICogVG8gZGV0ZXJtaW5lIHRoZSBzdGFydCB0aW1lIG9mIGFuIE1QNCwgeW91IG5lZWQgdHdvIHBpZWNlcyBvZlxuICAgKiBpbmZvcm1hdGlvbjogdGhlIHRpbWVzY2FsZSB1bml0IGFuZCB0aGUgZWFybGllc3QgYmFzZSBtZWRpYSBkZWNvZGVcbiAgICogdGltZS4gTXVsdGlwbGUgdGltZXNjYWxlcyBjYW4gYmUgc3BlY2lmaWVkIHdpdGhpbiBhbiBNUDQgYnV0IHRoZVxuICAgKiBiYXNlIG1lZGlhIGRlY29kZSB0aW1lIGlzIGFsd2F5cyBleHByZXNzZWQgaW4gdGhlIHRpbWVzY2FsZSBmcm9tXG4gICAqIHRoZSBtZWRpYSBoZWFkZXIgYm94IGZvciB0aGUgdHJhY2s6XG4gICAqIGBgYFxuICAgKiBtb292ID4gdHJhayA+IG1kaWEgPiBtZGhkLnRpbWVzY2FsZVxuICAgKiBtb292ID4gdHJhayA+IG1kaWEgPiBoZGxyXG4gICAqIGBgYFxuICAgKiBAcGFyYW0gaW5pdFNlZ21lbnQgdGhlIGJ5dGVzIG9mIHRoZSBpbml0IHNlZ21lbnRcbiAgICogQHJldHVybnMgYSBoYXNoIG9mIHRyYWNrIHR5cGUgdG8gdGltZXNjYWxlIHZhbHVlcyBvciBudWxsIGlmXG4gICAqIHRoZSBpbml0IHNlZ21lbnQgaXMgbWFsZm9ybWVkLlxuICAgKi9cblxuICBmdW5jdGlvbiBwYXJzZUluaXRTZWdtZW50KGluaXRTZWdtZW50KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciB0cmFrcyA9IGZpbmRCb3goaW5pdFNlZ21lbnQsIFsnbW9vdicsICd0cmFrJ10pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJha3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0cmFrID0gdHJha3NbaV07XG4gICAgICB2YXIgdGtoZCA9IGZpbmRCb3godHJhaywgWyd0a2hkJ10pWzBdO1xuICAgICAgaWYgKHRraGQpIHtcbiAgICAgICAgdmFyIHZlcnNpb24gPSB0a2hkWzBdO1xuICAgICAgICB2YXIgdHJhY2tJZCA9IHJlYWRVaW50MzIodGtoZCwgdmVyc2lvbiA9PT0gMCA/IDEyIDogMjApO1xuICAgICAgICB2YXIgbWRoZCA9IGZpbmRCb3godHJhaywgWydtZGlhJywgJ21kaGQnXSlbMF07XG4gICAgICAgIGlmIChtZGhkKSB7XG4gICAgICAgICAgdmVyc2lvbiA9IG1kaGRbMF07XG4gICAgICAgICAgdmFyIHRpbWVzY2FsZSA9IHJlYWRVaW50MzIobWRoZCwgdmVyc2lvbiA9PT0gMCA/IDEyIDogMjApO1xuICAgICAgICAgIHZhciBoZGxyID0gZmluZEJveCh0cmFrLCBbJ21kaWEnLCAnaGRsciddKVswXTtcbiAgICAgICAgICBpZiAoaGRscikge1xuICAgICAgICAgICAgdmFyIGhkbHJUeXBlID0gYmluMnN0cihoZGxyLnN1YmFycmF5KDgsIDEyKSk7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHtcbiAgICAgICAgICAgICAgc291bjogRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPLFxuICAgICAgICAgICAgICB2aWRlOiBFbGVtZW50YXJ5U3RyZWFtVHlwZXMuVklERU9cbiAgICAgICAgICAgIH1baGRsclR5cGVdO1xuICAgICAgICAgICAgLy8gUGFyc2UgY29kZWMgZGV0YWlsc1xuICAgICAgICAgICAgdmFyIHN0c2RCb3ggPSBmaW5kQm94KHRyYWssIFsnbWRpYScsICdtaW5mJywgJ3N0YmwnLCAnc3RzZCddKVswXTtcbiAgICAgICAgICAgIHZhciBzdHNkID0gcGFyc2VTdHNkKHN0c2RCb3gpO1xuICAgICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgICAgLy8gQWRkICdhdWRpbycsICd2aWRlbycsIGFuZCAnYXVkaW92aWRlbycgdHJhY2sgcmVjb3JkcyB0aGF0IHdpbGwgbWFwIHRvIFNvdXJjZUJ1ZmZlcnNcbiAgICAgICAgICAgICAgcmVzdWx0W3RyYWNrSWRdID0ge1xuICAgICAgICAgICAgICAgIHRpbWVzY2FsZTogdGltZXNjYWxlLFxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgICAgc3RzZDogc3RzZFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZXN1bHRbdHlwZV0gPSBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgICAgICAgdGltZXNjYWxlOiB0aW1lc2NhbGUsXG4gICAgICAgICAgICAgICAgaWQ6IHRyYWNrSWRcbiAgICAgICAgICAgICAgfSwgc3RzZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBBZGQgJ21ldGEnIGFuZCBvdGhlciB0cmFjayByZWNvcmRzIHJlcXVpcmVkIGJ5IGBvZmZzZXRTdGFydERUU2BcbiAgICAgICAgICAgICAgcmVzdWx0W3RyYWNrSWRdID0ge1xuICAgICAgICAgICAgICAgIHRpbWVzY2FsZTogdGltZXNjYWxlLFxuICAgICAgICAgICAgICAgIHR5cGU6IGhkbHJUeXBlLFxuICAgICAgICAgICAgICAgIHN0c2Q6IHN0c2RcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHRyZXggPSBmaW5kQm94KGluaXRTZWdtZW50LCBbJ21vb3YnLCAnbXZleCcsICd0cmV4J10pO1xuICAgIHRyZXguZm9yRWFjaChmdW5jdGlvbiAodHJleCkge1xuICAgICAgdmFyIHRyYWNrSWQgPSByZWFkVWludDMyKHRyZXgsIDQpO1xuICAgICAgdmFyIHRyYWNrID0gcmVzdWx0W3RyYWNrSWRdO1xuICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgIHRyYWNrLmRlZmF1bHQgPSB7XG4gICAgICAgICAgZHVyYXRpb246IHJlYWRVaW50MzIodHJleCwgMTIpLFxuICAgICAgICAgIGZsYWdzOiByZWFkVWludDMyKHRyZXgsIDIwKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZnVuY3Rpb24gcGFyc2VTdHNkKHN0c2QpIHtcbiAgICB2YXIgc2FtcGxlRW50cmllcyA9IHN0c2Quc3ViYXJyYXkoOCk7XG4gICAgdmFyIHNhbXBsZUVudHJpZXNFbmQgPSBzYW1wbGVFbnRyaWVzLnN1YmFycmF5KDggKyA3OCk7XG4gICAgdmFyIGZvdXJDQyA9IGJpbjJzdHIoc2FtcGxlRW50cmllcy5zdWJhcnJheSg0LCA4KSk7XG4gICAgdmFyIGNvZGVjID0gZm91ckNDO1xuICAgIHZhciBzdXBwbGVtZW50YWw7XG4gICAgdmFyIGVuY3J5cHRlZCA9IGZvdXJDQyA9PT0gJ2VuY2EnIHx8IGZvdXJDQyA9PT0gJ2VuY3YnO1xuICAgIGlmIChlbmNyeXB0ZWQpIHtcbiAgICAgIHZhciBlbmNCb3ggPSBmaW5kQm94KHNhbXBsZUVudHJpZXMsIFtmb3VyQ0NdKVswXTtcbiAgICAgIHZhciBlbmNCb3hDaGlsZHJlbiA9IGVuY0JveC5zdWJhcnJheShmb3VyQ0MgPT09ICdlbmNhJyA/IDI4IDogNzgpO1xuICAgICAgdmFyIHNpbmZzID0gZmluZEJveChlbmNCb3hDaGlsZHJlbiwgWydzaW5mJ10pO1xuICAgICAgc2luZnMuZm9yRWFjaChmdW5jdGlvbiAoc2luZikge1xuICAgICAgICB2YXIgc2NobSA9IGZpbmRCb3goc2luZiwgWydzY2htJ10pWzBdO1xuICAgICAgICBpZiAoc2NobSkge1xuICAgICAgICAgIHZhciBzY2hlbWUgPSBiaW4yc3RyKHNjaG0uc3ViYXJyYXkoNCwgOCkpO1xuICAgICAgICAgIGlmIChzY2hlbWUgPT09ICdjYmNzJyB8fCBzY2hlbWUgPT09ICdjZW5jJykge1xuICAgICAgICAgICAgdmFyIGZybWEgPSBmaW5kQm94KHNpbmYsIFsnZnJtYSddKVswXTtcbiAgICAgICAgICAgIGlmIChmcm1hKSB7XG4gICAgICAgICAgICAgIC8vIGZvciBlbmNyeXB0ZWQgY29udGVudCBjb2RlYyBmb3VyQ0Mgd2lsbCBiZSBpbiBmcm1hXG4gICAgICAgICAgICAgIGNvZGVjID0gYmluMnN0cihmcm1hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgY29kZWNGb3VyQ0MgPSBjb2RlYztcbiAgICBzd2l0Y2ggKGNvZGVjKSB7XG4gICAgICBjYXNlICdhdmMxJzpcbiAgICAgIGNhc2UgJ2F2YzInOlxuICAgICAgY2FzZSAnYXZjMyc6XG4gICAgICBjYXNlICdhdmM0JzpcbiAgICAgICAge1xuICAgICAgICAgIC8vIGV4dHJhY3QgcHJvZmlsZSArIGNvbXBhdGliaWxpdHkgKyBsZXZlbCBvdXQgb2YgYXZjQyBib3hcbiAgICAgICAgICB2YXIgYXZjQ0JveCA9IGZpbmRCb3goc2FtcGxlRW50cmllc0VuZCwgWydhdmNDJ10pWzBdO1xuICAgICAgICAgIGlmIChhdmNDQm94ICYmIGF2Y0NCb3gubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgY29kZWMgKz0gJy4nICsgdG9IZXgoYXZjQ0JveFsxXSkgKyB0b0hleChhdmNDQm94WzJdKSArIHRvSGV4KGF2Y0NCb3hbM10pO1xuICAgICAgICAgICAgc3VwcGxlbWVudGFsID0gcGFyc2VTdXBwbGVtZW50YWxEb1ZpQ29kZWMoY29kZWNGb3VyQ0MgPT09ICdhdmMxJyA/ICdkdmExJyA6ICdkdmF2Jywgc2FtcGxlRW50cmllc0VuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlICdtcDRhJzpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBjb2RlY0JveCA9IGZpbmRCb3goc2FtcGxlRW50cmllcywgW2ZvdXJDQ10pWzBdO1xuICAgICAgICAgIHZhciBlc2RzQm94ID0gZmluZEJveChjb2RlY0JveC5zdWJhcnJheSgyOCksIFsnZXNkcyddKVswXTtcbiAgICAgICAgICBpZiAoZXNkc0JveCAmJiBlc2RzQm94Lmxlbmd0aCA+IDcpIHtcbiAgICAgICAgICAgIHZhciBpID0gNDtcbiAgICAgICAgICAgIC8vIEVTIERlc2NyaXB0b3IgdGFnXG4gICAgICAgICAgICBpZiAoZXNkc0JveFtpKytdICE9PSAweDAzKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSA9IHNraXBCRVJJbnRlZ2VyKGVzZHNCb3gsIGkpO1xuICAgICAgICAgICAgaSArPSAyOyAvLyBza2lwIGVzX2lkO1xuICAgICAgICAgICAgdmFyIGZsYWdzID0gZXNkc0JveFtpKytdO1xuICAgICAgICAgICAgaWYgKGZsYWdzICYgMHg4MCkge1xuICAgICAgICAgICAgICBpICs9IDI7IC8vIHNraXAgZGVwZW5kZW5jeSBlc19pZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZsYWdzICYgMHg0MCkge1xuICAgICAgICAgICAgICBpICs9IGVzZHNCb3hbaSsrXTsgLy8gc2tpcCBVUkxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlY29kZXIgY29uZmlnIGRlc2NyaXB0b3JcbiAgICAgICAgICAgIGlmIChlc2RzQm94W2krK10gIT09IDB4MDQpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpID0gc2tpcEJFUkludGVnZXIoZXNkc0JveCwgaSk7XG4gICAgICAgICAgICB2YXIgb2JqZWN0VHlwZSA9IGVzZHNCb3hbaSsrXTtcbiAgICAgICAgICAgIGlmIChvYmplY3RUeXBlID09PSAweDQwKSB7XG4gICAgICAgICAgICAgIGNvZGVjICs9ICcuJyArIHRvSGV4KG9iamVjdFR5cGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpICs9IDEyO1xuICAgICAgICAgICAgLy8gRGVjb2RlciBzcGVjaWZpYyBpbmZvXG4gICAgICAgICAgICBpZiAoZXNkc0JveFtpKytdICE9PSAweDA1KSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSA9IHNraXBCRVJJbnRlZ2VyKGVzZHNCb3gsIGkpO1xuICAgICAgICAgICAgdmFyIGZpcnN0Qnl0ZSA9IGVzZHNCb3hbaSsrXTtcbiAgICAgICAgICAgIHZhciBhdWRpb09iamVjdFR5cGUgPSAoZmlyc3RCeXRlICYgMHhmOCkgPj4gMztcbiAgICAgICAgICAgIGlmIChhdWRpb09iamVjdFR5cGUgPT09IDMxKSB7XG4gICAgICAgICAgICAgIGF1ZGlvT2JqZWN0VHlwZSArPSAxICsgKChmaXJzdEJ5dGUgJiAweDcpIDw8IDMpICsgKChlc2RzQm94W2ldICYgMHhlMCkgPj4gNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb2RlYyArPSAnLicgKyBhdWRpb09iamVjdFR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlICdodmMxJzpcbiAgICAgIGNhc2UgJ2hldjEnOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGh2Y0NCb3ggPSBmaW5kQm94KHNhbXBsZUVudHJpZXNFbmQsIFsnaHZjQyddKVswXTtcbiAgICAgICAgICBpZiAoaHZjQ0JveCAmJiBodmNDQm94Lmxlbmd0aCA+IDEyKSB7XG4gICAgICAgICAgICB2YXIgcHJvZmlsZUJ5dGUgPSBodmNDQm94WzFdO1xuICAgICAgICAgICAgdmFyIHByb2ZpbGVTcGFjZSA9IFsnJywgJ0EnLCAnQicsICdDJ11bcHJvZmlsZUJ5dGUgPj4gNl07XG4gICAgICAgICAgICB2YXIgZ2VuZXJhbFByb2ZpbGVJZGMgPSBwcm9maWxlQnl0ZSAmIDB4MWY7XG4gICAgICAgICAgICB2YXIgcHJvZmlsZUNvbXBhdCA9IHJlYWRVaW50MzIoaHZjQ0JveCwgMik7XG4gICAgICAgICAgICB2YXIgdGllckZsYWcgPSAocHJvZmlsZUJ5dGUgJiAweDIwKSA+PiA1ID8gJ0gnIDogJ0wnO1xuICAgICAgICAgICAgdmFyIGxldmVsSURDID0gaHZjQ0JveFsxMl07XG4gICAgICAgICAgICB2YXIgY29uc3RyYWludEluZGljYXRvciA9IGh2Y0NCb3guc3ViYXJyYXkoNiwgMTIpO1xuICAgICAgICAgICAgY29kZWMgKz0gJy4nICsgcHJvZmlsZVNwYWNlICsgZ2VuZXJhbFByb2ZpbGVJZGM7XG4gICAgICAgICAgICBjb2RlYyArPSAnLicgKyByZXZlcnNlMzJCaXRJbnQocHJvZmlsZUNvbXBhdCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBjb2RlYyArPSAnLicgKyB0aWVyRmxhZyArIGxldmVsSURDO1xuICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnRTdHJpbmcgPSAnJztcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gY29uc3RyYWludEluZGljYXRvci5sZW5ndGg7IF9pLS07KSB7XG4gICAgICAgICAgICAgIHZhciBfYnl0ZSA9IGNvbnN0cmFpbnRJbmRpY2F0b3JbX2ldO1xuICAgICAgICAgICAgICBpZiAoX2J5dGUgfHwgY29uc3RyYWludFN0cmluZykge1xuICAgICAgICAgICAgICAgIHZhciBlbmNvZGVkQnl0ZSA9IF9ieXRlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnRTdHJpbmcgPSAnLicgKyBlbmNvZGVkQnl0ZSArIGNvbnN0cmFpbnRTdHJpbmc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvZGVjICs9IGNvbnN0cmFpbnRTdHJpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1cHBsZW1lbnRhbCA9IHBhcnNlU3VwcGxlbWVudGFsRG9WaUNvZGVjKGNvZGVjRm91ckNDID09ICdoZXYxJyA/ICdkdmhlJyA6ICdkdmgxJywgc2FtcGxlRW50cmllc0VuZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2R2aDEnOlxuICAgICAgY2FzZSAnZHZoZSc6XG4gICAgICBjYXNlICdkdmF2JzpcbiAgICAgIGNhc2UgJ2R2YTEnOlxuICAgICAgY2FzZSAnZGF2MSc6XG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlYyA9IHBhcnNlU3VwcGxlbWVudGFsRG9WaUNvZGVjKGNvZGVjLCBzYW1wbGVFbnRyaWVzRW5kKSB8fCBjb2RlYztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSAndnAwOSc6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgdnBjQ0JveCA9IGZpbmRCb3goc2FtcGxlRW50cmllc0VuZCwgWyd2cGNDJ10pWzBdO1xuICAgICAgICAgIGlmICh2cGNDQm94ICYmIHZwY0NCb3gubGVuZ3RoID4gNikge1xuICAgICAgICAgICAgdmFyIHByb2ZpbGUgPSB2cGNDQm94WzRdO1xuICAgICAgICAgICAgdmFyIGxldmVsID0gdnBjQ0JveFs1XTtcbiAgICAgICAgICAgIHZhciBiaXREZXB0aCA9IHZwY0NCb3hbNl0gPj4gNCAmIDB4MGY7XG4gICAgICAgICAgICBjb2RlYyArPSAnLicgKyBhZGRMZWFkaW5nWmVybyhwcm9maWxlKSArICcuJyArIGFkZExlYWRpbmdaZXJvKGxldmVsKSArICcuJyArIGFkZExlYWRpbmdaZXJvKGJpdERlcHRoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2F2MDEnOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGF2MUNCb3ggPSBmaW5kQm94KHNhbXBsZUVudHJpZXNFbmQsIFsnYXYxQyddKVswXTtcbiAgICAgICAgICBpZiAoYXYxQ0JveCAmJiBhdjFDQm94Lmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIHZhciBfcHJvZmlsZSA9IGF2MUNCb3hbMV0gPj4+IDU7XG4gICAgICAgICAgICB2YXIgX2xldmVsID0gYXYxQ0JveFsxXSAmIDB4MWY7XG4gICAgICAgICAgICB2YXIgX3RpZXJGbGFnID0gYXYxQ0JveFsyXSA+Pj4gNyA/ICdIJyA6ICdNJztcbiAgICAgICAgICAgIHZhciBoaWdoQml0RGVwdGggPSAoYXYxQ0JveFsyXSAmIDB4NDApID4+IDY7XG4gICAgICAgICAgICB2YXIgdHdlbHZlQml0ID0gKGF2MUNCb3hbMl0gJiAweDIwKSA+PiA1O1xuICAgICAgICAgICAgdmFyIF9iaXREZXB0aCA9IF9wcm9maWxlID09PSAyICYmIGhpZ2hCaXREZXB0aCA/IHR3ZWx2ZUJpdCA/IDEyIDogMTAgOiBoaWdoQml0RGVwdGggPyAxMCA6IDg7XG4gICAgICAgICAgICB2YXIgbW9ub2Nocm9tZSA9IChhdjFDQm94WzJdICYgMHgxMCkgPj4gNDtcbiAgICAgICAgICAgIHZhciBjaHJvbWFTdWJzYW1wbGluZ1ggPSAoYXYxQ0JveFsyXSAmIDB4MDgpID4+IDM7XG4gICAgICAgICAgICB2YXIgY2hyb21hU3Vic2FtcGxpbmdZID0gKGF2MUNCb3hbMl0gJiAweDA0KSA+PiAyO1xuICAgICAgICAgICAgdmFyIGNocm9tYVNhbXBsZVBvc2l0aW9uID0gYXYxQ0JveFsyXSAmIDB4MDM7XG4gICAgICAgICAgICAvLyBUT0RPOiBwYXJzZSBjb2xvcl9kZXNjcmlwdGlvbl9wcmVzZW50X2ZsYWdcbiAgICAgICAgICAgIC8vIGRlZmF1bHQgaXQgdG8gQlQuNzA5L2xpbWl0ZWQgcmFuZ2UgZm9yIG5vd1xuICAgICAgICAgICAgLy8gbW9yZSBpbmZvIGh0dHBzOi8vYW9tZWRpYWNvZGVjLmdpdGh1Yi5pby9hdjEtaXNvYm1mZi8jYXYxY29kZWNjb25maWd1cmF0aW9uYm94LXN5bnRheFxuICAgICAgICAgICAgdmFyIGNvbG9yUHJpbWFyaWVzID0gMTtcbiAgICAgICAgICAgIHZhciB0cmFuc2ZlckNoYXJhY3RlcmlzdGljcyA9IDE7XG4gICAgICAgICAgICB2YXIgbWF0cml4Q29lZmZpY2llbnRzID0gMTtcbiAgICAgICAgICAgIHZhciB2aWRlb0Z1bGxSYW5nZUZsYWcgPSAwO1xuICAgICAgICAgICAgY29kZWMgKz0gJy4nICsgX3Byb2ZpbGUgKyAnLicgKyBhZGRMZWFkaW5nWmVybyhfbGV2ZWwpICsgX3RpZXJGbGFnICsgJy4nICsgYWRkTGVhZGluZ1plcm8oX2JpdERlcHRoKSArICcuJyArIG1vbm9jaHJvbWUgKyAnLicgKyBjaHJvbWFTdWJzYW1wbGluZ1ggKyBjaHJvbWFTdWJzYW1wbGluZ1kgKyBjaHJvbWFTYW1wbGVQb3NpdGlvbiArICcuJyArIGFkZExlYWRpbmdaZXJvKGNvbG9yUHJpbWFyaWVzKSArICcuJyArIGFkZExlYWRpbmdaZXJvKHRyYW5zZmVyQ2hhcmFjdGVyaXN0aWNzKSArICcuJyArIGFkZExlYWRpbmdaZXJvKG1hdHJpeENvZWZmaWNpZW50cykgKyAnLicgKyB2aWRlb0Z1bGxSYW5nZUZsYWc7XG4gICAgICAgICAgICBzdXBwbGVtZW50YWwgPSBwYXJzZVN1cHBsZW1lbnRhbERvVmlDb2RlYygnZGF2MScsIHNhbXBsZUVudHJpZXNFbmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY29kZWM6IGNvZGVjLFxuICAgICAgZW5jcnlwdGVkOiBlbmNyeXB0ZWQsXG4gICAgICBzdXBwbGVtZW50YWw6IHN1cHBsZW1lbnRhbFxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gcGFyc2VTdXBwbGVtZW50YWxEb1ZpQ29kZWMoZm91ckNDLCBzYW1wbGVFbnRyaWVzRW5kKSB7XG4gICAgdmFyIGR2dkNSZXN1bHQgPSBmaW5kQm94KHNhbXBsZUVudHJpZXNFbmQsIFsnZHZ2QyddKTsgLy8gdXNlZCBieSBEb1ZpIFByb2ZpbGUgOCB0byAxMFxuICAgIHZhciBkdlhDQm94ID0gZHZ2Q1Jlc3VsdC5sZW5ndGggPyBkdnZDUmVzdWx0WzBdIDogZmluZEJveChzYW1wbGVFbnRyaWVzRW5kLCBbJ2R2Y0MnXSlbMF07IC8vIHVzZWQgYnkgRG9WaSBQcm9maWxlcyB1cCB0byA3IGFuZCAyMFxuICAgIGlmIChkdlhDQm94KSB7XG4gICAgICB2YXIgZG9WaVByb2ZpbGUgPSBkdlhDQm94WzJdID4+IDEgJiAweDdmO1xuICAgICAgdmFyIGRvVmlMZXZlbCA9IGR2WENCb3hbMl0gPDwgNSAmIDB4MjAgfCBkdlhDQm94WzNdID4+IDMgJiAweDFmO1xuICAgICAgcmV0dXJuIGZvdXJDQyArICcuJyArIGFkZExlYWRpbmdaZXJvKGRvVmlQcm9maWxlKSArICcuJyArIGFkZExlYWRpbmdaZXJvKGRvVmlMZXZlbCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJldmVyc2UzMkJpdEludCh2YWwpIHtcbiAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspIHtcbiAgICAgIHJlc3VsdCB8PSAodmFsID4+IGkgJiAxKSA8PCAzMiAtIDEgLSBpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0ID4+PiAwO1xuICB9XG4gIGZ1bmN0aW9uIHNraXBCRVJJbnRlZ2VyKGJ5dGVzLCBpKSB7XG4gICAgdmFyIGxpbWl0ID0gaSArIDU7XG4gICAgd2hpbGUgKGJ5dGVzW2krK10gJiAweDgwICYmIGkgPCBsaW1pdCkge1xuICAgICAgLyogZG8gbm90aGluZyAqL1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuICBmdW5jdGlvbiB0b0hleCh4KSB7XG4gICAgcmV0dXJuICgnMCcgKyB4LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKS5zbGljZSgtMik7XG4gIH1cbiAgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm8obnVtKSB7XG4gICAgcmV0dXJuIChudW0gPCAxMCA/ICcwJyA6ICcnKSArIG51bTtcbiAgfVxuICBmdW5jdGlvbiBwYXRjaEVuY3lwdGlvbkRhdGEoaW5pdFNlZ21lbnQsIGRlY3J5cHRkYXRhKSB7XG4gICAgaWYgKCFpbml0U2VnbWVudCB8fCAhZGVjcnlwdGRhdGEpIHtcbiAgICAgIHJldHVybiBpbml0U2VnbWVudDtcbiAgICB9XG4gICAgdmFyIGtleUlkID0gZGVjcnlwdGRhdGEua2V5SWQ7XG4gICAgaWYgKGtleUlkICYmIGRlY3J5cHRkYXRhLmlzQ29tbW9uRW5jcnlwdGlvbikge1xuICAgICAgdmFyIHRyYWtzID0gZmluZEJveChpbml0U2VnbWVudCwgWydtb292JywgJ3RyYWsnXSk7XG4gICAgICB0cmFrcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFrKSB7XG4gICAgICAgIHZhciBzdHNkID0gZmluZEJveCh0cmFrLCBbJ21kaWEnLCAnbWluZicsICdzdGJsJywgJ3N0c2QnXSlbMF07XG5cbiAgICAgICAgLy8gc2tpcCB0aGUgc2FtcGxlIGVudHJ5IGNvdW50XG4gICAgICAgIHZhciBzYW1wbGVFbnRyaWVzID0gc3RzZC5zdWJhcnJheSg4KTtcbiAgICAgICAgdmFyIGVuY0JveGVzID0gZmluZEJveChzYW1wbGVFbnRyaWVzLCBbJ2VuY2EnXSk7XG4gICAgICAgIHZhciBpc0F1ZGlvID0gZW5jQm94ZXMubGVuZ3RoID4gMDtcbiAgICAgICAgaWYgKCFpc0F1ZGlvKSB7XG4gICAgICAgICAgZW5jQm94ZXMgPSBmaW5kQm94KHNhbXBsZUVudHJpZXMsIFsnZW5jdiddKTtcbiAgICAgICAgfVxuICAgICAgICBlbmNCb3hlcy5mb3JFYWNoKGZ1bmN0aW9uIChlbmMpIHtcbiAgICAgICAgICB2YXIgZW5jQm94Q2hpbGRyZW4gPSBpc0F1ZGlvID8gZW5jLnN1YmFycmF5KDI4KSA6IGVuYy5zdWJhcnJheSg3OCk7XG4gICAgICAgICAgdmFyIHNpbmZCb3hlcyA9IGZpbmRCb3goZW5jQm94Q2hpbGRyZW4sIFsnc2luZiddKTtcbiAgICAgICAgICBzaW5mQm94ZXMuZm9yRWFjaChmdW5jdGlvbiAoc2luZikge1xuICAgICAgICAgICAgdmFyIHRlbmMgPSBwYXJzZVNpbmYoc2luZik7XG4gICAgICAgICAgICBpZiAodGVuYykge1xuICAgICAgICAgICAgICAvLyBMb29rIGZvciBkZWZhdWx0IGtleSBpZCAoa2V5SUQgb2Zmc2V0IGlzIGFsd2F5cyA4IHdpdGhpbiB0aGUgdGVuYyBib3gpOlxuICAgICAgICAgICAgICB2YXIgdGVuY0tleUlkID0gdGVuYy5zdWJhcnJheSg4LCAyNCk7XG4gICAgICAgICAgICAgIGlmICghdGVuY0tleUlkLnNvbWUoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYiAhPT0gMDtcbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiW2VtZV0gUGF0Y2hpbmcga2V5SWQgaW4gJ2VuY1wiICsgKGlzQXVkaW8gPyAnYScgOiAndicpICsgXCI+c2luZj4+dGVuYycgYm94OiBcIiArIEhleC5oZXhEdW1wKHRlbmNLZXlJZCkgKyBcIiAtPiBcIiArIEhleC5oZXhEdW1wKGtleUlkKSk7XG4gICAgICAgICAgICAgICAgdGVuYy5zZXQoa2V5SWQsIDgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBpbml0U2VnbWVudDtcbiAgfVxuICBmdW5jdGlvbiBwYXJzZVNpbmYoc2luZikge1xuICAgIHZhciBzY2htID0gZmluZEJveChzaW5mLCBbJ3NjaG0nXSlbMF07XG4gICAgaWYgKHNjaG0pIHtcbiAgICAgIHZhciBzY2hlbWUgPSBiaW4yc3RyKHNjaG0uc3ViYXJyYXkoNCwgOCkpO1xuICAgICAgaWYgKHNjaGVtZSA9PT0gJ2NiY3MnIHx8IHNjaGVtZSA9PT0gJ2NlbmMnKSB7XG4gICAgICAgIHJldHVybiBmaW5kQm94KHNpbmYsIFsnc2NoaScsICd0ZW5jJ10pWzBdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qXG4gICAgRm9yIFJlZmVyZW5jZTpcbiAgICBhbGlnbmVkKDgpIGNsYXNzIFRyYWNrRnJhZ21lbnRIZWFkZXJCb3hcbiAgICAgICAgICAgICBleHRlbmRzIEZ1bGxCb3go4oCYdGZoZOKAmSwgMCwgdGZfZmxhZ3Mpe1xuICAgICAgIHVuc2lnbmVkIGludCgzMikgIHRyYWNrX0lEO1xuICAgICAgIC8vIGFsbCB0aGUgZm9sbG93aW5nIGFyZSBvcHRpb25hbCBmaWVsZHNcbiAgICAgICB1bnNpZ25lZCBpbnQoNjQpICBiYXNlX2RhdGFfb2Zmc2V0O1xuICAgICAgIHVuc2lnbmVkIGludCgzMikgIHNhbXBsZV9kZXNjcmlwdGlvbl9pbmRleDtcbiAgICAgICB1bnNpZ25lZCBpbnQoMzIpICBkZWZhdWx0X3NhbXBsZV9kdXJhdGlvbjtcbiAgICAgICB1bnNpZ25lZCBpbnQoMzIpICBkZWZhdWx0X3NhbXBsZV9zaXplO1xuICAgICAgIHVuc2lnbmVkIGludCgzMikgIGRlZmF1bHRfc2FtcGxlX2ZsYWdzXG4gICAgfVxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRTYW1wbGVEYXRhKGRhdGEsIGluaXREYXRhLCBsb2dnZXIpIHtcbiAgICB2YXIgdHJhY2tzID0ge307XG4gICAgdmFyIHRyYWZzID0gZmluZEJveChkYXRhLCBbJ21vb2YnLCAndHJhZiddKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdHJhZiA9IHRyYWZzW2ldO1xuICAgICAgLy8gVGhlcmUgaXMgb25seSBvbmUgdGZoZCAmIHRydW4gcGVyIHRyYWZcbiAgICAgIC8vIFRoaXMgaXMgdHJ1ZSBmb3IgQ01BRiBzdHlsZSBjb250ZW50LCBhbmQgd2Ugc2hvdWxkIHBlcmhhcHMgY2hlY2sgdGhlIGZ0eXBcbiAgICAgIC8vIGFuZCBvbmx5IGxvb2sgZm9yIGEgc2luZ2xlIHRydW4gdGhlbiwgYnV0IGZvciBJU09CTUZGIHdlIHNob3VsZCBjaGVja1xuICAgICAgLy8gZm9yIG11bHRpcGxlIHRyYWNrIHJ1bnMuXG4gICAgICB2YXIgdGZoZCA9IGZpbmRCb3godHJhZiwgWyd0ZmhkJ10pWzBdO1xuICAgICAgLy8gZ2V0IHRoZSB0cmFjayBpZCBmcm9tIHRoZSB0ZmhkXG4gICAgICB2YXIgaWQgPSByZWFkVWludDMyKHRmaGQsIDQpO1xuICAgICAgdmFyIHRyYWNrID0gaW5pdERhdGFbaWRdO1xuICAgICAgaWYgKCF0cmFjaykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciB0cmFja1RpbWVzID0gdHJhY2tzW2lkXSB8fCAodHJhY2tzW2lkXSA9IHtcbiAgICAgICAgc3RhcnQ6IE5hTixcbiAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgIHNhbXBsZUNvdW50OiAwLFxuICAgICAgICB0aW1lc2NhbGU6IHRyYWNrLnRpbWVzY2FsZSxcbiAgICAgICAgdHlwZTogdHJhY2sudHlwZVxuICAgICAgfSk7XG4gICAgICAvLyBnZXQgc3RhcnQgRFRTXG4gICAgICB2YXIgdGZkdCA9IGZpbmRCb3godHJhZiwgWyd0ZmR0J10pWzBdO1xuICAgICAgaWYgKHRmZHQpIHtcbiAgICAgICAgdmFyIHZlcnNpb24gPSB0ZmR0WzBdO1xuICAgICAgICB2YXIgYmFzZVRpbWUgPSByZWFkVWludDMyKHRmZHQsIDQpO1xuICAgICAgICBpZiAodmVyc2lvbiA9PT0gMSkge1xuICAgICAgICAgIC8vIElmIHZhbHVlIGlzIHRvbyBsYXJnZSwgYXNzdW1lIHNpZ25lZCA2NC1iaXQuIE5lZ2F0aXZlIHRyYWNrIGZyYWdtZW50IGRlY29kZSB0aW1lcyBhcmUgaW52YWxpZCwgYnV0IHRoZXkgZXhpc3QgaW4gdGhlIHdpbGQuXG4gICAgICAgICAgLy8gVGhpcyBwcmV2ZW50cyBsYXJnZSB2YWx1ZXMgZnJvbSBiZWluZyB1c2VkIGZvciBpbml0UFRTLCB3aGljaCBjYW4gY2F1c2UgcGxheWxpc3Qgc3luYyBpc3N1ZXMuXG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvLWRldi9obHMuanMvaXNzdWVzLzUzMDNcbiAgICAgICAgICBpZiAoYmFzZVRpbWUgPT09IFVJTlQzMl9NQVgkMSkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJbbXA0LWRlbXV4ZXJdOiBJZ25vcmluZyBhc3N1bWVkIGludmFsaWQgc2lnbmVkIDY0LWJpdCB0cmFjayBmcmFnbWVudCBkZWNvZGUgdGltZVwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVRpbWUgKj0gVUlOVDMyX01BWCQxICsgMTtcbiAgICAgICAgICAgIGJhc2VUaW1lICs9IHJlYWRVaW50MzIodGZkdCwgOCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Zpbml0ZU51bWJlcihiYXNlVGltZSkgJiYgKCFpc0Zpbml0ZU51bWJlcih0cmFja1RpbWVzLnN0YXJ0KSB8fCBiYXNlVGltZSA8IHRyYWNrVGltZXMuc3RhcnQpKSB7XG4gICAgICAgICAgdHJhY2tUaW1lcy5zdGFydCA9IGJhc2VUaW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgdHJhY2tEZWZhdWx0ID0gdHJhY2suZGVmYXVsdDtcbiAgICAgIHZhciB0ZmhkRmxhZ3MgPSByZWFkVWludDMyKHRmaGQsIDApIHwgKHRyYWNrRGVmYXVsdCA9PSBudWxsID8gdm9pZCAwIDogdHJhY2tEZWZhdWx0LmZsYWdzKTtcbiAgICAgIHZhciBkZWZhdWx0U2FtcGxlRHVyYXRpb24gPSAodHJhY2tEZWZhdWx0ID09IG51bGwgPyB2b2lkIDAgOiB0cmFja0RlZmF1bHQuZHVyYXRpb24pIHx8IDA7XG4gICAgICBpZiAodGZoZEZsYWdzICYgMHgwMDAwMDgpIHtcbiAgICAgICAgLy8gMHgwMDAwMDggaW5kaWNhdGVzIHRoZSBwcmVzZW5jZSBvZiB0aGUgZGVmYXVsdF9zYW1wbGVfZHVyYXRpb24gZmllbGRcbiAgICAgICAgaWYgKHRmaGRGbGFncyAmIDB4MDAwMDAyKSB7XG4gICAgICAgICAgLy8gMHgwMDAwMDIgaW5kaWNhdGVzIHRoZSBwcmVzZW5jZSBvZiB0aGUgc2FtcGxlX2Rlc2NyaXB0aW9uX2luZGV4IGZpZWxkLCB3aGljaCBwcmVjZWRlcyBkZWZhdWx0X3NhbXBsZV9kdXJhdGlvblxuICAgICAgICAgIC8vIElmIHByZXNlbnQsIHRoZSBkZWZhdWx0X3NhbXBsZV9kdXJhdGlvbiBleGlzdHMgYXQgYnl0ZSBvZmZzZXQgMTJcbiAgICAgICAgICBkZWZhdWx0U2FtcGxlRHVyYXRpb24gPSByZWFkVWludDMyKHRmaGQsIDEyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UsIHRoZSBkdXJhdGlvbiBpcyBhdCBieXRlIG9mZnNldCA4XG4gICAgICAgICAgZGVmYXVsdFNhbXBsZUR1cmF0aW9uID0gcmVhZFVpbnQzMih0ZmhkLCA4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHRydW5zID0gZmluZEJveCh0cmFmLCBbJ3RydW4nXSk7XG4gICAgICB2YXIgc2FtcGxlRFRTID0gdHJhY2tUaW1lcy5zdGFydCB8fCAwO1xuICAgICAgdmFyIHJhd0R1cmF0aW9uID0gMDtcbiAgICAgIHZhciBzYW1wbGVEdXJhdGlvbiA9IGRlZmF1bHRTYW1wbGVEdXJhdGlvbjtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdHJ1bnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIHRydW4gPSB0cnVuc1tqXTtcbiAgICAgICAgdmFyIHNhbXBsZUNvdW50ID0gcmVhZFVpbnQzMih0cnVuLCA0KTtcbiAgICAgICAgdmFyIHNhbXBsZUluZGV4ID0gdHJhY2tUaW1lcy5zYW1wbGVDb3VudDtcbiAgICAgICAgdHJhY2tUaW1lcy5zYW1wbGVDb3VudCArPSBzYW1wbGVDb3VudDtcbiAgICAgICAgLy8gR2V0IGR1cmF0aW9uIGZyb20gc2FtcGxlc1xuICAgICAgICB2YXIgZGF0YU9mZnNldFByZXNlbnQgPSB0cnVuWzNdICYgMHgwMTtcbiAgICAgICAgdmFyIGZpcnN0U2FtcGxlRmxhZ3NQcmVzZW50ID0gdHJ1blszXSAmIDB4MDQ7XG4gICAgICAgIHZhciBzYW1wbGVEdXJhdGlvblByZXNlbnQgPSB0cnVuWzJdICYgMHgwMTtcbiAgICAgICAgdmFyIHNhbXBsZVNpemVQcmVzZW50ID0gdHJ1blsyXSAmIDB4MDI7XG4gICAgICAgIHZhciBzYW1wbGVGbGFnc1ByZXNlbnQgPSB0cnVuWzJdICYgMHgwNDtcbiAgICAgICAgdmFyIHNhbXBsZUNvbXBvc2l0aW9uVGltZU9mZnNldFByZXNlbnQgPSB0cnVuWzJdICYgMHgwODtcbiAgICAgICAgdmFyIG9mZnNldCA9IDg7XG4gICAgICAgIHZhciByZW1haW5pbmcgPSBzYW1wbGVDb3VudDtcbiAgICAgICAgaWYgKGRhdGFPZmZzZXRQcmVzZW50KSB7XG4gICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0U2FtcGxlRmxhZ3NQcmVzZW50ICYmIHNhbXBsZUNvdW50KSB7XG4gICAgICAgICAgdmFyIGlzTm9uU3luY1NhbXBsZSA9IHRydW5bb2Zmc2V0ICsgMV0gJiAweDAxO1xuICAgICAgICAgIGlmICghaXNOb25TeW5jU2FtcGxlICYmIHRyYWNrVGltZXMua2V5RnJhbWVJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0cmFja1RpbWVzLmtleUZyYW1lSW5kZXggPSBzYW1wbGVJbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgaWYgKHNhbXBsZUR1cmF0aW9uUHJlc2VudCkge1xuICAgICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSByZWFkVWludDMyKHRydW4sIG9mZnNldCk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBkZWZhdWx0U2FtcGxlRHVyYXRpb247XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzYW1wbGVTaXplUHJlc2VudCkge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzYW1wbGVDb21wb3NpdGlvblRpbWVPZmZzZXRQcmVzZW50KSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2FtcGxlRFRTICs9IHNhbXBsZUR1cmF0aW9uO1xuICAgICAgICAgIHJhd0R1cmF0aW9uICs9IHNhbXBsZUR1cmF0aW9uO1xuICAgICAgICAgIHJlbWFpbmluZy0tO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChyZW1haW5pbmctLSkge1xuICAgICAgICAgIGlmIChzYW1wbGVEdXJhdGlvblByZXNlbnQpIHtcbiAgICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gcmVhZFVpbnQzMih0cnVuLCBvZmZzZXQpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gZGVmYXVsdFNhbXBsZUR1cmF0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2FtcGxlU2l6ZVByZXNlbnQpIHtcbiAgICAgICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2FtcGxlRmxhZ3NQcmVzZW50KSB7XG4gICAgICAgICAgICB2YXIgX2lzTm9uU3luY1NhbXBsZSA9IHRydW5bb2Zmc2V0ICsgMV0gJiAweDAxO1xuICAgICAgICAgICAgaWYgKCFfaXNOb25TeW5jU2FtcGxlKSB7XG4gICAgICAgICAgICAgIGlmICh0cmFja1RpbWVzLmtleUZyYW1lSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRyYWNrVGltZXMua2V5RnJhbWVJbmRleCA9IHRyYWNrVGltZXMuc2FtcGxlQ291bnQgLSAocmVtYWluaW5nICsgMSk7XG4gICAgICAgICAgICAgICAgdHJhY2tUaW1lcy5rZXlGcmFtZVN0YXJ0ID0gc2FtcGxlRFRTO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNhbXBsZUNvbXBvc2l0aW9uVGltZU9mZnNldFByZXNlbnQpIHtcbiAgICAgICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzYW1wbGVEVFMgKz0gc2FtcGxlRHVyYXRpb247XG4gICAgICAgICAgcmF3RHVyYXRpb24gKz0gc2FtcGxlRHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyYXdEdXJhdGlvbiAmJiBkZWZhdWx0U2FtcGxlRHVyYXRpb24pIHtcbiAgICAgICAgICByYXdEdXJhdGlvbiArPSBkZWZhdWx0U2FtcGxlRHVyYXRpb24gKiBzYW1wbGVDb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdHJhY2tUaW1lcy5kdXJhdGlvbiArPSByYXdEdXJhdGlvbjtcbiAgICB9XG4gICAgaWYgKCFPYmplY3Qua2V5cyh0cmFja3MpLnNvbWUoZnVuY3Rpb24gKHRyYWNrSWQpIHtcbiAgICAgIHJldHVybiB0cmFja3NbdHJhY2tJZF0uZHVyYXRpb247XG4gICAgfSkpIHtcbiAgICAgIC8vIElmIGR1cmF0aW9uIHNhbXBsZXMgYXJlIG5vdCBhdmFpbGFibGUgaW4gdGhlIHRyYWYgdXNlIHNpZHggc3Vic2VnbWVudF9kdXJhdGlvblxuICAgICAgdmFyIHNpZHhNaW5TdGFydCA9IEluZmluaXR5O1xuICAgICAgdmFyIHNpZHhNYXhFbmQgPSAwO1xuICAgICAgdmFyIHNpZHhzID0gZmluZEJveChkYXRhLCBbJ3NpZHgnXSk7XG4gICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBzaWR4cy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgIHZhciBzaWR4ID0gcGFyc2VTZWdtZW50SW5kZXgoc2lkeHNbX2kyXSk7XG4gICAgICAgIGlmIChzaWR4ICE9IG51bGwgJiYgc2lkeC5yZWZlcmVuY2VzKSB7XG4gICAgICAgICAgc2lkeE1pblN0YXJ0ID0gTWF0aC5taW4oc2lkeE1pblN0YXJ0LCBzaWR4LmVhcmxpZXN0UHJlc2VudGF0aW9uVGltZSAvIHNpZHgudGltZXNjYWxlKTtcbiAgICAgICAgICB2YXIgc3ViU2VnbWVudER1cmF0aW9uID0gc2lkeC5yZWZlcmVuY2VzLnJlZHVjZShmdW5jdGlvbiAoZHVyLCByZWYpIHtcbiAgICAgICAgICAgIHJldHVybiBkdXIgKyByZWYuaW5mby5kdXJhdGlvbiB8fCAwO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIHNpZHhNYXhFbmQgPSBNYXRoLm1heChzaWR4TWF4RW5kLCBzdWJTZWdtZW50RHVyYXRpb24gKyBzaWR4LmVhcmxpZXN0UHJlc2VudGF0aW9uVGltZSAvIHNpZHgudGltZXNjYWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNpZHhNYXhFbmQgJiYgaXNGaW5pdGVOdW1iZXIoc2lkeE1heEVuZCkpIHtcbiAgICAgICAgT2JqZWN0LmtleXModHJhY2tzKS5mb3JFYWNoKGZ1bmN0aW9uICh0cmFja0lkKSB7XG4gICAgICAgICAgaWYgKCF0cmFja3NbdHJhY2tJZF0uZHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRyYWNrc1t0cmFja0lkXS5kdXJhdGlvbiA9IHNpZHhNYXhFbmQgKiB0cmFja3NbdHJhY2tJZF0udGltZXNjYWxlIC0gdHJhY2tzW3RyYWNrSWRdLnN0YXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cmFja3M7XG4gIH1cblxuICAvLyBUT0RPOiBSZW1vdmUgYG9mZnNldFN0YXJ0RFRTYCBpbiBmYXZvciBvZiB1c2luZyBgdGltZXN0YW1wT2Zmc2V0YCAoaXNzdWUgIzU3MTUpXG4gIGZ1bmN0aW9uIG9mZnNldFN0YXJ0RFRTKGluaXREYXRhLCBmbXA0LCB0aW1lT2Zmc2V0KSB7XG4gICAgZmluZEJveChmbXA0LCBbJ21vb2YnLCAndHJhZiddKS5mb3JFYWNoKGZ1bmN0aW9uICh0cmFmKSB7XG4gICAgICBmaW5kQm94KHRyYWYsIFsndGZoZCddKS5mb3JFYWNoKGZ1bmN0aW9uICh0ZmhkKSB7XG4gICAgICAgIC8vIGdldCB0aGUgdHJhY2sgaWQgZnJvbSB0aGUgdGZoZFxuICAgICAgICB2YXIgaWQgPSByZWFkVWludDMyKHRmaGQsIDQpO1xuICAgICAgICB2YXIgdHJhY2sgPSBpbml0RGF0YVtpZF07XG4gICAgICAgIGlmICghdHJhY2spIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXNzdW1lIGEgOTBrSHogY2xvY2sgaWYgbm8gdGltZXNjYWxlIHdhcyBzcGVjaWZpZWRcbiAgICAgICAgdmFyIHRpbWVzY2FsZSA9IHRyYWNrLnRpbWVzY2FsZSB8fCA5MGUzO1xuICAgICAgICAvLyBnZXQgdGhlIGJhc2UgbWVkaWEgZGVjb2RlIHRpbWUgZnJvbSB0aGUgdGZkdFxuICAgICAgICBmaW5kQm94KHRyYWYsIFsndGZkdCddKS5mb3JFYWNoKGZ1bmN0aW9uICh0ZmR0KSB7XG4gICAgICAgICAgdmFyIHZlcnNpb24gPSB0ZmR0WzBdO1xuICAgICAgICAgIHZhciBvZmZzZXQgPSB0aW1lT2Zmc2V0ICogdGltZXNjYWxlO1xuICAgICAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgICAgIHZhciBiYXNlTWVkaWFEZWNvZGVUaW1lID0gcmVhZFVpbnQzMih0ZmR0LCA0KTtcbiAgICAgICAgICAgIGlmICh2ZXJzaW9uID09PSAwKSB7XG4gICAgICAgICAgICAgIGJhc2VNZWRpYURlY29kZVRpbWUgLT0gb2Zmc2V0O1xuICAgICAgICAgICAgICBiYXNlTWVkaWFEZWNvZGVUaW1lID0gTWF0aC5tYXgoYmFzZU1lZGlhRGVjb2RlVGltZSwgMCk7XG4gICAgICAgICAgICAgIHdyaXRlVWludDMyKHRmZHQsIDQsIGJhc2VNZWRpYURlY29kZVRpbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZSAqPSBNYXRoLnBvdygyLCAzMik7XG4gICAgICAgICAgICAgIGJhc2VNZWRpYURlY29kZVRpbWUgKz0gcmVhZFVpbnQzMih0ZmR0LCA4KTtcbiAgICAgICAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZSAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgIGJhc2VNZWRpYURlY29kZVRpbWUgPSBNYXRoLm1heChiYXNlTWVkaWFEZWNvZGVUaW1lLCAwKTtcbiAgICAgICAgICAgICAgdmFyIHVwcGVyID0gTWF0aC5mbG9vcihiYXNlTWVkaWFEZWNvZGVUaW1lIC8gKFVJTlQzMl9NQVgkMSArIDEpKTtcbiAgICAgICAgICAgICAgdmFyIGxvd2VyID0gTWF0aC5mbG9vcihiYXNlTWVkaWFEZWNvZGVUaW1lICUgKFVJTlQzMl9NQVgkMSArIDEpKTtcbiAgICAgICAgICAgICAgd3JpdGVVaW50MzIodGZkdCwgNCwgdXBwZXIpO1xuICAgICAgICAgICAgICB3cml0ZVVpbnQzMih0ZmR0LCA4LCBsb3dlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gVE9ETzogQ2hlY2sgaWYgdGhlIGxhc3QgbW9vZittZGF0IHBhaXIgaXMgcGFydCBvZiB0aGUgdmFsaWQgcmFuZ2VcbiAgZnVuY3Rpb24gc2VnbWVudFZhbGlkUmFuZ2UoZGF0YSkge1xuICAgIHZhciBzZWdtZW50ZWRSYW5nZSA9IHtcbiAgICAgIHZhbGlkOiBudWxsLFxuICAgICAgcmVtYWluZGVyOiBudWxsXG4gICAgfTtcbiAgICB2YXIgbW9vZnMgPSBmaW5kQm94KGRhdGEsIFsnbW9vZiddKTtcbiAgICBpZiAobW9vZnMubGVuZ3RoIDwgMikge1xuICAgICAgc2VnbWVudGVkUmFuZ2UucmVtYWluZGVyID0gZGF0YTtcbiAgICAgIHJldHVybiBzZWdtZW50ZWRSYW5nZTtcbiAgICB9XG4gICAgdmFyIGxhc3QgPSBtb29mc1ttb29mcy5sZW5ndGggLSAxXTtcbiAgICAvLyBPZmZzZXQgYnkgOCBieXRlczsgZmluZEJveCBvZmZzZXRzIHRoZSBzdGFydCBieSBhcyBtdWNoXG4gICAgc2VnbWVudGVkUmFuZ2UudmFsaWQgPSBkYXRhLnNsaWNlKDAsIGxhc3QuYnl0ZU9mZnNldCAtIDgpO1xuICAgIHNlZ21lbnRlZFJhbmdlLnJlbWFpbmRlciA9IGRhdGEuc2xpY2UobGFzdC5ieXRlT2Zmc2V0IC0gOCk7XG4gICAgcmV0dXJuIHNlZ21lbnRlZFJhbmdlO1xuICB9XG4gIGZ1bmN0aW9uIGFwcGVuZFVpbnQ4QXJyYXkoZGF0YTEsIGRhdGEyKSB7XG4gICAgdmFyIHRlbXAgPSBuZXcgVWludDhBcnJheShkYXRhMS5sZW5ndGggKyBkYXRhMi5sZW5ndGgpO1xuICAgIHRlbXAuc2V0KGRhdGExKTtcbiAgICB0ZW1wLnNldChkYXRhMiwgZGF0YTEubGVuZ3RoKTtcbiAgICByZXR1cm4gdGVtcDtcbiAgfVxuICBmdW5jdGlvbiBwYXJzZVNhbXBsZXModGltZU9mZnNldCwgdHJhY2spIHtcbiAgICB2YXIgc2VpU2FtcGxlcyA9IFtdO1xuICAgIHZhciB2aWRlb0RhdGEgPSB0cmFjay5zYW1wbGVzO1xuICAgIHZhciB0aW1lc2NhbGUgPSB0cmFjay50aW1lc2NhbGU7XG4gICAgdmFyIHRyYWNrSWQgPSB0cmFjay5pZDtcbiAgICB2YXIgaXNIRVZDRmxhdm9yID0gZmFsc2U7XG4gICAgdmFyIG1vb2ZzID0gZmluZEJveCh2aWRlb0RhdGEsIFsnbW9vZiddKTtcbiAgICBtb29mcy5tYXAoZnVuY3Rpb24gKG1vb2YpIHtcbiAgICAgIHZhciBtb29mT2Zmc2V0ID0gbW9vZi5ieXRlT2Zmc2V0IC0gODtcbiAgICAgIHZhciB0cmFmcyA9IGZpbmRCb3gobW9vZiwgWyd0cmFmJ10pO1xuICAgICAgdHJhZnMubWFwKGZ1bmN0aW9uICh0cmFmKSB7XG4gICAgICAgIC8vIGdldCB0aGUgYmFzZSBtZWRpYSBkZWNvZGUgdGltZSBmcm9tIHRoZSB0ZmR0XG4gICAgICAgIHZhciBiYXNlVGltZSA9IGZpbmRCb3godHJhZiwgWyd0ZmR0J10pLm1hcChmdW5jdGlvbiAodGZkdCkge1xuICAgICAgICAgIHZhciB2ZXJzaW9uID0gdGZkdFswXTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVhZFVpbnQzMih0ZmR0LCA0KTtcbiAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gMSkge1xuICAgICAgICAgICAgcmVzdWx0ICo9IE1hdGgucG93KDIsIDMyKTtcbiAgICAgICAgICAgIHJlc3VsdCArPSByZWFkVWludDMyKHRmZHQsIDgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0IC8gdGltZXNjYWxlO1xuICAgICAgICB9KVswXTtcbiAgICAgICAgaWYgKGJhc2VUaW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lT2Zmc2V0ID0gYmFzZVRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbmRCb3godHJhZiwgWyd0ZmhkJ10pLm1hcChmdW5jdGlvbiAodGZoZCkge1xuICAgICAgICAgIHZhciBpZCA9IHJlYWRVaW50MzIodGZoZCwgNCk7XG4gICAgICAgICAgdmFyIHRmaGRGbGFncyA9IHJlYWRVaW50MzIodGZoZCwgMCkgJiAweGZmZmZmZjtcbiAgICAgICAgICB2YXIgYmFzZURhdGFPZmZzZXRQcmVzZW50ID0gKHRmaGRGbGFncyAmIDB4MDAwMDAxKSAhPT0gMDtcbiAgICAgICAgICB2YXIgc2FtcGxlRGVzY3JpcHRpb25JbmRleFByZXNlbnQgPSAodGZoZEZsYWdzICYgMHgwMDAwMDIpICE9PSAwO1xuICAgICAgICAgIHZhciBkZWZhdWx0U2FtcGxlRHVyYXRpb25QcmVzZW50ID0gKHRmaGRGbGFncyAmIDB4MDAwMDA4KSAhPT0gMDtcbiAgICAgICAgICB2YXIgZGVmYXVsdFNhbXBsZUR1cmF0aW9uID0gMDtcbiAgICAgICAgICB2YXIgZGVmYXVsdFNhbXBsZVNpemVQcmVzZW50ID0gKHRmaGRGbGFncyAmIDB4MDAwMDEwKSAhPT0gMDtcbiAgICAgICAgICB2YXIgZGVmYXVsdFNhbXBsZVNpemUgPSAwO1xuICAgICAgICAgIHZhciBkZWZhdWx0U2FtcGxlRmxhZ3NQcmVzZW50ID0gKHRmaGRGbGFncyAmIDB4MDAwMDIwKSAhPT0gMDtcbiAgICAgICAgICB2YXIgdGZoZE9mZnNldCA9IDg7XG4gICAgICAgICAgaWYgKGlkID09PSB0cmFja0lkKSB7XG4gICAgICAgICAgICBpZiAoYmFzZURhdGFPZmZzZXRQcmVzZW50KSB7XG4gICAgICAgICAgICAgIHRmaGRPZmZzZXQgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzYW1wbGVEZXNjcmlwdGlvbkluZGV4UHJlc2VudCkge1xuICAgICAgICAgICAgICB0ZmhkT2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGVmYXVsdFNhbXBsZUR1cmF0aW9uUHJlc2VudCkge1xuICAgICAgICAgICAgICBkZWZhdWx0U2FtcGxlRHVyYXRpb24gPSByZWFkVWludDMyKHRmaGQsIHRmaGRPZmZzZXQpO1xuICAgICAgICAgICAgICB0ZmhkT2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGVmYXVsdFNhbXBsZVNpemVQcmVzZW50KSB7XG4gICAgICAgICAgICAgIGRlZmF1bHRTYW1wbGVTaXplID0gcmVhZFVpbnQzMih0ZmhkLCB0ZmhkT2Zmc2V0KTtcbiAgICAgICAgICAgICAgdGZoZE9mZnNldCArPSA0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlZmF1bHRTYW1wbGVGbGFnc1ByZXNlbnQpIHtcbiAgICAgICAgICAgICAgdGZoZE9mZnNldCArPSA0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRyYWNrLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgaXNIRVZDRmxhdm9yID0gaXNIRVZDKHRyYWNrLmNvZGVjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmRCb3godHJhZiwgWyd0cnVuJ10pLm1hcChmdW5jdGlvbiAodHJ1bikge1xuICAgICAgICAgICAgICB2YXIgdmVyc2lvbiA9IHRydW5bMF07XG4gICAgICAgICAgICAgIHZhciBmbGFncyA9IHJlYWRVaW50MzIodHJ1biwgMCkgJiAweGZmZmZmZjtcbiAgICAgICAgICAgICAgdmFyIGRhdGFPZmZzZXRQcmVzZW50ID0gKGZsYWdzICYgMHgwMDAwMDEpICE9PSAwO1xuICAgICAgICAgICAgICB2YXIgZGF0YU9mZnNldCA9IDA7XG4gICAgICAgICAgICAgIHZhciBmaXJzdFNhbXBsZUZsYWdzUHJlc2VudCA9IChmbGFncyAmIDB4MDAwMDA0KSAhPT0gMDtcbiAgICAgICAgICAgICAgdmFyIHNhbXBsZUR1cmF0aW9uUHJlc2VudCA9IChmbGFncyAmIDB4MDAwMTAwKSAhPT0gMDtcbiAgICAgICAgICAgICAgdmFyIHNhbXBsZUR1cmF0aW9uID0gMDtcbiAgICAgICAgICAgICAgdmFyIHNhbXBsZVNpemVQcmVzZW50ID0gKGZsYWdzICYgMHgwMDAyMDApICE9PSAwO1xuICAgICAgICAgICAgICB2YXIgc2FtcGxlU2l6ZSA9IDA7XG4gICAgICAgICAgICAgIHZhciBzYW1wbGVGbGFnc1ByZXNlbnQgPSAoZmxhZ3MgJiAweDAwMDQwMCkgIT09IDA7XG4gICAgICAgICAgICAgIHZhciBzYW1wbGVDb21wb3NpdGlvbk9mZnNldHNQcmVzZW50ID0gKGZsYWdzICYgMHgwMDA4MDApICE9PSAwO1xuICAgICAgICAgICAgICB2YXIgY29tcG9zaXRpb25PZmZzZXQgPSAwO1xuICAgICAgICAgICAgICB2YXIgc2FtcGxlQ291bnQgPSByZWFkVWludDMyKHRydW4sIDQpO1xuICAgICAgICAgICAgICB2YXIgdHJ1bk9mZnNldCA9IDg7IC8vIHBhc3QgdmVyc2lvbiwgZmxhZ3MsIGFuZCBzYW1wbGUgY291bnRcblxuICAgICAgICAgICAgICBpZiAoZGF0YU9mZnNldFByZXNlbnQpIHtcbiAgICAgICAgICAgICAgICBkYXRhT2Zmc2V0ID0gcmVhZFVpbnQzMih0cnVuLCB0cnVuT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0cnVuT2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGZpcnN0U2FtcGxlRmxhZ3NQcmVzZW50KSB7XG4gICAgICAgICAgICAgICAgdHJ1bk9mZnNldCArPSA0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBzYW1wbGVPZmZzZXQgPSBkYXRhT2Zmc2V0ICsgbW9vZk9mZnNldDtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaXggPSAwOyBpeCA8IHNhbXBsZUNvdW50OyBpeCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNhbXBsZUR1cmF0aW9uUHJlc2VudCkge1xuICAgICAgICAgICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSByZWFkVWludDMyKHRydW4sIHRydW5PZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgdHJ1bk9mZnNldCArPSA0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IGRlZmF1bHRTYW1wbGVEdXJhdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNhbXBsZVNpemVQcmVzZW50KSB7XG4gICAgICAgICAgICAgICAgICBzYW1wbGVTaXplID0gcmVhZFVpbnQzMih0cnVuLCB0cnVuT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgIHRydW5PZmZzZXQgKz0gNDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc2FtcGxlU2l6ZSA9IGRlZmF1bHRTYW1wbGVTaXplO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2FtcGxlRmxhZ3NQcmVzZW50KSB7XG4gICAgICAgICAgICAgICAgICB0cnVuT2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzYW1wbGVDb21wb3NpdGlvbk9mZnNldHNQcmVzZW50KSB7XG4gICAgICAgICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGlvbk9mZnNldCA9IHJlYWRVaW50MzIodHJ1biwgdHJ1bk9mZnNldCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGlvbk9mZnNldCA9IHJlYWRTaW50MzIodHJ1biwgdHJ1bk9mZnNldCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB0cnVuT2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0cmFjay50eXBlID09PSBFbGVtZW50YXJ5U3RyZWFtVHlwZXMuVklERU8pIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuYWx1VG90YWxTaXplID0gMDtcbiAgICAgICAgICAgICAgICAgIHdoaWxlIChuYWx1VG90YWxTaXplIDwgc2FtcGxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFsdVNpemUgPSByZWFkVWludDMyKHZpZGVvRGF0YSwgc2FtcGxlT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlT2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1NFSU1lc3NhZ2UoaXNIRVZDRmxhdm9yLCB2aWRlb0RhdGFbc2FtcGxlT2Zmc2V0XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHZpZGVvRGF0YS5zdWJhcnJheShzYW1wbGVPZmZzZXQsIHNhbXBsZU9mZnNldCArIG5hbHVTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICBwYXJzZVNFSU1lc3NhZ2VGcm9tTkFMdShkYXRhLCBpc0hFVkNGbGF2b3IgPyAyIDogMSwgdGltZU9mZnNldCArIGNvbXBvc2l0aW9uT2Zmc2V0IC8gdGltZXNjYWxlLCBzZWlTYW1wbGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzYW1wbGVPZmZzZXQgKz0gbmFsdVNpemU7XG4gICAgICAgICAgICAgICAgICAgIG5hbHVUb3RhbFNpemUgKz0gbmFsdVNpemUgKyA0O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aW1lT2Zmc2V0ICs9IHNhbXBsZUR1cmF0aW9uIC8gdGltZXNjYWxlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlaVNhbXBsZXM7XG4gIH1cbiAgZnVuY3Rpb24gaXNIRVZDKGNvZGVjKSB7XG4gICAgaWYgKCFjb2RlYykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgYmFzZUNvZGVjID0gY29kZWMuc3Vic3RyaW5nKDAsIDQpO1xuICAgIHJldHVybiBiYXNlQ29kZWMgPT09ICdodmMxJyB8fCBiYXNlQ29kZWMgPT09ICdoZXYxJyB8fFxuICAgIC8vIERvbGJ5IFZpc2lvblxuICAgIGJhc2VDb2RlYyA9PT0gJ2R2aDEnIHx8IGJhc2VDb2RlYyA9PT0gJ2R2aGUnO1xuICB9XG4gIGZ1bmN0aW9uIGlzU0VJTWVzc2FnZShpc0hFVkNGbGF2b3IsIG5hbHVIZWFkZXIpIHtcbiAgICBpZiAoaXNIRVZDRmxhdm9yKSB7XG4gICAgICB2YXIgbmFsdVR5cGUgPSBuYWx1SGVhZGVyID4+IDEgJiAweDNmO1xuICAgICAgcmV0dXJuIG5hbHVUeXBlID09PSAzOSB8fCBuYWx1VHlwZSA9PT0gNDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfbmFsdVR5cGUgPSBuYWx1SGVhZGVyICYgMHgxZjtcbiAgICAgIHJldHVybiBfbmFsdVR5cGUgPT09IDY7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHBhcnNlU0VJTWVzc2FnZUZyb21OQUx1KHVuZXNjYXBlZERhdGEsIGhlYWRlclNpemUsIHB0cywgc2FtcGxlcykge1xuICAgIHZhciBkYXRhID0gZGlzY2FyZEVQQih1bmVzY2FwZWREYXRhKTtcbiAgICB2YXIgc2VpUHRyID0gMDtcbiAgICAvLyBza2lwIG5hbCBoZWFkZXJcbiAgICBzZWlQdHIgKz0gaGVhZGVyU2l6ZTtcbiAgICB2YXIgcGF5bG9hZFR5cGUgPSAwO1xuICAgIHZhciBwYXlsb2FkU2l6ZSA9IDA7XG4gICAgdmFyIGIgPSAwO1xuICAgIHdoaWxlIChzZWlQdHIgPCBkYXRhLmxlbmd0aCkge1xuICAgICAgcGF5bG9hZFR5cGUgPSAwO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoc2VpUHRyID49IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYiA9IGRhdGFbc2VpUHRyKytdO1xuICAgICAgICBwYXlsb2FkVHlwZSArPSBiO1xuICAgICAgfSB3aGlsZSAoYiA9PT0gMHhmZik7XG5cbiAgICAgIC8vIFBhcnNlIHBheWxvYWQgc2l6ZS5cbiAgICAgIHBheWxvYWRTaXplID0gMDtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHNlaVB0ciA+PSBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGIgPSBkYXRhW3NlaVB0cisrXTtcbiAgICAgICAgcGF5bG9hZFNpemUgKz0gYjtcbiAgICAgIH0gd2hpbGUgKGIgPT09IDB4ZmYpO1xuICAgICAgdmFyIGxlZnRPdmVyID0gZGF0YS5sZW5ndGggLSBzZWlQdHI7XG4gICAgICAvLyBDcmVhdGUgYSB2YXJpYWJsZSB0byBwcm9jZXNzIHRoZSBwYXlsb2FkXG4gICAgICB2YXIgcGF5UHRyID0gc2VpUHRyO1xuXG4gICAgICAvLyBJbmNyZW1lbnQgdGhlIHNlaVB0ciB0byB0aGUgZW5kIG9mIHRoZSBwYXlsb2FkXG4gICAgICBpZiAocGF5bG9hZFNpemUgPCBsZWZ0T3Zlcikge1xuICAgICAgICBzZWlQdHIgKz0gcGF5bG9hZFNpemU7XG4gICAgICB9IGVsc2UgaWYgKHBheWxvYWRTaXplID4gbGVmdE92ZXIpIHtcbiAgICAgICAgLy8gU29tZSB0eXBlIG9mIGNvcnJ1cHRpb24gaGFzIGhhcHBlbmVkP1xuICAgICAgICBsb2dnZXIuZXJyb3IoXCJNYWxmb3JtZWQgU0VJIHBheWxvYWQuIFwiICsgcGF5bG9hZFNpemUgKyBcIiBpcyB0b28gc21hbGwsIG9ubHkgXCIgKyBsZWZ0T3ZlciArIFwiIGJ5dGVzIGxlZnQgdG8gcGFyc2UuXCIpO1xuICAgICAgICAvLyBXZSBtaWdodCBiZSBhYmxlIHRvIHBhcnNlIHNvbWUgZGF0YSwgYnV0IGxldCdzIGJlIHNhZmUgYW5kIGlnbm9yZSBpdC5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAocGF5bG9hZFR5cGUgPT09IDQpIHtcbiAgICAgICAgdmFyIGNvdW50cnlDb2RlID0gZGF0YVtwYXlQdHIrK107XG4gICAgICAgIGlmIChjb3VudHJ5Q29kZSA9PT0gMTgxKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVyQ29kZSA9IHJlYWRVaW50MTYoZGF0YSwgcGF5UHRyKTtcbiAgICAgICAgICBwYXlQdHIgKz0gMjtcbiAgICAgICAgICBpZiAocHJvdmlkZXJDb2RlID09PSA0OSkge1xuICAgICAgICAgICAgdmFyIHVzZXJTdHJ1Y3R1cmUgPSByZWFkVWludDMyKGRhdGEsIHBheVB0cik7XG4gICAgICAgICAgICBwYXlQdHIgKz0gNDtcbiAgICAgICAgICAgIGlmICh1c2VyU3RydWN0dXJlID09PSAweDQ3NDEzOTM0KSB7XG4gICAgICAgICAgICAgIHZhciB1c2VyRGF0YVR5cGUgPSBkYXRhW3BheVB0cisrXTtcblxuICAgICAgICAgICAgICAvLyBSYXcgQ0VBLTYwOCBieXRlcyB3cmFwcGVkIGluIENFQS03MDggcGFja2V0XG4gICAgICAgICAgICAgIGlmICh1c2VyRGF0YVR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RCeXRlID0gZGF0YVtwYXlQdHIrK107XG4gICAgICAgICAgICAgICAgdmFyIHRvdGFsQ0NzID0gMHgxZiAmIGZpcnN0Qnl0ZTtcbiAgICAgICAgICAgICAgICB2YXIgZW5hYmxlZCA9IDB4NDAgJiBmaXJzdEJ5dGU7XG4gICAgICAgICAgICAgICAgdmFyIHRvdGFsQnl0ZXMgPSBlbmFibGVkID8gMiArIHRvdGFsQ0NzICogMyA6IDA7XG4gICAgICAgICAgICAgICAgdmFyIGJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KHRvdGFsQnl0ZXMpO1xuICAgICAgICAgICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICBieXRlQXJyYXlbMF0gPSBmaXJzdEJ5dGU7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRvdGFsQnl0ZXM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBieXRlQXJyYXlbaV0gPSBkYXRhW3BheVB0cisrXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IHVzZXJEYXRhVHlwZSxcbiAgICAgICAgICAgICAgICAgIHBheWxvYWRUeXBlOiBwYXlsb2FkVHlwZSxcbiAgICAgICAgICAgICAgICAgIHB0czogcHRzLFxuICAgICAgICAgICAgICAgICAgYnl0ZXM6IGJ5dGVBcnJheVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBheWxvYWRUeXBlID09PSA1KSB7XG4gICAgICAgIGlmIChwYXlsb2FkU2l6ZSA+IDE2KSB7XG4gICAgICAgICAgdmFyIHV1aWRTdHJBcnJheSA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IDE2OyBfaTMrKykge1xuICAgICAgICAgICAgdmFyIF9iID0gZGF0YVtwYXlQdHIrK10udG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgdXVpZFN0ckFycmF5LnB1c2goX2IubGVuZ3RoID09IDEgPyAnMCcgKyBfYiA6IF9iKTtcbiAgICAgICAgICAgIGlmIChfaTMgPT09IDMgfHwgX2kzID09PSA1IHx8IF9pMyA9PT0gNyB8fCBfaTMgPT09IDkpIHtcbiAgICAgICAgICAgICAgdXVpZFN0ckFycmF5LnB1c2goJy0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IHBheWxvYWRTaXplIC0gMTY7XG4gICAgICAgICAgdmFyIHVzZXJEYXRhQnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgICAgICAgIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IGxlbmd0aDsgX2k0KyspIHtcbiAgICAgICAgICAgIHVzZXJEYXRhQnl0ZXNbX2k0XSA9IGRhdGFbcGF5UHRyKytdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgcGF5bG9hZFR5cGU6IHBheWxvYWRUeXBlLFxuICAgICAgICAgICAgcHRzOiBwdHMsXG4gICAgICAgICAgICB1dWlkOiB1dWlkU3RyQXJyYXkuam9pbignJyksXG4gICAgICAgICAgICB1c2VyRGF0YTogdXRmOEFycmF5VG9TdHIodXNlckRhdGFCeXRlcyksXG4gICAgICAgICAgICB1c2VyRGF0YUJ5dGVzOiB1c2VyRGF0YUJ5dGVzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcmVtb3ZlIEVtdWxhdGlvbiBQcmV2ZW50aW9uIGJ5dGVzIGZyb20gYSBSQlNQXG4gICAqL1xuICBmdW5jdGlvbiBkaXNjYXJkRVBCKGRhdGEpIHtcbiAgICB2YXIgbGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgIHZhciBFUEJQb3NpdGlvbnMgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG5cbiAgICAvLyBGaW5kIGFsbCBgRW11bGF0aW9uIFByZXZlbnRpb24gQnl0ZXNgXG4gICAgd2hpbGUgKGkgPCBsZW5ndGggLSAyKSB7XG4gICAgICBpZiAoZGF0YVtpXSA9PT0gMCAmJiBkYXRhW2kgKyAxXSA9PT0gMCAmJiBkYXRhW2kgKyAyXSA9PT0gMHgwMykge1xuICAgICAgICBFUEJQb3NpdGlvbnMucHVzaChpICsgMik7XG4gICAgICAgIGkgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBubyBFbXVsYXRpb24gUHJldmVudGlvbiBCeXRlcyB3ZXJlIGZvdW5kIGp1c3QgcmV0dXJuIHRoZSBvcmlnaW5hbFxuICAgIC8vIGFycmF5XG4gICAgaWYgKEVQQlBvc2l0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhIG5ldyBhcnJheSB0byBob2xkIHRoZSBOQUwgdW5pdCBkYXRhXG4gICAgdmFyIG5ld0xlbmd0aCA9IGxlbmd0aCAtIEVQQlBvc2l0aW9ucy5sZW5ndGg7XG4gICAgdmFyIG5ld0RhdGEgPSBuZXcgVWludDhBcnJheShuZXdMZW5ndGgpO1xuICAgIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG5ld0xlbmd0aDsgc291cmNlSW5kZXgrKywgaSsrKSB7XG4gICAgICBpZiAoc291cmNlSW5kZXggPT09IEVQQlBvc2l0aW9uc1swXSkge1xuICAgICAgICAvLyBTa2lwIHRoaXMgYnl0ZVxuICAgICAgICBzb3VyY2VJbmRleCsrO1xuICAgICAgICAvLyBSZW1vdmUgdGhpcyBwb3NpdGlvbiBpbmRleFxuICAgICAgICBFUEJQb3NpdGlvbnMuc2hpZnQoKTtcbiAgICAgIH1cbiAgICAgIG5ld0RhdGFbaV0gPSBkYXRhW3NvdXJjZUluZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH1cbiAgZnVuY3Rpb24gcGFyc2VFbXNnKGRhdGEpIHtcbiAgICB2YXIgdmVyc2lvbiA9IGRhdGFbMF07XG4gICAgdmFyIHNjaGVtZUlkVXJpID0gJyc7XG4gICAgdmFyIHZhbHVlID0gJyc7XG4gICAgdmFyIHRpbWVTY2FsZSA9IDA7XG4gICAgdmFyIHByZXNlbnRhdGlvblRpbWVEZWx0YSA9IDA7XG4gICAgdmFyIHByZXNlbnRhdGlvblRpbWUgPSAwO1xuICAgIHZhciBldmVudER1cmF0aW9uID0gMDtcbiAgICB2YXIgaWQgPSAwO1xuICAgIHZhciBvZmZzZXQgPSAwO1xuICAgIGlmICh2ZXJzaW9uID09PSAwKSB7XG4gICAgICB3aGlsZSAoYmluMnN0cihkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgMSkpICE9PSAnXFwwJykge1xuICAgICAgICBzY2hlbWVJZFVyaSArPSBiaW4yc3RyKGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyAxKSk7XG4gICAgICAgIG9mZnNldCArPSAxO1xuICAgICAgfVxuICAgICAgc2NoZW1lSWRVcmkgKz0gYmluMnN0cihkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgMSkpO1xuICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICB3aGlsZSAoYmluMnN0cihkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgMSkpICE9PSAnXFwwJykge1xuICAgICAgICB2YWx1ZSArPSBiaW4yc3RyKGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyAxKSk7XG4gICAgICAgIG9mZnNldCArPSAxO1xuICAgICAgfVxuICAgICAgdmFsdWUgKz0gYmluMnN0cihkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgMSkpO1xuICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICB0aW1lU2NhbGUgPSByZWFkVWludDMyKGRhdGEsIDEyKTtcbiAgICAgIHByZXNlbnRhdGlvblRpbWVEZWx0YSA9IHJlYWRVaW50MzIoZGF0YSwgMTYpO1xuICAgICAgZXZlbnREdXJhdGlvbiA9IHJlYWRVaW50MzIoZGF0YSwgMjApO1xuICAgICAgaWQgPSByZWFkVWludDMyKGRhdGEsIDI0KTtcbiAgICAgIG9mZnNldCA9IDI4O1xuICAgIH0gZWxzZSBpZiAodmVyc2lvbiA9PT0gMSkge1xuICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICB0aW1lU2NhbGUgPSByZWFkVWludDMyKGRhdGEsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gNDtcbiAgICAgIHZhciBsZWZ0UHJlc2VudGF0aW9uVGltZSA9IHJlYWRVaW50MzIoZGF0YSwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSA0O1xuICAgICAgdmFyIHJpZ2h0UHJlc2VudGF0aW9uVGltZSA9IHJlYWRVaW50MzIoZGF0YSwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSA0O1xuICAgICAgcHJlc2VudGF0aW9uVGltZSA9IE1hdGgucG93KDIsIDMyKSAqIGxlZnRQcmVzZW50YXRpb25UaW1lICsgcmlnaHRQcmVzZW50YXRpb25UaW1lO1xuICAgICAgaWYgKCFpc1NhZmVJbnRlZ2VyKHByZXNlbnRhdGlvblRpbWUpKSB7XG4gICAgICAgIHByZXNlbnRhdGlvblRpbWUgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1ByZXNlbnRhdGlvbiB0aW1lIGV4Y2VlZHMgc2FmZSBpbnRlZ2VyIGxpbWl0IGFuZCB3cmFwcGVkIHRvIG1heCBzYWZlIGludGVnZXIgaW4gcGFyc2luZyBlbXNnIGJveCcpO1xuICAgICAgfVxuICAgICAgZXZlbnREdXJhdGlvbiA9IHJlYWRVaW50MzIoZGF0YSwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSA0O1xuICAgICAgaWQgPSByZWFkVWludDMyKGRhdGEsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gNDtcbiAgICAgIHdoaWxlIChiaW4yc3RyKGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyAxKSkgIT09ICdcXDAnKSB7XG4gICAgICAgIHNjaGVtZUlkVXJpICs9IGJpbjJzdHIoZGF0YS5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIDEpKTtcbiAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICB9XG4gICAgICBzY2hlbWVJZFVyaSArPSBiaW4yc3RyKGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyAxKSk7XG4gICAgICBvZmZzZXQgKz0gMTtcbiAgICAgIHdoaWxlIChiaW4yc3RyKGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyAxKSkgIT09ICdcXDAnKSB7XG4gICAgICAgIHZhbHVlICs9IGJpbjJzdHIoZGF0YS5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIDEpKTtcbiAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICB9XG4gICAgICB2YWx1ZSArPSBiaW4yc3RyKGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyAxKSk7XG4gICAgICBvZmZzZXQgKz0gMTtcbiAgICB9XG4gICAgdmFyIHBheWxvYWQgPSBkYXRhLnN1YmFycmF5KG9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2NoZW1lSWRVcmk6IHNjaGVtZUlkVXJpLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgdGltZVNjYWxlOiB0aW1lU2NhbGUsXG4gICAgICBwcmVzZW50YXRpb25UaW1lOiBwcmVzZW50YXRpb25UaW1lLFxuICAgICAgcHJlc2VudGF0aW9uVGltZURlbHRhOiBwcmVzZW50YXRpb25UaW1lRGVsdGEsXG4gICAgICBldmVudER1cmF0aW9uOiBldmVudER1cmF0aW9uLFxuICAgICAgaWQ6IGlkLFxuICAgICAgcGF5bG9hZDogcGF5bG9hZFxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gbXA0Qm94KHR5cGUpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGF5bG9hZCA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBwYXlsb2FkW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgdmFyIGxlbiA9IHBheWxvYWQubGVuZ3RoO1xuICAgIHZhciBzaXplID0gODtcbiAgICB2YXIgaSA9IGxlbjtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBzaXplICs9IHBheWxvYWRbaV0uYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICAgIHJlc3VsdFswXSA9IHNpemUgPj4gMjQgJiAweGZmO1xuICAgIHJlc3VsdFsxXSA9IHNpemUgPj4gMTYgJiAweGZmO1xuICAgIHJlc3VsdFsyXSA9IHNpemUgPj4gOCAmIDB4ZmY7XG4gICAgcmVzdWx0WzNdID0gc2l6ZSAmIDB4ZmY7XG4gICAgcmVzdWx0LnNldCh0eXBlLCA0KTtcbiAgICBmb3IgKGkgPSAwLCBzaXplID0gODsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICByZXN1bHQuc2V0KHBheWxvYWRbaV0sIHNpemUpO1xuICAgICAgc2l6ZSArPSBwYXlsb2FkW2ldLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZnVuY3Rpb24gbXA0cHNzaChzeXN0ZW1JZCwga2V5aWRzLCBkYXRhKSB7XG4gICAgaWYgKHN5c3RlbUlkLmJ5dGVMZW5ndGggIT09IDE2KSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzeXN0ZW0gaWQnKTtcbiAgICB9XG4gICAgdmFyIHZlcnNpb247XG4gICAgdmFyIGtpZHM7XG4gICAge1xuICAgICAgdmVyc2lvbiA9IDA7XG4gICAgICBraWRzID0gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICB9XG4gICAgdmFyIGtpZENvdW50O1xuICAgIGlmICh2ZXJzaW9uID4gMCkge1xuICAgICAga2lkQ291bnQgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICAgIGlmIChrZXlpZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBuZXcgRGF0YVZpZXcoa2lkQ291bnQuYnVmZmVyKS5zZXRVaW50MzIoMCwga2V5aWRzLmxlbmd0aCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBraWRDb3VudCA9IG5ldyBVaW50OEFycmF5KCk7XG4gICAgfVxuICAgIHZhciBkYXRhU2l6ZSA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgIGlmIChkYXRhICYmIGRhdGEuYnl0ZUxlbmd0aCA+IDApIHtcbiAgICAgIG5ldyBEYXRhVmlldyhkYXRhU2l6ZS5idWZmZXIpLnNldFVpbnQzMigwLCBkYXRhLmJ5dGVMZW5ndGgsIGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIG1wNEJveChbMTEyLCAxMTUsIDExNSwgMTA0XSwgbmV3IFVpbnQ4QXJyYXkoW3ZlcnNpb24sIDB4MDAsIDB4MDAsIDB4MDAgLy8gRmxhZ3NcbiAgICBdKSwgc3lzdGVtSWQsXG4gICAgLy8gMTYgYnl0ZXNcbiAgICBraWRDb3VudCwga2lkcywgZGF0YVNpemUsIGRhdGEgfHwgbmV3IFVpbnQ4QXJyYXkoKSk7XG4gIH1cbiAgZnVuY3Rpb24gcGFyc2VNdWx0aVBzc2goaW5pdERhdGEpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIGlmIChpbml0RGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gaW5pdERhdGEuYnl0ZUxlbmd0aDtcbiAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgd2hpbGUgKG9mZnNldCArIDMyIDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGluaXREYXRhLCBvZmZzZXQpO1xuICAgICAgICB2YXIgcHNzaCA9IHBhcnNlUHNzaCh2aWV3KTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHBzc2gpO1xuICAgICAgICBvZmZzZXQgKz0gcHNzaC5zaXplO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuICBmdW5jdGlvbiBwYXJzZVBzc2godmlldykge1xuICAgIHZhciBzaXplID0gdmlldy5nZXRVaW50MzIoMCk7XG4gICAgdmFyIG9mZnNldCA9IHZpZXcuYnl0ZU9mZnNldDtcbiAgICB2YXIgbGVuZ3RoID0gdmlldy5ieXRlTGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPCBzaXplKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgc2l6ZTogbGVuZ3RoXG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgdHlwZSA9IHZpZXcuZ2V0VWludDMyKDQpO1xuICAgIGlmICh0eXBlICE9PSAweDcwNzM3MzY4KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgc2l6ZTogc2l6ZVxuICAgICAgfTtcbiAgICB9XG4gICAgdmFyIHZlcnNpb24gPSB2aWV3LmdldFVpbnQzMig4KSA+Pj4gMjQ7XG4gICAgaWYgKHZlcnNpb24gIT09IDAgJiYgdmVyc2lvbiAhPT0gMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIHNpemU6IHNpemVcbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBidWZmZXIgPSB2aWV3LmJ1ZmZlcjtcbiAgICB2YXIgc3lzdGVtSWQgPSBIZXguaGV4RHVtcChuZXcgVWludDhBcnJheShidWZmZXIsIG9mZnNldCArIDEyLCAxNikpO1xuICAgIHZhciBkYXRhU2l6ZU9yS2lkQ291bnQgPSB2aWV3LmdldFVpbnQzMigyOCk7XG4gICAgdmFyIGtpZHMgPSBudWxsO1xuICAgIHZhciBkYXRhID0gbnVsbDtcbiAgICBpZiAodmVyc2lvbiA9PT0gMCkge1xuICAgICAgaWYgKHNpemUgLSAzMiA8IGRhdGFTaXplT3JLaWRDb3VudCB8fCBkYXRhU2l6ZU9yS2lkQ291bnQgPCAyMikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgIHNpemU6IHNpemVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShidWZmZXIsIG9mZnNldCArIDMyLCBkYXRhU2l6ZU9yS2lkQ291bnQpO1xuICAgIH0gZWxzZSBpZiAodmVyc2lvbiA9PT0gMSkge1xuICAgICAgaWYgKCFkYXRhU2l6ZU9yS2lkQ291bnQgfHwgbGVuZ3RoIDwgb2Zmc2V0ICsgMzIgKyBkYXRhU2l6ZU9yS2lkQ291bnQgKiAxNiArIDE2KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgc2l6ZTogc2l6ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAga2lkcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhU2l6ZU9yS2lkQ291bnQ7IGkrKykge1xuICAgICAgICBraWRzLnB1c2gobmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBvZmZzZXQgKyAzMiArIGkgKiAxNiwgMTYpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgICBzeXN0ZW1JZDogc3lzdGVtSWQsXG4gICAgICBraWRzOiBraWRzLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgc2l6ZTogc2l6ZVxuICAgIH07XG4gIH1cblxuICB2YXIgdXNlckFnZW50SGV2Y1N1cHBvcnRJc0luYWNjdXJhdGUgPSBmdW5jdGlvbiB1c2VyQWdlbnRIZXZjU3VwcG9ydElzSW5hY2N1cmF0ZSgpIHtcbiAgICByZXR1cm4gL1xcKFdpbmRvd3MuK0ZpcmVmb3hcXC8vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9O1xuXG4gIC8vIGZyb20gaHR0cDovL21wNHJhLm9yZy9jb2RlY3MuaHRtbFxuICAvLyB2YWx1ZXMgaW5kaWNhdGUgY29kZWMgc2VsZWN0aW9uIHByZWZlcmVuY2UgKGxvd2VyIGlzIGhpZ2hlciBwcmlvcml0eSlcbiAgdmFyIHNhbXBsZUVudHJ5Q29kZXNJU08gPSB7XG4gICAgYXVkaW86IHtcbiAgICAgIGEzZHM6IDEsXG4gICAgICAnYWMtMyc6IDAuOTUsXG4gICAgICAnYWMtNCc6IDEsXG4gICAgICBhbGFjOiAwLjksXG4gICAgICBhbGF3OiAxLFxuICAgICAgZHJhMTogMSxcbiAgICAgICdkdHMrJzogMSxcbiAgICAgICdkdHMtJzogMSxcbiAgICAgIGR0c2M6IDEsXG4gICAgICBkdHNlOiAxLFxuICAgICAgZHRzaDogMSxcbiAgICAgICdlYy0zJzogMC45LFxuICAgICAgZW5jYTogMSxcbiAgICAgIGZMYUM6IDAuOSxcbiAgICAgIC8vIE1QNC1SQSBsaXN0ZWQgY29kZWMgZW50cnkgZm9yIEZMQUNcbiAgICAgIGZsYWM6IDAuOSxcbiAgICAgIC8vIGxlZ2FjeSBicm93c2VyIGNvZGVjIG5hbWUgZm9yIEZMQUNcbiAgICAgIEZMQUM6IDAuOSxcbiAgICAgIC8vIHNvbWUgbWFuaWZlc3RzIG1heSBsaXN0IFwiRkxBQ1wiIHdpdGggQXBwbGUncyB0b29sc1xuICAgICAgZzcxOTogMSxcbiAgICAgIGc3MjY6IDEsXG4gICAgICBtNGFlOiAxLFxuICAgICAgbWhhMTogMSxcbiAgICAgIG1oYTI6IDEsXG4gICAgICBtaG0xOiAxLFxuICAgICAgbWhtMjogMSxcbiAgICAgIG1scGE6IDEsXG4gICAgICBtcDRhOiAxLFxuICAgICAgJ3JhdyAnOiAxLFxuICAgICAgT3B1czogMSxcbiAgICAgIG9wdXM6IDEsXG4gICAgICAvLyBicm93c2VycyBleHBlY3QgdGhpcyB0byBiZSBsb3dlcmNhc2UgZGVzcGl0ZSBNUDRSQSBzYXlzICdPcHVzJ1xuICAgICAgc2FtcjogMSxcbiAgICAgIHNhd2I6IDEsXG4gICAgICBzYXdwOiAxLFxuICAgICAgc2V2YzogMSxcbiAgICAgIHNxY3A6IDEsXG4gICAgICBzc212OiAxLFxuICAgICAgdHdvczogMSxcbiAgICAgIHVsYXc6IDFcbiAgICB9LFxuICAgIHZpZGVvOiB7XG4gICAgICBhdmMxOiAxLFxuICAgICAgYXZjMjogMSxcbiAgICAgIGF2YzM6IDEsXG4gICAgICBhdmM0OiAxLFxuICAgICAgYXZjcDogMSxcbiAgICAgIGF2MDE6IDAuOCxcbiAgICAgIGRhdjE6IDAuOCxcbiAgICAgIGRyYWM6IDEsXG4gICAgICBkdmExOiAxLFxuICAgICAgZHZhdjogMSxcbiAgICAgIGR2aDE6IDAuNyxcbiAgICAgIGR2aGU6IDAuNyxcbiAgICAgIGVuY3Y6IDEsXG4gICAgICBoZXYxOiAwLjc1LFxuICAgICAgaHZjMTogMC43NSxcbiAgICAgIG1qcDI6IDEsXG4gICAgICBtcDR2OiAxLFxuICAgICAgbXZjMTogMSxcbiAgICAgIG12YzI6IDEsXG4gICAgICBtdmMzOiAxLFxuICAgICAgbXZjNDogMSxcbiAgICAgIHJlc3Y6IDEsXG4gICAgICBydjYwOiAxLFxuICAgICAgczI2MzogMSxcbiAgICAgIHN2YzE6IDEsXG4gICAgICBzdmMyOiAxLFxuICAgICAgJ3ZjLTEnOiAxLFxuICAgICAgdnAwODogMSxcbiAgICAgIHZwMDk6IDAuOVxuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgc3RwcDogMSxcbiAgICAgIHd2dHQ6IDFcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGlzQ29kZWNUeXBlKGNvZGVjLCB0eXBlKSB7XG4gICAgdmFyIHR5cGVDb2RlcyA9IHNhbXBsZUVudHJ5Q29kZXNJU09bdHlwZV07XG4gICAgcmV0dXJuICEhdHlwZUNvZGVzICYmICEhdHlwZUNvZGVzW2NvZGVjLnNsaWNlKDAsIDQpXTtcbiAgfVxuICBmdW5jdGlvbiBhcmVDb2RlY3NNZWRpYVNvdXJjZVN1cHBvcnRlZChjb2RlY3MsIHR5cGUsIHByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSkge1xuICAgIGlmIChwcmVmZXJNYW5hZ2VkTWVkaWFTb3VyY2UgPT09IHZvaWQgMCkge1xuICAgICAgcHJlZmVyTWFuYWdlZE1lZGlhU291cmNlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICFjb2RlY3Muc3BsaXQoJywnKS5zb21lKGZ1bmN0aW9uIChjb2RlYykge1xuICAgICAgcmV0dXJuICFpc0NvZGVjTWVkaWFTb3VyY2VTdXBwb3J0ZWQoY29kZWMsIHR5cGUsIHByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gaXNDb2RlY01lZGlhU291cmNlU3VwcG9ydGVkKGNvZGVjLCB0eXBlLCBwcmVmZXJNYW5hZ2VkTWVkaWFTb3VyY2UpIHtcbiAgICB2YXIgX01lZGlhU291cmNlJGlzVHlwZVN1O1xuICAgIGlmIChwcmVmZXJNYW5hZ2VkTWVkaWFTb3VyY2UgPT09IHZvaWQgMCkge1xuICAgICAgcHJlZmVyTWFuYWdlZE1lZGlhU291cmNlID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIE1lZGlhU291cmNlID0gZ2V0TWVkaWFTb3VyY2UocHJlZmVyTWFuYWdlZE1lZGlhU291cmNlKTtcbiAgICByZXR1cm4gKF9NZWRpYVNvdXJjZSRpc1R5cGVTdSA9IE1lZGlhU291cmNlID09IG51bGwgPyB2b2lkIDAgOiBNZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQobWltZVR5cGVGb3JDb2RlYyhjb2RlYywgdHlwZSkpKSAhPSBudWxsID8gX01lZGlhU291cmNlJGlzVHlwZVN1IDogZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gbWltZVR5cGVGb3JDb2RlYyhjb2RlYywgdHlwZSkge1xuICAgIHJldHVybiB0eXBlICsgXCIvbXA0O2NvZGVjcz1cIiArIGNvZGVjO1xuICB9XG4gIGZ1bmN0aW9uIHZpZGVvQ29kZWNQcmVmZXJlbmNlVmFsdWUodmlkZW9Db2RlYykge1xuICAgIGlmICh2aWRlb0NvZGVjKSB7XG4gICAgICB2YXIgZm91ckNDID0gdmlkZW9Db2RlYy5zdWJzdHJpbmcoMCwgNCk7XG4gICAgICByZXR1cm4gc2FtcGxlRW50cnlDb2Rlc0lTTy52aWRlb1tmb3VyQ0NdO1xuICAgIH1cbiAgICByZXR1cm4gMjtcbiAgfVxuICBmdW5jdGlvbiBjb2RlY3NTZXRTZWxlY3Rpb25QcmVmZXJlbmNlVmFsdWUoY29kZWNTZXQpIHtcbiAgICB2YXIgbGltaXRlZEhldmNTdXBwb3J0ID0gdXNlckFnZW50SGV2Y1N1cHBvcnRJc0luYWNjdXJhdGUoKTtcbiAgICByZXR1cm4gY29kZWNTZXQuc3BsaXQoJywnKS5yZWR1Y2UoZnVuY3Rpb24gKG51bSwgZm91ckNDKSB7XG4gICAgICB2YXIgbG93ZXJQcmlvcml0eSA9IGxpbWl0ZWRIZXZjU3VwcG9ydCAmJiBpc0hFVkMoZm91ckNDKTtcbiAgICAgIHZhciBwcmVmZXJlbmNlVmFsdWUgPSBsb3dlclByaW9yaXR5ID8gOSA6IHNhbXBsZUVudHJ5Q29kZXNJU08udmlkZW9bZm91ckNDXTtcbiAgICAgIGlmIChwcmVmZXJlbmNlVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChwcmVmZXJlbmNlVmFsdWUgKiAyICsgbnVtKSAvIChudW0gPyAzIDogMik7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHNhbXBsZUVudHJ5Q29kZXNJU08uYXVkaW9bZm91ckNDXSArIG51bSkgLyAobnVtID8gMiA6IDEpO1xuICAgIH0sIDApO1xuICB9XG4gIHZhciBDT0RFQ19DT01QQVRJQkxFX05BTUVTID0ge307XG4gIGZ1bmN0aW9uIGdldENvZGVjQ29tcGF0aWJsZU5hbWVMb3dlcihsb3dlckNhc2VDb2RlYywgcHJlZmVyTWFuYWdlZE1lZGlhU291cmNlKSB7XG4gICAgaWYgKHByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSA9PT0gdm9pZCAwKSB7XG4gICAgICBwcmVmZXJNYW5hZ2VkTWVkaWFTb3VyY2UgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoQ09ERUNfQ09NUEFUSUJMRV9OQU1FU1tsb3dlckNhc2VDb2RlY10pIHtcbiAgICAgIHJldHVybiBDT0RFQ19DT01QQVRJQkxFX05BTUVTW2xvd2VyQ2FzZUNvZGVjXTtcbiAgICB9XG4gICAgdmFyIGNvZGVjc1RvQ2hlY2sgPSB7XG4gICAgICAvLyBJZGVhbHkgZkxhQyBhbmQgT3B1cyB3b3VsZCBiZSBmaXJzdCAoc3BlYy1jb21wbGlhbnQpIGJ1dFxuICAgICAgLy8gc29tZSBicm93c2VycyB3aWxsIHJlcG9ydCB0aGF0IGZMYUMgaXMgc3VwcG9ydGVkIHRoZW4gZmFpbC5cbiAgICAgIC8vIHNlZTogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTQyMjcyOFxuICAgICAgZmxhYzogWydmbGFjJywgJ2ZMYUMnLCAnRkxBQyddLFxuICAgICAgb3B1czogWydvcHVzJywgJ09wdXMnXSxcbiAgICAgIC8vIFJlcGxhY2UgYXVkaW8gY29kZWMgaW5mbyBpZiBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgbXA0YS40MC4zNCxcbiAgICAgIC8vIGFuZCBkZW11eGVyIGNhbiBmYWxsYmFjayB0byAnYXVkaW8vbXBlZycgb3IgJ2F1ZGlvL21wNDtjb2RlY3M9XCJtcDNcIidcbiAgICAgICdtcDRhLjQwLjM0JzogWydtcDMnXVxuICAgIH1bbG93ZXJDYXNlQ29kZWNdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZWNzVG9DaGVjay5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIF9nZXRNZWRpYVNvdXJjZTtcbiAgICAgIGlmIChpc0NvZGVjTWVkaWFTb3VyY2VTdXBwb3J0ZWQoY29kZWNzVG9DaGVja1tpXSwgJ2F1ZGlvJywgcHJlZmVyTWFuYWdlZE1lZGlhU291cmNlKSkge1xuICAgICAgICBDT0RFQ19DT01QQVRJQkxFX05BTUVTW2xvd2VyQ2FzZUNvZGVjXSA9IGNvZGVjc1RvQ2hlY2tbaV07XG4gICAgICAgIHJldHVybiBjb2RlY3NUb0NoZWNrW2ldO1xuICAgICAgfSBlbHNlIGlmIChjb2RlY3NUb0NoZWNrW2ldID09PSAnbXAzJyAmJiAoX2dldE1lZGlhU291cmNlID0gZ2V0TWVkaWFTb3VyY2UocHJlZmVyTWFuYWdlZE1lZGlhU291cmNlKSkgIT0gbnVsbCAmJiBfZ2V0TWVkaWFTb3VyY2UuaXNUeXBlU3VwcG9ydGVkKCdhdWRpby9tcGVnJykpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG93ZXJDYXNlQ29kZWM7XG4gIH1cbiAgdmFyIEFVRElPX0NPREVDX1JFR0VYUCA9IC9mbGFjfG9wdXN8bXA0YVxcLjQwXFwuMzQvaTtcbiAgZnVuY3Rpb24gZ2V0Q29kZWNDb21wYXRpYmxlTmFtZShjb2RlYywgcHJlZmVyTWFuYWdlZE1lZGlhU291cmNlKSB7XG4gICAgaWYgKHByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSA9PT0gdm9pZCAwKSB7XG4gICAgICBwcmVmZXJNYW5hZ2VkTWVkaWFTb3VyY2UgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gY29kZWMucmVwbGFjZShBVURJT19DT0RFQ19SRUdFWFAsIGZ1bmN0aW9uIChtKSB7XG4gICAgICByZXR1cm4gZ2V0Q29kZWNDb21wYXRpYmxlTmFtZUxvd2VyKG0udG9Mb3dlckNhc2UoKSwgcHJlZmVyTWFuYWdlZE1lZGlhU291cmNlKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZXBsYWNlVmlkZW9Db2RlYyhvcmlnaW5hbENvZGVjcywgbmV3VmlkZW9Db2RlYykge1xuICAgIHZhciBjb2RlY3MgPSBbXTtcbiAgICBpZiAob3JpZ2luYWxDb2RlY3MpIHtcbiAgICAgIHZhciBhbGxDb2RlY3MgPSBvcmlnaW5hbENvZGVjcy5zcGxpdCgnLCcpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxDb2RlY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFpc0NvZGVjVHlwZShhbGxDb2RlY3NbaV0sICd2aWRlbycpKSB7XG4gICAgICAgICAgY29kZWNzLnB1c2goYWxsQ29kZWNzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmV3VmlkZW9Db2RlYykge1xuICAgICAgY29kZWNzLnB1c2gobmV3VmlkZW9Db2RlYyk7XG4gICAgfVxuICAgIHJldHVybiBjb2RlY3Muam9pbignLCcpO1xuICB9XG4gIGZ1bmN0aW9uIHBpY2tNb3N0Q29tcGxldGVDb2RlY05hbWUocGFyc2VkQ29kZWMsIGxldmVsQ29kZWMpIHtcbiAgICAvLyBQYXJzaW5nIG9mIG1wNGEgY29kZWNzIHN0cmluZ3MgaW4gbXA0LXRvb2xzIGZyb20gbWVkaWEgaXMgaW5jb21wbGV0ZSBhcyBvZiBkOGM2YzdhXG4gICAgLy8gc28gdXNlIGxldmVsIGNvZGVjIGlzIHBhcnNlZCBjb2RlYyBpcyB1bmF2YWlsYWJsZSBvciBpbmNvbXBsZXRlXG4gICAgaWYgKHBhcnNlZENvZGVjICYmIChwYXJzZWRDb2RlYy5sZW5ndGggPiA0IHx8IFsnYWMtMycsICdlYy0zJywgJ2FsYWMnLCAnZkxhQycsICdPcHVzJ10uaW5kZXhPZihwYXJzZWRDb2RlYykgIT09IC0xKSkge1xuICAgICAgcmV0dXJuIHBhcnNlZENvZGVjO1xuICAgIH1cbiAgICBpZiAobGV2ZWxDb2RlYykge1xuICAgICAgdmFyIGxldmVsQ29kZWNzID0gbGV2ZWxDb2RlYy5zcGxpdCgnLCcpO1xuICAgICAgaWYgKGxldmVsQ29kZWNzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgaWYgKHBhcnNlZENvZGVjKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IGxldmVsQ29kZWNzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgaWYgKGxldmVsQ29kZWNzW2ldLnN1YnN0cmluZygwLCA0KSA9PT0gcGFyc2VkQ29kZWMuc3Vic3RyaW5nKDAsIDQpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsZXZlbENvZGVjc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxldmVsQ29kZWNzWzBdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGV2ZWxDb2RlYyB8fCBwYXJzZWRDb2RlYztcbiAgfVxuICBmdW5jdGlvbiBjb252ZXJ0QVZDMVRvQVZDT1RJKHZpZGVvQ29kZWNzKSB7XG4gICAgLy8gQ29udmVydCBhdmMxIGNvZGVjIHN0cmluZyBmcm9tIFJGQy00MjgxIHRvIFJGQy02MzgxIGZvciBNZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWRcbiAgICAvLyBFeGFtcGxlczogYXZjMS42Ni4zMCB0byBhdmMxLjQyMDAxZSBhbmQgYXZjMS43Ny4zMCxhdmMxLjY2LjMwIHRvIGF2YzEuNGQwMDFlLGF2YzEuNDIwMDFlLlxuICAgIHZhciBjb2RlY3MgPSB2aWRlb0NvZGVjcy5zcGxpdCgnLCcpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYXZjZGF0YSA9IGNvZGVjc1tpXS5zcGxpdCgnLicpO1xuICAgICAgLy8gb25seSBjb252ZXJ0IGNvZGVjIHN0cmluZ3Mgc3RhcnRpbmcgd2l0aCBhdmMxIChFeGFtcGxlczogYXZjMS42NDAwMWYsZHZoMS4wNS4wNylcbiAgICAgIGlmIChhdmNkYXRhLmxlbmd0aCA+IDIgJiYgYXZjZGF0YVswXSA9PT0gJ2F2YzEnKSB7XG4gICAgICAgIGNvZGVjc1tpXSA9IFwiYXZjMS5cIiArIHBhcnNlSW50KGF2Y2RhdGFbMV0pLnRvU3RyaW5nKDE2KSArICgnMDAwJyArIHBhcnNlSW50KGF2Y2RhdGFbMl0pLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29kZWNzLmpvaW4oJywnKTtcbiAgfVxuICBmdW5jdGlvbiBmaWxsSW5NaXNzaW5nQVYwMVBhcmFtcyh2aWRlb0NvZGVjKSB7XG4gICAgLy8gVXNlZCB0byBmaWxsIGluIGluY29tcGxldGUgQVYxIHBsYXlsaXN0IENPREVDUyBzdHJpbmdzIGZvciBtZWRpYUNhcGFiaWxpdGllcy5kZWNvZGluZ0luZm8gcXVlcmllc1xuICAgIGlmICh2aWRlb0NvZGVjLnN0YXJ0c1dpdGgoJ2F2MDEuJykpIHtcbiAgICAgIHZhciBhdjFwYXJhbXMgPSB2aWRlb0NvZGVjLnNwbGl0KCcuJyk7XG4gICAgICB2YXIgcGxhY2Vob2xkZXJzID0gWycwJywgJzExMScsICcwMScsICcwMScsICcwMScsICcwJ107XG4gICAgICBmb3IgKHZhciBpID0gYXYxcGFyYW1zLmxlbmd0aDsgaSA+IDQgJiYgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgYXYxcGFyYW1zW2ldID0gcGxhY2Vob2xkZXJzW2kgLSA0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhdjFwYXJhbXMuam9pbignLicpO1xuICAgIH1cbiAgICByZXR1cm4gdmlkZW9Db2RlYztcbiAgfVxuICBmdW5jdGlvbiBnZXRNMlRTU3VwcG9ydGVkQXVkaW9UeXBlcyhwcmVmZXJNYW5hZ2VkTWVkaWFTb3VyY2UpIHtcbiAgICB2YXIgTWVkaWFTb3VyY2UgPSBnZXRNZWRpYVNvdXJjZShwcmVmZXJNYW5hZ2VkTWVkaWFTb3VyY2UpIHx8IHtcbiAgICAgIGlzVHlwZVN1cHBvcnRlZDogZnVuY3Rpb24gaXNUeXBlU3VwcG9ydGVkKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgbXBlZzogTWVkaWFTb3VyY2UuaXNUeXBlU3VwcG9ydGVkKCdhdWRpby9tcGVnJyksXG4gICAgICBtcDM6IE1lZGlhU291cmNlLmlzVHlwZVN1cHBvcnRlZCgnYXVkaW8vbXA0OyBjb2RlY3M9XCJtcDNcIicpLFxuICAgICAgYWMzOiBNZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQoJ2F1ZGlvL21wNDsgY29kZWNzPVwiYWMtM1wiJykgXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDb2RlY3NGb3JNaW1lVHlwZShtaW1lVHlwZSkge1xuICAgIHJldHVybiBtaW1lVHlwZS5yZXBsYWNlKC9eLitjb2RlY3M9W1wiJ10/KFteXCInXSspLiokLywgJyQxJyk7XG4gIH1cblxuICB2YXIgU1VQUE9SVEVEX0lORk9fREVGQVVMVCA9IHtcbiAgICBzdXBwb3J0ZWQ6IHRydWUsXG4gICAgY29uZmlndXJhdGlvbnM6IFtdLFxuICAgIGRlY29kaW5nSW5mb1Jlc3VsdHM6IFt7XG4gICAgICBzdXBwb3J0ZWQ6IHRydWUsXG4gICAgICBwb3dlckVmZmljaWVudDogdHJ1ZSxcbiAgICAgIHNtb290aDogdHJ1ZVxuICAgIH1dXG4gIH07XG4gIGZ1bmN0aW9uIGdldFVuc3VwcG9ydGVkUmVzdWx0KGVycm9yLCBjb25maWd1cmF0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICBzdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgY29uZmlndXJhdGlvbnM6IGNvbmZpZ3VyYXRpb25zLFxuICAgICAgZGVjb2RpbmdJbmZvUmVzdWx0czogW3tcbiAgICAgICAgc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgc21vb3RoOiBmYWxzZSxcbiAgICAgICAgcG93ZXJFZmZpY2llbnQ6IGZhbHNlXG4gICAgICB9XSxcbiAgICAgIGVycm9yOiBlcnJvclxuICAgIH07XG4gIH1cbiAgdmFyIFNVUFBPUlRFRF9JTkZPX0NBQ0hFID0ge307XG4gIGZ1bmN0aW9uIHJlcXVpcmVzTWVkaWFDYXBhYmlsaXRpZXNEZWNvZGluZ0luZm8obGV2ZWwsIGF1ZGlvVHJhY2tzQnlHcm91cCwgY3VycmVudFZpZGVvUmFuZ2UsIGN1cnJlbnRGcmFtZVJhdGUsIGN1cnJlbnRCdywgYXVkaW9QcmVmZXJlbmNlKSB7XG4gICAgLy8gT25seSB0ZXN0IHN1cHBvcnQgd2hlbiBjb25maWd1cmF0aW9uIGlzIGV4Y2VlZHMgbWluaW11bSBvcHRpb25zXG4gICAgdmFyIGF1ZGlvR3JvdXBzID0gbGV2ZWwuYXVkaW9Db2RlYyA/IGxldmVsLmF1ZGlvR3JvdXBzIDogbnVsbDtcbiAgICB2YXIgYXVkaW9Db2RlY1ByZWZlcmVuY2UgPSBhdWRpb1ByZWZlcmVuY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGF1ZGlvUHJlZmVyZW5jZS5hdWRpb0NvZGVjO1xuICAgIHZhciBjaGFubmVsc1ByZWZlcmVuY2UgPSBhdWRpb1ByZWZlcmVuY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGF1ZGlvUHJlZmVyZW5jZS5jaGFubmVscztcbiAgICB2YXIgbWF4Q2hhbm5lbHMgPSBjaGFubmVsc1ByZWZlcmVuY2UgPyBwYXJzZUludChjaGFubmVsc1ByZWZlcmVuY2UpIDogYXVkaW9Db2RlY1ByZWZlcmVuY2UgPyBJbmZpbml0eSA6IDI7XG4gICAgdmFyIGF1ZGlvQ2hhbm5lbHMgPSBudWxsO1xuICAgIGlmIChhdWRpb0dyb3VwcyAhPSBudWxsICYmIGF1ZGlvR3JvdXBzLmxlbmd0aCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGF1ZGlvR3JvdXBzLmxlbmd0aCA9PT0gMSAmJiBhdWRpb0dyb3Vwc1swXSkge1xuICAgICAgICAgIGF1ZGlvQ2hhbm5lbHMgPSBhdWRpb1RyYWNrc0J5R3JvdXAuZ3JvdXBzW2F1ZGlvR3JvdXBzWzBdXS5jaGFubmVscztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdWRpb0NoYW5uZWxzID0gYXVkaW9Hcm91cHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGdyb3VwSWQpIHtcbiAgICAgICAgICAgIGlmIChncm91cElkKSB7XG4gICAgICAgICAgICAgIHZhciBhdWRpb1RyYWNrR3JvdXAgPSBhdWRpb1RyYWNrc0J5R3JvdXAuZ3JvdXBzW2dyb3VwSWRdO1xuICAgICAgICAgICAgICBpZiAoIWF1ZGlvVHJhY2tHcm91cCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF1ZGlvIHRyYWNrIGdyb3VwIFwiICsgZ3JvdXBJZCArIFwiIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBTdW0gYWxsIGNoYW5uZWwga2V5IHZhbHVlc1xuICAgICAgICAgICAgICBPYmplY3Qua2V5cyhhdWRpb1RyYWNrR3JvdXAuY2hhbm5lbHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIGFjY1trZXldID0gKGFjY1trZXldIHx8IDApICsgYXVkaW9UcmFja0dyb3VwLmNoYW5uZWxzW2tleV07XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAyOiAwXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGV2ZWwudmlkZW9Db2RlYyAhPT0gdW5kZWZpbmVkICYmIChsZXZlbC53aWR0aCA+IDE5MjAgJiYgbGV2ZWwuaGVpZ2h0ID4gMTA4OCB8fCBsZXZlbC5oZWlnaHQgPiAxOTIwICYmIGxldmVsLndpZHRoID4gMTA4OCB8fCBsZXZlbC5mcmFtZVJhdGUgPiBNYXRoLm1heChjdXJyZW50RnJhbWVSYXRlLCAzMCkgfHwgbGV2ZWwudmlkZW9SYW5nZSAhPT0gJ1NEUicgJiYgbGV2ZWwudmlkZW9SYW5nZSAhPT0gY3VycmVudFZpZGVvUmFuZ2UgfHwgbGV2ZWwuYml0cmF0ZSA+IE1hdGgubWF4KGN1cnJlbnRCdywgOGU2KSkgfHwgISFhdWRpb0NoYW5uZWxzICYmIGlzRmluaXRlTnVtYmVyKG1heENoYW5uZWxzKSAmJiBPYmplY3Qua2V5cyhhdWRpb0NoYW5uZWxzKS5zb21lKGZ1bmN0aW9uIChjaGFubmVscykge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGNoYW5uZWxzKSA+IG1heENoYW5uZWxzO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGdldE1lZGlhRGVjb2RpbmdJbmZvUHJvbWlzZShsZXZlbCwgYXVkaW9UcmFja3NCeUdyb3VwLCBtZWRpYUNhcGFiaWxpdGllcykge1xuICAgIHZhciB2aWRlb0NvZGVjcyA9IGxldmVsLnZpZGVvQ29kZWM7XG4gICAgdmFyIGF1ZGlvQ29kZWNzID0gbGV2ZWwuYXVkaW9Db2RlYztcbiAgICBpZiAoIXZpZGVvQ29kZWNzICYmICFhdWRpb0NvZGVjcyB8fCAhbWVkaWFDYXBhYmlsaXRpZXMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoU1VQUE9SVEVEX0lORk9fREVGQVVMVCk7XG4gICAgfVxuICAgIHZhciBjb25maWd1cmF0aW9ucyA9IFtdO1xuICAgIGlmICh2aWRlb0NvZGVjcykge1xuICAgICAgdmFyIGJhc2VWaWRlb0NvbmZpZ3VyYXRpb24gPSB7XG4gICAgICAgIHdpZHRoOiBsZXZlbC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBsZXZlbC5oZWlnaHQsXG4gICAgICAgIGJpdHJhdGU6IE1hdGguY2VpbChNYXRoLm1heChsZXZlbC5iaXRyYXRlICogMC45LCBsZXZlbC5hdmVyYWdlQml0cmF0ZSkpLFxuICAgICAgICAvLyBBc3N1bWUgYSBmcmFtZXJhdGUgb2YgMzBmcHMgc2luY2UgTWVkaWFDYXBhYmlsaXRpZXMgd2lsbCBub3QgYWNjZXB0IExldmVsIGRlZmF1bHQgb2YgMC5cbiAgICAgICAgZnJhbWVyYXRlOiBsZXZlbC5mcmFtZVJhdGUgfHwgMzBcbiAgICAgIH07XG4gICAgICB2YXIgdmlkZW9SYW5nZSA9IGxldmVsLnZpZGVvUmFuZ2U7XG4gICAgICBpZiAodmlkZW9SYW5nZSAhPT0gJ1NEUicpIHtcbiAgICAgICAgYmFzZVZpZGVvQ29uZmlndXJhdGlvbi50cmFuc2ZlckZ1bmN0aW9uID0gdmlkZW9SYW5nZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHZpZGVvQ29kZWNzQXJyYXkgPSB2aWRlb0NvZGVjcy5zcGxpdCgnLCcpO1xuICAgICAgLy8gT3ZlcnJpZGUgV2luZG93cyBGaXJlZm94IEhFVkMgTWVkaWFDYXBhYmlsaXRpZXMgcmVzdWx0IChodHRwczovL2dpdGh1Yi5jb20vdmlkZW8tZGV2L2hscy5qcy9pc3N1ZXMvNzA0NilcbiAgICAgIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICBpZiAodmlkZW9Db2RlY3NBcnJheS5zb21lKGZ1bmN0aW9uICh2aWRlb0NvZGVjKSB7XG4gICAgICAgIHJldHVybiBpc0hFVkModmlkZW9Db2RlYyk7XG4gICAgICB9KSAmJiB1c2VyQWdlbnRIZXZjU3VwcG9ydElzSW5hY2N1cmF0ZSgpKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZ2V0VW5zdXBwb3J0ZWRSZXN1bHQobmV3IEVycm9yKFwiT3ZlcnJpZGluZyBXaW5kb3dzIEZpcmVmb3ggSEVWQyBNZWRpYUNhcGFiaWxpdGllcyByZXN1bHQgYmFzZWQgb24gdXNlci1hZ2VudCBzdGluZzogKFwiICsgdWEgKyBcIilcIiksIGNvbmZpZ3VyYXRpb25zKSk7XG4gICAgICB9XG4gICAgICBjb25maWd1cmF0aW9ucy5wdXNoLmFwcGx5KGNvbmZpZ3VyYXRpb25zLCB2aWRlb0NvZGVjc0FycmF5Lm1hcChmdW5jdGlvbiAodmlkZW9Db2RlYykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdtZWRpYS1zb3VyY2UnLFxuICAgICAgICAgIHZpZGVvOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgYmFzZVZpZGVvQ29uZmlndXJhdGlvbiksIHt9LCB7XG4gICAgICAgICAgICBjb250ZW50VHlwZTogbWltZVR5cGVGb3JDb2RlYyhmaWxsSW5NaXNzaW5nQVYwMVBhcmFtcyh2aWRlb0NvZGVjKSwgJ3ZpZGVvJylcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgfSkpO1xuICAgIH1cbiAgICBpZiAoYXVkaW9Db2RlY3MgJiYgbGV2ZWwuYXVkaW9Hcm91cHMpIHtcbiAgICAgIGxldmVsLmF1ZGlvR3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGF1ZGlvR3JvdXBJZCkge1xuICAgICAgICB2YXIgX2F1ZGlvVHJhY2tzQnlHcm91cCRnO1xuICAgICAgICBpZiAoIWF1ZGlvR3JvdXBJZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAoX2F1ZGlvVHJhY2tzQnlHcm91cCRnID0gYXVkaW9UcmFja3NCeUdyb3VwLmdyb3Vwc1thdWRpb0dyb3VwSWRdKSA9PSBudWxsID8gdm9pZCAwIDogX2F1ZGlvVHJhY2tzQnlHcm91cCRnLnRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChhdWRpb1RyYWNrKSB7XG4gICAgICAgICAgaWYgKGF1ZGlvVHJhY2suZ3JvdXBJZCA9PT0gYXVkaW9Hcm91cElkKSB7XG4gICAgICAgICAgICB2YXIgY2hhbm5lbHMgPSBhdWRpb1RyYWNrLmNoYW5uZWxzIHx8ICcnO1xuICAgICAgICAgICAgdmFyIGNoYW5uZWxzTnVtYmVyID0gcGFyc2VGbG9hdChjaGFubmVscyk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGVOdW1iZXIoY2hhbm5lbHNOdW1iZXIpICYmIGNoYW5uZWxzTnVtYmVyID4gMikge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9ucy5wdXNoLmFwcGx5KGNvbmZpZ3VyYXRpb25zLCBhdWRpb0NvZGVjcy5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoYXVkaW9Db2RlYykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiAnbWVkaWEtc291cmNlJyxcbiAgICAgICAgICAgICAgICAgIGF1ZGlvOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBtaW1lVHlwZUZvckNvZGVjKGF1ZGlvQ29kZWMsICdhdWRpbycpLFxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsczogJycgKyBjaGFubmVsc051bWJlclxuICAgICAgICAgICAgICAgICAgICAvLyBzcGF0aWFsUmVuZGVyaW5nOlxuICAgICAgICAgICAgICAgICAgICAvLyAgIGF1ZGlvQ29kZWMgPT09ICdlYy0zJyAmJiBjaGFubmVscy5pbmRleE9mKCdKT0MnKSxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoY29uZmlndXJhdGlvbnMubWFwKGZ1bmN0aW9uIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAvLyBDYWNoZSBNZWRpYUNhcGFiaWxpdGllcyBwcm9taXNlc1xuICAgICAgdmFyIGRlY29kaW5nSW5mb0tleSA9IGdldE1lZGlhRGVjb2RpbmdJbmZvS2V5KGNvbmZpZ3VyYXRpb24pO1xuICAgICAgcmV0dXJuIFNVUFBPUlRFRF9JTkZPX0NBQ0hFW2RlY29kaW5nSW5mb0tleV0gfHwgKFNVUFBPUlRFRF9JTkZPX0NBQ0hFW2RlY29kaW5nSW5mb0tleV0gPSBtZWRpYUNhcGFiaWxpdGllcy5kZWNvZGluZ0luZm8oY29uZmlndXJhdGlvbikpO1xuICAgIH0pKS50aGVuKGZ1bmN0aW9uIChkZWNvZGluZ0luZm9SZXN1bHRzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdXBwb3J0ZWQ6ICFkZWNvZGluZ0luZm9SZXN1bHRzLnNvbWUoZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgICByZXR1cm4gIWluZm8uc3VwcG9ydGVkO1xuICAgICAgICB9KSxcbiAgICAgICAgY29uZmlndXJhdGlvbnM6IGNvbmZpZ3VyYXRpb25zLFxuICAgICAgICBkZWNvZGluZ0luZm9SZXN1bHRzOiBkZWNvZGluZ0luZm9SZXN1bHRzXG4gICAgICB9O1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VwcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhdGlvbnM6IGNvbmZpZ3VyYXRpb25zLFxuICAgICAgICBkZWNvZGluZ0luZm9SZXN1bHRzOiBbXSxcbiAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGdldE1lZGlhRGVjb2RpbmdJbmZvS2V5KGNvbmZpZykge1xuICAgIHZhciBhdWRpbyA9IGNvbmZpZy5hdWRpbyxcbiAgICAgIHZpZGVvID0gY29uZmlnLnZpZGVvO1xuICAgIHZhciBtZWRpYUNvbmZpZyA9IHZpZGVvIHx8IGF1ZGlvO1xuICAgIGlmIChtZWRpYUNvbmZpZykge1xuICAgICAgdmFyIGNvZGVjID0gZ2V0Q29kZWNzRm9yTWltZVR5cGUobWVkaWFDb25maWcuY29udGVudFR5cGUpO1xuICAgICAgaWYgKHZpZGVvKSB7XG4gICAgICAgIHJldHVybiBcInJcIiArIHZpZGVvLmhlaWdodCArIFwieFwiICsgdmlkZW8ud2lkdGggKyBcImZcIiArIE1hdGguY2VpbCh2aWRlby5mcmFtZXJhdGUpICsgKHZpZGVvLnRyYW5zZmVyRnVuY3Rpb24gfHwgJ3NkJykgKyBcIl9cIiArIGNvZGVjICsgXCJfXCIgKyBNYXRoLmNlaWwodmlkZW8uYml0cmF0ZSAvIDFlNSk7XG4gICAgICB9XG4gICAgICBpZiAoYXVkaW8pIHtcbiAgICAgICAgcmV0dXJuIFwiY1wiICsgYXVkaW8uY2hhbm5lbHMgKyAoYXVkaW8uc3BhdGlhbFJlbmRlcmluZyA/ICdzJyA6ICduJykgKyBcIl9cIiArIGNvZGVjO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgSGRjcExldmVscyA9IFsnTk9ORScsICdUWVBFLTAnLCAnVFlQRS0xJywgbnVsbF07XG4gIGZ1bmN0aW9uIGlzSGRjcExldmVsKHZhbHVlKSB7XG4gICAgcmV0dXJuIEhkY3BMZXZlbHMuaW5kZXhPZih2YWx1ZSkgPiAtMTtcbiAgfVxuICB2YXIgVmlkZW9SYW5nZVZhbHVlcyA9IFsnU0RSJywgJ1BRJywgJ0hMRyddO1xuICBmdW5jdGlvbiBpc1ZpZGVvUmFuZ2UodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZSAmJiBWaWRlb1JhbmdlVmFsdWVzLmluZGV4T2YodmFsdWUpID4gLTE7XG4gIH1cbiAgdmFyIEhsc1NraXAgPSB7XG4gICAgTm86IFwiXCIsXG4gICAgWWVzOiBcIllFU1wiLFxuICAgIHYyOiBcInYyXCJcbiAgfTtcbiAgZnVuY3Rpb24gZ2V0U2tpcFZhbHVlKGRldGFpbHMpIHtcbiAgICB2YXIgY2FuU2tpcFVudGlsID0gZGV0YWlscy5jYW5Ta2lwVW50aWwsXG4gICAgICBjYW5Ta2lwRGF0ZVJhbmdlcyA9IGRldGFpbHMuY2FuU2tpcERhdGVSYW5nZXMsXG4gICAgICBhZ2UgPSBkZXRhaWxzLmFnZTtcbiAgICAvLyBBIENsaWVudCBTSE9VTEQgTk9UIHJlcXVlc3QgYSBQbGF5bGlzdCBEZWx0YSBVcGRhdGUgdW5sZXNzIGl0IGFscmVhZHlcbiAgICAvLyBoYXMgYSB2ZXJzaW9uIG9mIHRoZSBQbGF5bGlzdCB0aGF0IGlzIG5vIG9sZGVyIHRoYW4gb25lLWhhbGYgb2YgdGhlIFNraXAgQm91bmRhcnkuXG4gICAgLy8gQHNlZTogaHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9kcmFmdC1wYW50b3MtaGxzLXJmYzgyMTZiaXMjc2VjdGlvbi02LjMuN1xuICAgIHZhciBwbGF5bGlzdFJlY2VudEVub3VnaCA9IGFnZSA8IGNhblNraXBVbnRpbCAvIDI7XG4gICAgaWYgKGNhblNraXBVbnRpbCAmJiBwbGF5bGlzdFJlY2VudEVub3VnaCkge1xuICAgICAgaWYgKGNhblNraXBEYXRlUmFuZ2VzKSB7XG4gICAgICAgIHJldHVybiBIbHNTa2lwLnYyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEhsc1NraXAuWWVzO1xuICAgIH1cbiAgICByZXR1cm4gSGxzU2tpcC5ObztcbiAgfVxuICB2YXIgSGxzVXJsUGFyYW1ldGVycyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSGxzVXJsUGFyYW1ldGVycyhtc24sIHBhcnQsIHNraXApIHtcbiAgICAgIHRoaXMubXNuID0gdm9pZCAwO1xuICAgICAgdGhpcy5wYXJ0ID0gdm9pZCAwO1xuICAgICAgdGhpcy5za2lwID0gdm9pZCAwO1xuICAgICAgdGhpcy5tc24gPSBtc247XG4gICAgICB0aGlzLnBhcnQgPSBwYXJ0O1xuICAgICAgdGhpcy5za2lwID0gc2tpcDtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IEhsc1VybFBhcmFtZXRlcnMucHJvdG90eXBlO1xuICAgIF9wcm90by5hZGREaXJlY3RpdmVzID0gZnVuY3Rpb24gYWRkRGlyZWN0aXZlcyh1cmkpIHtcbiAgICAgIHZhciB1cmwgPSBuZXcgc2VsZi5VUkwodXJpKTtcbiAgICAgIGlmICh0aGlzLm1zbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdfSExTX21zbicsIHRoaXMubXNuLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdfSExTX3BhcnQnLCB0aGlzLnBhcnQudG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5za2lwKSB7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdfSExTX3NraXAnLCB0aGlzLnNraXApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVybC5ocmVmO1xuICAgIH07XG4gICAgcmV0dXJuIEhsc1VybFBhcmFtZXRlcnM7XG4gIH0oKTtcbiAgdmFyIExldmVsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMZXZlbChkYXRhKSB7XG4gICAgICB0aGlzLl9hdHRycyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuYXVkaW9Db2RlYyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuYml0cmF0ZSA9IHZvaWQgMDtcbiAgICAgIHRoaXMuY29kZWNTZXQgPSB2b2lkIDA7XG4gICAgICB0aGlzLnVybCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZnJhbWVSYXRlID0gdm9pZCAwO1xuICAgICAgdGhpcy5oZWlnaHQgPSB2b2lkIDA7XG4gICAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgICAgdGhpcy5uYW1lID0gdm9pZCAwO1xuICAgICAgdGhpcy5zdXBwbGVtZW50YWwgPSB2b2lkIDA7XG4gICAgICB0aGlzLnZpZGVvQ29kZWMgPSB2b2lkIDA7XG4gICAgICB0aGlzLndpZHRoID0gdm9pZCAwO1xuICAgICAgdGhpcy5kZXRhaWxzID0gdm9pZCAwO1xuICAgICAgdGhpcy5mcmFnbWVudEVycm9yID0gMDtcbiAgICAgIHRoaXMubG9hZEVycm9yID0gMDtcbiAgICAgIHRoaXMubG9hZGVkID0gdm9pZCAwO1xuICAgICAgdGhpcy5yZWFsQml0cmF0ZSA9IDA7XG4gICAgICB0aGlzLnN1cHBvcnRlZFByb21pc2UgPSB2b2lkIDA7XG4gICAgICB0aGlzLnN1cHBvcnRlZFJlc3VsdCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX2F2Z0JpdHJhdGUgPSAwO1xuICAgICAgdGhpcy5fYXVkaW9Hcm91cHMgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9zdWJ0aXRsZUdyb3VwcyA9IHZvaWQgMDtcbiAgICAgIC8vIERlcHJlY2F0ZWQgKHJldGFpbmVkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSlcbiAgICAgIHRoaXMuX3VybElkID0gMDtcbiAgICAgIHRoaXMudXJsID0gW2RhdGEudXJsXTtcbiAgICAgIHRoaXMuX2F0dHJzID0gW2RhdGEuYXR0cnNdO1xuICAgICAgdGhpcy5iaXRyYXRlID0gZGF0YS5iaXRyYXRlO1xuICAgICAgaWYgKGRhdGEuZGV0YWlscykge1xuICAgICAgICB0aGlzLmRldGFpbHMgPSBkYXRhLmRldGFpbHM7XG4gICAgICB9XG4gICAgICB0aGlzLmlkID0gZGF0YS5pZCB8fCAwO1xuICAgICAgdGhpcy5uYW1lID0gZGF0YS5uYW1lO1xuICAgICAgdGhpcy53aWR0aCA9IGRhdGEud2lkdGggfHwgMDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gZGF0YS5oZWlnaHQgfHwgMDtcbiAgICAgIHRoaXMuZnJhbWVSYXRlID0gZGF0YS5hdHRycy5vcHRpb25hbEZsb2F0KCdGUkFNRS1SQVRFJywgMCk7XG4gICAgICB0aGlzLl9hdmdCaXRyYXRlID0gZGF0YS5hdHRycy5kZWNpbWFsSW50ZWdlcignQVZFUkFHRS1CQU5EV0lEVEgnKTtcbiAgICAgIHRoaXMuYXVkaW9Db2RlYyA9IGRhdGEuYXVkaW9Db2RlYztcbiAgICAgIHRoaXMudmlkZW9Db2RlYyA9IGRhdGEudmlkZW9Db2RlYztcbiAgICAgIHRoaXMuY29kZWNTZXQgPSBbZGF0YS52aWRlb0NvZGVjLCBkYXRhLmF1ZGlvQ29kZWNdLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gISFjO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBzLnN1YnN0cmluZygwLCA0KTtcbiAgICAgIH0pLmpvaW4oJywnKTtcbiAgICAgIGlmICgnc3VwcGxlbWVudGFsJyBpbiBkYXRhKSB7XG4gICAgICAgIHZhciBfZGF0YSRzdXBwbGVtZW50YWw7XG4gICAgICAgIHRoaXMuc3VwcGxlbWVudGFsID0gZGF0YS5zdXBwbGVtZW50YWw7XG4gICAgICAgIHZhciBzdXBwbGVtZW50YWxWaWRlbyA9IChfZGF0YSRzdXBwbGVtZW50YWwgPSBkYXRhLnN1cHBsZW1lbnRhbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhJHN1cHBsZW1lbnRhbC52aWRlb0NvZGVjO1xuICAgICAgICBpZiAoc3VwcGxlbWVudGFsVmlkZW8gJiYgc3VwcGxlbWVudGFsVmlkZW8gIT09IGRhdGEudmlkZW9Db2RlYykge1xuICAgICAgICAgIHRoaXMuY29kZWNTZXQgKz0gXCIsXCIgKyBzdXBwbGVtZW50YWxWaWRlby5zdWJzdHJpbmcoMCwgNCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuYWRkR3JvdXBJZCgnYXVkaW8nLCBkYXRhLmF0dHJzLkFVRElPKTtcbiAgICAgIHRoaXMuYWRkR3JvdXBJZCgndGV4dCcsIGRhdGEuYXR0cnMuU1VCVElUTEVTKTtcbiAgICB9XG4gICAgdmFyIF9wcm90bzIgPSBMZXZlbC5wcm90b3R5cGU7XG4gICAgX3Byb3RvMi5oYXNBdWRpb0dyb3VwID0gZnVuY3Rpb24gaGFzQXVkaW9Hcm91cChncm91cElkKSB7XG4gICAgICByZXR1cm4gaGFzR3JvdXAodGhpcy5fYXVkaW9Hcm91cHMsIGdyb3VwSWQpO1xuICAgIH07XG4gICAgX3Byb3RvMi5oYXNTdWJ0aXRsZUdyb3VwID0gZnVuY3Rpb24gaGFzU3VidGl0bGVHcm91cChncm91cElkKSB7XG4gICAgICByZXR1cm4gaGFzR3JvdXAodGhpcy5fc3VidGl0bGVHcm91cHMsIGdyb3VwSWQpO1xuICAgIH07XG4gICAgX3Byb3RvMi5hZGRHcm91cElkID0gZnVuY3Rpb24gYWRkR3JvdXBJZCh0eXBlLCBncm91cElkKSB7XG4gICAgICBpZiAoIWdyb3VwSWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgICAgdmFyIGF1ZGlvR3JvdXBzID0gdGhpcy5fYXVkaW9Hcm91cHM7XG4gICAgICAgIGlmICghYXVkaW9Hcm91cHMpIHtcbiAgICAgICAgICBhdWRpb0dyb3VwcyA9IHRoaXMuX2F1ZGlvR3JvdXBzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF1ZGlvR3JvdXBzLmluZGV4T2YoZ3JvdXBJZCkgPT09IC0xKSB7XG4gICAgICAgICAgYXVkaW9Hcm91cHMucHVzaChncm91cElkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgdmFyIHN1YnRpdGxlR3JvdXBzID0gdGhpcy5fc3VidGl0bGVHcm91cHM7XG4gICAgICAgIGlmICghc3VidGl0bGVHcm91cHMpIHtcbiAgICAgICAgICBzdWJ0aXRsZUdyb3VwcyA9IHRoaXMuX3N1YnRpdGxlR3JvdXBzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1YnRpdGxlR3JvdXBzLmluZGV4T2YoZ3JvdXBJZCkgPT09IC0xKSB7XG4gICAgICAgICAgc3VidGl0bGVHcm91cHMucHVzaChncm91cElkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlcHJlY2F0ZWQgbWV0aG9kcyAocmV0YWluZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5KVxuICAgIDtcbiAgICBfcHJvdG8yLmFkZEZhbGxiYWNrID0gZnVuY3Rpb24gYWRkRmFsbGJhY2soKSB7fTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKExldmVsLCBbe1xuICAgICAga2V5OiBcIm1heEJpdHJhdGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5yZWFsQml0cmF0ZSwgdGhpcy5iaXRyYXRlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYXZlcmFnZUJpdHJhdGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXZnQml0cmF0ZSB8fCB0aGlzLnJlYWxCaXRyYXRlIHx8IHRoaXMuYml0cmF0ZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYXR0cnNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXR0cnNbMF07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNvZGVjc1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJzLkNPREVDUyB8fCAnJztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGF0aHdheUlkXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cnNbJ1BBVEhXQVktSUQnXSB8fCAnLic7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInZpZGVvUmFuZ2VcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyc1snVklERU8tUkFOR0UnXSB8fCAnU0RSJztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2NvcmVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRycy5vcHRpb25hbEZsb2F0KCdTQ09SRScsIDApO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ1cmlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51cmxbMF0gfHwgJyc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImF1ZGlvR3JvdXBzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1ZGlvR3JvdXBzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzdWJ0aXRsZUdyb3Vwc1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJ0aXRsZUdyb3VwcztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidXJsSWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge31cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYXVkaW9Hcm91cElkc1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF1ZGlvR3JvdXBzID8gW3RoaXMuYXVkaW9Hcm91cElkXSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidGV4dEdyb3VwSWRzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3VidGl0bGVHcm91cHMgPyBbdGhpcy50ZXh0R3JvdXBJZF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImF1ZGlvR3JvdXBJZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfdGhpcyRhdWRpb0dyb3VwcztcbiAgICAgICAgcmV0dXJuIChfdGhpcyRhdWRpb0dyb3VwcyA9IHRoaXMuYXVkaW9Hcm91cHMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRhdWRpb0dyb3Vwc1swXTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidGV4dEdyb3VwSWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMkc3VidGl0bGVHcm91cHM7XG4gICAgICAgIHJldHVybiAoX3RoaXMkc3VidGl0bGVHcm91cHMgPSB0aGlzLnN1YnRpdGxlR3JvdXBzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkc3VidGl0bGVHcm91cHNbMF07XG4gICAgICB9XG4gICAgfV0pO1xuICB9KCk7XG4gIGZ1bmN0aW9uIGhhc0dyb3VwKGdyb3VwcywgZ3JvdXBJZCkge1xuICAgIGlmICghZ3JvdXBJZCB8fCAhZ3JvdXBzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBncm91cHMuaW5kZXhPZihncm91cElkKSAhPT0gLTE7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMgV2hldGhlciB3ZSBjYW4gZGV0ZWN0IGFuZCB2YWxpZGF0ZSBIRFIgY2FwYWJpbGl0eSB3aXRoaW4gdGhlIHdpbmRvdyBjb250ZXh0XG4gICAqL1xuICBmdW5jdGlvbiBpc0hkclN1cHBvcnRlZCgpIHtcbiAgICBpZiAodHlwZW9mIG1hdGNoTWVkaWEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBtZWRpYVF1ZXJ5TGlzdCA9IG1hdGNoTWVkaWEoJyhkeW5hbWljLXJhbmdlOiBoaWdoKScpO1xuICAgICAgdmFyIGJhZFF1ZXJ5ID0gbWF0Y2hNZWRpYSgnYmFkIHF1ZXJ5Jyk7XG4gICAgICBpZiAobWVkaWFRdWVyeUxpc3QubWVkaWEgIT09IGJhZFF1ZXJ5Lm1lZGlhKSB7XG4gICAgICAgIHJldHVybiBtZWRpYVF1ZXJ5TGlzdC5tYXRjaGVzID09PSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogU2FuaXRpemVzIGlucHV0cyB0byByZXR1cm4gdGhlIGFjdGl2ZSB2aWRlbyBzZWxlY3Rpb24gb3B0aW9ucyBmb3IgSERSL1NEUi5cbiAgICogV2hlbiBib3RoIGlucHV0cyBhcmUgbnVsbDpcbiAgICpcbiAgICogICAgYHsgcHJlZmVySERSOiBmYWxzZSwgYWxsb3dlZFZpZGVvUmFuZ2VzOiBbXSB9YFxuICAgKlxuICAgKiBXaGVuIGBjdXJyZW50VmlkZW9SYW5nZWAgbm9uLW51bGwsIG1haW50YWluIHRoZSBhY3RpdmUgcmFuZ2U6XG4gICAqXG4gICAqICAgIGB7IHByZWZlckhEUjogY3VycmVudFZpZGVvUmFuZ2UgIT09ICdTRFInLCBhbGxvd2VkVmlkZW9SYW5nZXM6IFtjdXJyZW50VmlkZW9SYW5nZV0gfWBcbiAgICpcbiAgICogV2hlbiBWaWRlb1NlbGVjdGlvbk9wdGlvbiBub24tbnVsbDpcbiAgICpcbiAgICogIC0gQWxsb3cgYWxsIHZpZGVvIHJhbmdlcyBpZiBgYWxsb3dlZFZpZGVvUmFuZ2VzYCB1bnNwZWNpZmllZC5cbiAgICogIC0gSWYgYHByZWZlckhEUmAgaXMgbm9uLW51bGwgdXNlIHRoZSB2YWx1ZSB0byBmaWx0ZXIgYGFsbG93ZWRWaWRlb1Jhbmdlc2AuXG4gICAqICAtIEVsc2UgY2hlY2sgd2luZG93IGZvciBIRFIgc3VwcG9ydCBhbmQgc2V0IGBwcmVmZXJIRFJgIHRvIHRoZSByZXN1bHQuXG4gICAqXG4gICAqIEBwYXJhbSBjdXJyZW50VmlkZW9SYW5nZVxuICAgKiBAcGFyYW0gdmlkZW9QcmVmZXJlbmNlXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWaWRlb1NlbGVjdGlvbk9wdGlvbnMoY3VycmVudFZpZGVvUmFuZ2UsIHZpZGVvUHJlZmVyZW5jZSkge1xuICAgIHZhciBwcmVmZXJIRFIgPSBmYWxzZTtcbiAgICB2YXIgYWxsb3dlZFZpZGVvUmFuZ2VzID0gW107XG4gICAgaWYgKGN1cnJlbnRWaWRlb1JhbmdlKSB7XG4gICAgICBwcmVmZXJIRFIgPSBjdXJyZW50VmlkZW9SYW5nZSAhPT0gJ1NEUic7XG4gICAgICBhbGxvd2VkVmlkZW9SYW5nZXMgPSBbY3VycmVudFZpZGVvUmFuZ2VdO1xuICAgIH1cbiAgICBpZiAodmlkZW9QcmVmZXJlbmNlKSB7XG4gICAgICBhbGxvd2VkVmlkZW9SYW5nZXMgPSB2aWRlb1ByZWZlcmVuY2UuYWxsb3dlZFZpZGVvUmFuZ2VzIHx8IFZpZGVvUmFuZ2VWYWx1ZXMuc2xpY2UoMCk7XG4gICAgICB2YXIgYWxsb3dBdXRvUHJlZmVySERSID0gYWxsb3dlZFZpZGVvUmFuZ2VzLmpvaW4oJycpICE9PSAnU0RSJyAmJiAhdmlkZW9QcmVmZXJlbmNlLnZpZGVvQ29kZWM7XG4gICAgICBwcmVmZXJIRFIgPSB2aWRlb1ByZWZlcmVuY2UucHJlZmVySERSICE9PSB1bmRlZmluZWQgPyB2aWRlb1ByZWZlcmVuY2UucHJlZmVySERSIDogYWxsb3dBdXRvUHJlZmVySERSICYmIGlzSGRyU3VwcG9ydGVkKCk7XG4gICAgICBpZiAoIXByZWZlckhEUikge1xuICAgICAgICBhbGxvd2VkVmlkZW9SYW5nZXMgPSBbJ1NEUiddO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcHJlZmVySERSOiBwcmVmZXJIRFIsXG4gICAgICBhbGxvd2VkVmlkZW9SYW5nZXM6IGFsbG93ZWRWaWRlb1Jhbmdlc1xuICAgIH07XG4gIH1cblxuICB2YXIgb21pdENpcmN1bGFyUmVmc1JlcGxhY2VyID0gZnVuY3Rpb24gb21pdENpcmN1bGFyUmVmc1JlcGxhY2VyKHJlcGxhY2VyKSB7XG4gICAgdmFyIGtub3duID0gbmV3IFdlYWtTZXQoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKF8sIHZhbHVlKSB7XG4gICAgICBpZiAocmVwbGFjZXIpIHtcbiAgICAgICAgdmFsdWUgPSByZXBsYWNlcihfLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoa25vd24uaGFzKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBrbm93bi5hZGQodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gIH07XG4gIHZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkob2JqZWN0LCByZXBsYWNlcikge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmplY3QsIG9taXRDaXJjdWxhclJlZnNSZXBsYWNlcihyZXBsYWNlcikpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFN0YXJ0Q29kZWNUaWVyKGNvZGVjVGllcnMsIGN1cnJlbnRWaWRlb1JhbmdlLCBjdXJyZW50QncsIGF1ZGlvUHJlZmVyZW5jZSwgdmlkZW9QcmVmZXJlbmNlKSB7XG4gICAgdmFyIGNvZGVjU2V0cyA9IE9iamVjdC5rZXlzKGNvZGVjVGllcnMpO1xuICAgIHZhciBjaGFubmVsc1ByZWZlcmVuY2UgPSBhdWRpb1ByZWZlcmVuY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGF1ZGlvUHJlZmVyZW5jZS5jaGFubmVscztcbiAgICB2YXIgYXVkaW9Db2RlY1ByZWZlcmVuY2UgPSBhdWRpb1ByZWZlcmVuY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGF1ZGlvUHJlZmVyZW5jZS5hdWRpb0NvZGVjO1xuICAgIHZhciB2aWRlb0NvZGVjUHJlZmVyZW5jZSA9IHZpZGVvUHJlZmVyZW5jZSA9PSBudWxsID8gdm9pZCAwIDogdmlkZW9QcmVmZXJlbmNlLnZpZGVvQ29kZWM7XG4gICAgdmFyIHByZWZlclN0ZXJlbyA9IGNoYW5uZWxzUHJlZmVyZW5jZSAmJiBwYXJzZUludChjaGFubmVsc1ByZWZlcmVuY2UpID09PSAyO1xuICAgIC8vIFVzZSBmaXJzdCBsZXZlbCBzZXQgdG8gZGV0ZXJtaW5lIHN0ZXJlbywgYW5kIG1pbmltdW0gcmVzb2x1dGlvbiBhbmQgZnJhbWVyYXRlXG4gICAgdmFyIGhhc1N0ZXJlbyA9IGZhbHNlO1xuICAgIHZhciBoYXNDdXJyZW50VmlkZW9SYW5nZSA9IGZhbHNlO1xuICAgIHZhciBtaW5IZWlnaHQgPSBJbmZpbml0eTtcbiAgICB2YXIgbWluRnJhbWVyYXRlID0gSW5maW5pdHk7XG4gICAgdmFyIG1pbkJpdHJhdGUgPSBJbmZpbml0eTtcbiAgICB2YXIgbWluSW5kZXggPSBJbmZpbml0eTtcbiAgICB2YXIgc2VsZWN0ZWRTY29yZSA9IDA7XG4gICAgdmFyIHZpZGVvUmFuZ2VzID0gW107XG4gICAgdmFyIF9nZXRWaWRlb1NlbGVjdGlvbk9wdCA9IGdldFZpZGVvU2VsZWN0aW9uT3B0aW9ucyhjdXJyZW50VmlkZW9SYW5nZSwgdmlkZW9QcmVmZXJlbmNlKSxcbiAgICAgIHByZWZlckhEUiA9IF9nZXRWaWRlb1NlbGVjdGlvbk9wdC5wcmVmZXJIRFIsXG4gICAgICBhbGxvd2VkVmlkZW9SYW5nZXMgPSBfZ2V0VmlkZW9TZWxlY3Rpb25PcHQuYWxsb3dlZFZpZGVvUmFuZ2VzO1xuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICAgICAgdmFyIHRpZXIgPSBjb2RlY1RpZXJzW2NvZGVjU2V0c1tpXV07XG4gICAgICBoYXNTdGVyZW8gfHwgKGhhc1N0ZXJlbyA9IHRpZXIuY2hhbm5lbHNbMl0gPiAwKTtcbiAgICAgIG1pbkhlaWdodCA9IE1hdGgubWluKG1pbkhlaWdodCwgdGllci5taW5IZWlnaHQpO1xuICAgICAgbWluRnJhbWVyYXRlID0gTWF0aC5taW4obWluRnJhbWVyYXRlLCB0aWVyLm1pbkZyYW1lcmF0ZSk7XG4gICAgICBtaW5CaXRyYXRlID0gTWF0aC5taW4obWluQml0cmF0ZSwgdGllci5taW5CaXRyYXRlKTtcbiAgICAgIHZhciBtYXRjaGluZ1ZpZGVvUmFuZ2VzID0gYWxsb3dlZFZpZGVvUmFuZ2VzLmZpbHRlcihmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRpZXIudmlkZW9SYW5nZXNbcmFuZ2VdID4gMDtcbiAgICAgIH0pO1xuICAgICAgaWYgKG1hdGNoaW5nVmlkZW9SYW5nZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBoYXNDdXJyZW50VmlkZW9SYW5nZSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBpID0gY29kZWNTZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgX2xvb3AoKTtcbiAgICB9XG4gICAgbWluSGVpZ2h0ID0gaXNGaW5pdGVOdW1iZXIobWluSGVpZ2h0KSA/IG1pbkhlaWdodCA6IDA7XG4gICAgbWluRnJhbWVyYXRlID0gaXNGaW5pdGVOdW1iZXIobWluRnJhbWVyYXRlKSA/IG1pbkZyYW1lcmF0ZSA6IDA7XG4gICAgdmFyIG1heEhlaWdodCA9IE1hdGgubWF4KDEwODAsIG1pbkhlaWdodCk7XG4gICAgdmFyIG1heEZyYW1lcmF0ZSA9IE1hdGgubWF4KDMwLCBtaW5GcmFtZXJhdGUpO1xuICAgIG1pbkJpdHJhdGUgPSBpc0Zpbml0ZU51bWJlcihtaW5CaXRyYXRlKSA/IG1pbkJpdHJhdGUgOiBjdXJyZW50Qnc7XG4gICAgY3VycmVudEJ3ID0gTWF0aC5tYXgobWluQml0cmF0ZSwgY3VycmVudEJ3KTtcbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gdmFyaWFudHMgd2l0aCBtYXRjaGluZyBwcmVmZXJlbmNlLCBzZXQgY3VycmVudFZpZGVvUmFuZ2UgdG8gdW5kZWZpbmVkXG4gICAgaWYgKCFoYXNDdXJyZW50VmlkZW9SYW5nZSkge1xuICAgICAgY3VycmVudFZpZGVvUmFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHZhciBoYXNNdWx0aXBsZVNldHMgPSBjb2RlY1NldHMubGVuZ3RoID4gMTtcbiAgICB2YXIgY29kZWNTZXQgPSBjb2RlY1NldHMucmVkdWNlKGZ1bmN0aW9uIChzZWxlY3RlZCwgY2FuZGlkYXRlKSB7XG4gICAgICAvLyBSZW1vdmUgY2FuZGlhdGVzIHdoaWNoIGRvIG5vdCBtZWV0IGJpdHJhdGUsIGRlZmF1bHQgYXVkaW8sIHN0ZXJlbyBvciBjaGFubmVscyBwcmVmZXJlbmNlLCAxMDgwcCBvciBsb3dlciwgMzBmcHMgb3IgbG93ZXIsIG9yIFNEUi9IRFIgc2VsZWN0aW9uIGlmIHByZXNlbnRcbiAgICAgIHZhciBjYW5kaWRhdGVUaWVyID0gY29kZWNUaWVyc1tjYW5kaWRhdGVdO1xuICAgICAgaWYgKGNhbmRpZGF0ZSA9PT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkO1xuICAgICAgfVxuICAgICAgdmlkZW9SYW5nZXMgPSBoYXNDdXJyZW50VmlkZW9SYW5nZSA/IGFsbG93ZWRWaWRlb1Jhbmdlcy5maWx0ZXIoZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGVUaWVyLnZpZGVvUmFuZ2VzW3JhbmdlXSA+IDA7XG4gICAgICB9KSA6IFtdO1xuICAgICAgaWYgKGhhc011bHRpcGxlU2V0cykge1xuICAgICAgICBpZiAoY2FuZGlkYXRlVGllci5taW5CaXRyYXRlID4gY3VycmVudEJ3KSB7XG4gICAgICAgICAgbG9nU3RhcnRDb2RlY0NhbmRpZGF0ZUlnbm9yZWQoY2FuZGlkYXRlLCBcIm1pbiBiaXRyYXRlIG9mIFwiICsgY2FuZGlkYXRlVGllci5taW5CaXRyYXRlICsgXCIgPiBjdXJyZW50IGVzdGltYXRlIG9mIFwiICsgY3VycmVudEJ3KTtcbiAgICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjYW5kaWRhdGVUaWVyLmhhc0RlZmF1bHRBdWRpbykge1xuICAgICAgICAgIGxvZ1N0YXJ0Q29kZWNDYW5kaWRhdGVJZ25vcmVkKGNhbmRpZGF0ZSwgXCJubyByZW5kaXRpb25zIHdpdGggZGVmYXVsdCBvciBhdXRvLXNlbGVjdCBzb3VuZCBmb3VuZFwiKTtcbiAgICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF1ZGlvQ29kZWNQcmVmZXJlbmNlICYmIGNhbmRpZGF0ZS5pbmRleE9mKGF1ZGlvQ29kZWNQcmVmZXJlbmNlLnN1YnN0cmluZygwLCA0KSkgJSA1ICE9PSAwKSB7XG4gICAgICAgICAgbG9nU3RhcnRDb2RlY0NhbmRpZGF0ZUlnbm9yZWQoY2FuZGlkYXRlLCBcImF1ZGlvIGNvZGVjIHByZWZlcmVuY2UgXFxcIlwiICsgYXVkaW9Db2RlY1ByZWZlcmVuY2UgKyBcIlxcXCIgbm90IGZvdW5kXCIpO1xuICAgICAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbm5lbHNQcmVmZXJlbmNlICYmICFwcmVmZXJTdGVyZW8pIHtcbiAgICAgICAgICBpZiAoIWNhbmRpZGF0ZVRpZXIuY2hhbm5lbHNbY2hhbm5lbHNQcmVmZXJlbmNlXSkge1xuICAgICAgICAgICAgbG9nU3RhcnRDb2RlY0NhbmRpZGF0ZUlnbm9yZWQoY2FuZGlkYXRlLCBcIm5vIHJlbmRpdGlvbnMgd2l0aCBcIiArIGNoYW5uZWxzUHJlZmVyZW5jZSArIFwiIGNoYW5uZWwgc291bmQgZm91bmQgKGNoYW5uZWxzIG9wdGlvbnM6IFwiICsgT2JqZWN0LmtleXMoY2FuZGlkYXRlVGllci5jaGFubmVscykgKyBcIilcIik7XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCghYXVkaW9Db2RlY1ByZWZlcmVuY2UgfHwgcHJlZmVyU3RlcmVvKSAmJiBoYXNTdGVyZW8gJiYgY2FuZGlkYXRlVGllci5jaGFubmVsc1snMiddID09PSAwKSB7XG4gICAgICAgICAgbG9nU3RhcnRDb2RlY0NhbmRpZGF0ZUlnbm9yZWQoY2FuZGlkYXRlLCBcIm5vIHJlbmRpdGlvbnMgd2l0aCBzdGVyZW8gc291bmQgZm91bmRcIik7XG4gICAgICAgICAgcmV0dXJuIHNlbGVjdGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYW5kaWRhdGVUaWVyLm1pbkhlaWdodCA+IG1heEhlaWdodCkge1xuICAgICAgICAgIGxvZ1N0YXJ0Q29kZWNDYW5kaWRhdGVJZ25vcmVkKGNhbmRpZGF0ZSwgXCJtaW4gcmVzb2x1dGlvbiBvZiBcIiArIGNhbmRpZGF0ZVRpZXIubWluSGVpZ2h0ICsgXCIgPiBtYXhpbXVtIG9mIFwiICsgbWF4SGVpZ2h0KTtcbiAgICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbmRpZGF0ZVRpZXIubWluRnJhbWVyYXRlID4gbWF4RnJhbWVyYXRlKSB7XG4gICAgICAgICAgbG9nU3RhcnRDb2RlY0NhbmRpZGF0ZUlnbm9yZWQoY2FuZGlkYXRlLCBcIm1pbiBmcmFtZXJhdGUgb2YgXCIgKyBjYW5kaWRhdGVUaWVyLm1pbkZyYW1lcmF0ZSArIFwiID4gbWF4aW11bSBvZiBcIiArIG1heEZyYW1lcmF0ZSk7XG4gICAgICAgICAgcmV0dXJuIHNlbGVjdGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmlkZW9SYW5nZXMuc29tZShmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgICByZXR1cm4gY2FuZGlkYXRlVGllci52aWRlb1Jhbmdlc1tyYW5nZV0gPiAwO1xuICAgICAgICB9KSkge1xuICAgICAgICAgIGxvZ1N0YXJ0Q29kZWNDYW5kaWRhdGVJZ25vcmVkKGNhbmRpZGF0ZSwgXCJubyB2YXJpYW50cyB3aXRoIFZJREVPLVJBTkdFIG9mIFwiICsgc3RyaW5naWZ5KHZpZGVvUmFuZ2VzKSArIFwiIGZvdW5kXCIpO1xuICAgICAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlkZW9Db2RlY1ByZWZlcmVuY2UgJiYgY2FuZGlkYXRlLmluZGV4T2YodmlkZW9Db2RlY1ByZWZlcmVuY2Uuc3Vic3RyaW5nKDAsIDQpKSAlIDUgIT09IDApIHtcbiAgICAgICAgICBsb2dTdGFydENvZGVjQ2FuZGlkYXRlSWdub3JlZChjYW5kaWRhdGUsIFwidmlkZW8gY29kZWMgcHJlZmVyZW5jZSBcXFwiXCIgKyB2aWRlb0NvZGVjUHJlZmVyZW5jZSArIFwiXFxcIiBub3QgZm91bmRcIik7XG4gICAgICAgICAgcmV0dXJuIHNlbGVjdGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYW5kaWRhdGVUaWVyLm1heFNjb3JlIDwgc2VsZWN0ZWRTY29yZSkge1xuICAgICAgICAgIGxvZ1N0YXJ0Q29kZWNDYW5kaWRhdGVJZ25vcmVkKGNhbmRpZGF0ZSwgXCJtYXggc2NvcmUgb2YgXCIgKyBjYW5kaWRhdGVUaWVyLm1heFNjb3JlICsgXCIgPCBzZWxlY3RlZCBtYXggb2YgXCIgKyBzZWxlY3RlZFNjb3JlKTtcbiAgICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFJlbW92ZSBjYW5kaWF0ZXMgd2l0aCBsZXNzIHByZWZlcnJlZCBjb2RlY3Mgb3IgbW9yZSBlcnJvcnNcbiAgICAgIGlmIChzZWxlY3RlZCAmJiAoY29kZWNzU2V0U2VsZWN0aW9uUHJlZmVyZW5jZVZhbHVlKGNhbmRpZGF0ZSkgPj0gY29kZWNzU2V0U2VsZWN0aW9uUHJlZmVyZW5jZVZhbHVlKHNlbGVjdGVkKSB8fCBjYW5kaWRhdGVUaWVyLmZyYWdtZW50RXJyb3IgPiBjb2RlY1RpZXJzW3NlbGVjdGVkXS5mcmFnbWVudEVycm9yKSkge1xuICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgICBtaW5JbmRleCA9IGNhbmRpZGF0ZVRpZXIubWluSW5kZXg7XG4gICAgICBzZWxlY3RlZFNjb3JlID0gY2FuZGlkYXRlVGllci5tYXhTY29yZTtcbiAgICAgIHJldHVybiBjYW5kaWRhdGU7XG4gICAgfSwgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4ge1xuICAgICAgY29kZWNTZXQ6IGNvZGVjU2V0LFxuICAgICAgdmlkZW9SYW5nZXM6IHZpZGVvUmFuZ2VzLFxuICAgICAgcHJlZmVySERSOiBwcmVmZXJIRFIsXG4gICAgICBtaW5GcmFtZXJhdGU6IG1pbkZyYW1lcmF0ZSxcbiAgICAgIG1pbkJpdHJhdGU6IG1pbkJpdHJhdGUsXG4gICAgICBtaW5JbmRleDogbWluSW5kZXhcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGxvZ1N0YXJ0Q29kZWNDYW5kaWRhdGVJZ25vcmVkKGNvZGVTZXQsIHJlYXNvbikge1xuICAgIGxvZ2dlci5sb2coXCJbYWJyXSBzdGFydCBjYW5kaWRhdGVzIHdpdGggXFxcIlwiICsgY29kZVNldCArIFwiXFxcIiBpZ25vcmVkIGJlY2F1c2UgXCIgKyByZWFzb24pO1xuICB9XG4gIGZ1bmN0aW9uIGdldEF1ZGlvVHJhY2tzQnlHcm91cChhbGxBdWRpb1RyYWNrcykge1xuICAgIHJldHVybiBhbGxBdWRpb1RyYWNrcy5yZWR1Y2UoZnVuY3Rpb24gKGF1ZGlvVHJhY2tzQnlHcm91cCwgdHJhY2spIHtcbiAgICAgIHZhciB0cmFja0dyb3VwID0gYXVkaW9UcmFja3NCeUdyb3VwLmdyb3Vwc1t0cmFjay5ncm91cElkXTtcbiAgICAgIGlmICghdHJhY2tHcm91cCkge1xuICAgICAgICB0cmFja0dyb3VwID0gYXVkaW9UcmFja3NCeUdyb3VwLmdyb3Vwc1t0cmFjay5ncm91cElkXSA9IHtcbiAgICAgICAgICB0cmFja3M6IFtdLFxuICAgICAgICAgIGNoYW5uZWxzOiB7XG4gICAgICAgICAgICAyOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYXNEZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICBoYXNBdXRvU2VsZWN0OiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdHJhY2tHcm91cC50cmFja3MucHVzaCh0cmFjayk7XG4gICAgICB2YXIgY2hhbm5lbHNLZXkgPSB0cmFjay5jaGFubmVscyB8fCAnMic7XG4gICAgICB0cmFja0dyb3VwLmNoYW5uZWxzW2NoYW5uZWxzS2V5XSA9ICh0cmFja0dyb3VwLmNoYW5uZWxzW2NoYW5uZWxzS2V5XSB8fCAwKSArIDE7XG4gICAgICB0cmFja0dyb3VwLmhhc0RlZmF1bHQgPSB0cmFja0dyb3VwLmhhc0RlZmF1bHQgfHwgdHJhY2suZGVmYXVsdDtcbiAgICAgIHRyYWNrR3JvdXAuaGFzQXV0b1NlbGVjdCA9IHRyYWNrR3JvdXAuaGFzQXV0b1NlbGVjdCB8fCB0cmFjay5hdXRvc2VsZWN0O1xuICAgICAgaWYgKHRyYWNrR3JvdXAuaGFzRGVmYXVsdCkge1xuICAgICAgICBhdWRpb1RyYWNrc0J5R3JvdXAuaGFzRGVmYXVsdEF1ZGlvID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFja0dyb3VwLmhhc0F1dG9TZWxlY3QpIHtcbiAgICAgICAgYXVkaW9UcmFja3NCeUdyb3VwLmhhc0F1dG9TZWxlY3RBdWRpbyA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXVkaW9UcmFja3NCeUdyb3VwO1xuICAgIH0sIHtcbiAgICAgIGhhc0RlZmF1bHRBdWRpbzogZmFsc2UsXG4gICAgICBoYXNBdXRvU2VsZWN0QXVkaW86IGZhbHNlLFxuICAgICAgZ3JvdXBzOiB7fVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGdldENvZGVjVGllcnMobGV2ZWxzLCBhdWRpb1RyYWNrc0J5R3JvdXAsIG1pbkF1dG9MZXZlbCwgbWF4QXV0b0xldmVsKSB7XG4gICAgcmV0dXJuIGxldmVscy5zbGljZShtaW5BdXRvTGV2ZWwsIG1heEF1dG9MZXZlbCArIDEpLnJlZHVjZShmdW5jdGlvbiAodGllcnMsIGxldmVsLCBpbmRleCkge1xuICAgICAgaWYgKCFsZXZlbC5jb2RlY1NldCkge1xuICAgICAgICByZXR1cm4gdGllcnM7XG4gICAgICB9XG4gICAgICB2YXIgYXVkaW9Hcm91cHMgPSBsZXZlbC5hdWRpb0dyb3VwcztcbiAgICAgIHZhciB0aWVyID0gdGllcnNbbGV2ZWwuY29kZWNTZXRdO1xuICAgICAgaWYgKCF0aWVyKSB7XG4gICAgICAgIHRpZXJzW2xldmVsLmNvZGVjU2V0XSA9IHRpZXIgPSB7XG4gICAgICAgICAgbWluQml0cmF0ZTogSW5maW5pdHksXG4gICAgICAgICAgbWluSGVpZ2h0OiBJbmZpbml0eSxcbiAgICAgICAgICBtaW5GcmFtZXJhdGU6IEluZmluaXR5LFxuICAgICAgICAgIG1pbkluZGV4OiBpbmRleCxcbiAgICAgICAgICBtYXhTY29yZTogMCxcbiAgICAgICAgICB2aWRlb1Jhbmdlczoge1xuICAgICAgICAgICAgU0RSOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGFubmVsczoge1xuICAgICAgICAgICAgJzInOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYXNEZWZhdWx0QXVkaW86ICFhdWRpb0dyb3VwcyxcbiAgICAgICAgICBmcmFnbWVudEVycm9yOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICB0aWVyLm1pbkJpdHJhdGUgPSBNYXRoLm1pbih0aWVyLm1pbkJpdHJhdGUsIGxldmVsLmJpdHJhdGUpO1xuICAgICAgdmFyIGxlc3NlcldpZHRoT3JIZWlnaHQgPSBNYXRoLm1pbihsZXZlbC5oZWlnaHQsIGxldmVsLndpZHRoKTtcbiAgICAgIHRpZXIubWluSGVpZ2h0ID0gTWF0aC5taW4odGllci5taW5IZWlnaHQsIGxlc3NlcldpZHRoT3JIZWlnaHQpO1xuICAgICAgdGllci5taW5GcmFtZXJhdGUgPSBNYXRoLm1pbih0aWVyLm1pbkZyYW1lcmF0ZSwgbGV2ZWwuZnJhbWVSYXRlKTtcbiAgICAgIHRpZXIubWluSW5kZXggPSBNYXRoLm1pbih0aWVyLm1pbkluZGV4LCBpbmRleCk7XG4gICAgICB0aWVyLm1heFNjb3JlID0gTWF0aC5tYXgodGllci5tYXhTY29yZSwgbGV2ZWwuc2NvcmUpO1xuICAgICAgdGllci5mcmFnbWVudEVycm9yICs9IGxldmVsLmZyYWdtZW50RXJyb3I7XG4gICAgICB0aWVyLnZpZGVvUmFuZ2VzW2xldmVsLnZpZGVvUmFuZ2VdID0gKHRpZXIudmlkZW9SYW5nZXNbbGV2ZWwudmlkZW9SYW5nZV0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGF1ZGlvR3JvdXBzKSB7XG4gICAgICAgIGF1ZGlvR3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGF1ZGlvR3JvdXBJZCkge1xuICAgICAgICAgIGlmICghYXVkaW9Hcm91cElkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBhdWRpb0dyb3VwID0gYXVkaW9UcmFja3NCeUdyb3VwLmdyb3Vwc1thdWRpb0dyb3VwSWRdO1xuICAgICAgICAgIGlmICghYXVkaW9Hcm91cCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBEZWZhdWx0IGF1ZGlvIGlzIGFueSBncm91cCB3aXRoIERFRkFVTFQ9WUVTLCBvciBpZiBtaXNzaW5nIHRoZW4gYW55IGdyb3VwIHdpdGggQVVUT1NFTEVDVD1ZRVMsIG9yIGFsbCB2YXJpYW50c1xuICAgICAgICAgIHRpZXIuaGFzRGVmYXVsdEF1ZGlvID0gdGllci5oYXNEZWZhdWx0QXVkaW8gfHwgYXVkaW9UcmFja3NCeUdyb3VwLmhhc0RlZmF1bHRBdWRpbyA/IGF1ZGlvR3JvdXAuaGFzRGVmYXVsdCA6IGF1ZGlvR3JvdXAuaGFzQXV0b1NlbGVjdCB8fCAhYXVkaW9UcmFja3NCeUdyb3VwLmhhc0RlZmF1bHRBdWRpbyAmJiAhYXVkaW9UcmFja3NCeUdyb3VwLmhhc0F1dG9TZWxlY3RBdWRpbztcbiAgICAgICAgICBPYmplY3Qua2V5cyhhdWRpb0dyb3VwLmNoYW5uZWxzKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFubmVscykge1xuICAgICAgICAgICAgdGllci5jaGFubmVsc1tjaGFubmVsc10gPSAodGllci5jaGFubmVsc1tjaGFubmVsc10gfHwgMCkgKyBhdWRpb0dyb3VwLmNoYW5uZWxzW2NoYW5uZWxzXTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGllcnM7XG4gICAgfSwge30pO1xuICB9XG4gIGZ1bmN0aW9uIGdldEJhc2ljU2VsZWN0aW9uT3B0aW9uKG9wdGlvbikge1xuICAgIGlmICghb3B0aW9uKSB7XG4gICAgICByZXR1cm4gb3B0aW9uO1xuICAgIH1cbiAgICB2YXIgX3JlZiA9IG9wdGlvbixcbiAgICAgIGxhbmcgPSBfcmVmLmxhbmcsXG4gICAgICBhc3NvY0xhbmcgPSBfcmVmLmFzc29jTGFuZyxcbiAgICAgIGNoYXJhY3RlcmlzdGljcyA9IF9yZWYuY2hhcmFjdGVyaXN0aWNzLFxuICAgICAgY2hhbm5lbHMgPSBfcmVmLmNoYW5uZWxzLFxuICAgICAgYXVkaW9Db2RlYyA9IF9yZWYuYXVkaW9Db2RlYztcbiAgICByZXR1cm4ge1xuICAgICAgbGFuZzogbGFuZyxcbiAgICAgIGFzc29jTGFuZzogYXNzb2NMYW5nLFxuICAgICAgY2hhcmFjdGVyaXN0aWNzOiBjaGFyYWN0ZXJpc3RpY3MsXG4gICAgICBjaGFubmVsczogY2hhbm5lbHMsXG4gICAgICBhdWRpb0NvZGVjOiBhdWRpb0NvZGVjXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBmaW5kTWF0Y2hpbmdPcHRpb24ob3B0aW9uLCB0cmFja3MsIG1hdGNoUHJlZGljYXRlKSB7XG4gICAgaWYgKCdhdHRycycgaW4gb3B0aW9uKSB7XG4gICAgICB2YXIgaW5kZXggPSB0cmFja3MuaW5kZXhPZihvcHRpb24pO1xuICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07XG4gICAgICBpZiAobWF0Y2hlc09wdGlvbihvcHRpb24sIHRyYWNrLCBtYXRjaFByZWRpY2F0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuICBmdW5jdGlvbiBtYXRjaGVzT3B0aW9uKG9wdGlvbiwgdHJhY2ssIG1hdGNoUHJlZGljYXRlKSB7XG4gICAgdmFyIGdyb3VwSWQgPSBvcHRpb24uZ3JvdXBJZCxcbiAgICAgIG5hbWUgPSBvcHRpb24ubmFtZSxcbiAgICAgIGxhbmcgPSBvcHRpb24ubGFuZyxcbiAgICAgIGFzc29jTGFuZyA9IG9wdGlvbi5hc3NvY0xhbmcsXG4gICAgICBpc0RlZmF1bHQgPSBvcHRpb24uZGVmYXVsdDtcbiAgICB2YXIgZm9yY2VkID0gb3B0aW9uLmZvcmNlZDtcbiAgICByZXR1cm4gKGdyb3VwSWQgPT09IHVuZGVmaW5lZCB8fCB0cmFjay5ncm91cElkID09PSBncm91cElkKSAmJiAobmFtZSA9PT0gdW5kZWZpbmVkIHx8IHRyYWNrLm5hbWUgPT09IG5hbWUpICYmIChsYW5nID09PSB1bmRlZmluZWQgfHwgbGFuZ3VhZ2VzTWF0Y2gobGFuZywgdHJhY2subGFuZykpICYmIChsYW5nID09PSB1bmRlZmluZWQgfHwgdHJhY2suYXNzb2NMYW5nID09PSBhc3NvY0xhbmcpICYmIChpc0RlZmF1bHQgPT09IHVuZGVmaW5lZCB8fCB0cmFjay5kZWZhdWx0ID09PSBpc0RlZmF1bHQpICYmIChmb3JjZWQgPT09IHVuZGVmaW5lZCB8fCB0cmFjay5mb3JjZWQgPT09IGZvcmNlZCkgJiYgKCEoJ2NoYXJhY3RlcmlzdGljcycgaW4gb3B0aW9uKSB8fCBjaGFyYWN0ZXJpc3RpY3NNYXRjaChvcHRpb24uY2hhcmFjdGVyaXN0aWNzIHx8ICcnLCB0cmFjay5jaGFyYWN0ZXJpc3RpY3MpKSAmJiAobWF0Y2hQcmVkaWNhdGUgPT09IHVuZGVmaW5lZCB8fCBtYXRjaFByZWRpY2F0ZShvcHRpb24sIHRyYWNrKSk7XG4gIH1cbiAgZnVuY3Rpb24gbGFuZ3VhZ2VzTWF0Y2gobGFuZ3VhZ2VBLCBsYW5ndWFnZUIpIHtcbiAgICBpZiAobGFuZ3VhZ2VCID09PSB2b2lkIDApIHtcbiAgICAgIGxhbmd1YWdlQiA9ICctLSc7XG4gICAgfVxuICAgIGlmIChsYW5ndWFnZUEubGVuZ3RoID09PSBsYW5ndWFnZUIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbGFuZ3VhZ2VBID09PSBsYW5ndWFnZUI7XG4gICAgfVxuICAgIHJldHVybiBsYW5ndWFnZUEuc3RhcnRzV2l0aChsYW5ndWFnZUIpIHx8IGxhbmd1YWdlQi5zdGFydHNXaXRoKGxhbmd1YWdlQSk7XG4gIH1cbiAgZnVuY3Rpb24gY2hhcmFjdGVyaXN0aWNzTWF0Y2goY2hhcmFjdGVyaXN0aWNzQSwgY2hhcmFjdGVyaXN0aWNzQikge1xuICAgIGlmIChjaGFyYWN0ZXJpc3RpY3NCID09PSB2b2lkIDApIHtcbiAgICAgIGNoYXJhY3RlcmlzdGljc0IgPSAnJztcbiAgICB9XG4gICAgdmFyIGFyckEgPSBjaGFyYWN0ZXJpc3RpY3NBLnNwbGl0KCcsJyk7XG4gICAgdmFyIGFyckIgPSBjaGFyYWN0ZXJpc3RpY3NCLnNwbGl0KCcsJyk7XG4gICAgLy8gRXhwZWN0cyBlYWNoIGl0ZW0gdG8gYmUgdW5pcXVlOlxuICAgIHJldHVybiBhcnJBLmxlbmd0aCA9PT0gYXJyQi5sZW5ndGggJiYgIWFyckEuc29tZShmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBhcnJCLmluZGV4T2YoZWwpID09PSAtMTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhdWRpb01hdGNoUHJlZGljYXRlKG9wdGlvbiwgdHJhY2spIHtcbiAgICB2YXIgYXVkaW9Db2RlYyA9IG9wdGlvbi5hdWRpb0NvZGVjLFxuICAgICAgY2hhbm5lbHMgPSBvcHRpb24uY2hhbm5lbHM7XG4gICAgcmV0dXJuIChhdWRpb0NvZGVjID09PSB1bmRlZmluZWQgfHwgKHRyYWNrLmF1ZGlvQ29kZWMgfHwgJycpLnN1YnN0cmluZygwLCA0KSA9PT0gYXVkaW9Db2RlYy5zdWJzdHJpbmcoMCwgNCkpICYmIChjaGFubmVscyA9PT0gdW5kZWZpbmVkIHx8IGNoYW5uZWxzID09PSAodHJhY2suY2hhbm5lbHMgfHwgJzInKSk7XG4gIH1cbiAgZnVuY3Rpb24gZmluZENsb3Nlc3RMZXZlbFdpdGhBdWRpb0dyb3VwKG9wdGlvbiwgbGV2ZWxzLCBhbGxBdWRpb1RyYWNrcywgc2VhcmNoSW5kZXgsIG1hdGNoUHJlZGljYXRlKSB7XG4gICAgdmFyIGN1cnJlbnRMZXZlbCA9IGxldmVsc1tzZWFyY2hJbmRleF07XG4gICAgLy8gQXJlIHRoZXJlIHZhcmlhbnRzIHdpdGggc2FtZSBVUkkgYXMgY3VycmVudCBsZXZlbD9cbiAgICAvLyBJZiBzbywgZmluZCBhIG1hdGNoIHRoYXQgZG9lcyBub3QgcmVxdWlyZSBhbnkgbGV2ZWwgVVJJIGNoYW5nZVxuICAgIHZhciB2YXJpYW50cyA9IGxldmVscy5yZWR1Y2UoZnVuY3Rpb24gKHZhcmlhbnRNYXAsIGxldmVsLCBpbmRleCkge1xuICAgICAgdmFyIHVyaSA9IGxldmVsLnVyaTtcbiAgICAgIHZhciByZW5kaXRpb25zID0gdmFyaWFudE1hcFt1cmldIHx8ICh2YXJpYW50TWFwW3VyaV0gPSBbXSk7XG4gICAgICByZW5kaXRpb25zLnB1c2goaW5kZXgpO1xuICAgICAgcmV0dXJuIHZhcmlhbnRNYXA7XG4gICAgfSwge30pO1xuICAgIHZhciByZW5kaXRpb25zID0gdmFyaWFudHNbY3VycmVudExldmVsLnVyaV07XG4gICAgaWYgKHJlbmRpdGlvbnMubGVuZ3RoID4gMSkge1xuICAgICAgc2VhcmNoSW5kZXggPSBNYXRoLm1heC5hcHBseShNYXRoLCByZW5kaXRpb25zKTtcbiAgICB9XG4gICAgLy8gRmluZCBiZXN0IG1hdGNoXG4gICAgdmFyIGN1cnJlbnRWaWRlb1JhbmdlID0gY3VycmVudExldmVsLnZpZGVvUmFuZ2U7XG4gICAgdmFyIGN1cnJlbnRGcmFtZVJhdGUgPSBjdXJyZW50TGV2ZWwuZnJhbWVSYXRlO1xuICAgIHZhciBjdXJyZW50VmlkZW9Db2RlYyA9IGN1cnJlbnRMZXZlbC5jb2RlY1NldC5zdWJzdHJpbmcoMCwgNCk7XG4gICAgdmFyIG1hdGNoaW5nVmlkZW8gPSBzZWFyY2hEb3duQW5kVXBMaXN0KGxldmVscywgc2VhcmNoSW5kZXgsIGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgaWYgKGxldmVsLnZpZGVvUmFuZ2UgIT09IGN1cnJlbnRWaWRlb1JhbmdlIHx8IGxldmVsLmZyYW1lUmF0ZSAhPT0gY3VycmVudEZyYW1lUmF0ZSB8fCBsZXZlbC5jb2RlY1NldC5zdWJzdHJpbmcoMCwgNCkgIT09IGN1cnJlbnRWaWRlb0NvZGVjKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBhdWRpb0dyb3VwcyA9IGxldmVsLmF1ZGlvR3JvdXBzO1xuICAgICAgdmFyIHRyYWNrcyA9IGFsbEF1ZGlvVHJhY2tzLmZpbHRlcihmdW5jdGlvbiAodHJhY2spIHtcbiAgICAgICAgcmV0dXJuICFhdWRpb0dyb3VwcyB8fCBhdWRpb0dyb3Vwcy5pbmRleE9mKHRyYWNrLmdyb3VwSWQpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpbmRNYXRjaGluZ09wdGlvbihvcHRpb24sIHRyYWNrcywgbWF0Y2hQcmVkaWNhdGUpID4gLTE7XG4gICAgfSk7XG4gICAgaWYgKG1hdGNoaW5nVmlkZW8gPiAtMSkge1xuICAgICAgcmV0dXJuIG1hdGNoaW5nVmlkZW87XG4gICAgfVxuICAgIHJldHVybiBzZWFyY2hEb3duQW5kVXBMaXN0KGxldmVscywgc2VhcmNoSW5kZXgsIGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgdmFyIGF1ZGlvR3JvdXBzID0gbGV2ZWwuYXVkaW9Hcm91cHM7XG4gICAgICB2YXIgdHJhY2tzID0gYWxsQXVkaW9UcmFja3MuZmlsdGVyKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgICByZXR1cm4gIWF1ZGlvR3JvdXBzIHx8IGF1ZGlvR3JvdXBzLmluZGV4T2YodHJhY2suZ3JvdXBJZCkgIT09IC0xO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmluZE1hdGNoaW5nT3B0aW9uKG9wdGlvbiwgdHJhY2tzLCBtYXRjaFByZWRpY2F0ZSkgPiAtMTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzZWFyY2hEb3duQW5kVXBMaXN0KGFyciwgc2VhcmNoSW5kZXgsIHByZWRpY2F0ZSkge1xuICAgIGZvciAodmFyIGkgPSBzZWFyY2hJbmRleDsgaSA+IC0xOyBpLS0pIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyW2ldKSkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSBzZWFyY2hJbmRleCArIDE7IF9pIDwgYXJyLmxlbmd0aDsgX2krKykge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJbX2ldKSkge1xuICAgICAgICByZXR1cm4gX2k7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuICBmdW5jdGlvbiB1c2VBbHRlcm5hdGVBdWRpbyhhdWRpb1RyYWNrVXJsLCBobHMpIHtcbiAgICB2YXIgX2hscyRsb2FkTGV2ZWxPYmo7XG4gICAgcmV0dXJuICEhYXVkaW9UcmFja1VybCAmJiBhdWRpb1RyYWNrVXJsICE9PSAoKF9obHMkbG9hZExldmVsT2JqID0gaGxzLmxvYWRMZXZlbE9iaikgPT0gbnVsbCA/IHZvaWQgMCA6IF9obHMkbG9hZExldmVsT2JqLnVyaSk7XG4gIH1cblxuICB2YXIgQWJyQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0xvZ2dlcikge1xuICAgIGZ1bmN0aW9uIEFickNvbnRyb2xsZXIoX2hscykge1xuICAgICAgdmFyIF90aGlzO1xuICAgICAgX3RoaXMgPSBfTG9nZ2VyLmNhbGwodGhpcywgJ2FicicsIF9obHMubG9nZ2VyKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuaGxzID0gdm9pZCAwO1xuICAgICAgX3RoaXMubGFzdExldmVsTG9hZFNlYyA9IDA7XG4gICAgICBfdGhpcy5sYXN0TG9hZGVkRnJhZ0xldmVsID0gLTE7XG4gICAgICBfdGhpcy5maXJzdFNlbGVjdGlvbiA9IC0xO1xuICAgICAgX3RoaXMuX25leHRBdXRvTGV2ZWwgPSAtMTtcbiAgICAgIF90aGlzLm5leHRBdXRvTGV2ZWxLZXkgPSAnJztcbiAgICAgIF90aGlzLmF1ZGlvVHJhY2tzQnlHcm91cCA9IG51bGw7XG4gICAgICBfdGhpcy5jb2RlY1RpZXJzID0gbnVsbDtcbiAgICAgIF90aGlzLnRpbWVyID0gLTE7XG4gICAgICBfdGhpcy5mcmFnQ3VycmVudCA9IG51bGw7XG4gICAgICBfdGhpcy5wYXJ0Q3VycmVudCA9IG51bGw7XG4gICAgICBfdGhpcy5iaXRyYXRlVGVzdERlbGF5ID0gMDtcbiAgICAgIF90aGlzLnJlYnVmZmVyTm90aWNlID0gLTE7XG4gICAgICBfdGhpcy5id0VzdGltYXRvciA9IHZvaWQgMDtcbiAgICAgIC8qXG4gICAgICAgICAgVGhpcyBtZXRob2QgbW9uaXRvcnMgdGhlIGRvd25sb2FkIHJhdGUgb2YgdGhlIGN1cnJlbnQgZnJhZ21lbnQsIGFuZCB3aWxsIGRvd25zd2l0Y2ggaWYgdGhhdCBmcmFnbWVudCB3aWxsIG5vdCBsb2FkXG4gICAgICAgICAgcXVpY2tseSBlbm91Z2ggdG8gcHJldmVudCB1bmRlcmJ1ZmZlcmluZ1xuICAgICAgICAqL1xuICAgICAgX3RoaXMuX2FiYW5kb25SdWxlc0NoZWNrID0gZnVuY3Rpb24gKGxldmVsTG9hZGVkKSB7XG4gICAgICAgIHZhciBfcmVmO1xuICAgICAgICB2YXIgX3RoaXMyID0gX3RoaXMsXG4gICAgICAgICAgZnJhZyA9IF90aGlzMi5mcmFnQ3VycmVudCxcbiAgICAgICAgICBwYXJ0ID0gX3RoaXMyLnBhcnRDdXJyZW50LFxuICAgICAgICAgIGhscyA9IF90aGlzMi5obHM7XG4gICAgICAgIHZhciBhdXRvTGV2ZWxFbmFibGVkID0gaGxzLmF1dG9MZXZlbEVuYWJsZWQsXG4gICAgICAgICAgbWVkaWEgPSBobHMubWVkaWE7XG4gICAgICAgIGlmICghZnJhZyB8fCAhbWVkaWEpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB2YXIgc3RhdHMgPSBwYXJ0ID8gcGFydC5zdGF0cyA6IGZyYWcuc3RhdHM7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHBhcnQgPyBwYXJ0LmR1cmF0aW9uIDogZnJhZy5kdXJhdGlvbjtcbiAgICAgICAgdmFyIHRpbWVMb2FkaW5nID0gbm93IC0gc3RhdHMubG9hZGluZy5zdGFydDtcbiAgICAgICAgdmFyIG1pbkF1dG9MZXZlbCA9IGhscy5taW5BdXRvTGV2ZWw7XG4gICAgICAgIHZhciBsb2FkaW5nRnJhZ0ZvckxldmVsID0gZnJhZy5sZXZlbDtcbiAgICAgICAgdmFyIGN1cnJlbnRBdXRvTGV2ZWwgPSBfdGhpcy5fbmV4dEF1dG9MZXZlbDtcbiAgICAgICAgLy8gSWYgZnJhZyBsb2FkaW5nIGlzIGFib3J0ZWQsIGNvbXBsZXRlLCBvciBmcm9tIGxvd2VzdCBsZXZlbCwgc3RvcCB0aW1lciBhbmQgcmV0dXJuXG4gICAgICAgIGlmIChzdGF0cy5hYm9ydGVkIHx8IHN0YXRzLmxvYWRlZCAmJiBzdGF0cy5sb2FkZWQgPT09IHN0YXRzLnRvdGFsIHx8IGxvYWRpbmdGcmFnRm9yTGV2ZWwgPD0gbWluQXV0b0xldmVsKSB7XG4gICAgICAgICAgX3RoaXMuY2xlYXJUaW1lcigpO1xuICAgICAgICAgIC8vIHJlc2V0IGZvcmNlZCBhdXRvIGxldmVsIHZhbHVlIHNvIHRoYXQgbmV4dCBsZXZlbCB3aWxsIGJlIHNlbGVjdGVkXG4gICAgICAgICAgX3RoaXMuX25leHRBdXRvTGV2ZWwgPSAtMTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIGNoZWNrIG9ubHkgcnVucyBpZiB3ZSdyZSBpbiBBQlIgbW9kZVxuICAgICAgICBpZiAoIWF1dG9MZXZlbEVuYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNdXN0IGJlIGxvYWRpbmcvbG9hZGVkIGEgbmV3IGxldmVsIG9yIGJlIGluIGEgcGxheWluZyBzdGF0ZVxuICAgICAgICB2YXIgZnJhZ0Jsb2NraW5nU3dpdGNoID0gY3VycmVudEF1dG9MZXZlbCA+IC0xICYmIGN1cnJlbnRBdXRvTGV2ZWwgIT09IGxvYWRpbmdGcmFnRm9yTGV2ZWw7XG4gICAgICAgIHZhciBsZXZlbENoYW5nZSA9ICEhbGV2ZWxMb2FkZWQgfHwgZnJhZ0Jsb2NraW5nU3dpdGNoO1xuICAgICAgICBpZiAoIWxldmVsQ2hhbmdlICYmIChtZWRpYS5wYXVzZWQgfHwgIW1lZGlhLnBsYXliYWNrUmF0ZSB8fCAhbWVkaWEucmVhZHlTdGF0ZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ1ZmZlckluZm8gPSBobHMubWFpbkZvcndhcmRCdWZmZXJJbmZvO1xuICAgICAgICBpZiAoIWxldmVsQ2hhbmdlICYmIGJ1ZmZlckluZm8gPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR0ZmJFc3RpbWF0ZSA9IF90aGlzLmJ3RXN0aW1hdG9yLmdldEVzdGltYXRlVFRGQigpO1xuICAgICAgICB2YXIgcGxheWJhY2tSYXRlID0gTWF0aC5hYnMobWVkaWEucGxheWJhY2tSYXRlKTtcbiAgICAgICAgLy8gVG8gbWFpbnRhaW4gc3RhYmxlIGFkYXB0aXZlIHBsYXliYWNrLCBvbmx5IGJlZ2luIG1vbml0b3JpbmcgZnJhZyBsb2FkaW5nIGFmdGVyIGhhbGYgb3IgbW9yZSBvZiBpdHMgcGxheWJhY2sgZHVyYXRpb24gaGFzIHBhc3NlZFxuICAgICAgICBpZiAodGltZUxvYWRpbmcgPD0gTWF0aC5tYXgodHRmYkVzdGltYXRlLCAxMDAwICogKGR1cmF0aW9uIC8gKHBsYXliYWNrUmF0ZSAqIDIpKSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBidWZmZXJTdGFydmF0aW9uRGVsYXkgaXMgYW4gZXN0aW1hdGUgb2YgdGhlIGFtb3VudCB0aW1lIChpbiBzZWNvbmRzKSBpdCB3aWxsIHRha2UgdG8gZXhoYXVzdCB0aGUgYnVmZmVyXG4gICAgICAgIHZhciBidWZmZXJTdGFydmF0aW9uRGVsYXkgPSBidWZmZXJJbmZvID8gYnVmZmVySW5mby5sZW4gLyBwbGF5YmFja1JhdGUgOiAwO1xuICAgICAgICB2YXIgdHRmYiA9IHN0YXRzLmxvYWRpbmcuZmlyc3QgPyBzdGF0cy5sb2FkaW5nLmZpcnN0IC0gc3RhdHMubG9hZGluZy5zdGFydCA6IC0xO1xuICAgICAgICB2YXIgbG9hZGVkRmlyc3RCeXRlID0gc3RhdHMubG9hZGVkICYmIHR0ZmIgPiAtMTtcbiAgICAgICAgdmFyIGJ3RXN0aW1hdGUgPSBfdGhpcy5nZXRCd0VzdGltYXRlKCk7XG4gICAgICAgIHZhciBsZXZlbHMgPSBobHMubGV2ZWxzO1xuICAgICAgICB2YXIgbGV2ZWwgPSBsZXZlbHNbbG9hZGluZ0ZyYWdGb3JMZXZlbF07XG4gICAgICAgIHZhciBleHBlY3RlZExlbiA9IE1hdGgubWF4KHN0YXRzLmxvYWRlZCwgTWF0aC5yb3VuZChkdXJhdGlvbiAqIChmcmFnLmJpdHJhdGUgfHwgbGV2ZWwuYXZlcmFnZUJpdHJhdGUpIC8gOCkpO1xuICAgICAgICB2YXIgdGltZVN0cmVhbWluZyA9IGxvYWRlZEZpcnN0Qnl0ZSA/IHRpbWVMb2FkaW5nIC0gdHRmYiA6IHRpbWVMb2FkaW5nO1xuICAgICAgICBpZiAodGltZVN0cmVhbWluZyA8IDEgJiYgbG9hZGVkRmlyc3RCeXRlKSB7XG4gICAgICAgICAgdGltZVN0cmVhbWluZyA9IE1hdGgubWluKHRpbWVMb2FkaW5nLCBzdGF0cy5sb2FkZWQgKiA4IC8gYndFc3RpbWF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxvYWRSYXRlID0gbG9hZGVkRmlyc3RCeXRlID8gc3RhdHMubG9hZGVkICogMTAwMCAvIHRpbWVTdHJlYW1pbmcgOiAwO1xuICAgICAgICAvLyBmcmFnTG9hZERlbGF5IGlzIGFuIGVzdGltYXRlIG9mIHRoZSB0aW1lIChpbiBzZWNvbmRzKSBpdCB3aWxsIHRha2UgdG8gYnVmZmVyIHRoZSByZW1haW5kZXIgb2YgdGhlIGZyYWdtZW50XG4gICAgICAgIHZhciB0dGZiU2Vjb25kcyA9IHR0ZmJFc3RpbWF0ZSAvIDEwMDA7XG4gICAgICAgIHZhciBmcmFnTG9hZGVkRGVsYXkgPSBsb2FkUmF0ZSA/IChleHBlY3RlZExlbiAtIHN0YXRzLmxvYWRlZCkgLyBsb2FkUmF0ZSA6IGV4cGVjdGVkTGVuICogOCAvIGJ3RXN0aW1hdGUgKyB0dGZiU2Vjb25kcztcbiAgICAgICAgLy8gT25seSBkb3duc3dpdGNoIGlmIHRoZSB0aW1lIHRvIGZpbmlzaCBsb2FkaW5nIHRoZSBjdXJyZW50IGZyYWdtZW50IGlzIGdyZWF0ZXIgdGhhbiB0aGUgYW1vdW50IG9mIGJ1ZmZlciBsZWZ0XG4gICAgICAgIGlmIChmcmFnTG9hZGVkRGVsYXkgPD0gYnVmZmVyU3RhcnZhdGlvbkRlbGF5KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBid2UgPSBsb2FkUmF0ZSA/IGxvYWRSYXRlICogOCA6IGJ3RXN0aW1hdGU7XG4gICAgICAgIHZhciBsaXZlID0gKChfcmVmID0gKGxldmVsTG9hZGVkID09IG51bGwgPyB2b2lkIDAgOiBsZXZlbExvYWRlZC5kZXRhaWxzKSB8fCBfdGhpcy5obHMubGF0ZXN0TGV2ZWxEZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX3JlZi5saXZlKSA9PT0gdHJ1ZTtcbiAgICAgICAgdmFyIGFickJhbmRXaWR0aFVwRmFjdG9yID0gX3RoaXMuaGxzLmNvbmZpZy5hYnJCYW5kV2lkdGhVcEZhY3RvcjtcbiAgICAgICAgdmFyIGZyYWdMZXZlbE5leHRMb2FkZWREZWxheSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgdmFyIG5leHRMb2FkTGV2ZWw7XG4gICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBsb3dlciBsZXZlbCBhbmQgdHJ5IHRvIGZpbmQgdGhlIGxhcmdlc3Qgb25lIHRoYXQgYXZvaWRzIHJlYnVmZmVyaW5nXG4gICAgICAgIGZvciAobmV4dExvYWRMZXZlbCA9IGxvYWRpbmdGcmFnRm9yTGV2ZWwgLSAxOyBuZXh0TG9hZExldmVsID4gbWluQXV0b0xldmVsOyBuZXh0TG9hZExldmVsLS0pIHtcbiAgICAgICAgICAvLyBjb21wdXRlIHRpbWUgdG8gbG9hZCBuZXh0IGZyYWdtZW50IGF0IGxvd2VyIGxldmVsXG4gICAgICAgICAgLy8gOCA9IGJpdHMgcGVyIGJ5dGUgKGJwcy9CcHMpXG4gICAgICAgICAgdmFyIGxldmVsTmV4dEJpdHJhdGUgPSBsZXZlbHNbbmV4dExvYWRMZXZlbF0ubWF4Qml0cmF0ZTtcbiAgICAgICAgICB2YXIgcmVxdWlyZXNMZXZlbExvYWQgPSAhbGV2ZWxzW25leHRMb2FkTGV2ZWxdLmRldGFpbHMgfHwgbGl2ZTtcbiAgICAgICAgICBmcmFnTGV2ZWxOZXh0TG9hZGVkRGVsYXkgPSBfdGhpcy5nZXRUaW1lVG9Mb2FkRnJhZyh0dGZiU2Vjb25kcywgYndlLCBkdXJhdGlvbiAqIGxldmVsTmV4dEJpdHJhdGUsIHJlcXVpcmVzTGV2ZWxMb2FkKTtcbiAgICAgICAgICBpZiAoZnJhZ0xldmVsTmV4dExvYWRlZERlbGF5IDwgTWF0aC5taW4oYnVmZmVyU3RhcnZhdGlvbkRlbGF5LCBkdXJhdGlvbiArIHR0ZmJTZWNvbmRzKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE9ubHkgZW1lcmdlbmN5IHN3aXRjaCBkb3duIGlmIGl0IHRha2VzIGxlc3MgdGltZSB0byBsb2FkIGEgbmV3IGZyYWdtZW50IGF0IGxvd2VzdCBsZXZlbCBpbnN0ZWFkIG9mIGNvbnRpbnVpbmdcbiAgICAgICAgLy8gdG8gbG9hZCB0aGUgY3VycmVudCBvbmVcbiAgICAgICAgaWYgKGZyYWdMZXZlbE5leHRMb2FkZWREZWxheSA+PSBmcmFnTG9hZGVkRGVsYXkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBlc3RpbWF0ZWQgbG9hZCB0aW1lIG9mIG5ldyBzZWdtZW50IGlzIGNvbXBsZXRlbHkgdW5yZWFzb25hYmxlLCBpZ25vcmUgYW5kIGRvIG5vdCBlbWVyZ2VuY3kgc3dpdGNoIGRvd25cbiAgICAgICAgaWYgKGZyYWdMZXZlbE5leHRMb2FkZWREZWxheSA+IGR1cmF0aW9uICogMTApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvYWRlZEZpcnN0Qnl0ZSkge1xuICAgICAgICAgIC8vIElmIHRoZXJlIGhhcyBiZWVuIGxvYWRpbmcgcHJvZ3Jlc3MsIHNhbXBsZSBiYW5kd2lkdGggdXNpbmcgbG9hZGluZyB0aW1lIG9mZnNldCBieSBtaW5pbXVtIFRURkIgdGltZVxuICAgICAgICAgIF90aGlzLmJ3RXN0aW1hdG9yLnNhbXBsZSh0aW1lTG9hZGluZyAtIE1hdGgubWluKHR0ZmJFc3RpbWF0ZSwgdHRmYiksIHN0YXRzLmxvYWRlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmUgaGFzIGJlZW4gbm8gbG9hZGluZyBwcm9ncmVzcywgc2FtcGxlIFRURkJcbiAgICAgICAgICBfdGhpcy5id0VzdGltYXRvci5zYW1wbGVUVEZCKHRpbWVMb2FkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV4dExvYWRMZXZlbEJpdHJhdGUgPSBsZXZlbHNbbmV4dExvYWRMZXZlbF0ubWF4Qml0cmF0ZTtcbiAgICAgICAgaWYgKF90aGlzLmdldEJ3RXN0aW1hdGUoKSAqIGFickJhbmRXaWR0aFVwRmFjdG9yID4gbmV4dExvYWRMZXZlbEJpdHJhdGUpIHtcbiAgICAgICAgICBfdGhpcy5yZXNldEVzdGltYXRvcihuZXh0TG9hZExldmVsQml0cmF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJlc3RTd2l0Y2hMZXZlbCA9IF90aGlzLmZpbmRCZXN0TGV2ZWwobmV4dExvYWRMZXZlbEJpdHJhdGUsIG1pbkF1dG9MZXZlbCwgbmV4dExvYWRMZXZlbCwgMCwgYnVmZmVyU3RhcnZhdGlvbkRlbGF5LCAxLCAxKTtcbiAgICAgICAgaWYgKGJlc3RTd2l0Y2hMZXZlbCA+IC0xKSB7XG4gICAgICAgICAgbmV4dExvYWRMZXZlbCA9IGJlc3RTd2l0Y2hMZXZlbDtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy53YXJuKFwiRnJhZ21lbnQgXCIgKyBmcmFnLnNuICsgKHBhcnQgPyAnIHBhcnQgJyArIHBhcnQuaW5kZXggOiAnJykgKyBcIiBvZiBsZXZlbCBcIiArIGxvYWRpbmdGcmFnRm9yTGV2ZWwgKyBcIiBpcyBsb2FkaW5nIHRvbyBzbG93bHk7XFxuICAgICAgRnJhZ21lbnQgZHVyYXRpb246IFwiICsgZnJhZy5kdXJhdGlvbi50b0ZpeGVkKDMpICsgXCJcXG4gICAgICBUaW1lIHRvIHVuZGVyYnVmZmVyOiBcIiArIGJ1ZmZlclN0YXJ2YXRpb25EZWxheS50b0ZpeGVkKDMpICsgXCIgc1xcbiAgICAgIEVzdGltYXRlZCBsb2FkIHRpbWUgZm9yIGN1cnJlbnQgZnJhZ21lbnQ6IFwiICsgZnJhZ0xvYWRlZERlbGF5LnRvRml4ZWQoMykgKyBcIiBzXFxuICAgICAgRXN0aW1hdGVkIGxvYWQgdGltZSBmb3IgZG93biBzd2l0Y2ggZnJhZ21lbnQ6IFwiICsgZnJhZ0xldmVsTmV4dExvYWRlZERlbGF5LnRvRml4ZWQoMykgKyBcIiBzXFxuICAgICAgVFRGQiBlc3RpbWF0ZTogXCIgKyAodHRmYiB8IDApICsgXCIgbXNcXG4gICAgICBDdXJyZW50IEJXIGVzdGltYXRlOiBcIiArIChpc0Zpbml0ZU51bWJlcihid0VzdGltYXRlKSA/IGJ3RXN0aW1hdGUgfCAwIDogJ1Vua25vd24nKSArIFwiIGJwc1xcbiAgICAgIE5ldyBCVyBlc3RpbWF0ZTogXCIgKyAoX3RoaXMuZ2V0QndFc3RpbWF0ZSgpIHwgMCkgKyBcIiBicHNcXG4gICAgICBTd2l0Y2hpbmcgdG8gbGV2ZWwgXCIgKyBuZXh0TG9hZExldmVsICsgXCIgQCBcIiArIChuZXh0TG9hZExldmVsQml0cmF0ZSB8IDApICsgXCIgYnBzXCIpO1xuICAgICAgICBobHMubmV4dExvYWRMZXZlbCA9IGhscy5uZXh0QXV0b0xldmVsID0gbmV4dExvYWRMZXZlbDtcbiAgICAgICAgX3RoaXMuY2xlYXJUaW1lcigpO1xuICAgICAgICB2YXIgYWJvcnRBbmRTd2l0Y2ggPSBmdW5jdGlvbiBhYm9ydEFuZFN3aXRjaCgpIHtcbiAgICAgICAgICAvLyBBcmUgbmV4dExvYWRMZXZlbCBkZXRhaWxzIGF2YWlsYWJsZSBvciBpcyBzdHJlYW0tY29udHJvbGxlciBzdGlsbCBpbiBcIldBSVRJTkdfTEVWRUxcIiBzdGF0ZT9cbiAgICAgICAgICBfdGhpcy5jbGVhclRpbWVyKCk7XG4gICAgICAgICAgaWYgKF90aGlzLmZyYWdDdXJyZW50ID09PSBmcmFnICYmIF90aGlzLmhscy5sb2FkTGV2ZWwgPT09IG5leHRMb2FkTGV2ZWwgJiYgbmV4dExvYWRMZXZlbCA+IDApIHtcbiAgICAgICAgICAgIHZhciBfYnVmZmVyU3RhcnZhdGlvbkRlbGF5ID0gX3RoaXMuZ2V0U3RhcnZhdGlvbkRlbGF5KCk7XG4gICAgICAgICAgICBfdGhpcy53YXJuKFwiQWJvcnRpbmcgaW5mbGlnaHQgcmVxdWVzdCBcIiArIChuZXh0TG9hZExldmVsID4gMCA/ICdhbmQgc3dpdGNoaW5nIGRvd24nIDogJycpICsgXCJcXG4gICAgICBGcmFnbWVudCBkdXJhdGlvbjogXCIgKyBmcmFnLmR1cmF0aW9uLnRvRml4ZWQoMykgKyBcIiBzXFxuICAgICAgVGltZSB0byB1bmRlcmJ1ZmZlcjogXCIgKyBfYnVmZmVyU3RhcnZhdGlvbkRlbGF5LnRvRml4ZWQoMykgKyBcIiBzXCIpO1xuICAgICAgICAgICAgZnJhZy5hYm9ydFJlcXVlc3RzKCk7XG4gICAgICAgICAgICBfdGhpcy5mcmFnQ3VycmVudCA9IF90aGlzLnBhcnRDdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChuZXh0TG9hZExldmVsID4gbWluQXV0b0xldmVsKSB7XG4gICAgICAgICAgICAgIHZhciBsb3dlc3RTd2l0Y2hMZXZlbCA9IF90aGlzLmZpbmRCZXN0TGV2ZWwoX3RoaXMuaGxzLmxldmVsc1ttaW5BdXRvTGV2ZWxdLmJpdHJhdGUsIG1pbkF1dG9MZXZlbCwgbmV4dExvYWRMZXZlbCwgMCwgX2J1ZmZlclN0YXJ2YXRpb25EZWxheSwgMSwgMSk7XG4gICAgICAgICAgICAgIGlmIChsb3dlc3RTd2l0Y2hMZXZlbCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsb3dlc3RTd2l0Y2hMZXZlbCA9IG1pbkF1dG9MZXZlbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBfdGhpcy5obHMubmV4dExvYWRMZXZlbCA9IF90aGlzLmhscy5uZXh0QXV0b0xldmVsID0gbG93ZXN0U3dpdGNoTGV2ZWw7XG4gICAgICAgICAgICAgIF90aGlzLnJlc2V0RXN0aW1hdG9yKF90aGlzLmhscy5sZXZlbHNbbG93ZXN0U3dpdGNoTGV2ZWxdLmJpdHJhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGZyYWdCbG9ja2luZ1N3aXRjaCB8fCBmcmFnTG9hZGVkRGVsYXkgPiBmcmFnTGV2ZWxOZXh0TG9hZGVkRGVsYXkgKiAyKSB7XG4gICAgICAgICAgYWJvcnRBbmRTd2l0Y2goKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy50aW1lciA9IHNlbGYuc2V0SW50ZXJ2YWwoYWJvcnRBbmRTd2l0Y2gsIGZyYWdMZXZlbE5leHRMb2FkZWREZWxheSAqIDEwMDApO1xuICAgICAgICB9XG4gICAgICAgIGhscy50cmlnZ2VyKEV2ZW50cy5GUkFHX0xPQURfRU1FUkdFTkNZX0FCT1JURUQsIHtcbiAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgIHBhcnQ6IHBhcnQsXG4gICAgICAgICAgc3RhdHM6IHN0YXRzXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIF90aGlzLmhscyA9IF9obHM7XG4gICAgICBfdGhpcy5id0VzdGltYXRvciA9IF90aGlzLmluaXRFc3RpbWF0b3IoKTtcbiAgICAgIF90aGlzLnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIF9pbmhlcml0c0xvb3NlKEFickNvbnRyb2xsZXIsIF9Mb2dnZXIpO1xuICAgIHZhciBfcHJvdG8gPSBBYnJDb250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ucmVzZXRFc3RpbWF0b3IgPSBmdW5jdGlvbiByZXNldEVzdGltYXRvcihhYnJFd21hRGVmYXVsdEVzdGltYXRlKSB7XG4gICAgICBpZiAoYWJyRXdtYURlZmF1bHRFc3RpbWF0ZSkge1xuICAgICAgICB0aGlzLmxvZyhcInNldHRpbmcgaW5pdGlhbCBid2UgdG8gXCIgKyBhYnJFd21hRGVmYXVsdEVzdGltYXRlKTtcbiAgICAgICAgdGhpcy5obHMuY29uZmlnLmFickV3bWFEZWZhdWx0RXN0aW1hdGUgPSBhYnJFd21hRGVmYXVsdEVzdGltYXRlO1xuICAgICAgfVxuICAgICAgdGhpcy5maXJzdFNlbGVjdGlvbiA9IC0xO1xuICAgICAgdGhpcy5id0VzdGltYXRvciA9IHRoaXMuaW5pdEVzdGltYXRvcigpO1xuICAgIH07XG4gICAgX3Byb3RvLmluaXRFc3RpbWF0b3IgPSBmdW5jdGlvbiBpbml0RXN0aW1hdG9yKCkge1xuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuaGxzLmNvbmZpZztcbiAgICAgIHJldHVybiBuZXcgRXdtYUJhbmRXaWR0aEVzdGltYXRvcihjb25maWcuYWJyRXdtYVNsb3dWb0QsIGNvbmZpZy5hYnJFd21hRmFzdFZvRCwgY29uZmlnLmFickV3bWFEZWZhdWx0RXN0aW1hdGUpO1xuICAgIH07XG4gICAgX3Byb3RvLnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICBobHMub24oRXZlbnRzLk1BTklGRVNUX0xPQURJTkcsIHRoaXMub25NYW5pZmVzdExvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5GUkFHX0xPQURJTkcsIHRoaXMub25GcmFnTG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkZSQUdfTE9BREVELCB0aGlzLm9uRnJhZ0xvYWRlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkZSQUdfQlVGRkVSRUQsIHRoaXMub25GcmFnQnVmZmVyZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5MRVZFTF9TV0lUQ0hJTkcsIHRoaXMub25MZXZlbFN3aXRjaGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkxFVkVMX0xPQURFRCwgdGhpcy5vbkxldmVsTG9hZGVkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTEVWRUxTX1VQREFURUQsIHRoaXMub25MZXZlbHNVcGRhdGVkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUFYX0FVVE9fTEVWRUxfVVBEQVRFRCwgdGhpcy5vbk1heEF1dG9MZXZlbFVwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5FUlJPUiwgdGhpcy5vbkVycm9yLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by51bnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGlmICghaGxzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGhscy5vZmYoRXZlbnRzLk1BTklGRVNUX0xPQURJTkcsIHRoaXMub25NYW5pZmVzdExvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRlJBR19MT0FESU5HLCB0aGlzLm9uRnJhZ0xvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRlJBR19MT0FERUQsIHRoaXMub25GcmFnTG9hZGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkZSQUdfQlVGRkVSRUQsIHRoaXMub25GcmFnQnVmZmVyZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTEVWRUxfU1dJVENISU5HLCB0aGlzLm9uTGV2ZWxTd2l0Y2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTEVWRUxfTE9BREVELCB0aGlzLm9uTGV2ZWxMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTEVWRUxTX1VQREFURUQsIHRoaXMub25MZXZlbHNVcGRhdGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1BWF9BVVRPX0xFVkVMX1VQREFURUQsIHRoaXMub25NYXhBdXRvTGV2ZWxVcGRhdGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkVSUk9SLCB0aGlzLm9uRXJyb3IsIHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy51bnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMuaGxzID0gdGhpcy5fYWJhbmRvblJ1bGVzQ2hlY2sgPSBudWxsO1xuICAgICAgdGhpcy5mcmFnQ3VycmVudCA9IHRoaXMucGFydEN1cnJlbnQgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTWFuaWZlc3RMb2FkaW5nID0gZnVuY3Rpb24gb25NYW5pZmVzdExvYWRpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMubGFzdExvYWRlZEZyYWdMZXZlbCA9IC0xO1xuICAgICAgdGhpcy5maXJzdFNlbGVjdGlvbiA9IC0xO1xuICAgICAgdGhpcy5sYXN0TGV2ZWxMb2FkU2VjID0gMDtcbiAgICAgIHRoaXMuZnJhZ0N1cnJlbnQgPSB0aGlzLnBhcnRDdXJyZW50ID0gbnVsbDtcbiAgICAgIHRoaXMub25MZXZlbHNVcGRhdGVkKCk7XG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICB9O1xuICAgIF9wcm90by5vbkxldmVsc1VwZGF0ZWQgPSBmdW5jdGlvbiBvbkxldmVsc1VwZGF0ZWQoKSB7XG4gICAgICBpZiAodGhpcy5sYXN0TG9hZGVkRnJhZ0xldmVsID4gLTEgJiYgdGhpcy5mcmFnQ3VycmVudCkge1xuICAgICAgICB0aGlzLmxhc3RMb2FkZWRGcmFnTGV2ZWwgPSB0aGlzLmZyYWdDdXJyZW50LmxldmVsO1xuICAgICAgfVxuICAgICAgdGhpcy5fbmV4dEF1dG9MZXZlbCA9IC0xO1xuICAgICAgdGhpcy5vbk1heEF1dG9MZXZlbFVwZGF0ZWQoKTtcbiAgICAgIHRoaXMuY29kZWNUaWVycyA9IG51bGw7XG4gICAgICB0aGlzLmF1ZGlvVHJhY2tzQnlHcm91cCA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NYXhBdXRvTGV2ZWxVcGRhdGVkID0gZnVuY3Rpb24gb25NYXhBdXRvTGV2ZWxVcGRhdGVkKCkge1xuICAgICAgdGhpcy5maXJzdFNlbGVjdGlvbiA9IC0xO1xuICAgICAgdGhpcy5uZXh0QXV0b0xldmVsS2V5ID0gJyc7XG4gICAgfTtcbiAgICBfcHJvdG8ub25GcmFnTG9hZGluZyA9IGZ1bmN0aW9uIG9uRnJhZ0xvYWRpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnO1xuICAgICAgaWYgKHRoaXMuaWdub3JlRnJhZ21lbnQoZnJhZykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFmcmFnLmJpdHJhdGVUZXN0KSB7XG4gICAgICAgIHZhciBfZGF0YSRwYXJ0O1xuICAgICAgICB0aGlzLmZyYWdDdXJyZW50ID0gZnJhZztcbiAgICAgICAgdGhpcy5wYXJ0Q3VycmVudCA9IChfZGF0YSRwYXJ0ID0gZGF0YS5wYXJ0KSAhPSBudWxsID8gX2RhdGEkcGFydCA6IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICAgIHRoaXMudGltZXIgPSBzZWxmLnNldEludGVydmFsKHRoaXMuX2FiYW5kb25SdWxlc0NoZWNrLCAxMDApO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTGV2ZWxTd2l0Y2hpbmcgPSBmdW5jdGlvbiBvbkxldmVsU3dpdGNoaW5nKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICB9O1xuICAgIF9wcm90by5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvcihldmVudCwgZGF0YSkge1xuICAgICAgaWYgKGRhdGEuZmF0YWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChkYXRhLmRldGFpbHMpIHtcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuQlVGRkVSX0FERF9DT0RFQ19FUlJPUjpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuQlVGRkVSX0FQUEVORF9FUlJPUjpcbiAgICAgICAgICAvLyBSZXNldCBsYXN0IGxvYWRlZCBsZXZlbCBzbyB0aGF0IGEgbmV3IHNlbGVjdGlvbiBjYW4gYmUgbWFkZSBhZnRlciBjYWxsaW5nIHJlY292ZXJNZWRpYUVycm9yXG4gICAgICAgICAgdGhpcy5sYXN0TG9hZGVkRnJhZ0xldmVsID0gLTE7XG4gICAgICAgICAgdGhpcy5maXJzdFNlbGVjdGlvbiA9IC0xO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5GUkFHX0xPQURfVElNRU9VVDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZztcbiAgICAgICAgICAgIHZhciBmcmFnQ3VycmVudCA9IHRoaXMuZnJhZ0N1cnJlbnQsXG4gICAgICAgICAgICAgIHBhcnQgPSB0aGlzLnBhcnRDdXJyZW50O1xuICAgICAgICAgICAgaWYgKGZyYWcgJiYgZnJhZ0N1cnJlbnQgJiYgZnJhZy5zbiA9PT0gZnJhZ0N1cnJlbnQuc24gJiYgZnJhZy5sZXZlbCA9PT0gZnJhZ0N1cnJlbnQubGV2ZWwpIHtcbiAgICAgICAgICAgICAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgICB2YXIgc3RhdHMgPSBwYXJ0ID8gcGFydC5zdGF0cyA6IGZyYWcuc3RhdHM7XG4gICAgICAgICAgICAgIHZhciB0aW1lTG9hZGluZyA9IG5vdyAtIHN0YXRzLmxvYWRpbmcuc3RhcnQ7XG4gICAgICAgICAgICAgIHZhciB0dGZiID0gc3RhdHMubG9hZGluZy5maXJzdCA/IHN0YXRzLmxvYWRpbmcuZmlyc3QgLSBzdGF0cy5sb2FkaW5nLnN0YXJ0IDogLTE7XG4gICAgICAgICAgICAgIHZhciBsb2FkZWRGaXJzdEJ5dGUgPSBzdGF0cy5sb2FkZWQgJiYgdHRmYiA+IC0xO1xuICAgICAgICAgICAgICBpZiAobG9hZGVkRmlyc3RCeXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHR0ZmJFc3RpbWF0ZSA9IHRoaXMuYndFc3RpbWF0b3IuZ2V0RXN0aW1hdGVUVEZCKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5id0VzdGltYXRvci5zYW1wbGUodGltZUxvYWRpbmcgLSBNYXRoLm1pbih0dGZiRXN0aW1hdGUsIHR0ZmIpLCBzdGF0cy5sb2FkZWQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYndFc3RpbWF0b3Iuc2FtcGxlVFRGQih0aW1lTG9hZGluZyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5nZXRUaW1lVG9Mb2FkRnJhZyA9IGZ1bmN0aW9uIGdldFRpbWVUb0xvYWRGcmFnKHRpbWVUb0ZpcnN0Qnl0ZVNlYywgYmFuZHdpZHRoLCBmcmFnU2l6ZUJpdHMsIGlzU3dpdGNoKSB7XG4gICAgICB2YXIgZnJhZ0xvYWRTZWMgPSB0aW1lVG9GaXJzdEJ5dGVTZWMgKyBmcmFnU2l6ZUJpdHMgLyBiYW5kd2lkdGg7XG4gICAgICB2YXIgcGxheWxpc3RMb2FkU2VjID0gaXNTd2l0Y2ggPyB0aW1lVG9GaXJzdEJ5dGVTZWMgKyB0aGlzLmxhc3RMZXZlbExvYWRTZWMgOiAwO1xuICAgICAgcmV0dXJuIGZyYWdMb2FkU2VjICsgcGxheWxpc3RMb2FkU2VjO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTGV2ZWxMb2FkZWQgPSBmdW5jdGlvbiBvbkxldmVsTG9hZGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5obHMuY29uZmlnO1xuICAgICAgdmFyIGxvYWRpbmcgPSBkYXRhLnN0YXRzLmxvYWRpbmc7XG4gICAgICB2YXIgdGltZUxvYWRpbmdNcyA9IGxvYWRpbmcuZW5kIC0gbG9hZGluZy5maXJzdDtcbiAgICAgIGlmIChpc0Zpbml0ZU51bWJlcih0aW1lTG9hZGluZ01zKSkge1xuICAgICAgICB0aGlzLmxhc3RMZXZlbExvYWRTZWMgPSB0aW1lTG9hZGluZ01zIC8gMTAwMDtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLmRldGFpbHMubGl2ZSkge1xuICAgICAgICB0aGlzLmJ3RXN0aW1hdG9yLnVwZGF0ZShjb25maWcuYWJyRXdtYVNsb3dMaXZlLCBjb25maWcuYWJyRXdtYUZhc3RMaXZlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYndFc3RpbWF0b3IudXBkYXRlKGNvbmZpZy5hYnJFd21hU2xvd1ZvRCwgY29uZmlnLmFickV3bWFGYXN0Vm9EKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnRpbWVyID4gLTEpIHtcbiAgICAgICAgdGhpcy5fYWJhbmRvblJ1bGVzQ2hlY2soZGF0YS5sZXZlbEluZm8pO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uRnJhZ0xvYWRlZCA9IGZ1bmN0aW9uIG9uRnJhZ0xvYWRlZChldmVudCwgX3JlZjIpIHtcbiAgICAgIHZhciBmcmFnID0gX3JlZjIuZnJhZyxcbiAgICAgICAgcGFydCA9IF9yZWYyLnBhcnQ7XG4gICAgICB2YXIgc3RhdHMgPSBwYXJ0ID8gcGFydC5zdGF0cyA6IGZyYWcuc3RhdHM7XG4gICAgICBpZiAoZnJhZy50eXBlID09PSBQbGF5bGlzdExldmVsVHlwZS5NQUlOKSB7XG4gICAgICAgIHRoaXMuYndFc3RpbWF0b3Iuc2FtcGxlVFRGQihzdGF0cy5sb2FkaW5nLmZpcnN0IC0gc3RhdHMubG9hZGluZy5zdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pZ25vcmVGcmFnbWVudChmcmFnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBzdG9wIG1vbml0b3JpbmcgYncgb25jZSBmcmFnIGxvYWRlZFxuICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XG4gICAgICAvLyByZXNldCBmb3JjZWQgYXV0byBsZXZlbCB2YWx1ZSBzbyB0aGF0IG5leHQgbGV2ZWwgd2lsbCBiZSBzZWxlY3RlZFxuICAgICAgaWYgKGZyYWcubGV2ZWwgPT09IHRoaXMuX25leHRBdXRvTGV2ZWwpIHtcbiAgICAgICAgdGhpcy5fbmV4dEF1dG9MZXZlbCA9IC0xO1xuICAgICAgfVxuICAgICAgdGhpcy5maXJzdFNlbGVjdGlvbiA9IC0xO1xuXG4gICAgICAvLyBjb21wdXRlIGxldmVsIGF2ZXJhZ2UgYml0cmF0ZVxuICAgICAgaWYgKHRoaXMuaGxzLmNvbmZpZy5hYnJNYXhXaXRoUmVhbEJpdHJhdGUpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gcGFydCA/IHBhcnQuZHVyYXRpb24gOiBmcmFnLmR1cmF0aW9uO1xuICAgICAgICB2YXIgbGV2ZWwgPSB0aGlzLmhscy5sZXZlbHNbZnJhZy5sZXZlbF07XG4gICAgICAgIHZhciBsb2FkZWRCeXRlcyA9IChsZXZlbC5sb2FkZWQgPyBsZXZlbC5sb2FkZWQuYnl0ZXMgOiAwKSArIHN0YXRzLmxvYWRlZDtcbiAgICAgICAgdmFyIGxvYWRlZER1cmF0aW9uID0gKGxldmVsLmxvYWRlZCA/IGxldmVsLmxvYWRlZC5kdXJhdGlvbiA6IDApICsgZHVyYXRpb247XG4gICAgICAgIGxldmVsLmxvYWRlZCA9IHtcbiAgICAgICAgICBieXRlczogbG9hZGVkQnl0ZXMsXG4gICAgICAgICAgZHVyYXRpb246IGxvYWRlZER1cmF0aW9uXG4gICAgICAgIH07XG4gICAgICAgIGxldmVsLnJlYWxCaXRyYXRlID0gTWF0aC5yb3VuZCg4ICogbG9hZGVkQnl0ZXMgLyBsb2FkZWREdXJhdGlvbik7XG4gICAgICB9XG4gICAgICBpZiAoZnJhZy5iaXRyYXRlVGVzdCkge1xuICAgICAgICB2YXIgZnJhZ0J1ZmZlcmVkRGF0YSA9IHtcbiAgICAgICAgICBzdGF0czogc3RhdHMsXG4gICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICBwYXJ0OiBwYXJ0LFxuICAgICAgICAgIGlkOiBmcmFnLnR5cGVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkZyYWdCdWZmZXJlZChFdmVudHMuRlJBR19CVUZGRVJFRCwgZnJhZ0J1ZmZlcmVkRGF0YSk7XG4gICAgICAgIGZyYWcuYml0cmF0ZVRlc3QgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHN0b3JlIGxldmVsIGlkIGFmdGVyIHN1Y2Nlc3NmdWwgZnJhZ21lbnQgbG9hZCBmb3IgcGxheWJhY2tcbiAgICAgICAgdGhpcy5sYXN0TG9hZGVkRnJhZ0xldmVsID0gZnJhZy5sZXZlbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkZyYWdCdWZmZXJlZCA9IGZ1bmN0aW9uIG9uRnJhZ0J1ZmZlcmVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZyxcbiAgICAgICAgcGFydCA9IGRhdGEucGFydDtcbiAgICAgIHZhciBzdGF0cyA9IHBhcnQgIT0gbnVsbCAmJiBwYXJ0LnN0YXRzLmxvYWRlZCA/IHBhcnQuc3RhdHMgOiBmcmFnLnN0YXRzO1xuICAgICAgaWYgKHN0YXRzLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaWdub3JlRnJhZ21lbnQoZnJhZykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gcGFyc2luZyBhbmQgcmVxdWVzdCBpbnN0ZWFkIG9mIGJ1ZmZlcmluZyBhbmQgcmVxdWVzdCB0byBjb21wdXRlIGZyYWdMb2FkaW5nUHJvY2Vzc2luZztcbiAgICAgIC8vIHJhdGlvbmFsZSBpcyB0aGF0IGJ1ZmZlciBhcHBlbmRpbmcgb25seSBoYXBwZW5zIG9uY2UgbWVkaWEgaXMgYXR0YWNoZWQuIFRoaXMgY2FuIGhhcHBlbiB3aGVuIGNvbmZpZy5zdGFydEZyYWdQcmVmZXRjaFxuICAgICAgLy8gaXMgdXNlZC4gSWYgd2UgdXNlZCBidWZmZXJpbmcgaW4gdGhhdCBjYXNlLCBvdXIgQlcgZXN0aW1hdGUgc2FtcGxlIHdpbGwgYmUgdmVyeSBsYXJnZS5cbiAgICAgIHZhciBwcm9jZXNzaW5nTXMgPSBzdGF0cy5wYXJzaW5nLmVuZCAtIHN0YXRzLmxvYWRpbmcuc3RhcnQgLSBNYXRoLm1pbihzdGF0cy5sb2FkaW5nLmZpcnN0IC0gc3RhdHMubG9hZGluZy5zdGFydCwgdGhpcy5id0VzdGltYXRvci5nZXRFc3RpbWF0ZVRURkIoKSk7XG4gICAgICB0aGlzLmJ3RXN0aW1hdG9yLnNhbXBsZShwcm9jZXNzaW5nTXMsIHN0YXRzLmxvYWRlZCk7XG4gICAgICBzdGF0cy5id0VzdGltYXRlID0gdGhpcy5nZXRCd0VzdGltYXRlKCk7XG4gICAgICBpZiAoZnJhZy5iaXRyYXRlVGVzdCkge1xuICAgICAgICB0aGlzLmJpdHJhdGVUZXN0RGVsYXkgPSBwcm9jZXNzaW5nTXMgLyAxMDAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5iaXRyYXRlVGVzdERlbGF5ID0gMDtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5pZ25vcmVGcmFnbWVudCA9IGZ1bmN0aW9uIGlnbm9yZUZyYWdtZW50KGZyYWcpIHtcbiAgICAgIC8vIE9ubHkgY291bnQgbm9uLWFsdC1hdWRpbyBmcmFncyB3aGljaCB3ZXJlIGFjdHVhbGx5IGJ1ZmZlcmVkIGluIG91ciBCVyBjYWxjdWxhdGlvbnNcbiAgICAgIHJldHVybiBmcmFnLnR5cGUgIT09IFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU4gfHwgZnJhZy5zbiA9PT0gJ2luaXRTZWdtZW50JztcbiAgICB9O1xuICAgIF9wcm90by5jbGVhclRpbWVyID0gZnVuY3Rpb24gY2xlYXJUaW1lcigpIHtcbiAgICAgIGlmICh0aGlzLnRpbWVyID4gLTEpIHtcbiAgICAgICAgc2VsZi5jbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgICAgICB0aGlzLnRpbWVyID0gLTE7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0QXV0b0xldmVsS2V5ID0gZnVuY3Rpb24gZ2V0QXV0b0xldmVsS2V5KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QndFc3RpbWF0ZSgpICsgXCJfXCIgKyB0aGlzLmdldFN0YXJ2YXRpb25EZWxheSgpLnRvRml4ZWQoMik7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0TmV4dEFCUkF1dG9MZXZlbCA9IGZ1bmN0aW9uIGdldE5leHRBQlJBdXRvTGV2ZWwoKSB7XG4gICAgICB2YXIgZnJhZ0N1cnJlbnQgPSB0aGlzLmZyYWdDdXJyZW50LFxuICAgICAgICBwYXJ0Q3VycmVudCA9IHRoaXMucGFydEN1cnJlbnQsXG4gICAgICAgIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaWYgKGhscy5sZXZlbHMubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIGhscy5sb2FkTGV2ZWw7XG4gICAgICB9XG4gICAgICB2YXIgbWF4QXV0b0xldmVsID0gaGxzLm1heEF1dG9MZXZlbCxcbiAgICAgICAgY29uZmlnID0gaGxzLmNvbmZpZyxcbiAgICAgICAgbWluQXV0b0xldmVsID0gaGxzLm1pbkF1dG9MZXZlbDtcbiAgICAgIHZhciBjdXJyZW50RnJhZ0R1cmF0aW9uID0gcGFydEN1cnJlbnQgPyBwYXJ0Q3VycmVudC5kdXJhdGlvbiA6IGZyYWdDdXJyZW50ID8gZnJhZ0N1cnJlbnQuZHVyYXRpb24gOiAwO1xuICAgICAgdmFyIGF2Z2J3ID0gdGhpcy5nZXRCd0VzdGltYXRlKCk7XG4gICAgICAvLyBidWZmZXJTdGFydmF0aW9uRGVsYXkgaXMgdGhlIHdhbGwtY2xvY2sgdGltZSBsZWZ0IHVudGlsIHRoZSBwbGF5YmFjayBidWZmZXIgaXMgZXhoYXVzdGVkLlxuICAgICAgdmFyIGJ1ZmZlclN0YXJ2YXRpb25EZWxheSA9IHRoaXMuZ2V0U3RhcnZhdGlvbkRlbGF5KCk7XG4gICAgICB2YXIgYndGYWN0b3IgPSBjb25maWcuYWJyQmFuZFdpZHRoRmFjdG9yO1xuICAgICAgdmFyIGJ3VXBGYWN0b3IgPSBjb25maWcuYWJyQmFuZFdpZHRoVXBGYWN0b3I7XG5cbiAgICAgIC8vIEZpcnN0LCBsb29rIHRvIHNlZSBpZiB3ZSBjYW4gZmluZCBhIGxldmVsIG1hdGNoaW5nIHdpdGggb3VyIGF2ZyBiYW5kd2lkdGggQU5EIHRoYXQgY291bGQgYWxzbyBndWFyYW50ZWUgbm8gcmVidWZmZXJpbmcgYXQgYWxsXG4gICAgICBpZiAoYnVmZmVyU3RhcnZhdGlvbkRlbGF5KSB7XG4gICAgICAgIHZhciBfYmVzdExldmVsID0gdGhpcy5maW5kQmVzdExldmVsKGF2Z2J3LCBtaW5BdXRvTGV2ZWwsIG1heEF1dG9MZXZlbCwgYnVmZmVyU3RhcnZhdGlvbkRlbGF5LCAwLCBid0ZhY3RvciwgYndVcEZhY3Rvcik7XG4gICAgICAgIGlmIChfYmVzdExldmVsID49IDApIHtcbiAgICAgICAgICB0aGlzLnJlYnVmZmVyTm90aWNlID0gLTE7XG4gICAgICAgICAgcmV0dXJuIF9iZXN0TGV2ZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIG5vdCBwb3NzaWJsZSB0byBnZXQgcmlkIG9mIHJlYnVmZmVyaW5nLi4uIHRyeSB0byBmaW5kIGxldmVsIHRoYXQgd2lsbCBndWFyYW50ZWUgbGVzcyB0aGFuIG1heFN0YXJ2YXRpb25EZWxheSBvZiByZWJ1ZmZlcmluZ1xuICAgICAgdmFyIG1heFN0YXJ2YXRpb25EZWxheSA9IGN1cnJlbnRGcmFnRHVyYXRpb24gPyBNYXRoLm1pbihjdXJyZW50RnJhZ0R1cmF0aW9uLCBjb25maWcubWF4U3RhcnZhdGlvbkRlbGF5KSA6IGNvbmZpZy5tYXhTdGFydmF0aW9uRGVsYXk7XG4gICAgICBpZiAoIWJ1ZmZlclN0YXJ2YXRpb25EZWxheSkge1xuICAgICAgICAvLyBpbiBjYXNlIGJ1ZmZlciBpcyBlbXB0eSwgbGV0J3MgY2hlY2sgaWYgcHJldmlvdXMgZnJhZ21lbnQgd2FzIGxvYWRlZCB0byBwZXJmb3JtIGEgYml0cmF0ZSB0ZXN0XG4gICAgICAgIHZhciBiaXRyYXRlVGVzdERlbGF5ID0gdGhpcy5iaXRyYXRlVGVzdERlbGF5O1xuICAgICAgICBpZiAoYml0cmF0ZVRlc3REZWxheSkge1xuICAgICAgICAgIC8vIGlmIGl0IGlzIHRoZSBjYXNlLCB0aGVuIHdlIG5lZWQgdG8gYWRqdXN0IG91ciBtYXggc3RhcnZhdGlvbiBkZWxheSB1c2luZyBtYXhMb2FkaW5nRGVsYXkgY29uZmlnIHZhbHVlXG4gICAgICAgICAgLy8gbWF4IHZpZGVvIGxvYWRpbmcgZGVsYXkgdXNlZCBpbiAgYXV0b21hdGljIHN0YXJ0IGxldmVsIHNlbGVjdGlvbiA6XG4gICAgICAgICAgLy8gaW4gdGhhdCBtb2RlIEFCUiBjb250cm9sbGVyIHdpbGwgZW5zdXJlIHRoYXQgdmlkZW8gbG9hZGluZyB0aW1lIChpZSB0aGUgdGltZSB0byBmZXRjaCB0aGUgZmlyc3QgZnJhZ21lbnQgYXQgbG93ZXN0IHF1YWxpdHkgbGV2ZWwgK1xuICAgICAgICAgIC8vIHRoZSB0aW1lIHRvIGZldGNoIHRoZSBmcmFnbWVudCBhdCB0aGUgYXBwcm9wcmlhdGUgcXVhbGl0eSBsZXZlbCBpcyBsZXNzIHRoYW4gYGBgbWF4TG9hZGluZ0RlbGF5YGBgIClcbiAgICAgICAgICAvLyBjYXAgbWF4TG9hZGluZ0RlbGF5IGFuZCBlbnN1cmUgaXQgaXMgbm90IGJpZ2dlciAndGhhbiBiaXRyYXRlIHRlc3QnIGZyYWcgZHVyYXRpb25cbiAgICAgICAgICB2YXIgbWF4TG9hZGluZ0RlbGF5ID0gY3VycmVudEZyYWdEdXJhdGlvbiA/IE1hdGgubWluKGN1cnJlbnRGcmFnRHVyYXRpb24sIGNvbmZpZy5tYXhMb2FkaW5nRGVsYXkpIDogY29uZmlnLm1heExvYWRpbmdEZWxheTtcbiAgICAgICAgICBtYXhTdGFydmF0aW9uRGVsYXkgPSBtYXhMb2FkaW5nRGVsYXkgLSBiaXRyYXRlVGVzdERlbGF5O1xuICAgICAgICAgIHRoaXMuaW5mbyhcImJpdHJhdGUgdGVzdCB0b29rIFwiICsgTWF0aC5yb3VuZCgxMDAwICogYml0cmF0ZVRlc3REZWxheSkgKyBcIm1zLCBzZXQgZmlyc3QgZnJhZ21lbnQgbWF4IGZldGNoRHVyYXRpb24gdG8gXCIgKyBNYXRoLnJvdW5kKDEwMDAgKiBtYXhTdGFydmF0aW9uRGVsYXkpICsgXCIgbXNcIik7XG4gICAgICAgICAgLy8gZG9uJ3QgdXNlIGNvbnNlcnZhdGl2ZSBmYWN0b3Igb24gYml0cmF0ZSB0ZXN0XG4gICAgICAgICAgYndGYWN0b3IgPSBid1VwRmFjdG9yID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGJlc3RMZXZlbCA9IHRoaXMuZmluZEJlc3RMZXZlbChhdmdidywgbWluQXV0b0xldmVsLCBtYXhBdXRvTGV2ZWwsIGJ1ZmZlclN0YXJ2YXRpb25EZWxheSwgbWF4U3RhcnZhdGlvbkRlbGF5LCBid0ZhY3RvciwgYndVcEZhY3Rvcik7XG4gICAgICBpZiAodGhpcy5yZWJ1ZmZlck5vdGljZSAhPT0gYmVzdExldmVsKSB7XG4gICAgICAgIHRoaXMucmVidWZmZXJOb3RpY2UgPSBiZXN0TGV2ZWw7XG4gICAgICAgIHRoaXMuaW5mbygoYnVmZmVyU3RhcnZhdGlvbkRlbGF5ID8gJ3JlYnVmZmVyaW5nIGV4cGVjdGVkJyA6ICdidWZmZXIgaXMgZW1wdHknKSArIFwiLCBvcHRpbWFsIHF1YWxpdHkgbGV2ZWwgXCIgKyBiZXN0TGV2ZWwpO1xuICAgICAgfVxuICAgICAgaWYgKGJlc3RMZXZlbCA+IC0xKSB7XG4gICAgICAgIHJldHVybiBiZXN0TGV2ZWw7XG4gICAgICB9XG4gICAgICAvLyBJZiBubyBtYXRjaGluZyBsZXZlbCBmb3VuZCwgc2VlIGlmIG1pbiBhdXRvIGxldmVsIHdvdWxkIGJlIGEgYmV0dGVyIG9wdGlvblxuICAgICAgdmFyIG1pbkxldmVsID0gaGxzLmxldmVsc1ttaW5BdXRvTGV2ZWxdO1xuICAgICAgdmFyIGF1dG9MZXZlbCA9IGhscy5sb2FkTGV2ZWxPYmo7XG4gICAgICBpZiAoYXV0b0xldmVsICYmIChtaW5MZXZlbCA9PSBudWxsID8gdm9pZCAwIDogbWluTGV2ZWwuYml0cmF0ZSkgPCBhdXRvTGV2ZWwuYml0cmF0ZSkge1xuICAgICAgICByZXR1cm4gbWluQXV0b0xldmVsO1xuICAgICAgfVxuICAgICAgLy8gb3IgaWYgYml0cmF0ZSBpcyBub3QgbG93ZXIsIGNvbnRpbnVlIHRvIHVzZSBsb2FkTGV2ZWxcbiAgICAgIHJldHVybiBobHMubG9hZExldmVsO1xuICAgIH07XG4gICAgX3Byb3RvLmdldFN0YXJ2YXRpb25EZWxheSA9IGZ1bmN0aW9uIGdldFN0YXJ2YXRpb25EZWxheSgpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIHZhciBtZWRpYSA9IGhscy5tZWRpYTtcbiAgICAgIGlmICghbWVkaWEpIHtcbiAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgICAgfVxuICAgICAgLy8gcGxheWJhY2tSYXRlIGlzIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGUgcGxheWJhY2sgcmF0ZTsgaWYgbWVkaWEucGxheWJhY2tSYXRlIGlzIDAsIHdlIHVzZSAxIHRvIGxvYWQgYXNcbiAgICAgIC8vIGlmIHdlJ3JlIHBsYXlpbmcgYmFjayBhdCB0aGUgbm9ybWFsIHJhdGUuXG4gICAgICB2YXIgcGxheWJhY2tSYXRlID0gbWVkaWEgJiYgbWVkaWEucGxheWJhY2tSYXRlICE9PSAwID8gTWF0aC5hYnMobWVkaWEucGxheWJhY2tSYXRlKSA6IDEuMDtcbiAgICAgIHZhciBidWZmZXJJbmZvID0gaGxzLm1haW5Gb3J3YXJkQnVmZmVySW5mbztcbiAgICAgIHJldHVybiAoYnVmZmVySW5mbyA/IGJ1ZmZlckluZm8ubGVuIDogMCkgLyBwbGF5YmFja1JhdGU7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0QndFc3RpbWF0ZSA9IGZ1bmN0aW9uIGdldEJ3RXN0aW1hdGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5id0VzdGltYXRvci5jYW5Fc3RpbWF0ZSgpID8gdGhpcy5id0VzdGltYXRvci5nZXRFc3RpbWF0ZSgpIDogdGhpcy5obHMuY29uZmlnLmFickV3bWFEZWZhdWx0RXN0aW1hdGU7XG4gICAgfTtcbiAgICBfcHJvdG8uZmluZEJlc3RMZXZlbCA9IGZ1bmN0aW9uIGZpbmRCZXN0TGV2ZWwoY3VycmVudEJ3LCBtaW5BdXRvTGV2ZWwsIG1heEF1dG9MZXZlbCwgYnVmZmVyU3RhcnZhdGlvbkRlbGF5LCBtYXhTdGFydmF0aW9uRGVsYXksIGJ3RmFjdG9yLCBid1VwRmFjdG9yKSB7XG4gICAgICB2YXIgX3RoaXMkaGxzJGxhdGVzdExldmVsLFxuICAgICAgICBfdGhpczMgPSB0aGlzO1xuICAgICAgdmFyIG1heEZldGNoRHVyYXRpb24gPSBidWZmZXJTdGFydmF0aW9uRGVsYXkgKyBtYXhTdGFydmF0aW9uRGVsYXk7XG4gICAgICB2YXIgbGFzdExvYWRlZEZyYWdMZXZlbCA9IHRoaXMubGFzdExvYWRlZEZyYWdMZXZlbDtcbiAgICAgIHZhciBzZWxlY3Rpb25CYXNlTGV2ZWwgPSBsYXN0TG9hZGVkRnJhZ0xldmVsID09PSAtMSA/IHRoaXMuaGxzLmZpcnN0TGV2ZWwgOiBsYXN0TG9hZGVkRnJhZ0xldmVsO1xuICAgICAgdmFyIGZyYWdDdXJyZW50ID0gdGhpcy5mcmFnQ3VycmVudCxcbiAgICAgICAgcGFydEN1cnJlbnQgPSB0aGlzLnBhcnRDdXJyZW50O1xuICAgICAgdmFyIF90aGlzJGhscyA9IHRoaXMuaGxzLFxuICAgICAgICBsZXZlbHMgPSBfdGhpcyRobHMubGV2ZWxzLFxuICAgICAgICBhbGxBdWRpb1RyYWNrcyA9IF90aGlzJGhscy5hbGxBdWRpb1RyYWNrcyxcbiAgICAgICAgbG9hZExldmVsID0gX3RoaXMkaGxzLmxvYWRMZXZlbCxcbiAgICAgICAgY29uZmlnID0gX3RoaXMkaGxzLmNvbmZpZztcbiAgICAgIGlmIChsZXZlbHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgdmFyIGxldmVsID0gbGV2ZWxzW3NlbGVjdGlvbkJhc2VMZXZlbF07XG4gICAgICB2YXIgbGl2ZSA9ICEhKChfdGhpcyRobHMkbGF0ZXN0TGV2ZWwgPSB0aGlzLmhscy5sYXRlc3RMZXZlbERldGFpbHMpICE9IG51bGwgJiYgX3RoaXMkaGxzJGxhdGVzdExldmVsLmxpdmUpO1xuICAgICAgdmFyIGZpcnN0U2VsZWN0aW9uID0gbG9hZExldmVsID09PSAtMSB8fCBsYXN0TG9hZGVkRnJhZ0xldmVsID09PSAtMTtcbiAgICAgIHZhciBjdXJyZW50Q29kZWNTZXQ7XG4gICAgICB2YXIgY3VycmVudFZpZGVvUmFuZ2UgPSAnU0RSJztcbiAgICAgIHZhciBjdXJyZW50RnJhbWVSYXRlID0gKGxldmVsID09IG51bGwgPyB2b2lkIDAgOiBsZXZlbC5mcmFtZVJhdGUpIHx8IDA7XG4gICAgICB2YXIgYXVkaW9QcmVmZXJlbmNlID0gY29uZmlnLmF1ZGlvUHJlZmVyZW5jZSxcbiAgICAgICAgdmlkZW9QcmVmZXJlbmNlID0gY29uZmlnLnZpZGVvUHJlZmVyZW5jZTtcbiAgICAgIHZhciBhdWRpb1RyYWNrc0J5R3JvdXAgPSB0aGlzLmF1ZGlvVHJhY2tzQnlHcm91cCB8fCAodGhpcy5hdWRpb1RyYWNrc0J5R3JvdXAgPSBnZXRBdWRpb1RyYWNrc0J5R3JvdXAoYWxsQXVkaW9UcmFja3MpKTtcbiAgICAgIHZhciBtaW5TdGFydEluZGV4ID0gLTE7XG4gICAgICBpZiAoZmlyc3RTZWxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuZmlyc3RTZWxlY3Rpb24gIT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3RTZWxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvZGVjVGllcnMgPSB0aGlzLmNvZGVjVGllcnMgfHwgKHRoaXMuY29kZWNUaWVycyA9IGdldENvZGVjVGllcnMobGV2ZWxzLCBhdWRpb1RyYWNrc0J5R3JvdXAsIG1pbkF1dG9MZXZlbCwgbWF4QXV0b0xldmVsKSk7XG4gICAgICAgIHZhciBzdGFydFRpZXIgPSBnZXRTdGFydENvZGVjVGllcihjb2RlY1RpZXJzLCBjdXJyZW50VmlkZW9SYW5nZSwgY3VycmVudEJ3LCBhdWRpb1ByZWZlcmVuY2UsIHZpZGVvUHJlZmVyZW5jZSk7XG4gICAgICAgIHZhciBjb2RlY1NldCA9IHN0YXJ0VGllci5jb2RlY1NldCxcbiAgICAgICAgICB2aWRlb1JhbmdlcyA9IHN0YXJ0VGllci52aWRlb1JhbmdlcyxcbiAgICAgICAgICBtaW5GcmFtZXJhdGUgPSBzdGFydFRpZXIubWluRnJhbWVyYXRlLFxuICAgICAgICAgIG1pbkJpdHJhdGUgPSBzdGFydFRpZXIubWluQml0cmF0ZSxcbiAgICAgICAgICBtaW5JbmRleCA9IHN0YXJ0VGllci5taW5JbmRleCxcbiAgICAgICAgICBwcmVmZXJIRFIgPSBzdGFydFRpZXIucHJlZmVySERSO1xuICAgICAgICBtaW5TdGFydEluZGV4ID0gbWluSW5kZXg7XG4gICAgICAgIGN1cnJlbnRDb2RlY1NldCA9IGNvZGVjU2V0O1xuICAgICAgICBjdXJyZW50VmlkZW9SYW5nZSA9IHByZWZlckhEUiA/IHZpZGVvUmFuZ2VzW3ZpZGVvUmFuZ2VzLmxlbmd0aCAtIDFdIDogdmlkZW9SYW5nZXNbMF07XG4gICAgICAgIGN1cnJlbnRGcmFtZVJhdGUgPSBtaW5GcmFtZXJhdGU7XG4gICAgICAgIGN1cnJlbnRCdyA9IE1hdGgubWF4KGN1cnJlbnRCdywgbWluQml0cmF0ZSk7XG4gICAgICAgIHRoaXMubG9nKFwicGlja2VkIHN0YXJ0IHRpZXIgXCIgKyBzdHJpbmdpZnkoc3RhcnRUaWVyKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50Q29kZWNTZXQgPSBsZXZlbCA9PSBudWxsID8gdm9pZCAwIDogbGV2ZWwuY29kZWNTZXQ7XG4gICAgICAgIGN1cnJlbnRWaWRlb1JhbmdlID0gbGV2ZWwgPT0gbnVsbCA/IHZvaWQgMCA6IGxldmVsLnZpZGVvUmFuZ2U7XG4gICAgICB9XG4gICAgICB2YXIgY3VycmVudEZyYWdEdXJhdGlvbiA9IHBhcnRDdXJyZW50ID8gcGFydEN1cnJlbnQuZHVyYXRpb24gOiBmcmFnQ3VycmVudCA/IGZyYWdDdXJyZW50LmR1cmF0aW9uIDogMDtcbiAgICAgIHZhciB0dGZiRXN0aW1hdGVTZWMgPSB0aGlzLmJ3RXN0aW1hdG9yLmdldEVzdGltYXRlVFRGQigpIC8gMTAwMDtcbiAgICAgIHZhciBsZXZlbHNTa2lwcGVkID0gW107XG4gICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICAgICAgICB2YXIgX2xldmVsSW5mbyRzdXBwb3J0ZWRSO1xuICAgICAgICAgIHZhciBsZXZlbEluZm8gPSBsZXZlbHNbaV07XG4gICAgICAgICAgdmFyIHVwU3dpdGNoID0gaSA+IHNlbGVjdGlvbkJhc2VMZXZlbDtcbiAgICAgICAgICBpZiAoIWxldmVsSW5mbykge1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb25maWcudXNlTWVkaWFDYXBhYmlsaXRpZXMgJiYgIWxldmVsSW5mby5zdXBwb3J0ZWRSZXN1bHQgJiYgIWxldmVsSW5mby5zdXBwb3J0ZWRQcm9taXNlKSB7XG4gICAgICAgICAgICB2YXIgbWVkaWFDYXBhYmlsaXRpZXMgPSBuYXZpZ2F0b3IubWVkaWFDYXBhYmlsaXRpZXM7XG4gICAgICAgICAgICBpZiAodHlwZW9mIChtZWRpYUNhcGFiaWxpdGllcyA9PSBudWxsID8gdm9pZCAwIDogbWVkaWFDYXBhYmlsaXRpZXMuZGVjb2RpbmdJbmZvKSA9PT0gJ2Z1bmN0aW9uJyAmJiAocmVxdWlyZXNNZWRpYUNhcGFiaWxpdGllc0RlY29kaW5nSW5mbyhsZXZlbEluZm8sIGF1ZGlvVHJhY2tzQnlHcm91cCwgY3VycmVudFZpZGVvUmFuZ2UsIGN1cnJlbnRGcmFtZVJhdGUsIGN1cnJlbnRCdywgYXVkaW9QcmVmZXJlbmNlKSB8fCBpc0hFVkMobGV2ZWxJbmZvLnZpZGVvQ29kZWMpKSAvLyBGb3JjZSBtZWRpYSBjYXBhYmlsaXRpZXMgY2hlY2sgZm9yIEhFVkMgdG8gYXZvaWQgZmFpbHVyZSBvbiBXaW5kb3dzXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgbGV2ZWxJbmZvLnN1cHBvcnRlZFByb21pc2UgPSBnZXRNZWRpYURlY29kaW5nSW5mb1Byb21pc2UobGV2ZWxJbmZvLCBhdWRpb1RyYWNrc0J5R3JvdXAsIG1lZGlhQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICAgICAgbGV2ZWxJbmZvLnN1cHBvcnRlZFByb21pc2UudGhlbihmdW5jdGlvbiAoZGVjb2RpbmdJbmZvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpczMuaGxzKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldmVsSW5mby5zdXBwb3J0ZWRSZXN1bHQgPSBkZWNvZGluZ0luZm87XG4gICAgICAgICAgICAgICAgdmFyIGxldmVscyA9IF90aGlzMy5obHMubGV2ZWxzO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGxldmVscy5pbmRleE9mKGxldmVsSW5mbyk7XG4gICAgICAgICAgICAgICAgaWYgKGRlY29kaW5nSW5mby5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgX3RoaXMzLndhcm4oXCJNZWRpYUNhcGFiaWxpdGllcyBkZWNvZGluZ0luZm8gZXJyb3I6IFxcXCJcIiArIGRlY29kaW5nSW5mby5lcnJvciArIFwiXFxcIiBmb3IgbGV2ZWwgXCIgKyBpbmRleCArIFwiIFwiICsgc3RyaW5naWZ5KGRlY29kaW5nSW5mbykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRlY29kaW5nSW5mby5zdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzMy53YXJuKFwiVW5zdXBwb3J0ZWQgTWVkaWFDYXBhYmlsaXRpZXMgZGVjb2RpbmdJbmZvIHJlc3VsdCBmb3IgbGV2ZWwgXCIgKyBpbmRleCArIFwiIFwiICsgc3RyaW5naWZ5KGRlY29kaW5nSW5mbykpO1xuICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEgJiYgbGV2ZWxzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmxvZyhcIlJlbW92aW5nIHVuc3VwcG9ydGVkIGxldmVsIFwiICsgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpczMuaGxzLnJlbW92ZUxldmVsKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMy5obHMubG9hZExldmVsID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy5obHMubmV4dExvYWRMZXZlbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGV2ZWxJbmZvLnN1cHBvcnRlZFJlc3VsdCA9IFNVUFBPUlRFRF9JTkZPX0RFRkFVTFQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gc2tpcCBjYW5kaWRhdGVzIHdoaWNoIGNoYW5nZSBjb2RlYy1mYW1pbHkgb3IgdmlkZW8tcmFuZ2UsXG4gICAgICAgICAgLy8gYW5kIHdoaWNoIGRlY3JlYXNlIG9yIGluY3JlYXNlIGZyYW1lLXJhdGUgZm9yIHVwIGFuZCBkb3duLXN3aXRjaCByZXNwZWN0ZnVsbHlcbiAgICAgICAgICBpZiAoY3VycmVudENvZGVjU2V0ICYmIGxldmVsSW5mby5jb2RlY1NldCAhPT0gY3VycmVudENvZGVjU2V0IHx8IGN1cnJlbnRWaWRlb1JhbmdlICYmIGxldmVsSW5mby52aWRlb1JhbmdlICE9PSBjdXJyZW50VmlkZW9SYW5nZSB8fCB1cFN3aXRjaCAmJiBjdXJyZW50RnJhbWVSYXRlID4gbGV2ZWxJbmZvLmZyYW1lUmF0ZSB8fCAhdXBTd2l0Y2ggJiYgY3VycmVudEZyYW1lUmF0ZSA+IDAgJiYgY3VycmVudEZyYW1lUmF0ZSA8IGxldmVsSW5mby5mcmFtZVJhdGUgfHwgbGV2ZWxJbmZvLnN1cHBvcnRlZFJlc3VsdCAmJiAhKChfbGV2ZWxJbmZvJHN1cHBvcnRlZFIgPSBsZXZlbEluZm8uc3VwcG9ydGVkUmVzdWx0LmRlY29kaW5nSW5mb1Jlc3VsdHMpICE9IG51bGwgJiYgX2xldmVsSW5mbyRzdXBwb3J0ZWRSWzBdLnNtb290aCkpIHtcbiAgICAgICAgICAgIGlmICghZmlyc3RTZWxlY3Rpb24gfHwgaSAhPT0gbWluU3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICBsZXZlbHNTa2lwcGVkLnB1c2goaSk7XG4gICAgICAgICAgICAgIHJldHVybiAwOyAvLyBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbGV2ZWxEZXRhaWxzID0gbGV2ZWxJbmZvLmRldGFpbHM7XG4gICAgICAgICAgdmFyIGF2Z0R1cmF0aW9uID0gKHBhcnRDdXJyZW50ID8gbGV2ZWxEZXRhaWxzID09IG51bGwgPyB2b2lkIDAgOiBsZXZlbERldGFpbHMucGFydFRhcmdldCA6IGxldmVsRGV0YWlscyA9PSBudWxsID8gdm9pZCAwIDogbGV2ZWxEZXRhaWxzLmF2ZXJhZ2V0YXJnZXRkdXJhdGlvbikgfHwgY3VycmVudEZyYWdEdXJhdGlvbjtcbiAgICAgICAgICB2YXIgYWRqdXN0ZWRidztcbiAgICAgICAgICAvLyBmb2xsb3cgYWxnb3JpdGhtIGNhcHR1cmVkIGZyb20gc3RhZ2VmcmlnaHQgOlxuICAgICAgICAgIC8vIGh0dHBzOi8vYW5kcm9pZC5nb29nbGVzb3VyY2UuY29tL3BsYXRmb3JtL2ZyYW1ld29ya3MvYXYvKy9tYXN0ZXIvbWVkaWEvbGlic3RhZ2VmcmlnaHQvaHR0cGxpdmUvTGl2ZVNlc3Npb24uY3BwXG4gICAgICAgICAgLy8gUGljayB0aGUgaGlnaGVzdCBiYW5kd2lkdGggc3RyZWFtIGJlbG93IG9yIGVxdWFsIHRvIGVzdGltYXRlZCBiYW5kd2lkdGguXG4gICAgICAgICAgLy8gY29uc2lkZXIgb25seSA4MCUgb2YgdGhlIGF2YWlsYWJsZSBiYW5kd2lkdGgsIGJ1dCBpZiB3ZSBhcmUgc3dpdGNoaW5nIHVwLFxuICAgICAgICAgIC8vIGJlIGV2ZW4gbW9yZSBjb25zZXJ2YXRpdmUgKDcwJSkgdG8gYXZvaWQgb3ZlcmVzdGltYXRpbmcgYW5kIGltbWVkaWF0ZWx5XG4gICAgICAgICAgLy8gc3dpdGNoaW5nIGJhY2suXG4gICAgICAgICAgaWYgKCF1cFN3aXRjaCkge1xuICAgICAgICAgICAgYWRqdXN0ZWRidyA9IGJ3RmFjdG9yICogY3VycmVudEJ3O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhZGp1c3RlZGJ3ID0gYndVcEZhY3RvciAqIGN1cnJlbnRCdztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBVc2UgYXZlcmFnZSBiaXRyYXRlIHdoZW4gc3RhcnZhdGlvbiBkZWxheSAoYnVmZmVyIGxlbmd0aCkgaXMgZ3Qgb3IgZXEgdHdvIHNlZ21lbnQgZHVyYXRpb25zIGFuZCByZWJ1ZmZlcmluZyBpcyBub3QgZXhwZWN0ZWQgKG1heFN0YXJ2YXRpb25EZWxheSA+IDApXG4gICAgICAgICAgdmFyIGJpdHJhdGUgPSBjdXJyZW50RnJhZ0R1cmF0aW9uICYmIGJ1ZmZlclN0YXJ2YXRpb25EZWxheSA+PSBjdXJyZW50RnJhZ0R1cmF0aW9uICogMiAmJiBtYXhTdGFydmF0aW9uRGVsYXkgPT09IDAgPyBsZXZlbEluZm8uYXZlcmFnZUJpdHJhdGUgOiBsZXZlbEluZm8ubWF4Qml0cmF0ZTtcbiAgICAgICAgICB2YXIgZmV0Y2hEdXJhdGlvbiA9IF90aGlzMy5nZXRUaW1lVG9Mb2FkRnJhZyh0dGZiRXN0aW1hdGVTZWMsIGFkanVzdGVkYncsIGJpdHJhdGUgKiBhdmdEdXJhdGlvbiwgbGV2ZWxEZXRhaWxzID09PSB1bmRlZmluZWQpO1xuICAgICAgICAgIHZhciBjYW5Td2l0Y2hXaXRoaW5Ub2xlcmFuY2UgPVxuICAgICAgICAgIC8vIGlmIGFkanVzdGVkIGJ3IGlzIGdyZWF0ZXIgdGhhbiBsZXZlbCBiaXRyYXRlIEFORFxuICAgICAgICAgIGFkanVzdGVkYncgPj0gYml0cmF0ZSAmJiAoXG4gICAgICAgICAgLy8gbm8gbGV2ZWwgY2hhbmdlLCBvciBuZXcgbGV2ZWwgaGFzIG5vIGVycm9yIGhpc3RvcnlcbiAgICAgICAgICBpID09PSBsYXN0TG9hZGVkRnJhZ0xldmVsIHx8IGxldmVsSW5mby5sb2FkRXJyb3IgPT09IDAgJiYgbGV2ZWxJbmZvLmZyYWdtZW50RXJyb3IgPT09IDApICYmIChcbiAgICAgICAgICAvLyBmcmFnbWVudCBmZXRjaER1cmF0aW9uIHVua25vd24gT1IgbGl2ZSBzdHJlYW0gT1IgZnJhZ21lbnQgZmV0Y2hEdXJhdGlvbiBsZXNzIHRoYW4gbWF4IGFsbG93ZWQgZmV0Y2ggZHVyYXRpb24sIHRoZW4gdGhpcyBsZXZlbCBtYXRjaGVzXG4gICAgICAgICAgLy8gd2UgZG9uJ3QgYWNjb3VudCBmb3IgbWF4IEZldGNoIER1cmF0aW9uIGZvciBsaXZlIHN0cmVhbXMsIHRoaXMgaXMgdG8gYXZvaWQgc3dpdGNoaW5nIGRvd24gd2hlbiBuZWFyIHRoZSBlZGdlIG9mIGxpdmUgc2xpZGluZyB3aW5kb3cgLi4uXG4gICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIHRvIHN1cHBvcnQgc3RhcnRMZXZlbCA9IC0xIChiaXRyYXRlVGVzdCkgb24gbGl2ZSBzdHJlYW1zIDogaW4gdGhhdCBjYXNlIHdlIHNob3VsZCBub3QgZXhpdCBsb29wIHNvIHRoYXQgZmluZEJlc3RMZXZlbCB3aWxsIHJldHVybiAtMVxuICAgICAgICAgIGZldGNoRHVyYXRpb24gPD0gdHRmYkVzdGltYXRlU2VjIHx8ICFpc0Zpbml0ZU51bWJlcihmZXRjaER1cmF0aW9uKSB8fCBsaXZlICYmICFfdGhpczMuYml0cmF0ZVRlc3REZWxheSB8fCBmZXRjaER1cmF0aW9uIDwgbWF4RmV0Y2hEdXJhdGlvbik7XG4gICAgICAgICAgaWYgKGNhblN3aXRjaFdpdGhpblRvbGVyYW5jZSkge1xuICAgICAgICAgICAgdmFyIGZvcmNlZEF1dG9MZXZlbCA9IF90aGlzMy5mb3JjZWRBdXRvTGV2ZWw7XG4gICAgICAgICAgICBpZiAoaSAhPT0gbG9hZExldmVsICYmIChmb3JjZWRBdXRvTGV2ZWwgPT09IC0xIHx8IGZvcmNlZEF1dG9MZXZlbCAhPT0gbG9hZExldmVsKSkge1xuICAgICAgICAgICAgICBpZiAobGV2ZWxzU2tpcHBlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBfdGhpczMudHJhY2UoXCJTa2lwcGVkIGxldmVsKHMpIFwiICsgbGV2ZWxzU2tpcHBlZC5qb2luKCcsJykgKyBcIiBvZiBcIiArIG1heEF1dG9MZXZlbCArIFwiIG1heCB3aXRoIENPREVDUyBhbmQgVklERU8tUkFOR0U6XFxcIlwiICsgbGV2ZWxzW2xldmVsc1NraXBwZWRbMF1dLmNvZGVjcyArIFwiXFxcIiBcIiArIGxldmVsc1tsZXZlbHNTa2lwcGVkWzBdXS52aWRlb1JhbmdlICsgXCI7IG5vdCBjb21wYXRpYmxlIHdpdGggXFxcIlwiICsgY3VycmVudENvZGVjU2V0ICsgXCJcXFwiIFwiICsgY3VycmVudFZpZGVvUmFuZ2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF90aGlzMy5pbmZvKFwic3dpdGNoIGNhbmRpZGF0ZTpcIiArIHNlbGVjdGlvbkJhc2VMZXZlbCArIFwiLT5cIiArIGkgKyBcIiBhZGp1c3RlZGJ3KFwiICsgTWF0aC5yb3VuZChhZGp1c3RlZGJ3KSArIFwiKS1iaXRyYXRlPVwiICsgTWF0aC5yb3VuZChhZGp1c3RlZGJ3IC0gYml0cmF0ZSkgKyBcIiB0dGZiOlwiICsgdHRmYkVzdGltYXRlU2VjLnRvRml4ZWQoMSkgKyBcIiBhdmdEdXJhdGlvbjpcIiArIGF2Z0R1cmF0aW9uLnRvRml4ZWQoMSkgKyBcIiBtYXhGZXRjaER1cmF0aW9uOlwiICsgbWF4RmV0Y2hEdXJhdGlvbi50b0ZpeGVkKDEpICsgXCIgZmV0Y2hEdXJhdGlvbjpcIiArIGZldGNoRHVyYXRpb24udG9GaXhlZCgxKSArIFwiIGZpcnN0U2VsZWN0aW9uOlwiICsgZmlyc3RTZWxlY3Rpb24gKyBcIiBjb2RlY1NldDpcIiArIGxldmVsSW5mby5jb2RlY1NldCArIFwiIHZpZGVvUmFuZ2U6XCIgKyBsZXZlbEluZm8udmlkZW9SYW5nZSArIFwiIGhscy5sb2FkTGV2ZWw6XCIgKyBsb2FkTGV2ZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgIF90aGlzMy5maXJzdFNlbGVjdGlvbiA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhcyB3ZSBhcmUgbG9vcGluZyBmcm9tIGhpZ2hlc3QgdG8gbG93ZXN0LCB0aGlzIHdpbGwgcmV0dXJuIHRoZSBiZXN0IGFjaGlldmFibGUgcXVhbGl0eSBsZXZlbFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdjogaVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9yZXQ7XG4gICAgICBmb3IgKHZhciBpID0gbWF4QXV0b0xldmVsOyBpID49IG1pbkF1dG9MZXZlbDsgaS0tKSB7XG4gICAgICAgIF9yZXQgPSBfbG9vcCgpO1xuICAgICAgICBpZiAoX3JldCA9PT0gMCkgY29udGludWU7XG4gICAgICAgIGlmIChfcmV0KSByZXR1cm4gX3JldC52O1xuICAgICAgfVxuICAgICAgLy8gbm90IGVub3VnaCB0aW1lIGJ1ZGdldCBldmVuIHdpdGggcXVhbGl0eSBsZXZlbCAwIC4uLiByZWJ1ZmZlcmluZyBtaWdodCBoYXBwZW5cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIF9wcm90by5kZXJpdmVOZXh0QXV0b0xldmVsID0gZnVuY3Rpb24gZGVyaXZlTmV4dEF1dG9MZXZlbChuZXh0TGV2ZWwpIHtcbiAgICAgIHZhciBfdGhpcyRobHMyID0gdGhpcy5obHMsXG4gICAgICAgIG1heEF1dG9MZXZlbCA9IF90aGlzJGhsczIubWF4QXV0b0xldmVsLFxuICAgICAgICBtaW5BdXRvTGV2ZWwgPSBfdGhpcyRobHMyLm1pbkF1dG9MZXZlbDtcbiAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuZXh0TGV2ZWwsIG1pbkF1dG9MZXZlbCksIG1heEF1dG9MZXZlbCk7XG4gICAgfTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKEFickNvbnRyb2xsZXIsIFt7XG4gICAgICBrZXk6IFwiZmlyc3RBdXRvTGV2ZWxcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMkaGxzMyA9IHRoaXMuaGxzLFxuICAgICAgICAgIG1heEF1dG9MZXZlbCA9IF90aGlzJGhsczMubWF4QXV0b0xldmVsLFxuICAgICAgICAgIG1pbkF1dG9MZXZlbCA9IF90aGlzJGhsczMubWluQXV0b0xldmVsO1xuICAgICAgICB2YXIgYndFc3RpbWF0ZSA9IHRoaXMuZ2V0QndFc3RpbWF0ZSgpO1xuICAgICAgICB2YXIgbWF4U3RhcnREZWxheSA9IHRoaXMuaGxzLmNvbmZpZy5tYXhTdGFydmF0aW9uRGVsYXk7XG4gICAgICAgIHZhciBhYnJBdXRvTGV2ZWwgPSB0aGlzLmZpbmRCZXN0TGV2ZWwoYndFc3RpbWF0ZSwgbWluQXV0b0xldmVsLCBtYXhBdXRvTGV2ZWwsIDAsIG1heFN0YXJ0RGVsYXksIDEsIDEpO1xuICAgICAgICBpZiAoYWJyQXV0b0xldmVsID4gLTEpIHtcbiAgICAgICAgICByZXR1cm4gYWJyQXV0b0xldmVsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmaXJzdExldmVsID0gdGhpcy5obHMuZmlyc3RMZXZlbDtcbiAgICAgICAgdmFyIGNsYW1wZWQgPSBNYXRoLm1pbihNYXRoLm1heChmaXJzdExldmVsLCBtaW5BdXRvTGV2ZWwpLCBtYXhBdXRvTGV2ZWwpO1xuICAgICAgICB0aGlzLndhcm4oXCJDb3VsZCBub3QgZmluZCBiZXN0IHN0YXJ0aW5nIGF1dG8gbGV2ZWwuIERlZmF1bHRpbmcgdG8gZmlyc3QgaW4gcGxheWxpc3QgXCIgKyBmaXJzdExldmVsICsgXCIgY2xhbXBlZCB0byBcIiArIGNsYW1wZWQpO1xuICAgICAgICByZXR1cm4gY2xhbXBlZDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZm9yY2VkQXV0b0xldmVsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKHRoaXMubmV4dEF1dG9MZXZlbEtleSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbmV4dEF1dG9MZXZlbDtcbiAgICAgIH1cblxuICAgICAgLy8gcmV0dXJuIG5leHQgYXV0byBsZXZlbFxuICAgIH0sIHtcbiAgICAgIGtleTogXCJuZXh0QXV0b0xldmVsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGZvcmNlZEF1dG9MZXZlbCA9IHRoaXMuZm9yY2VkQXV0b0xldmVsO1xuICAgICAgICB2YXIgYndFc3RpbWF0b3IgPSB0aGlzLmJ3RXN0aW1hdG9yO1xuICAgICAgICB2YXIgdXNlRXN0aW1hdGUgPSBid0VzdGltYXRvci5jYW5Fc3RpbWF0ZSgpO1xuICAgICAgICB2YXIgbG9hZGVkRmlyc3RGcmFnID0gdGhpcy5sYXN0TG9hZGVkRnJhZ0xldmVsID4gLTE7XG4gICAgICAgIC8vIGluIGNhc2UgbmV4dCBhdXRvIGxldmVsIGhhcyBiZWVuIGZvcmNlZCwgYW5kIGJ3IG5vdCBhdmFpbGFibGUgb3Igbm90IHJlbGlhYmxlLCByZXR1cm4gZm9yY2VkIHZhbHVlXG4gICAgICAgIGlmIChmb3JjZWRBdXRvTGV2ZWwgIT09IC0xICYmICghdXNlRXN0aW1hdGUgfHwgIWxvYWRlZEZpcnN0RnJhZyB8fCB0aGlzLm5leHRBdXRvTGV2ZWxLZXkgPT09IHRoaXMuZ2V0QXV0b0xldmVsS2V5KCkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZvcmNlZEF1dG9MZXZlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbXB1dGUgbmV4dCBsZXZlbCB1c2luZyBBQlIgbG9naWNcbiAgICAgICAgdmFyIG5leHRBQlJBdXRvTGV2ZWwgPSB1c2VFc3RpbWF0ZSAmJiBsb2FkZWRGaXJzdEZyYWcgPyB0aGlzLmdldE5leHRBQlJBdXRvTGV2ZWwoKSA6IHRoaXMuZmlyc3RBdXRvTGV2ZWw7XG5cbiAgICAgICAgLy8gdXNlIGZvcmNlZCBhdXRvIGxldmVsIHdoaWxlIGl0IGhhc24ndCBlcnJvcmVkIG1vcmUgdGhhbiBBQlIgc2VsZWN0aW9uXG4gICAgICAgIGlmIChmb3JjZWRBdXRvTGV2ZWwgIT09IC0xKSB7XG4gICAgICAgICAgdmFyIGxldmVscyA9IHRoaXMuaGxzLmxldmVscztcbiAgICAgICAgICBpZiAobGV2ZWxzLmxlbmd0aCA+IE1hdGgubWF4KGZvcmNlZEF1dG9MZXZlbCwgbmV4dEFCUkF1dG9MZXZlbCkgJiYgbGV2ZWxzW2ZvcmNlZEF1dG9MZXZlbF0ubG9hZEVycm9yIDw9IGxldmVsc1tuZXh0QUJSQXV0b0xldmVsXS5sb2FkRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JjZWRBdXRvTGV2ZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2F2ZSByZXN1bHQgdW50aWwgc3RhdGUgaGFzIGNoYW5nZWRcbiAgICAgICAgdGhpcy5fbmV4dEF1dG9MZXZlbCA9IG5leHRBQlJBdXRvTGV2ZWw7XG4gICAgICAgIHRoaXMubmV4dEF1dG9MZXZlbEtleSA9IHRoaXMuZ2V0QXV0b0xldmVsS2V5KCk7XG4gICAgICAgIHJldHVybiBuZXh0QUJSQXV0b0xldmVsO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5leHRMZXZlbCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmRlcml2ZU5leHRBdXRvTGV2ZWwobmV4dExldmVsKTtcbiAgICAgICAgaWYgKHRoaXMuX25leHRBdXRvTGV2ZWwgIT09IHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5uZXh0QXV0b0xldmVsS2V5ID0gJyc7XG4gICAgICAgICAgdGhpcy5fbmV4dEF1dG9MZXZlbCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuICB9KExvZ2dlcik7XG5cbiAgdmFyIEJpbmFyeVNlYXJjaCA9IHtcbiAgICAvKipcbiAgICAgKiBTZWFyY2hlcyBmb3IgYW4gaXRlbSBpbiBhbiBhcnJheSB3aGljaCBtYXRjaGVzIGEgY2VydGFpbiBjb25kaXRpb24uXG4gICAgICogVGhpcyByZXF1aXJlcyB0aGUgY29uZGl0aW9uIHRvIG9ubHkgbWF0Y2ggb25lIGl0ZW0gaW4gdGhlIGFycmF5LFxuICAgICAqIGFuZCBmb3IgdGhlIGFycmF5IHRvIGJlIG9yZGVyZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdCBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSBjb21wYXJpc29uRm5cbiAgICAgKiAgICAgIENhbGxlZCBhbmQgcHJvdmlkZWQgYSBjYW5kaWRhdGUgaXRlbSBhcyB0aGUgZmlyc3QgYXJndW1lbnQuXG4gICAgICogICAgICBTaG91bGQgcmV0dXJuOlxuICAgICAqICAgICAgICAgID4gLTEgaWYgdGhlIGl0ZW0gc2hvdWxkIGJlIGxvY2F0ZWQgYXQgYSBsb3dlciBpbmRleCB0aGFuIHRoZSBwcm92aWRlZCBpdGVtLlxuICAgICAqICAgICAgICAgID4gMSBpZiB0aGUgaXRlbSBzaG91bGQgYmUgbG9jYXRlZCBhdCBhIGhpZ2hlciBpbmRleCB0aGFuIHRoZSBwcm92aWRlZCBpdGVtLlxuICAgICAqICAgICAgICAgID4gMCBpZiB0aGUgaXRlbSBpcyB0aGUgaXRlbSB5b3UncmUgbG9va2luZyBmb3IuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0aGUgb2JqZWN0IGlmIGZvdW5kLCBvdGhlcndpc2UgcmV0dXJucyBudWxsXG4gICAgICovXG4gICAgc2VhcmNoOiBmdW5jdGlvbiBzZWFyY2gobGlzdCwgY29tcGFyaXNvbkZuKSB7XG4gICAgICB2YXIgbWluSW5kZXggPSAwO1xuICAgICAgdmFyIG1heEluZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IG51bGw7XG4gICAgICB2YXIgY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICAgICAgd2hpbGUgKG1pbkluZGV4IDw9IG1heEluZGV4KSB7XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IChtaW5JbmRleCArIG1heEluZGV4KSAvIDIgfCAwO1xuICAgICAgICBjdXJyZW50RWxlbWVudCA9IGxpc3RbY3VycmVudEluZGV4XTtcbiAgICAgICAgdmFyIGNvbXBhcmlzb25SZXN1bHQgPSBjb21wYXJpc29uRm4oY3VycmVudEVsZW1lbnQpO1xuICAgICAgICBpZiAoY29tcGFyaXNvblJlc3VsdCA+IDApIHtcbiAgICAgICAgICBtaW5JbmRleCA9IGN1cnJlbnRJbmRleCArIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoY29tcGFyaXNvblJlc3VsdCA8IDApIHtcbiAgICAgICAgICBtYXhJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRFbGVtZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlyc3QgZnJhZ21lbnQgd2hvc2UgZW5kUGR0IHZhbHVlIGV4Y2VlZHMgdGhlIGdpdmVuIFBEVCwgb3IgbnVsbC5cbiAgICogQHBhcmFtIGZyYWdtZW50cyAtIFRoZSBhcnJheSBvZiBjYW5kaWRhdGUgZnJhZ21lbnRzXG4gICAqIEBwYXJhbSBQRFRWYWx1ZSAtIFRoZSBQRFQgdmFsdWUgd2hpY2ggbXVzdCBiZSBleGNlZWRlZFxuICAgKiBAcGFyYW0gbWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSAtIFRoZSBhbW91bnQgb2YgdGltZSB0aGF0IGEgZnJhZ21lbnQncyBzdGFydC9lbmQgY2FuIGJlIHdpdGhpbiBpbiBvcmRlciB0byBiZSBjb25zaWRlcmVkIGNvbnRpZ3VvdXNcbiAgICovXG4gIGZ1bmN0aW9uIGZpbmRGcmFnbWVudEJ5UERUKGZyYWdtZW50cywgUERUVmFsdWUsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UpIHtcbiAgICBpZiAoUERUVmFsdWUgPT09IG51bGwgfHwgIUFycmF5LmlzQXJyYXkoZnJhZ21lbnRzKSB8fCAhZnJhZ21lbnRzLmxlbmd0aCB8fCAhaXNGaW5pdGVOdW1iZXIoUERUVmFsdWUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBpZiBsZXNzIHRoYW4gc3RhcnRcbiAgICB2YXIgc3RhcnRQRFQgPSBmcmFnbWVudHNbMF0ucHJvZ3JhbURhdGVUaW1lO1xuICAgIGlmIChQRFRWYWx1ZSA8IChzdGFydFBEVCB8fCAwKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmRQRFQgPSBmcmFnbWVudHNbZnJhZ21lbnRzLmxlbmd0aCAtIDFdLmVuZFByb2dyYW1EYXRlVGltZTtcbiAgICBpZiAoUERUVmFsdWUgPj0gKGVuZFBEVCB8fCAwKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZvciAodmFyIHNlZyA9IDA7IHNlZyA8IGZyYWdtZW50cy5sZW5ndGg7ICsrc2VnKSB7XG4gICAgICB2YXIgZnJhZyA9IGZyYWdtZW50c1tzZWddO1xuICAgICAgaWYgKHBkdFdpdGhpblRvbGVyYW5jZVRlc3QoUERUVmFsdWUsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UsIGZyYWcpKSB7XG4gICAgICAgIHJldHVybiBmcmFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyBhIGZyYWdtZW50IGJhc2VkIG9uIHRoZSBTTiBvZiB0aGUgcHJldmlvdXMgZnJhZ21lbnQ7IG9yIGJhc2VkIG9uIHRoZSBuZWVkcyBvZiB0aGUgY3VycmVudCBidWZmZXIuXG4gICAqIFRoaXMgbWV0aG9kIGNvbXBlbnNhdGVzIGZvciBzbWFsbCBidWZmZXIgZ2FwcyBieSBhcHBseWluZyBhIHRvbGVyYW5jZSB0byB0aGUgc3RhcnQgb2YgYW55IGNhbmRpZGF0ZSBmcmFnbWVudCwgdGh1c1xuICAgKiBicmVha2luZyBhbnkgdHJhcHMgd2hpY2ggd291bGQgY2F1c2UgdGhlIHNhbWUgZnJhZ21lbnQgdG8gYmUgY29udGludW91c2x5IHNlbGVjdGVkIHdpdGhpbiBhIHNtYWxsIHJhbmdlLlxuICAgKiBAcGFyYW0gZnJhZ1ByZXZpb3VzIC0gVGhlIGxhc3QgZnJhZyBzdWNjZXNzZnVsbHkgYXBwZW5kZWRcbiAgICogQHBhcmFtIGZyYWdtZW50cyAtIFRoZSBhcnJheSBvZiBjYW5kaWRhdGUgZnJhZ21lbnRzXG4gICAqIEBwYXJhbSBidWZmZXJFbmQgLSBUaGUgZW5kIG9mIHRoZSBjb250aWd1b3VzIGJ1ZmZlcmVkIHJhbmdlIHRoZSBwbGF5aGVhZCBpcyBjdXJyZW50bHkgd2l0aGluXG4gICAqIEBwYXJhbSBtYXhGcmFnTG9va1VwVG9sZXJhbmNlIC0gVGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgYSBmcmFnbWVudCdzIHN0YXJ0L2VuZCBjYW4gYmUgd2l0aGluIGluIG9yZGVyIHRvIGJlIGNvbnNpZGVyZWQgY29udGlndW91c1xuICAgKiBAcmV0dXJucyBhIG1hdGNoaW5nIGZyYWdtZW50IG9yIG51bGxcbiAgICovXG4gIGZ1bmN0aW9uIGZpbmRGcmFnbWVudEJ5UFRTKGZyYWdQcmV2aW91cywgZnJhZ21lbnRzLCBidWZmZXJFbmQsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UsIG5leHRGcmFnTG9va3VwVG9sZXJhbmNlKSB7XG4gICAgaWYgKGJ1ZmZlckVuZCA9PT0gdm9pZCAwKSB7XG4gICAgICBidWZmZXJFbmQgPSAwO1xuICAgIH1cbiAgICBpZiAobWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtYXhGcmFnTG9va1VwVG9sZXJhbmNlID0gMDtcbiAgICB9XG4gICAgaWYgKG5leHRGcmFnTG9va3VwVG9sZXJhbmNlID09PSB2b2lkIDApIHtcbiAgICAgIG5leHRGcmFnTG9va3VwVG9sZXJhbmNlID0gMC4wMDU7XG4gICAgfVxuICAgIHZhciBmcmFnTmV4dCA9IG51bGw7XG4gICAgaWYgKGZyYWdQcmV2aW91cykge1xuICAgICAgZnJhZ05leHQgPSBmcmFnbWVudHNbMSArIGZyYWdQcmV2aW91cy5zbiAtIGZyYWdtZW50c1swXS5zbl0gfHwgbnVsbDtcbiAgICAgIC8vIGNoZWNrIGZvciBidWZmZXItZW5kIHJvdW5kaW5nIGVycm9yXG4gICAgICB2YXIgYnVmZmVyRWRnZUVycm9yID0gZnJhZ1ByZXZpb3VzLmVuZERUUyAtIGJ1ZmZlckVuZDtcbiAgICAgIGlmIChidWZmZXJFZGdlRXJyb3IgPiAwICYmIGJ1ZmZlckVkZ2VFcnJvciA8IDAuMDAwMDAxNSkge1xuICAgICAgICBidWZmZXJFbmQgKz0gMC4wMDAwMDE1O1xuICAgICAgfVxuICAgICAgaWYgKGZyYWdOZXh0ICYmIGZyYWdQcmV2aW91cy5sZXZlbCAhPT0gZnJhZ05leHQubGV2ZWwgJiYgZnJhZ05leHQuZW5kIDw9IGZyYWdQcmV2aW91cy5lbmQpIHtcbiAgICAgICAgZnJhZ05leHQgPSBmcmFnbWVudHNbMiArIGZyYWdQcmV2aW91cy5zbiAtIGZyYWdtZW50c1swXS5zbl0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJ1ZmZlckVuZCA9PT0gMCAmJiBmcmFnbWVudHNbMF0uc3RhcnQgPT09IDApIHtcbiAgICAgIGZyYWdOZXh0ID0gZnJhZ21lbnRzWzBdO1xuICAgIH1cbiAgICAvLyBQcmVmZXIgdGhlIG5leHQgZnJhZ21lbnQgaWYgaXQncyB3aXRoaW4gdG9sZXJhbmNlXG4gICAgaWYgKGZyYWdOZXh0ICYmICgoIWZyYWdQcmV2aW91cyB8fCBmcmFnUHJldmlvdXMubGV2ZWwgPT09IGZyYWdOZXh0LmxldmVsKSAmJiBmcmFnbWVudFdpdGhpblRvbGVyYW5jZVRlc3QoYnVmZmVyRW5kLCBtYXhGcmFnTG9va1VwVG9sZXJhbmNlLCBmcmFnTmV4dCkgPT09IDAgfHwgZnJhZ21lbnRXaXRoaW5GYXN0U3RhcnRTd2l0Y2goZnJhZ05leHQsIGZyYWdQcmV2aW91cywgTWF0aC5taW4obmV4dEZyYWdMb29rdXBUb2xlcmFuY2UsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UpKSkpIHtcbiAgICAgIHJldHVybiBmcmFnTmV4dDtcbiAgICB9XG4gICAgLy8gV2UgbWlnaHQgYmUgc2Vla2luZyBwYXN0IHRoZSB0b2xlcmFuY2Ugc28gZmluZCB0aGUgYmVzdCBtYXRjaFxuICAgIHZhciBmb3VuZEZyYWdtZW50ID0gQmluYXJ5U2VhcmNoLnNlYXJjaChmcmFnbWVudHMsIGZyYWdtZW50V2l0aGluVG9sZXJhbmNlVGVzdC5iaW5kKG51bGwsIGJ1ZmZlckVuZCwgbWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSkpO1xuICAgIGlmIChmb3VuZEZyYWdtZW50ICYmIChmb3VuZEZyYWdtZW50ICE9PSBmcmFnUHJldmlvdXMgfHwgIWZyYWdOZXh0KSkge1xuICAgICAgcmV0dXJuIGZvdW5kRnJhZ21lbnQ7XG4gICAgfVxuICAgIC8vIElmIG5vIG1hdGNoIHdhcyBmb3VuZCByZXR1cm4gdGhlIG5leHQgZnJhZ21lbnQgYWZ0ZXIgZnJhZ1ByZXZpb3VzLCBvciBudWxsXG4gICAgcmV0dXJuIGZyYWdOZXh0O1xuICB9XG4gIGZ1bmN0aW9uIGZyYWdtZW50V2l0aGluRmFzdFN0YXJ0U3dpdGNoKGZyYWdOZXh0LCBmcmFnUHJldmlvdXMsIG5leHRGcmFnTG9va3VwVG9sZXJhbmNlKSB7XG4gICAgaWYgKGZyYWdQcmV2aW91cyAmJiBmcmFnUHJldmlvdXMuc3RhcnQgPT09IDAgJiYgZnJhZ1ByZXZpb3VzLmxldmVsIDwgZnJhZ05leHQubGV2ZWwgJiYgKGZyYWdQcmV2aW91cy5lbmRQVFMgfHwgMCkgPiAwKSB7XG4gICAgICB2YXIgZmlyc3REdXJhdGlvbiA9IGZyYWdQcmV2aW91cy50YWdMaXN0LnJlZHVjZShmdW5jdGlvbiAoZHVyYXRpb24sIHRhZykge1xuICAgICAgICBpZiAodGFnWzBdID09PSAnSU5GJykge1xuICAgICAgICAgIGR1cmF0aW9uICs9IHBhcnNlRmxvYXQodGFnWzFdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZHVyYXRpb247XG4gICAgICB9LCBuZXh0RnJhZ0xvb2t1cFRvbGVyYW5jZSk7XG4gICAgICByZXR1cm4gZnJhZ05leHQuc3RhcnQgPD0gZmlyc3REdXJhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZXN0IGZ1bmN0aW9uIHVzZWQgYnkgdGhlIGZpbmRGcmFnbWVudEJ5U24ncyBCaW5hcnlTZWFyY2ggdG8gbG9vayBmb3IgdGhlIGJlc3QgbWF0Y2ggdG8gdGhlIGN1cnJlbnQgYnVmZmVyIGNvbmRpdGlvbnMuXG4gICAqIEBwYXJhbSBjYW5kaWRhdGUgLSBUaGUgZnJhZ21lbnQgdG8gdGVzdFxuICAgKiBAcGFyYW0gYnVmZmVyRW5kIC0gVGhlIGVuZCBvZiB0aGUgY3VycmVudCBidWZmZXJlZCByYW5nZSB0aGUgcGxheWhlYWQgaXMgY3VycmVudGx5IHdpdGhpblxuICAgKiBAcGFyYW0gbWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSAtIFRoZSBhbW91bnQgb2YgdGltZSB0aGF0IGEgZnJhZ21lbnQncyBzdGFydCBjYW4gYmUgd2l0aGluIGluIG9yZGVyIHRvIGJlIGNvbnNpZGVyZWQgY29udGlndW91c1xuICAgKiBAcmV0dXJucyAwIGlmIGl0IG1hdGNoZXMsIDEgaWYgdG9vIGxvdywgLTEgaWYgdG9vIGhpZ2hcbiAgICovXG4gIGZ1bmN0aW9uIGZyYWdtZW50V2l0aGluVG9sZXJhbmNlVGVzdChidWZmZXJFbmQsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UsIGNhbmRpZGF0ZSkge1xuICAgIGlmIChidWZmZXJFbmQgPT09IHZvaWQgMCkge1xuICAgICAgYnVmZmVyRW5kID0gMDtcbiAgICB9XG4gICAgaWYgKG1heEZyYWdMb29rVXBUb2xlcmFuY2UgPT09IHZvaWQgMCkge1xuICAgICAgbWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSA9IDA7XG4gICAgfVxuICAgIC8vIGVhZ2VybHkgYWNjZXB0IGFuIGFjY3VyYXRlIG1hdGNoIChubyB0b2xlcmFuY2UpXG4gICAgaWYgKGNhbmRpZGF0ZS5zdGFydCA8PSBidWZmZXJFbmQgJiYgY2FuZGlkYXRlLnN0YXJ0ICsgY2FuZGlkYXRlLmR1cmF0aW9uID4gYnVmZmVyRW5kKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgLy8gb2Zmc2V0IHNob3VsZCBiZSB3aXRoaW4gZnJhZ21lbnQgYm91bmRhcnkgLSBjb25maWcubWF4RnJhZ0xvb2tVcFRvbGVyYW5jZVxuICAgIC8vIHRoaXMgaXMgdG8gY29wZSB3aXRoIHNpdHVhdGlvbnMgbGlrZVxuICAgIC8vIGJ1ZmZlckVuZCA9IDkuOTkxXG4gICAgLy8gZnJhZ1vDmF0gOiBbMCwxMF1cbiAgICAvLyBmcmFnWzFdIDogWzEwLDIwXVxuICAgIC8vIGJ1ZmZlckVuZCBpcyB3aXRoaW4gZnJhZ1swXSByYW5nZSAuLi4gYWx0aG91Z2ggd2hhdCB3ZSBhcmUgZXhwZWN0aW5nIGlzIHRvIHJldHVybiBmcmFnWzFdIGhlcmVcbiAgICAvLyAgICAgICAgICAgICAgZnJhZyBzdGFydCAgICAgICAgICAgICAgIGZyYWcgc3RhcnQrZHVyYXRpb25cbiAgICAvLyAgICAgICAgICAgICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICAvLyAgICAgICAgICAgICAgPC0tLT4gICAgICAgICAgICAgICAgICAgICAgICAgPC0tLT5cbiAgICAvLyAgLi4uLS0tLS0tLS0+PC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPjwtLS0tLS0tLS0uLi4uXG4gICAgLy8gcHJldmlvdXMgZnJhZyAgICAgICAgIG1hdGNoaW5nIGZyYWdtZW50ICAgICAgICAgbmV4dCBmcmFnXG4gICAgLy8gIHJldHVybiAtMSAgICAgICAgICAgICByZXR1cm4gMCAgICAgICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAvLyBsb2dnZXIubG9nKGBsZXZlbC9zbi9zdGFydC9lbmQvYnVmRW5kOiR7bGV2ZWx9LyR7Y2FuZGlkYXRlLnNufS8ke2NhbmRpZGF0ZS5zdGFydH0vJHsoY2FuZGlkYXRlLnN0YXJ0K2NhbmRpZGF0ZS5kdXJhdGlvbil9LyR7YnVmZmVyRW5kfWApO1xuICAgIC8vIFNldCB0aGUgbG9va3VwIHRvbGVyYW5jZSB0byBiZSBzbWFsbCBlbm91Z2ggdG8gZGV0ZWN0IHRoZSBjdXJyZW50IHNlZ21lbnQgLSBlbnN1cmVzIHdlIGRvbid0IHNraXAgb3ZlciB2ZXJ5IHNtYWxsIHNlZ21lbnRzXG4gICAgdmFyIGNhbmRpZGF0ZUxvb2t1cFRvbGVyYW5jZSA9IE1hdGgubWluKG1heEZyYWdMb29rVXBUb2xlcmFuY2UsIGNhbmRpZGF0ZS5kdXJhdGlvbiArIChjYW5kaWRhdGUuZGVsdGFQVFMgPyBjYW5kaWRhdGUuZGVsdGFQVFMgOiAwKSk7XG4gICAgaWYgKGNhbmRpZGF0ZS5zdGFydCArIGNhbmRpZGF0ZS5kdXJhdGlvbiAtIGNhbmRpZGF0ZUxvb2t1cFRvbGVyYW5jZSA8PSBidWZmZXJFbmQpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoY2FuZGlkYXRlLnN0YXJ0IC0gY2FuZGlkYXRlTG9va3VwVG9sZXJhbmNlID4gYnVmZmVyRW5kICYmIGNhbmRpZGF0ZS5zdGFydCkge1xuICAgICAgLy8gaWYgbWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSB3aWxsIGhhdmUgbmVnYXRpdmUgdmFsdWUgdGhlbiBkb24ndCByZXR1cm4gLTEgZm9yIGZpcnN0IGVsZW1lbnRcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlc3QgZnVuY3Rpb24gdXNlZCBieSB0aGUgZmluZEZyYWdtZW50QnlQZHQncyBCaW5hcnlTZWFyY2ggdG8gbG9vayBmb3IgdGhlIGJlc3QgbWF0Y2ggdG8gdGhlIGN1cnJlbnQgYnVmZmVyIGNvbmRpdGlvbnMuXG4gICAqIFRoaXMgZnVuY3Rpb24gdGVzdHMgdGhlIGNhbmRpZGF0ZSdzIHByb2dyYW0gZGF0ZSB0aW1lIHZhbHVlcywgYXMgcmVwcmVzZW50ZWQgaW4gVW5peCB0aW1lXG4gICAqIEBwYXJhbSBjYW5kaWRhdGUgLSBUaGUgZnJhZ21lbnQgdG8gdGVzdFxuICAgKiBAcGFyYW0gcGR0QnVmZmVyRW5kIC0gVGhlIFVuaXggdGltZSByZXByZXNlbnRpbmcgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBidWZmZXJlZCByYW5nZVxuICAgKiBAcGFyYW0gbWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSAtIFRoZSBhbW91bnQgb2YgdGltZSB0aGF0IGEgZnJhZ21lbnQncyBzdGFydCBjYW4gYmUgd2l0aGluIGluIG9yZGVyIHRvIGJlIGNvbnNpZGVyZWQgY29udGlndW91c1xuICAgKiBAcmV0dXJucyB0cnVlIGlmIGNvbnRpZ3VvdXMsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgZnVuY3Rpb24gcGR0V2l0aGluVG9sZXJhbmNlVGVzdChwZHRCdWZmZXJFbmQsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UsIGNhbmRpZGF0ZSkge1xuICAgIHZhciBjYW5kaWRhdGVMb29rdXBUb2xlcmFuY2UgPSBNYXRoLm1pbihtYXhGcmFnTG9va1VwVG9sZXJhbmNlLCBjYW5kaWRhdGUuZHVyYXRpb24gKyAoY2FuZGlkYXRlLmRlbHRhUFRTID8gY2FuZGlkYXRlLmRlbHRhUFRTIDogMCkpICogMTAwMDtcblxuICAgIC8vIGVuZFByb2dyYW1EYXRlVGltZSBjYW4gYmUgbnVsbCwgZGVmYXVsdCB0byB6ZXJvXG4gICAgdmFyIGVuZFByb2dyYW1EYXRlVGltZSA9IGNhbmRpZGF0ZS5lbmRQcm9ncmFtRGF0ZVRpbWUgfHwgMDtcbiAgICByZXR1cm4gZW5kUHJvZ3JhbURhdGVUaW1lIC0gY2FuZGlkYXRlTG9va3VwVG9sZXJhbmNlID4gcGR0QnVmZmVyRW5kO1xuICB9XG4gIGZ1bmN0aW9uIGZpbmROZWFyZXN0V2l0aENDKGRldGFpbHMsIGNjLCBwb3MpIHtcbiAgICBpZiAoZGV0YWlscykge1xuICAgICAgaWYgKGRldGFpbHMuc3RhcnRDQyA8PSBjYyAmJiBkZXRhaWxzLmVuZENDID49IGNjKSB7XG4gICAgICAgIHZhciBmcmFnbWVudHMgPSBkZXRhaWxzLmZyYWdtZW50cztcbiAgICAgICAgdmFyIGZyYWdtZW50SGludCA9IGRldGFpbHMuZnJhZ21lbnRIaW50O1xuICAgICAgICBpZiAoZnJhZ21lbnRIaW50KSB7XG4gICAgICAgICAgZnJhZ21lbnRzID0gZnJhZ21lbnRzLmNvbmNhdChmcmFnbWVudEhpbnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjbG9zZXN0O1xuICAgICAgICBCaW5hcnlTZWFyY2guc2VhcmNoKGZyYWdtZW50cywgZnVuY3Rpb24gKGNhbmRpZGF0ZSkge1xuICAgICAgICAgIGlmIChjYW5kaWRhdGUuY2MgPCBjYykge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjYW5kaWRhdGUuY2MgPiBjYykge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjbG9zZXN0ID0gY2FuZGlkYXRlO1xuICAgICAgICAgIGlmIChjYW5kaWRhdGUuZW5kIDw9IHBvcykge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjYW5kaWRhdGUuc3RhcnQgPiBwb3MpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xvc2VzdCB8fCBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVGltZW91dEVycm9yKGVycm9yKSB7XG4gICAgc3dpdGNoIChlcnJvci5kZXRhaWxzKSB7XG4gICAgICBjYXNlIEVycm9yRGV0YWlscy5GUkFHX0xPQURfVElNRU9VVDpcbiAgICAgIGNhc2UgRXJyb3JEZXRhaWxzLktFWV9MT0FEX1RJTUVPVVQ6XG4gICAgICBjYXNlIEVycm9yRGV0YWlscy5MRVZFTF9MT0FEX1RJTUVPVVQ6XG4gICAgICBjYXNlIEVycm9yRGV0YWlscy5NQU5JRkVTVF9MT0FEX1RJTUVPVVQ6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UmV0cnlDb25maWcobG9hZFBvbGljeSwgZXJyb3IpIHtcbiAgICB2YXIgaXNUaW1lb3V0ID0gaXNUaW1lb3V0RXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiBsb2FkUG9saWN5LmRlZmF1bHRbKGlzVGltZW91dCA/ICd0aW1lb3V0JyA6ICdlcnJvcicpICsgXCJSZXRyeVwiXTtcbiAgfVxuICBmdW5jdGlvbiBnZXRSZXRyeURlbGF5KHJldHJ5Q29uZmlnLCByZXRyeUNvdW50KSB7XG4gICAgLy8gZXhwb25lbnRpYWwgYmFja29mZiBjYXBwZWQgdG8gbWF4IHJldHJ5IGRlbGF5XG4gICAgdmFyIGJhY2tvZmZGYWN0b3IgPSByZXRyeUNvbmZpZy5iYWNrb2ZmID09PSAnbGluZWFyJyA/IDEgOiBNYXRoLnBvdygyLCByZXRyeUNvdW50KTtcbiAgICByZXR1cm4gTWF0aC5taW4oYmFja29mZkZhY3RvciAqIHJldHJ5Q29uZmlnLnJldHJ5RGVsYXlNcywgcmV0cnlDb25maWcubWF4UmV0cnlEZWxheU1zKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRMb2FkZXJDb25maWdXaXRob3V0UmV0aWVzKGxvZGVyQ29uZmlnKSB7XG4gICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBsb2RlckNvbmZpZyksIHtcbiAgICAgIGVycm9yUmV0cnk6IG51bGwsXG4gICAgICB0aW1lb3V0UmV0cnk6IG51bGxcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzaG91bGRSZXRyeShyZXRyeUNvbmZpZywgcmV0cnlDb3VudCwgaXNUaW1lb3V0LCBsb2FkZXJSZXNwb25zZSkge1xuICAgIGlmICghcmV0cnlDb25maWcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGh0dHBTdGF0dXMgPSBsb2FkZXJSZXNwb25zZSA9PSBudWxsID8gdm9pZCAwIDogbG9hZGVyUmVzcG9uc2UuY29kZTtcbiAgICB2YXIgcmV0cnkgPSByZXRyeUNvdW50IDwgcmV0cnlDb25maWcubWF4TnVtUmV0cnkgJiYgKHJldHJ5Rm9ySHR0cFN0YXR1cyhodHRwU3RhdHVzKSB8fCAhIWlzVGltZW91dCk7XG4gICAgcmV0dXJuIHJldHJ5Q29uZmlnLnNob3VsZFJldHJ5ID8gcmV0cnlDb25maWcuc2hvdWxkUmV0cnkocmV0cnlDb25maWcsIHJldHJ5Q291bnQsIGlzVGltZW91dCwgbG9hZGVyUmVzcG9uc2UsIHJldHJ5KSA6IHJldHJ5O1xuICB9XG4gIGZ1bmN0aW9uIHJldHJ5Rm9ySHR0cFN0YXR1cyhodHRwU3RhdHVzKSB7XG4gICAgLy8gRG8gbm90IHJldHJ5IG9uIHN0YXR1cyA0eHgsIHN0YXR1cyAwIChDT1JTIGVycm9yKSwgb3IgdW5kZWZpbmVkIChkZWNyeXB0L2dhcC9wYXJzZSBlcnJvcilcbiAgICByZXR1cm4gaHR0cFN0YXR1cyA9PT0gMCAmJiBuYXZpZ2F0b3Iub25MaW5lID09PSBmYWxzZSB8fCAhIWh0dHBTdGF0dXMgJiYgKGh0dHBTdGF0dXMgPCA0MDAgfHwgaHR0cFN0YXR1cyA+IDQ5OSk7XG4gIH1cblxuICB2YXIgTmV0d29ya0Vycm9yQWN0aW9uID0ge1xuICAgIERvTm90aGluZzogMCxcbiAgICBTZW5kQWx0ZXJuYXRlVG9QZW5hbHR5Qm94OiAyLFxuICAgIFJlbW92ZUFsdGVybmF0ZVBlcm1hbmVudGx5OiAzLFxuICAgIFJldHJ5UmVxdWVzdDogNVxuICB9O1xuICB2YXIgRXJyb3JBY3Rpb25GbGFncyA9IHtcbiAgICBOb25lOiAwLFxuICAgIE1vdmVBbGxBbHRlcm5hdGVzTWF0Y2hpbmdIb3N0OiAxLFxuICAgIE1vdmVBbGxBbHRlcm5hdGVzTWF0Y2hpbmdIRENQOiAyfTtcbiAgdmFyIEVycm9yQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0xvZ2dlcikge1xuICAgIGZ1bmN0aW9uIEVycm9yQ29udHJvbGxlcihobHMpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF90aGlzID0gX0xvZ2dlci5jYWxsKHRoaXMsICdlcnJvci1jb250cm9sbGVyJywgaGxzLmxvZ2dlcikgfHwgdGhpcztcbiAgICAgIF90aGlzLmhscyA9IHZvaWQgMDtcbiAgICAgIF90aGlzLnBsYXlsaXN0RXJyb3IgPSAwO1xuICAgICAgX3RoaXMucGVuYWxpemVkUmVuZGl0aW9ucyA9IHt9O1xuICAgICAgX3RoaXMuaGxzID0gaGxzO1xuICAgICAgX3RoaXMucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgX2luaGVyaXRzTG9vc2UoRXJyb3JDb250cm9sbGVyLCBfTG9nZ2VyKTtcbiAgICB2YXIgX3Byb3RvID0gRXJyb3JDb250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGhscy5vbihFdmVudHMuRVJST1IsIHRoaXMub25FcnJvciwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLk1BTklGRVNUX0xPQURJTkcsIHRoaXMub25NYW5pZmVzdExvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5MRVZFTF9VUERBVEVELCB0aGlzLm9uTGV2ZWxVcGRhdGVkLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by51bnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGlmICghaGxzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGhscy5vZmYoRXZlbnRzLkVSUk9SLCB0aGlzLm9uRXJyb3IsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRVJST1IsIHRoaXMub25FcnJvck91dCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkxFVkVMX1VQREFURUQsIHRoaXMub25MZXZlbFVwZGF0ZWQsIHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy51bnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLmhscyA9IG51bGw7XG4gICAgICB0aGlzLnBlbmFsaXplZFJlbmRpdGlvbnMgPSB7fTtcbiAgICB9O1xuICAgIF9wcm90by5zdGFydExvYWQgPSBmdW5jdGlvbiBzdGFydExvYWQoc3RhcnRQb3NpdGlvbikge307XG4gICAgX3Byb3RvLnN0b3BMb2FkID0gZnVuY3Rpb24gc3RvcExvYWQoKSB7XG4gICAgICB0aGlzLnBsYXlsaXN0RXJyb3IgPSAwO1xuICAgIH07XG4gICAgX3Byb3RvLmdldFZhcmlhbnRMZXZlbEluZGV4ID0gZnVuY3Rpb24gZ2V0VmFyaWFudExldmVsSW5kZXgoZnJhZykge1xuICAgICAgcmV0dXJuIChmcmFnID09IG51bGwgPyB2b2lkIDAgOiBmcmFnLnR5cGUpID09PSBQbGF5bGlzdExldmVsVHlwZS5NQUlOID8gZnJhZy5sZXZlbCA6IHRoaXMuaGxzLmxvYWRMZXZlbDtcbiAgICB9O1xuICAgIF9wcm90by5vbk1hbmlmZXN0TG9hZGluZyA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkaW5nKCkge1xuICAgICAgdGhpcy5wbGF5bGlzdEVycm9yID0gMDtcbiAgICAgIHRoaXMucGVuYWxpemVkUmVuZGl0aW9ucyA9IHt9O1xuICAgIH07XG4gICAgX3Byb3RvLm9uTGV2ZWxVcGRhdGVkID0gZnVuY3Rpb24gb25MZXZlbFVwZGF0ZWQoKSB7XG4gICAgICB0aGlzLnBsYXlsaXN0RXJyb3IgPSAwO1xuICAgIH07XG4gICAgX3Byb3RvLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgX2RhdGEkZnJhZztcbiAgICAgIGlmIChkYXRhLmZhdGFsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIHZhciBjb250ZXh0ID0gZGF0YS5jb250ZXh0O1xuICAgICAgc3dpdGNoIChkYXRhLmRldGFpbHMpIHtcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuRlJBR19MT0FEX0VSUk9SOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5GUkFHX0xPQURfVElNRU9VVDpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuS0VZX0xPQURfRVJST1I6XG4gICAgICAgIGNhc2UgRXJyb3JEZXRhaWxzLktFWV9MT0FEX1RJTUVPVVQ6XG4gICAgICAgICAgZGF0YS5lcnJvckFjdGlvbiA9IHRoaXMuZ2V0RnJhZ1JldHJ5T3JTd2l0Y2hBY3Rpb24oZGF0YSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5GUkFHX1BBUlNJTkdfRVJST1I6XG4gICAgICAgICAgLy8gaWdub3JlIGVtcHR5IHNlZ21lbnQgZXJyb3JzIG1hcmtlZCBhcyBnYXBcbiAgICAgICAgICBpZiAoKF9kYXRhJGZyYWcgPSBkYXRhLmZyYWcpICE9IG51bGwgJiYgX2RhdGEkZnJhZy5nYXApIHtcbiAgICAgICAgICAgIGRhdGEuZXJyb3JBY3Rpb24gPSBjcmVhdGVEb05vdGhpbmdFcnJvckFjdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5GUkFHX0dBUDpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuRlJBR19ERUNSWVBUX0VSUk9SOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIFN3aXRjaCBsZXZlbCBpZiBwb3NzaWJsZSwgb3RoZXJ3aXNlIGFsbG93IHJldHJ5IGNvdW50IHRvIHJlYWNoIG1heCBlcnJvciByZXRyaWVzXG4gICAgICAgICAgICBkYXRhLmVycm9yQWN0aW9uID0gdGhpcy5nZXRGcmFnUmV0cnlPclN3aXRjaEFjdGlvbihkYXRhKTtcbiAgICAgICAgICAgIGRhdGEuZXJyb3JBY3Rpb24uYWN0aW9uID0gTmV0d29ya0Vycm9yQWN0aW9uLlNlbmRBbHRlcm5hdGVUb1BlbmFsdHlCb3g7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5MRVZFTF9FTVBUWV9FUlJPUjpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuTEVWRUxfUEFSU0lOR19FUlJPUjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgX2RhdGEkY29udGV4dCwgX2RhdGEkY29udGV4dCRsZXZlbERlO1xuICAgICAgICAgICAgLy8gT25seSByZXRyeSB3aGVuIGVtcHR5IGFuZCBsaXZlXG4gICAgICAgICAgICB2YXIgbGV2ZWxJbmRleCA9IGRhdGEucGFyZW50ID09PSBQbGF5bGlzdExldmVsVHlwZS5NQUlOID8gZGF0YS5sZXZlbCA6IGhscy5sb2FkTGV2ZWw7XG4gICAgICAgICAgICBpZiAoZGF0YS5kZXRhaWxzID09PSBFcnJvckRldGFpbHMuTEVWRUxfRU1QVFlfRVJST1IgJiYgISEoKF9kYXRhJGNvbnRleHQgPSBkYXRhLmNvbnRleHQpICE9IG51bGwgJiYgKF9kYXRhJGNvbnRleHQkbGV2ZWxEZSA9IF9kYXRhJGNvbnRleHQubGV2ZWxEZXRhaWxzKSAhPSBudWxsICYmIF9kYXRhJGNvbnRleHQkbGV2ZWxEZS5saXZlKSkge1xuICAgICAgICAgICAgICBkYXRhLmVycm9yQWN0aW9uID0gdGhpcy5nZXRQbGF5bGlzdFJldHJ5T3JTd2l0Y2hBY3Rpb24oZGF0YSwgbGV2ZWxJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBFc2NhbGF0ZSB0byBmYXRhbCBpZiBub3QgcmV0cnlpbmcgb3Igc3dpdGNoaW5nXG4gICAgICAgICAgICAgIGRhdGEubGV2ZWxSZXRyeSA9IGZhbHNlO1xuICAgICAgICAgICAgICBkYXRhLmVycm9yQWN0aW9uID0gdGhpcy5nZXRMZXZlbFN3aXRjaEFjdGlvbihkYXRhLCBsZXZlbEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5MRVZFTF9MT0FEX0VSUk9SOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5MRVZFTF9MT0FEX1RJTUVPVVQ6XG4gICAgICAgICAgaWYgKHR5cGVvZiAoY29udGV4dCA9PSBudWxsID8gdm9pZCAwIDogY29udGV4dC5sZXZlbCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBkYXRhLmVycm9yQWN0aW9uID0gdGhpcy5nZXRQbGF5bGlzdFJldHJ5T3JTd2l0Y2hBY3Rpb24oZGF0YSwgY29udGV4dC5sZXZlbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuQVVESU9fVFJBQ0tfTE9BRF9FUlJPUjpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuQVVESU9fVFJBQ0tfTE9BRF9USU1FT1VUOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5TVUJUSVRMRV9MT0FEX0VSUk9SOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5TVUJUSVRMRV9UUkFDS19MT0FEX1RJTUVPVVQ6XG4gICAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBsZXZlbCA9IGhscy5sb2FkTGV2ZWxPYmo7XG4gICAgICAgICAgICBpZiAobGV2ZWwgJiYgKGNvbnRleHQudHlwZSA9PT0gUGxheWxpc3RDb250ZXh0VHlwZS5BVURJT19UUkFDSyAmJiBsZXZlbC5oYXNBdWRpb0dyb3VwKGNvbnRleHQuZ3JvdXBJZCkgfHwgY29udGV4dC50eXBlID09PSBQbGF5bGlzdENvbnRleHRUeXBlLlNVQlRJVExFX1RSQUNLICYmIGxldmVsLmhhc1N1YnRpdGxlR3JvdXAoY29udGV4dC5ncm91cElkKSkpIHtcbiAgICAgICAgICAgICAgLy8gUGVyZm9ybSBQYXRod2F5IHN3aXRjaCBvciBSZWR1bmRhbnQgZmFpbG92ZXIgaWYgcG9zc2libGUgZm9yIGZhc3Rlc3QgcmVjb3ZlcnlcbiAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGFsbG93IHBsYXlsaXN0IHJldHJ5IGNvdW50IHRvIHJlYWNoIG1heCBlcnJvciByZXRyaWVzXG4gICAgICAgICAgICAgIGRhdGEuZXJyb3JBY3Rpb24gPSB0aGlzLmdldFBsYXlsaXN0UmV0cnlPclN3aXRjaEFjdGlvbihkYXRhLCBobHMubG9hZExldmVsKTtcbiAgICAgICAgICAgICAgZGF0YS5lcnJvckFjdGlvbi5hY3Rpb24gPSBOZXR3b3JrRXJyb3JBY3Rpb24uU2VuZEFsdGVybmF0ZVRvUGVuYWx0eUJveDtcbiAgICAgICAgICAgICAgZGF0YS5lcnJvckFjdGlvbi5mbGFncyA9IEVycm9yQWN0aW9uRmxhZ3MuTW92ZUFsbEFsdGVybmF0ZXNNYXRjaGluZ0hvc3Q7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5LRVlfU1lTVEVNX1NUQVRVU19PVVRQVVRfUkVTVFJJQ1RFRDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgX2xldmVsID0gaGxzLmxvYWRMZXZlbE9iajtcbiAgICAgICAgICAgIHZhciByZXN0cmljdGVkSGRjcExldmVsID0gX2xldmVsID09IG51bGwgPyB2b2lkIDAgOiBfbGV2ZWwuYXR0cnNbJ0hEQ1AtTEVWRUwnXTtcbiAgICAgICAgICAgIGlmIChyZXN0cmljdGVkSGRjcExldmVsKSB7XG4gICAgICAgICAgICAgIGRhdGEuZXJyb3JBY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBOZXR3b3JrRXJyb3JBY3Rpb24uU2VuZEFsdGVybmF0ZVRvUGVuYWx0eUJveCxcbiAgICAgICAgICAgICAgICBmbGFnczogRXJyb3JBY3Rpb25GbGFncy5Nb3ZlQWxsQWx0ZXJuYXRlc01hdGNoaW5nSERDUCxcbiAgICAgICAgICAgICAgICBoZGNwTGV2ZWw6IHJlc3RyaWN0ZWRIZGNwTGV2ZWxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMua2V5U3lzdGVtRXJyb3IoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuQlVGRkVSX0FERF9DT0RFQ19FUlJPUjpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuUkVNVVhfQUxMT0NfRVJST1I6XG4gICAgICAgIGNhc2UgRXJyb3JEZXRhaWxzLkJVRkZFUl9BUFBFTkRfRVJST1I6XG4gICAgICAgICAgLy8gQnVmZmVyLWNvbnRyb2xsZXIgY2FuIHNldCBlcnJvckFjdGlvbiB3aGVuIGFwcGVuZCBlcnJvcnMgY2FuIGJlIGlnbm9yZWQgb3IgcmVzb2x2ZWQgbG9jYWxseVxuICAgICAgICAgIGlmICghZGF0YS5lcnJvckFjdGlvbikge1xuICAgICAgICAgICAgdmFyIF9kYXRhJGxldmVsO1xuICAgICAgICAgICAgZGF0YS5lcnJvckFjdGlvbiA9IHRoaXMuZ2V0TGV2ZWxTd2l0Y2hBY3Rpb24oZGF0YSwgKF9kYXRhJGxldmVsID0gZGF0YS5sZXZlbCkgIT0gbnVsbCA/IF9kYXRhJGxldmVsIDogaGxzLmxvYWRMZXZlbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuSU5URVJOQUxfRVhDRVBUSU9OOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5CVUZGRVJfQVBQRU5ESU5HX0VSUk9SOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5CVUZGRVJfRlVMTF9FUlJPUjpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuTEVWRUxfU1dJVENIX0VSUk9SOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5CVUZGRVJfU1RBTExFRF9FUlJPUjpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuQlVGRkVSX1NFRUtfT1ZFUl9IT0xFOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5CVUZGRVJfTlVER0VfT05fU1RBTEw6XG4gICAgICAgICAgZGF0YS5lcnJvckFjdGlvbiA9IGNyZWF0ZURvTm90aGluZ0Vycm9yQWN0aW9uKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEudHlwZSA9PT0gRXJyb3JUeXBlcy5LRVlfU1lTVEVNX0VSUk9SKSB7XG4gICAgICAgIHRoaXMua2V5U3lzdGVtRXJyb3IoZGF0YSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ua2V5U3lzdGVtRXJyb3IgPSBmdW5jdGlvbiBrZXlTeXN0ZW1FcnJvcihkYXRhKSB7XG4gICAgICB2YXIgbGV2ZWxJbmRleCA9IHRoaXMuZ2V0VmFyaWFudExldmVsSW5kZXgoZGF0YS5mcmFnKTtcbiAgICAgIC8vIERvIG5vdCByZXRyeSBsZXZlbC4gRXNjYWxhdGUgdG8gZmF0YWwgaWYgc3dpdGNoaW5nIGxldmVscyBmYWlscy5cbiAgICAgIGRhdGEubGV2ZWxSZXRyeSA9IGZhbHNlO1xuICAgICAgZGF0YS5lcnJvckFjdGlvbiA9IHRoaXMuZ2V0TGV2ZWxTd2l0Y2hBY3Rpb24oZGF0YSwgbGV2ZWxJbmRleCk7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0UGxheWxpc3RSZXRyeU9yU3dpdGNoQWN0aW9uID0gZnVuY3Rpb24gZ2V0UGxheWxpc3RSZXRyeU9yU3dpdGNoQWN0aW9uKGRhdGEsIGxldmVsSW5kZXgpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIHZhciByZXRyeUNvbmZpZyA9IGdldFJldHJ5Q29uZmlnKGhscy5jb25maWcucGxheWxpc3RMb2FkUG9saWN5LCBkYXRhKTtcbiAgICAgIHZhciByZXRyeUNvdW50ID0gdGhpcy5wbGF5bGlzdEVycm9yKys7XG4gICAgICB2YXIgcmV0cnkgPSBzaG91bGRSZXRyeShyZXRyeUNvbmZpZywgcmV0cnlDb3VudCwgaXNUaW1lb3V0RXJyb3IoZGF0YSksIGRhdGEucmVzcG9uc2UpO1xuICAgICAgaWYgKHJldHJ5KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYWN0aW9uOiBOZXR3b3JrRXJyb3JBY3Rpb24uUmV0cnlSZXF1ZXN0LFxuICAgICAgICAgIGZsYWdzOiBFcnJvckFjdGlvbkZsYWdzLk5vbmUsXG4gICAgICAgICAgcmV0cnlDb25maWc6IHJldHJ5Q29uZmlnLFxuICAgICAgICAgIHJldHJ5Q291bnQ6IHJldHJ5Q291bnRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBlcnJvckFjdGlvbiA9IHRoaXMuZ2V0TGV2ZWxTd2l0Y2hBY3Rpb24oZGF0YSwgbGV2ZWxJbmRleCk7XG4gICAgICBpZiAocmV0cnlDb25maWcpIHtcbiAgICAgICAgZXJyb3JBY3Rpb24ucmV0cnlDb25maWcgPSByZXRyeUNvbmZpZztcbiAgICAgICAgZXJyb3JBY3Rpb24ucmV0cnlDb3VudCA9IHJldHJ5Q291bnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXJyb3JBY3Rpb247XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0RnJhZ1JldHJ5T3JTd2l0Y2hBY3Rpb24gPSBmdW5jdGlvbiBnZXRGcmFnUmV0cnlPclN3aXRjaEFjdGlvbihkYXRhKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICAvLyBTaGFyZSBmcmFnbWVudCBlcnJvciBjb3VudCBhY2Nyb3NzIG1lZGlhIG9wdGlvbnMgKG1haW4sIGF1ZGlvLCBzdWJzKVxuICAgICAgLy8gVGhpcyBhbGxvd3MgZm9yIGxldmVsIGJhc2VkIHJlbmRpdGlvbiBzd2l0Y2hpbmcgd2hlbiBtZWRpYSBvcHRpb24gYXNzZXRzIGZhaWxcbiAgICAgIHZhciB2YXJpYW50TGV2ZWxJbmRleCA9IHRoaXMuZ2V0VmFyaWFudExldmVsSW5kZXgoZGF0YS5mcmFnKTtcbiAgICAgIHZhciBsZXZlbCA9IGhscy5sZXZlbHNbdmFyaWFudExldmVsSW5kZXhdO1xuICAgICAgdmFyIF9obHMkY29uZmlnID0gaGxzLmNvbmZpZyxcbiAgICAgICAgZnJhZ0xvYWRQb2xpY3kgPSBfaGxzJGNvbmZpZy5mcmFnTG9hZFBvbGljeSxcbiAgICAgICAga2V5TG9hZFBvbGljeSA9IF9obHMkY29uZmlnLmtleUxvYWRQb2xpY3k7XG4gICAgICB2YXIgcmV0cnlDb25maWcgPSBnZXRSZXRyeUNvbmZpZyhkYXRhLmRldGFpbHMuc3RhcnRzV2l0aCgna2V5JykgPyBrZXlMb2FkUG9saWN5IDogZnJhZ0xvYWRQb2xpY3ksIGRhdGEpO1xuICAgICAgdmFyIGZyYWdtZW50RXJyb3JzID0gaGxzLmxldmVscy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIGFjYyArIGxldmVsLmZyYWdtZW50RXJyb3I7XG4gICAgICB9LCAwKTtcbiAgICAgIC8vIFN3aXRjaCBsZXZlbHMgd2hlbiBvdXQgb2YgcmV0cmllZCBvciBsZXZlbCBpbmRleCBvdXQgb2YgYm91bmRzXG4gICAgICBpZiAobGV2ZWwpIHtcbiAgICAgICAgaWYgKGRhdGEuZGV0YWlscyAhPT0gRXJyb3JEZXRhaWxzLkZSQUdfR0FQKSB7XG4gICAgICAgICAgbGV2ZWwuZnJhZ21lbnRFcnJvcisrO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXRyeSA9IHNob3VsZFJldHJ5KHJldHJ5Q29uZmlnLCBmcmFnbWVudEVycm9ycywgaXNUaW1lb3V0RXJyb3IoZGF0YSksIGRhdGEucmVzcG9uc2UpO1xuICAgICAgICBpZiAocmV0cnkpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWN0aW9uOiBOZXR3b3JrRXJyb3JBY3Rpb24uUmV0cnlSZXF1ZXN0LFxuICAgICAgICAgICAgZmxhZ3M6IEVycm9yQWN0aW9uRmxhZ3MuTm9uZSxcbiAgICAgICAgICAgIHJldHJ5Q29uZmlnOiByZXRyeUNvbmZpZyxcbiAgICAgICAgICAgIHJldHJ5Q291bnQ6IGZyYWdtZW50RXJyb3JzXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gUmVhY2ggbWF4IHJldHJ5IGNvdW50LCBvciBNaXNzaW5nIGxldmVsIHJlZmVyZW5jZVxuICAgICAgLy8gU3dpdGNoIHRvIHZhbGlkIGluZGV4XG4gICAgICB2YXIgZXJyb3JBY3Rpb24gPSB0aGlzLmdldExldmVsU3dpdGNoQWN0aW9uKGRhdGEsIHZhcmlhbnRMZXZlbEluZGV4KTtcbiAgICAgIC8vIEFkZCByZXRyeSBkZXRhaWxzIHRvIGFsbG93IHNraXBwaW5nIG9mIEZSQUdfUEFSU0lOR19FUlJPUlxuICAgICAgaWYgKHJldHJ5Q29uZmlnKSB7XG4gICAgICAgIGVycm9yQWN0aW9uLnJldHJ5Q29uZmlnID0gcmV0cnlDb25maWc7XG4gICAgICAgIGVycm9yQWN0aW9uLnJldHJ5Q291bnQgPSBmcmFnbWVudEVycm9ycztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlcnJvckFjdGlvbjtcbiAgICB9O1xuICAgIF9wcm90by5nZXRMZXZlbFN3aXRjaEFjdGlvbiA9IGZ1bmN0aW9uIGdldExldmVsU3dpdGNoQWN0aW9uKGRhdGEsIGxldmVsSW5kZXgpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGlmIChsZXZlbEluZGV4ID09PSBudWxsIHx8IGxldmVsSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXZlbEluZGV4ID0gaGxzLmxvYWRMZXZlbDtcbiAgICAgIH1cbiAgICAgIHZhciBsZXZlbCA9IHRoaXMuaGxzLmxldmVsc1tsZXZlbEluZGV4XTtcbiAgICAgIGlmIChsZXZlbCkge1xuICAgICAgICB2YXIgX2RhdGEkZnJhZzIsIF9kYXRhJGNvbnRleHQyO1xuICAgICAgICB2YXIgZXJyb3JEZXRhaWxzID0gZGF0YS5kZXRhaWxzO1xuICAgICAgICBsZXZlbC5sb2FkRXJyb3IrKztcbiAgICAgICAgaWYgKGVycm9yRGV0YWlscyA9PT0gRXJyb3JEZXRhaWxzLkJVRkZFUl9BUFBFTkRfRVJST1IpIHtcbiAgICAgICAgICBsZXZlbC5mcmFnbWVudEVycm9yKys7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2VhcmNoIGZvciBuZXh0IGxldmVsIHRvIHJldHJ5XG4gICAgICAgIHZhciBuZXh0TGV2ZWwgPSAtMTtcbiAgICAgICAgdmFyIGxldmVscyA9IGhscy5sZXZlbHMsXG4gICAgICAgICAgbG9hZExldmVsID0gaGxzLmxvYWRMZXZlbCxcbiAgICAgICAgICBtaW5BdXRvTGV2ZWwgPSBobHMubWluQXV0b0xldmVsLFxuICAgICAgICAgIG1heEF1dG9MZXZlbCA9IGhscy5tYXhBdXRvTGV2ZWw7XG4gICAgICAgIGlmICghaGxzLmF1dG9MZXZlbEVuYWJsZWQgJiYgIWhscy5jb25maWcucHJlc2VydmVNYW51YWxMZXZlbE9uRXJyb3IpIHtcbiAgICAgICAgICBobHMubG9hZExldmVsID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZyYWdFcnJvclR5cGUgPSAoX2RhdGEkZnJhZzIgPSBkYXRhLmZyYWcpID09IG51bGwgPyB2b2lkIDAgOiBfZGF0YSRmcmFnMi50eXBlO1xuICAgICAgICAvLyBGaW5kIGFsdGVybmF0ZSBhdWRpbyBjb2RlYyBpZiBhdmFpbGFibGUgb24gYXVkaW8gY29kZWMgZXJyb3JcbiAgICAgICAgdmFyIGlzQXVkaW9Db2RlY0Vycm9yID0gZnJhZ0Vycm9yVHlwZSA9PT0gUGxheWxpc3RMZXZlbFR5cGUuQVVESU8gJiYgZXJyb3JEZXRhaWxzID09PSBFcnJvckRldGFpbHMuRlJBR19QQVJTSU5HX0VSUk9SIHx8IGRhdGEuc291cmNlQnVmZmVyTmFtZSA9PT0gJ2F1ZGlvJyAmJiAoZXJyb3JEZXRhaWxzID09PSBFcnJvckRldGFpbHMuQlVGRkVSX0FERF9DT0RFQ19FUlJPUiB8fCBlcnJvckRldGFpbHMgPT09IEVycm9yRGV0YWlscy5CVUZGRVJfQVBQRU5EX0VSUk9SKTtcbiAgICAgICAgdmFyIGZpbmRBdWRpb0NvZGVjQWx0ZXJuYXRlID0gaXNBdWRpb0NvZGVjRXJyb3IgJiYgbGV2ZWxzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICB2YXIgYXVkaW9Db2RlYyA9IF9yZWYuYXVkaW9Db2RlYztcbiAgICAgICAgICByZXR1cm4gbGV2ZWwuYXVkaW9Db2RlYyAhPT0gYXVkaW9Db2RlYztcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEZpbmQgYWx0ZXJuYXRlIHZpZGVvIGNvZGVjIGlmIGF2YWlsYWJsZSBvbiB2aWRlbyBjb2RlYyBlcnJvclxuICAgICAgICB2YXIgaXNWaWRlb0NvZGVjRXJyb3IgPSBkYXRhLnNvdXJjZUJ1ZmZlck5hbWUgPT09ICd2aWRlbycgJiYgKGVycm9yRGV0YWlscyA9PT0gRXJyb3JEZXRhaWxzLkJVRkZFUl9BRERfQ09ERUNfRVJST1IgfHwgZXJyb3JEZXRhaWxzID09PSBFcnJvckRldGFpbHMuQlVGRkVSX0FQUEVORF9FUlJPUik7XG4gICAgICAgIHZhciBmaW5kVmlkZW9Db2RlY0FsdGVybmF0ZSA9IGlzVmlkZW9Db2RlY0Vycm9yICYmIGxldmVscy5zb21lKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgIHZhciBjb2RlY1NldCA9IF9yZWYyLmNvZGVjU2V0LFxuICAgICAgICAgICAgYXVkaW9Db2RlYyA9IF9yZWYyLmF1ZGlvQ29kZWM7XG4gICAgICAgICAgcmV0dXJuIGxldmVsLmNvZGVjU2V0ICE9PSBjb2RlY1NldCAmJiBsZXZlbC5hdWRpb0NvZGVjID09PSBhdWRpb0NvZGVjO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9yZWYzID0gKF9kYXRhJGNvbnRleHQyID0gZGF0YS5jb250ZXh0KSAhPSBudWxsID8gX2RhdGEkY29udGV4dDIgOiB7fSxcbiAgICAgICAgICBwbGF5bGlzdEVycm9yVHlwZSA9IF9yZWYzLnR5cGUsXG4gICAgICAgICAgcGxheWxpc3RFcnJvckdyb3VwSWQgPSBfcmVmMy5ncm91cElkO1xuICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICAgICAgICAgIHZhciBjYW5kaWRhdGUgPSAoaSArIGxvYWRMZXZlbCkgJSBsZXZlbHMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSAhPT0gbG9hZExldmVsICYmIGNhbmRpZGF0ZSA+PSBtaW5BdXRvTGV2ZWwgJiYgY2FuZGlkYXRlIDw9IG1heEF1dG9MZXZlbCAmJiBsZXZlbHNbY2FuZGlkYXRlXS5sb2FkRXJyb3IgPT09IDApIHtcbiAgICAgICAgICAgICAgdmFyIF9sZXZlbCRhdWRpb0dyb3VwcywgX2xldmVsJHN1YnRpdGxlR3JvdXBzO1xuICAgICAgICAgICAgICB2YXIgbGV2ZWxDYW5kaWRhdGUgPSBsZXZlbHNbY2FuZGlkYXRlXTtcbiAgICAgICAgICAgICAgLy8gU2tpcCBsZXZlbCBzd2l0Y2ggaWYgR0FQIHRhZyBpcyBmb3VuZCBpbiBuZXh0IGxldmVsIGF0IHNhbWUgcG9zaXRpb25cbiAgICAgICAgICAgICAgaWYgKGVycm9yRGV0YWlscyA9PT0gRXJyb3JEZXRhaWxzLkZSQUdfR0FQICYmIGZyYWdFcnJvclR5cGUgPT09IFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU4gJiYgZGF0YS5mcmFnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxldmVsRGV0YWlscyA9IGxldmVsc1tjYW5kaWRhdGVdLmRldGFpbHM7XG4gICAgICAgICAgICAgICAgaWYgKGxldmVsRGV0YWlscykge1xuICAgICAgICAgICAgICAgICAgdmFyIGZyYWdDYW5kaWRhdGUgPSBmaW5kRnJhZ21lbnRCeVBUUyhkYXRhLmZyYWcsIGxldmVsRGV0YWlscy5mcmFnbWVudHMsIGRhdGEuZnJhZy5zdGFydCk7XG4gICAgICAgICAgICAgICAgICBpZiAoZnJhZ0NhbmRpZGF0ZSAhPSBudWxsICYmIGZyYWdDYW5kaWRhdGUuZ2FwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwOyAvLyBjb250aW51ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwbGF5bGlzdEVycm9yVHlwZSA9PT0gUGxheWxpc3RDb250ZXh0VHlwZS5BVURJT19UUkFDSyAmJiBsZXZlbENhbmRpZGF0ZS5oYXNBdWRpb0dyb3VwKHBsYXlsaXN0RXJyb3JHcm91cElkKSB8fCBwbGF5bGlzdEVycm9yVHlwZSA9PT0gUGxheWxpc3RDb250ZXh0VHlwZS5TVUJUSVRMRV9UUkFDSyAmJiBsZXZlbENhbmRpZGF0ZS5oYXNTdWJ0aXRsZUdyb3VwKHBsYXlsaXN0RXJyb3JHcm91cElkKSkge1xuICAgICAgICAgICAgICAgIC8vIEZvciBhdWRpby9zdWJzIHBsYXlsaXN0IGVycm9ycyBmaW5kIGFub3RoZXIgZ3JvdXAgSUQgb3IgZmFsbHRocm91Z2ggdG8gcmVkdW5kYW50IGZhaWwtb3ZlclxuICAgICAgICAgICAgICAgIHJldHVybiAwOyAvLyBjb250aW51ZVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZyYWdFcnJvclR5cGUgPT09IFBsYXlsaXN0TGV2ZWxUeXBlLkFVRElPICYmIChfbGV2ZWwkYXVkaW9Hcm91cHMgPSBsZXZlbC5hdWRpb0dyb3VwcykgIT0gbnVsbCAmJiBfbGV2ZWwkYXVkaW9Hcm91cHMuc29tZShmdW5jdGlvbiAoZ3JvdXBJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsZXZlbENhbmRpZGF0ZS5oYXNBdWRpb0dyb3VwKGdyb3VwSWQpO1xuICAgICAgICAgICAgICB9KSB8fCBmcmFnRXJyb3JUeXBlID09PSBQbGF5bGlzdExldmVsVHlwZS5TVUJUSVRMRSAmJiAoX2xldmVsJHN1YnRpdGxlR3JvdXBzID0gbGV2ZWwuc3VidGl0bGVHcm91cHMpICE9IG51bGwgJiYgX2xldmVsJHN1YnRpdGxlR3JvdXBzLnNvbWUoZnVuY3Rpb24gKGdyb3VwSWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGV2ZWxDYW5kaWRhdGUuaGFzU3VidGl0bGVHcm91cChncm91cElkKTtcbiAgICAgICAgICAgICAgfSkgfHwgZmluZEF1ZGlvQ29kZWNBbHRlcm5hdGUgJiYgbGV2ZWwuYXVkaW9Db2RlYyA9PT0gbGV2ZWxDYW5kaWRhdGUuYXVkaW9Db2RlYyB8fCAhZmluZEF1ZGlvQ29kZWNBbHRlcm5hdGUgJiYgbGV2ZWwuYXVkaW9Db2RlYyAhPT0gbGV2ZWxDYW5kaWRhdGUuYXVkaW9Db2RlYyB8fCBmaW5kVmlkZW9Db2RlY0FsdGVybmF0ZSAmJiBsZXZlbC5jb2RlY1NldCA9PT0gbGV2ZWxDYW5kaWRhdGUuY29kZWNTZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgdmlkZW8vYXVkaW8vc3VicyBmcmFnIGVycm9ycyBmaW5kIGFub3RoZXIgZ3JvdXAgSUQgb3IgZmFsbHRocm91Z2ggdG8gcmVkdW5kYW50IGZhaWwtb3ZlclxuICAgICAgICAgICAgICAgIHJldHVybiAwOyAvLyBjb250aW51ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5leHRMZXZlbCA9IGNhbmRpZGF0ZTtcbiAgICAgICAgICAgICAgcmV0dXJuIDE7IC8vIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBfcmV0O1xuICAgICAgICBmb3IgKHZhciBpID0gbGV2ZWxzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgIF9yZXQgPSBfbG9vcCgpO1xuICAgICAgICAgIGlmIChfcmV0ID09PSAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAoX3JldCA9PT0gMSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRMZXZlbCA+IC0xICYmIGhscy5sb2FkTGV2ZWwgIT09IG5leHRMZXZlbCkge1xuICAgICAgICAgIGRhdGEubGV2ZWxSZXRyeSA9IHRydWU7XG4gICAgICAgICAgdGhpcy5wbGF5bGlzdEVycm9yID0gMDtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWN0aW9uOiBOZXR3b3JrRXJyb3JBY3Rpb24uU2VuZEFsdGVybmF0ZVRvUGVuYWx0eUJveCxcbiAgICAgICAgICAgIGZsYWdzOiBFcnJvckFjdGlvbkZsYWdzLk5vbmUsXG4gICAgICAgICAgICBuZXh0QXV0b0xldmVsOiBuZXh0TGV2ZWxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBObyBsZXZlbHMgdG8gc3dpdGNoIC8gTWFudWFsIGxldmVsIHNlbGVjdGlvbiAvIExldmVsIG5vdCBmb3VuZFxuICAgICAgLy8gUmVzb2x2ZSB3aXRoIFBhdGh3YXkgc3dpdGNoLCBSZWR1bmRhbnQgZmFpbC1vdmVyLCBvciBzdGF5IG9uIGxvd2VzdCBMZXZlbFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWN0aW9uOiBOZXR3b3JrRXJyb3JBY3Rpb24uU2VuZEFsdGVybmF0ZVRvUGVuYWx0eUJveCxcbiAgICAgICAgZmxhZ3M6IEVycm9yQWN0aW9uRmxhZ3MuTW92ZUFsbEFsdGVybmF0ZXNNYXRjaGluZ0hvc3RcbiAgICAgIH07XG4gICAgfTtcbiAgICBfcHJvdG8ub25FcnJvck91dCA9IGZ1bmN0aW9uIG9uRXJyb3JPdXQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfZGF0YSRlcnJvckFjdGlvbjtcbiAgICAgIHN3aXRjaCAoKF9kYXRhJGVycm9yQWN0aW9uID0gZGF0YS5lcnJvckFjdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhJGVycm9yQWN0aW9uLmFjdGlvbikge1xuICAgICAgICBjYXNlIE5ldHdvcmtFcnJvckFjdGlvbi5Eb05vdGhpbmc6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTmV0d29ya0Vycm9yQWN0aW9uLlNlbmRBbHRlcm5hdGVUb1BlbmFsdHlCb3g6XG4gICAgICAgICAgdGhpcy5zZW5kQWx0ZXJuYXRlVG9QZW5hbHR5Qm94KGRhdGEpO1xuICAgICAgICAgIGlmICghZGF0YS5lcnJvckFjdGlvbi5yZXNvbHZlZCAmJiBkYXRhLmRldGFpbHMgIT09IEVycm9yRGV0YWlscy5GUkFHX0dBUCkge1xuICAgICAgICAgICAgZGF0YS5mYXRhbCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmICgvTWVkaWFTb3VyY2UgcmVhZHlTdGF0ZTogZW5kZWQvLnRlc3QoZGF0YS5lcnJvci5tZXNzYWdlKSkge1xuICAgICAgICAgICAgdGhpcy53YXJuKFwiTWVkaWFTb3VyY2UgZW5kZWQgYWZ0ZXIgXFxcIlwiICsgZGF0YS5zb3VyY2VCdWZmZXJOYW1lICsgXCJcXFwiIHNvdXJjZUJ1ZmZlciBhcHBlbmQgZXJyb3IuIEF0dGVtcHRpbmcgdG8gcmVjb3ZlciBmcm9tIG1lZGlhIGVycm9yLlwiKTtcbiAgICAgICAgICAgIHRoaXMuaGxzLnJlY292ZXJNZWRpYUVycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEuZmF0YWwpIHtcbiAgICAgICAgdGhpcy5obHMuc3RvcExvYWQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnNlbmRBbHRlcm5hdGVUb1BlbmFsdHlCb3ggPSBmdW5jdGlvbiBzZW5kQWx0ZXJuYXRlVG9QZW5hbHR5Qm94KGRhdGEpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIHZhciBlcnJvckFjdGlvbiA9IGRhdGEuZXJyb3JBY3Rpb247XG4gICAgICBpZiAoIWVycm9yQWN0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBmbGFncyA9IGVycm9yQWN0aW9uLmZsYWdzLFxuICAgICAgICBoZGNwTGV2ZWwgPSBlcnJvckFjdGlvbi5oZGNwTGV2ZWwsXG4gICAgICAgIG5leHRBdXRvTGV2ZWwgPSBlcnJvckFjdGlvbi5uZXh0QXV0b0xldmVsO1xuICAgICAgc3dpdGNoIChmbGFncykge1xuICAgICAgICBjYXNlIEVycm9yQWN0aW9uRmxhZ3MuTm9uZTpcbiAgICAgICAgICB0aGlzLnN3aXRjaExldmVsKGRhdGEsIG5leHRBdXRvTGV2ZWwpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVycm9yQWN0aW9uRmxhZ3MuTW92ZUFsbEFsdGVybmF0ZXNNYXRjaGluZ0hEQ1A6XG4gICAgICAgICAgaWYgKGhkY3BMZXZlbCkge1xuICAgICAgICAgICAgaGxzLm1heEhkY3BMZXZlbCA9IEhkY3BMZXZlbHNbSGRjcExldmVscy5pbmRleE9mKGhkY3BMZXZlbCkgLSAxXTtcbiAgICAgICAgICAgIGVycm9yQWN0aW9uLnJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy53YXJuKFwiUmVzdHJpY3RpbmcgcGxheWJhY2sgdG8gSERDUC1MRVZFTCBvZiBcXFwiXCIgKyBobHMubWF4SGRjcExldmVsICsgXCJcXFwiIG9yIGxvd2VyXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gSWYgbm90IHJlc29sdmVkIGJ5IHByZXZpb3VzIGFjdGlvbnMgdHJ5IHRvIHN3aXRjaCB0byBuZXh0IGxldmVsXG4gICAgICBpZiAoIWVycm9yQWN0aW9uLnJlc29sdmVkKSB7XG4gICAgICAgIHRoaXMuc3dpdGNoTGV2ZWwoZGF0YSwgbmV4dEF1dG9MZXZlbCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uc3dpdGNoTGV2ZWwgPSBmdW5jdGlvbiBzd2l0Y2hMZXZlbChkYXRhLCBsZXZlbEluZGV4KSB7XG4gICAgICBpZiAobGV2ZWxJbmRleCAhPT0gdW5kZWZpbmVkICYmIGRhdGEuZXJyb3JBY3Rpb24pIHtcbiAgICAgICAgdGhpcy53YXJuKFwic3dpdGNoaW5nIHRvIGxldmVsIFwiICsgbGV2ZWxJbmRleCArIFwiIGFmdGVyIFwiICsgZGF0YS5kZXRhaWxzKTtcbiAgICAgICAgdGhpcy5obHMubmV4dEF1dG9MZXZlbCA9IGxldmVsSW5kZXg7XG4gICAgICAgIGRhdGEuZXJyb3JBY3Rpb24ucmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAvLyBTdHJlYW0gY29udHJvbGxlciBpcyByZXNwb25zaWJsZSBmb3IgdGhpcyBidXQgd29uJ3Qgc3dpdGNoIG9uIGZhbHNlIHN0YXJ0XG4gICAgICAgIHRoaXMuaGxzLm5leHRMb2FkTGV2ZWwgPSB0aGlzLmhscy5uZXh0QXV0b0xldmVsO1xuICAgICAgICBpZiAoZGF0YS5kZXRhaWxzID09PSBFcnJvckRldGFpbHMuQlVGRkVSX0FERF9DT0RFQ19FUlJPUiAmJiBkYXRhLm1pbWVUeXBlICYmIGRhdGEuc291cmNlQnVmZmVyTmFtZSAhPT0gJ2F1ZGlvdmlkZW8nKSB7XG4gICAgICAgICAgdmFyIGNvZGVjID0gZ2V0Q29kZWNzRm9yTWltZVR5cGUoZGF0YS5taW1lVHlwZSk7XG4gICAgICAgICAgdmFyIGxldmVscyA9IHRoaXMuaGxzLmxldmVscztcbiAgICAgICAgICBmb3IgKHZhciBpID0gbGV2ZWxzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgaWYgKGxldmVsc1tpXVtkYXRhLnNvdXJjZUJ1ZmZlck5hbWUgKyBcIkNvZGVjXCJdID09PSBjb2RlYykge1xuICAgICAgICAgICAgICB0aGlzLmhscy5yZW1vdmVMZXZlbChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBFcnJvckNvbnRyb2xsZXI7XG4gIH0oTG9nZ2VyKTtcbiAgZnVuY3Rpb24gY3JlYXRlRG9Ob3RoaW5nRXJyb3JBY3Rpb24ocmVzb2x2ZWQpIHtcbiAgICB2YXIgZXJyb3JBY3Rpb24gPSB7XG4gICAgICBhY3Rpb246IE5ldHdvcmtFcnJvckFjdGlvbi5Eb05vdGhpbmcsXG4gICAgICBmbGFnczogRXJyb3JBY3Rpb25GbGFncy5Ob25lXG4gICAgfTtcbiAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgIGVycm9yQWN0aW9uLnJlc29sdmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yQWN0aW9uO1xuICB9XG5cbiAgdmFyIEZyYWdtZW50U3RhdGUgPSB7XG4gICAgTk9UX0xPQURFRDogXCJOT1RfTE9BREVEXCIsXG4gICAgQVBQRU5ESU5HOiBcIkFQUEVORElOR1wiLFxuICAgIFBBUlRJQUw6IFwiUEFSVElBTFwiLFxuICAgIE9LOiBcIk9LXCJcbiAgfTtcbiAgdmFyIEZyYWdtZW50VHJhY2tlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnJhZ21lbnRUcmFja2VyKGhscykge1xuICAgICAgdGhpcy5hY3RpdmVQYXJ0TGlzdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgdGhpcy5lbmRMaXN0RnJhZ21lbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHRoaXMuZnJhZ21lbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHRoaXMudGltZVJhbmdlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB0aGlzLmJ1ZmZlclBhZGRpbmcgPSAwLjI7XG4gICAgICB0aGlzLmhscyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuaGFzR2FwcyA9IGZhbHNlO1xuICAgICAgdGhpcy5obHMgPSBobHM7XG4gICAgICB0aGlzLl9yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgIH1cbiAgICB2YXIgX3Byb3RvID0gRnJhZ21lbnRUcmFja2VyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8uX3JlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gX3JlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuQlVGRkVSX0FQUEVOREVELCB0aGlzLm9uQnVmZmVyQXBwZW5kZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5GUkFHX0JVRkZFUkVELCB0aGlzLm9uRnJhZ0J1ZmZlcmVkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuRlJBR19MT0FERUQsIHRoaXMub25GcmFnTG9hZGVkLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by5fdW5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIF91bnJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUFOSUZFU1RfTE9BRElORywgdGhpcy5vbk1hbmlmZXN0TG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5CVUZGRVJfQVBQRU5ERUQsIHRoaXMub25CdWZmZXJBcHBlbmRlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5GUkFHX0JVRkZFUkVELCB0aGlzLm9uRnJhZ0J1ZmZlcmVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkZSQUdfTE9BREVELCB0aGlzLm9uRnJhZ0xvYWRlZCwgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLl91bnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLmZyYWdtZW50cyA9XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLmFjdGl2ZVBhcnRMaXN0cyA9XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLmVuZExpc3RGcmFnbWVudHMgPSB0aGlzLnRpbWVSYW5nZXMgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIEZyYWdtZW50IG9yIFBhcnQgd2l0aCBhbiBhcHBlbmRlZCByYW5nZSB0aGF0IG1hdGNoZXMgdGhlIHBvc2l0aW9uIGFuZCBsZXZlbFR5cGVcbiAgICAgKiBPdGhlcndpc2UsIHJldHVybiBudWxsXG4gICAgICovO1xuICAgIF9wcm90by5nZXRBcHBlbmRlZEZyYWcgPSBmdW5jdGlvbiBnZXRBcHBlbmRlZEZyYWcocG9zaXRpb24sIGxldmVsVHlwZSkge1xuICAgICAgdmFyIGFjdGl2ZVBhcnRzID0gdGhpcy5hY3RpdmVQYXJ0TGlzdHNbbGV2ZWxUeXBlXTtcbiAgICAgIGlmIChhY3RpdmVQYXJ0cykge1xuICAgICAgICBmb3IgKHZhciBpID0gYWN0aXZlUGFydHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgdmFyIGFjdGl2ZVBhcnQgPSBhY3RpdmVQYXJ0c1tpXTtcbiAgICAgICAgICBpZiAoIWFjdGl2ZVBhcnQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgYXBwZW5kZWRQVFMgPSBhY3RpdmVQYXJ0LmVuZDtcbiAgICAgICAgICBpZiAoYWN0aXZlUGFydC5zdGFydCA8PSBwb3NpdGlvbiAmJiBhcHBlbmRlZFBUUyAhPT0gbnVsbCAmJiBwb3NpdGlvbiA8PSBhcHBlbmRlZFBUUykge1xuICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZVBhcnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXJlZEZyYWcocG9zaXRpb24sIGxldmVsVHlwZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgYnVmZmVyZWQgRnJhZ21lbnQgdGhhdCBtYXRjaGVzIHRoZSBwb3NpdGlvbiBhbmQgbGV2ZWxUeXBlLlxuICAgICAqIEEgYnVmZmVyZWQgRnJhZ21lbnQgaXMgb25lIHdob3NlIGxvYWRpbmcsIHBhcnNpbmcgYW5kIGFwcGVuZGluZyBpcyBkb25lIChjb21wbGV0ZWQgb3IgXCJwYXJ0aWFsXCIgbWVhbmluZyBhYm9ydGVkKS5cbiAgICAgKiBJZiBub3QgZm91bmQgYW55IEZyYWdtZW50LCByZXR1cm4gbnVsbFxuICAgICAqLztcbiAgICBfcHJvdG8uZ2V0QnVmZmVyZWRGcmFnID0gZnVuY3Rpb24gZ2V0QnVmZmVyZWRGcmFnKHBvc2l0aW9uLCBsZXZlbFR5cGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEZyYWdBdFBvcyhwb3NpdGlvbiwgbGV2ZWxUeXBlLCB0cnVlKTtcbiAgICB9O1xuICAgIF9wcm90by5nZXRGcmFnQXRQb3MgPSBmdW5jdGlvbiBnZXRGcmFnQXRQb3MocG9zaXRpb24sIGxldmVsVHlwZSwgYnVmZmVyZWQpIHtcbiAgICAgIHZhciBmcmFnbWVudHMgPSB0aGlzLmZyYWdtZW50cztcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJhZ21lbnRzKTtcbiAgICAgIGZvciAodmFyIGkgPSBrZXlzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICB2YXIgZnJhZ21lbnRFbnRpdHkgPSBmcmFnbWVudHNba2V5c1tpXV07XG4gICAgICAgIGlmICgoZnJhZ21lbnRFbnRpdHkgPT0gbnVsbCA/IHZvaWQgMCA6IGZyYWdtZW50RW50aXR5LmJvZHkudHlwZSkgPT09IGxldmVsVHlwZSAmJiAoIWJ1ZmZlcmVkIHx8IGZyYWdtZW50RW50aXR5LmJ1ZmZlcmVkKSkge1xuICAgICAgICAgIHZhciBmcmFnID0gZnJhZ21lbnRFbnRpdHkuYm9keTtcbiAgICAgICAgICBpZiAoZnJhZy5zdGFydCA8PSBwb3NpdGlvbiAmJiBwb3NpdGlvbiA8PSBmcmFnLmVuZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZyYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJ0aWFsIGZyYWdtZW50cyBlZmZlY3RlZCBieSBjb2RlZCBmcmFtZSBldmljdGlvbiB3aWxsIGJlIHJlbW92ZWRcbiAgICAgKiBUaGUgYnJvd3NlciB3aWxsIHVubG9hZCBwYXJ0cyBvZiB0aGUgYnVmZmVyIHRvIGZyZWUgdXAgbWVtb3J5IGZvciBuZXcgYnVmZmVyIGRhdGFcbiAgICAgKiBGcmFnbWVudHMgd2lsbCBuZWVkIHRvIGJlIHJlbG9hZGVkIHdoZW4gdGhlIGJ1ZmZlciBpcyBmcmVlZCB1cCwgcmVtb3ZpbmcgcGFydGlhbCBmcmFnbWVudHMgd2lsbCBhbGxvdyB0aGVtIHRvIHJlbG9hZChzaW5jZSB0aGVyZSBtaWdodCBiZSBwYXJ0cyB0aGF0IGFyZSBzdGlsbCBwbGF5YWJsZSlcbiAgICAgKi87XG4gICAgX3Byb3RvLmRldGVjdEV2aWN0ZWRGcmFnbWVudHMgPSBmdW5jdGlvbiBkZXRlY3RFdmljdGVkRnJhZ21lbnRzKGVsZW1lbnRhcnlTdHJlYW0sIHRpbWVSYW5nZSwgcGxheWxpc3RUeXBlLCBhcHBlbmRlZFBhcnQsIHJlbW92ZUFwcGVuZGluZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGlmICh0aGlzLnRpbWVSYW5nZXMpIHtcbiAgICAgICAgdGhpcy50aW1lUmFuZ2VzW2VsZW1lbnRhcnlTdHJlYW1dID0gdGltZVJhbmdlO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgaWYgYW55IGZsYWdnZWQgZnJhZ21lbnRzIGhhdmUgYmVlbiB1bmxvYWRlZFxuICAgICAgLy8gZXhjbHVkaW5nIGFueXRoaW5nIG5ld2VyIHRoYW4gYXBwZW5kZWRQYXJ0U25cbiAgICAgIHZhciBhcHBlbmRlZFBhcnRTbiA9IChhcHBlbmRlZFBhcnQgPT0gbnVsbCA/IHZvaWQgMCA6IGFwcGVuZGVkUGFydC5mcmFnbWVudC5zbikgfHwgLTE7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmZyYWdtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBmcmFnbWVudEVudGl0eSA9IF90aGlzLmZyYWdtZW50c1trZXldO1xuICAgICAgICBpZiAoIWZyYWdtZW50RW50aXR5KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcHBlbmRlZFBhcnRTbiA+PSBmcmFnbWVudEVudGl0eS5ib2R5LnNuKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZnJhZ21lbnRFbnRpdHkuYnVmZmVyZWQgJiYgKCFmcmFnbWVudEVudGl0eS5sb2FkZWQgfHwgcmVtb3ZlQXBwZW5kaW5nKSkge1xuICAgICAgICAgIGlmIChmcmFnbWVudEVudGl0eS5ib2R5LnR5cGUgPT09IHBsYXlsaXN0VHlwZSkge1xuICAgICAgICAgICAgX3RoaXMucmVtb3ZlRnJhZ21lbnQoZnJhZ21lbnRFbnRpdHkuYm9keSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXNEYXRhID0gZnJhZ21lbnRFbnRpdHkucmFuZ2VbZWxlbWVudGFyeVN0cmVhbV07XG4gICAgICAgIGlmICghZXNEYXRhKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlc0RhdGEudGltZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBfdGhpcy5yZW1vdmVGcmFnbWVudChmcmFnbWVudEVudGl0eS5ib2R5KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXNEYXRhLnRpbWUuc29tZShmdW5jdGlvbiAodGltZSkge1xuICAgICAgICAgIHZhciBpc05vdEJ1ZmZlcmVkID0gIV90aGlzLmlzVGltZUJ1ZmZlcmVkKHRpbWUuc3RhcnRQVFMsIHRpbWUuZW5kUFRTLCB0aW1lUmFuZ2UpO1xuICAgICAgICAgIGlmIChpc05vdEJ1ZmZlcmVkKSB7XG4gICAgICAgICAgICAvLyBVbnJlZ2lzdGVyIHBhcnRpYWwgZnJhZ21lbnQgYXMgaXQgbmVlZHMgdG8gbG9hZCBhZ2FpbiB0byBiZSByZXVzZWRcbiAgICAgICAgICAgIF90aGlzLnJlbW92ZUZyYWdtZW50KGZyYWdtZW50RW50aXR5LmJvZHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXNOb3RCdWZmZXJlZDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGZyYWdtZW50IHBhc3NlZCBpbiBpcyBsb2FkZWQgaW4gdGhlIGJ1ZmZlciBwcm9wZXJseVxuICAgICAqIFBhcnRpYWxseSBsb2FkZWQgZnJhZ21lbnRzIHdpbGwgYmUgcmVnaXN0ZXJlZCBhcyBhIHBhcnRpYWwgZnJhZ21lbnRcbiAgICAgKi87XG4gICAgX3Byb3RvLmRldGVjdFBhcnRpYWxGcmFnbWVudHMgPSBmdW5jdGlvbiBkZXRlY3RQYXJ0aWFsRnJhZ21lbnRzKGRhdGEpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIHRpbWVSYW5nZXMgPSB0aGlzLnRpbWVSYW5nZXM7XG4gICAgICBpZiAoIXRpbWVSYW5nZXMgfHwgZGF0YS5mcmFnLnNuID09PSAnaW5pdFNlZ21lbnQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnO1xuICAgICAgdmFyIGZyYWdLZXkgPSBnZXRGcmFnbWVudEtleShmcmFnKTtcbiAgICAgIHZhciBmcmFnbWVudEVudGl0eSA9IHRoaXMuZnJhZ21lbnRzW2ZyYWdLZXldO1xuICAgICAgaWYgKCFmcmFnbWVudEVudGl0eSB8fCBmcmFnbWVudEVudGl0eS5idWZmZXJlZCAmJiBmcmFnLmdhcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaXNGcmFnSGludCA9ICFmcmFnLnJlbHVybDtcbiAgICAgIE9iamVjdC5rZXlzKHRpbWVSYW5nZXMpLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnRhcnlTdHJlYW0pIHtcbiAgICAgICAgdmFyIHN0cmVhbUluZm8gPSBmcmFnLmVsZW1lbnRhcnlTdHJlYW1zW2VsZW1lbnRhcnlTdHJlYW1dO1xuICAgICAgICBpZiAoIXN0cmVhbUluZm8pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRpbWVSYW5nZSA9IHRpbWVSYW5nZXNbZWxlbWVudGFyeVN0cmVhbV07XG4gICAgICAgIHZhciBwYXJ0aWFsID0gaXNGcmFnSGludCB8fCBzdHJlYW1JbmZvLnBhcnRpYWwgPT09IHRydWU7XG4gICAgICAgIGZyYWdtZW50RW50aXR5LnJhbmdlW2VsZW1lbnRhcnlTdHJlYW1dID0gX3RoaXMyLmdldEJ1ZmZlcmVkVGltZXMoZnJhZywgZGF0YS5wYXJ0LCBwYXJ0aWFsLCB0aW1lUmFuZ2UpO1xuICAgICAgfSk7XG4gICAgICBmcmFnbWVudEVudGl0eS5sb2FkZWQgPSBudWxsO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKGZyYWdtZW50RW50aXR5LnJhbmdlKS5sZW5ndGgpIHtcbiAgICAgICAgZnJhZ21lbnRFbnRpdHkuYnVmZmVyZWQgPSB0cnVlO1xuICAgICAgICB2YXIgZW5kTGlzdCA9IGZyYWdtZW50RW50aXR5LmJvZHkuZW5kTGlzdCA9IGZyYWcuZW5kTGlzdCB8fCBmcmFnbWVudEVudGl0eS5ib2R5LmVuZExpc3Q7XG4gICAgICAgIGlmIChlbmRMaXN0KSB7XG4gICAgICAgICAgdGhpcy5lbmRMaXN0RnJhZ21lbnRzW2ZyYWdtZW50RW50aXR5LmJvZHkudHlwZV0gPSBmcmFnbWVudEVudGl0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUGFydGlhbChmcmFnbWVudEVudGl0eSkpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgb2xkZXIgZnJhZ21lbnQgcGFydHMgZnJvbSBsb29rdXAgYWZ0ZXIgZnJhZyBpcyB0cmFja2VkIGFzIGJ1ZmZlcmVkXG4gICAgICAgICAgdGhpcy5yZW1vdmVQYXJ0cyhmcmFnLnNuIC0gMSwgZnJhZy50eXBlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVtb3ZlIGZyYWdtZW50IGlmIG5vdGhpbmcgd2FzIGFwcGVuZGVkXG4gICAgICAgIHRoaXMucmVtb3ZlRnJhZ21lbnQoZnJhZ21lbnRFbnRpdHkuYm9keSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ucmVtb3ZlUGFydHMgPSBmdW5jdGlvbiByZW1vdmVQYXJ0cyhzblRvS2VlcCwgbGV2ZWxUeXBlKSB7XG4gICAgICB2YXIgYWN0aXZlUGFydHMgPSB0aGlzLmFjdGl2ZVBhcnRMaXN0c1tsZXZlbFR5cGVdO1xuICAgICAgaWYgKCFhY3RpdmVQYXJ0cykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmFjdGl2ZVBhcnRMaXN0c1tsZXZlbFR5cGVdID0gZmlsdGVyUGFydHMoYWN0aXZlUGFydHMsIGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICAgIHJldHVybiBwYXJ0LmZyYWdtZW50LnNuID49IHNuVG9LZWVwO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8uZnJhZ0J1ZmZlcmVkID0gZnVuY3Rpb24gZnJhZ0J1ZmZlcmVkKGZyYWcsIGZvcmNlKSB7XG4gICAgICB2YXIgZnJhZ0tleSA9IGdldEZyYWdtZW50S2V5KGZyYWcpO1xuICAgICAgdmFyIGZyYWdtZW50RW50aXR5ID0gdGhpcy5mcmFnbWVudHNbZnJhZ0tleV07XG4gICAgICBpZiAoIWZyYWdtZW50RW50aXR5ICYmIGZvcmNlKSB7XG4gICAgICAgIGZyYWdtZW50RW50aXR5ID0gdGhpcy5mcmFnbWVudHNbZnJhZ0tleV0gPSB7XG4gICAgICAgICAgYm9keTogZnJhZyxcbiAgICAgICAgICBhcHBlbmRlZFBUUzogbnVsbCxcbiAgICAgICAgICBsb2FkZWQ6IG51bGwsXG4gICAgICAgICAgYnVmZmVyZWQ6IGZhbHNlLFxuICAgICAgICAgIHJhbmdlOiBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChmcmFnLmdhcCkge1xuICAgICAgICAgIHRoaXMuaGFzR2FwcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmcmFnbWVudEVudGl0eSkge1xuICAgICAgICBmcmFnbWVudEVudGl0eS5sb2FkZWQgPSBudWxsO1xuICAgICAgICBmcmFnbWVudEVudGl0eS5idWZmZXJlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0QnVmZmVyZWRUaW1lcyA9IGZ1bmN0aW9uIGdldEJ1ZmZlcmVkVGltZXMoZnJhZ21lbnQsIHBhcnQsIHBhcnRpYWwsIHRpbWVSYW5nZSkge1xuICAgICAgdmFyIGJ1ZmZlcmVkID0ge1xuICAgICAgICB0aW1lOiBbXSxcbiAgICAgICAgcGFydGlhbDogcGFydGlhbFxuICAgICAgfTtcbiAgICAgIHZhciBzdGFydFBUUyA9IGZyYWdtZW50LnN0YXJ0O1xuICAgICAgdmFyIGVuZFBUUyA9IGZyYWdtZW50LmVuZDtcbiAgICAgIHZhciBtaW5FbmRQVFMgPSBmcmFnbWVudC5taW5FbmRQVFMgfHwgZW5kUFRTO1xuICAgICAgdmFyIG1heFN0YXJ0UFRTID0gZnJhZ21lbnQubWF4U3RhcnRQVFMgfHwgc3RhcnRQVFM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRpbWVSYW5nZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc3RhcnRUaW1lID0gdGltZVJhbmdlLnN0YXJ0KGkpIC0gdGhpcy5idWZmZXJQYWRkaW5nO1xuICAgICAgICB2YXIgZW5kVGltZSA9IHRpbWVSYW5nZS5lbmQoaSkgKyB0aGlzLmJ1ZmZlclBhZGRpbmc7XG4gICAgICAgIGlmIChtYXhTdGFydFBUUyA+PSBzdGFydFRpbWUgJiYgbWluRW5kUFRTIDw9IGVuZFRpbWUpIHtcbiAgICAgICAgICAvLyBGcmFnbWVudCBpcyBlbnRpcmVseSBjb250YWluZWQgaW4gYnVmZmVyXG4gICAgICAgICAgLy8gTm8gbmVlZCB0byBjaGVjayB0aGUgb3RoZXIgdGltZVJhbmdlIHRpbWVzIHNpbmNlIGl0J3MgY29tcGxldGVseSBwbGF5YWJsZVxuICAgICAgICAgIGJ1ZmZlcmVkLnRpbWUucHVzaCh7XG4gICAgICAgICAgICBzdGFydFBUUzogTWF0aC5tYXgoc3RhcnRQVFMsIHRpbWVSYW5nZS5zdGFydChpKSksXG4gICAgICAgICAgICBlbmRQVFM6IE1hdGgubWluKGVuZFBUUywgdGltZVJhbmdlLmVuZChpKSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmIChzdGFydFBUUyA8IGVuZFRpbWUgJiYgZW5kUFRTID4gc3RhcnRUaW1lKSB7XG4gICAgICAgICAgdmFyIHN0YXJ0ID0gTWF0aC5tYXgoc3RhcnRQVFMsIHRpbWVSYW5nZS5zdGFydChpKSk7XG4gICAgICAgICAgdmFyIGVuZCA9IE1hdGgubWluKGVuZFBUUywgdGltZVJhbmdlLmVuZChpKSk7XG4gICAgICAgICAgaWYgKGVuZCA+IHN0YXJ0KSB7XG4gICAgICAgICAgICBidWZmZXJlZC5wYXJ0aWFsID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBpbnRlcnNlY3Rpb24gd2l0aCBidWZmZXJcbiAgICAgICAgICAgIC8vIEdldCBwbGF5YWJsZSBzZWN0aW9ucyBvZiB0aGUgZnJhZ21lbnRcbiAgICAgICAgICAgIGJ1ZmZlcmVkLnRpbWUucHVzaCh7XG4gICAgICAgICAgICAgIHN0YXJ0UFRTOiBzdGFydCxcbiAgICAgICAgICAgICAgZW5kUFRTOiBlbmRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChlbmRQVFMgPD0gc3RhcnRUaW1lKSB7XG4gICAgICAgICAgLy8gTm8gbmVlZCB0byBjaGVjayB0aGUgcmVzdCBvZiB0aGUgdGltZVJhbmdlIGFzIGl0IGlzIGluIG9yZGVyXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBidWZmZXJlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJ0aWFsIGZyYWdtZW50IGZvciBhIGNlcnRhaW4gdGltZVxuICAgICAqLztcbiAgICBfcHJvdG8uZ2V0UGFydGlhbEZyYWdtZW50ID0gZnVuY3Rpb24gZ2V0UGFydGlhbEZyYWdtZW50KHRpbWUpIHtcbiAgICAgIHZhciBiZXN0RnJhZ21lbnQgPSBudWxsO1xuICAgICAgdmFyIHRpbWVQYWRkaW5nO1xuICAgICAgdmFyIHN0YXJ0VGltZTtcbiAgICAgIHZhciBlbmRUaW1lO1xuICAgICAgdmFyIGJlc3RPdmVybGFwID0gMDtcbiAgICAgIHZhciBidWZmZXJQYWRkaW5nID0gdGhpcy5idWZmZXJQYWRkaW5nLFxuICAgICAgICBmcmFnbWVudHMgPSB0aGlzLmZyYWdtZW50cztcbiAgICAgIE9iamVjdC5rZXlzKGZyYWdtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBmcmFnbWVudEVudGl0eSA9IGZyYWdtZW50c1trZXldO1xuICAgICAgICBpZiAoIWZyYWdtZW50RW50aXR5KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BhcnRpYWwoZnJhZ21lbnRFbnRpdHkpKSB7XG4gICAgICAgICAgc3RhcnRUaW1lID0gZnJhZ21lbnRFbnRpdHkuYm9keS5zdGFydCAtIGJ1ZmZlclBhZGRpbmc7XG4gICAgICAgICAgZW5kVGltZSA9IGZyYWdtZW50RW50aXR5LmJvZHkuZW5kICsgYnVmZmVyUGFkZGluZztcbiAgICAgICAgICBpZiAodGltZSA+PSBzdGFydFRpbWUgJiYgdGltZSA8PSBlbmRUaW1lKSB7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIGZyYWdtZW50IHRoYXQgaGFzIHRoZSBtb3N0IHBhZGRpbmcgZnJvbSBzdGFydCBhbmQgZW5kIHRpbWVcbiAgICAgICAgICAgIHRpbWVQYWRkaW5nID0gTWF0aC5taW4odGltZSAtIHN0YXJ0VGltZSwgZW5kVGltZSAtIHRpbWUpO1xuICAgICAgICAgICAgaWYgKGJlc3RPdmVybGFwIDw9IHRpbWVQYWRkaW5nKSB7XG4gICAgICAgICAgICAgIGJlc3RGcmFnbWVudCA9IGZyYWdtZW50RW50aXR5LmJvZHk7XG4gICAgICAgICAgICAgIGJlc3RPdmVybGFwID0gdGltZVBhZGRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiZXN0RnJhZ21lbnQ7XG4gICAgfTtcbiAgICBfcHJvdG8uaXNFbmRMaXN0QXBwZW5kZWQgPSBmdW5jdGlvbiBpc0VuZExpc3RBcHBlbmRlZCh0eXBlKSB7XG4gICAgICB2YXIgbGFzdEZyYWdtZW50RW50aXR5ID0gdGhpcy5lbmRMaXN0RnJhZ21lbnRzW3R5cGVdO1xuICAgICAgcmV0dXJuIGxhc3RGcmFnbWVudEVudGl0eSAhPT0gdW5kZWZpbmVkICYmIChsYXN0RnJhZ21lbnRFbnRpdHkuYnVmZmVyZWQgfHwgaXNQYXJ0aWFsKGxhc3RGcmFnbWVudEVudGl0eSkpO1xuICAgIH07XG4gICAgX3Byb3RvLmdldFN0YXRlID0gZnVuY3Rpb24gZ2V0U3RhdGUoZnJhZ21lbnQpIHtcbiAgICAgIHZhciBmcmFnS2V5ID0gZ2V0RnJhZ21lbnRLZXkoZnJhZ21lbnQpO1xuICAgICAgdmFyIGZyYWdtZW50RW50aXR5ID0gdGhpcy5mcmFnbWVudHNbZnJhZ0tleV07XG4gICAgICBpZiAoZnJhZ21lbnRFbnRpdHkpIHtcbiAgICAgICAgaWYgKCFmcmFnbWVudEVudGl0eS5idWZmZXJlZCkge1xuICAgICAgICAgIHJldHVybiBGcmFnbWVudFN0YXRlLkFQUEVORElORztcbiAgICAgICAgfSBlbHNlIGlmIChpc1BhcnRpYWwoZnJhZ21lbnRFbnRpdHkpKSB7XG4gICAgICAgICAgcmV0dXJuIEZyYWdtZW50U3RhdGUuUEFSVElBTDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gRnJhZ21lbnRTdGF0ZS5PSztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIEZyYWdtZW50U3RhdGUuTk9UX0xPQURFRDtcbiAgICB9O1xuICAgIF9wcm90by5pc1RpbWVCdWZmZXJlZCA9IGZ1bmN0aW9uIGlzVGltZUJ1ZmZlcmVkKHN0YXJ0UFRTLCBlbmRQVFMsIHRpbWVSYW5nZSkge1xuICAgICAgdmFyIHN0YXJ0VGltZTtcbiAgICAgIHZhciBlbmRUaW1lO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aW1lUmFuZ2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3RhcnRUaW1lID0gdGltZVJhbmdlLnN0YXJ0KGkpIC0gdGhpcy5idWZmZXJQYWRkaW5nO1xuICAgICAgICBlbmRUaW1lID0gdGltZVJhbmdlLmVuZChpKSArIHRoaXMuYnVmZmVyUGFkZGluZztcbiAgICAgICAgaWYgKHN0YXJ0UFRTID49IHN0YXJ0VGltZSAmJiBlbmRQVFMgPD0gZW5kVGltZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmRQVFMgPD0gc3RhcnRUaW1lKSB7XG4gICAgICAgICAgLy8gTm8gbmVlZCB0byBjaGVjayB0aGUgcmVzdCBvZiB0aGUgdGltZVJhbmdlIGFzIGl0IGlzIGluIG9yZGVyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NYW5pZmVzdExvYWRpbmcgPSBmdW5jdGlvbiBvbk1hbmlmZXN0TG9hZGluZygpIHtcbiAgICAgIHRoaXMucmVtb3ZlQWxsRnJhZ21lbnRzKCk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25GcmFnTG9hZGVkID0gZnVuY3Rpb24gb25GcmFnTG9hZGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICAvLyBkb24ndCB0cmFjayBpbml0c2VnbWVudCAoZm9yIHdoaWNoIHNuIGlzIG5vdCBhIG51bWJlcilcbiAgICAgIC8vIGRvbid0IHRyYWNrIGZyYWdzIHVzZWQgZm9yIGJpdHJhdGVUZXN0LCB0aGV5J3JlIGlycmVsZXZhbnQuXG4gICAgICBpZiAoZGF0YS5mcmFnLnNuID09PSAnaW5pdFNlZ21lbnQnIHx8IGRhdGEuZnJhZy5iaXRyYXRlVGVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZztcbiAgICAgIC8vIEZyYWdtZW50IGVudGl0eSBgbG9hZGVkYCBGcmFnTG9hZGVkRGF0YSBpcyBudWxsIHdoZW4gbG9hZGluZyBwYXJ0c1xuICAgICAgdmFyIGxvYWRlZCA9IGRhdGEucGFydCA/IG51bGwgOiBkYXRhO1xuICAgICAgdmFyIGZyYWdLZXkgPSBnZXRGcmFnbWVudEtleShmcmFnKTtcbiAgICAgIHRoaXMuZnJhZ21lbnRzW2ZyYWdLZXldID0ge1xuICAgICAgICBib2R5OiBmcmFnLFxuICAgICAgICBhcHBlbmRlZFBUUzogbnVsbCxcbiAgICAgICAgbG9hZGVkOiBsb2FkZWQsXG4gICAgICAgIGJ1ZmZlcmVkOiBmYWxzZSxcbiAgICAgICAgcmFuZ2U6IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICAgIH07XG4gICAgfTtcbiAgICBfcHJvdG8ub25CdWZmZXJBcHBlbmRlZCA9IGZ1bmN0aW9uIG9uQnVmZmVyQXBwZW5kZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnLFxuICAgICAgICBwYXJ0ID0gZGF0YS5wYXJ0LFxuICAgICAgICB0aW1lUmFuZ2VzID0gZGF0YS50aW1lUmFuZ2VzLFxuICAgICAgICB0eXBlID0gZGF0YS50eXBlO1xuICAgICAgaWYgKGZyYWcuc24gPT09ICdpbml0U2VnbWVudCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHBsYXlsaXN0VHlwZSA9IGZyYWcudHlwZTtcbiAgICAgIGlmIChwYXJ0KSB7XG4gICAgICAgIHZhciBhY3RpdmVQYXJ0cyA9IHRoaXMuYWN0aXZlUGFydExpc3RzW3BsYXlsaXN0VHlwZV07XG4gICAgICAgIGlmICghYWN0aXZlUGFydHMpIHtcbiAgICAgICAgICB0aGlzLmFjdGl2ZVBhcnRMaXN0c1twbGF5bGlzdFR5cGVdID0gYWN0aXZlUGFydHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmVQYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgdGhlIGxhdGVzdCB0aW1lUmFuZ2VzIGxvYWRlZCBpbiB0aGUgYnVmZmVyXG4gICAgICB0aGlzLnRpbWVSYW5nZXMgPSB0aW1lUmFuZ2VzO1xuICAgICAgdmFyIHRpbWVSYW5nZSA9IHRpbWVSYW5nZXNbdHlwZV07XG4gICAgICB0aGlzLmRldGVjdEV2aWN0ZWRGcmFnbWVudHModHlwZSwgdGltZVJhbmdlLCBwbGF5bGlzdFR5cGUsIHBhcnQpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uRnJhZ0J1ZmZlcmVkID0gZnVuY3Rpb24gb25GcmFnQnVmZmVyZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMuZGV0ZWN0UGFydGlhbEZyYWdtZW50cyhkYXRhKTtcbiAgICB9O1xuICAgIF9wcm90by5oYXNGcmFnbWVudCA9IGZ1bmN0aW9uIGhhc0ZyYWdtZW50KGZyYWdtZW50KSB7XG4gICAgICB2YXIgZnJhZ0tleSA9IGdldEZyYWdtZW50S2V5KGZyYWdtZW50KTtcbiAgICAgIHJldHVybiAhIXRoaXMuZnJhZ21lbnRzW2ZyYWdLZXldO1xuICAgIH07XG4gICAgX3Byb3RvLmhhc0ZyYWdtZW50cyA9IGZ1bmN0aW9uIGhhc0ZyYWdtZW50cyh0eXBlKSB7XG4gICAgICB2YXIgZnJhZ21lbnRzID0gdGhpcy5mcmFnbWVudHM7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZyYWdtZW50cyk7XG4gICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGtleXMubGVuZ3RoID4gMDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSBrZXlzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICB2YXIgZnJhZ21lbnRFbnRpdHkgPSBmcmFnbWVudHNba2V5c1tpXV07XG4gICAgICAgIGlmICgoZnJhZ21lbnRFbnRpdHkgPT0gbnVsbCA/IHZvaWQgMCA6IGZyYWdtZW50RW50aXR5LmJvZHkudHlwZSkgPT09IHR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgX3Byb3RvLmhhc1BhcnRzID0gZnVuY3Rpb24gaGFzUGFydHModHlwZSkge1xuICAgICAgdmFyIF90aGlzJGFjdGl2ZVBhcnRMaXN0cztcbiAgICAgIHJldHVybiAhISgoX3RoaXMkYWN0aXZlUGFydExpc3RzID0gdGhpcy5hY3RpdmVQYXJ0TGlzdHNbdHlwZV0pICE9IG51bGwgJiYgX3RoaXMkYWN0aXZlUGFydExpc3RzLmxlbmd0aCk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVtb3ZlRnJhZ21lbnRzSW5SYW5nZSA9IGZ1bmN0aW9uIHJlbW92ZUZyYWdtZW50c0luUmFuZ2Uoc3RhcnQsIGVuZCwgcGxheWxpc3RUeXBlLCB3aXRoR2FwT25seSwgdW5idWZmZXJlZE9ubHkpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgaWYgKHdpdGhHYXBPbmx5ICYmICF0aGlzLmhhc0dhcHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgT2JqZWN0LmtleXModGhpcy5mcmFnbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgZnJhZ21lbnRFbnRpdHkgPSBfdGhpczMuZnJhZ21lbnRzW2tleV07XG4gICAgICAgIGlmICghZnJhZ21lbnRFbnRpdHkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZyYWcgPSBmcmFnbWVudEVudGl0eS5ib2R5O1xuICAgICAgICBpZiAoZnJhZy50eXBlICE9PSBwbGF5bGlzdFR5cGUgfHwgd2l0aEdhcE9ubHkgJiYgIWZyYWcuZ2FwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmcmFnLnN0YXJ0IDwgZW5kICYmIGZyYWcuZW5kID4gc3RhcnQgJiYgKGZyYWdtZW50RW50aXR5LmJ1ZmZlcmVkIHx8IHVuYnVmZmVyZWRPbmx5KSkge1xuICAgICAgICAgIF90aGlzMy5yZW1vdmVGcmFnbWVudChmcmFnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVtb3ZlRnJhZ21lbnQgPSBmdW5jdGlvbiByZW1vdmVGcmFnbWVudChmcmFnbWVudCkge1xuICAgICAgdmFyIGZyYWdLZXkgPSBnZXRGcmFnbWVudEtleShmcmFnbWVudCk7XG4gICAgICBmcmFnbWVudC5jbGVhckVsZW1lbnRhcnlTdHJlYW1JbmZvKCk7XG4gICAgICB2YXIgYWN0aXZlUGFydHMgPSB0aGlzLmFjdGl2ZVBhcnRMaXN0c1tmcmFnbWVudC50eXBlXTtcbiAgICAgIGlmIChhY3RpdmVQYXJ0cykge1xuICAgICAgICB2YXIgc25Ub1JlbW92ZSA9IGZyYWdtZW50LnNuO1xuICAgICAgICB0aGlzLmFjdGl2ZVBhcnRMaXN0c1tmcmFnbWVudC50eXBlXSA9IGZpbHRlclBhcnRzKGFjdGl2ZVBhcnRzLCBmdW5jdGlvbiAocGFydCkge1xuICAgICAgICAgIHJldHVybiBwYXJ0LmZyYWdtZW50LnNuICE9PSBzblRvUmVtb3ZlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLmZyYWdtZW50c1tmcmFnS2V5XTtcbiAgICAgIGlmIChmcmFnbWVudC5lbmRMaXN0KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmVuZExpc3RGcmFnbWVudHNbZnJhZ21lbnQudHlwZV07XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ucmVtb3ZlQWxsRnJhZ21lbnRzID0gZnVuY3Rpb24gcmVtb3ZlQWxsRnJhZ21lbnRzKCkge1xuICAgICAgdmFyIF90aGlzJGhscywgX3RoaXMkaGxzJGxhdGVzdExldmVsO1xuICAgICAgdGhpcy5mcmFnbWVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgdGhpcy5lbmRMaXN0RnJhZ21lbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHRoaXMuYWN0aXZlUGFydExpc3RzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHRoaXMuaGFzR2FwcyA9IGZhbHNlO1xuICAgICAgdmFyIHBhcnRsaXN0ID0gKF90aGlzJGhscyA9IHRoaXMuaGxzKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGlzJGhscyRsYXRlc3RMZXZlbCA9IF90aGlzJGhscy5sYXRlc3RMZXZlbERldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRobHMkbGF0ZXN0TGV2ZWwucGFydExpc3Q7XG4gICAgICBpZiAocGFydGxpc3QpIHtcbiAgICAgICAgcGFydGxpc3QuZm9yRWFjaChmdW5jdGlvbiAocGFydCkge1xuICAgICAgICAgIHJldHVybiBwYXJ0LmNsZWFyRWxlbWVudGFyeVN0cmVhbUluZm8oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRnJhZ21lbnRUcmFja2VyO1xuICB9KCk7XG4gIGZ1bmN0aW9uIGlzUGFydGlhbChmcmFnbWVudEVudGl0eSkge1xuICAgIHZhciBfZnJhZ21lbnRFbnRpdHkkcmFuZ2UsIF9mcmFnbWVudEVudGl0eSRyYW5nZTIsIF9mcmFnbWVudEVudGl0eSRyYW5nZTM7XG4gICAgcmV0dXJuIGZyYWdtZW50RW50aXR5LmJ1ZmZlcmVkICYmIChmcmFnbWVudEVudGl0eS5ib2R5LmdhcCB8fCAoKF9mcmFnbWVudEVudGl0eSRyYW5nZSA9IGZyYWdtZW50RW50aXR5LnJhbmdlLnZpZGVvKSA9PSBudWxsID8gdm9pZCAwIDogX2ZyYWdtZW50RW50aXR5JHJhbmdlLnBhcnRpYWwpIHx8ICgoX2ZyYWdtZW50RW50aXR5JHJhbmdlMiA9IGZyYWdtZW50RW50aXR5LnJhbmdlLmF1ZGlvKSA9PSBudWxsID8gdm9pZCAwIDogX2ZyYWdtZW50RW50aXR5JHJhbmdlMi5wYXJ0aWFsKSB8fCAoKF9mcmFnbWVudEVudGl0eSRyYW5nZTMgPSBmcmFnbWVudEVudGl0eS5yYW5nZS5hdWRpb3ZpZGVvKSA9PSBudWxsID8gdm9pZCAwIDogX2ZyYWdtZW50RW50aXR5JHJhbmdlMy5wYXJ0aWFsKSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RnJhZ21lbnRLZXkoZnJhZ21lbnQpIHtcbiAgICByZXR1cm4gZnJhZ21lbnQudHlwZSArIFwiX1wiICsgZnJhZ21lbnQubGV2ZWwgKyBcIl9cIiArIGZyYWdtZW50LnNuO1xuICB9XG4gIGZ1bmN0aW9uIGZpbHRlclBhcnRzKHBhcnRMaXN0LCBwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gcGFydExpc3QuZmlsdGVyKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICB2YXIga2VlcCA9IHByZWRpY2F0ZShwYXJ0KTtcbiAgICAgIGlmICgha2VlcCkge1xuICAgICAgICBwYXJ0LmNsZWFyRWxlbWVudGFyeVN0cmVhbUluZm8oKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZWVwO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIERlY3J5cHRlckFlc01vZGUgPSB7XG4gICAgY2JjOiAwLFxuICAgIGN0cjogMVxuICB9O1xuXG4gIHZhciBBRVNDcnlwdG8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFFU0NyeXB0byhzdWJ0bGUsIGl2LCBhZXNNb2RlKSB7XG4gICAgICB0aGlzLnN1YnRsZSA9IHZvaWQgMDtcbiAgICAgIHRoaXMuYWVzSVYgPSB2b2lkIDA7XG4gICAgICB0aGlzLmFlc01vZGUgPSB2b2lkIDA7XG4gICAgICB0aGlzLnN1YnRsZSA9IHN1YnRsZTtcbiAgICAgIHRoaXMuYWVzSVYgPSBpdjtcbiAgICAgIHRoaXMuYWVzTW9kZSA9IGFlc01vZGU7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBBRVNDcnlwdG8ucHJvdG90eXBlO1xuICAgIF9wcm90by5kZWNyeXB0ID0gZnVuY3Rpb24gZGVjcnlwdChkYXRhLCBrZXkpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5hZXNNb2RlKSB7XG4gICAgICAgIGNhc2UgRGVjcnlwdGVyQWVzTW9kZS5jYmM6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3VidGxlLmRlY3J5cHQoe1xuICAgICAgICAgICAgbmFtZTogJ0FFUy1DQkMnLFxuICAgICAgICAgICAgaXY6IHRoaXMuYWVzSVZcbiAgICAgICAgICB9LCBrZXksIGRhdGEpO1xuICAgICAgICBjYXNlIERlY3J5cHRlckFlc01vZGUuY3RyOlxuICAgICAgICAgIHJldHVybiB0aGlzLnN1YnRsZS5kZWNyeXB0KHtcbiAgICAgICAgICAgIG5hbWU6ICdBRVMtQ1RSJyxcbiAgICAgICAgICAgIGNvdW50ZXI6IHRoaXMuYWVzSVYsXG4gICAgICAgICAgICBsZW5ndGg6IDY0XG4gICAgICAgICAgfSxcbiAgICAgICAgICAvLzY0IDogTklTVCBTUDgwMC0zOEEgc3RhbmRhcmQgc3VnZ2VzdHMgdGhhdCB0aGUgY291bnRlciBzaG91bGQgb2NjdXB5IGhhbGYgb2YgdGhlIGNvdW50ZXIgYmxvY2tcbiAgICAgICAgICBrZXksIGRhdGEpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIltBRVNDcnlwdG9dIGludmFsaWQgYWVzIG1vZGUgXCIgKyB0aGlzLmFlc01vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFFU0NyeXB0bztcbiAgfSgpO1xuXG4gIC8vIFBLQ1M3XG4gIGZ1bmN0aW9uIHJlbW92ZVBhZGRpbmcoYXJyYXkpIHtcbiAgICB2YXIgb3V0cHV0Qnl0ZXMgPSBhcnJheS5ieXRlTGVuZ3RoO1xuICAgIHZhciBwYWRkaW5nQnl0ZXMgPSBvdXRwdXRCeXRlcyAmJiBuZXcgRGF0YVZpZXcoYXJyYXkuYnVmZmVyKS5nZXRVaW50OChvdXRwdXRCeXRlcyAtIDEpO1xuICAgIGlmIChwYWRkaW5nQnl0ZXMpIHtcbiAgICAgIHJldHVybiBhcnJheS5zbGljZSgwLCBvdXRwdXRCeXRlcyAtIHBhZGRpbmdCeXRlcyk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuICB2YXIgQUVTRGVjcnlwdG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBRVNEZWNyeXB0b3IoKSB7XG4gICAgICB0aGlzLnJjb24gPSBbMHgwLCAweDEsIDB4MiwgMHg0LCAweDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzZdO1xuICAgICAgdGhpcy5zdWJNaXggPSBbbmV3IFVpbnQzMkFycmF5KDI1NiksIG5ldyBVaW50MzJBcnJheSgyNTYpLCBuZXcgVWludDMyQXJyYXkoMjU2KSwgbmV3IFVpbnQzMkFycmF5KDI1NildO1xuICAgICAgdGhpcy5pbnZTdWJNaXggPSBbbmV3IFVpbnQzMkFycmF5KDI1NiksIG5ldyBVaW50MzJBcnJheSgyNTYpLCBuZXcgVWludDMyQXJyYXkoMjU2KSwgbmV3IFVpbnQzMkFycmF5KDI1NildO1xuICAgICAgdGhpcy5zQm94ID0gbmV3IFVpbnQzMkFycmF5KDI1Nik7XG4gICAgICB0aGlzLmludlNCb3ggPSBuZXcgVWludDMyQXJyYXkoMjU2KTtcbiAgICAgIHRoaXMua2V5ID0gbmV3IFVpbnQzMkFycmF5KDApO1xuICAgICAgdGhpcy5rc1Jvd3MgPSAwO1xuICAgICAgdGhpcy5rZXlTaXplID0gMDtcbiAgICAgIHRoaXMua2V5U2NoZWR1bGUgPSB2b2lkIDA7XG4gICAgICB0aGlzLmludktleVNjaGVkdWxlID0gdm9pZCAwO1xuICAgICAgdGhpcy5pbml0VGFibGUoKTtcbiAgICB9XG5cbiAgICAvLyBVc2luZyB2aWV3LmdldFVpbnQzMigpIGFsc28gc3dhcHMgdGhlIGJ5dGUgb3JkZXIuXG4gICAgdmFyIF9wcm90byA9IEFFU0RlY3J5cHRvci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLnVpbnQ4QXJyYXlUb1VpbnQzMkFycmF5XyA9IGZ1bmN0aW9uIHVpbnQ4QXJyYXlUb1VpbnQzMkFycmF5XyhhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIpO1xuICAgICAgdmFyIG5ld0FycmF5ID0gbmV3IFVpbnQzMkFycmF5KDQpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgbmV3QXJyYXlbaV0gPSB2aWV3LmdldFVpbnQzMihpICogNCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3QXJyYXk7XG4gICAgfTtcbiAgICBfcHJvdG8uaW5pdFRhYmxlID0gZnVuY3Rpb24gaW5pdFRhYmxlKCkge1xuICAgICAgdmFyIHNCb3ggPSB0aGlzLnNCb3g7XG4gICAgICB2YXIgaW52U0JveCA9IHRoaXMuaW52U0JveDtcbiAgICAgIHZhciBzdWJNaXggPSB0aGlzLnN1Yk1peDtcbiAgICAgIHZhciBzdWJNaXgwID0gc3ViTWl4WzBdO1xuICAgICAgdmFyIHN1Yk1peDEgPSBzdWJNaXhbMV07XG4gICAgICB2YXIgc3ViTWl4MiA9IHN1Yk1peFsyXTtcbiAgICAgIHZhciBzdWJNaXgzID0gc3ViTWl4WzNdO1xuICAgICAgdmFyIGludlN1Yk1peCA9IHRoaXMuaW52U3ViTWl4O1xuICAgICAgdmFyIGludlN1Yk1peDAgPSBpbnZTdWJNaXhbMF07XG4gICAgICB2YXIgaW52U3ViTWl4MSA9IGludlN1Yk1peFsxXTtcbiAgICAgIHZhciBpbnZTdWJNaXgyID0gaW52U3ViTWl4WzJdO1xuICAgICAgdmFyIGludlN1Yk1peDMgPSBpbnZTdWJNaXhbM107XG4gICAgICB2YXIgZCA9IG5ldyBVaW50MzJBcnJheSgyNTYpO1xuICAgICAgdmFyIHggPSAwO1xuICAgICAgdmFyIHhpID0gMDtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgICBpZiAoaSA8IDEyOCkge1xuICAgICAgICAgIGRbaV0gPSBpIDw8IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZFtpXSA9IGkgPDwgMSBeIDB4MTFiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICAgICAgdmFyIHN4ID0geGkgXiB4aSA8PCAxIF4geGkgPDwgMiBeIHhpIDw8IDMgXiB4aSA8PCA0O1xuICAgICAgICBzeCA9IHN4ID4+PiA4IF4gc3ggJiAweGZmIF4gMHg2MztcbiAgICAgICAgc0JveFt4XSA9IHN4O1xuICAgICAgICBpbnZTQm94W3N4XSA9IHg7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSBtdWx0aXBsaWNhdGlvblxuICAgICAgICB2YXIgeDIgPSBkW3hdO1xuICAgICAgICB2YXIgeDQgPSBkW3gyXTtcbiAgICAgICAgdmFyIHg4ID0gZFt4NF07XG5cbiAgICAgICAgLy8gQ29tcHV0ZSBzdWIvaW52U3ViIGJ5dGVzLCBtaXggY29sdW1ucyB0YWJsZXNcbiAgICAgICAgdmFyIHQgPSBkW3N4XSAqIDB4MTAxIF4gc3ggKiAweDEwMTAxMDA7XG4gICAgICAgIHN1Yk1peDBbeF0gPSB0IDw8IDI0IHwgdCA+Pj4gODtcbiAgICAgICAgc3ViTWl4MVt4XSA9IHQgPDwgMTYgfCB0ID4+PiAxNjtcbiAgICAgICAgc3ViTWl4Mlt4XSA9IHQgPDwgOCB8IHQgPj4+IDI0O1xuICAgICAgICBzdWJNaXgzW3hdID0gdDtcblxuICAgICAgICAvLyBDb21wdXRlIGludiBzdWIgYnl0ZXMsIGludiBtaXggY29sdW1ucyB0YWJsZXNcbiAgICAgICAgdCA9IHg4ICogMHgxMDEwMTAxIF4geDQgKiAweDEwMDAxIF4geDIgKiAweDEwMSBeIHggKiAweDEwMTAxMDA7XG4gICAgICAgIGludlN1Yk1peDBbc3hdID0gdCA8PCAyNCB8IHQgPj4+IDg7XG4gICAgICAgIGludlN1Yk1peDFbc3hdID0gdCA8PCAxNiB8IHQgPj4+IDE2O1xuICAgICAgICBpbnZTdWJNaXgyW3N4XSA9IHQgPDwgOCB8IHQgPj4+IDI0O1xuICAgICAgICBpbnZTdWJNaXgzW3N4XSA9IHQ7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSBuZXh0IGNvdW50ZXJcbiAgICAgICAgaWYgKCF4KSB7XG4gICAgICAgICAgeCA9IHhpID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dO1xuICAgICAgICAgIHhpIF49IGRbZFt4aV1dO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uZXhwYW5kS2V5ID0gZnVuY3Rpb24gZXhwYW5kS2V5KGtleUJ1ZmZlcikge1xuICAgICAgLy8gY29udmVydCBrZXlCdWZmZXIgdG8gVWludDMyQXJyYXlcbiAgICAgIHZhciBrZXkgPSB0aGlzLnVpbnQ4QXJyYXlUb1VpbnQzMkFycmF5XyhrZXlCdWZmZXIpO1xuICAgICAgdmFyIHNhbWVLZXkgPSB0cnVlO1xuICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICB3aGlsZSAob2Zmc2V0IDwga2V5Lmxlbmd0aCAmJiBzYW1lS2V5KSB7XG4gICAgICAgIHNhbWVLZXkgPSBrZXlbb2Zmc2V0XSA9PT0gdGhpcy5rZXlbb2Zmc2V0XTtcbiAgICAgICAgb2Zmc2V0Kys7XG4gICAgICB9XG4gICAgICBpZiAoc2FtZUtleSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgIHZhciBrZXlTaXplID0gdGhpcy5rZXlTaXplID0ga2V5Lmxlbmd0aDtcbiAgICAgIGlmIChrZXlTaXplICE9PSA0ICYmIGtleVNpemUgIT09IDYgJiYga2V5U2l6ZSAhPT0gOCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYWVzIGtleSBzaXplPScgKyBrZXlTaXplKTtcbiAgICAgIH1cbiAgICAgIHZhciBrc1Jvd3MgPSB0aGlzLmtzUm93cyA9IChrZXlTaXplICsgNiArIDEpICogNDtcbiAgICAgIHZhciBrc1JvdztcbiAgICAgIHZhciBpbnZLc1JvdztcbiAgICAgIHZhciBrZXlTY2hlZHVsZSA9IHRoaXMua2V5U2NoZWR1bGUgPSBuZXcgVWludDMyQXJyYXkoa3NSb3dzKTtcbiAgICAgIHZhciBpbnZLZXlTY2hlZHVsZSA9IHRoaXMuaW52S2V5U2NoZWR1bGUgPSBuZXcgVWludDMyQXJyYXkoa3NSb3dzKTtcbiAgICAgIHZhciBzYm94ID0gdGhpcy5zQm94O1xuICAgICAgdmFyIHJjb24gPSB0aGlzLnJjb247XG4gICAgICB2YXIgaW52U3ViTWl4ID0gdGhpcy5pbnZTdWJNaXg7XG4gICAgICB2YXIgaW52U3ViTWl4MCA9IGludlN1Yk1peFswXTtcbiAgICAgIHZhciBpbnZTdWJNaXgxID0gaW52U3ViTWl4WzFdO1xuICAgICAgdmFyIGludlN1Yk1peDIgPSBpbnZTdWJNaXhbMl07XG4gICAgICB2YXIgaW52U3ViTWl4MyA9IGludlN1Yk1peFszXTtcbiAgICAgIHZhciBwcmV2O1xuICAgICAgdmFyIHQ7XG4gICAgICBmb3IgKGtzUm93ID0gMDsga3NSb3cgPCBrc1Jvd3M7IGtzUm93KyspIHtcbiAgICAgICAgaWYgKGtzUm93IDwga2V5U2l6ZSkge1xuICAgICAgICAgIHByZXYgPSBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlba3NSb3ddO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHQgPSBwcmV2O1xuICAgICAgICBpZiAoa3NSb3cgJSBrZXlTaXplID09PSAwKSB7XG4gICAgICAgICAgLy8gUm90IHdvcmRcbiAgICAgICAgICB0ID0gdCA8PCA4IHwgdCA+Pj4gMjQ7XG5cbiAgICAgICAgICAvLyBTdWIgd29yZFxuICAgICAgICAgIHQgPSBzYm94W3QgPj4+IDI0XSA8PCAyNCB8IHNib3hbdCA+Pj4gMTYgJiAweGZmXSA8PCAxNiB8IHNib3hbdCA+Pj4gOCAmIDB4ZmZdIDw8IDggfCBzYm94W3QgJiAweGZmXTtcblxuICAgICAgICAgIC8vIE1peCBSY29uXG4gICAgICAgICAgdCBePSByY29uW2tzUm93IC8ga2V5U2l6ZSB8IDBdIDw8IDI0O1xuICAgICAgICB9IGVsc2UgaWYgKGtleVNpemUgPiA2ICYmIGtzUm93ICUga2V5U2l6ZSA9PT0gNCkge1xuICAgICAgICAgIC8vIFN1YiB3b3JkXG4gICAgICAgICAgdCA9IHNib3hbdCA+Pj4gMjRdIDw8IDI0IHwgc2JveFt0ID4+PiAxNiAmIDB4ZmZdIDw8IDE2IHwgc2JveFt0ID4+PiA4ICYgMHhmZl0gPDwgOCB8IHNib3hbdCAmIDB4ZmZdO1xuICAgICAgICB9XG4gICAgICAgIGtleVNjaGVkdWxlW2tzUm93XSA9IHByZXYgPSAoa2V5U2NoZWR1bGVba3NSb3cgLSBrZXlTaXplXSBeIHQpID4+PiAwO1xuICAgICAgfVxuICAgICAgZm9yIChpbnZLc1JvdyA9IDA7IGludktzUm93IDwga3NSb3dzOyBpbnZLc1JvdysrKSB7XG4gICAgICAgIGtzUm93ID0ga3NSb3dzIC0gaW52S3NSb3c7XG4gICAgICAgIGlmIChpbnZLc1JvdyAmIDMpIHtcbiAgICAgICAgICB0ID0ga2V5U2NoZWR1bGVba3NSb3ddO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHQgPSBrZXlTY2hlZHVsZVtrc1JvdyAtIDRdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCkge1xuICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW52S2V5U2NoZWR1bGVbaW52S3NSb3ddID0gaW52U3ViTWl4MFtzYm94W3QgPj4+IDI0XV0gXiBpbnZTdWJNaXgxW3Nib3hbdCA+Pj4gMTYgJiAweGZmXV0gXiBpbnZTdWJNaXgyW3Nib3hbdCA+Pj4gOCAmIDB4ZmZdXSBeIGludlN1Yk1peDNbc2JveFt0ICYgMHhmZl1dO1xuICAgICAgICB9XG4gICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IGludktleVNjaGVkdWxlW2ludktzUm93XSA+Pj4gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGRpbmcgdGhpcyBhcyBhIG1ldGhvZCBncmVhdGx5IGltcHJvdmVzIHBlcmZvcm1hbmNlLlxuICAgIDtcbiAgICBfcHJvdG8ubmV0d29ya1RvSG9zdE9yZGVyU3dhcCA9IGZ1bmN0aW9uIG5ldHdvcmtUb0hvc3RPcmRlclN3YXAod29yZCkge1xuICAgICAgcmV0dXJuIHdvcmQgPDwgMjQgfCAod29yZCAmIDB4ZmYwMCkgPDwgOCB8ICh3b3JkICYgMHhmZjAwMDApID4+IDggfCB3b3JkID4+PiAyNDtcbiAgICB9O1xuICAgIF9wcm90by5kZWNyeXB0ID0gZnVuY3Rpb24gZGVjcnlwdChpbnB1dEFycmF5QnVmZmVyLCBvZmZzZXQsIGFlc0lWKSB7XG4gICAgICB2YXIgblJvdW5kcyA9IHRoaXMua2V5U2l6ZSArIDY7XG4gICAgICB2YXIgaW52S2V5U2NoZWR1bGUgPSB0aGlzLmludktleVNjaGVkdWxlO1xuICAgICAgdmFyIGludlNCT1ggPSB0aGlzLmludlNCb3g7XG4gICAgICB2YXIgaW52U3ViTWl4ID0gdGhpcy5pbnZTdWJNaXg7XG4gICAgICB2YXIgaW52U3ViTWl4MCA9IGludlN1Yk1peFswXTtcbiAgICAgIHZhciBpbnZTdWJNaXgxID0gaW52U3ViTWl4WzFdO1xuICAgICAgdmFyIGludlN1Yk1peDIgPSBpbnZTdWJNaXhbMl07XG4gICAgICB2YXIgaW52U3ViTWl4MyA9IGludlN1Yk1peFszXTtcbiAgICAgIHZhciBpbml0VmVjdG9yID0gdGhpcy51aW50OEFycmF5VG9VaW50MzJBcnJheV8oYWVzSVYpO1xuICAgICAgdmFyIGluaXRWZWN0b3IwID0gaW5pdFZlY3RvclswXTtcbiAgICAgIHZhciBpbml0VmVjdG9yMSA9IGluaXRWZWN0b3JbMV07XG4gICAgICB2YXIgaW5pdFZlY3RvcjIgPSBpbml0VmVjdG9yWzJdO1xuICAgICAgdmFyIGluaXRWZWN0b3IzID0gaW5pdFZlY3RvclszXTtcbiAgICAgIHZhciBpbnB1dEludDMyID0gbmV3IEludDMyQXJyYXkoaW5wdXRBcnJheUJ1ZmZlcik7XG4gICAgICB2YXIgb3V0cHV0SW50MzIgPSBuZXcgSW50MzJBcnJheShpbnB1dEludDMyLmxlbmd0aCk7XG4gICAgICB2YXIgdDAsIHQxLCB0MiwgdDM7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG4gICAgICB2YXIgaW5wdXRXb3JkczAsIGlucHV0V29yZHMxLCBpbnB1dFdvcmRzMiwgaW5wdXRXb3JkczM7XG4gICAgICB2YXIga3NSb3csIGk7XG4gICAgICB2YXIgc3dhcFdvcmQgPSB0aGlzLm5ldHdvcmtUb0hvc3RPcmRlclN3YXA7XG4gICAgICB3aGlsZSAob2Zmc2V0IDwgaW5wdXRJbnQzMi5sZW5ndGgpIHtcbiAgICAgICAgaW5wdXRXb3JkczAgPSBzd2FwV29yZChpbnB1dEludDMyW29mZnNldF0pO1xuICAgICAgICBpbnB1dFdvcmRzMSA9IHN3YXBXb3JkKGlucHV0SW50MzJbb2Zmc2V0ICsgMV0pO1xuICAgICAgICBpbnB1dFdvcmRzMiA9IHN3YXBXb3JkKGlucHV0SW50MzJbb2Zmc2V0ICsgMl0pO1xuICAgICAgICBpbnB1dFdvcmRzMyA9IHN3YXBXb3JkKGlucHV0SW50MzJbb2Zmc2V0ICsgM10pO1xuICAgICAgICBzMCA9IGlucHV0V29yZHMwIF4gaW52S2V5U2NoZWR1bGVbMF07XG4gICAgICAgIHMxID0gaW5wdXRXb3JkczMgXiBpbnZLZXlTY2hlZHVsZVsxXTtcbiAgICAgICAgczIgPSBpbnB1dFdvcmRzMiBeIGludktleVNjaGVkdWxlWzJdO1xuICAgICAgICBzMyA9IGlucHV0V29yZHMxIF4gaW52S2V5U2NoZWR1bGVbM107XG4gICAgICAgIGtzUm93ID0gNDtcblxuICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggdGhlIHJvdW5kcyBvZiBkZWNyeXB0aW9uXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBuUm91bmRzOyBpKyspIHtcbiAgICAgICAgICB0MCA9IGludlN1Yk1peDBbczAgPj4+IDI0XSBeIGludlN1Yk1peDFbczEgPj4gMTYgJiAweGZmXSBeIGludlN1Yk1peDJbczIgPj4gOCAmIDB4ZmZdIF4gaW52U3ViTWl4M1tzMyAmIDB4ZmZdIF4gaW52S2V5U2NoZWR1bGVba3NSb3ddO1xuICAgICAgICAgIHQxID0gaW52U3ViTWl4MFtzMSA+Pj4gMjRdIF4gaW52U3ViTWl4MVtzMiA+PiAxNiAmIDB4ZmZdIF4gaW52U3ViTWl4MltzMyA+PiA4ICYgMHhmZl0gXiBpbnZTdWJNaXgzW3MwICYgMHhmZl0gXiBpbnZLZXlTY2hlZHVsZVtrc1JvdyArIDFdO1xuICAgICAgICAgIHQyID0gaW52U3ViTWl4MFtzMiA+Pj4gMjRdIF4gaW52U3ViTWl4MVtzMyA+PiAxNiAmIDB4ZmZdIF4gaW52U3ViTWl4MltzMCA+PiA4ICYgMHhmZl0gXiBpbnZTdWJNaXgzW3MxICYgMHhmZl0gXiBpbnZLZXlTY2hlZHVsZVtrc1JvdyArIDJdO1xuICAgICAgICAgIHQzID0gaW52U3ViTWl4MFtzMyA+Pj4gMjRdIF4gaW52U3ViTWl4MVtzMCA+PiAxNiAmIDB4ZmZdIF4gaW52U3ViTWl4MltzMSA+PiA4ICYgMHhmZl0gXiBpbnZTdWJNaXgzW3MyICYgMHhmZl0gXiBpbnZLZXlTY2hlZHVsZVtrc1JvdyArIDNdO1xuICAgICAgICAgIC8vIFVwZGF0ZSBzdGF0ZVxuICAgICAgICAgIHMwID0gdDA7XG4gICAgICAgICAgczEgPSB0MTtcbiAgICAgICAgICBzMiA9IHQyO1xuICAgICAgICAgIHMzID0gdDM7XG4gICAgICAgICAga3NSb3cgPSBrc1JvdyArIDQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaGlmdCByb3dzLCBzdWIgYnl0ZXMsIGFkZCByb3VuZCBrZXlcbiAgICAgICAgdDAgPSBpbnZTQk9YW3MwID4+PiAyNF0gPDwgMjQgXiBpbnZTQk9YW3MxID4+IDE2ICYgMHhmZl0gPDwgMTYgXiBpbnZTQk9YW3MyID4+IDggJiAweGZmXSA8PCA4IF4gaW52U0JPWFtzMyAmIDB4ZmZdIF4gaW52S2V5U2NoZWR1bGVba3NSb3ddO1xuICAgICAgICB0MSA9IGludlNCT1hbczEgPj4+IDI0XSA8PCAyNCBeIGludlNCT1hbczIgPj4gMTYgJiAweGZmXSA8PCAxNiBeIGludlNCT1hbczMgPj4gOCAmIDB4ZmZdIDw8IDggXiBpbnZTQk9YW3MwICYgMHhmZl0gXiBpbnZLZXlTY2hlZHVsZVtrc1JvdyArIDFdO1xuICAgICAgICB0MiA9IGludlNCT1hbczIgPj4+IDI0XSA8PCAyNCBeIGludlNCT1hbczMgPj4gMTYgJiAweGZmXSA8PCAxNiBeIGludlNCT1hbczAgPj4gOCAmIDB4ZmZdIDw8IDggXiBpbnZTQk9YW3MxICYgMHhmZl0gXiBpbnZLZXlTY2hlZHVsZVtrc1JvdyArIDJdO1xuICAgICAgICB0MyA9IGludlNCT1hbczMgPj4+IDI0XSA8PCAyNCBeIGludlNCT1hbczAgPj4gMTYgJiAweGZmXSA8PCAxNiBeIGludlNCT1hbczEgPj4gOCAmIDB4ZmZdIDw8IDggXiBpbnZTQk9YW3MyICYgMHhmZl0gXiBpbnZLZXlTY2hlZHVsZVtrc1JvdyArIDNdO1xuXG4gICAgICAgIC8vIFdyaXRlXG4gICAgICAgIG91dHB1dEludDMyW29mZnNldF0gPSBzd2FwV29yZCh0MCBeIGluaXRWZWN0b3IwKTtcbiAgICAgICAgb3V0cHV0SW50MzJbb2Zmc2V0ICsgMV0gPSBzd2FwV29yZCh0MyBeIGluaXRWZWN0b3IxKTtcbiAgICAgICAgb3V0cHV0SW50MzJbb2Zmc2V0ICsgMl0gPSBzd2FwV29yZCh0MiBeIGluaXRWZWN0b3IyKTtcbiAgICAgICAgb3V0cHV0SW50MzJbb2Zmc2V0ICsgM10gPSBzd2FwV29yZCh0MSBeIGluaXRWZWN0b3IzKTtcblxuICAgICAgICAvLyByZXNldCBpbml0VmVjdG9yIHRvIGxhc3QgNCB1bnNpZ25lZCBpbnRcbiAgICAgICAgaW5pdFZlY3RvcjAgPSBpbnB1dFdvcmRzMDtcbiAgICAgICAgaW5pdFZlY3RvcjEgPSBpbnB1dFdvcmRzMTtcbiAgICAgICAgaW5pdFZlY3RvcjIgPSBpbnB1dFdvcmRzMjtcbiAgICAgICAgaW5pdFZlY3RvcjMgPSBpbnB1dFdvcmRzMztcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0ICsgNDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXRJbnQzMi5idWZmZXI7XG4gICAgfTtcbiAgICByZXR1cm4gQUVTRGVjcnlwdG9yO1xuICB9KCk7XG5cbiAgdmFyIEZhc3RBRVNLZXkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZhc3RBRVNLZXkoc3VidGxlLCBrZXksIGFlc01vZGUpIHtcbiAgICAgIHRoaXMuc3VidGxlID0gdm9pZCAwO1xuICAgICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgICB0aGlzLmFlc01vZGUgPSB2b2lkIDA7XG4gICAgICB0aGlzLnN1YnRsZSA9IHN1YnRsZTtcbiAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgdGhpcy5hZXNNb2RlID0gYWVzTW9kZTtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IEZhc3RBRVNLZXkucHJvdG90eXBlO1xuICAgIF9wcm90by5leHBhbmRLZXkgPSBmdW5jdGlvbiBleHBhbmRLZXkoKSB7XG4gICAgICB2YXIgc3VidGxlQWxnb05hbWUgPSBnZXRTdWJ0bGVBbGdvTmFtZSh0aGlzLmFlc01vZGUpO1xuICAgICAgcmV0dXJuIHRoaXMuc3VidGxlLmltcG9ydEtleSgncmF3JywgdGhpcy5rZXksIHtcbiAgICAgICAgbmFtZTogc3VidGxlQWxnb05hbWVcbiAgICAgIH0sIGZhbHNlLCBbJ2VuY3J5cHQnLCAnZGVjcnlwdCddKTtcbiAgICB9O1xuICAgIHJldHVybiBGYXN0QUVTS2V5O1xuICB9KCk7XG4gIGZ1bmN0aW9uIGdldFN1YnRsZUFsZ29OYW1lKGFlc01vZGUpIHtcbiAgICBzd2l0Y2ggKGFlc01vZGUpIHtcbiAgICAgIGNhc2UgRGVjcnlwdGVyQWVzTW9kZS5jYmM6XG4gICAgICAgIHJldHVybiAnQUVTLUNCQyc7XG4gICAgICBjYXNlIERlY3J5cHRlckFlc01vZGUuY3RyOlxuICAgICAgICByZXR1cm4gJ0FFUy1DVFInO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW0Zhc3RBRVNLZXldIGludmFsaWQgYWVzIG1vZGUgXCIgKyBhZXNNb2RlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgQ0hVTktfU0laRSA9IDE2OyAvLyAxNiBieXRlcywgMTI4IGJpdHNcbiAgdmFyIERlY3J5cHRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVjcnlwdGVyKGNvbmZpZywgX3RlbXApIHtcbiAgICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIF9yZWYkcmVtb3ZlUEtDUzdQYWRkaSA9IF9yZWYucmVtb3ZlUEtDUzdQYWRkaW5nLFxuICAgICAgICByZW1vdmVQS0NTN1BhZGRpbmcgPSBfcmVmJHJlbW92ZVBLQ1M3UGFkZGkgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHJlbW92ZVBLQ1M3UGFkZGk7XG4gICAgICB0aGlzLmxvZ0VuYWJsZWQgPSB0cnVlO1xuICAgICAgdGhpcy5yZW1vdmVQS0NTN1BhZGRpbmcgPSB2b2lkIDA7XG4gICAgICB0aGlzLnN1YnRsZSA9IG51bGw7XG4gICAgICB0aGlzLnNvZnR3YXJlRGVjcnlwdGVyID0gbnVsbDtcbiAgICAgIHRoaXMua2V5ID0gbnVsbDtcbiAgICAgIHRoaXMuZmFzdEFlc0tleSA9IG51bGw7XG4gICAgICB0aGlzLnJlbWFpbmRlckRhdGEgPSBudWxsO1xuICAgICAgdGhpcy5jdXJyZW50SVYgPSBudWxsO1xuICAgICAgdGhpcy5jdXJyZW50UmVzdWx0ID0gbnVsbDtcbiAgICAgIHRoaXMudXNlU29mdHdhcmUgPSB2b2lkIDA7XG4gICAgICB0aGlzLmVuYWJsZVNvZnR3YXJlQUVTID0gdm9pZCAwO1xuICAgICAgdGhpcy5lbmFibGVTb2Z0d2FyZUFFUyA9IGNvbmZpZy5lbmFibGVTb2Z0d2FyZUFFUztcbiAgICAgIHRoaXMucmVtb3ZlUEtDUzdQYWRkaW5nID0gcmVtb3ZlUEtDUzdQYWRkaW5nO1xuICAgICAgLy8gYnVpbHQgaW4gZGVjcnlwdG9yIGV4cGVjdHMgUEtDUzcgcGFkZGluZ1xuICAgICAgaWYgKHJlbW92ZVBLQ1M3UGFkZGluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBicm93c2VyQ3J5cHRvID0gc2VsZi5jcnlwdG87XG4gICAgICAgICAgaWYgKGJyb3dzZXJDcnlwdG8pIHtcbiAgICAgICAgICAgIHRoaXMuc3VidGxlID0gYnJvd3NlckNyeXB0by5zdWJ0bGUgfHwgYnJvd3NlckNyeXB0by53ZWJraXRTdWJ0bGU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLyogbm8tb3AgKi9cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy51c2VTb2Z0d2FyZSA9ICF0aGlzLnN1YnRsZTtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IERlY3J5cHRlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5zdWJ0bGUgPSBudWxsO1xuICAgICAgdGhpcy5zb2Z0d2FyZURlY3J5cHRlciA9IG51bGw7XG4gICAgICB0aGlzLmtleSA9IG51bGw7XG4gICAgICB0aGlzLmZhc3RBZXNLZXkgPSBudWxsO1xuICAgICAgdGhpcy5yZW1haW5kZXJEYXRhID0gbnVsbDtcbiAgICAgIHRoaXMuY3VycmVudElWID0gbnVsbDtcbiAgICAgIHRoaXMuY3VycmVudFJlc3VsdCA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8uaXNTeW5jID0gZnVuY3Rpb24gaXNTeW5jKCkge1xuICAgICAgcmV0dXJuIHRoaXMudXNlU29mdHdhcmU7XG4gICAgfTtcbiAgICBfcHJvdG8uZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgIHZhciBjdXJyZW50UmVzdWx0ID0gdGhpcy5jdXJyZW50UmVzdWx0LFxuICAgICAgICByZW1haW5kZXJEYXRhID0gdGhpcy5yZW1haW5kZXJEYXRhO1xuICAgICAgaWYgKCFjdXJyZW50UmVzdWx0IHx8IHJlbWFpbmRlckRhdGEpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoY3VycmVudFJlc3VsdCk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICBpZiAodGhpcy5yZW1vdmVQS0NTN1BhZGRpbmcpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZVBhZGRpbmcoZGF0YSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9O1xuICAgIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5jdXJyZW50UmVzdWx0ID0gbnVsbDtcbiAgICAgIHRoaXMuY3VycmVudElWID0gbnVsbDtcbiAgICAgIHRoaXMucmVtYWluZGVyRGF0YSA9IG51bGw7XG4gICAgICBpZiAodGhpcy5zb2Z0d2FyZURlY3J5cHRlcikge1xuICAgICAgICB0aGlzLnNvZnR3YXJlRGVjcnlwdGVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5kZWNyeXB0ID0gZnVuY3Rpb24gZGVjcnlwdChkYXRhLCBrZXksIGl2LCBhZXNNb2RlKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgaWYgKHRoaXMudXNlU29mdHdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICB2YXIgZGF0YVZpZXcgPSBBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkgPyBkYXRhIDogbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gICAgICAgICAgX3RoaXMuc29mdHdhcmVEZWNyeXB0KGRhdGFWaWV3LCBrZXksIGl2LCBhZXNNb2RlKTtcbiAgICAgICAgICB2YXIgZGVjcnlwdFJlc3VsdCA9IF90aGlzLmZsdXNoKCk7XG4gICAgICAgICAgaWYgKGRlY3J5cHRSZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoZGVjcnlwdFJlc3VsdC5idWZmZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdbc29mdHdhcmVEZWNyeXB0XSBGYWlsZWQgdG8gZGVjcnlwdCBkYXRhJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy53ZWJDcnlwdG9EZWNyeXB0KG5ldyBVaW50OEFycmF5KGRhdGEpLCBrZXksIGl2LCBhZXNNb2RlKTtcbiAgICB9XG5cbiAgICAvLyBTb2Z0d2FyZSBkZWNyeXB0aW9uIGlzIHByb2dyZXNzaXZlLiBQcm9ncmVzc2l2ZSBkZWNyeXB0aW9uIG1heSBub3QgcmV0dXJuIGEgcmVzdWx0IG9uIGVhY2ggY2FsbC4gQW55IGNhY2hlZFxuICAgIC8vIGRhdGEgaXMgaGFuZGxlZCBpbiB0aGUgZmx1c2goKSBjYWxsXG4gICAgO1xuICAgIF9wcm90by5zb2Z0d2FyZURlY3J5cHQgPSBmdW5jdGlvbiBzb2Z0d2FyZURlY3J5cHQoZGF0YSwga2V5LCBpdiwgYWVzTW9kZSkge1xuICAgICAgdmFyIGN1cnJlbnRJViA9IHRoaXMuY3VycmVudElWLFxuICAgICAgICBjdXJyZW50UmVzdWx0ID0gdGhpcy5jdXJyZW50UmVzdWx0LFxuICAgICAgICByZW1haW5kZXJEYXRhID0gdGhpcy5yZW1haW5kZXJEYXRhO1xuICAgICAgaWYgKGFlc01vZGUgIT09IERlY3J5cHRlckFlc01vZGUuY2JjIHx8IGtleS5ieXRlTGVuZ3RoICE9PSAxNikge1xuICAgICAgICBsb2dnZXIud2FybignU29mdHdhcmVEZWNyeXB0OiBjYW4gb25seSBoYW5kbGUgQUVTLTEyOC1DQkMnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLmxvZ09uY2UoJ0pTIEFFUyBkZWNyeXB0Jyk7XG4gICAgICAvLyBUaGUgb3V0cHV0IGlzIHN0YWdnZXJlZCBkdXJpbmcgcHJvZ3Jlc3NpdmUgcGFyc2luZyAtIHRoZSBjdXJyZW50IHJlc3VsdCBpcyBjYWNoZWQsIGFuZCBlbWl0dGVkIG9uIHRoZSBuZXh0IGNhbGxcbiAgICAgIC8vIFRoaXMgaXMgZG9uZSBpbiBvcmRlciB0byBzdHJpcCBQS0NTNyBwYWRkaW5nLCB3aGljaCBpcyBmb3VuZCBhdCB0aGUgZW5kIG9mIGVhY2ggc2VnbWVudC4gV2Ugb25seSBrbm93IHdlJ3ZlIHJlYWNoZWRcbiAgICAgIC8vIHRoZSBlbmQgb24gZmx1c2goKSwgYnV0IGJ5IHRoYXQgdGltZSB3ZSBoYXZlIGFscmVhZHkgcmVjZWl2ZWQgYWxsIGJ5dGVzIGZvciB0aGUgc2VnbWVudC5cbiAgICAgIC8vIFByb2dyZXNzaXZlIGRlY3J5cHRpb24gZG9lcyBub3Qgd29yayB3aXRoIFdlYkNyeXB0b1xuXG4gICAgICBpZiAocmVtYWluZGVyRGF0YSkge1xuICAgICAgICBkYXRhID0gYXBwZW5kVWludDhBcnJheShyZW1haW5kZXJEYXRhLCBkYXRhKTtcbiAgICAgICAgdGhpcy5yZW1haW5kZXJEYXRhID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gQnl0ZSBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2IChBRVMtMTI4ID0gMTI4IGJpdCBibG9ja3MgPSAxNiBieXRlcylcbiAgICAgIHZhciBjdXJyZW50Q2h1bmsgPSB0aGlzLmdldFZhbGlkQ2h1bmsoZGF0YSk7XG4gICAgICBpZiAoIWN1cnJlbnRDaHVuay5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudElWKSB7XG4gICAgICAgIGl2ID0gY3VycmVudElWO1xuICAgICAgfVxuICAgICAgdmFyIHNvZnR3YXJlRGVjcnlwdGVyID0gdGhpcy5zb2Z0d2FyZURlY3J5cHRlcjtcbiAgICAgIGlmICghc29mdHdhcmVEZWNyeXB0ZXIpIHtcbiAgICAgICAgc29mdHdhcmVEZWNyeXB0ZXIgPSB0aGlzLnNvZnR3YXJlRGVjcnlwdGVyID0gbmV3IEFFU0RlY3J5cHRvcigpO1xuICAgICAgfVxuICAgICAgc29mdHdhcmVEZWNyeXB0ZXIuZXhwYW5kS2V5KGtleSk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3VycmVudFJlc3VsdDtcbiAgICAgIHRoaXMuY3VycmVudFJlc3VsdCA9IHNvZnR3YXJlRGVjcnlwdGVyLmRlY3J5cHQoY3VycmVudENodW5rLmJ1ZmZlciwgMCwgaXYpO1xuICAgICAgdGhpcy5jdXJyZW50SVYgPSBjdXJyZW50Q2h1bmsuc2xpY2UoLTE2KS5idWZmZXI7XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBfcHJvdG8ud2ViQ3J5cHRvRGVjcnlwdCA9IGZ1bmN0aW9uIHdlYkNyeXB0b0RlY3J5cHQoZGF0YSwga2V5LCBpdiwgYWVzTW9kZSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICBpZiAodGhpcy5rZXkgIT09IGtleSB8fCAhdGhpcy5mYXN0QWVzS2V5KSB7XG4gICAgICAgIGlmICghdGhpcy5zdWJ0bGUpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMub25XZWJDcnlwdG9FcnJvcihkYXRhLCBrZXksIGl2LCBhZXNNb2RlKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMuZmFzdEFlc0tleSA9IG5ldyBGYXN0QUVTS2V5KHRoaXMuc3VidGxlLCBrZXksIGFlc01vZGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZmFzdEFlc0tleS5leHBhbmRLZXkoKS50aGVuKGZ1bmN0aW9uIChhZXNLZXkpIHtcbiAgICAgICAgLy8gZGVjcnlwdCB1c2luZyB3ZWIgY3J5cHRvXG4gICAgICAgIGlmICghX3RoaXMyLnN1YnRsZSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ3dlYiBjcnlwdG8gbm90IGluaXRpYWxpemVkJykpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzMi5sb2dPbmNlKCdXZWJDcnlwdG8gQUVTIGRlY3J5cHQnKTtcbiAgICAgICAgdmFyIGNyeXB0byA9IG5ldyBBRVNDcnlwdG8oX3RoaXMyLnN1YnRsZSwgbmV3IFVpbnQ4QXJyYXkoaXYpLCBhZXNNb2RlKTtcbiAgICAgICAgcmV0dXJuIGNyeXB0by5kZWNyeXB0KGRhdGEuYnVmZmVyLCBhZXNLZXkpO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBsb2dnZXIud2FybihcIltkZWNyeXB0ZXJdOiBXZWJDcnlwdG8gRXJyb3IsIGRpc2FibGUgV2ViQ3J5cHRvIEFQSSwgXCIgKyBlcnIubmFtZSArIFwiOiBcIiArIGVyci5tZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5vbldlYkNyeXB0b0Vycm9yKGRhdGEsIGtleSwgaXYsIGFlc01vZGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25XZWJDcnlwdG9FcnJvciA9IGZ1bmN0aW9uIG9uV2ViQ3J5cHRvRXJyb3IoZGF0YSwga2V5LCBpdiwgYWVzTW9kZSkge1xuICAgICAgdmFyIGVuYWJsZVNvZnR3YXJlQUVTID0gdGhpcy5lbmFibGVTb2Z0d2FyZUFFUztcbiAgICAgIGlmIChlbmFibGVTb2Z0d2FyZUFFUykge1xuICAgICAgICB0aGlzLnVzZVNvZnR3YXJlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sb2dFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zb2Z0d2FyZURlY3J5cHQoZGF0YSwga2V5LCBpdiwgYWVzTW9kZSk7XG4gICAgICAgIHZhciBkZWNyeXB0UmVzdWx0ID0gdGhpcy5mbHVzaCgpO1xuICAgICAgICBpZiAoZGVjcnlwdFJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiBkZWNyeXB0UmVzdWx0LmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJDcnlwdG8nICsgKGVuYWJsZVNvZnR3YXJlQUVTID8gJyBhbmQgc29mdHdhcmVEZWNyeXB0JyA6ICcnKSArICc6IGZhaWxlZCB0byBkZWNyeXB0IGRhdGEnKTtcbiAgICB9O1xuICAgIF9wcm90by5nZXRWYWxpZENodW5rID0gZnVuY3Rpb24gZ2V0VmFsaWRDaHVuayhkYXRhKSB7XG4gICAgICB2YXIgY3VycmVudENodW5rID0gZGF0YTtcbiAgICAgIHZhciBzcGxpdFBvaW50ID0gZGF0YS5sZW5ndGggLSBkYXRhLmxlbmd0aCAlIENIVU5LX1NJWkU7XG4gICAgICBpZiAoc3BsaXRQb2ludCAhPT0gZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgY3VycmVudENodW5rID0gZGF0YS5zbGljZSgwLCBzcGxpdFBvaW50KTtcbiAgICAgICAgdGhpcy5yZW1haW5kZXJEYXRhID0gZGF0YS5zbGljZShzcGxpdFBvaW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyZW50Q2h1bms7XG4gICAgfTtcbiAgICBfcHJvdG8ubG9nT25jZSA9IGZ1bmN0aW9uIGxvZ09uY2UobXNnKSB7XG4gICAgICBpZiAoIXRoaXMubG9nRW5hYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2dnZXIubG9nKFwiW2RlY3J5cHRlcl06IFwiICsgbXNnKTtcbiAgICAgIHRoaXMubG9nRW5hYmxlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgcmV0dXJuIERlY3J5cHRlcjtcbiAgfSgpO1xuXG4gIHZhciBNSU5fQ0hVTktfU0laRSA9IE1hdGgucG93KDIsIDE3KTsgLy8gMTI4a2JcbiAgdmFyIEZyYWdtZW50TG9hZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGcmFnbWVudExvYWRlcihjb25maWcpIHtcbiAgICAgIHRoaXMuY29uZmlnID0gdm9pZCAwO1xuICAgICAgdGhpcy5sb2FkZXIgPSBudWxsO1xuICAgICAgdGhpcy5wYXJ0TG9hZFRpbWVvdXQgPSAtMTtcbiAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIH1cbiAgICB2YXIgX3Byb3RvID0gRnJhZ21lbnRMb2FkZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIGlmICh0aGlzLmxvYWRlcikge1xuICAgICAgICB0aGlzLmxvYWRlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubG9hZGVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5hYm9ydCA9IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgaWYgKHRoaXMubG9hZGVyKSB7XG4gICAgICAgIC8vIEFib3J0IHRoZSBsb2FkZXIgZm9yIGN1cnJlbnQgZnJhZ21lbnQuIE9ubHkgb25lIG1heSBsb2FkIGF0IGFueSBnaXZlbiB0aW1lXG4gICAgICAgIHRoaXMubG9hZGVyLmFib3J0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ubG9hZCA9IGZ1bmN0aW9uIGxvYWQoZnJhZywgb25Qcm9ncmVzcykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciB1cmwgPSBmcmFnLnVybDtcbiAgICAgIGlmICghdXJsKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgTG9hZEVycm9yKHtcbiAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk5FVFdPUktfRVJST1IsXG4gICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLkZSQUdfTE9BRF9FUlJPUixcbiAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICBlcnJvcjogbmV3IEVycm9yKFwiRnJhZ21lbnQgZG9lcyBub3QgaGF2ZSBhIFwiICsgKHVybCA/ICdwYXJ0IGxpc3QnIDogJ3VybCcpKSxcbiAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbnVsbFxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICB0aGlzLmFib3J0KCk7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgICB2YXIgRnJhZ21lbnRJTG9hZGVyID0gY29uZmlnLmZMb2FkZXI7XG4gICAgICB2YXIgRGVmYXVsdElMb2FkZXIgPSBjb25maWcubG9hZGVyO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKF90aGlzLmxvYWRlcikge1xuICAgICAgICAgIF90aGlzLmxvYWRlci5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZyYWcuZ2FwKSB7XG4gICAgICAgICAgaWYgKGZyYWcudGFnTGlzdC5zb21lKGZ1bmN0aW9uICh0YWdzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFnc1swXSA9PT0gJ0dBUCc7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlamVjdChjcmVhdGVHYXBMb2FkRXJyb3IoZnJhZykpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBSZXNldCB0ZW1wb3JhcnkgdHJlYXRtZW50IGFzIEdBUCB0YWdcbiAgICAgICAgICAgIGZyYWcuZ2FwID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBsb2FkZXIgPSBfdGhpcy5sb2FkZXIgPSBGcmFnbWVudElMb2FkZXIgPyBuZXcgRnJhZ21lbnRJTG9hZGVyKGNvbmZpZykgOiBuZXcgRGVmYXVsdElMb2FkZXIoY29uZmlnKTtcbiAgICAgICAgdmFyIGxvYWRlckNvbnRleHQgPSBjcmVhdGVMb2FkZXJDb250ZXh0KGZyYWcpO1xuICAgICAgICBmcmFnLmxvYWRlciA9IGxvYWRlcjtcbiAgICAgICAgdmFyIGxvYWRQb2xpY3kgPSBnZXRMb2FkZXJDb25maWdXaXRob3V0UmV0aWVzKGNvbmZpZy5mcmFnTG9hZFBvbGljeS5kZWZhdWx0KTtcbiAgICAgICAgdmFyIGxvYWRlckNvbmZpZyA9IHtcbiAgICAgICAgICBsb2FkUG9saWN5OiBsb2FkUG9saWN5LFxuICAgICAgICAgIHRpbWVvdXQ6IGxvYWRQb2xpY3kubWF4TG9hZFRpbWVNcyxcbiAgICAgICAgICBtYXhSZXRyeTogMCxcbiAgICAgICAgICByZXRyeURlbGF5OiAwLFxuICAgICAgICAgIG1heFJldHJ5RGVsYXk6IDAsXG4gICAgICAgICAgaGlnaFdhdGVyTWFyazogZnJhZy5zbiA9PT0gJ2luaXRTZWdtZW50JyA/IEluZmluaXR5IDogTUlOX0NIVU5LX1NJWkVcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQXNzaWduIGZyYWcgc3RhdHMgdG8gdGhlIGxvYWRlcidzIHN0YXRzIHJlZmVyZW5jZVxuICAgICAgICBmcmFnLnN0YXRzID0gbG9hZGVyLnN0YXRzO1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0ge1xuICAgICAgICAgIG9uU3VjY2VzczogZnVuY3Rpb24gb25TdWNjZXNzKHJlc3BvbnNlLCBzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMpIHtcbiAgICAgICAgICAgIF90aGlzLnJlc2V0TG9hZGVyKGZyYWcsIGxvYWRlcik7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICBpZiAoY29udGV4dC5yZXNldElWICYmIGZyYWcuZGVjcnlwdGRhdGEpIHtcbiAgICAgICAgICAgICAgZnJhZy5kZWNyeXB0ZGF0YS5pdiA9IG5ldyBVaW50OEFycmF5KHBheWxvYWQuc2xpY2UoMCwgMTYpKTtcbiAgICAgICAgICAgICAgcGF5bG9hZCA9IHBheWxvYWQuc2xpY2UoMTYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgICAgIHBhcnQ6IG51bGwsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICAgICAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlsc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKHJlc3BvbnNlLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscywgc3RhdHMpIHtcbiAgICAgICAgICAgIF90aGlzLnJlc2V0TG9hZGVyKGZyYWcsIGxvYWRlcik7XG4gICAgICAgICAgICByZWplY3QobmV3IExvYWRFcnJvcih7XG4gICAgICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTkVUV09SS19FUlJPUixcbiAgICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLkZSQUdfTE9BRF9FUlJPUixcbiAgICAgICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgICAgICByZXNwb25zZTogX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgIGRhdGE6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICB9LCByZXNwb25zZSksXG4gICAgICAgICAgICAgIGVycm9yOiBuZXcgRXJyb3IoXCJIVFRQIEVycm9yIFwiICsgcmVzcG9uc2UuY29kZSArIFwiIFwiICsgcmVzcG9uc2UudGV4dCksXG4gICAgICAgICAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlscyxcbiAgICAgICAgICAgICAgc3RhdHM6IHN0YXRzXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbkFib3J0OiBmdW5jdGlvbiBvbkFib3J0KHN0YXRzLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscykge1xuICAgICAgICAgICAgX3RoaXMucmVzZXRMb2FkZXIoZnJhZywgbG9hZGVyKTtcbiAgICAgICAgICAgIHJlamVjdChuZXcgTG9hZEVycm9yKHtcbiAgICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5ORVRXT1JLX0VSUk9SLFxuICAgICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuSU5URVJOQUxfQUJPUlRFRCxcbiAgICAgICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgICAgICBlcnJvcjogbmV3IEVycm9yKCdBYm9ydGVkJyksXG4gICAgICAgICAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlscyxcbiAgICAgICAgICAgICAgc3RhdHM6IHN0YXRzXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvblRpbWVvdXQ6IGZ1bmN0aW9uIG9uVGltZW91dChzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMpIHtcbiAgICAgICAgICAgIF90aGlzLnJlc2V0TG9hZGVyKGZyYWcsIGxvYWRlcik7XG4gICAgICAgICAgICByZWplY3QobmV3IExvYWRFcnJvcih7XG4gICAgICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTkVUV09SS19FUlJPUixcbiAgICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLkZSQUdfTE9BRF9USU1FT1VULFxuICAgICAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgICAgIGVycm9yOiBuZXcgRXJyb3IoXCJUaW1lb3V0IGFmdGVyIFwiICsgbG9hZGVyQ29uZmlnLnRpbWVvdXQgKyBcIm1zXCIpLFxuICAgICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHMsXG4gICAgICAgICAgICAgIHN0YXRzOiBzdGF0c1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBjYWxsYmFja3Mub25Qcm9ncmVzcyA9IGZ1bmN0aW9uIChzdGF0cywgY29udGV4dCwgZGF0YSwgbmV0d29ya0RldGFpbHMpIHtcbiAgICAgICAgICAgIHJldHVybiBvblByb2dyZXNzKHtcbiAgICAgICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICAgICAgcGFydDogbnVsbCxcbiAgICAgICAgICAgICAgcGF5bG9hZDogZGF0YSxcbiAgICAgICAgICAgICAgbmV0d29ya0RldGFpbHM6IG5ldHdvcmtEZXRhaWxzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxvYWRlci5sb2FkKGxvYWRlckNvbnRleHQsIGxvYWRlckNvbmZpZywgY2FsbGJhY2tzKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLmxvYWRQYXJ0ID0gZnVuY3Rpb24gbG9hZFBhcnQoZnJhZywgcGFydCwgb25Qcm9ncmVzcykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICB0aGlzLmFib3J0KCk7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgICB2YXIgRnJhZ21lbnRJTG9hZGVyID0gY29uZmlnLmZMb2FkZXI7XG4gICAgICB2YXIgRGVmYXVsdElMb2FkZXIgPSBjb25maWcubG9hZGVyO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKF90aGlzMi5sb2FkZXIpIHtcbiAgICAgICAgICBfdGhpczIubG9hZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJhZy5nYXAgfHwgcGFydC5nYXApIHtcbiAgICAgICAgICByZWplY3QoY3JlYXRlR2FwTG9hZEVycm9yKGZyYWcsIHBhcnQpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxvYWRlciA9IF90aGlzMi5sb2FkZXIgPSBGcmFnbWVudElMb2FkZXIgPyBuZXcgRnJhZ21lbnRJTG9hZGVyKGNvbmZpZykgOiBuZXcgRGVmYXVsdElMb2FkZXIoY29uZmlnKTtcbiAgICAgICAgdmFyIGxvYWRlckNvbnRleHQgPSBjcmVhdGVMb2FkZXJDb250ZXh0KGZyYWcsIHBhcnQpO1xuICAgICAgICBmcmFnLmxvYWRlciA9IGxvYWRlcjtcbiAgICAgICAgLy8gU2hvdWxkIHdlIGRlZmluZSBhbm90aGVyIGxvYWQgcG9saWN5IGZvciBwYXJ0cz9cbiAgICAgICAgdmFyIGxvYWRQb2xpY3kgPSBnZXRMb2FkZXJDb25maWdXaXRob3V0UmV0aWVzKGNvbmZpZy5mcmFnTG9hZFBvbGljeS5kZWZhdWx0KTtcbiAgICAgICAgdmFyIGxvYWRlckNvbmZpZyA9IHtcbiAgICAgICAgICBsb2FkUG9saWN5OiBsb2FkUG9saWN5LFxuICAgICAgICAgIHRpbWVvdXQ6IGxvYWRQb2xpY3kubWF4TG9hZFRpbWVNcyxcbiAgICAgICAgICBtYXhSZXRyeTogMCxcbiAgICAgICAgICByZXRyeURlbGF5OiAwLFxuICAgICAgICAgIG1heFJldHJ5RGVsYXk6IDAsXG4gICAgICAgICAgaGlnaFdhdGVyTWFyazogTUlOX0NIVU5LX1NJWkVcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQXNzaWduIHBhcnQgc3RhdHMgdG8gdGhlIGxvYWRlcidzIHN0YXRzIHJlZmVyZW5jZVxuICAgICAgICBwYXJ0LnN0YXRzID0gbG9hZGVyLnN0YXRzO1xuICAgICAgICBsb2FkZXIubG9hZChsb2FkZXJDb250ZXh0LCBsb2FkZXJDb25maWcsIHtcbiAgICAgICAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uIG9uU3VjY2VzcyhyZXNwb25zZSwgc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgICAgICAgICBfdGhpczIucmVzZXRMb2FkZXIoZnJhZywgbG9hZGVyKTtcbiAgICAgICAgICAgIF90aGlzMi51cGRhdGVTdGF0c0Zyb21QYXJ0KGZyYWcsIHBhcnQpO1xuICAgICAgICAgICAgdmFyIHBhcnRMb2FkZWREYXRhID0ge1xuICAgICAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgICAgICBwYXJ0OiBwYXJ0LFxuICAgICAgICAgICAgICBwYXlsb2FkOiByZXNwb25zZS5kYXRhLFxuICAgICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvblByb2dyZXNzKHBhcnRMb2FkZWREYXRhKTtcbiAgICAgICAgICAgIHJlc29sdmUocGFydExvYWRlZERhdGEpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25FcnJvcjogZnVuY3Rpb24gb25FcnJvcihyZXNwb25zZSwgY29udGV4dCwgbmV0d29ya0RldGFpbHMsIHN0YXRzKSB7XG4gICAgICAgICAgICBfdGhpczIucmVzZXRMb2FkZXIoZnJhZywgbG9hZGVyKTtcbiAgICAgICAgICAgIHJlamVjdChuZXcgTG9hZEVycm9yKHtcbiAgICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5ORVRXT1JLX0VSUk9SLFxuICAgICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuRlJBR19MT0FEX0VSUk9SLFxuICAgICAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgICAgIHBhcnQ6IHBhcnQsXG4gICAgICAgICAgICAgIHJlc3BvbnNlOiBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgICAgICAgdXJsOiBsb2FkZXJDb250ZXh0LnVybCxcbiAgICAgICAgICAgICAgICBkYXRhOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgfSwgcmVzcG9uc2UpLFxuICAgICAgICAgICAgICBlcnJvcjogbmV3IEVycm9yKFwiSFRUUCBFcnJvciBcIiArIHJlc3BvbnNlLmNvZGUgKyBcIiBcIiArIHJlc3BvbnNlLnRleHQpLFxuICAgICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHMsXG4gICAgICAgICAgICAgIHN0YXRzOiBzdGF0c1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25BYm9ydDogZnVuY3Rpb24gb25BYm9ydChzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMpIHtcbiAgICAgICAgICAgIGZyYWcuc3RhdHMuYWJvcnRlZCA9IHBhcnQuc3RhdHMuYWJvcnRlZDtcbiAgICAgICAgICAgIF90aGlzMi5yZXNldExvYWRlcihmcmFnLCBsb2FkZXIpO1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBMb2FkRXJyb3Ioe1xuICAgICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk5FVFdPUktfRVJST1IsXG4gICAgICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5JTlRFUk5BTF9BQk9SVEVELFxuICAgICAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgICAgIHBhcnQ6IHBhcnQsXG4gICAgICAgICAgICAgIGVycm9yOiBuZXcgRXJyb3IoJ0Fib3J0ZWQnKSxcbiAgICAgICAgICAgICAgbmV0d29ya0RldGFpbHM6IG5ldHdvcmtEZXRhaWxzLFxuICAgICAgICAgICAgICBzdGF0czogc3RhdHNcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uVGltZW91dDogZnVuY3Rpb24gb25UaW1lb3V0KHN0YXRzLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscykge1xuICAgICAgICAgICAgX3RoaXMyLnJlc2V0TG9hZGVyKGZyYWcsIGxvYWRlcik7XG4gICAgICAgICAgICByZWplY3QobmV3IExvYWRFcnJvcih7XG4gICAgICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTkVUV09SS19FUlJPUixcbiAgICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLkZSQUdfTE9BRF9USU1FT1VULFxuICAgICAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgICAgIHBhcnQ6IHBhcnQsXG4gICAgICAgICAgICAgIGVycm9yOiBuZXcgRXJyb3IoXCJUaW1lb3V0IGFmdGVyIFwiICsgbG9hZGVyQ29uZmlnLnRpbWVvdXQgKyBcIm1zXCIpLFxuICAgICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHMsXG4gICAgICAgICAgICAgIHN0YXRzOiBzdGF0c1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by51cGRhdGVTdGF0c0Zyb21QYXJ0ID0gZnVuY3Rpb24gdXBkYXRlU3RhdHNGcm9tUGFydChmcmFnLCBwYXJ0KSB7XG4gICAgICB2YXIgZnJhZ1N0YXRzID0gZnJhZy5zdGF0cztcbiAgICAgIHZhciBwYXJ0U3RhdHMgPSBwYXJ0LnN0YXRzO1xuICAgICAgdmFyIHBhcnRUb3RhbCA9IHBhcnRTdGF0cy50b3RhbDtcbiAgICAgIGZyYWdTdGF0cy5sb2FkZWQgKz0gcGFydFN0YXRzLmxvYWRlZDtcbiAgICAgIGlmIChwYXJ0VG90YWwpIHtcbiAgICAgICAgdmFyIGVzdFRvdGFsUGFydHMgPSBNYXRoLnJvdW5kKGZyYWcuZHVyYXRpb24gLyBwYXJ0LmR1cmF0aW9uKTtcbiAgICAgICAgdmFyIGVzdExvYWRlZFBhcnRzID0gTWF0aC5taW4oTWF0aC5yb3VuZChmcmFnU3RhdHMubG9hZGVkIC8gcGFydFRvdGFsKSwgZXN0VG90YWxQYXJ0cyk7XG4gICAgICAgIHZhciBlc3RSZW1haW5pbmdQYXJ0cyA9IGVzdFRvdGFsUGFydHMgLSBlc3RMb2FkZWRQYXJ0cztcbiAgICAgICAgdmFyIGVzdFJlbWFpbmluZ0J5dGVzID0gZXN0UmVtYWluaW5nUGFydHMgKiBNYXRoLnJvdW5kKGZyYWdTdGF0cy5sb2FkZWQgLyBlc3RMb2FkZWRQYXJ0cyk7XG4gICAgICAgIGZyYWdTdGF0cy50b3RhbCA9IGZyYWdTdGF0cy5sb2FkZWQgKyBlc3RSZW1haW5pbmdCeXRlcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyYWdTdGF0cy50b3RhbCA9IE1hdGgubWF4KGZyYWdTdGF0cy5sb2FkZWQsIGZyYWdTdGF0cy50b3RhbCk7XG4gICAgICB9XG4gICAgICB2YXIgZnJhZ0xvYWRpbmcgPSBmcmFnU3RhdHMubG9hZGluZztcbiAgICAgIHZhciBwYXJ0TG9hZGluZyA9IHBhcnRTdGF0cy5sb2FkaW5nO1xuICAgICAgaWYgKGZyYWdMb2FkaW5nLnN0YXJ0KSB7XG4gICAgICAgIC8vIGFkZCB0byBmcmFnbWVudCBsb2FkZXIgbGF0ZW5jeVxuICAgICAgICBmcmFnTG9hZGluZy5maXJzdCArPSBwYXJ0TG9hZGluZy5maXJzdCAtIHBhcnRMb2FkaW5nLnN0YXJ0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnJhZ0xvYWRpbmcuc3RhcnQgPSBwYXJ0TG9hZGluZy5zdGFydDtcbiAgICAgICAgZnJhZ0xvYWRpbmcuZmlyc3QgPSBwYXJ0TG9hZGluZy5maXJzdDtcbiAgICAgIH1cbiAgICAgIGZyYWdMb2FkaW5nLmVuZCA9IHBhcnRMb2FkaW5nLmVuZDtcbiAgICB9O1xuICAgIF9wcm90by5yZXNldExvYWRlciA9IGZ1bmN0aW9uIHJlc2V0TG9hZGVyKGZyYWcsIGxvYWRlcikge1xuICAgICAgZnJhZy5sb2FkZXIgPSBudWxsO1xuICAgICAgaWYgKHRoaXMubG9hZGVyID09PSBsb2FkZXIpIHtcbiAgICAgICAgc2VsZi5jbGVhclRpbWVvdXQodGhpcy5wYXJ0TG9hZFRpbWVvdXQpO1xuICAgICAgICB0aGlzLmxvYWRlciA9IG51bGw7XG4gICAgICB9XG4gICAgICBsb2FkZXIuZGVzdHJveSgpO1xuICAgIH07XG4gICAgcmV0dXJuIEZyYWdtZW50TG9hZGVyO1xuICB9KCk7XG4gIGZ1bmN0aW9uIGNyZWF0ZUxvYWRlckNvbnRleHQoZnJhZywgcGFydCkge1xuICAgIGlmIChwYXJ0ID09PSB2b2lkIDApIHtcbiAgICAgIHBhcnQgPSBudWxsO1xuICAgIH1cbiAgICB2YXIgc2VnbWVudCA9IHBhcnQgfHwgZnJhZztcbiAgICB2YXIgbG9hZGVyQ29udGV4dCA9IHtcbiAgICAgIGZyYWc6IGZyYWcsXG4gICAgICBwYXJ0OiBwYXJ0LFxuICAgICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInLFxuICAgICAgdXJsOiBzZWdtZW50LnVybCxcbiAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgcmFuZ2VTdGFydDogMCxcbiAgICAgIHJhbmdlRW5kOiAwXG4gICAgfTtcbiAgICB2YXIgc3RhcnQgPSBzZWdtZW50LmJ5dGVSYW5nZVN0YXJ0T2Zmc2V0O1xuICAgIHZhciBlbmQgPSBzZWdtZW50LmJ5dGVSYW5nZUVuZE9mZnNldDtcbiAgICBpZiAoaXNGaW5pdGVOdW1iZXIoc3RhcnQpICYmIGlzRmluaXRlTnVtYmVyKGVuZCkpIHtcbiAgICAgIHZhciBfZnJhZyRkZWNyeXB0ZGF0YTtcbiAgICAgIHZhciBieXRlUmFuZ2VTdGFydCA9IHN0YXJ0O1xuICAgICAgdmFyIGJ5dGVSYW5nZUVuZCA9IGVuZDtcbiAgICAgIGlmIChmcmFnLnNuID09PSAnaW5pdFNlZ21lbnQnICYmIGlzTWV0aG9kRnVsbFNlZ21lbnRBZXNDYmMoKF9mcmFnJGRlY3J5cHRkYXRhID0gZnJhZy5kZWNyeXB0ZGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9mcmFnJGRlY3J5cHRkYXRhLm1ldGhvZCkpIHtcbiAgICAgICAgLy8gTUFQIHNlZ21lbnQgZW5jcnlwdGVkIHdpdGggbWV0aG9kICdBRVMtMTI4JyBvciAnQUVTLTI1NicgKGNiYyksIHdoZW4gc2VydmVkIHdpdGggSFRUUCBSYW5nZSxcbiAgICAgICAgLy8gaGFzIHRoZSB1bmVuY3J5cHRlZCBzaXplIHNwZWNpZmllZCBpbiB0aGUgcmFuZ2UuXG4gICAgICAgIC8vIFJlZjogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LXBhbnRvcy1obHMtcmZjODIxNmJpcy0wOCNzZWN0aW9uLTYuMy42XG4gICAgICAgIHZhciBmcmFnbWVudExlbiA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICBpZiAoZnJhZ21lbnRMZW4gJSAxNikge1xuICAgICAgICAgIGJ5dGVSYW5nZUVuZCA9IGVuZCArICgxNiAtIGZyYWdtZW50TGVuICUgMTYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydCAhPT0gMCkge1xuICAgICAgICAgIGxvYWRlckNvbnRleHQucmVzZXRJViA9IHRydWU7XG4gICAgICAgICAgYnl0ZVJhbmdlU3RhcnQgPSBzdGFydCAtIDE2O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsb2FkZXJDb250ZXh0LnJhbmdlU3RhcnQgPSBieXRlUmFuZ2VTdGFydDtcbiAgICAgIGxvYWRlckNvbnRleHQucmFuZ2VFbmQgPSBieXRlUmFuZ2VFbmQ7XG4gICAgfVxuICAgIHJldHVybiBsb2FkZXJDb250ZXh0O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUdhcExvYWRFcnJvcihmcmFnLCBwYXJ0KSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKFwiR0FQIFwiICsgKGZyYWcuZ2FwID8gJ3RhZycgOiAnYXR0cmlidXRlJykgKyBcIiBmb3VuZFwiKTtcbiAgICB2YXIgZXJyb3JEYXRhID0ge1xuICAgICAgdHlwZTogRXJyb3JUeXBlcy5NRURJQV9FUlJPUixcbiAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5GUkFHX0dBUCxcbiAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgIGZyYWc6IGZyYWcsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBuZXR3b3JrRGV0YWlsczogbnVsbFxuICAgIH07XG4gICAgaWYgKHBhcnQpIHtcbiAgICAgIGVycm9yRGF0YS5wYXJ0ID0gcGFydDtcbiAgICB9XG4gICAgKHBhcnQgPyBwYXJ0IDogZnJhZykuc3RhdHMuYWJvcnRlZCA9IHRydWU7XG4gICAgcmV0dXJuIG5ldyBMb2FkRXJyb3IoZXJyb3JEYXRhKTtcbiAgfVxuICBmdW5jdGlvbiBpc01ldGhvZEZ1bGxTZWdtZW50QWVzQ2JjKG1ldGhvZCkge1xuICAgIHJldHVybiBtZXRob2QgPT09ICdBRVMtMTI4JyB8fCBtZXRob2QgPT09ICdBRVMtMjU2JztcbiAgfVxuICB2YXIgTG9hZEVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXJyb3IpIHtcbiAgICBmdW5jdGlvbiBMb2FkRXJyb3IoZGF0YSkge1xuICAgICAgdmFyIF90aGlzMztcbiAgICAgIF90aGlzMyA9IF9FcnJvci5jYWxsKHRoaXMsIGRhdGEuZXJyb3IubWVzc2FnZSkgfHwgdGhpcztcbiAgICAgIF90aGlzMy5kYXRhID0gdm9pZCAwO1xuICAgICAgX3RoaXMzLmRhdGEgPSBkYXRhO1xuICAgICAgcmV0dXJuIF90aGlzMztcbiAgICB9XG4gICAgX2luaGVyaXRzTG9vc2UoTG9hZEVycm9yLCBfRXJyb3IpO1xuICAgIHJldHVybiBMb2FkRXJyb3I7XG4gIH0oLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoRXJyb3IpKTtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBTdWItY2xhc3Mgc3BlY2lhbGl6YXRpb24gb2YgRXZlbnRIYW5kbGVyIGJhc2UgY2xhc3MuXG4gICAqXG4gICAqIFRhc2tMb29wIGFsbG93cyB0byBzY2hlZHVsZSBhIHRhc2sgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIChvcHRpb25uYWx5IHJlcGVhdGVkbHkpIG9uIHRoZSBtYWluIGxvb3AsXG4gICAqIHNjaGVkdWxlZCBhc3luY2hyb25lb3VzbHksIGF2b2lkaW5nIHJlY3Vyc2l2ZSBjYWxscyBpbiB0aGUgc2FtZSB0aWNrLlxuICAgKlxuICAgKiBUaGUgdGFzayBpdHNlbGYgaXMgaW1wbGVtZW50ZWQgaW4gYGRvVGlja2AuIEl0IGNhbiBiZSByZXF1ZXN0ZWQgYW5kIGNhbGxlZCBmb3Igc2luZ2xlIGV4ZWN1dGlvblxuICAgKiB1c2luZyB0aGUgYHRpY2tgIG1ldGhvZC5cbiAgICpcbiAgICogSXQgd2lsbCBiZSBhc3N1cmVkIHRoYXQgdGhlIHRhc2sgZXhlY3V0aW9uIG1ldGhvZCAoYHRpY2tgKSBvbmx5IGdldHMgY2FsbGVkIG9uY2UgcGVyIG1haW4gbG9vcCBcInRpY2tcIixcbiAgICogbm8gbWF0dGVyIGhvdyBvZnRlbiBpdCBnZXRzIHJlcXVlc3RlZCBmb3IgZXhlY3V0aW9uLiBFeGVjdXRpb24gaW4gZnVydGhlciB0aWNrcyB3aWxsIGJlIHNjaGVkdWxlZCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogSWYgZnVydGhlciBleGVjdXRpb24gcmVxdWVzdHMgaGF2ZSBhbHJlYWR5IGJlZW4gc2NoZWR1bGVkIG9uIHRoZSBuZXh0IHRpY2ssIGl0IGNhbiBiZSBjaGVja2VkIHdpdGggYGhhc05leHRUaWNrYCxcbiAgICogYW5kIGNhbmNlbGxlZCB3aXRoIGBjbGVhck5leHRUaWNrYC5cbiAgICpcbiAgICogVGhlIHRhc2sgY2FuIGJlIHNjaGVkdWxlZCBhcyBhbiBpbnRlcnZhbCByZXBlYXRlZGx5IHdpdGggYSBwZXJpb2QgYXMgcGFyYW1ldGVyIChzZWUgYHNldEludGVydmFsYCwgYGNsZWFySW50ZXJ2YWxgKS5cbiAgICpcbiAgICogU3ViLWNsYXNzZXMgbmVlZCB0byBpbXBsZW1lbnQgdGhlIGBkb1RpY2tgIG1ldGhvZCB3aGljaCB3aWxsIGVmZmVjdGl2ZWx5IGhhdmUgdGhlIHRhc2sgZXhlY3V0aW9uIHJvdXRpbmUuXG4gICAqXG4gICAqIEZ1cnRoZXIgZXhwbGFuYXRpb25zOlxuICAgKlxuICAgKiBUaGUgYmFzZWNsYXNzIGhhcyBhIGB0aWNrYCBtZXRob2QgdGhhdCB3aWxsIHNjaGVkdWxlIHRoZSBkb1RpY2sgY2FsbC4gSXQgbWF5IGJlIGNhbGxlZCBzeW5jaHJvbmVvdXNseVxuICAgKiBvbmx5IGZvciBhIHN0YWNrLWRlcHRoIG9mIG9uZS4gT24gcmUtZW50cmFudCBjYWxscywgc3ViLXNlcXVlbnQgY2FsbHMgYXJlIHNjaGVkdWxlZCBmb3IgbmV4dCBtYWluIGxvb3AgdGlja3MuXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhc2sgZXhlY3V0aW9uIChgdGlja2AgbWV0aG9kKSBpcyBjYWxsZWQgaW4gcmUtZW50cmFudCB3YXkgdGhpcyBpcyBkZXRlY3RlZCBhbmRcbiAgICogd2UgYXJlIGxpbWl0aW5nIHRoZSB0YXNrIGV4ZWN1dGlvbiBwZXIgY2FsbCBzdGFjayB0byBleGFjdGx5IG9uZSwgYnV0IHNjaGVkdWxpbmcvcG9zdC1wb25pbmcgZnVydGhlclxuICAgKiB0YXNrIHByb2Nlc3Npbmcgb24gdGhlIG5leHQgbWFpbiBsb29wIGl0ZXJhdGlvbiAoYWxzbyBrbm93biBhcyBcIm5leHQgdGlja1wiIGluIHRoZSBOb2RlL0pTIHJ1bnRpbWUgbGluZ28pLlxuICAgKi9cbiAgdmFyIFRhc2tMb29wID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTG9nZ2VyKSB7XG4gICAgZnVuY3Rpb24gVGFza0xvb3AobGFiZWwsIGxvZ2dlcikge1xuICAgICAgdmFyIF90aGlzO1xuICAgICAgX3RoaXMgPSBfTG9nZ2VyLmNhbGwodGhpcywgbGFiZWwsIGxvZ2dlcikgfHwgdGhpcztcbiAgICAgIF90aGlzLl9ib3VuZFRpY2sgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5fdGlja1RpbWVyID0gbnVsbDtcbiAgICAgIF90aGlzLl90aWNrSW50ZXJ2YWwgPSBudWxsO1xuICAgICAgX3RoaXMuX3RpY2tDYWxsQ291bnQgPSAwO1xuICAgICAgX3RoaXMuX2JvdW5kVGljayA9IF90aGlzLnRpY2suYmluZChfdGhpcyk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIF9pbmhlcml0c0xvb3NlKFRhc2tMb29wLCBfTG9nZ2VyKTtcbiAgICB2YXIgX3Byb3RvID0gVGFza0xvb3AucHJvdG90eXBlO1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMub25IYW5kbGVyRGVzdHJveWluZygpO1xuICAgICAgdGhpcy5vbkhhbmRsZXJEZXN0cm95ZWQoKTtcbiAgICB9O1xuICAgIF9wcm90by5vbkhhbmRsZXJEZXN0cm95aW5nID0gZnVuY3Rpb24gb25IYW5kbGVyRGVzdHJveWluZygpIHtcbiAgICAgIC8vIGNsZWFyIGFsbCB0aW1lcnMgYmVmb3JlIHVucmVnaXN0ZXJpbmcgZnJvbSBldmVudCBidXNcbiAgICAgIHRoaXMuY2xlYXJOZXh0VGljaygpO1xuICAgICAgdGhpcy5jbGVhckludGVydmFsKCk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25IYW5kbGVyRGVzdHJveWVkID0gZnVuY3Rpb24gb25IYW5kbGVyRGVzdHJveWVkKCkge307XG4gICAgX3Byb3RvLmhhc0ludGVydmFsID0gZnVuY3Rpb24gaGFzSW50ZXJ2YWwoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLl90aWNrSW50ZXJ2YWw7XG4gICAgfTtcbiAgICBfcHJvdG8uaGFzTmV4dFRpY2sgPSBmdW5jdGlvbiBoYXNOZXh0VGljaygpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuX3RpY2tUaW1lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbWlsbGlzIC0gSW50ZXJ2YWwgdGltZSAobXMpXG4gICAgICogQGV0dXJucyBUcnVlIHdoZW4gaW50ZXJ2YWwgaGFzIGJlZW4gc2NoZWR1bGVkLCBmYWxzZSB3aGVuIGFscmVhZHkgc2NoZWR1bGVkIChubyBlZmZlY3QpXG4gICAgICovO1xuICAgIF9wcm90by5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uIHNldEludGVydmFsKG1pbGxpcykge1xuICAgICAgaWYgKCF0aGlzLl90aWNrSW50ZXJ2YWwpIHtcbiAgICAgICAgdGhpcy5fdGlja0NhbGxDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX3RpY2tJbnRlcnZhbCA9IHNlbGYuc2V0SW50ZXJ2YWwodGhpcy5fYm91bmRUaWNrLCBtaWxsaXMpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUcnVlIHdoZW4gaW50ZXJ2YWwgd2FzIGNsZWFyZWQsIGZhbHNlIHdoZW4gbm9uZSB3YXMgc2V0IChubyBlZmZlY3QpXG4gICAgICovO1xuICAgIF9wcm90by5jbGVhckludGVydmFsID0gZnVuY3Rpb24gY2xlYXJJbnRlcnZhbCgpIHtcbiAgICAgIGlmICh0aGlzLl90aWNrSW50ZXJ2YWwpIHtcbiAgICAgICAgc2VsZi5jbGVhckludGVydmFsKHRoaXMuX3RpY2tJbnRlcnZhbCk7XG4gICAgICAgIHRoaXMuX3RpY2tJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRydWUgd2hlbiB0aW1lb3V0IHdhcyBjbGVhcmVkLCBmYWxzZSB3aGVuIG5vbmUgd2FzIHNldCAobm8gZWZmZWN0KVxuICAgICAqLztcbiAgICBfcHJvdG8uY2xlYXJOZXh0VGljayA9IGZ1bmN0aW9uIGNsZWFyTmV4dFRpY2soKSB7XG4gICAgICBpZiAodGhpcy5fdGlja1RpbWVyKSB7XG4gICAgICAgIHNlbGYuY2xlYXJUaW1lb3V0KHRoaXMuX3RpY2tUaW1lcik7XG4gICAgICAgIHRoaXMuX3RpY2tUaW1lciA9IG51bGw7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdpbGwgY2FsbCB0aGUgc3ViY2xhc3MgZG9UaWNrIGltcGxlbWVudGF0aW9uIGluIHRoaXMgbWFpbiBsb29wIHRpY2tcbiAgICAgKiBvciBpbiB0aGUgbmV4dCBvbmUgKHZpYSBzZXRUaW1lb3V0KCwwKSkgaW4gY2FzZSBpdCBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZFxuICAgICAqIGluIHRoaXMgdGljayAoaW4gY2FzZSB0aGlzIGlzIGEgcmUtZW50cmFudCBjYWxsKS5cbiAgICAgKi87XG4gICAgX3Byb3RvLnRpY2sgPSBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgdGhpcy5fdGlja0NhbGxDb3VudCsrO1xuICAgICAgaWYgKHRoaXMuX3RpY2tDYWxsQ291bnQgPT09IDEpIHtcbiAgICAgICAgdGhpcy5kb1RpY2soKTtcbiAgICAgICAgLy8gcmUtZW50cmFudCBjYWxsIHRvIHRpY2sgZnJvbSBwcmV2aW91cyBkb1RpY2sgY2FsbCBzdGFja1xuICAgICAgICAvLyAtPiBzY2hlZHVsZSBhIGNhbGwgb24gdGhlIG5leHQgbWFpbiBsb29wIGl0ZXJhdGlvbiB0byBwcm9jZXNzIHRoaXMgdGFzayBwcm9jZXNzaW5nIHJlcXVlc3RcbiAgICAgICAgaWYgKHRoaXMuX3RpY2tDYWxsQ291bnQgPiAxKSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIG9ubHkgb25lIHRpbWVyIGV4aXN0cyBhdCBhbnkgdGltZSBhdCBtYXhcbiAgICAgICAgICB0aGlzLnRpY2tJbW1lZGlhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aWNrQ2FsbENvdW50ID0gMDtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by50aWNrSW1tZWRpYXRlID0gZnVuY3Rpb24gdGlja0ltbWVkaWF0ZSgpIHtcbiAgICAgIHRoaXMuY2xlYXJOZXh0VGljaygpO1xuICAgICAgdGhpcy5fdGlja1RpbWVyID0gc2VsZi5zZXRUaW1lb3V0KHRoaXMuX2JvdW5kVGljaywgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yIHN1YmNsYXNzIHRvIGltcGxlbWVudCB0YXNrIGxvZ2ljXG4gICAgICogQGFic3RyYWN0XG4gICAgICovO1xuICAgIF9wcm90by5kb1RpY2sgPSBmdW5jdGlvbiBkb1RpY2soKSB7fTtcbiAgICByZXR1cm4gVGFza0xvb3A7XG4gIH0oTG9nZ2VyKTtcblxuICB2YXIgQ2h1bmtNZXRhZGF0YSA9IGZ1bmN0aW9uIENodW5rTWV0YWRhdGEobGV2ZWwsIHNuLCBpZCwgc2l6ZSwgcGFydCwgcGFydGlhbCkge1xuICAgIGlmIChzaXplID09PSB2b2lkIDApIHtcbiAgICAgIHNpemUgPSAwO1xuICAgIH1cbiAgICBpZiAocGFydCA9PT0gdm9pZCAwKSB7XG4gICAgICBwYXJ0ID0gLTE7XG4gICAgfVxuICAgIGlmIChwYXJ0aWFsID09PSB2b2lkIDApIHtcbiAgICAgIHBhcnRpYWwgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5sZXZlbCA9IHZvaWQgMDtcbiAgICB0aGlzLnNuID0gdm9pZCAwO1xuICAgIHRoaXMucGFydCA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMuc2l6ZSA9IHZvaWQgMDtcbiAgICB0aGlzLnBhcnRpYWwgPSB2b2lkIDA7XG4gICAgdGhpcy50cmFuc211eGluZyA9IGdldE5ld1BlcmZvcm1hbmNlVGltaW5nKCk7XG4gICAgdGhpcy5idWZmZXJpbmcgPSB7XG4gICAgICBhdWRpbzogZ2V0TmV3UGVyZm9ybWFuY2VUaW1pbmcoKSxcbiAgICAgIHZpZGVvOiBnZXROZXdQZXJmb3JtYW5jZVRpbWluZygpLFxuICAgICAgYXVkaW92aWRlbzogZ2V0TmV3UGVyZm9ybWFuY2VUaW1pbmcoKVxuICAgIH07XG4gICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICAgIHRoaXMuc24gPSBzbjtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB0aGlzLnBhcnQgPSBwYXJ0O1xuICAgIHRoaXMucGFydGlhbCA9IHBhcnRpYWw7XG4gIH07XG4gIGZ1bmN0aW9uIGdldE5ld1BlcmZvcm1hbmNlVGltaW5nKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogMCxcbiAgICAgIGV4ZWN1dGVTdGFydDogMCxcbiAgICAgIGV4ZWN1dGVFbmQ6IDAsXG4gICAgICBlbmQ6IDBcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIG1ldGhvZHMgZGVhbGluZyB3aXRoIGJ1ZmZlciBsZW5ndGggcmV0cmlldmFsIGZvciBleGFtcGxlLlxuICAgKlxuICAgKiBJbiBnZW5lcmFsLCBhIGhlbHBlciBhcm91bmQgSFRNTDUgTWVkaWFFbGVtZW50IFRpbWVSYW5nZXMgZ2F0aGVyZWQgZnJvbSBgYnVmZmVyZWRgIHByb3BlcnR5LlxuICAgKlxuICAgKiBBbHNvIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxNZWRpYUVsZW1lbnQvYnVmZmVyZWRcbiAgICovXG5cbiAgdmFyIG5vb3BCdWZmZXJlZCA9IHtcbiAgICBsZW5ndGg6IDAsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uIGVuZCgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcbiAgdmFyIEJ1ZmZlckhlbHBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVySGVscGVyKCkge31cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiBgbWVkaWFgJ3MgYnVmZmVyZWQgaW5jbHVkZSBgcG9zaXRpb25gXG4gICAgICovXG4gICAgQnVmZmVySGVscGVyLmlzQnVmZmVyZWQgPSBmdW5jdGlvbiBpc0J1ZmZlcmVkKG1lZGlhLCBwb3NpdGlvbikge1xuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIHZhciBidWZmZXJlZCA9IEJ1ZmZlckhlbHBlci5nZXRCdWZmZXJlZChtZWRpYSk7XG4gICAgICAgIGZvciAodmFyIGkgPSBidWZmZXJlZC5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICBpZiAocG9zaXRpb24gPj0gYnVmZmVyZWQuc3RhcnQoaSkgJiYgcG9zaXRpb24gPD0gYnVmZmVyZWQuZW5kKGkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIEJ1ZmZlckhlbHBlci5idWZmZXJlZFJhbmdlcyA9IGZ1bmN0aW9uIGJ1ZmZlcmVkUmFuZ2VzKG1lZGlhKSB7XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgdmFyIHRpbWVSYW5nZXMgPSBCdWZmZXJIZWxwZXIuZ2V0QnVmZmVyZWQobWVkaWEpO1xuICAgICAgICByZXR1cm4gQnVmZmVySGVscGVyLnRpbWVSYW5nZXNUb0FycmF5KHRpbWVSYW5nZXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtdO1xuICAgIH07XG4gICAgQnVmZmVySGVscGVyLnRpbWVSYW5nZXNUb0FycmF5ID0gZnVuY3Rpb24gdGltZVJhbmdlc1RvQXJyYXkodGltZVJhbmdlcykge1xuICAgICAgdmFyIGJ1ZmZlcmVkID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRpbWVSYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYnVmZmVyZWQucHVzaCh7XG4gICAgICAgICAgc3RhcnQ6IHRpbWVSYW5nZXMuc3RhcnQoaSksXG4gICAgICAgICAgZW5kOiB0aW1lUmFuZ2VzLmVuZChpKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWZmZXJlZDtcbiAgICB9O1xuICAgIEJ1ZmZlckhlbHBlci5idWZmZXJJbmZvID0gZnVuY3Rpb24gYnVmZmVySW5mbyhtZWRpYSwgcG9zLCBtYXhIb2xlRHVyYXRpb24pIHtcbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICB2YXIgYnVmZmVyZWQgPSBCdWZmZXJIZWxwZXIuYnVmZmVyZWRSYW5nZXMobWVkaWEpO1xuICAgICAgICBpZiAoYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIEJ1ZmZlckhlbHBlci5idWZmZXJlZEluZm8oYnVmZmVyZWQsIHBvcywgbWF4SG9sZUR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVuOiAwLFxuICAgICAgICBzdGFydDogcG9zLFxuICAgICAgICBlbmQ6IHBvcyxcbiAgICAgICAgYnVmZmVyZWRJbmRleDogLTFcbiAgICAgIH07XG4gICAgfTtcbiAgICBCdWZmZXJIZWxwZXIuYnVmZmVyZWRJbmZvID0gZnVuY3Rpb24gYnVmZmVyZWRJbmZvKGJ1ZmZlcmVkLCBwb3MsIG1heEhvbGVEdXJhdGlvbikge1xuICAgICAgcG9zID0gTWF0aC5tYXgoMCwgcG9zKTtcbiAgICAgIC8vIHNvcnQgb24gYnVmZmVyLnN0YXJ0L3NtYWxsZXIgZW5kIChJRSBkb2VzIG5vdCBhbHdheXMgcmV0dXJuIHNvcnRlZCBidWZmZXJlZCByYW5nZSlcbiAgICAgIGlmIChidWZmZXJlZC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGJ1ZmZlcmVkLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYS5zdGFydCAtIGIuc3RhcnQgfHwgYi5lbmQgLSBhLmVuZDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB2YXIgYnVmZmVyZWRJbmRleCA9IC0xO1xuICAgICAgdmFyIGJ1ZmZlcmVkMiA9IFtdO1xuICAgICAgaWYgKG1heEhvbGVEdXJhdGlvbikge1xuICAgICAgICAvLyB0aGVyZSBtaWdodCBiZSBzb21lIHNtYWxsIGhvbGVzIGJldHdlZW4gYnVmZmVyIHRpbWUgcmFuZ2VcbiAgICAgICAgLy8gY29uc2lkZXIgdGhhdCBob2xlcyBzbWFsbGVyIHRoYW4gbWF4SG9sZUR1cmF0aW9uIGFyZSBpcnJlbGV2YW50IGFuZCBidWlsZCBhbm90aGVyXG4gICAgICAgIC8vIGJ1ZmZlciB0aW1lIHJhbmdlIHJlcHJlc2VudGF0aW9ucyB0aGF0IGRpc2NhcmRzIHRob3NlIGhvbGVzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocG9zID49IGJ1ZmZlcmVkW2ldLnN0YXJ0ICYmIHBvcyA8PSBidWZmZXJlZFtpXS5lbmQpIHtcbiAgICAgICAgICAgIGJ1ZmZlcmVkSW5kZXggPSBpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgYnVmMmxlbiA9IGJ1ZmZlcmVkMi5sZW5ndGg7XG4gICAgICAgICAgaWYgKGJ1ZjJsZW4pIHtcbiAgICAgICAgICAgIHZhciBidWYyZW5kID0gYnVmZmVyZWQyW2J1ZjJsZW4gLSAxXS5lbmQ7XG4gICAgICAgICAgICAvLyBpZiBzbWFsbCBob2xlICh2YWx1ZSBiZXR3ZWVuIDAgb3IgbWF4SG9sZUR1cmF0aW9uICkgb3Igb3ZlcmxhcHBpbmcgKG5lZ2F0aXZlKVxuICAgICAgICAgICAgaWYgKGJ1ZmZlcmVkW2ldLnN0YXJ0IC0gYnVmMmVuZCA8IG1heEhvbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgICAvLyBtZXJnZSBvdmVybGFwcGluZyB0aW1lIHJhbmdlc1xuICAgICAgICAgICAgICAvLyB1cGRhdGUgbGFzdFJhbmdlLmVuZCBvbmx5IGlmIHNtYWxsZXIgdGhhbiBpdGVtLmVuZFxuICAgICAgICAgICAgICAvLyBlLmcuICBbIDEsIDE1XSB3aXRoICBbIDIsOF0gPT4gWyAxLDE1XSAobm8gbmVlZCB0byBtb2RpZnkgbGFzdFJhbmdlLmVuZClcbiAgICAgICAgICAgICAgLy8gd2hlcmVhcyBbIDEsIDhdIHdpdGggIFsgMiwxNV0gPT4gWyAxLDE1XSAoIGxhc3RSYW5nZSBzaG91bGQgc3dpdGNoIGZyb20gWzEsOF0gdG8gWzEsMTVdKVxuICAgICAgICAgICAgICBpZiAoYnVmZmVyZWRbaV0uZW5kID4gYnVmMmVuZCkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcmVkMltidWYybGVuIC0gMV0uZW5kID0gYnVmZmVyZWRbaV0uZW5kO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBiaWcgaG9sZVxuICAgICAgICAgICAgICBidWZmZXJlZDIucHVzaChidWZmZXJlZFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGZpcnN0IHZhbHVlXG4gICAgICAgICAgICBidWZmZXJlZDIucHVzaChidWZmZXJlZFtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWZmZXJlZDIgPSBidWZmZXJlZDtcbiAgICAgIH1cbiAgICAgIHZhciBidWZmZXJMZW4gPSAwO1xuICAgICAgdmFyIG5leHRTdGFydDtcblxuICAgICAgLy8gYnVmZmVyU3RhcnQgYW5kIGJ1ZmZlckVuZCBhcmUgYnVmZmVyIGJvdW5kYXJpZXMgYXJvdW5kIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb24gKHBvcylcbiAgICAgIHZhciBidWZmZXJTdGFydCA9IHBvcztcbiAgICAgIHZhciBidWZmZXJFbmQgPSBwb3M7XG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYnVmZmVyZWQyLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgc3RhcnQgPSBidWZmZXJlZDJbX2ldLnN0YXJ0O1xuICAgICAgICB2YXIgZW5kID0gYnVmZmVyZWQyW19pXS5lbmQ7XG4gICAgICAgIC8vIGxvZ2dlci5sb2coJ2J1ZiBzdGFydC9lbmQ6JyArIGJ1ZmZlcmVkLnN0YXJ0KGkpICsgJy8nICsgYnVmZmVyZWQuZW5kKGkpKTtcbiAgICAgICAgaWYgKGJ1ZmZlcmVkSW5kZXggPT09IC0xICYmIHBvcyA+PSBzdGFydCAmJiBwb3MgPD0gZW5kKSB7XG4gICAgICAgICAgYnVmZmVyZWRJbmRleCA9IF9pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3MgKyBtYXhIb2xlRHVyYXRpb24gPj0gc3RhcnQgJiYgcG9zIDwgZW5kKSB7XG4gICAgICAgICAgLy8gcGxheSBwb3NpdGlvbiBpcyBpbnNpZGUgdGhpcyBidWZmZXIgVGltZVJhbmdlLCByZXRyaWV2ZSBlbmQgb2YgYnVmZmVyIHBvc2l0aW9uIGFuZCBidWZmZXIgbGVuZ3RoXG4gICAgICAgICAgYnVmZmVyU3RhcnQgPSBzdGFydDtcbiAgICAgICAgICBidWZmZXJFbmQgPSBlbmQ7XG4gICAgICAgICAgYnVmZmVyTGVuID0gYnVmZmVyRW5kIC0gcG9zO1xuICAgICAgICB9IGVsc2UgaWYgKHBvcyArIG1heEhvbGVEdXJhdGlvbiA8IHN0YXJ0KSB7XG4gICAgICAgICAgbmV4dFN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlbjogYnVmZmVyTGVuLFxuICAgICAgICBzdGFydDogYnVmZmVyU3RhcnQgfHwgMCxcbiAgICAgICAgZW5kOiBidWZmZXJFbmQgfHwgMCxcbiAgICAgICAgbmV4dFN0YXJ0OiBuZXh0U3RhcnQsXG4gICAgICAgIGJ1ZmZlcmVkOiBidWZmZXJlZCxcbiAgICAgICAgYnVmZmVyZWRJbmRleDogYnVmZmVyZWRJbmRleFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTYWZlIG1ldGhvZCB0byBnZXQgYnVmZmVyZWQgcHJvcGVydHkuXG4gICAgICogU291cmNlQnVmZmVyLmJ1ZmZlcmVkIG1heSB0aHJvdyBpZiBTb3VyY2VCdWZmZXIgaXMgcmVtb3ZlZCBmcm9tIGl0J3MgTWVkaWFTb3VyY2VcbiAgICAgKi87XG4gICAgQnVmZmVySGVscGVyLmdldEJ1ZmZlcmVkID0gZnVuY3Rpb24gZ2V0QnVmZmVyZWQobWVkaWEpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBtZWRpYS5idWZmZXJlZCB8fCBub29wQnVmZmVyZWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZ2dlci5sb2coJ2ZhaWxlZCB0byBnZXQgbWVkaWEuYnVmZmVyZWQnLCBlKTtcbiAgICAgICAgcmV0dXJuIG5vb3BCdWZmZXJlZDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJIZWxwZXI7XG4gIH0oKTtcblxuICB2YXIgVkFSSUFCTEVfUkVQTEFDRU1FTlRfUkVHRVggPSAvXFx7XFwkKFthLXpBLVowLTktX10rKVxcfS9nO1xuICBmdW5jdGlvbiBoYXNWYXJpYWJsZVJlZmVyZW5jZXMoc3RyKSB7XG4gICAgcmV0dXJuIFZBUklBQkxFX1JFUExBQ0VNRU5UX1JFR0VYLnRlc3Qoc3RyKTtcbiAgfVxuICBmdW5jdGlvbiBzdWJzdGl0dXRlVmFyaWFibGVzKHBhcnNlZCwgdmFsdWUpIHtcbiAgICBpZiAocGFyc2VkLnZhcmlhYmxlTGlzdCAhPT0gbnVsbCB8fCBwYXJzZWQuaGFzVmFyaWFibGVSZWZzKSB7XG4gICAgICB2YXIgdmFyaWFibGVMaXN0ID0gcGFyc2VkLnZhcmlhYmxlTGlzdDtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKFZBUklBQkxFX1JFUExBQ0VNRU5UX1JFR0VYLCBmdW5jdGlvbiAodmFyaWFibGVSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFyIHZhcmlhYmxlTmFtZSA9IHZhcmlhYmxlUmVmZXJlbmNlLnN1YnN0cmluZygyLCB2YXJpYWJsZVJlZmVyZW5jZS5sZW5ndGggLSAxKTtcbiAgICAgICAgdmFyIHZhcmlhYmxlVmFsdWUgPSB2YXJpYWJsZUxpc3QgPT0gbnVsbCA/IHZvaWQgMCA6IHZhcmlhYmxlTGlzdFt2YXJpYWJsZU5hbWVdO1xuICAgICAgICBpZiAodmFyaWFibGVWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcGFyc2VkLnBsYXlsaXN0UGFyc2luZ0Vycm9yIHx8IChwYXJzZWQucGxheWxpc3RQYXJzaW5nRXJyb3IgPSBuZXcgRXJyb3IoXCJNaXNzaW5nIHByZWNlZGluZyBFWFQtWC1ERUZJTkUgdGFnIGZvciBWYXJpYWJsZSBSZWZlcmVuY2U6IFxcXCJcIiArIHZhcmlhYmxlTmFtZSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgcmV0dXJuIHZhcmlhYmxlUmVmZXJlbmNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YXJpYWJsZVZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBmdW5jdGlvbiBhZGRWYXJpYWJsZURlZmluaXRpb24ocGFyc2VkLCBhdHRyLCBwYXJlbnRVcmwpIHtcbiAgICB2YXIgdmFyaWFibGVMaXN0ID0gcGFyc2VkLnZhcmlhYmxlTGlzdDtcbiAgICBpZiAoIXZhcmlhYmxlTGlzdCkge1xuICAgICAgcGFyc2VkLnZhcmlhYmxlTGlzdCA9IHZhcmlhYmxlTGlzdCA9IHt9O1xuICAgIH1cbiAgICB2YXIgTkFNRTtcbiAgICB2YXIgVkFMVUU7XG4gICAgaWYgKCdRVUVSWVBBUkFNJyBpbiBhdHRyKSB7XG4gICAgICBOQU1FID0gYXR0ci5RVUVSWVBBUkFNO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHNlYXJjaFBhcmFtcyA9IG5ldyBzZWxmLlVSTChwYXJlbnRVcmwpLnNlYXJjaFBhcmFtcztcbiAgICAgICAgaWYgKHNlYXJjaFBhcmFtcy5oYXMoTkFNRSkpIHtcbiAgICAgICAgICBWQUxVRSA9IHNlYXJjaFBhcmFtcy5nZXQoTkFNRSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXFxcIlwiICsgTkFNRSArIFwiXFxcIiBkb2VzIG5vdCBtYXRjaCBhbnkgcXVlcnkgcGFyYW1ldGVyIGluIFVSSTogXFxcIlwiICsgcGFyZW50VXJsICsgXCJcXFwiXCIpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBwYXJzZWQucGxheWxpc3RQYXJzaW5nRXJyb3IgfHwgKHBhcnNlZC5wbGF5bGlzdFBhcnNpbmdFcnJvciA9IG5ldyBFcnJvcihcIkVYVC1YLURFRklORSBRVUVSWVBBUkFNOiBcIiArIGVycm9yLm1lc3NhZ2UpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgTkFNRSA9IGF0dHIuTkFNRTtcbiAgICAgIFZBTFVFID0gYXR0ci5WQUxVRTtcbiAgICB9XG4gICAgaWYgKE5BTUUgaW4gdmFyaWFibGVMaXN0KSB7XG4gICAgICBwYXJzZWQucGxheWxpc3RQYXJzaW5nRXJyb3IgfHwgKHBhcnNlZC5wbGF5bGlzdFBhcnNpbmdFcnJvciA9IG5ldyBFcnJvcihcIkVYVC1YLURFRklORSBkdXBsaWNhdGUgVmFyaWFibGUgTmFtZSBkZWNsYXJhdGlvbnM6IFxcXCJcIiArIE5BTUUgKyBcIlxcXCJcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXJpYWJsZUxpc3RbTkFNRV0gPSBWQUxVRSB8fCAnJztcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaW1wb3J0VmFyaWFibGVEZWZpbml0aW9uKHBhcnNlZCwgYXR0ciwgc291cmNlVmFyaWFibGVMaXN0KSB7XG4gICAgdmFyIElNUE9SVCA9IGF0dHIuSU1QT1JUO1xuICAgIGlmIChzb3VyY2VWYXJpYWJsZUxpc3QgJiYgSU1QT1JUIGluIHNvdXJjZVZhcmlhYmxlTGlzdCkge1xuICAgICAgdmFyIHZhcmlhYmxlTGlzdCA9IHBhcnNlZC52YXJpYWJsZUxpc3Q7XG4gICAgICBpZiAoIXZhcmlhYmxlTGlzdCkge1xuICAgICAgICBwYXJzZWQudmFyaWFibGVMaXN0ID0gdmFyaWFibGVMaXN0ID0ge307XG4gICAgICB9XG4gICAgICB2YXJpYWJsZUxpc3RbSU1QT1JUXSA9IHNvdXJjZVZhcmlhYmxlTGlzdFtJTVBPUlRdO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWQucGxheWxpc3RQYXJzaW5nRXJyb3IgfHwgKHBhcnNlZC5wbGF5bGlzdFBhcnNpbmdFcnJvciA9IG5ldyBFcnJvcihcIkVYVC1YLURFRklORSBJTVBPUlQgYXR0cmlidXRlIG5vdCBmb3VuZCBpbiBNdWx0aXZhcmlhbnQgUGxheWxpc3Q6IFxcXCJcIiArIElNUE9SVCArIFwiXFxcIlwiKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIERFQ0lNQUxfUkVTT0xVVElPTl9SRUdFWCA9IC9eKFxcZCspeChcXGQrKSQvO1xuICB2YXIgQVRUUl9MSVNUX1JFR0VYID0gLyguKz8pPShcIi4qP1wifC4qPykoPzosfCQpL2c7XG5cbiAgLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9rYW5vbmdpbC9ub2RlLW0zdThwYXJzZS9ibG9iL21hc3Rlci9hdHRybGlzdC5qc1xuICB2YXIgQXR0ckxpc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF0dHJMaXN0KGF0dHJzLCBwYXJzZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgYXR0cnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGF0dHJzID0gQXR0ckxpc3QucGFyc2VBdHRyTGlzdChhdHRycywgcGFyc2VkKTtcbiAgICAgIH1cbiAgICAgIF9leHRlbmRzKHRoaXMsIGF0dHJzKTtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IEF0dHJMaXN0LnByb3RvdHlwZTtcbiAgICBfcHJvdG8uZGVjaW1hbEludGVnZXIgPSBmdW5jdGlvbiBkZWNpbWFsSW50ZWdlcihhdHRyTmFtZSkge1xuICAgICAgdmFyIGludFZhbHVlID0gcGFyc2VJbnQodGhpc1thdHRyTmFtZV0sIDEwKTtcbiAgICAgIGlmIChpbnRWYWx1ZSA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnRWYWx1ZTtcbiAgICB9O1xuICAgIF9wcm90by5oZXhhZGVjaW1hbEludGVnZXIgPSBmdW5jdGlvbiBoZXhhZGVjaW1hbEludGVnZXIoYXR0ck5hbWUpIHtcbiAgICAgIGlmICh0aGlzW2F0dHJOYW1lXSkge1xuICAgICAgICB2YXIgc3RyaW5nVmFsdWUgPSAodGhpc1thdHRyTmFtZV0gfHwgJzB4Jykuc2xpY2UoMik7XG4gICAgICAgIHN0cmluZ1ZhbHVlID0gKHN0cmluZ1ZhbHVlLmxlbmd0aCAmIDEgPyAnMCcgOiAnJykgKyBzdHJpbmdWYWx1ZTtcbiAgICAgICAgdmFyIHZhbHVlID0gbmV3IFVpbnQ4QXJyYXkoc3RyaW5nVmFsdWUubGVuZ3RoIC8gMik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nVmFsdWUubGVuZ3RoIC8gMjsgaSsrKSB7XG4gICAgICAgICAgdmFsdWVbaV0gPSBwYXJzZUludChzdHJpbmdWYWx1ZS5zbGljZShpICogMiwgaSAqIDIgKyAyKSwgMTYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLmhleGFkZWNpbWFsSW50ZWdlckFzTnVtYmVyID0gZnVuY3Rpb24gaGV4YWRlY2ltYWxJbnRlZ2VyQXNOdW1iZXIoYXR0ck5hbWUpIHtcbiAgICAgIHZhciBpbnRWYWx1ZSA9IHBhcnNlSW50KHRoaXNbYXR0ck5hbWVdLCAxNik7XG4gICAgICBpZiAoaW50VmFsdWUgPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW50VmFsdWU7XG4gICAgfTtcbiAgICBfcHJvdG8uZGVjaW1hbEZsb2F0aW5nUG9pbnQgPSBmdW5jdGlvbiBkZWNpbWFsRmxvYXRpbmdQb2ludChhdHRyTmFtZSkge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpc1thdHRyTmFtZV0pO1xuICAgIH07XG4gICAgX3Byb3RvLm9wdGlvbmFsRmxvYXQgPSBmdW5jdGlvbiBvcHRpb25hbEZsb2F0KGF0dHJOYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXNbYXR0ck5hbWVdO1xuICAgICAgcmV0dXJuIHZhbHVlID8gcGFyc2VGbG9hdCh2YWx1ZSkgOiBkZWZhdWx0VmFsdWU7XG4gICAgfTtcbiAgICBfcHJvdG8uZW51bWVyYXRlZFN0cmluZyA9IGZ1bmN0aW9uIGVudW1lcmF0ZWRTdHJpbmcoYXR0ck5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzW2F0dHJOYW1lXTtcbiAgICB9O1xuICAgIF9wcm90by5lbnVtZXJhdGVkU3RyaW5nTGlzdCA9IGZ1bmN0aW9uIGVudW1lcmF0ZWRTdHJpbmdMaXN0KGF0dHJOYW1lLCBkaWN0KSB7XG4gICAgICB2YXIgYXR0clZhbHVlID0gdGhpc1thdHRyTmFtZV07XG4gICAgICByZXR1cm4gKGF0dHJWYWx1ZSA/IGF0dHJWYWx1ZS5zcGxpdCgvWyAsXSsvKSA6IFtdKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgaWRlbnRpZmllcikge1xuICAgICAgICByZXN1bHRbaWRlbnRpZmllci50b0xvd2VyQ2FzZSgpXSA9IHRydWU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LCBkaWN0KTtcbiAgICB9O1xuICAgIF9wcm90by5ib29sID0gZnVuY3Rpb24gYm9vbChhdHRyTmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXNbYXR0ck5hbWVdID09PSAnWUVTJztcbiAgICB9O1xuICAgIF9wcm90by5kZWNpbWFsUmVzb2x1dGlvbiA9IGZ1bmN0aW9uIGRlY2ltYWxSZXNvbHV0aW9uKGF0dHJOYW1lKSB7XG4gICAgICB2YXIgcmVzID0gREVDSU1BTF9SRVNPTFVUSU9OX1JFR0VYLmV4ZWModGhpc1thdHRyTmFtZV0pO1xuICAgICAgaWYgKHJlcyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHBhcnNlSW50KHJlc1sxXSwgMTApLFxuICAgICAgICBoZWlnaHQ6IHBhcnNlSW50KHJlc1syXSwgMTApXG4gICAgICB9O1xuICAgIH07XG4gICAgQXR0ckxpc3QucGFyc2VBdHRyTGlzdCA9IGZ1bmN0aW9uIHBhcnNlQXR0ckxpc3QoaW5wdXQsIHBhcnNlZCkge1xuICAgICAgdmFyIG1hdGNoO1xuICAgICAgdmFyIGF0dHJzID0ge307XG4gICAgICB2YXIgcXVvdGUgPSAnXCInO1xuICAgICAgQVRUUl9MSVNUX1JFR0VYLmxhc3RJbmRleCA9IDA7XG4gICAgICB3aGlsZSAoKG1hdGNoID0gQVRUUl9MSVNUX1JFR0VYLmV4ZWMoaW5wdXQpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbmFtZSA9IG1hdGNoWzFdLnRyaW0oKTtcbiAgICAgICAgdmFyIHZhbHVlID0gbWF0Y2hbMl07XG4gICAgICAgIHZhciBxdW90ZWRTdHJpbmcgPSB2YWx1ZS5pbmRleE9mKHF1b3RlKSA9PT0gMCAmJiB2YWx1ZS5sYXN0SW5kZXhPZihxdW90ZSkgPT09IHZhbHVlLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBoZXhhZGVjaW1hbFNlcXVlbmNlID0gZmFsc2U7XG4gICAgICAgIGlmIChxdW90ZWRTdHJpbmcpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0lWJzpcbiAgICAgICAgICAgIGNhc2UgJ1NDVEUzNS1DTUQnOlxuICAgICAgICAgICAgY2FzZSAnU0NURTM1LUlOJzpcbiAgICAgICAgICAgIGNhc2UgJ1NDVEUzNS1PVVQnOlxuICAgICAgICAgICAgICBoZXhhZGVjaW1hbFNlcXVlbmNlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZCAmJiAocXVvdGVkU3RyaW5nIHx8IGhleGFkZWNpbWFsU2VxdWVuY2UpKSB7XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFsdWUgPSBzdWJzdGl0dXRlVmFyaWFibGVzKHBhcnNlZCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaGV4YWRlY2ltYWxTZXF1ZW5jZSAmJiAhcXVvdGVkU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdDTE9TRUQtQ0FQVElPTlMnOlxuICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdOT05FJykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgICAgICBjYXNlICdBTExPV0VELUNQQyc6XG4gICAgICAgICAgICBjYXNlICdDTEFTUyc6XG4gICAgICAgICAgICBjYXNlICdBU1NPQy1MQU5HVUFHRSc6XG4gICAgICAgICAgICBjYXNlICdBVURJTyc6XG4gICAgICAgICAgICBjYXNlICdCWVRFUkFOR0UnOlxuICAgICAgICAgICAgY2FzZSAnQ0hBTk5FTFMnOlxuICAgICAgICAgICAgY2FzZSAnQ0hBUkFDVEVSSVNUSUNTJzpcbiAgICAgICAgICAgIGNhc2UgJ0NPREVDUyc6XG4gICAgICAgICAgICBjYXNlICdEQVRBLUlEJzpcbiAgICAgICAgICAgIGNhc2UgJ0VORC1EQVRFJzpcbiAgICAgICAgICAgIGNhc2UgJ0dST1VQLUlEJzpcbiAgICAgICAgICAgIGNhc2UgJ0lEJzpcbiAgICAgICAgICAgIGNhc2UgJ0lNUE9SVCc6XG4gICAgICAgICAgICBjYXNlICdJTlNUUkVBTS1JRCc6XG4gICAgICAgICAgICBjYXNlICdLRVlGT1JNQVQnOlxuICAgICAgICAgICAgY2FzZSAnS0VZRk9STUFUVkVSU0lPTlMnOlxuICAgICAgICAgICAgY2FzZSAnTEFOR1VBR0UnOlxuICAgICAgICAgICAgY2FzZSAnTkFNRSc6XG4gICAgICAgICAgICBjYXNlICdQQVRIV0FZLUlEJzpcbiAgICAgICAgICAgIGNhc2UgJ1FVRVJZUEFSQU0nOlxuICAgICAgICAgICAgY2FzZSAnUkVDRU5UTFktUkVNT1ZFRC1EQVRFUkFOR0VTJzpcbiAgICAgICAgICAgIGNhc2UgJ1NFUlZFUi1VUkknOlxuICAgICAgICAgICAgY2FzZSAnU1RBQkxFLVJFTkRJVElPTi1JRCc6XG4gICAgICAgICAgICBjYXNlICdTVEFCTEUtVkFSSUFOVC1JRCc6XG4gICAgICAgICAgICBjYXNlICdTVEFSVC1EQVRFJzpcbiAgICAgICAgICAgIGNhc2UgJ1NVQlRJVExFUyc6XG4gICAgICAgICAgICBjYXNlICdTVVBQTEVNRU5UQUwtQ09ERUNTJzpcbiAgICAgICAgICAgIGNhc2UgJ1VSSSc6XG4gICAgICAgICAgICBjYXNlICdWQUxVRSc6XG4gICAgICAgICAgICBjYXNlICdWSURFTyc6XG4gICAgICAgICAgICBjYXNlICdYLUFTU0VULUxJU1QnOlxuICAgICAgICAgICAgY2FzZSAnWC1BU1NFVC1VUkknOlxuICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSBhcmUgbm90IGNoZWNraW5nIHRhZzphdHRyaWJ1dGUgY29tYmluYXRpb24sIGp1c3Qgd2FybiByYXRoZXIgdGhhbiBpZ25vcmluZyBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oaW5wdXQgKyBcIjogYXR0cmlidXRlIFwiICsgbmFtZSArIFwiIGlzIG1pc3NpbmcgcXVvdGVzXCIpO1xuICAgICAgICAgICAgLy8gY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGF0dHJzW25hbWVdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXR0cnM7XG4gICAgfTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKEF0dHJMaXN0LCBbe1xuICAgICAga2V5OiBcImNsaWVudEF0dHJzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMpLmZpbHRlcihmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgIHJldHVybiBhdHRyLnN1YnN0cmluZygwLCAyKSA9PT0gJ1gtJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfV0pO1xuICB9KCk7XG5cbiAgLy8gQXZvaWQgZXhwb3J0aW5nIGNvbnN0IGVudW0gc28gdGhhdCB0aGVzZSB2YWx1ZXMgY2FuIGJlIGlubGluZWRcblxuICB2YXIgQ0xBU1NfSU5URVJTVElUSUFMID0gJ2NvbS5hcHBsZS5obHMuaW50ZXJzdGl0aWFsJztcbiAgZnVuY3Rpb24gaXNEYXRlUmFuZ2VDdWVBdHRyaWJ1dGUoYXR0ck5hbWUpIHtcbiAgICByZXR1cm4gYXR0ck5hbWUgIT09IFwiSURcIiAmJiBhdHRyTmFtZSAhPT0gXCJDTEFTU1wiICYmIGF0dHJOYW1lICE9PSBcIkNVRVwiICYmIGF0dHJOYW1lICE9PSBcIlNUQVJULURBVEVcIiAmJiBhdHRyTmFtZSAhPT0gXCJEVVJBVElPTlwiICYmIGF0dHJOYW1lICE9PSBcIkVORC1EQVRFXCIgJiYgYXR0ck5hbWUgIT09IFwiRU5ELU9OLU5FWFRcIjtcbiAgfVxuICBmdW5jdGlvbiBpc1NDVEUzNUF0dHJpYnV0ZShhdHRyTmFtZSkge1xuICAgIHJldHVybiBhdHRyTmFtZSA9PT0gXCJTQ1RFMzUtT1VUXCIgfHwgYXR0ck5hbWUgPT09IFwiU0NURTM1LUlOXCIgfHwgYXR0ck5hbWUgPT09IFwiU0NURTM1LUNNRFwiO1xuICB9XG4gIHZhciBEYXRlUmFuZ2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERhdGVSYW5nZShkYXRlUmFuZ2VBdHRyLCBkYXRlUmFuZ2VXaXRoU2FtZUlkLCB0YWdDb3VudCkge1xuICAgICAgdmFyIF9kYXRlUmFuZ2VXaXRoU2FtZUlkJDtcbiAgICAgIGlmICh0YWdDb3VudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRhZ0NvdW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXR0ciA9IHZvaWQgMDtcbiAgICAgIHRoaXMudGFnQW5jaG9yID0gdm9pZCAwO1xuICAgICAgdGhpcy50YWdPcmRlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX3N0YXJ0RGF0ZSA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX2VuZERhdGUgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9kYXRlQXRFbmQgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9jdWUgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9iYWRWYWx1ZUZvclNhbWVJZCA9IHZvaWQgMDtcbiAgICAgIHRoaXMudGFnQW5jaG9yID0gKGRhdGVSYW5nZVdpdGhTYW1lSWQgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGVSYW5nZVdpdGhTYW1lSWQudGFnQW5jaG9yKSB8fCBudWxsO1xuICAgICAgdGhpcy50YWdPcmRlciA9IChfZGF0ZVJhbmdlV2l0aFNhbWVJZCQgPSBkYXRlUmFuZ2VXaXRoU2FtZUlkID09IG51bGwgPyB2b2lkIDAgOiBkYXRlUmFuZ2VXaXRoU2FtZUlkLnRhZ09yZGVyKSAhPSBudWxsID8gX2RhdGVSYW5nZVdpdGhTYW1lSWQkIDogdGFnQ291bnQ7XG4gICAgICBpZiAoZGF0ZVJhbmdlV2l0aFNhbWVJZCkge1xuICAgICAgICB2YXIgcHJldmlvdXNBdHRyID0gZGF0ZVJhbmdlV2l0aFNhbWVJZC5hdHRyO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJldmlvdXNBdHRyKSB7XG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRlUmFuZ2VBdHRyLCBrZXkpICYmIGRhdGVSYW5nZUF0dHJba2V5XSAhPT0gcHJldmlvdXNBdHRyW2tleV0pIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiREFURVJBTkdFIHRhZyBhdHRyaWJ1dGU6IFxcXCJcIiArIGtleSArIFwiXFxcIiBkb2VzIG5vdCBtYXRjaCBmb3IgdGFncyB3aXRoIElEOiBcXFwiXCIgKyBkYXRlUmFuZ2VBdHRyLklEICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgdGhpcy5fYmFkVmFsdWVGb3JTYW1lSWQgPSBrZXk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWVyZ2UgRGF0ZVJhbmdlIHRhZ3Mgd2l0aCB0aGUgc2FtZSBJRFxuICAgICAgICBkYXRlUmFuZ2VBdHRyID0gX2V4dGVuZHMobmV3IEF0dHJMaXN0KHt9KSwgcHJldmlvdXNBdHRyLCBkYXRlUmFuZ2VBdHRyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXR0ciA9IGRhdGVSYW5nZUF0dHI7XG4gICAgICBpZiAoZGF0ZVJhbmdlV2l0aFNhbWVJZCkge1xuICAgICAgICB0aGlzLl9zdGFydERhdGUgPSBkYXRlUmFuZ2VXaXRoU2FtZUlkLl9zdGFydERhdGU7XG4gICAgICAgIHRoaXMuX2N1ZSA9IGRhdGVSYW5nZVdpdGhTYW1lSWQuX2N1ZTtcbiAgICAgICAgdGhpcy5fZW5kRGF0ZSA9IGRhdGVSYW5nZVdpdGhTYW1lSWQuX2VuZERhdGU7XG4gICAgICAgIHRoaXMuX2RhdGVBdEVuZCA9IGRhdGVSYW5nZVdpdGhTYW1lSWQuX2RhdGVBdEVuZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0RGF0ZSA9IG5ldyBEYXRlKGRhdGVSYW5nZUF0dHJbXCJTVEFSVC1EQVRFXCJdKTtcbiAgICAgIH1cbiAgICAgIGlmIChcIkVORC1EQVRFXCIgaW4gdGhpcy5hdHRyKSB7XG4gICAgICAgIHZhciBlbmREYXRlID0gKGRhdGVSYW5nZVdpdGhTYW1lSWQgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGVSYW5nZVdpdGhTYW1lSWQuZW5kRGF0ZSkgfHwgbmV3IERhdGUodGhpcy5hdHRyW1wiRU5ELURBVEVcIl0pO1xuICAgICAgICBpZiAoaXNGaW5pdGVOdW1iZXIoZW5kRGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgICAgICAgdGhpcy5fZW5kRGF0ZSA9IGVuZERhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhEYXRlUmFuZ2UsIFt7XG4gICAgICBrZXk6IFwiaWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyLklEO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbGFzc1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIuQ0xBU1M7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImN1ZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfY3VlID0gdGhpcy5fY3VlO1xuICAgICAgICBpZiAoX2N1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2N1ZSA9IHRoaXMuYXR0ci5lbnVtZXJhdGVkU3RyaW5nTGlzdCh0aGlzLmF0dHIuQ1VFID8gJ0NVRScgOiAnWC1DVUUnLCB7XG4gICAgICAgICAgICBwcmU6IGZhbHNlLFxuICAgICAgICAgICAgcG9zdDogZmFsc2UsXG4gICAgICAgICAgICBvbmNlOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfY3VlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzdGFydFRpbWVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgdGFnQW5jaG9yID0gdGhpcy50YWdBbmNob3I7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW9wdGlvbmFsLWNoYWluXG4gICAgICAgIGlmICh0YWdBbmNob3IgPT09IG51bGwgfHwgdGFnQW5jaG9yLnByb2dyYW1EYXRlVGltZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGxvZ2dlci53YXJuKFwiRXhwZWN0ZWQgdGFnQW5jaG9yIEZyYWdtZW50IHdpdGggUERUIHNldCBmb3IgRGF0ZVJhbmdlIFxcXCJcIiArIHRoaXMuaWQgKyBcIlxcXCI6IFwiICsgdGFnQW5jaG9yKTtcbiAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWdBbmNob3Iuc3RhcnQgKyAodGhpcy5zdGFydERhdGUuZ2V0VGltZSgpIC0gdGFnQW5jaG9yLnByb2dyYW1EYXRlVGltZSkgLyAxMDAwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzdGFydERhdGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnREYXRlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJlbmREYXRlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGRhdGVBdEVuZCA9IHRoaXMuX2VuZERhdGUgfHwgdGhpcy5fZGF0ZUF0RW5kO1xuICAgICAgICBpZiAoZGF0ZUF0RW5kKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGVBdEVuZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uO1xuICAgICAgICBpZiAoZHVyYXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0ZUF0RW5kID0gbmV3IERhdGUodGhpcy5fc3RhcnREYXRlLmdldFRpbWUoKSArIGR1cmF0aW9uICogMTAwMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImR1cmF0aW9uXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKFwiRFVSQVRJT05cIiBpbiB0aGlzLmF0dHIpIHtcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmF0dHIuZGVjaW1hbEZsb2F0aW5nUG9pbnQoXCJEVVJBVElPTlwiKTtcbiAgICAgICAgICBpZiAoaXNGaW5pdGVOdW1iZXIoZHVyYXRpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZHVyYXRpb247XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2VuZERhdGUpIHtcbiAgICAgICAgICByZXR1cm4gKHRoaXMuX2VuZERhdGUuZ2V0VGltZSgpIC0gdGhpcy5fc3RhcnREYXRlLmdldFRpbWUoKSkgLyAxMDAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwbGFubmVkRHVyYXRpb25cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAoXCJQTEFOTkVELURVUkFUSU9OXCIgaW4gdGhpcy5hdHRyKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXR0ci5kZWNpbWFsRmxvYXRpbmdQb2ludChcIlBMQU5ORUQtRFVSQVRJT05cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVuZE9uTmV4dFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIuYm9vbChcIkVORC1PTi1ORVhUXCIpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc0ludGVyc3RpdGlhbFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsYXNzID09PSBDTEFTU19JTlRFUlNUSVRJQUw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzVmFsaWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmlkICYmICF0aGlzLl9iYWRWYWx1ZUZvclNhbWVJZCAmJiBpc0Zpbml0ZU51bWJlcih0aGlzLnN0YXJ0RGF0ZS5nZXRUaW1lKCkpICYmICh0aGlzLmR1cmF0aW9uID09PSBudWxsIHx8IHRoaXMuZHVyYXRpb24gPj0gMCkgJiYgKCF0aGlzLmVuZE9uTmV4dCB8fCAhIXRoaXMuY2xhc3MpICYmICghdGhpcy5hdHRyLkNVRSB8fCAhdGhpcy5jdWUucHJlICYmICF0aGlzLmN1ZS5wb3N0IHx8IHRoaXMuY3VlLnByZSAhPT0gdGhpcy5jdWUucG9zdCkgJiYgKCF0aGlzLmlzSW50ZXJzdGl0aWFsIHx8ICdYLUFTU0VULVVSSScgaW4gdGhpcy5hdHRyIHx8ICdYLUFTU0VULUxJU1QnIGluIHRoaXMuYXR0cik7XG4gICAgICB9XG4gICAgfV0pO1xuICB9KCk7XG5cbiAgdmFyIERFRkFVTFRfVEFSR0VUX0RVUkFUSU9OID0gMTA7XG5cbiAgLyoqXG4gICAqIE9iamVjdCByZXByZXNlbnRpbmcgcGFyc2VkIGRhdGEgZnJvbSBhbiBITFMgTWVkaWEgUGxheWxpc3QuIEZvdW5kIGluIHtAbGluayBobHMuanMjTGV2ZWwuZGV0YWlsc30uXG4gICAqL1xuICB2YXIgTGV2ZWxEZXRhaWxzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMZXZlbERldGFpbHMoYmFzZVVybCkge1xuICAgICAgdGhpcy5QVFNLbm93biA9IGZhbHNlO1xuICAgICAgdGhpcy5hbGlnbmVkU2xpZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5hdmVyYWdldGFyZ2V0ZHVyYXRpb24gPSB2b2lkIDA7XG4gICAgICB0aGlzLmVuZENDID0gMDtcbiAgICAgIHRoaXMuZW5kU04gPSAwO1xuICAgICAgdGhpcy5mcmFnbWVudHMgPSB2b2lkIDA7XG4gICAgICB0aGlzLmZyYWdtZW50SGludCA9IHZvaWQgMDtcbiAgICAgIHRoaXMucGFydExpc3QgPSBudWxsO1xuICAgICAgdGhpcy5kYXRlUmFuZ2VzID0gdm9pZCAwO1xuICAgICAgdGhpcy5kYXRlUmFuZ2VUYWdDb3VudCA9IDA7XG4gICAgICB0aGlzLmxpdmUgPSB0cnVlO1xuICAgICAgdGhpcy5yZXF1ZXN0U2NoZWR1bGVkID0gLTE7XG4gICAgICB0aGlzLmFnZUhlYWRlciA9IDA7XG4gICAgICB0aGlzLmFkdmFuY2VkRGF0ZVRpbWUgPSB2b2lkIDA7XG4gICAgICB0aGlzLnVwZGF0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5hZHZhbmNlZCA9IHRydWU7XG4gICAgICB0aGlzLm1pc3NlcyA9IDA7XG4gICAgICB0aGlzLnN0YXJ0Q0MgPSAwO1xuICAgICAgdGhpcy5zdGFydFNOID0gMDtcbiAgICAgIHRoaXMuc3RhcnRUaW1lT2Zmc2V0ID0gbnVsbDtcbiAgICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSAwO1xuICAgICAgdGhpcy50b3RhbGR1cmF0aW9uID0gMDtcbiAgICAgIHRoaXMudHlwZSA9IG51bGw7XG4gICAgICB0aGlzLnVybCA9IHZvaWQgMDtcbiAgICAgIHRoaXMubTN1OCA9ICcnO1xuICAgICAgdGhpcy52ZXJzaW9uID0gbnVsbDtcbiAgICAgIHRoaXMuY2FuQmxvY2tSZWxvYWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2FuU2tpcFVudGlsID0gMDtcbiAgICAgIHRoaXMuY2FuU2tpcERhdGVSYW5nZXMgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2tpcHBlZFNlZ21lbnRzID0gMDtcbiAgICAgIHRoaXMucmVjZW50bHlSZW1vdmVkRGF0ZXJhbmdlcyA9IHZvaWQgMDtcbiAgICAgIHRoaXMucGFydEhvbGRCYWNrID0gMDtcbiAgICAgIHRoaXMuaG9sZEJhY2sgPSAwO1xuICAgICAgdGhpcy5wYXJ0VGFyZ2V0ID0gMDtcbiAgICAgIHRoaXMucHJlbG9hZEhpbnQgPSB2b2lkIDA7XG4gICAgICB0aGlzLnJlbmRpdGlvblJlcG9ydHMgPSB2b2lkIDA7XG4gICAgICB0aGlzLnR1bmVJbkdvYWwgPSAwO1xuICAgICAgdGhpcy5kZWx0YVVwZGF0ZUZhaWxlZCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZHJpZnRTdGFydFRpbWUgPSAwO1xuICAgICAgdGhpcy5kcmlmdEVuZFRpbWUgPSAwO1xuICAgICAgdGhpcy5kcmlmdFN0YXJ0ID0gMDtcbiAgICAgIHRoaXMuZHJpZnRFbmQgPSAwO1xuICAgICAgdGhpcy5lbmNyeXB0ZWRGcmFnbWVudHMgPSB2b2lkIDA7XG4gICAgICB0aGlzLnBsYXlsaXN0UGFyc2luZ0Vycm9yID0gbnVsbDtcbiAgICAgIHRoaXMudmFyaWFibGVMaXN0ID0gbnVsbDtcbiAgICAgIHRoaXMuaGFzVmFyaWFibGVSZWZzID0gZmFsc2U7XG4gICAgICB0aGlzLmFwcGxpZWRUaW1lbGluZU9mZnNldCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZnJhZ21lbnRzID0gW107XG4gICAgICB0aGlzLmVuY3J5cHRlZEZyYWdtZW50cyA9IFtdO1xuICAgICAgdGhpcy5kYXRlUmFuZ2VzID0ge307XG4gICAgICB0aGlzLnVybCA9IGJhc2VVcmw7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBMZXZlbERldGFpbHMucHJvdG90eXBlO1xuICAgIF9wcm90by5yZWxvYWRlZCA9IGZ1bmN0aW9uIHJlbG9hZGVkKHByZXZpb3VzKSB7XG4gICAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgIHRoaXMuYWR2YW5jZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnVwZGF0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgcGFydFNuRGlmZiA9IHRoaXMubGFzdFBhcnRTbiAtIHByZXZpb3VzLmxhc3RQYXJ0U247XG4gICAgICB2YXIgcGFydEluZGV4RGlmZiA9IHRoaXMubGFzdFBhcnRJbmRleCAtIHByZXZpb3VzLmxhc3RQYXJ0SW5kZXg7XG4gICAgICB0aGlzLnVwZGF0ZWQgPSB0aGlzLmVuZFNOICE9PSBwcmV2aW91cy5lbmRTTiB8fCAhIXBhcnRJbmRleERpZmYgfHwgISFwYXJ0U25EaWZmIHx8ICF0aGlzLmxpdmU7XG4gICAgICB0aGlzLmFkdmFuY2VkID0gdGhpcy5lbmRTTiA+IHByZXZpb3VzLmVuZFNOIHx8IHBhcnRTbkRpZmYgPiAwIHx8IHBhcnRTbkRpZmYgPT09IDAgJiYgcGFydEluZGV4RGlmZiA+IDA7XG4gICAgICBpZiAodGhpcy51cGRhdGVkIHx8IHRoaXMuYWR2YW5jZWQpIHtcbiAgICAgICAgdGhpcy5taXNzZXMgPSBNYXRoLmZsb29yKHByZXZpb3VzLm1pc3NlcyAqIDAuNik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1pc3NlcyA9IHByZXZpb3VzLm1pc3NlcyArIDE7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKExldmVsRGV0YWlscywgW3tcbiAgICAgIGtleTogXCJoYXNQcm9ncmFtRGF0ZVRpbWVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5mcmFnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGlzRmluaXRlTnVtYmVyKHRoaXMuZnJhZ21lbnRzW3RoaXMuZnJhZ21lbnRzLmxlbmd0aCAtIDFdLnByb2dyYW1EYXRlVGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsZXZlbFRhcmdldER1cmF0aW9uXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXZlcmFnZXRhcmdldGR1cmF0aW9uIHx8IHRoaXMudGFyZ2V0ZHVyYXRpb24gfHwgREVGQVVMVF9UQVJHRVRfRFVSQVRJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRyaWZ0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIHJ1blRpbWUgPSB0aGlzLmRyaWZ0RW5kVGltZSAtIHRoaXMuZHJpZnRTdGFydFRpbWU7XG4gICAgICAgIGlmIChydW5UaW1lID4gMCkge1xuICAgICAgICAgIHZhciBydW5EdXJhdGlvbiA9IHRoaXMuZHJpZnRFbmQgLSB0aGlzLmRyaWZ0U3RhcnQ7XG4gICAgICAgICAgcmV0dXJuIHJ1bkR1cmF0aW9uICogMTAwMCAvIHJ1blRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVkZ2VcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJ0RW5kIHx8IHRoaXMuZnJhZ21lbnRFbmQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBhcnRFbmRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMkcGFydExpc3Q7XG4gICAgICAgIGlmICgoX3RoaXMkcGFydExpc3QgPSB0aGlzLnBhcnRMaXN0KSAhPSBudWxsICYmIF90aGlzJHBhcnRMaXN0Lmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnRMaXN0W3RoaXMucGFydExpc3QubGVuZ3RoIC0gMV0uZW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZyYWdtZW50RW5kO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmcmFnbWVudEVuZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfdGhpcyRmcmFnbWVudHM7XG4gICAgICAgIGlmICgoX3RoaXMkZnJhZ21lbnRzID0gdGhpcy5mcmFnbWVudHMpICE9IG51bGwgJiYgX3RoaXMkZnJhZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZyYWdtZW50c1t0aGlzLmZyYWdtZW50cy5sZW5ndGggLSAxXS5lbmQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImZyYWdtZW50U3RhcnRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMkZnJhZ21lbnRzMjtcbiAgICAgICAgaWYgKChfdGhpcyRmcmFnbWVudHMyID0gdGhpcy5mcmFnbWVudHMpICE9IG51bGwgJiYgX3RoaXMkZnJhZ21lbnRzMi5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5mcmFnbWVudHNbMF0uc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFnZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmFkdmFuY2VkRGF0ZVRpbWUpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoRGF0ZS5ub3coKSAtIHRoaXMuYWR2YW5jZWREYXRlVGltZSwgMCkgLyAxMDAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsYXN0UGFydEluZGV4XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIF90aGlzJHBhcnRMaXN0MjtcbiAgICAgICAgaWYgKChfdGhpcyRwYXJ0TGlzdDIgPSB0aGlzLnBhcnRMaXN0KSAhPSBudWxsICYmIF90aGlzJHBhcnRMaXN0Mi5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJ0TGlzdFt0aGlzLnBhcnRMaXN0Lmxlbmd0aCAtIDFdLmluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWF4UGFydEluZGV4XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIHBhcnRMaXN0ID0gdGhpcy5wYXJ0TGlzdDtcbiAgICAgICAgaWYgKHBhcnRMaXN0KSB7XG4gICAgICAgICAgdmFyIGxhc3RJbmRleCA9IHRoaXMubGFzdFBhcnRJbmRleDtcbiAgICAgICAgICBpZiAobGFzdEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHBhcnRMaXN0Lmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICBpZiAocGFydExpc3RbaV0uaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFydExpc3RbaV0uaW5kZXg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsYXN0SW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsYXN0UGFydFNuXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIF90aGlzJHBhcnRMaXN0MztcbiAgICAgICAgaWYgKChfdGhpcyRwYXJ0TGlzdDMgPSB0aGlzLnBhcnRMaXN0KSAhPSBudWxsICYmIF90aGlzJHBhcnRMaXN0My5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJ0TGlzdFt0aGlzLnBhcnRMaXN0Lmxlbmd0aCAtIDFdLmZyYWdtZW50LnNuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmVuZFNOO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJleHBpcmVkXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKHRoaXMubGl2ZSAmJiB0aGlzLmFnZSAmJiB0aGlzLm1pc3NlcyA8IDMpIHtcbiAgICAgICAgICB2YXIgcGxheWxpc3RXaW5kb3dEdXJhdGlvbiA9IHRoaXMucGFydEVuZCAtIHRoaXMuZnJhZ21lbnRTdGFydDtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hZ2UgPiBNYXRoLm1heChwbGF5bGlzdFdpbmRvd0R1cmF0aW9uLCB0aGlzLnRvdGFsZHVyYXRpb24pICsgdGhpcy5sZXZlbFRhcmdldER1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XSk7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBpc0Z1bGxTZWdtZW50RW5jcnlwdGlvbihtZXRob2QpIHtcbiAgICByZXR1cm4gbWV0aG9kID09PSAnQUVTLTEyOCcgfHwgbWV0aG9kID09PSAnQUVTLTI1NicgfHwgbWV0aG9kID09PSAnQUVTLTI1Ni1DVFInO1xuICB9XG4gIGZ1bmN0aW9uIGdldEFlc01vZGVGcm9tRnVsbFNlZ21lbnRNZXRob2QobWV0aG9kKSB7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ0FFUy0xMjgnOlxuICAgICAgY2FzZSAnQUVTLTI1Nic6XG4gICAgICAgIHJldHVybiBEZWNyeXB0ZXJBZXNNb2RlLmNiYztcbiAgICAgIGNhc2UgJ0FFUy0yNTYtQ1RSJzpcbiAgICAgICAgcmV0dXJuIERlY3J5cHRlckFlc01vZGUuY3RyO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmdWxsIHNlZ21lbnQgbWV0aG9kIFwiICsgbWV0aG9kKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBiYXNlNjREZWNvZGUoYmFzZTY0ZW5jb2RlZFN0cikge1xuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oYXRvYihiYXNlNjRlbmNvZGVkU3RyKSwgZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLmNoYXJDb2RlQXQoMCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBicmVha2luZyB1cCB0aG9zZSB0d28gdHlwZXMgaW4gb3JkZXIgdG8gY2xhcmlmeSB3aGF0IGlzIGhhcHBlbmluZyBpbiB0aGUgZGVjb2RpbmcgcGF0aC5cblxuICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg5MzY5ODQvdWludDhhcnJheS10by1zdHJpbmctaW4tamF2YXNjcmlwdC8yMjM3MzE5N1xuICAvLyBodHRwOi8vd3d3Lm9uaWNvcy5jb20vc3RhZmYvaXovYW11c2UvamF2YXNjcmlwdC9leHBlcnQvdXRmLnR4dFxuICAvKiB1dGYuanMgLSBVVEYtOCA8PT4gVVRGLTE2IGNvbnZlcnRpb25cbiAgICpcbiAgICogQ29weXJpZ2h0IChDKSAxOTk5IE1hc2FuYW8gSXp1bW8gPGl6QG9uaWNvcy5jby5qcD5cbiAgICogVmVyc2lvbjogMS4wXG4gICAqIExhc3RNb2RpZmllZDogRGVjIDI1IDE5OTlcbiAgICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUuICBZb3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0LlxuICAgKi9cblxuICBmdW5jdGlvbiBzdHJUb1V0ZjhhcnJheShzdHIpIHtcbiAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKSwgZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLmNoYXJDb2RlQXQoMCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRLZXlJZEJ5dGVzKHN0cikge1xuICAgIHZhciBrZXlJZGJ5dGVzID0gc3RyVG9VdGY4YXJyYXkoc3RyKS5zdWJhcnJheSgwLCAxNik7XG4gICAgdmFyIHBhZGRlZGtleUlkYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgcGFkZGVka2V5SWRieXRlcy5zZXQoa2V5SWRieXRlcywgMTYgLSBrZXlJZGJ5dGVzLmxlbmd0aCk7XG4gICAgcmV0dXJuIHBhZGRlZGtleUlkYnl0ZXM7XG4gIH1cbiAgZnVuY3Rpb24gY2hhbmdlRW5kaWFubmVzcyhrZXlJZCkge1xuICAgIHZhciBzd2FwID0gZnVuY3Rpb24gc3dhcChhcnJheSwgZnJvbSwgdG8pIHtcbiAgICAgIHZhciBjdXIgPSBhcnJheVtmcm9tXTtcbiAgICAgIGFycmF5W2Zyb21dID0gYXJyYXlbdG9dO1xuICAgICAgYXJyYXlbdG9dID0gY3VyO1xuICAgIH07XG4gICAgc3dhcChrZXlJZCwgMCwgMyk7XG4gICAgc3dhcChrZXlJZCwgMSwgMik7XG4gICAgc3dhcChrZXlJZCwgNCwgNSk7XG4gICAgc3dhcChrZXlJZCwgNiwgNyk7XG4gIH1cbiAgZnVuY3Rpb24gY29udmVydERhdGFVcmlUb0FycmF5Qnl0ZXModXJpKSB7XG4gICAgLy8gZGF0YTpbPG1lZGlhIHR5cGVdWzthdHRyaWJ1dGU9dmFsdWVdWztiYXNlNjRdLDxkYXRhPlxuICAgIHZhciBjb2xvbnNwbGl0ID0gdXJpLnNwbGl0KCc6Jyk7XG4gICAgdmFyIGtleWRhdGEgPSBudWxsO1xuICAgIGlmIChjb2xvbnNwbGl0WzBdID09PSAnZGF0YScgJiYgY29sb25zcGxpdC5sZW5ndGggPT09IDIpIHtcbiAgICAgIHZhciBzZW1pY29sb25zcGxpdCA9IGNvbG9uc3BsaXRbMV0uc3BsaXQoJzsnKTtcbiAgICAgIHZhciBjb21tYXNwbGl0ID0gc2VtaWNvbG9uc3BsaXRbc2VtaWNvbG9uc3BsaXQubGVuZ3RoIC0gMV0uc3BsaXQoJywnKTtcbiAgICAgIGlmIChjb21tYXNwbGl0Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICB2YXIgaXNiYXNlNjQgPSBjb21tYXNwbGl0WzBdID09PSAnYmFzZTY0JztcbiAgICAgICAgdmFyIGRhdGEgPSBjb21tYXNwbGl0WzFdO1xuICAgICAgICBpZiAoaXNiYXNlNjQpIHtcbiAgICAgICAgICBzZW1pY29sb25zcGxpdC5zcGxpY2UoLTEsIDEpOyAvLyByZW1vdmUgZnJvbSBwcm9jZXNzaW5nXG4gICAgICAgICAga2V5ZGF0YSA9IGJhc2U2NERlY29kZShkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBrZXlkYXRhID0gZ2V0S2V5SWRCeXRlcyhkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5ZGF0YTtcbiAgfVxuXG4gIC8qKiByZXR1cm5zIGB1bmRlZmluZWRgIGlzIGBzZWxmYCBpcyBtaXNzaW5nLCBlLmcuIGluIG5vZGUgKi9cbiAgdmFyIG9wdGlvbmFsU2VsZiA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05hdmlnYXRvci9yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3NcbiAgICovXG4gIHZhciBLZXlTeXN0ZW1zID0ge1xuICAgIENMRUFSS0VZOiBcIm9yZy53My5jbGVhcmtleVwiLFxuICAgIEZBSVJQTEFZOiBcImNvbS5hcHBsZS5mcHNcIixcbiAgICBQTEFZUkVBRFk6IFwiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHlcIixcbiAgICBXSURFVklORTogXCJjb20ud2lkZXZpbmUuYWxwaGFcIlxuICB9O1xuXG4gIC8vIFBsYXlsaXN0ICNFWFQtWC1LRVkgS0VZRk9STUFUIHZhbHVlc1xuICB2YXIgS2V5U3lzdGVtRm9ybWF0cyA9IHtcbiAgICBDTEVBUktFWTogXCJvcmcudzMuY2xlYXJrZXlcIixcbiAgICBGQUlSUExBWTogXCJjb20uYXBwbGUuc3RyZWFtaW5na2V5ZGVsaXZlcnlcIixcbiAgICBQTEFZUkVBRFk6IFwiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHlcIixcbiAgICBXSURFVklORTogXCJ1cm46dXVpZDplZGVmOGJhOS03OWQ2LTRhY2UtYTNjOC0yN2RjZDUxZDIxZWRcIlxuICB9O1xuICBmdW5jdGlvbiBrZXlTeXN0ZW1Gb3JtYXRUb0tleVN5c3RlbURvbWFpbihmb3JtYXQpIHtcbiAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgY2FzZSBLZXlTeXN0ZW1Gb3JtYXRzLkZBSVJQTEFZOlxuICAgICAgICByZXR1cm4gS2V5U3lzdGVtcy5GQUlSUExBWTtcbiAgICAgIGNhc2UgS2V5U3lzdGVtRm9ybWF0cy5QTEFZUkVBRFk6XG4gICAgICAgIHJldHVybiBLZXlTeXN0ZW1zLlBMQVlSRUFEWTtcbiAgICAgIGNhc2UgS2V5U3lzdGVtRm9ybWF0cy5XSURFVklORTpcbiAgICAgICAgcmV0dXJuIEtleVN5c3RlbXMuV0lERVZJTkU7XG4gICAgICBjYXNlIEtleVN5c3RlbUZvcm1hdHMuQ0xFQVJLRVk6XG4gICAgICAgIHJldHVybiBLZXlTeXN0ZW1zLkNMRUFSS0VZO1xuICAgIH1cbiAgfVxuXG4gIC8vIFN5c3RlbSBJRHMgZm9yIHdoaWNoIHdlIGNhbiBleHRyYWN0IGEga2V5IElEIGZyb20gXCJlbmNyeXB0ZWRcIiBldmVudCBQU1NIXG4gIHZhciBLZXlTeXN0ZW1JZHMgPSB7XG4gICAgQ0VOQzogXCIxMDc3ZWZlY2MwYjI0ZDAyYWNlMzNjMWU1MmUyZmI0YlwiLFxuICAgIENMRUFSS0VZOiBcImUyNzE5ZDU4YTk4NWIzYzk3ODFhYjAzMGFmNzhkMzBlXCIsXG4gICAgUExBWVJFQURZOiBcIjlhMDRmMDc5OTg0MDQyODZhYjkyZTY1YmUwODg1Zjk1XCIsXG4gICAgV0lERVZJTkU6IFwiZWRlZjhiYTk3OWQ2NGFjZWEzYzgyN2RjZDUxZDIxZWRcIlxuICB9O1xuICBmdW5jdGlvbiBrZXlTeXN0ZW1JZFRvS2V5U3lzdGVtRG9tYWluKHN5c3RlbUlkKSB7XG4gICAgaWYgKHN5c3RlbUlkID09PSBLZXlTeXN0ZW1JZHMuV0lERVZJTkUpIHtcbiAgICAgIHJldHVybiBLZXlTeXN0ZW1zLldJREVWSU5FO1xuICAgIH0gZWxzZSBpZiAoc3lzdGVtSWQgPT09IEtleVN5c3RlbUlkcy5QTEFZUkVBRFkpIHtcbiAgICAgIHJldHVybiBLZXlTeXN0ZW1zLlBMQVlSRUFEWTtcbiAgICB9IGVsc2UgaWYgKHN5c3RlbUlkID09PSBLZXlTeXN0ZW1JZHMuQ0VOQyB8fCBzeXN0ZW1JZCA9PT0gS2V5U3lzdGVtSWRzLkNMRUFSS0VZKSB7XG4gICAgICByZXR1cm4gS2V5U3lzdGVtcy5DTEVBUktFWTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24ga2V5U3lzdGVtRG9tYWluVG9LZXlTeXN0ZW1Gb3JtYXQoa2V5U3lzdGVtKSB7XG4gICAgc3dpdGNoIChrZXlTeXN0ZW0pIHtcbiAgICAgIGNhc2UgS2V5U3lzdGVtcy5GQUlSUExBWTpcbiAgICAgICAgcmV0dXJuIEtleVN5c3RlbUZvcm1hdHMuRkFJUlBMQVk7XG4gICAgICBjYXNlIEtleVN5c3RlbXMuUExBWVJFQURZOlxuICAgICAgICByZXR1cm4gS2V5U3lzdGVtRm9ybWF0cy5QTEFZUkVBRFk7XG4gICAgICBjYXNlIEtleVN5c3RlbXMuV0lERVZJTkU6XG4gICAgICAgIHJldHVybiBLZXlTeXN0ZW1Gb3JtYXRzLldJREVWSU5FO1xuICAgICAgY2FzZSBLZXlTeXN0ZW1zLkNMRUFSS0VZOlxuICAgICAgICByZXR1cm4gS2V5U3lzdGVtRm9ybWF0cy5DTEVBUktFWTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0S2V5U3lzdGVtc0ZvckNvbmZpZyhjb25maWcpIHtcbiAgICB2YXIgZHJtU3lzdGVtcyA9IGNvbmZpZy5kcm1TeXN0ZW1zLFxuICAgICAgd2lkZXZpbmVMaWNlbnNlVXJsID0gY29uZmlnLndpZGV2aW5lTGljZW5zZVVybDtcbiAgICB2YXIga2V5U3lzdGVtc1RvQXR0ZW1wdCA9IGRybVN5c3RlbXMgPyBbS2V5U3lzdGVtcy5GQUlSUExBWSwgS2V5U3lzdGVtcy5XSURFVklORSwgS2V5U3lzdGVtcy5QTEFZUkVBRFksIEtleVN5c3RlbXMuQ0xFQVJLRVldLmZpbHRlcihmdW5jdGlvbiAoa2V5U3lzdGVtKSB7XG4gICAgICByZXR1cm4gISFkcm1TeXN0ZW1zW2tleVN5c3RlbV07XG4gICAgfSkgOiBbXTtcbiAgICBpZiAoIWtleVN5c3RlbXNUb0F0dGVtcHRbS2V5U3lzdGVtcy5XSURFVklORV0gJiYgd2lkZXZpbmVMaWNlbnNlVXJsKSB7XG4gICAgICBrZXlTeXN0ZW1zVG9BdHRlbXB0LnB1c2goS2V5U3lzdGVtcy5XSURFVklORSk7XG4gICAgfVxuICAgIHJldHVybiBrZXlTeXN0ZW1zVG9BdHRlbXB0O1xuICB9XG4gIHZhciByZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MgPSBmdW5jdGlvbiAoX29wdGlvbmFsU2VsZiRuYXZpZ2F0KSB7XG4gICAgaWYgKG9wdGlvbmFsU2VsZiAhPSBudWxsICYmIChfb3B0aW9uYWxTZWxmJG5hdmlnYXQgPSBvcHRpb25hbFNlbGYubmF2aWdhdG9yKSAhPSBudWxsICYmIF9vcHRpb25hbFNlbGYkbmF2aWdhdC5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MpIHtcbiAgICAgIHJldHVybiBzZWxmLm5hdmlnYXRvci5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MuYmluZChzZWxmLm5hdmlnYXRvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9NZWRpYUtleVN5c3RlbUNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGZ1bmN0aW9uIGdldFN1cHBvcnRlZE1lZGlhS2V5U3lzdGVtQ29uZmlndXJhdGlvbnMoa2V5U3lzdGVtLCBhdWRpb0NvZGVjcywgdmlkZW9Db2RlY3MsIGRybVN5c3RlbU9wdGlvbnMpIHtcbiAgICB2YXIgaW5pdERhdGFUeXBlcztcbiAgICBzd2l0Y2ggKGtleVN5c3RlbSkge1xuICAgICAgY2FzZSBLZXlTeXN0ZW1zLkZBSVJQTEFZOlxuICAgICAgICBpbml0RGF0YVR5cGVzID0gWydjZW5jJywgJ3NpbmYnXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEtleVN5c3RlbXMuV0lERVZJTkU6XG4gICAgICBjYXNlIEtleVN5c3RlbXMuUExBWVJFQURZOlxuICAgICAgICBpbml0RGF0YVR5cGVzID0gWydjZW5jJ107XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBLZXlTeXN0ZW1zLkNMRUFSS0VZOlxuICAgICAgICBpbml0RGF0YVR5cGVzID0gWydjZW5jJywgJ2tleWlkcyddO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24ga2V5LXN5c3RlbTogXCIgKyBrZXlTeXN0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlTWVkaWFLZXlTeXN0ZW1Db25maWd1cmF0aW9ucyhpbml0RGF0YVR5cGVzLCBhdWRpb0NvZGVjcywgdmlkZW9Db2RlY3MsIGRybVN5c3RlbU9wdGlvbnMpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU1lZGlhS2V5U3lzdGVtQ29uZmlndXJhdGlvbnMoaW5pdERhdGFUeXBlcywgYXVkaW9Db2RlY3MsIHZpZGVvQ29kZWNzLCBkcm1TeXN0ZW1PcHRpb25zKSB7XG4gICAgdmFyIGJhc2VDb25maWcgPSB7XG4gICAgICBpbml0RGF0YVR5cGVzOiBpbml0RGF0YVR5cGVzLFxuICAgICAgcGVyc2lzdGVudFN0YXRlOiBkcm1TeXN0ZW1PcHRpb25zLnBlcnNpc3RlbnRTdGF0ZSB8fCAnb3B0aW9uYWwnLFxuICAgICAgZGlzdGluY3RpdmVJZGVudGlmaWVyOiBkcm1TeXN0ZW1PcHRpb25zLmRpc3RpbmN0aXZlSWRlbnRpZmllciB8fCAnb3B0aW9uYWwnLFxuICAgICAgc2Vzc2lvblR5cGVzOiBkcm1TeXN0ZW1PcHRpb25zLnNlc3Npb25UeXBlcyB8fCBbZHJtU3lzdGVtT3B0aW9ucy5zZXNzaW9uVHlwZSB8fCAndGVtcG9yYXJ5J10sXG4gICAgICBhdWRpb0NhcGFiaWxpdGllczogYXVkaW9Db2RlY3MubWFwKGZ1bmN0aW9uIChjb2RlYykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImF1ZGlvL21wNDsgY29kZWNzPVwiICsgY29kZWMsXG4gICAgICAgICAgcm9idXN0bmVzczogZHJtU3lzdGVtT3B0aW9ucy5hdWRpb1JvYnVzdG5lc3MgfHwgJycsXG4gICAgICAgICAgZW5jcnlwdGlvblNjaGVtZTogZHJtU3lzdGVtT3B0aW9ucy5hdWRpb0VuY3J5cHRpb25TY2hlbWUgfHwgbnVsbFxuICAgICAgICB9O1xuICAgICAgfSksXG4gICAgICB2aWRlb0NhcGFiaWxpdGllczogdmlkZW9Db2RlY3MubWFwKGZ1bmN0aW9uIChjb2RlYykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnRUeXBlOiBcInZpZGVvL21wNDsgY29kZWNzPVwiICsgY29kZWMsXG4gICAgICAgICAgcm9idXN0bmVzczogZHJtU3lzdGVtT3B0aW9ucy52aWRlb1JvYnVzdG5lc3MgfHwgJycsXG4gICAgICAgICAgZW5jcnlwdGlvblNjaGVtZTogZHJtU3lzdGVtT3B0aW9ucy52aWRlb0VuY3J5cHRpb25TY2hlbWUgfHwgbnVsbFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICB9O1xuICAgIHJldHVybiBbYmFzZUNvbmZpZ107XG4gIH1cbiAgZnVuY3Rpb24gaXNQZXJzaXN0ZW50U2Vzc2lvblR5cGUoZHJtU3lzdGVtT3B0aW9ucykge1xuICAgIHZhciBfZHJtU3lzdGVtT3B0aW9ucyRzZXM7XG4gICAgcmV0dXJuIGRybVN5c3RlbU9wdGlvbnMuc2Vzc2lvblR5cGUgPT09ICdwZXJzaXN0ZW50LWxpY2Vuc2UnIHx8ICEhKChfZHJtU3lzdGVtT3B0aW9ucyRzZXMgPSBkcm1TeXN0ZW1PcHRpb25zLnNlc3Npb25UeXBlcykgIT0gbnVsbCAmJiBfZHJtU3lzdGVtT3B0aW9ucyRzZXMuc29tZShmdW5jdGlvbiAodHlwZSkge1xuICAgICAgcmV0dXJuIHR5cGUgPT09ICdwZXJzaXN0ZW50LWxpY2Vuc2UnO1xuICAgIH0pKTtcbiAgfVxuICBmdW5jdGlvbiBwYXJzZVBsYXlSZWFkeVdSTShrZXlCeXRlcykge1xuICAgIHZhciBrZXlCeXRlc1V0ZjE2ID0gbmV3IFVpbnQxNkFycmF5KGtleUJ5dGVzLmJ1ZmZlciwga2V5Qnl0ZXMuYnl0ZU9mZnNldCwga2V5Qnl0ZXMuYnl0ZUxlbmd0aCAvIDIpO1xuICAgIHZhciBrZXlCeXRlU3RyID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBBcnJheS5mcm9tKGtleUJ5dGVzVXRmMTYpKTtcblxuICAgIC8vIFBhcnNlIFBsYXlyZWFkeSBXUk1IZWFkZXIgWE1MXG4gICAgdmFyIHhtbEtleUJ5dGVzID0ga2V5Qnl0ZVN0ci5zdWJzdHJpbmcoa2V5Qnl0ZVN0ci5pbmRleE9mKCc8JyksIGtleUJ5dGVTdHIubGVuZ3RoKTtcbiAgICB2YXIgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgIHZhciB4bWxEb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHhtbEtleUJ5dGVzLCAndGV4dC94bWwnKTtcbiAgICB2YXIga2V5RGF0YSA9IHhtbERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnS0lEJylbMF07XG4gICAgaWYgKGtleURhdGEpIHtcbiAgICAgIHZhciBrZXlJZCA9IGtleURhdGEuY2hpbGROb2Rlc1swXSA/IGtleURhdGEuY2hpbGROb2Rlc1swXS5ub2RlVmFsdWUgOiBrZXlEYXRhLmdldEF0dHJpYnV0ZSgnVkFMVUUnKTtcbiAgICAgIGlmIChrZXlJZCkge1xuICAgICAgICB2YXIga2V5SWRBcnJheSA9IGJhc2U2NERlY29kZShrZXlJZCkuc3ViYXJyYXkoMCwgMTYpO1xuICAgICAgICAvLyBLSUQgdmFsdWUgaW4gUFJPIGlzIGEgYmFzZTY0LWVuY29kZWQgbGl0dGxlIGVuZGlhbiBHVUlEIGludGVycHJldGF0aW9uIG9mIFVVSURcbiAgICAgICAgLy8gS0lEIHZhbHVlIGluIOKAmHRlbmPigJkgaXMgYSBiaWcgZW5kaWFuIFVVSUQgR1VJRCBpbnRlcnByZXRhdGlvbiBvZiBVVUlEXG4gICAgICAgIGNoYW5nZUVuZGlhbm5lc3Moa2V5SWRBcnJheSk7XG4gICAgICAgIHJldHVybiBrZXlJZEFycmF5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBrZXlVcmlUb0tleUlkTWFwID0ge307XG4gIHZhciBMZXZlbEtleSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGV2ZWxLZXkobWV0aG9kLCB1cmksIGZvcm1hdCwgZm9ybWF0dmVyc2lvbnMsIGl2KSB7XG4gICAgICBpZiAoZm9ybWF0dmVyc2lvbnMgPT09IHZvaWQgMCkge1xuICAgICAgICBmb3JtYXR2ZXJzaW9ucyA9IFsxXTtcbiAgICAgIH1cbiAgICAgIGlmIChpdiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGl2ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMudXJpID0gdm9pZCAwO1xuICAgICAgdGhpcy5tZXRob2QgPSB2b2lkIDA7XG4gICAgICB0aGlzLmtleUZvcm1hdCA9IHZvaWQgMDtcbiAgICAgIHRoaXMua2V5Rm9ybWF0VmVyc2lvbnMgPSB2b2lkIDA7XG4gICAgICB0aGlzLmVuY3J5cHRlZCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuaXNDb21tb25FbmNyeXB0aW9uID0gdm9pZCAwO1xuICAgICAgdGhpcy5pdiA9IG51bGw7XG4gICAgICB0aGlzLmtleSA9IG51bGw7XG4gICAgICB0aGlzLmtleUlkID0gbnVsbDtcbiAgICAgIHRoaXMucHNzaCA9IG51bGw7XG4gICAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIHRoaXMudXJpID0gdXJpO1xuICAgICAgdGhpcy5rZXlGb3JtYXQgPSBmb3JtYXQ7XG4gICAgICB0aGlzLmtleUZvcm1hdFZlcnNpb25zID0gZm9ybWF0dmVyc2lvbnM7XG4gICAgICB0aGlzLml2ID0gaXY7XG4gICAgICB0aGlzLmVuY3J5cHRlZCA9IG1ldGhvZCA/IG1ldGhvZCAhPT0gJ05PTkUnIDogZmFsc2U7XG4gICAgICB0aGlzLmlzQ29tbW9uRW5jcnlwdGlvbiA9IHRoaXMuZW5jcnlwdGVkICYmICFpc0Z1bGxTZWdtZW50RW5jcnlwdGlvbihtZXRob2QpO1xuICAgIH1cbiAgICBMZXZlbEtleS5jbGVhcktleVVyaVRvS2V5SWRNYXAgPSBmdW5jdGlvbiBjbGVhcktleVVyaVRvS2V5SWRNYXAoKSB7XG4gICAgICBrZXlVcmlUb0tleUlkTWFwID0ge307XG4gICAgfTtcbiAgICB2YXIgX3Byb3RvID0gTGV2ZWxLZXkucHJvdG90eXBlO1xuICAgIF9wcm90by5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xuICAgICAgLy8gSWYgaXQncyBTZWdtZW50IGVuY3J5cHRpb24gb3IgTm8gZW5jcnlwdGlvbiwganVzdCBzZWxlY3QgdGhhdCBrZXkgc3lzdGVtXG4gICAgICBpZiAodGhpcy5tZXRob2QpIHtcbiAgICAgICAgaWYgKGlzRnVsbFNlZ21lbnRFbmNyeXB0aW9uKHRoaXMubWV0aG9kKSB8fCB0aGlzLm1ldGhvZCA9PT0gJ05PTkUnKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMua2V5Rm9ybWF0ID09PSAnaWRlbnRpdHknKSB7XG4gICAgICAgICAgLy8gTWFpbnRhaW4gc3VwcG9ydCBmb3IgY2xlYXIgU0FNUExFLUFFUyB3aXRoIE1QRUctMyBUU1xuICAgICAgICAgIHJldHVybiB0aGlzLm1ldGhvZCA9PT0gJ1NBTVBMRS1BRVMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXRjaCAodGhpcy5rZXlGb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgS2V5U3lzdGVtRm9ybWF0cy5GQUlSUExBWTpcbiAgICAgICAgICAgIGNhc2UgS2V5U3lzdGVtRm9ybWF0cy5XSURFVklORTpcbiAgICAgICAgICAgIGNhc2UgS2V5U3lzdGVtRm9ybWF0cy5QTEFZUkVBRFk6XG4gICAgICAgICAgICBjYXNlIEtleVN5c3RlbUZvcm1hdHMuQ0xFQVJLRVk6XG4gICAgICAgICAgICAgIHJldHVybiBbJ0lTTy0yMzAwMS03JywgJ1NBTVBMRS1BRVMnLCAnU0FNUExFLUFFUy1DRU5DJywgJ1NBTVBMRS1BRVMtQ1RSJ10uaW5kZXhPZih0aGlzLm1ldGhvZCkgIT09IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgX3Byb3RvLmdldERlY3J5cHREYXRhID0gZnVuY3Rpb24gZ2V0RGVjcnlwdERhdGEoc24pIHtcbiAgICAgIGlmICghdGhpcy5lbmNyeXB0ZWQgfHwgIXRoaXMudXJpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGlzRnVsbFNlZ21lbnRFbmNyeXB0aW9uKHRoaXMubWV0aG9kKSAmJiB0aGlzLnVyaSAmJiAhdGhpcy5pdikge1xuICAgICAgICBpZiAodHlwZW9mIHNuICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIC8vIFdlIGFyZSBmZXRjaGluZyBkZWNyeXB0aW9uIGRhdGEgZm9yIGEgaW5pdGlhbGl6YXRpb24gc2VnbWVudFxuICAgICAgICAgIC8vIElmIHRoZSBzZWdtZW50IHdhcyBlbmNyeXB0ZWQgd2l0aCBBRVMtMTI4LzI1NlxuICAgICAgICAgIC8vIEl0IG11c3QgaGF2ZSBhbiBJViBkZWZpbmVkLiBXZSBjYW5ub3Qgc3Vic3RpdHV0ZSB0aGUgU2VnbWVudCBOdW1iZXIgaW4uXG4gICAgICAgICAgbG9nZ2VyLndhcm4oXCJtaXNzaW5nIElWIGZvciBpbml0aWFsaXphdGlvbiBzZWdtZW50IHdpdGggbWV0aG9kPVxcXCJcIiArIHRoaXMubWV0aG9kICsgXCJcXFwiIC0gY29tcGxpYW5jZSBpc3N1ZVwiKTtcblxuICAgICAgICAgIC8vIEV4cGxpY2l0bHkgc2V0IHNuIHRvIHJlc3VsdGluZyB2YWx1ZSBmcm9tIGltcGxpY2l0IGNvbnZlcnNpb25zICdpbml0U2VnbWVudCcgdmFsdWVzIGZvciBJViBnZW5lcmF0aW9uLlxuICAgICAgICAgIHNuID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXYgPSBjcmVhdGVJbml0aWFsaXphdGlvblZlY3Rvcihzbik7XG4gICAgICAgIHZhciBkZWNyeXB0ZGF0YSA9IG5ldyBMZXZlbEtleSh0aGlzLm1ldGhvZCwgdGhpcy51cmksICdpZGVudGl0eScsIHRoaXMua2V5Rm9ybWF0VmVyc2lvbnMsIGl2KTtcbiAgICAgICAgcmV0dXJuIGRlY3J5cHRkYXRhO1xuICAgICAgfVxuXG4gICAgICAvLyBJbml0aWFsaXplIGtleUlkIGlmIHBvc3NpYmxlXG4gICAgICB2YXIga2V5Qnl0ZXMgPSBjb252ZXJ0RGF0YVVyaVRvQXJyYXlCeXRlcyh0aGlzLnVyaSk7XG4gICAgICBpZiAoa2V5Qnl0ZXMpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmtleUZvcm1hdCkge1xuICAgICAgICAgIGNhc2UgS2V5U3lzdGVtRm9ybWF0cy5XSURFVklORTpcbiAgICAgICAgICAgIC8vIFNldHRpbmcgYHBzc2hgIG9uIHRoaXMgTGV2ZWxLZXkvRGVjcnlwdERhdGEgYWxsb3dzIEhMUy5qcyB0byBnZW5lcmF0ZSBhIHNlc3Npb24gdXNpbmdcbiAgICAgICAgICAgIC8vIHRoZSBwbGF5bGlzdC1rZXkgYmVmb3JlIHRoZSBcImVuY3J5cHRlZFwiIGV2ZW50LiAoQ29tbWVudCBvdXQgdG8gb25seSB1c2UgXCJlbmNyeXB0ZWRcIiBwYXRoLilcbiAgICAgICAgICAgIHRoaXMucHNzaCA9IGtleUJ5dGVzO1xuICAgICAgICAgICAgLy8gSW4gY2FzZSBvZiB3aWRldmluZSBrZXlJRCBpcyBlbWJlZGRlZCBpbiBQU1NIIGJveC4gUmVhZCBLZXkgSUQuXG4gICAgICAgICAgICBpZiAoa2V5Qnl0ZXMubGVuZ3RoID49IDIyKSB7XG4gICAgICAgICAgICAgIHRoaXMua2V5SWQgPSBrZXlCeXRlcy5zdWJhcnJheShrZXlCeXRlcy5sZW5ndGggLSAyMiwga2V5Qnl0ZXMubGVuZ3RoIC0gNik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIEtleVN5c3RlbUZvcm1hdHMuUExBWVJFQURZOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB2YXIgUGxheVJlYWR5S2V5U3lzdGVtVVVJRCA9IG5ldyBVaW50OEFycmF5KFsweDlhLCAweDA0LCAweGYwLCAweDc5LCAweDk4LCAweDQwLCAweDQyLCAweDg2LCAweGFiLCAweDkyLCAweGU2LCAweDViLCAweGUwLCAweDg4LCAweDVmLCAweDk1XSk7XG5cbiAgICAgICAgICAgICAgLy8gU2V0dGluZyBgcHNzaGAgb24gdGhpcyBMZXZlbEtleS9EZWNyeXB0RGF0YSBhbGxvd3MgSExTLmpzIHRvIGdlbmVyYXRlIGEgc2Vzc2lvbiB1c2luZ1xuICAgICAgICAgICAgICAvLyB0aGUgcGxheWxpc3Qta2V5IGJlZm9yZSB0aGUgXCJlbmNyeXB0ZWRcIiBldmVudC4gKENvbW1lbnQgb3V0IHRvIG9ubHkgdXNlIFwiZW5jcnlwdGVkXCIgcGF0aC4pXG4gICAgICAgICAgICAgIHRoaXMucHNzaCA9IG1wNHBzc2goUGxheVJlYWR5S2V5U3lzdGVtVVVJRCwgbnVsbCwga2V5Qnl0ZXMpO1xuICAgICAgICAgICAgICB0aGlzLmtleUlkID0gcGFyc2VQbGF5UmVhZHlXUk0oa2V5Qnl0ZXMpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB2YXIga2V5ZGF0YSA9IGtleUJ5dGVzLnN1YmFycmF5KDAsIDE2KTtcbiAgICAgICAgICAgICAgaWYgKGtleWRhdGEubGVuZ3RoICE9PSAxNikge1xuICAgICAgICAgICAgICAgIHZhciBwYWRkZWQgPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgICAgICAgICAgICAgcGFkZGVkLnNldChrZXlkYXRhLCAxNiAtIGtleWRhdGEubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBrZXlkYXRhID0gcGFkZGVkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMua2V5SWQgPSBrZXlkYXRhO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBEZWZhdWx0IGJlaGF2aW9yOiBhc3NpZ24gYSBuZXcga2V5SWQgZm9yIGVhY2ggdXJpXG4gICAgICBpZiAoIXRoaXMua2V5SWQgfHwgdGhpcy5rZXlJZC5ieXRlTGVuZ3RoICE9PSAxNikge1xuICAgICAgICB2YXIga2V5SWQgPSBrZXlVcmlUb0tleUlkTWFwW3RoaXMudXJpXTtcbiAgICAgICAgaWYgKCFrZXlJZCkge1xuICAgICAgICAgIHZhciB2YWwgPSBPYmplY3Qua2V5cyhrZXlVcmlUb0tleUlkTWFwKS5sZW5ndGggJSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICAgICAgICBrZXlJZCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgICAgICAgICB2YXIgZHYgPSBuZXcgRGF0YVZpZXcoa2V5SWQuYnVmZmVyLCAxMiwgNCk7IC8vIEp1c3Qgc2V0IHRoZSBsYXN0IDQgYnl0ZXNcbiAgICAgICAgICBkdi5zZXRVaW50MzIoMCwgdmFsKTtcbiAgICAgICAgICBrZXlVcmlUb0tleUlkTWFwW3RoaXMudXJpXSA9IGtleUlkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMua2V5SWQgPSBrZXlJZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIExldmVsS2V5O1xuICB9KCk7XG4gIGZ1bmN0aW9uIGNyZWF0ZUluaXRpYWxpemF0aW9uVmVjdG9yKHNlZ21lbnROdW1iZXIpIHtcbiAgICB2YXIgdWludDhWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuICAgIGZvciAodmFyIGkgPSAxMjsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHVpbnQ4Vmlld1tpXSA9IHNlZ21lbnROdW1iZXIgPj4gOCAqICgxNSAtIGkpICYgMHhmZjtcbiAgICB9XG4gICAgcmV0dXJuIHVpbnQ4VmlldztcbiAgfVxuXG4gIHZhciBNQVNURVJfUExBWUxJU1RfUkVHRVggPSAvI0VYVC1YLVNUUkVBTS1JTkY6KFteXFxyXFxuXSopKD86W1xcclxcbl0oPzojW15cXHJcXG5dKik/KSooW15cXHJcXG5dKyl8I0VYVC1YLShTRVNTSU9OLURBVEF8U0VTU0lPTi1LRVl8REVGSU5FfENPTlRFTlQtU1RFRVJJTkd8U1RBUlQpOihbXlxcclxcbl0qKVtcXHJcXG5dKy9nO1xuICB2YXIgTUFTVEVSX1BMQVlMSVNUX01FRElBX1JFR0VYID0gLyNFWFQtWC1NRURJQTooLiopL2c7XG4gIHZhciBJU19NRURJQV9QTEFZTElTVCA9IC9eI0VYVCg/OklORnwtWC1UQVJHRVREVVJBVElPTik6L207IC8vIEhhbmRsZSBlbXB0eSBNZWRpYSBQbGF5bGlzdCAoZmlyc3QgRVhUSU5GIG5vdCBzaWduYWxlZCwgYnV0IFRBUkdFVERVUkFUSU9OIHByZXNlbnQpXG5cbiAgdmFyIExFVkVMX1BMQVlMSVNUX1JFR0VYX0ZBU1QgPSBuZXcgUmVnRXhwKFsvI0VYVElORjpcXHMqKFxcZCooPzpcXC5cXGQrKT8pKD86LCguKilcXHMrKT8vLnNvdXJjZSxcbiAgLy8gZHVyYXRpb24gKCNFWFRJTkY6PGR1cmF0aW9uPiw8dGl0bGU+KSwgZ3JvdXAgMSA9PiBkdXJhdGlvbiwgZ3JvdXAgMiA9PiB0aXRsZVxuICAvKD8hIykgKihcXFNbXlxcclxcbl0qKS8uc291cmNlLFxuICAvLyBzZWdtZW50IFVSSSwgZ3JvdXAgMyA9PiB0aGUgVVJJIChub3RlIG5ld2xpbmUgaXMgbm90IGVhdGVuKVxuICAvIy4qLy5zb3VyY2UgLy8gQWxsIG90aGVyIG5vbi1zZWdtZW50IG9yaWVudGVkIHRhZ3Mgd2lsbCBtYXRjaCB3aXRoIGFsbCBncm91cHMgZW1wdHlcbiAgXS5qb2luKCd8JyksICdnJyk7XG4gIHZhciBMRVZFTF9QTEFZTElTVF9SRUdFWF9TTE9XID0gbmV3IFJlZ0V4cChbLyNFWFQtWC0oUFJPR1JBTS1EQVRFLVRJTUV8QllURVJBTkdFfERBVEVSQU5HRXxERUZJTkV8S0VZfE1BUHxQQVJUfFBBUlQtSU5GfFBMQVlMSVNULVRZUEV8UFJFTE9BRC1ISU5UfFJFTkRJVElPTi1SRVBPUlR8U0VSVkVSLUNPTlRST0x8U0tJUHxTVEFSVCk6KC4rKS8uc291cmNlLCAvI0VYVC1YLShCSVRSQVRFfERJU0NPTlRJTlVJVFktU0VRVUVOQ0V8TUVESUEtU0VRVUVOQ0V8VEFSR0VURFVSQVRJT058VkVSU0lPTik6ICooXFxkKykvLnNvdXJjZSwgLyNFWFQtWC0oRElTQ09OVElOVUlUWXxFTkRMSVNUfEdBUHxJTkRFUEVOREVOVC1TRUdNRU5UUykvLnNvdXJjZSwgLygjKShbXjpdKik6KC4qKS8uc291cmNlLCAvKCMpKC4qKSg/Oi4qKVxccj9cXG4/Ly5zb3VyY2VdLmpvaW4oJ3wnKSk7XG4gIHZhciBNM1U4UGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNM1U4UGFyc2VyKCkge31cbiAgICBNM1U4UGFyc2VyLmZpbmRHcm91cCA9IGZ1bmN0aW9uIGZpbmRHcm91cChncm91cHMsIG1lZGlhR3JvdXBJZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGdyb3VwID0gZ3JvdXBzW2ldO1xuICAgICAgICBpZiAoZ3JvdXAuaWQgPT09IG1lZGlhR3JvdXBJZCkge1xuICAgICAgICAgIHJldHVybiBncm91cDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgTTNVOFBhcnNlci5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSh1cmwsIGJhc2VVcmwpIHtcbiAgICAgIHJldHVybiB1cmxUb29sa2l0RXhwb3J0cy5idWlsZEFic29sdXRlVVJMKGJhc2VVcmwsIHVybCwge1xuICAgICAgICBhbHdheXNOb3JtYWxpemU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgTTNVOFBhcnNlci5pc01lZGlhUGxheWxpc3QgPSBmdW5jdGlvbiBpc01lZGlhUGxheWxpc3Qoc3RyKSB7XG4gICAgICByZXR1cm4gSVNfTUVESUFfUExBWUxJU1QudGVzdChzdHIpO1xuICAgIH07XG4gICAgTTNVOFBhcnNlci5wYXJzZU1hc3RlclBsYXlsaXN0ID0gZnVuY3Rpb24gcGFyc2VNYXN0ZXJQbGF5bGlzdChzdHJpbmcsIGJhc2V1cmwpIHtcbiAgICAgIHZhciBoYXNWYXJpYWJsZVJlZnMgPSBoYXNWYXJpYWJsZVJlZmVyZW5jZXMoc3RyaW5nKSA7XG4gICAgICB2YXIgcGFyc2VkID0ge1xuICAgICAgICBjb250ZW50U3RlZXJpbmc6IG51bGwsXG4gICAgICAgIGxldmVsczogW10sXG4gICAgICAgIHBsYXlsaXN0UGFyc2luZ0Vycm9yOiBudWxsLFxuICAgICAgICBzZXNzaW9uRGF0YTogbnVsbCxcbiAgICAgICAgc2Vzc2lvbktleXM6IG51bGwsXG4gICAgICAgIHN0YXJ0VGltZU9mZnNldDogbnVsbCxcbiAgICAgICAgdmFyaWFibGVMaXN0OiBudWxsLFxuICAgICAgICBoYXNWYXJpYWJsZVJlZnM6IGhhc1ZhcmlhYmxlUmVmc1xuICAgICAgfTtcbiAgICAgIHZhciBsZXZlbHNXaXRoS25vd25Db2RlY3MgPSBbXTtcbiAgICAgIE1BU1RFUl9QTEFZTElTVF9SRUdFWC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gTUFTVEVSX1BMQVlMSVNUX1JFR0VYLmV4ZWMoc3RyaW5nKSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAocmVzdWx0WzFdKSB7XG4gICAgICAgICAgdmFyIF9sZXZlbCR1bmtub3duQ29kZWNzO1xuICAgICAgICAgIC8vICcjRVhULVgtU1RSRUFNLUlORicgaXMgZm91bmQsIHBhcnNlIGxldmVsIHRhZyAgaW4gZ3JvdXAgMVxuICAgICAgICAgIHZhciBhdHRycyA9IG5ldyBBdHRyTGlzdChyZXN1bHRbMV0sIHBhcnNlZCk7XG4gICAgICAgICAgdmFyIHVyaSA9IHN1YnN0aXR1dGVWYXJpYWJsZXMocGFyc2VkLCByZXN1bHRbMl0pIDtcbiAgICAgICAgICB2YXIgbGV2ZWwgPSB7XG4gICAgICAgICAgICBhdHRyczogYXR0cnMsXG4gICAgICAgICAgICBiaXRyYXRlOiBhdHRycy5kZWNpbWFsSW50ZWdlcignQkFORFdJRFRIJykgfHwgYXR0cnMuZGVjaW1hbEludGVnZXIoJ0FWRVJBR0UtQkFORFdJRFRIJyksXG4gICAgICAgICAgICBuYW1lOiBhdHRycy5OQU1FLFxuICAgICAgICAgICAgdXJsOiBNM1U4UGFyc2VyLnJlc29sdmUodXJpLCBiYXNldXJsKVxuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIHJlc29sdXRpb24gPSBhdHRycy5kZWNpbWFsUmVzb2x1dGlvbignUkVTT0xVVElPTicpO1xuICAgICAgICAgIGlmIChyZXNvbHV0aW9uKSB7XG4gICAgICAgICAgICBsZXZlbC53aWR0aCA9IHJlc29sdXRpb24ud2lkdGg7XG4gICAgICAgICAgICBsZXZlbC5oZWlnaHQgPSByZXNvbHV0aW9uLmhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0Q29kZWNzKGF0dHJzLkNPREVDUywgbGV2ZWwpO1xuICAgICAgICAgIHZhciBzdXBwbGVtZW50YWxDb2RlY3MgPSBhdHRyc1snU1VQUExFTUVOVEFMLUNPREVDUyddO1xuICAgICAgICAgIGlmIChzdXBwbGVtZW50YWxDb2RlY3MpIHtcbiAgICAgICAgICAgIGxldmVsLnN1cHBsZW1lbnRhbCA9IHt9O1xuICAgICAgICAgICAgc2V0Q29kZWNzKHN1cHBsZW1lbnRhbENvZGVjcywgbGV2ZWwuc3VwcGxlbWVudGFsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEoKF9sZXZlbCR1bmtub3duQ29kZWNzID0gbGV2ZWwudW5rbm93bkNvZGVjcykgIT0gbnVsbCAmJiBfbGV2ZWwkdW5rbm93bkNvZGVjcy5sZW5ndGgpKSB7XG4gICAgICAgICAgICBsZXZlbHNXaXRoS25vd25Db2RlY3MucHVzaChsZXZlbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcnNlZC5sZXZlbHMucHVzaChsZXZlbCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0WzNdKSB7XG4gICAgICAgICAgdmFyIHRhZyA9IHJlc3VsdFszXTtcbiAgICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHJlc3VsdFs0XTtcbiAgICAgICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICAgICAgY2FzZSAnU0VTU0lPTi1EQVRBJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vICNFWFQtWC1TRVNTSU9OLURBVEFcbiAgICAgICAgICAgICAgICB2YXIgc2Vzc2lvbkF0dHJzID0gbmV3IEF0dHJMaXN0KGF0dHJpYnV0ZXMsIHBhcnNlZCk7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGFJZCA9IHNlc3Npb25BdHRyc1snREFUQS1JRCddO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhSWQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChwYXJzZWQuc2Vzc2lvbkRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkLnNlc3Npb25EYXRhID0ge307XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBwYXJzZWQuc2Vzc2lvbkRhdGFbZGF0YUlkXSA9IHNlc3Npb25BdHRycztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1NFU1NJT04tS0VZJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vICNFWFQtWC1TRVNTSU9OLUtFWVxuICAgICAgICAgICAgICAgIHZhciBzZXNzaW9uS2V5ID0gcGFyc2VLZXkoYXR0cmlidXRlcywgYmFzZXVybCwgcGFyc2VkKTtcbiAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbktleS5lbmNyeXB0ZWQgJiYgc2Vzc2lvbktleS5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAocGFyc2VkLnNlc3Npb25LZXlzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZC5zZXNzaW9uS2V5cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcGFyc2VkLnNlc3Npb25LZXlzLnB1c2goc2Vzc2lvbktleSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiW0tleXNdIElnbm9yaW5nIGludmFsaWQgRVhULVgtU0VTU0lPTi1LRVkgdGFnOiBcXFwiXCIgKyBhdHRyaWJ1dGVzICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnREVGSU5FJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vICNFWFQtWC1ERUZJTkVcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICB2YXIgdmFyaWFibGVBdHRyaWJ1dGVzID0gbmV3IEF0dHJMaXN0KGF0dHJpYnV0ZXMsIHBhcnNlZCk7XG4gICAgICAgICAgICAgICAgICBhZGRWYXJpYWJsZURlZmluaXRpb24ocGFyc2VkLCB2YXJpYWJsZUF0dHJpYnV0ZXMsIGJhc2V1cmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnQ09OVEVOVC1TVEVFUklORyc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyAjRVhULVgtQ09OVEVOVC1TVEVFUklOR1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RlZXJpbmdBdHRyaWJ1dGVzID0gbmV3IEF0dHJMaXN0KGF0dHJpYnV0ZXMsIHBhcnNlZCk7XG4gICAgICAgICAgICAgICAgcGFyc2VkLmNvbnRlbnRTdGVlcmluZyA9IHtcbiAgICAgICAgICAgICAgICAgIHVyaTogTTNVOFBhcnNlci5yZXNvbHZlKGNvbnRlbnRTdGVlcmluZ0F0dHJpYnV0ZXNbJ1NFUlZFUi1VUkknXSwgYmFzZXVybCksXG4gICAgICAgICAgICAgICAgICBwYXRod2F5SWQ6IGNvbnRlbnRTdGVlcmluZ0F0dHJpYnV0ZXNbJ1BBVEhXQVktSUQnXSB8fCAnLidcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdTVEFSVCc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyAjRVhULVgtU1RBUlRcbiAgICAgICAgICAgICAgICBwYXJzZWQuc3RhcnRUaW1lT2Zmc2V0ID0gcGFyc2VTdGFydFRpbWVPZmZzZXQoYXR0cmlidXRlcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZpbHRlciBvdXQgbGV2ZWxzIHdpdGggdW5rbm93biBjb2RlY3MgaWYgaXQgZG9lcyBub3QgcmVtb3ZlIGFsbCBsZXZlbHNcbiAgICAgIHZhciBzdHJpcFVua25vd25Db2RlY0xldmVscyA9IGxldmVsc1dpdGhLbm93bkNvZGVjcy5sZW5ndGggPiAwICYmIGxldmVsc1dpdGhLbm93bkNvZGVjcy5sZW5ndGggPCBwYXJzZWQubGV2ZWxzLmxlbmd0aDtcbiAgICAgIHBhcnNlZC5sZXZlbHMgPSBzdHJpcFVua25vd25Db2RlY0xldmVscyA/IGxldmVsc1dpdGhLbm93bkNvZGVjcyA6IHBhcnNlZC5sZXZlbHM7XG4gICAgICBpZiAocGFyc2VkLmxldmVscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcGFyc2VkLnBsYXlsaXN0UGFyc2luZ0Vycm9yID0gbmV3IEVycm9yKCdubyBsZXZlbHMgZm91bmQgaW4gbWFuaWZlc3QnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfTtcbiAgICBNM1U4UGFyc2VyLnBhcnNlTWFzdGVyUGxheWxpc3RNZWRpYSA9IGZ1bmN0aW9uIHBhcnNlTWFzdGVyUGxheWxpc3RNZWRpYShzdHJpbmcsIGJhc2V1cmwsIHBhcnNlZCkge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHZhciByZXN1bHRzID0ge307XG4gICAgICB2YXIgbGV2ZWxzID0gcGFyc2VkLmxldmVscztcbiAgICAgIHZhciBncm91cHNCeVR5cGUgPSB7XG4gICAgICAgIEFVRElPOiBsZXZlbHMubWFwKGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogbGV2ZWwuYXR0cnMuQVVESU8sXG4gICAgICAgICAgICBhdWRpb0NvZGVjOiBsZXZlbC5hdWRpb0NvZGVjXG4gICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIFNVQlRJVExFUzogbGV2ZWxzLm1hcChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IGxldmVsLmF0dHJzLlNVQlRJVExFUyxcbiAgICAgICAgICAgIHRleHRDb2RlYzogbGV2ZWwudGV4dENvZGVjXG4gICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgICdDTE9TRUQtQ0FQVElPTlMnOiBbXVxuICAgICAgfTtcbiAgICAgIHZhciBpZCA9IDA7XG4gICAgICBNQVNURVJfUExBWUxJU1RfTUVESUFfUkVHRVgubGFzdEluZGV4ID0gMDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gTUFTVEVSX1BMQVlMSVNUX01FRElBX1JFR0VYLmV4ZWMoc3RyaW5nKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGF0dHJzID0gbmV3IEF0dHJMaXN0KHJlc3VsdFsxXSwgcGFyc2VkKTtcbiAgICAgICAgdmFyIHR5cGUgPSBhdHRycy5UWVBFO1xuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgIHZhciBncm91cHMgPSBncm91cHNCeVR5cGVbdHlwZV07XG4gICAgICAgICAgdmFyIG1lZGlhcyA9IHJlc3VsdHNbdHlwZV0gfHwgW107XG4gICAgICAgICAgcmVzdWx0c1t0eXBlXSA9IG1lZGlhcztcbiAgICAgICAgICB2YXIgbGFuZyA9IGF0dHJzLkxBTkdVQUdFO1xuICAgICAgICAgIHZhciBhc3NvY0xhbmcgPSBhdHRyc1snQVNTT0MtTEFOR1VBR0UnXTtcbiAgICAgICAgICB2YXIgY2hhbm5lbHMgPSBhdHRycy5DSEFOTkVMUztcbiAgICAgICAgICB2YXIgY2hhcmFjdGVyaXN0aWNzID0gYXR0cnMuQ0hBUkFDVEVSSVNUSUNTO1xuICAgICAgICAgIHZhciBpbnN0cmVhbUlkID0gYXR0cnNbJ0lOU1RSRUFNLUlEJ107XG4gICAgICAgICAgdmFyIG1lZGlhID0ge1xuICAgICAgICAgICAgYXR0cnM6IGF0dHJzLFxuICAgICAgICAgICAgYml0cmF0ZTogMCxcbiAgICAgICAgICAgIGlkOiBpZCsrLFxuICAgICAgICAgICAgZ3JvdXBJZDogYXR0cnNbJ0dST1VQLUlEJ10gfHwgJycsXG4gICAgICAgICAgICBuYW1lOiBhdHRycy5OQU1FIHx8IGxhbmcgfHwgJycsXG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgZGVmYXVsdDogYXR0cnMuYm9vbCgnREVGQVVMVCcpLFxuICAgICAgICAgICAgYXV0b3NlbGVjdDogYXR0cnMuYm9vbCgnQVVUT1NFTEVDVCcpLFxuICAgICAgICAgICAgZm9yY2VkOiBhdHRycy5ib29sKCdGT1JDRUQnKSxcbiAgICAgICAgICAgIGxhbmc6IGxhbmcsXG4gICAgICAgICAgICB1cmw6IGF0dHJzLlVSSSA/IE0zVThQYXJzZXIucmVzb2x2ZShhdHRycy5VUkksIGJhc2V1cmwpIDogJydcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChhc3NvY0xhbmcpIHtcbiAgICAgICAgICAgIG1lZGlhLmFzc29jTGFuZyA9IGFzc29jTGFuZztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoYW5uZWxzKSB7XG4gICAgICAgICAgICBtZWRpYS5jaGFubmVscyA9IGNoYW5uZWxzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICAgICAgICBtZWRpYS5jaGFyYWN0ZXJpc3RpY3MgPSBjaGFyYWN0ZXJpc3RpY3M7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbnN0cmVhbUlkKSB7XG4gICAgICAgICAgICBtZWRpYS5pbnN0cmVhbUlkID0gaW5zdHJlYW1JZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGdyb3VwcyAhPSBudWxsICYmIGdyb3Vwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBhdWRpbyBvciB0ZXh0IGdyb3VwcyBzaWduYWxsZWQgaW4gdGhlIG1hbmlmZXN0LCBsZXQncyBsb29rIGZvciBhIG1hdGNoaW5nIGNvZGVjIHN0cmluZyBmb3IgdGhpcyB0cmFja1xuICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgZmluZCB0aGUgdHJhY2sgc2lnbmFsbGVkLCBsZXRzIHVzZSB0aGUgZmlyc3QgYXVkaW8gZ3JvdXBzIGNvZGVjIHdlIGhhdmVcbiAgICAgICAgICAgIC8vIEFjdGluZyBhcyBhIGJlc3QgZ3Vlc3NcbiAgICAgICAgICAgIHZhciBncm91cENvZGVjID0gTTNVOFBhcnNlci5maW5kR3JvdXAoZ3JvdXBzLCBtZWRpYS5ncm91cElkKSB8fCBncm91cHNbMF07XG4gICAgICAgICAgICBhc3NpZ25Db2RlYyhtZWRpYSwgZ3JvdXBDb2RlYywgJ2F1ZGlvQ29kZWMnKTtcbiAgICAgICAgICAgIGFzc2lnbkNvZGVjKG1lZGlhLCBncm91cENvZGVjLCAndGV4dENvZGVjJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1lZGlhcy5wdXNoKG1lZGlhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcbiAgICBNM1U4UGFyc2VyLnBhcnNlTGV2ZWxQbGF5bGlzdCA9IGZ1bmN0aW9uIHBhcnNlTGV2ZWxQbGF5bGlzdChzdHJpbmcsIGJhc2V1cmwsIGlkLCB0eXBlLCBsZXZlbFVybElkLCBtdWx0aXZhcmlhbnRWYXJpYWJsZUxpc3QpIHtcbiAgICAgIHZhciBfTEVWRUxfUExBWUxJU1RfUkVHRVg7XG4gICAgICB2YXIgYmFzZSA9IHtcbiAgICAgICAgdXJsOiBiYXNldXJsXG4gICAgICB9O1xuICAgICAgdmFyIGxldmVsID0gbmV3IExldmVsRGV0YWlscyhiYXNldXJsKTtcbiAgICAgIHZhciBmcmFnbWVudHMgPSBsZXZlbC5mcmFnbWVudHM7XG4gICAgICB2YXIgcHJvZ3JhbURhdGVUaW1lcyA9IFtdO1xuICAgICAgLy8gVGhlIG1vc3QgcmVjZW50IGluaXQgc2VnbWVudCBzZWVuIChhcHBsaWVzIHRvIGFsbCBzdWJzZXF1ZW50IHNlZ21lbnRzKVxuICAgICAgdmFyIGN1cnJlbnRJbml0U2VnbWVudCA9IG51bGw7XG4gICAgICB2YXIgY3VycmVudFNOID0gMDtcbiAgICAgIHZhciBjdXJyZW50UGFydCA9IDA7XG4gICAgICB2YXIgdG90YWxkdXJhdGlvbiA9IDA7XG4gICAgICB2YXIgZGlzY29udGludWl0eUNvdW50ZXIgPSAwO1xuICAgICAgdmFyIGN1cnJlbnRCaXRyYXRlID0gMDtcbiAgICAgIHZhciBwcmV2RnJhZyA9IG51bGw7XG4gICAgICB2YXIgZnJhZyA9IG5ldyBGcmFnbWVudCh0eXBlLCBiYXNlKTtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZXZlbGtleXM7XG4gICAgICB2YXIgZmlyc3RQZHRJbmRleCA9IC0xO1xuICAgICAgdmFyIGNyZWF0ZU5leHRGcmFnID0gZmFsc2U7XG4gICAgICB2YXIgbmV4dEJ5dGVSYW5nZSA9IG51bGw7XG4gICAgICB2YXIgc2VydmVyQ29udHJvbEF0dHJzO1xuICAgICAgTEVWRUxfUExBWUxJU1RfUkVHRVhfRkFTVC5sYXN0SW5kZXggPSAwO1xuICAgICAgbGV2ZWwubTN1OCA9IHN0cmluZztcbiAgICAgIGxldmVsLmhhc1ZhcmlhYmxlUmVmcyA9IGhhc1ZhcmlhYmxlUmVmZXJlbmNlcyhzdHJpbmcpIDtcbiAgICAgIGlmICgoKF9MRVZFTF9QTEFZTElTVF9SRUdFWCA9IExFVkVMX1BMQVlMSVNUX1JFR0VYX0ZBU1QuZXhlYyhzdHJpbmcpKSA9PSBudWxsID8gdm9pZCAwIDogX0xFVkVMX1BMQVlMSVNUX1JFR0VYWzBdKSAhPT0gJyNFWFRNM1UnKSB7XG4gICAgICAgIGxldmVsLnBsYXlsaXN0UGFyc2luZ0Vycm9yID0gbmV3IEVycm9yKCdNaXNzaW5nIGZvcm1hdCBpZGVudGlmaWVyICNFWFRNM1UnKTtcbiAgICAgICAgcmV0dXJuIGxldmVsO1xuICAgICAgfVxuICAgICAgd2hpbGUgKChyZXN1bHQgPSBMRVZFTF9QTEFZTElTVF9SRUdFWF9GQVNULmV4ZWMoc3RyaW5nKSkgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKGNyZWF0ZU5leHRGcmFnKSB7XG4gICAgICAgICAgY3JlYXRlTmV4dEZyYWcgPSBmYWxzZTtcbiAgICAgICAgICBmcmFnID0gbmV3IEZyYWdtZW50KHR5cGUsIGJhc2UpO1xuICAgICAgICAgIC8vIHNldHVwIHRoZSBuZXh0IGZyYWdtZW50IGZvciBwYXJ0IGxvYWRpbmdcbiAgICAgICAgICBmcmFnLnBsYXlsaXN0T2Zmc2V0ID0gdG90YWxkdXJhdGlvbjtcbiAgICAgICAgICBmcmFnLnN0YXJ0ID0gdG90YWxkdXJhdGlvbjtcbiAgICAgICAgICBmcmFnLnNuID0gY3VycmVudFNOO1xuICAgICAgICAgIGZyYWcuY2MgPSBkaXNjb250aW51aXR5Q291bnRlcjtcbiAgICAgICAgICBpZiAoY3VycmVudEJpdHJhdGUpIHtcbiAgICAgICAgICAgIGZyYWcuYml0cmF0ZSA9IGN1cnJlbnRCaXRyYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmcmFnLmxldmVsID0gaWQ7XG4gICAgICAgICAgaWYgKGN1cnJlbnRJbml0U2VnbWVudCkge1xuICAgICAgICAgICAgZnJhZy5pbml0U2VnbWVudCA9IGN1cnJlbnRJbml0U2VnbWVudDtcbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5pdFNlZ21lbnQucmF3UHJvZ3JhbURhdGVUaW1lKSB7XG4gICAgICAgICAgICAgIGZyYWcucmF3UHJvZ3JhbURhdGVUaW1lID0gY3VycmVudEluaXRTZWdtZW50LnJhd1Byb2dyYW1EYXRlVGltZTtcbiAgICAgICAgICAgICAgY3VycmVudEluaXRTZWdtZW50LnJhd1Byb2dyYW1EYXRlVGltZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV4dEJ5dGVSYW5nZSkge1xuICAgICAgICAgICAgICBmcmFnLnNldEJ5dGVSYW5nZShuZXh0Qnl0ZVJhbmdlKTtcbiAgICAgICAgICAgICAgbmV4dEJ5dGVSYW5nZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHJlc3VsdFsxXTtcbiAgICAgICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICAgICAgLy8gSU5GXG4gICAgICAgICAgZnJhZy5kdXJhdGlvbiA9IHBhcnNlRmxvYXQoZHVyYXRpb24pO1xuICAgICAgICAgIC8vIGF2b2lkIHNsaWNlZCBzdHJpbmdzICAgIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL2lzc3Vlcy85MzlcbiAgICAgICAgICB2YXIgdGl0bGUgPSAoJyAnICsgcmVzdWx0WzJdKS5zbGljZSgxKTtcbiAgICAgICAgICBmcmFnLnRpdGxlID0gdGl0bGUgfHwgbnVsbDtcbiAgICAgICAgICBmcmFnLnRhZ0xpc3QucHVzaCh0aXRsZSA/IFsnSU5GJywgZHVyYXRpb24sIHRpdGxlXSA6IFsnSU5GJywgZHVyYXRpb25dKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHRbM10pIHtcbiAgICAgICAgICAvLyB1cmxcbiAgICAgICAgICBpZiAoaXNGaW5pdGVOdW1iZXIoZnJhZy5kdXJhdGlvbikpIHtcbiAgICAgICAgICAgIGZyYWcucGxheWxpc3RPZmZzZXQgPSB0b3RhbGR1cmF0aW9uO1xuICAgICAgICAgICAgZnJhZy5zdGFydCA9IHRvdGFsZHVyYXRpb247XG4gICAgICAgICAgICBpZiAobGV2ZWxrZXlzKSB7XG4gICAgICAgICAgICAgIHNldEZyYWdMZXZlbEtleXMoZnJhZywgbGV2ZWxrZXlzLCBsZXZlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFnLnNuID0gY3VycmVudFNOO1xuICAgICAgICAgICAgZnJhZy5sZXZlbCA9IGlkO1xuICAgICAgICAgICAgZnJhZy5jYyA9IGRpc2NvbnRpbnVpdHlDb3VudGVyO1xuICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2goZnJhZyk7XG4gICAgICAgICAgICAvLyBhdm9pZCBzbGljZWQgc3RyaW5ncyAgICBodHRwczovL2dpdGh1Yi5jb20vdmlkZW8tZGV2L2hscy5qcy9pc3N1ZXMvOTM5XG4gICAgICAgICAgICB2YXIgdXJpID0gKCcgJyArIHJlc3VsdFszXSkuc2xpY2UoMSk7XG4gICAgICAgICAgICBmcmFnLnJlbHVybCA9IHN1YnN0aXR1dGVWYXJpYWJsZXMobGV2ZWwsIHVyaSkgO1xuICAgICAgICAgICAgYXNzaWduUHJvZ3JhbURhdGVUaW1lKGZyYWcsIHByZXZGcmFnLCBwcm9ncmFtRGF0ZVRpbWVzKTtcbiAgICAgICAgICAgIHByZXZGcmFnID0gZnJhZztcbiAgICAgICAgICAgIHRvdGFsZHVyYXRpb24gKz0gZnJhZy5kdXJhdGlvbjtcbiAgICAgICAgICAgIGN1cnJlbnRTTisrO1xuICAgICAgICAgICAgY3VycmVudFBhcnQgPSAwO1xuICAgICAgICAgICAgY3JlYXRlTmV4dEZyYWcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHRbMF0ubWF0Y2goTEVWRUxfUExBWUxJU1RfUkVHRVhfU0xPVyk7XG4gICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdObyBtYXRjaGVzIG9uIHNsb3cgcmVnZXggbWF0Y2ggZm9yIGxldmVsIHBsYXlsaXN0IScpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHRbaV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBhdm9pZCBzbGljZWQgc3RyaW5ncyAgICBodHRwczovL2dpdGh1Yi5jb20vdmlkZW8tZGV2L2hscy5qcy9pc3N1ZXMvOTM5XG4gICAgICAgICAgdmFyIHRhZyA9ICgnICcgKyByZXN1bHRbaV0pLnNsaWNlKDEpO1xuICAgICAgICAgIHZhciB2YWx1ZTEgPSAoJyAnICsgcmVzdWx0W2kgKyAxXSkuc2xpY2UoMSk7XG4gICAgICAgICAgdmFyIHZhbHVlMiA9IHJlc3VsdFtpICsgMl0gPyAoJyAnICsgcmVzdWx0W2kgKyAyXSkuc2xpY2UoMSkgOiBudWxsO1xuICAgICAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgICAgICBjYXNlICdCWVRFUkFOR0UnOlxuICAgICAgICAgICAgICBpZiAocHJldkZyYWcpIHtcbiAgICAgICAgICAgICAgICBmcmFnLnNldEJ5dGVSYW5nZSh2YWx1ZTEsIHByZXZGcmFnKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmcmFnLnNldEJ5dGVSYW5nZSh2YWx1ZTEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnUFJPR1JBTS1EQVRFLVRJTUUnOlxuICAgICAgICAgICAgICAvLyBhdm9pZCBzbGljZWQgc3RyaW5ncyAgICBodHRwczovL2dpdGh1Yi5jb20vdmlkZW8tZGV2L2hscy5qcy9pc3N1ZXMvOTM5XG4gICAgICAgICAgICAgIGZyYWcucmF3UHJvZ3JhbURhdGVUaW1lID0gdmFsdWUxO1xuICAgICAgICAgICAgICBmcmFnLnRhZ0xpc3QucHVzaChbJ1BST0dSQU0tREFURS1USU1FJywgdmFsdWUxXSk7XG4gICAgICAgICAgICAgIGlmIChmaXJzdFBkdEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGZpcnN0UGR0SW5kZXggPSBmcmFnbWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnUExBWUxJU1QtVFlQRSc6XG4gICAgICAgICAgICAgIGlmIChsZXZlbC50eXBlKSB7XG4gICAgICAgICAgICAgICAgYXNzaWduTXVsdGlwbGVNZWRpYVBsYXlsaXN0VGFnT2NjdXJhbmNlRXJyb3IobGV2ZWwsIHRhZywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsZXZlbC50eXBlID0gdmFsdWUxLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTUVESUEtU0VRVUVOQ0UnOlxuICAgICAgICAgICAgICBpZiAobGV2ZWwuc3RhcnRTTiAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFzc2lnbk11bHRpcGxlTWVkaWFQbGF5bGlzdFRhZ09jY3VyYW5jZUVycm9yKGxldmVsLCB0YWcsIHJlc3VsdCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZnJhZ21lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBhc3NpZ25NdXN0QXBwZWFyQmVmb3JlU2VnbWVudHNFcnJvcihsZXZlbCwgdGFnLCByZXN1bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGN1cnJlbnRTTiA9IGxldmVsLnN0YXJ0U04gPSBwYXJzZUludCh2YWx1ZTEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1NLSVAnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKGxldmVsLnNraXBwZWRTZWdtZW50cykge1xuICAgICAgICAgICAgICAgICAgYXNzaWduTXVsdGlwbGVNZWRpYVBsYXlsaXN0VGFnT2NjdXJhbmNlRXJyb3IobGV2ZWwsIHRhZywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHNraXBBdHRycyA9IG5ldyBBdHRyTGlzdCh2YWx1ZTEsIGxldmVsKTtcbiAgICAgICAgICAgICAgICB2YXIgc2tpcHBlZFNlZ21lbnRzID0gc2tpcEF0dHJzLmRlY2ltYWxJbnRlZ2VyKCdTS0lQUEVELVNFR01FTlRTJyk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRmluaXRlTnVtYmVyKHNraXBwZWRTZWdtZW50cykpIHtcbiAgICAgICAgICAgICAgICAgIGxldmVsLnNraXBwZWRTZWdtZW50cyArPSBza2lwcGVkU2VnbWVudHM7XG4gICAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgcmVzdWx0IGluIGZyYWdtZW50c1tdIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHZhbHVlcywgd2hpY2ggd2Ugd2lsbCBmaWxsIGluIHdpdGggYG1lcmdlRGV0YWlsc2BcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gc2tpcHBlZFNlZ21lbnRzOyBfaS0tOykge1xuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudHMucHVzaChudWxsKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRTTiArPSBza2lwcGVkU2VnbWVudHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZWNlbnRseVJlbW92ZWREYXRlcmFuZ2VzID0gc2tpcEF0dHJzLmVudW1lcmF0ZWRTdHJpbmcoJ1JFQ0VOVExZLVJFTU9WRUQtREFURVJBTkdFUycpO1xuICAgICAgICAgICAgICAgIGlmIChyZWNlbnRseVJlbW92ZWREYXRlcmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgICBsZXZlbC5yZWNlbnRseVJlbW92ZWREYXRlcmFuZ2VzID0gKGxldmVsLnJlY2VudGx5UmVtb3ZlZERhdGVyYW5nZXMgfHwgW10pLmNvbmNhdChyZWNlbnRseVJlbW92ZWREYXRlcmFuZ2VzLnNwbGl0KCdcXHQnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdUQVJHRVREVVJBVElPTic6XG4gICAgICAgICAgICAgIGlmIChsZXZlbC50YXJnZXRkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFzc2lnbk11bHRpcGxlTWVkaWFQbGF5bGlzdFRhZ09jY3VyYW5jZUVycm9yKGxldmVsLCB0YWcsIHJlc3VsdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGV2ZWwudGFyZ2V0ZHVyYXRpb24gPSBNYXRoLm1heChwYXJzZUludCh2YWx1ZTEpLCAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdWRVJTSU9OJzpcbiAgICAgICAgICAgICAgaWYgKGxldmVsLnZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhc3NpZ25NdWx0aXBsZU1lZGlhUGxheWxpc3RUYWdPY2N1cmFuY2VFcnJvcihsZXZlbCwgdGFnLCByZXN1bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxldmVsLnZlcnNpb24gPSBwYXJzZUludCh2YWx1ZTEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0lOREVQRU5ERU5ULVNFR01FTlRTJzpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdFTkRMSVNUJzpcbiAgICAgICAgICAgICAgaWYgKCFsZXZlbC5saXZlKSB7XG4gICAgICAgICAgICAgICAgYXNzaWduTXVsdGlwbGVNZWRpYVBsYXlsaXN0VGFnT2NjdXJhbmNlRXJyb3IobGV2ZWwsIHRhZywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsZXZlbC5saXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgICAgICAgIGlmICh2YWx1ZTEgfHwgdmFsdWUyKSB7XG4gICAgICAgICAgICAgICAgZnJhZy50YWdMaXN0LnB1c2godmFsdWUyID8gW3ZhbHVlMSwgdmFsdWUyXSA6IFt2YWx1ZTFdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0RJU0NPTlRJTlVJVFknOlxuICAgICAgICAgICAgICBkaXNjb250aW51aXR5Q291bnRlcisrO1xuICAgICAgICAgICAgICBmcmFnLnRhZ0xpc3QucHVzaChbJ0RJUyddKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdHQVAnOlxuICAgICAgICAgICAgICBmcmFnLmdhcCA9IHRydWU7XG4gICAgICAgICAgICAgIGZyYWcudGFnTGlzdC5wdXNoKFt0YWddKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdCSVRSQVRFJzpcbiAgICAgICAgICAgICAgZnJhZy50YWdMaXN0LnB1c2goW3RhZywgdmFsdWUxXSk7XG4gICAgICAgICAgICAgIGN1cnJlbnRCaXRyYXRlID0gcGFyc2VJbnQodmFsdWUxKSAqIDEwMDA7XG4gICAgICAgICAgICAgIGlmIChpc0Zpbml0ZU51bWJlcihjdXJyZW50Qml0cmF0ZSkpIHtcbiAgICAgICAgICAgICAgICBmcmFnLmJpdHJhdGUgPSBjdXJyZW50Qml0cmF0ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Qml0cmF0ZSA9IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdEQVRFUkFOR0UnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGVSYW5nZUF0dHIgPSBuZXcgQXR0ckxpc3QodmFsdWUxLCBsZXZlbCk7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGVSYW5nZSA9IG5ldyBEYXRlUmFuZ2UoZGF0ZVJhbmdlQXR0ciwgbGV2ZWwuZGF0ZVJhbmdlc1tkYXRlUmFuZ2VBdHRyLklEXSwgbGV2ZWwuZGF0ZVJhbmdlVGFnQ291bnQpO1xuICAgICAgICAgICAgICAgIGxldmVsLmRhdGVSYW5nZVRhZ0NvdW50Kys7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGVSYW5nZS5pc1ZhbGlkIHx8IGxldmVsLnNraXBwZWRTZWdtZW50cykge1xuICAgICAgICAgICAgICAgICAgbGV2ZWwuZGF0ZVJhbmdlc1tkYXRlUmFuZ2UuaWRdID0gZGF0ZVJhbmdlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihcIklnbm9yaW5nIGludmFsaWQgREFURVJBTkdFIHRhZzogXFxcIlwiICsgdmFsdWUxICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBZGQgdG8gZnJhZ21lbnQgdGFnIGxpc3QgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5ICg8IHYxLjIuMClcbiAgICAgICAgICAgICAgICBmcmFnLnRhZ0xpc3QucHVzaChbJ0VYVC1YLURBVEVSQU5HRScsIHZhbHVlMV0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdERUZJTkUnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdmFyIHZhcmlhYmxlQXR0cmlidXRlcyA9IG5ldyBBdHRyTGlzdCh2YWx1ZTEsIGxldmVsKTtcbiAgICAgICAgICAgICAgICAgIGlmICgnSU1QT1JUJyBpbiB2YXJpYWJsZUF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1wb3J0VmFyaWFibGVEZWZpbml0aW9uKGxldmVsLCB2YXJpYWJsZUF0dHJpYnV0ZXMsIG11bHRpdmFyaWFudFZhcmlhYmxlTGlzdCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhZGRWYXJpYWJsZURlZmluaXRpb24obGV2ZWwsIHZhcmlhYmxlQXR0cmlidXRlcywgYmFzZXVybCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdESVNDT05USU5VSVRZLVNFUVVFTkNFJzpcbiAgICAgICAgICAgICAgaWYgKGxldmVsLnN0YXJ0Q0MgIT09IDApIHtcbiAgICAgICAgICAgICAgICBhc3NpZ25NdWx0aXBsZU1lZGlhUGxheWxpc3RUYWdPY2N1cmFuY2VFcnJvcihsZXZlbCwgdGFnLCByZXN1bHQpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZyYWdtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgYXNzaWduTXVzdEFwcGVhckJlZm9yZVNlZ21lbnRzRXJyb3IobGV2ZWwsIHRhZywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsZXZlbC5zdGFydENDID0gZGlzY29udGludWl0eUNvdW50ZXIgPSBwYXJzZUludCh2YWx1ZTEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0tFWSc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgbGV2ZWxLZXkgPSBwYXJzZUtleSh2YWx1ZTEsIGJhc2V1cmwsIGxldmVsKTtcbiAgICAgICAgICAgICAgICBpZiAobGV2ZWxLZXkuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGxldmVsS2V5Lm1ldGhvZCA9PT0gJ05PTkUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldmVsa2V5cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoIWxldmVsa2V5cykge1xuICAgICAgICAgICAgICAgICAgICBsZXZlbGtleXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChsZXZlbGtleXNbbGV2ZWxLZXkua2V5Rm9ybWF0XSkge1xuICAgICAgICAgICAgICAgICAgICBsZXZlbGtleXMgPSBfZXh0ZW5kcyh7fSwgbGV2ZWxrZXlzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGxldmVsa2V5c1tsZXZlbEtleS5rZXlGb3JtYXRdID0gbGV2ZWxLZXk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiW0tleXNdIElnbm9yaW5nIGludmFsaWQgRVhULVgtS0VZIHRhZzogXFxcIlwiICsgdmFsdWUxICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnU1RBUlQnOlxuICAgICAgICAgICAgICBsZXZlbC5zdGFydFRpbWVPZmZzZXQgPSBwYXJzZVN0YXJ0VGltZU9mZnNldCh2YWx1ZTEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ01BUCc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFwQXR0cnMgPSBuZXcgQXR0ckxpc3QodmFsdWUxLCBsZXZlbCk7XG4gICAgICAgICAgICAgICAgaWYgKGZyYWcuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgIC8vIEluaXRpYWwgc2VnbWVudCB0YWcgaXMgYWZ0ZXIgc2VnbWVudCBkdXJhdGlvbiB0YWcuXG4gICAgICAgICAgICAgICAgICAvLyAgICNFWFRJTkY6IDYuMFxuICAgICAgICAgICAgICAgICAgLy8gICAjRVhULVgtTUFQOlVSST1cImluaXQubXA0XG4gICAgICAgICAgICAgICAgICB2YXIgaW5pdCA9IG5ldyBGcmFnbWVudCh0eXBlLCBiYXNlKTtcbiAgICAgICAgICAgICAgICAgIHNldEluaXRTZWdtZW50KGluaXQsIG1hcEF0dHJzLCBpZCwgbGV2ZWxrZXlzKTtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbml0U2VnbWVudCA9IGluaXQ7XG4gICAgICAgICAgICAgICAgICBmcmFnLmluaXRTZWdtZW50ID0gY3VycmVudEluaXRTZWdtZW50O1xuICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJbml0U2VnbWVudC5yYXdQcm9ncmFtRGF0ZVRpbWUgJiYgIWZyYWcucmF3UHJvZ3JhbURhdGVUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGZyYWcucmF3UHJvZ3JhbURhdGVUaW1lID0gY3VycmVudEluaXRTZWdtZW50LnJhd1Byb2dyYW1EYXRlVGltZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gSW5pdGlhbCBzZWdtZW50IHRhZyBpcyBiZWZvcmUgc2VnbWVudCBkdXJhdGlvbiB0YWdcbiAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBjYXNlIHdoZXJlIEVYVC1YLU1BUCBpcyBkZWNsYXJlZCBhZnRlciBFWFQtWC1CWVRFUkFOR0VcbiAgICAgICAgICAgICAgICAgIHZhciBlbmQgPSBmcmFnLmJ5dGVSYW5nZUVuZE9mZnNldDtcbiAgICAgICAgICAgICAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gZnJhZy5ieXRlUmFuZ2VTdGFydE9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgbmV4dEJ5dGVSYW5nZSA9IGVuZCAtIHN0YXJ0ICsgXCJAXCIgKyBzdGFydDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRCeXRlUmFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgc2V0SW5pdFNlZ21lbnQoZnJhZywgbWFwQXR0cnMsIGlkLCBsZXZlbGtleXMpO1xuICAgICAgICAgICAgICAgICAgY3VycmVudEluaXRTZWdtZW50ID0gZnJhZztcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZU5leHRGcmFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudEluaXRTZWdtZW50LmNjID0gZGlzY29udGludWl0eUNvdW50ZXI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1NFUlZFUi1DT05UUk9MJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChzZXJ2ZXJDb250cm9sQXR0cnMpIHtcbiAgICAgICAgICAgICAgICAgIGFzc2lnbk11bHRpcGxlTWVkaWFQbGF5bGlzdFRhZ09jY3VyYW5jZUVycm9yKGxldmVsLCB0YWcsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlcnZlckNvbnRyb2xBdHRycyA9IG5ldyBBdHRyTGlzdCh2YWx1ZTEpO1xuICAgICAgICAgICAgICAgIGxldmVsLmNhbkJsb2NrUmVsb2FkID0gc2VydmVyQ29udHJvbEF0dHJzLmJvb2woJ0NBTi1CTE9DSy1SRUxPQUQnKTtcbiAgICAgICAgICAgICAgICBsZXZlbC5jYW5Ta2lwVW50aWwgPSBzZXJ2ZXJDb250cm9sQXR0cnMub3B0aW9uYWxGbG9hdCgnQ0FOLVNLSVAtVU5USUwnLCAwKTtcbiAgICAgICAgICAgICAgICBsZXZlbC5jYW5Ta2lwRGF0ZVJhbmdlcyA9IGxldmVsLmNhblNraXBVbnRpbCA+IDAgJiYgc2VydmVyQ29udHJvbEF0dHJzLmJvb2woJ0NBTi1TS0lQLURBVEVSQU5HRVMnKTtcbiAgICAgICAgICAgICAgICBsZXZlbC5wYXJ0SG9sZEJhY2sgPSBzZXJ2ZXJDb250cm9sQXR0cnMub3B0aW9uYWxGbG9hdCgnUEFSVC1IT0xELUJBQ0snLCAwKTtcbiAgICAgICAgICAgICAgICBsZXZlbC5ob2xkQmFjayA9IHNlcnZlckNvbnRyb2xBdHRycy5vcHRpb25hbEZsb2F0KCdIT0xELUJBQ0snLCAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnUEFSVC1JTkYnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKGxldmVsLnBhcnRUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgIGFzc2lnbk11bHRpcGxlTWVkaWFQbGF5bGlzdFRhZ09jY3VyYW5jZUVycm9yKGxldmVsLCB0YWcsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwYXJ0SW5mQXR0cnMgPSBuZXcgQXR0ckxpc3QodmFsdWUxKTtcbiAgICAgICAgICAgICAgICBsZXZlbC5wYXJ0VGFyZ2V0ID0gcGFydEluZkF0dHJzLmRlY2ltYWxGbG9hdGluZ1BvaW50KCdQQVJULVRBUkdFVCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdQQVJUJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0TGlzdCA9IGxldmVsLnBhcnRMaXN0O1xuICAgICAgICAgICAgICAgIGlmICghcGFydExpc3QpIHtcbiAgICAgICAgICAgICAgICAgIHBhcnRMaXN0ID0gbGV2ZWwucGFydExpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzRnJhZ21lbnRQYXJ0ID0gY3VycmVudFBhcnQgPiAwID8gcGFydExpc3RbcGFydExpc3QubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gY3VycmVudFBhcnQrKztcbiAgICAgICAgICAgICAgICB2YXIgcGFydEF0dHJzID0gbmV3IEF0dHJMaXN0KHZhbHVlMSwgbGV2ZWwpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gbmV3IFBhcnQocGFydEF0dHJzLCBmcmFnLCBiYXNlLCBpbmRleCwgcHJldmlvdXNGcmFnbWVudFBhcnQpO1xuICAgICAgICAgICAgICAgIHBhcnRMaXN0LnB1c2gocGFydCk7XG4gICAgICAgICAgICAgICAgZnJhZy5kdXJhdGlvbiArPSBwYXJ0LmR1cmF0aW9uO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdQUkVMT0FELUhJTlQnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIHByZWxvYWRIaW50QXR0cnMgPSBuZXcgQXR0ckxpc3QodmFsdWUxLCBsZXZlbCk7XG4gICAgICAgICAgICAgICAgbGV2ZWwucHJlbG9hZEhpbnQgPSBwcmVsb2FkSGludEF0dHJzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdSRU5ESVRJT04tUkVQT1JUJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciByZW5kaXRpb25SZXBvcnRBdHRycyA9IG5ldyBBdHRyTGlzdCh2YWx1ZTEsIGxldmVsKTtcbiAgICAgICAgICAgICAgICBsZXZlbC5yZW5kaXRpb25SZXBvcnRzID0gbGV2ZWwucmVuZGl0aW9uUmVwb3J0cyB8fCBbXTtcbiAgICAgICAgICAgICAgICBsZXZlbC5yZW5kaXRpb25SZXBvcnRzLnB1c2gocmVuZGl0aW9uUmVwb3J0QXR0cnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBsb2dnZXIud2FybihcImxpbmUgcGFyc2VkIGJ1dCBub3QgaGFuZGxlZDogXCIgKyByZXN1bHQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwcmV2RnJhZyAmJiAhcHJldkZyYWcucmVsdXJsKSB7XG4gICAgICAgIGZyYWdtZW50cy5wb3AoKTtcbiAgICAgICAgdG90YWxkdXJhdGlvbiAtPSBwcmV2RnJhZy5kdXJhdGlvbjtcbiAgICAgICAgaWYgKGxldmVsLnBhcnRMaXN0KSB7XG4gICAgICAgICAgbGV2ZWwuZnJhZ21lbnRIaW50ID0gcHJldkZyYWc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobGV2ZWwucGFydExpc3QpIHtcbiAgICAgICAgYXNzaWduUHJvZ3JhbURhdGVUaW1lKGZyYWcsIHByZXZGcmFnLCBwcm9ncmFtRGF0ZVRpbWVzKTtcbiAgICAgICAgZnJhZy5jYyA9IGRpc2NvbnRpbnVpdHlDb3VudGVyO1xuICAgICAgICBsZXZlbC5mcmFnbWVudEhpbnQgPSBmcmFnO1xuICAgICAgICBpZiAobGV2ZWxrZXlzKSB7XG4gICAgICAgICAgc2V0RnJhZ0xldmVsS2V5cyhmcmFnLCBsZXZlbGtleXMsIGxldmVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFsZXZlbC50YXJnZXRkdXJhdGlvbikge1xuICAgICAgICBsZXZlbC5wbGF5bGlzdFBhcnNpbmdFcnJvciA9IG5ldyBFcnJvcihcIiNFWFQtWC1UQVJHRVREVVJBVElPTiBpcyByZXF1aXJlZFwiKTtcbiAgICAgIH1cbiAgICAgIHZhciBmcmFnbWVudExlbmd0aCA9IGZyYWdtZW50cy5sZW5ndGg7XG4gICAgICB2YXIgZmlyc3RGcmFnbWVudCA9IGZyYWdtZW50c1swXTtcbiAgICAgIHZhciBsYXN0RnJhZ21lbnQgPSBmcmFnbWVudHNbZnJhZ21lbnRMZW5ndGggLSAxXTtcbiAgICAgIHRvdGFsZHVyYXRpb24gKz0gbGV2ZWwuc2tpcHBlZFNlZ21lbnRzICogbGV2ZWwudGFyZ2V0ZHVyYXRpb247XG4gICAgICBpZiAodG90YWxkdXJhdGlvbiA+IDAgJiYgZnJhZ21lbnRMZW5ndGggJiYgbGFzdEZyYWdtZW50KSB7XG4gICAgICAgIGxldmVsLmF2ZXJhZ2V0YXJnZXRkdXJhdGlvbiA9IHRvdGFsZHVyYXRpb24gLyBmcmFnbWVudExlbmd0aDtcbiAgICAgICAgdmFyIGxhc3RTbiA9IGxhc3RGcmFnbWVudC5zbjtcbiAgICAgICAgbGV2ZWwuZW5kU04gPSBsYXN0U24gIT09ICdpbml0U2VnbWVudCcgPyBsYXN0U24gOiAwO1xuICAgICAgICBpZiAoIWxldmVsLmxpdmUpIHtcbiAgICAgICAgICBsYXN0RnJhZ21lbnQuZW5kTGlzdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0RnJhZ21lbnQgJiYgbGV2ZWwuc3RhcnRDQyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbGV2ZWwuc3RhcnRDQyA9IGZpcnN0RnJhZ21lbnQuY2M7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJhY2tmaWxsIGFueSBtaXNzaW5nIFBEVCB2YWx1ZXNcbiAgICAgICAgICogXCJJZiB0aGUgZmlyc3QgRVhULVgtUFJPR1JBTS1EQVRFLVRJTUUgdGFnIGluIGEgUGxheWxpc3QgYXBwZWFycyBhZnRlclxuICAgICAgICAgKiBvbmUgb3IgbW9yZSBNZWRpYSBTZWdtZW50IFVSSXMsIHRoZSBjbGllbnQgU0hPVUxEIGV4dHJhcG9sYXRlXG4gICAgICAgICAqIGJhY2t3YXJkIGZyb20gdGhhdCB0YWcgKHVzaW5nIEVYVElORiBkdXJhdGlvbnMgYW5kL29yIG1lZGlhXG4gICAgICAgICAqIHRpbWVzdGFtcHMpIHRvIGFzc29jaWF0ZSBkYXRlcyB3aXRoIHRob3NlIHNlZ21lbnRzLlwiXG4gICAgICAgICAqIFdlIGhhdmUgYWxyZWFkeSBleHRyYXBvbGF0ZWQgZm9yd2FyZCwgYnV0IGFsbCBmcmFnbWVudHMgdXAgdG8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIFBEVCBkbyBub3QgaGF2ZSB0aGVpciBQRFRzXG4gICAgICAgICAqIGNvbXB1dGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGZpcnN0UGR0SW5kZXggPiAwKSB7XG4gICAgICAgICAgYmFja2ZpbGxQcm9ncmFtRGF0ZVRpbWVzKGZyYWdtZW50cywgZmlyc3RQZHRJbmRleCk7XG4gICAgICAgICAgaWYgKGZpcnN0RnJhZ21lbnQpIHtcbiAgICAgICAgICAgIHByb2dyYW1EYXRlVGltZXMudW5zaGlmdChmaXJzdEZyYWdtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsLmVuZFNOID0gMDtcbiAgICAgICAgbGV2ZWwuc3RhcnRDQyA9IDA7XG4gICAgICB9XG4gICAgICBpZiAobGV2ZWwuZnJhZ21lbnRIaW50KSB7XG4gICAgICAgIHRvdGFsZHVyYXRpb24gKz0gbGV2ZWwuZnJhZ21lbnRIaW50LmR1cmF0aW9uO1xuICAgICAgfVxuICAgICAgbGV2ZWwudG90YWxkdXJhdGlvbiA9IHRvdGFsZHVyYXRpb247XG4gICAgICBpZiAocHJvZ3JhbURhdGVUaW1lcy5sZW5ndGggJiYgbGV2ZWwuZGF0ZVJhbmdlVGFnQ291bnQgJiYgZmlyc3RGcmFnbWVudCkge1xuICAgICAgICBtYXBEYXRlUmFuZ2VzKHByb2dyYW1EYXRlVGltZXMsIGxldmVsKTtcbiAgICAgIH1cbiAgICAgIGxldmVsLmVuZENDID0gZGlzY29udGludWl0eUNvdW50ZXI7XG4gICAgICByZXR1cm4gbGV2ZWw7XG4gICAgfTtcbiAgICByZXR1cm4gTTNVOFBhcnNlcjtcbiAgfSgpO1xuICBmdW5jdGlvbiBtYXBEYXRlUmFuZ2VzKHByb2dyYW1EYXRlVGltZXMsIGRldGFpbHMpIHtcbiAgICAvLyBNYWtlIHN1cmUgRGF0ZVJhbmdlcyBhcmUgbWFwcGVkIHRvIGEgUHJvZ3JhbURhdGVUaW1lIHRhZyB0aGF0IGFwcGxpZXMgYSBkYXRlIHRvIGEgc2VnbWVudCB0aGF0IG92ZXJsYXBzIHdpdGggaXRzIHN0YXJ0IGRhdGVcbiAgICB2YXIgcHJvZ3JhbURhdGVUaW1lQ291bnQgPSBwcm9ncmFtRGF0ZVRpbWVzLmxlbmd0aDtcbiAgICBpZiAoIXByb2dyYW1EYXRlVGltZUNvdW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBsYXN0UHJvZ3JhbURhdGVUaW1lID0gcHJvZ3JhbURhdGVUaW1lc1twcm9ncmFtRGF0ZVRpbWVDb3VudCAtIDFdO1xuICAgIHZhciBwbGF5bGlzdEVuZCA9IGRldGFpbHMubGl2ZSA/IEluZmluaXR5IDogZGV0YWlscy50b3RhbGR1cmF0aW9uO1xuICAgIHZhciBkYXRlUmFuZ2VJZHMgPSBPYmplY3Qua2V5cyhkZXRhaWxzLmRhdGVSYW5nZXMpO1xuICAgIGZvciAodmFyIGkgPSBkYXRlUmFuZ2VJZHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICB2YXIgZGF0ZVJhbmdlID0gZGV0YWlscy5kYXRlUmFuZ2VzW2RhdGVSYW5nZUlkc1tpXV07XG4gICAgICB2YXIgc3RhcnREYXRlVGltZSA9IGRhdGVSYW5nZS5zdGFydERhdGUuZ2V0VGltZSgpO1xuICAgICAgZGF0ZVJhbmdlLnRhZ0FuY2hvciA9IGxhc3RQcm9ncmFtRGF0ZVRpbWUucmVmO1xuICAgICAgZm9yICh2YXIgaiA9IHByb2dyYW1EYXRlVGltZUNvdW50OyBqLS07KSB7XG4gICAgICAgIHZhciBmcmFnSW5kZXggPSBmaW5kRnJhZ21lbnRXaXRoU3RhcnREYXRlKGRldGFpbHMsIHN0YXJ0RGF0ZVRpbWUsIHByb2dyYW1EYXRlVGltZXMsIGosIHBsYXlsaXN0RW5kKTtcbiAgICAgICAgaWYgKGZyYWdJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICBkYXRlUmFuZ2UudGFnQW5jaG9yID0gZGV0YWlscy5mcmFnbWVudHNbZnJhZ0luZGV4XS5yZWY7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZmluZEZyYWdtZW50V2l0aFN0YXJ0RGF0ZShkZXRhaWxzLCBzdGFydERhdGVUaW1lLCBwcm9ncmFtRGF0ZVRpbWVzLCBpbmRleCwgZW5kVGltZSkge1xuICAgIHZhciBwZHRGcmFnbWVudCA9IHByb2dyYW1EYXRlVGltZXNbaW5kZXhdO1xuICAgIGlmIChwZHRGcmFnbWVudCkge1xuICAgICAgLy8gZmluZCBtYXRjaGluZyByYW5nZSBiZXR3ZWVuIFBEVCB0YWdzXG4gICAgICB2YXIgcGR0U3RhcnQgPSBwZHRGcmFnbWVudC5wcm9ncmFtRGF0ZVRpbWU7XG4gICAgICBpZiAoc3RhcnREYXRlVGltZSA+PSBwZHRTdGFydCB8fCBpbmRleCA9PT0gMCkge1xuICAgICAgICB2YXIgX3Byb2dyYW1EYXRlVGltZXM7XG4gICAgICAgIHZhciBkdXJhdGlvbkJldHdlZW5QZHQgPSAoKChfcHJvZ3JhbURhdGVUaW1lcyA9IHByb2dyYW1EYXRlVGltZXNbaW5kZXggKyAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9ncmFtRGF0ZVRpbWVzLnN0YXJ0KSB8fCBlbmRUaW1lKSAtIHBkdEZyYWdtZW50LnN0YXJ0O1xuICAgICAgICBpZiAoc3RhcnREYXRlVGltZSA8PSBwZHRTdGFydCArIGR1cmF0aW9uQmV0d2VlblBkdCAqIDEwMDApIHtcbiAgICAgICAgICAvLyBtYXAgdG8gZnJhZ21lbnQgd2l0aCBkYXRlLXRpbWUgcmFuZ2VcbiAgICAgICAgICB2YXIgc3RhcnRJbmRleCA9IHByb2dyYW1EYXRlVGltZXNbaW5kZXhdLnNuIC0gZGV0YWlscy5zdGFydFNOO1xuICAgICAgICAgIHZhciBmcmFnbWVudHMgPSBkZXRhaWxzLmZyYWdtZW50cztcbiAgICAgICAgICBpZiAoZnJhZ21lbnRzLmxlbmd0aCA+IHByb2dyYW1EYXRlVGltZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZW5kU2VnbWVudCA9IHByb2dyYW1EYXRlVGltZXNbaW5kZXggKyAxXSB8fCBmcmFnbWVudHNbZnJhZ21lbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgdmFyIGVuZEluZGV4ID0gZW5kU2VnbWVudC5zbiAtIGRldGFpbHMuc3RhcnRTTjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBlbmRJbmRleDsgaSA+IHN0YXJ0SW5kZXg7IGktLSkge1xuICAgICAgICAgICAgICB2YXIgZnJhZ1N0YXJ0RGF0ZVRpbWUgPSBmcmFnbWVudHNbaV0ucHJvZ3JhbURhdGVUaW1lO1xuICAgICAgICAgICAgICBpZiAoc3RhcnREYXRlVGltZSA+PSBmcmFnU3RhcnREYXRlVGltZSAmJiBzdGFydERhdGVUaW1lIDwgZnJhZ1N0YXJ0RGF0ZVRpbWUgKyBmcmFnbWVudHNbaV0uZHVyYXRpb24gKiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0SW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlS2V5KGtleVRhZ0F0dHJpYnV0ZXMsIGJhc2V1cmwsIHBhcnNlZCkge1xuICAgIHZhciBfa2V5QXR0cnMkTUVUSE9ELCBfa2V5QXR0cnMkS0VZRk9STUFUO1xuICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM4MjE2I3NlY3Rpb24tNC4zLjIuNFxuICAgIHZhciBrZXlBdHRycyA9IG5ldyBBdHRyTGlzdChrZXlUYWdBdHRyaWJ1dGVzLCBwYXJzZWQpO1xuICAgIHZhciBkZWNyeXB0bWV0aG9kID0gKF9rZXlBdHRycyRNRVRIT0QgPSBrZXlBdHRycy5NRVRIT0QpICE9IG51bGwgPyBfa2V5QXR0cnMkTUVUSE9EIDogJyc7XG4gICAgdmFyIGRlY3J5cHR1cmkgPSBrZXlBdHRycy5VUkk7XG4gICAgdmFyIGRlY3J5cHRpdiA9IGtleUF0dHJzLmhleGFkZWNpbWFsSW50ZWdlcignSVYnKTtcbiAgICB2YXIgZGVjcnlwdGtleWZvcm1hdHZlcnNpb25zID0ga2V5QXR0cnMuS0VZRk9STUFUVkVSU0lPTlM7XG4gICAgLy8gRnJvbSBSRkM6IFRoaXMgYXR0cmlidXRlIGlzIE9QVElPTkFMOyBpdHMgYWJzZW5jZSBpbmRpY2F0ZXMgYW4gaW1wbGljaXQgdmFsdWUgb2YgXCJpZGVudGl0eVwiLlxuICAgIHZhciBkZWNyeXB0a2V5Zm9ybWF0ID0gKF9rZXlBdHRycyRLRVlGT1JNQVQgPSBrZXlBdHRycy5LRVlGT1JNQVQpICE9IG51bGwgPyBfa2V5QXR0cnMkS0VZRk9STUFUIDogJ2lkZW50aXR5JztcbiAgICBpZiAoZGVjcnlwdHVyaSAmJiBrZXlBdHRycy5JViAmJiAhZGVjcnlwdGl2KSB7XG4gICAgICBsb2dnZXIuZXJyb3IoXCJJbnZhbGlkIElWOiBcIiArIGtleUF0dHJzLklWKTtcbiAgICB9XG4gICAgLy8gSWYgZGVjcnlwdHVyaSBpcyBhIFVSSSB3aXRoIGEgc2NoZW1lLCB0aGVuIGJhc2V1cmwgd2lsbCBiZSBpZ25vcmVkXG4gICAgLy8gTm8gdXJpIGlzIGFsbG93ZWQgd2hlbiBNRVRIT0QgaXMgTk9ORVxuICAgIHZhciByZXNvbHZlZFVyaSA9IGRlY3J5cHR1cmkgPyBNM1U4UGFyc2VyLnJlc29sdmUoZGVjcnlwdHVyaSwgYmFzZXVybCkgOiAnJztcbiAgICB2YXIga2V5Rm9ybWF0VmVyc2lvbnMgPSAoZGVjcnlwdGtleWZvcm1hdHZlcnNpb25zID8gZGVjcnlwdGtleWZvcm1hdHZlcnNpb25zIDogJzEnKS5zcGxpdCgnLycpLm1hcChOdW1iZXIpLmZpbHRlcihOdW1iZXIuaXNGaW5pdGUpO1xuICAgIHJldHVybiBuZXcgTGV2ZWxLZXkoZGVjcnlwdG1ldGhvZCwgcmVzb2x2ZWRVcmksIGRlY3J5cHRrZXlmb3JtYXQsIGtleUZvcm1hdFZlcnNpb25zLCBkZWNyeXB0aXYpO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlU3RhcnRUaW1lT2Zmc2V0KHN0YXJ0QXR0cmlidXRlcykge1xuICAgIHZhciBzdGFydEF0dHJzID0gbmV3IEF0dHJMaXN0KHN0YXJ0QXR0cmlidXRlcyk7XG4gICAgdmFyIHN0YXJ0VGltZU9mZnNldCA9IHN0YXJ0QXR0cnMuZGVjaW1hbEZsb2F0aW5nUG9pbnQoJ1RJTUUtT0ZGU0VUJyk7XG4gICAgaWYgKGlzRmluaXRlTnVtYmVyKHN0YXJ0VGltZU9mZnNldCkpIHtcbiAgICAgIHJldHVybiBzdGFydFRpbWVPZmZzZXQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIHNldENvZGVjcyhjb2RlY3NBdHRyaWJ1dGVWYWx1ZSwgbGV2ZWwpIHtcbiAgICB2YXIgY29kZWNzID0gKGNvZGVjc0F0dHJpYnV0ZVZhbHVlIHx8ICcnKS5zcGxpdCgvWyAsXSsvKS5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjO1xuICAgIH0pO1xuICAgIFsndmlkZW8nLCAnYXVkaW8nLCAndGV4dCddLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHZhciBmaWx0ZXJlZCA9IGNvZGVjcy5maWx0ZXIoZnVuY3Rpb24gKGNvZGVjKSB7XG4gICAgICAgIHJldHVybiBpc0NvZGVjVHlwZShjb2RlYywgdHlwZSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChmaWx0ZXJlZC5sZW5ndGgpIHtcbiAgICAgICAgLy8gQ29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgYWxsIGNvZGVjcyBmb3IgdHlwZVxuICAgICAgICBsZXZlbFt0eXBlICsgXCJDb2RlY1wiXSA9IGZpbHRlcmVkLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgICAgIHJldHVybiBjLnNwbGl0KCcvJylbMF07XG4gICAgICAgIH0pLmpvaW4oJywnKTtcbiAgICAgICAgLy8gUmVtb3ZlIGtub3duIGNvZGVjcyBzbyB0aGF0IG9ubHkgdW5rbm93bkNvZGVjcyBhcmUgbGVmdCBhZnRlciBpdGVyYXRpbmcgdGhyb3VnaCBlYWNoIHR5cGVcbiAgICAgICAgY29kZWNzID0gY29kZWNzLmZpbHRlcihmdW5jdGlvbiAoY29kZWMpIHtcbiAgICAgICAgICByZXR1cm4gZmlsdGVyZWQuaW5kZXhPZihjb2RlYykgPT09IC0xO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXZlbC51bmtub3duQ29kZWNzID0gY29kZWNzO1xuICB9XG4gIGZ1bmN0aW9uIGFzc2lnbkNvZGVjKG1lZGlhLCBncm91cEl0ZW0sIGNvZGVjUHJvcGVydHkpIHtcbiAgICB2YXIgY29kZWNWYWx1ZSA9IGdyb3VwSXRlbVtjb2RlY1Byb3BlcnR5XTtcbiAgICBpZiAoY29kZWNWYWx1ZSkge1xuICAgICAgbWVkaWFbY29kZWNQcm9wZXJ0eV0gPSBjb2RlY1ZhbHVlO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBiYWNrZmlsbFByb2dyYW1EYXRlVGltZXMoZnJhZ21lbnRzLCBmaXJzdFBkdEluZGV4KSB7XG4gICAgdmFyIGZyYWdQcmV2ID0gZnJhZ21lbnRzW2ZpcnN0UGR0SW5kZXhdO1xuICAgIGZvciAodmFyIGkgPSBmaXJzdFBkdEluZGV4OyBpLS07KSB7XG4gICAgICB2YXIgZnJhZyA9IGZyYWdtZW50c1tpXTtcbiAgICAgIC8vIEV4aXQgb24gZGVsdGEtcGxheWxpc3Qgc2tpcHBlZCBzZWdtZW50c1xuICAgICAgaWYgKCFmcmFnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZyYWcucHJvZ3JhbURhdGVUaW1lID0gZnJhZ1ByZXYucHJvZ3JhbURhdGVUaW1lIC0gZnJhZy5kdXJhdGlvbiAqIDEwMDA7XG4gICAgICBmcmFnUHJldiA9IGZyYWc7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGFzc2lnblByb2dyYW1EYXRlVGltZShmcmFnLCBwcmV2RnJhZywgcHJvZ3JhbURhdGVUaW1lcykge1xuICAgIGlmIChmcmFnLnJhd1Byb2dyYW1EYXRlVGltZSkge1xuICAgICAgcHJvZ3JhbURhdGVUaW1lcy5wdXNoKGZyYWcpO1xuICAgIH0gZWxzZSBpZiAocHJldkZyYWcgIT0gbnVsbCAmJiBwcmV2RnJhZy5wcm9ncmFtRGF0ZVRpbWUpIHtcbiAgICAgIGZyYWcucHJvZ3JhbURhdGVUaW1lID0gcHJldkZyYWcuZW5kUHJvZ3JhbURhdGVUaW1lO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzZXRJbml0U2VnbWVudChmcmFnLCBtYXBBdHRycywgaWQsIGxldmVsa2V5cykge1xuICAgIGZyYWcucmVsdXJsID0gbWFwQXR0cnMuVVJJO1xuICAgIGlmIChtYXBBdHRycy5CWVRFUkFOR0UpIHtcbiAgICAgIGZyYWcuc2V0Qnl0ZVJhbmdlKG1hcEF0dHJzLkJZVEVSQU5HRSk7XG4gICAgfVxuICAgIGZyYWcubGV2ZWwgPSBpZDtcbiAgICBmcmFnLnNuID0gJ2luaXRTZWdtZW50JztcbiAgICBpZiAobGV2ZWxrZXlzKSB7XG4gICAgICBmcmFnLmxldmVsa2V5cyA9IGxldmVsa2V5cztcbiAgICB9XG4gICAgZnJhZy5pbml0U2VnbWVudCA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gc2V0RnJhZ0xldmVsS2V5cyhmcmFnLCBsZXZlbGtleXMsIGxldmVsKSB7XG4gICAgZnJhZy5sZXZlbGtleXMgPSBsZXZlbGtleXM7XG4gICAgdmFyIGVuY3J5cHRlZEZyYWdtZW50cyA9IGxldmVsLmVuY3J5cHRlZEZyYWdtZW50cztcbiAgICBpZiAoKCFlbmNyeXB0ZWRGcmFnbWVudHMubGVuZ3RoIHx8IGVuY3J5cHRlZEZyYWdtZW50c1tlbmNyeXB0ZWRGcmFnbWVudHMubGVuZ3RoIC0gMV0ubGV2ZWxrZXlzICE9PSBsZXZlbGtleXMpICYmIE9iamVjdC5rZXlzKGxldmVsa2V5cykuc29tZShmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICByZXR1cm4gbGV2ZWxrZXlzW2Zvcm1hdF0uaXNDb21tb25FbmNyeXB0aW9uO1xuICAgIH0pKSB7XG4gICAgICBlbmNyeXB0ZWRGcmFnbWVudHMucHVzaChmcmFnKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYXNzaWduTXVsdGlwbGVNZWRpYVBsYXlsaXN0VGFnT2NjdXJhbmNlRXJyb3IobGV2ZWwsIHRhZywgcmVzdWx0KSB7XG4gICAgbGV2ZWwucGxheWxpc3RQYXJzaW5nRXJyb3IgPSBuZXcgRXJyb3IoXCIjRVhULVgtXCIgKyB0YWcgKyBcIiBtdXN0IG5vdCBhcHBlYXIgbW9yZSB0aGFuIG9uY2UgKFwiICsgcmVzdWx0WzBdICsgXCIpXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGFzc2lnbk11c3RBcHBlYXJCZWZvcmVTZWdtZW50c0Vycm9yKGxldmVsLCB0YWcsIHJlc3VsdCkge1xuICAgIGxldmVsLnBsYXlsaXN0UGFyc2luZ0Vycm9yID0gbmV3IEVycm9yKFwiI0VYVC1YLVwiICsgdGFnICsgXCIgbXVzdCBhcHBlYXIgYmVmb3JlIHRoZSBmaXJzdCBNZWRpYSBTZWdtZW50IChcIiArIHJlc3VsdFswXSArIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUZyb21Ub1BUUyhmcmFnRnJvbSwgZnJhZ1RvKSB7XG4gICAgdmFyIGZyYWdUb1BUUyA9IGZyYWdUby5zdGFydFBUUztcbiAgICAvLyBpZiB3ZSBrbm93IHN0YXJ0UFRTW3RvSWR4XVxuICAgIGlmIChpc0Zpbml0ZU51bWJlcihmcmFnVG9QVFMpKSB7XG4gICAgICAvLyB1cGRhdGUgZnJhZ21lbnQgZHVyYXRpb24uXG4gICAgICAvLyBpdCBoZWxwcyB0byBmaXggZHJpZnRzIGJldHdlZW4gcGxheWxpc3QgcmVwb3J0ZWQgZHVyYXRpb24gYW5kIGZyYWdtZW50IHJlYWwgZHVyYXRpb25cbiAgICAgIHZhciBkdXJhdGlvbiA9IDA7XG4gICAgICB2YXIgZnJhZztcbiAgICAgIGlmIChmcmFnVG8uc24gPiBmcmFnRnJvbS5zbikge1xuICAgICAgICBkdXJhdGlvbiA9IGZyYWdUb1BUUyAtIGZyYWdGcm9tLnN0YXJ0O1xuICAgICAgICBmcmFnID0gZnJhZ0Zyb207XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkdXJhdGlvbiA9IGZyYWdGcm9tLnN0YXJ0IC0gZnJhZ1RvUFRTO1xuICAgICAgICBmcmFnID0gZnJhZ1RvO1xuICAgICAgfVxuICAgICAgaWYgKGZyYWcuZHVyYXRpb24gIT09IGR1cmF0aW9uKSB7XG4gICAgICAgIGZyYWcuc2V0RHVyYXRpb24oZHVyYXRpb24pO1xuICAgICAgfVxuICAgICAgLy8gd2UgZG9udCBrbm93IHN0YXJ0UFRTW3RvSWR4XVxuICAgIH0gZWxzZSBpZiAoZnJhZ1RvLnNuID4gZnJhZ0Zyb20uc24pIHtcbiAgICAgIHZhciBjb250aWd1b3VzID0gZnJhZ0Zyb20uY2MgPT09IGZyYWdUby5jYztcbiAgICAgIC8vIFRPRE86IFdpdGggcGFydC1sb2FkaW5nIGVuZC9kdXJhdGlvbnMgd2UgbmVlZCB0byBjb25maXJtIHRoZSB3aG9sZSBmcmFnbWVudCBpcyBsb2FkZWQgYmVmb3JlIHVzaW5nIChvciBzZXR0aW5nKSBtaW5FbmRQVFNcbiAgICAgIGlmIChjb250aWd1b3VzICYmIGZyYWdGcm9tLm1pbkVuZFBUUykge1xuICAgICAgICBmcmFnVG8uc2V0U3RhcnQoZnJhZ0Zyb20uc3RhcnQgKyAoZnJhZ0Zyb20ubWluRW5kUFRTIC0gZnJhZ0Zyb20uc3RhcnQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyYWdUby5zZXRTdGFydChmcmFnRnJvbS5zdGFydCArIGZyYWdGcm9tLmR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZnJhZ1RvLnNldFN0YXJ0KE1hdGgubWF4KGZyYWdGcm9tLnN0YXJ0IC0gZnJhZ1RvLmR1cmF0aW9uLCAwKSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUZyYWdQVFNEVFMoZGV0YWlscywgZnJhZywgc3RhcnRQVFMsIGVuZFBUUywgc3RhcnREVFMsIGVuZERUUykge1xuICAgIHZhciBwYXJzZWRNZWRpYUR1cmF0aW9uID0gZW5kUFRTIC0gc3RhcnRQVFM7XG4gICAgaWYgKHBhcnNlZE1lZGlhRHVyYXRpb24gPD0gMCkge1xuICAgICAgbG9nZ2VyLndhcm4oJ0ZyYWdtZW50IHNob3VsZCBoYXZlIGEgcG9zaXRpdmUgZHVyYXRpb24nLCBmcmFnKTtcbiAgICAgIGVuZFBUUyA9IHN0YXJ0UFRTICsgZnJhZy5kdXJhdGlvbjtcbiAgICAgIGVuZERUUyA9IHN0YXJ0RFRTICsgZnJhZy5kdXJhdGlvbjtcbiAgICB9XG4gICAgdmFyIG1heFN0YXJ0UFRTID0gc3RhcnRQVFM7XG4gICAgdmFyIG1pbkVuZFBUUyA9IGVuZFBUUztcbiAgICB2YXIgZnJhZ1N0YXJ0UHRzID0gZnJhZy5zdGFydFBUUztcbiAgICB2YXIgZnJhZ0VuZFB0cyA9IGZyYWcuZW5kUFRTO1xuICAgIGlmIChpc0Zpbml0ZU51bWJlcihmcmFnU3RhcnRQdHMpKSB7XG4gICAgICAvLyBkZWx0YSBQVFMgYmV0d2VlbiBhdWRpbyBhbmQgdmlkZW9cbiAgICAgIHZhciBkZWx0YVBUUyA9IE1hdGguYWJzKGZyYWdTdGFydFB0cyAtIHN0YXJ0UFRTKTtcbiAgICAgIGlmICghaXNGaW5pdGVOdW1iZXIoZnJhZy5kZWx0YVBUUykpIHtcbiAgICAgICAgZnJhZy5kZWx0YVBUUyA9IGRlbHRhUFRTO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnJhZy5kZWx0YVBUUyA9IE1hdGgubWF4KGRlbHRhUFRTLCBmcmFnLmRlbHRhUFRTKTtcbiAgICAgIH1cbiAgICAgIG1heFN0YXJ0UFRTID0gTWF0aC5tYXgoc3RhcnRQVFMsIGZyYWdTdGFydFB0cyk7XG4gICAgICBzdGFydFBUUyA9IE1hdGgubWluKHN0YXJ0UFRTLCBmcmFnU3RhcnRQdHMpO1xuICAgICAgc3RhcnREVFMgPSBNYXRoLm1pbihzdGFydERUUywgZnJhZy5zdGFydERUUyk7XG4gICAgICBtaW5FbmRQVFMgPSBNYXRoLm1pbihlbmRQVFMsIGZyYWdFbmRQdHMpO1xuICAgICAgZW5kUFRTID0gTWF0aC5tYXgoZW5kUFRTLCBmcmFnRW5kUHRzKTtcbiAgICAgIGVuZERUUyA9IE1hdGgubWF4KGVuZERUUywgZnJhZy5lbmREVFMpO1xuICAgIH1cbiAgICB2YXIgZHJpZnQgPSBzdGFydFBUUyAtIGZyYWcuc3RhcnQ7XG4gICAgaWYgKGZyYWcuc3RhcnQgIT09IDApIHtcbiAgICAgIGZyYWcuc2V0U3RhcnQoc3RhcnRQVFMpO1xuICAgIH1cbiAgICBmcmFnLnNldER1cmF0aW9uKGVuZFBUUyAtIGZyYWcuc3RhcnQpO1xuICAgIGZyYWcuc3RhcnRQVFMgPSBzdGFydFBUUztcbiAgICBmcmFnLm1heFN0YXJ0UFRTID0gbWF4U3RhcnRQVFM7XG4gICAgZnJhZy5zdGFydERUUyA9IHN0YXJ0RFRTO1xuICAgIGZyYWcuZW5kUFRTID0gZW5kUFRTO1xuICAgIGZyYWcubWluRW5kUFRTID0gbWluRW5kUFRTO1xuICAgIGZyYWcuZW5kRFRTID0gZW5kRFRTO1xuICAgIHZhciBzbiA9IGZyYWcuc247XG4gICAgLy8gZXhpdCBpZiBzbiBvdXQgb2YgcmFuZ2VcbiAgICBpZiAoIWRldGFpbHMgfHwgc24gPCBkZXRhaWxzLnN0YXJ0U04gfHwgc24gPiBkZXRhaWxzLmVuZFNOKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIGk7XG4gICAgdmFyIGZyYWdJZHggPSBzbiAtIGRldGFpbHMuc3RhcnRTTjtcbiAgICB2YXIgZnJhZ21lbnRzID0gZGV0YWlscy5mcmFnbWVudHM7XG4gICAgLy8gdXBkYXRlIGZyYWcgcmVmZXJlbmNlIGluIGZyYWdtZW50cyBhcnJheVxuICAgIC8vIHJhdGlvbmFsZSBpcyB0aGF0IGZyYWdtZW50cyBhcnJheSBtaWdodCBub3QgY29udGFpbiB0aGlzIGZyYWcgb2JqZWN0LlxuICAgIC8vIHRoaXMgd2lsbCBoYXBwZW4gaWYgcGxheWxpc3QgaGFzIGJlZW4gcmVmcmVzaGVkIGJldHdlZW4gZnJhZyBsb2FkaW5nIGFuZCBjYWxsIHRvIHVwZGF0ZUZyYWdQVFNEVFMoKVxuICAgIC8vIGlmIHdlIGRvbid0IHVwZGF0ZSBmcmFnLCB3ZSB3b24ndCBiZSBhYmxlIHRvIHByb3BhZ2F0ZSBQVFMgaW5mbyBvbiB0aGUgcGxheWxpc3RcbiAgICAvLyByZXN1bHRpbmcgaW4gaW52YWxpZCBzbGlkaW5nIGNvbXB1dGF0aW9uXG4gICAgZnJhZ21lbnRzW2ZyYWdJZHhdID0gZnJhZztcbiAgICAvLyBhZGp1c3QgZnJhZ21lbnQgUFRTL2R1cmF0aW9uIGZyb20gc2VxbnVtLTEgdG8gZnJhZyAwXG4gICAgZm9yIChpID0gZnJhZ0lkeDsgaSA+IDA7IGktLSkge1xuICAgICAgdXBkYXRlRnJvbVRvUFRTKGZyYWdtZW50c1tpXSwgZnJhZ21lbnRzW2kgLSAxXSk7XG4gICAgfVxuXG4gICAgLy8gYWRqdXN0IGZyYWdtZW50IFBUUy9kdXJhdGlvbiBmcm9tIHNlcW51bSB0byBsYXN0IGZyYWdcbiAgICBmb3IgKGkgPSBmcmFnSWR4OyBpIDwgZnJhZ21lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgdXBkYXRlRnJvbVRvUFRTKGZyYWdtZW50c1tpXSwgZnJhZ21lbnRzW2kgKyAxXSk7XG4gICAgfVxuICAgIGlmIChkZXRhaWxzLmZyYWdtZW50SGludCkge1xuICAgICAgdXBkYXRlRnJvbVRvUFRTKGZyYWdtZW50c1tmcmFnbWVudHMubGVuZ3RoIC0gMV0sIGRldGFpbHMuZnJhZ21lbnRIaW50KTtcbiAgICB9XG4gICAgZGV0YWlscy5QVFNLbm93biA9IGRldGFpbHMuYWxpZ25lZFNsaWRpbmcgPSB0cnVlO1xuICAgIHJldHVybiBkcmlmdDtcbiAgfVxuICBmdW5jdGlvbiBtZXJnZURldGFpbHMob2xkRGV0YWlscywgbmV3RGV0YWlscykge1xuICAgIGlmIChvbGREZXRhaWxzID09PSBuZXdEZXRhaWxzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFRyYWNrIHRoZSBsYXN0IGluaXRTZWdtZW50IHByb2Nlc3NlZC4gSW5pdGlhbGl6ZSBpdCB0byB0aGUgbGFzdCBvbmUgb24gdGhlIHRpbWVsaW5lLlxuICAgIHZhciBjdXJyZW50SW5pdFNlZ21lbnQgPSBudWxsO1xuICAgIHZhciBvbGRGcmFnbWVudHMgPSBvbGREZXRhaWxzLmZyYWdtZW50cztcbiAgICBmb3IgKHZhciBpID0gb2xkRnJhZ21lbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgb2xkSW5pdCA9IG9sZEZyYWdtZW50c1tpXS5pbml0U2VnbWVudDtcbiAgICAgIGlmIChvbGRJbml0KSB7XG4gICAgICAgIGN1cnJlbnRJbml0U2VnbWVudCA9IG9sZEluaXQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkRGV0YWlscy5mcmFnbWVudEhpbnQpIHtcbiAgICAgIC8vIHByZXZlbnQgUFRTIGFuZCBkdXJhdGlvbiBmcm9tIGJlaW5nIGFkanVzdGVkIG9uIHRoZSBuZXh0IGhpbnRcbiAgICAgIGRlbGV0ZSBvbGREZXRhaWxzLmZyYWdtZW50SGludC5lbmRQVFM7XG4gICAgfVxuICAgIC8vIGNoZWNrIGlmIG9sZC9uZXcgcGxheWxpc3RzIGhhdmUgZnJhZ21lbnRzIGluIGNvbW1vblxuICAgIC8vIGxvb3AgdGhyb3VnaCBvdmVybGFwcGluZyBTTiBhbmQgdXBkYXRlIHN0YXJ0UFRTLCBjYywgYW5kIGR1cmF0aW9uIGlmIGFueSBmb3VuZFxuICAgIHZhciBQVFNGcmFnO1xuICAgIG1hcEZyYWdtZW50SW50ZXJzZWN0aW9uKG9sZERldGFpbHMsIG5ld0RldGFpbHMsIGZ1bmN0aW9uIChvbGRGcmFnLCBuZXdGcmFnLCBuZXdGcmFnSW5kZXgsIG5ld0ZyYWdtZW50cykge1xuICAgICAgaWYgKCghbmV3RGV0YWlscy5zdGFydENDIHx8IG5ld0RldGFpbHMuc2tpcHBlZFNlZ21lbnRzKSAmJiBuZXdGcmFnLmNjICE9PSBvbGRGcmFnLmNjKSB7XG4gICAgICAgIHZhciBjY09mZnNldCA9IG9sZEZyYWcuY2MgLSBuZXdGcmFnLmNjO1xuICAgICAgICBmb3IgKHZhciBfaSA9IG5ld0ZyYWdJbmRleDsgX2kgPCBuZXdGcmFnbWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgbmV3RnJhZ21lbnRzW19pXS5jYyArPSBjY09mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBuZXdEZXRhaWxzLmVuZENDID0gbmV3RnJhZ21lbnRzW25ld0ZyYWdtZW50cy5sZW5ndGggLSAxXS5jYztcbiAgICAgIH1cbiAgICAgIGlmIChpc0Zpbml0ZU51bWJlcihvbGRGcmFnLnN0YXJ0UFRTKSAmJiBpc0Zpbml0ZU51bWJlcihvbGRGcmFnLmVuZFBUUykpIHtcbiAgICAgICAgbmV3RnJhZy5zZXRTdGFydChuZXdGcmFnLnN0YXJ0UFRTID0gb2xkRnJhZy5zdGFydFBUUyk7XG4gICAgICAgIG5ld0ZyYWcuc3RhcnREVFMgPSBvbGRGcmFnLnN0YXJ0RFRTO1xuICAgICAgICBuZXdGcmFnLm1heFN0YXJ0UFRTID0gb2xkRnJhZy5tYXhTdGFydFBUUztcbiAgICAgICAgbmV3RnJhZy5lbmRQVFMgPSBvbGRGcmFnLmVuZFBUUztcbiAgICAgICAgbmV3RnJhZy5lbmREVFMgPSBvbGRGcmFnLmVuZERUUztcbiAgICAgICAgbmV3RnJhZy5taW5FbmRQVFMgPSBvbGRGcmFnLm1pbkVuZFBUUztcbiAgICAgICAgbmV3RnJhZy5zZXREdXJhdGlvbihvbGRGcmFnLmVuZFBUUyAtIG9sZEZyYWcuc3RhcnRQVFMpO1xuICAgICAgICBpZiAobmV3RnJhZy5kdXJhdGlvbikge1xuICAgICAgICAgIFBUU0ZyYWcgPSBuZXdGcmFnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUFRTIGlzIGtub3duIHdoZW4gYW55IHNlZ21lbnQgaGFzIHN0YXJ0UFRTIGFuZCBlbmRQVFNcbiAgICAgICAgbmV3RGV0YWlscy5QVFNLbm93biA9IG5ld0RldGFpbHMuYWxpZ25lZFNsaWRpbmcgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKG9sZEZyYWcuaGFzU3RyZWFtcykge1xuICAgICAgICBuZXdGcmFnLmVsZW1lbnRhcnlTdHJlYW1zID0gb2xkRnJhZy5lbGVtZW50YXJ5U3RyZWFtcztcbiAgICAgIH1cbiAgICAgIG5ld0ZyYWcubG9hZGVyID0gb2xkRnJhZy5sb2FkZXI7XG4gICAgICBpZiAob2xkRnJhZy5oYXNTdGF0cykge1xuICAgICAgICBuZXdGcmFnLnN0YXRzID0gb2xkRnJhZy5zdGF0cztcbiAgICAgIH1cbiAgICAgIGlmIChvbGRGcmFnLmluaXRTZWdtZW50KSB7XG4gICAgICAgIG5ld0ZyYWcuaW5pdFNlZ21lbnQgPSBvbGRGcmFnLmluaXRTZWdtZW50O1xuICAgICAgICBjdXJyZW50SW5pdFNlZ21lbnQgPSBvbGRGcmFnLmluaXRTZWdtZW50O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBuZXdGcmFnbWVudHMgPSBuZXdEZXRhaWxzLmZyYWdtZW50cztcbiAgICB2YXIgZnJhZ21lbnRzVG9DaGVjayA9IG5ld0RldGFpbHMuZnJhZ21lbnRIaW50ID8gbmV3RnJhZ21lbnRzLmNvbmNhdChuZXdEZXRhaWxzLmZyYWdtZW50SGludCkgOiBuZXdGcmFnbWVudHM7XG4gICAgaWYgKGN1cnJlbnRJbml0U2VnbWVudCkge1xuICAgICAgZnJhZ21lbnRzVG9DaGVjay5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgICAgIHZhciBfY3VycmVudEluaXRTZWdtZW50O1xuICAgICAgICBpZiAoZnJhZyAmJiAoIWZyYWcuaW5pdFNlZ21lbnQgfHwgZnJhZy5pbml0U2VnbWVudC5yZWx1cmwgPT09ICgoX2N1cnJlbnRJbml0U2VnbWVudCA9IGN1cnJlbnRJbml0U2VnbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jdXJyZW50SW5pdFNlZ21lbnQucmVsdXJsKSkpIHtcbiAgICAgICAgICBmcmFnLmluaXRTZWdtZW50ID0gY3VycmVudEluaXRTZWdtZW50O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKG5ld0RldGFpbHMuc2tpcHBlZFNlZ21lbnRzKSB7XG4gICAgICBuZXdEZXRhaWxzLmRlbHRhVXBkYXRlRmFpbGVkID0gbmV3RnJhZ21lbnRzLnNvbWUoZnVuY3Rpb24gKGZyYWcpIHtcbiAgICAgICAgcmV0dXJuICFmcmFnO1xuICAgICAgfSk7XG4gICAgICBpZiAobmV3RGV0YWlscy5kZWx0YVVwZGF0ZUZhaWxlZCkge1xuICAgICAgICBsb2dnZXIud2FybignW2xldmVsLWhlbHBlcl0gUHJldmlvdXMgcGxheWxpc3QgbWlzc2luZyBzZWdtZW50cyBza2lwcGVkIGluIGRlbHRhIHBsYXlsaXN0Jyk7XG4gICAgICAgIGZvciAodmFyIF9pMiA9IG5ld0RldGFpbHMuc2tpcHBlZFNlZ21lbnRzOyBfaTItLTspIHtcbiAgICAgICAgICBuZXdGcmFnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdEZXRhaWxzLnN0YXJ0U04gPSBuZXdGcmFnbWVudHNbMF0uc247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobmV3RGV0YWlscy5jYW5Ta2lwRGF0ZVJhbmdlcykge1xuICAgICAgICAgIG5ld0RldGFpbHMuZGF0ZVJhbmdlcyA9IG1lcmdlRGF0ZVJhbmdlcyhvbGREZXRhaWxzLmRhdGVSYW5nZXMsIG5ld0RldGFpbHMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcm9ncmFtRGF0ZVRpbWVzID0gb2xkRGV0YWlscy5mcmFnbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgICAgICAgcmV0dXJuIGZyYWcucmF3UHJvZ3JhbURhdGVUaW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9sZERldGFpbHMuaGFzUHJvZ3JhbURhdGVUaW1lICYmICFuZXdEZXRhaWxzLmhhc1Byb2dyYW1EYXRlVGltZSkge1xuICAgICAgICAgIGZvciAodmFyIF9pMyA9IDE7IF9pMyA8IGZyYWdtZW50c1RvQ2hlY2subGVuZ3RoOyBfaTMrKykge1xuICAgICAgICAgICAgaWYgKGZyYWdtZW50c1RvQ2hlY2tbX2kzXS5wcm9ncmFtRGF0ZVRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgYXNzaWduUHJvZ3JhbURhdGVUaW1lKGZyYWdtZW50c1RvQ2hlY2tbX2kzXSwgZnJhZ21lbnRzVG9DaGVja1tfaTMgLSAxXSwgcHJvZ3JhbURhdGVUaW1lcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1hcERhdGVSYW5nZXMocHJvZ3JhbURhdGVUaW1lcywgbmV3RGV0YWlscyk7XG4gICAgICB9XG4gICAgICBuZXdEZXRhaWxzLmVuZENDID0gbmV3RnJhZ21lbnRzW25ld0ZyYWdtZW50cy5sZW5ndGggLSAxXS5jYztcbiAgICB9XG4gICAgaWYgKCFuZXdEZXRhaWxzLnN0YXJ0Q0MpIHtcbiAgICAgIHZhciBfZnJhZ1ByaW9yVG9OZXdTdGFydCQ7XG4gICAgICB2YXIgZnJhZ1ByaW9yVG9OZXdTdGFydCA9IGdldEZyYWdtZW50V2l0aFNOKG9sZERldGFpbHMsIG5ld0RldGFpbHMuc3RhcnRTTiAtIDEpO1xuICAgICAgbmV3RGV0YWlscy5zdGFydENDID0gKF9mcmFnUHJpb3JUb05ld1N0YXJ0JCA9IGZyYWdQcmlvclRvTmV3U3RhcnQgPT0gbnVsbCA/IHZvaWQgMCA6IGZyYWdQcmlvclRvTmV3U3RhcnQuY2MpICE9IG51bGwgPyBfZnJhZ1ByaW9yVG9OZXdTdGFydCQgOiBuZXdGcmFnbWVudHNbMF0uY2M7XG4gICAgfVxuXG4gICAgLy8gTWVyZ2UgcGFydHNcbiAgICBtYXBQYXJ0SW50ZXJzZWN0aW9uKG9sZERldGFpbHMucGFydExpc3QsIG5ld0RldGFpbHMucGFydExpc3QsIGZ1bmN0aW9uIChvbGRQYXJ0LCBuZXdQYXJ0KSB7XG4gICAgICBuZXdQYXJ0LmVsZW1lbnRhcnlTdHJlYW1zID0gb2xkUGFydC5lbGVtZW50YXJ5U3RyZWFtcztcbiAgICAgIG5ld1BhcnQuc3RhdHMgPSBvbGRQYXJ0LnN0YXRzO1xuICAgIH0pO1xuXG4gICAgLy8gaWYgYXQgbGVhc3Qgb25lIGZyYWdtZW50IGNvbnRhaW5zIFBUUyBpbmZvLCByZWNvbXB1dGUgUFRTIGluZm9ybWF0aW9uIGZvciBhbGwgZnJhZ21lbnRzXG4gICAgaWYgKFBUU0ZyYWcpIHtcbiAgICAgIHVwZGF0ZUZyYWdQVFNEVFMobmV3RGV0YWlscywgUFRTRnJhZywgUFRTRnJhZy5zdGFydFBUUywgUFRTRnJhZy5lbmRQVFMsIFBUU0ZyYWcuc3RhcnREVFMsIFBUU0ZyYWcuZW5kRFRTKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW5zdXJlIHRoYXQgZGVsdGEgaXMgd2l0aGluIG9sZEZyYWdtZW50cyByYW5nZVxuICAgICAgLy8gYWxzbyBhZGp1c3Qgc2xpZGluZyBpbiBjYXNlIGRlbHRhIGlzIDAgKHdlIGNvdWxkIGhhdmUgb2xkPVs1MC02MF0gYW5kIG5ldz1vbGQ9WzUwLTYxXSlcbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBhbHNvIG5lZWQgdG8gYWRqdXN0IHN0YXJ0IG9mZnNldCBvZiBhbGwgZnJhZ21lbnRzXG4gICAgICBhZGp1c3RTbGlkaW5nKG9sZERldGFpbHMsIG5ld0RldGFpbHMpO1xuICAgIH1cbiAgICBpZiAobmV3RnJhZ21lbnRzLmxlbmd0aCkge1xuICAgICAgbmV3RGV0YWlscy50b3RhbGR1cmF0aW9uID0gbmV3RGV0YWlscy5lZGdlIC0gbmV3RnJhZ21lbnRzWzBdLnN0YXJ0O1xuICAgIH1cbiAgICBuZXdEZXRhaWxzLmRyaWZ0U3RhcnRUaW1lID0gb2xkRGV0YWlscy5kcmlmdFN0YXJ0VGltZTtcbiAgICBuZXdEZXRhaWxzLmRyaWZ0U3RhcnQgPSBvbGREZXRhaWxzLmRyaWZ0U3RhcnQ7XG4gICAgdmFyIGFkdmFuY2VkRGF0ZVRpbWUgPSBuZXdEZXRhaWxzLmFkdmFuY2VkRGF0ZVRpbWU7XG4gICAgaWYgKG5ld0RldGFpbHMuYWR2YW5jZWQgJiYgYWR2YW5jZWREYXRlVGltZSkge1xuICAgICAgdmFyIGVkZ2UgPSBuZXdEZXRhaWxzLmVkZ2U7XG4gICAgICBpZiAoIW5ld0RldGFpbHMuZHJpZnRTdGFydCkge1xuICAgICAgICBuZXdEZXRhaWxzLmRyaWZ0U3RhcnRUaW1lID0gYWR2YW5jZWREYXRlVGltZTtcbiAgICAgICAgbmV3RGV0YWlscy5kcmlmdFN0YXJ0ID0gZWRnZTtcbiAgICAgIH1cbiAgICAgIG5ld0RldGFpbHMuZHJpZnRFbmRUaW1lID0gYWR2YW5jZWREYXRlVGltZTtcbiAgICAgIG5ld0RldGFpbHMuZHJpZnRFbmQgPSBlZGdlO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdEZXRhaWxzLmRyaWZ0RW5kVGltZSA9IG9sZERldGFpbHMuZHJpZnRFbmRUaW1lO1xuICAgICAgbmV3RGV0YWlscy5kcmlmdEVuZCA9IG9sZERldGFpbHMuZHJpZnRFbmQ7XG4gICAgICBuZXdEZXRhaWxzLmFkdmFuY2VkRGF0ZVRpbWUgPSBvbGREZXRhaWxzLmFkdmFuY2VkRGF0ZVRpbWU7XG4gICAgfVxuICAgIGlmIChuZXdEZXRhaWxzLnJlcXVlc3RTY2hlZHVsZWQgPT09IC0xKSB7XG4gICAgICBuZXdEZXRhaWxzLnJlcXVlc3RTY2hlZHVsZWQgPSBvbGREZXRhaWxzLnJlcXVlc3RTY2hlZHVsZWQ7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRGF0ZVJhbmdlcyhvbGREYXRlUmFuZ2VzLCBuZXdEZXRhaWxzKSB7XG4gICAgdmFyIGRlbHRhRGF0ZVJhbmdlcyA9IG5ld0RldGFpbHMuZGF0ZVJhbmdlcyxcbiAgICAgIHJlY2VudGx5UmVtb3ZlZERhdGVyYW5nZXMgPSBuZXdEZXRhaWxzLnJlY2VudGx5UmVtb3ZlZERhdGVyYW5nZXM7XG4gICAgdmFyIGRhdGVSYW5nZXMgPSBfZXh0ZW5kcyh7fSwgb2xkRGF0ZVJhbmdlcyk7XG4gICAgaWYgKHJlY2VudGx5UmVtb3ZlZERhdGVyYW5nZXMpIHtcbiAgICAgIHJlY2VudGx5UmVtb3ZlZERhdGVyYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgZGVsZXRlIGRhdGVSYW5nZXNbaWRdO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBtZXJnZUlkcyA9IE9iamVjdC5rZXlzKGRhdGVSYW5nZXMpO1xuICAgIHZhciBtZXJnZUNvdW50ID0gbWVyZ2VJZHMubGVuZ3RoO1xuICAgIGlmIChtZXJnZUNvdW50KSB7XG4gICAgICBPYmplY3Qua2V5cyhkZWx0YURhdGVSYW5nZXMpLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBtZXJnZWREYXRlUmFuZ2UgPSBkYXRlUmFuZ2VzW2lkXTtcbiAgICAgICAgdmFyIGRhdGVSYW5nZSA9IG5ldyBEYXRlUmFuZ2UoZGVsdGFEYXRlUmFuZ2VzW2lkXS5hdHRyLCBtZXJnZWREYXRlUmFuZ2UpO1xuICAgICAgICBpZiAoZGF0ZVJhbmdlLmlzVmFsaWQpIHtcbiAgICAgICAgICBkYXRlUmFuZ2VzW2lkXSA9IGRhdGVSYW5nZTtcbiAgICAgICAgICBpZiAoIW1lcmdlZERhdGVSYW5nZSkge1xuICAgICAgICAgICAgZGF0ZVJhbmdlLnRhZ09yZGVyICs9IG1lcmdlQ291bnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ2dlci53YXJuKFwiSWdub3JpbmcgaW52YWxpZCBQbGF5bGlzdCBEZWx0YSBVcGRhdGUgREFURVJBTkdFIHRhZzogXFxcIlwiICsgc3RyaW5naWZ5KGRlbHRhRGF0ZVJhbmdlc1tpZF0uYXR0cikgKyBcIlxcXCJcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZVJhbmdlcztcbiAgfVxuICBmdW5jdGlvbiBtYXBQYXJ0SW50ZXJzZWN0aW9uKG9sZFBhcnRzLCBuZXdQYXJ0cywgaW50ZXJzZWN0aW9uRm4pIHtcbiAgICBpZiAob2xkUGFydHMgJiYgbmV3UGFydHMpIHtcbiAgICAgIHZhciBkZWx0YSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gb2xkUGFydHMubGVuZ3RoOyBpIDw9IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBfb2xkUGFydCA9IG9sZFBhcnRzW2ldO1xuICAgICAgICB2YXIgX25ld1BhcnQgPSBuZXdQYXJ0c1tpICsgZGVsdGFdO1xuICAgICAgICBpZiAoX29sZFBhcnQgJiYgX25ld1BhcnQgJiYgX29sZFBhcnQuaW5kZXggPT09IF9uZXdQYXJ0LmluZGV4ICYmIF9vbGRQYXJ0LmZyYWdtZW50LnNuID09PSBfbmV3UGFydC5mcmFnbWVudC5zbikge1xuICAgICAgICAgIGludGVyc2VjdGlvbkZuKF9vbGRQYXJ0LCBfbmV3UGFydCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsdGEtLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtYXBGcmFnbWVudEludGVyc2VjdGlvbihvbGREZXRhaWxzLCBuZXdEZXRhaWxzLCBpbnRlcnNlY3Rpb25Gbikge1xuICAgIHZhciBza2lwcGVkU2VnbWVudHMgPSBuZXdEZXRhaWxzLnNraXBwZWRTZWdtZW50cztcbiAgICB2YXIgc3RhcnQgPSBNYXRoLm1heChvbGREZXRhaWxzLnN0YXJ0U04sIG5ld0RldGFpbHMuc3RhcnRTTikgLSBuZXdEZXRhaWxzLnN0YXJ0U047XG4gICAgdmFyIGVuZCA9IChvbGREZXRhaWxzLmZyYWdtZW50SGludCA/IDEgOiAwKSArIChza2lwcGVkU2VnbWVudHMgPyBuZXdEZXRhaWxzLmVuZFNOIDogTWF0aC5taW4ob2xkRGV0YWlscy5lbmRTTiwgbmV3RGV0YWlscy5lbmRTTikpIC0gbmV3RGV0YWlscy5zdGFydFNOO1xuICAgIHZhciBkZWx0YSA9IG5ld0RldGFpbHMuc3RhcnRTTiAtIG9sZERldGFpbHMuc3RhcnRTTjtcbiAgICB2YXIgbmV3RnJhZ3MgPSBuZXdEZXRhaWxzLmZyYWdtZW50SGludCA/IG5ld0RldGFpbHMuZnJhZ21lbnRzLmNvbmNhdChuZXdEZXRhaWxzLmZyYWdtZW50SGludCkgOiBuZXdEZXRhaWxzLmZyYWdtZW50cztcbiAgICB2YXIgb2xkRnJhZ3MgPSBvbGREZXRhaWxzLmZyYWdtZW50SGludCA/IG9sZERldGFpbHMuZnJhZ21lbnRzLmNvbmNhdChvbGREZXRhaWxzLmZyYWdtZW50SGludCkgOiBvbGREZXRhaWxzLmZyYWdtZW50cztcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgIHZhciBfb2xkRnJhZyA9IG9sZEZyYWdzW2RlbHRhICsgaV07XG4gICAgICB2YXIgX25ld0ZyYWcgPSBuZXdGcmFnc1tpXTtcbiAgICAgIGlmIChza2lwcGVkU2VnbWVudHMgJiYgIV9uZXdGcmFnICYmIF9vbGRGcmFnKSB7XG4gICAgICAgIC8vIEZpbGwgaW4gc2tpcHBlZCBzZWdtZW50cyBpbiBkZWx0YSBwbGF5bGlzdFxuICAgICAgICBfbmV3RnJhZyA9IG5ld0RldGFpbHMuZnJhZ21lbnRzW2ldID0gX29sZEZyYWc7XG4gICAgICB9XG4gICAgICBpZiAoX29sZEZyYWcgJiYgX25ld0ZyYWcpIHtcbiAgICAgICAgaW50ZXJzZWN0aW9uRm4oX29sZEZyYWcsIF9uZXdGcmFnLCBpLCBuZXdGcmFncyk7XG4gICAgICAgIGlmIChfb2xkRnJhZy51cmwgJiYgX29sZEZyYWcudXJsICE9PSBfbmV3RnJhZy51cmwpIHtcbiAgICAgICAgICBuZXdEZXRhaWxzLnBsYXlsaXN0UGFyc2luZ0Vycm9yID0gZ2V0U2VxdWVuY2VFcnJvcihcIm1lZGlhIHNlcXVlbmNlIG1pc21hdGNoIFwiICsgX25ld0ZyYWcuc24gKyBcIjpcIiwgb2xkRGV0YWlscywgbmV3RGV0YWlscywgX29sZEZyYWcsIF9uZXdGcmFnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoX29sZEZyYWcuY2MgIT09IF9uZXdGcmFnLmNjKSB7XG4gICAgICAgICAgbmV3RGV0YWlscy5wbGF5bGlzdFBhcnNpbmdFcnJvciA9IGdldFNlcXVlbmNlRXJyb3IoXCJkaXNjb250aW51aXR5IHNlcXVlbmNlIG1pc21hdGNoIChcIiArIF9vbGRGcmFnLmNjICsgXCIhPVwiICsgX25ld0ZyYWcuY2MgKyBcIilcIiwgb2xkRGV0YWlscywgbmV3RGV0YWlscywgX29sZEZyYWcsIF9uZXdGcmFnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U2VxdWVuY2VFcnJvcihtZXNzYWdlLCBvbGREZXRhaWxzLCBuZXdEZXRhaWxzLCBvbGRGcmFnLCBuZXdGcmFnKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlICsgXCIgXCIgKyBuZXdGcmFnLnVybCArIFwiXFxuUGxheWxpc3Qgc3RhcnRpbmcgQFwiICsgb2xkRGV0YWlscy5zdGFydFNOICsgXCJcXG5cIiArIG9sZERldGFpbHMubTN1OCArIFwiXFxuXFxuUGxheWxpc3Qgc3RhcnRpbmcgQFwiICsgbmV3RGV0YWlscy5zdGFydFNOICsgXCJcXG5cIiArIG5ld0RldGFpbHMubTN1OCk7XG4gIH1cbiAgZnVuY3Rpb24gYWRqdXN0U2xpZGluZyhvbGREZXRhaWxzLCBuZXdEZXRhaWxzLCBtYXRjaGluZ1N0YWJsZVZhcmlhbnRPclJlbmRpdGlvbikge1xuICAgIGlmIChtYXRjaGluZ1N0YWJsZVZhcmlhbnRPclJlbmRpdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBtYXRjaGluZ1N0YWJsZVZhcmlhbnRPclJlbmRpdGlvbiA9IHRydWU7XG4gICAgfVxuICAgIHZhciBkZWx0YSA9IG5ld0RldGFpbHMuc3RhcnRTTiArIG5ld0RldGFpbHMuc2tpcHBlZFNlZ21lbnRzIC0gb2xkRGV0YWlscy5zdGFydFNOO1xuICAgIHZhciBvbGRGcmFnbWVudHMgPSBvbGREZXRhaWxzLmZyYWdtZW50cztcbiAgICB2YXIgYWR2YW5jZWRPclN0YWJsZSA9IGRlbHRhID49IDA7XG4gICAgdmFyIHNsaWRpbmcgPSAwO1xuICAgIGlmIChhZHZhbmNlZE9yU3RhYmxlICYmIGRlbHRhIDwgb2xkRnJhZ21lbnRzLmxlbmd0aCkge1xuICAgICAgc2xpZGluZyA9IG9sZEZyYWdtZW50c1tkZWx0YV0uc3RhcnQ7XG4gICAgfSBlbHNlIGlmIChhZHZhbmNlZE9yU3RhYmxlICYmIG5ld0RldGFpbHMuc3RhcnRTTiA9PT0gb2xkRGV0YWlscy5lbmRTTiArIDEpIHtcbiAgICAgIHNsaWRpbmcgPSBvbGREZXRhaWxzLmZyYWdtZW50RW5kO1xuICAgIH0gZWxzZSBpZiAoYWR2YW5jZWRPclN0YWJsZSAmJiBtYXRjaGluZ1N0YWJsZVZhcmlhbnRPclJlbmRpdGlvbikge1xuICAgICAgLy8gYWxpZ24gd2l0aCBleHBlY3RlZCBwb3NpdGlvbiAodXBkYXRlZCBwbGF5bGlzdCBzdGFydCBzZXF1ZW5jZSBpcyBwYXN0IGVuZCBzZXF1ZW5jZSBvZiBsYXN0IHVwZGF0ZSlcbiAgICAgIHNsaWRpbmcgPSBvbGREZXRhaWxzLmZyYWdtZW50U3RhcnQgKyBkZWx0YSAqIG5ld0RldGFpbHMubGV2ZWxUYXJnZXREdXJhdGlvbjtcbiAgICB9IGVsc2UgaWYgKCFuZXdEZXRhaWxzLnNraXBwZWRTZWdtZW50cyAmJiBuZXdEZXRhaWxzLmZyYWdtZW50U3RhcnQgPT09IDApIHtcbiAgICAgIC8vIGFsaWduIG5ldyBzdGFydCB3aXRoIG9sZCAocGxheWxpc3Qgc3dpdGNoIGhhcyBhIHNlcXVlbmNlIHdpdGggbm8gb3ZlcmxhcCBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkIGZvciBhbGlnbm1lbnQpXG4gICAgICBzbGlkaW5nID0gb2xkRGV0YWlscy5mcmFnbWVudFN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBuZXcgZGV0YWlscyBhbHJlYWR5IGhhcyBhIHNsaWRpbmcgb2Zmc2V0IG9yIGhhcyBza2lwcGVkIHNlZ21lbnRzXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFkZFNsaWRpbmcobmV3RGV0YWlscywgc2xpZGluZyk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkU2xpZGluZyhkZXRhaWxzLCBzbGlkaW5nKSB7XG4gICAgaWYgKHNsaWRpbmcpIHtcbiAgICAgIHZhciBmcmFnbWVudHMgPSBkZXRhaWxzLmZyYWdtZW50cztcbiAgICAgIGZvciAodmFyIGkgPSBkZXRhaWxzLnNraXBwZWRTZWdtZW50czsgaSA8IGZyYWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmcmFnbWVudHNbaV0uYWRkU3RhcnQoc2xpZGluZyk7XG4gICAgICB9XG4gICAgICBpZiAoZGV0YWlscy5mcmFnbWVudEhpbnQpIHtcbiAgICAgICAgZGV0YWlscy5mcmFnbWVudEhpbnQuYWRkU3RhcnQoc2xpZGluZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNvbXB1dGVSZWxvYWRJbnRlcnZhbChuZXdEZXRhaWxzLCBkaXN0YW5jZVRvTGl2ZUVkZ2VNcykge1xuICAgIGlmIChkaXN0YW5jZVRvTGl2ZUVkZ2VNcyA9PT0gdm9pZCAwKSB7XG4gICAgICBkaXN0YW5jZVRvTGl2ZUVkZ2VNcyA9IEluZmluaXR5O1xuICAgIH1cbiAgICB2YXIgcmVsb2FkSW50ZXJ2YWwgPSAxMDAwICogbmV3RGV0YWlscy50YXJnZXRkdXJhdGlvbjtcbiAgICBpZiAobmV3RGV0YWlscy51cGRhdGVkKSB7XG4gICAgICAvLyBVc2UgbGFzdCBzZWdtZW50IGR1cmF0aW9uIHdoZW4gc2hvcnRlciB0aGFuIHRhcmdldCBkdXJhdGlvbiBhbmQgbmVhciBsaXZlIGVkZ2VcbiAgICAgIHZhciBmcmFnbWVudHMgPSBuZXdEZXRhaWxzLmZyYWdtZW50cztcbiAgICAgIHZhciBsaXZlRWRnZU1heFRhcmdldER1cmF0aW9ucyA9IDQ7XG4gICAgICBpZiAoZnJhZ21lbnRzLmxlbmd0aCAmJiByZWxvYWRJbnRlcnZhbCAqIGxpdmVFZGdlTWF4VGFyZ2V0RHVyYXRpb25zID4gZGlzdGFuY2VUb0xpdmVFZGdlTXMpIHtcbiAgICAgICAgdmFyIGxhc3RTZWdtZW50RHVyYXRpb24gPSBmcmFnbWVudHNbZnJhZ21lbnRzLmxlbmd0aCAtIDFdLmR1cmF0aW9uICogMTAwMDtcbiAgICAgICAgaWYgKGxhc3RTZWdtZW50RHVyYXRpb24gPCByZWxvYWRJbnRlcnZhbCkge1xuICAgICAgICAgIHJlbG9hZEludGVydmFsID0gbGFzdFNlZ21lbnREdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc3RpbWF0ZSA9ICdtaXNzIGhhbGYgYXZlcmFnZSc7XG4gICAgICAvLyBmb2xsb3cgSExTIFNwZWMsIElmIHRoZSBjbGllbnQgcmVsb2FkcyBhIFBsYXlsaXN0IGZpbGUgYW5kIGZpbmRzIHRoYXQgaXQgaGFzIG5vdFxuICAgICAgLy8gY2hhbmdlZCB0aGVuIGl0IE1VU1Qgd2FpdCBmb3IgYSBwZXJpb2Qgb2Ygb25lLWhhbGYgdGhlIHRhcmdldFxuICAgICAgLy8gZHVyYXRpb24gYmVmb3JlIHJldHJ5aW5nLlxuICAgICAgcmVsb2FkSW50ZXJ2YWwgLz0gMjtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGgucm91bmQocmVsb2FkSW50ZXJ2YWwpO1xuICB9XG4gIGZ1bmN0aW9uIGdldEZyYWdtZW50V2l0aFNOKGRldGFpbHMsIHNuLCBmcmFnQ3VycmVudCkge1xuICAgIGlmICghZGV0YWlscykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBmcmFnbWVudCA9IGRldGFpbHMuZnJhZ21lbnRzW3NuIC0gZGV0YWlscy5zdGFydFNOXTtcbiAgICBpZiAoZnJhZ21lbnQpIHtcbiAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICB9XG4gICAgZnJhZ21lbnQgPSBkZXRhaWxzLmZyYWdtZW50SGludDtcbiAgICBpZiAoZnJhZ21lbnQgJiYgZnJhZ21lbnQuc24gPT09IHNuKSB7XG4gICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgfVxuICAgIGlmIChzbiA8IGRldGFpbHMuc3RhcnRTTiAmJiBmcmFnQ3VycmVudCAmJiBmcmFnQ3VycmVudC5zbiA9PT0gc24pIHtcbiAgICAgIHJldHVybiBmcmFnQ3VycmVudDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UGFydFdpdGgoZGV0YWlscywgc24sIHBhcnRJbmRleCkge1xuICAgIGlmICghZGV0YWlscykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmaW5kUGFydChkZXRhaWxzLnBhcnRMaXN0LCBzbiwgcGFydEluZGV4KTtcbiAgfVxuICBmdW5jdGlvbiBmaW5kUGFydChwYXJ0TGlzdCwgc24sIHBhcnRJbmRleCkge1xuICAgIGlmIChwYXJ0TGlzdCkge1xuICAgICAgZm9yICh2YXIgaSA9IHBhcnRMaXN0Lmxlbmd0aDsgaS0tOykge1xuICAgICAgICB2YXIgcGFydCA9IHBhcnRMaXN0W2ldO1xuICAgICAgICBpZiAocGFydC5pbmRleCA9PT0gcGFydEluZGV4ICYmIHBhcnQuZnJhZ21lbnQuc24gPT09IHNuKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gcmVhc3NpZ25GcmFnbWVudExldmVsSW5kZXhlcyhsZXZlbHMpIHtcbiAgICBsZXZlbHMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwsIGluZGV4KSB7XG4gICAgICB2YXIgX2xldmVsJGRldGFpbHM7XG4gICAgICAoX2xldmVsJGRldGFpbHMgPSBsZXZlbC5kZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX2xldmVsJGRldGFpbHMuZnJhZ21lbnRzLmZvckVhY2goZnVuY3Rpb24gKGZyYWdtZW50KSB7XG4gICAgICAgIGZyYWdtZW50LmxldmVsID0gaW5kZXg7XG4gICAgICAgIGlmIChmcmFnbWVudC5pbml0U2VnbWVudCkge1xuICAgICAgICAgIGZyYWdtZW50LmluaXRTZWdtZW50LmxldmVsID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZEZpcnN0RnJhZ1dpdGhDQyhmcmFnbWVudHMsIGNjKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGZyYWdtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIF9mcmFnbWVudHMkaTtcbiAgICAgIGlmICgoKF9mcmFnbWVudHMkaSA9IGZyYWdtZW50c1tpXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9mcmFnbWVudHMkaS5jYykgPT09IGNjKSB7XG4gICAgICAgIHJldHVybiBmcmFnbWVudHNbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIHNob3VsZEFsaWduT25EaXNjb250aW51aXRpZXMocmVmRGV0YWlscywgZGV0YWlscykge1xuICAgIGlmIChyZWZEZXRhaWxzKSB7XG4gICAgICBpZiAoZGV0YWlscy5zdGFydENDIDwgcmVmRGV0YWlscy5lbmRDQyAmJiBkZXRhaWxzLmVuZENDID4gcmVmRGV0YWlscy5zdGFydENDKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gYWRqdXN0RnJhZ21lbnRTdGFydChmcmFnLCBzbGlkaW5nKSB7XG4gICAgaWYgKGZyYWcpIHtcbiAgICAgIHZhciBzdGFydCA9IGZyYWcuc3RhcnQgKyBzbGlkaW5nO1xuICAgICAgZnJhZy5zdGFydCA9IGZyYWcuc3RhcnRQVFMgPSBzdGFydDtcbiAgICAgIGZyYWcuZW5kUFRTID0gc3RhcnQgKyBmcmFnLmR1cmF0aW9uO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBhZGp1c3RTbGlkaW5nU3RhcnQoc2xpZGluZywgZGV0YWlscykge1xuICAgIC8vIFVwZGF0ZSBzZWdtZW50c1xuICAgIHZhciBmcmFnbWVudHMgPSBkZXRhaWxzLmZyYWdtZW50cztcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZnJhZ21lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhZGp1c3RGcmFnbWVudFN0YXJ0KGZyYWdtZW50c1tpXSwgc2xpZGluZyk7XG4gICAgfVxuICAgIC8vIFVwZGF0ZSBMTC1ITFMgcGFydHMgYXQgdGhlIGVuZCBvZiB0aGUgcGxheWxpc3RcbiAgICBpZiAoZGV0YWlscy5mcmFnbWVudEhpbnQpIHtcbiAgICAgIGFkanVzdEZyYWdtZW50U3RhcnQoZGV0YWlscy5mcmFnbWVudEhpbnQsIHNsaWRpbmcpO1xuICAgIH1cbiAgICBkZXRhaWxzLmFsaWduZWRTbGlkaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2luZyB0aGUgcGFyYW1ldGVycyBvZiB0aGUgbGFzdCBsZXZlbCwgdGhpcyBmdW5jdGlvbiBjb21wdXRlcyBQVFMnIG9mIHRoZSBuZXcgZnJhZ21lbnRzIHNvIHRoYXQgdGhleSBmb3JtIGFcbiAgICogY29udGlndW91cyBzdHJlYW0gd2l0aCB0aGUgbGFzdCBmcmFnbWVudHMuXG4gICAqIFRoZSBQVFMgb2YgYSBmcmFnbWVudCBsZXRzIEhscy5qcyBrbm93IHdoZXJlIGl0IGZpdHMgaW50byBhIHN0cmVhbSAtIGJ5IGtub3dpbmcgZXZlcnkgUFRTLCB3ZSBrbm93IHdoaWNoIGZyYWdtZW50IHRvXG4gICAqIGRvd25sb2FkIGF0IGFueSBnaXZlbiB0aW1lLiBQVFMgaXMgbm9ybWFsbHkgY29tcHV0ZWQgd2hlbiB0aGUgZnJhZ21lbnQgaXMgZGVtdXhlZCwgc28gdGFraW5nIHRoaXMgc3RlcCBzYXZlcyB1cyB0aW1lXG4gICAqIGFuZCBhbiBleHRyYSBkb3dubG9hZC5cbiAgICogQHBhcmFtIGxhc3RMZXZlbFxuICAgKiBAcGFyYW0gZGV0YWlsc1xuICAgKi9cbiAgZnVuY3Rpb24gYWxpZ25TdHJlYW0oc3dpdGNoRGV0YWlscywgZGV0YWlscykge1xuICAgIGlmICghc3dpdGNoRGV0YWlscykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbGlnbkRpc2NvbnRpbnVpdGllcyhkZXRhaWxzLCBzd2l0Y2hEZXRhaWxzKTtcbiAgICBpZiAoIWRldGFpbHMuYWxpZ25lZFNsaWRpbmcgJiYgc3dpdGNoRGV0YWlscykge1xuICAgICAgLy8gSWYgdGhlIFBUUyB3YXNuJ3QgZmlndXJlZCBvdXQgdmlhIGRpc2NvbnRpbnVpdHkgc2VxdWVuY2UgdGhhdCBtZWFucyB0aGVyZSB3YXMgbm8gQ0MgaW5jcmVhc2Ugd2l0aGluIHRoZSBsZXZlbC5cbiAgICAgIC8vIEFsaWduaW5nIHZpYSBQcm9ncmFtIERhdGUgVGltZSBzaG91bGQgdGhlcmVmb3JlIGJlIHJlbGlhYmxlLCBzaW5jZSBQRFQgc2hvdWxkIGJlIHRoZSBzYW1lIHdpdGhpbiB0aGUgc2FtZVxuICAgICAgLy8gZGlzY29udGludWl0eSBzZXF1ZW5jZS5cbiAgICAgIGFsaWduTWVkaWFQbGF5bGlzdEJ5UERUKGRldGFpbHMsIHN3aXRjaERldGFpbHMpO1xuICAgIH1cbiAgICBpZiAoIWRldGFpbHMuYWxpZ25lZFNsaWRpbmcgJiYgc3dpdGNoRGV0YWlscyAmJiAhZGV0YWlscy5za2lwcGVkU2VnbWVudHMpIHtcbiAgICAgIC8vIFRyeSB0byBhbGlnbiBvbiBzbiBzbyB0aGF0IHdlIHBpY2sgYSBiZXR0ZXIgc3RhcnQgZnJhZ21lbnQuXG4gICAgICAvLyBEbyBub3QgcGVyZm9ybSB0aGlzIG9uIHBsYXlsaXN0cyB3aXRoIGRlbHRhIHVwZGF0ZXMgYXMgdGhpcyBpcyBvbmx5IHRvIGFsaWduIGxldmVscyBvbiBzd2l0Y2hcbiAgICAgIC8vIGFuZCBhZGp1c3RTbGlkaW5nIG9ubHkgYWRqdXN0cyBmcmFnbWVudHMgYWZ0ZXIgc2tpcHBlZFNlZ21lbnRzLlxuICAgICAgYWRqdXN0U2xpZGluZyhzd2l0Y2hEZXRhaWxzLCBkZXRhaWxzLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFqdXN0IHRoZSBzdGFydCBvZiBmcmFnbWVudHMgaW4gYGRldGFpbHNgIGJ5IHRoZSBkaWZmZXJlbmNlIGluIHRpbWUgYmV0d2VlbiBmcmFnbWVudHMgb2YgdGhlIGxhdGVzdFxuICAgKiBzaGFyZWQgZGlzY29udGludWl0eSBzZXF1ZW5jZSBjaGFuZ2UuXG4gICAqIEBwYXJhbSBsYXN0TGV2ZWwgLSBUaGUgZGV0YWlscyBvZiB0aGUgbGFzdCBsb2FkZWQgbGV2ZWxcbiAgICogQHBhcmFtIGRldGFpbHMgLSBUaGUgZGV0YWlscyBvZiB0aGUgbmV3IGxldmVsXG4gICAqL1xuICBmdW5jdGlvbiBhbGlnbkRpc2NvbnRpbnVpdGllcyhkZXRhaWxzLCByZWZEZXRhaWxzKSB7XG4gICAgaWYgKCFzaG91bGRBbGlnbk9uRGlzY29udGludWl0aWVzKHJlZkRldGFpbHMsIGRldGFpbHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0YXJnZXRDQyA9IE1hdGgubWluKHJlZkRldGFpbHMuZW5kQ0MsIGRldGFpbHMuZW5kQ0MpO1xuICAgIHZhciByZWZGcmFnID0gZmluZEZpcnN0RnJhZ1dpdGhDQyhyZWZEZXRhaWxzLmZyYWdtZW50cywgdGFyZ2V0Q0MpO1xuICAgIHZhciBmcmFnID0gZmluZEZpcnN0RnJhZ1dpdGhDQyhkZXRhaWxzLmZyYWdtZW50cywgdGFyZ2V0Q0MpO1xuICAgIGlmICghcmVmRnJhZyB8fCAhZnJhZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsb2dnZXIubG9nKFwiQWxpZ25pbmcgcGxheWxpc3QgYXQgc3RhcnQgb2YgZGljb250aW51aXR5IHNlcXVlbmNlIFwiICsgdGFyZ2V0Q0MpO1xuICAgIHZhciBkZWx0YSA9IHJlZkZyYWcuc3RhcnQgLSBmcmFnLnN0YXJ0O1xuICAgIGFkanVzdFNsaWRpbmdTdGFydChkZWx0YSwgZGV0YWlscyk7XG4gIH1cblxuICAvKipcbiAgICogRW5zdXJlcyBhcHByb3ByaWF0ZSB0aW1lLWFsaWdubWVudCBiZXR3ZWVuIHJlbmRpdGlvbnMgYmFzZWQgb24gUERULlxuICAgKiBUaGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhlIHRpbWVsaW5lcyByZXByZXNlbnRlZCBpbiBgcmVmRGV0YWlsc2AgYXJlIGFjY3VyYXRlLCBpbmNsdWRpbmcgdGhlIFBEVHNcbiAgICogZm9yIHRoZSBsYXN0IGRpc2NvbnRpbnVpdHkgc2VxdWVuY2UgbnVtYmVyIHNoYXJlZCBieSBib3RoIHBsYXlsaXN0cyB3aGVuIHByZXNlbnQsXG4gICAqIGFuZCB1c2VzIHRoZSBcIndhbGxjbG9ja1wiL1BEVCB0aW1lbGluZSBhcyBhIGNyb3NzLXJlZmVyZW5jZSB0byBgZGV0YWlsc2AsIGFkanVzdGluZyB0aGUgcHJlc2VudGF0aW9uXG4gICAqIHRpbWVzL3RpbWVsaW5lcyBvZiBgZGV0YWlsc2AgYWNjb3JkaW5nbHkuXG4gICAqIEdpdmVuIHRoZSBhc3luY2hyb25vdXMgbmF0dXJlIG9mIGZldGNoZXMgYW5kIGluaXRpYWwgbG9hZHMgb2YgbGl2ZSBgbWFpbmAgYW5kIGF1ZGlvL3N1YnRpdGxlIHRyYWNrcyxcbiAgICogdGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIGZ1bmN0aW9uIGlzIHRvIGVuc3VyZSB0aGUgXCJsb2NhbCB0aW1lbGluZXNcIiBvZiBhdWRpby9zdWJ0aXRsZSB0cmFja3NcbiAgICogYXJlIGFsaWduZWQgdG8gdGhlIG1haW4vdmlkZW8gdGltZWxpbmUsIHVzaW5nIFBEVCBhcyB0aGUgY3Jvc3MtcmVmZXJlbmNlL1wiYW5jaG9yXCIgdGhhdCBzaG91bGRcbiAgICogYmUgY29uc2lzdGVudCBhY3Jvc3MgcGxheWxpc3RzLCBwZXIgdGhlIEhMUyBzcGVjLlxuICAgKiBAcGFyYW0gZGV0YWlscyAtIFRoZSBkZXRhaWxzIG9mIHRoZSByZW5kaXRpb24geW91J2QgbGlrZSB0byB0aW1lLWFsaWduIChlLmcuIGFuIGF1ZGlvIHJlbmRpdGlvbikuXG4gICAqIEBwYXJhbSByZWZEZXRhaWxzIC0gVGhlIGRldGFpbHMgb2YgdGhlIHJlZmVyZW5jZSByZW5kaXRpb24gd2l0aCBzdGFydCBhbmQgUERUIHRpbWVzIGZvciBhbGlnbm1lbnQuXG4gICAqL1xuICBmdW5jdGlvbiBhbGlnbk1lZGlhUGxheWxpc3RCeVBEVChkZXRhaWxzLCByZWZEZXRhaWxzKSB7XG4gICAgaWYgKCFkZXRhaWxzLmhhc1Byb2dyYW1EYXRlVGltZSB8fCAhcmVmRGV0YWlscy5oYXNQcm9ncmFtRGF0ZVRpbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGZyYWdtZW50cyA9IGRldGFpbHMuZnJhZ21lbnRzO1xuICAgIHZhciByZWZGcmFnbWVudHMgPSByZWZEZXRhaWxzLmZyYWdtZW50cztcbiAgICBpZiAoIWZyYWdtZW50cy5sZW5ndGggfHwgIXJlZkZyYWdtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhdGUgYSBkZWx0YSB0byBhcHBseSB0byBhbGwgZnJhZ21lbnRzIGFjY29yZGluZyB0byB0aGUgZGVsdGEgaW4gUERUIHRpbWVzIGFuZCBzdGFydCB0aW1lc1xuICAgIC8vIG9mIGEgZnJhZ21lbnQgaW4gdGhlIHJlZmVyZW5jZSBkZXRhaWxzLCBhbmQgYSBmcmFnbWVudCBpbiB0aGUgdGFyZ2V0IGRldGFpbHMgb2YgdGhlIHNhbWUgZGlzY29udGludWl0eS5cbiAgICAvLyBJZiBhIGZyYWdtZW50IG9mIHRoZSBzYW1lIGRpc2NvbnRpbnVpdHkgd2FzIG5vdCBmb3VuZCB1c2UgdGhlIG1pZGRsZSBmcmFnbWVudCBvZiBib3RoLlxuICAgIHZhciByZWZGcmFnO1xuICAgIHZhciBmcmFnO1xuICAgIHZhciB0YXJnZXRDQyA9IE1hdGgubWluKHJlZkRldGFpbHMuZW5kQ0MsIGRldGFpbHMuZW5kQ0MpO1xuICAgIGlmIChyZWZEZXRhaWxzLnN0YXJ0Q0MgPCB0YXJnZXRDQyAmJiBkZXRhaWxzLnN0YXJ0Q0MgPCB0YXJnZXRDQykge1xuICAgICAgcmVmRnJhZyA9IGZpbmRGaXJzdEZyYWdXaXRoQ0MocmVmRnJhZ21lbnRzLCB0YXJnZXRDQyk7XG4gICAgICBmcmFnID0gZmluZEZpcnN0RnJhZ1dpdGhDQyhmcmFnbWVudHMsIHRhcmdldENDKTtcbiAgICB9XG4gICAgaWYgKCFyZWZGcmFnIHx8ICFmcmFnKSB7XG4gICAgICByZWZGcmFnID0gcmVmRnJhZ21lbnRzW01hdGguZmxvb3IocmVmRnJhZ21lbnRzLmxlbmd0aCAvIDIpXTtcbiAgICAgIGZyYWcgPSBmaW5kRmlyc3RGcmFnV2l0aENDKGZyYWdtZW50cywgcmVmRnJhZy5jYykgfHwgZnJhZ21lbnRzW01hdGguZmxvb3IoZnJhZ21lbnRzLmxlbmd0aCAvIDIpXTtcbiAgICB9XG4gICAgdmFyIHJlZlBEVCA9IHJlZkZyYWcucHJvZ3JhbURhdGVUaW1lO1xuICAgIHZhciB0YXJnZXRQRFQgPSBmcmFnLnByb2dyYW1EYXRlVGltZTtcbiAgICBpZiAoIXJlZlBEVCB8fCAhdGFyZ2V0UERUKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBkZWx0YSA9ICh0YXJnZXRQRFQgLSByZWZQRFQpIC8gMTAwMCAtIChmcmFnLnN0YXJ0IC0gcmVmRnJhZy5zdGFydCk7XG4gICAgYWRqdXN0U2xpZGluZ1N0YXJ0KGRlbHRhLCBkZXRhaWxzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAgVGltZVJhbmdlcyB0byBzdHJpbmcgaGVscGVyXG4gICAqL1xuXG4gIHZhciBUaW1lUmFuZ2VzID0ge1xuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZyhyKSB7XG4gICAgICB2YXIgbG9nID0gJyc7XG4gICAgICB2YXIgbGVuID0gci5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGxvZyArPSBcIltcIiArIHIuc3RhcnQoaSkudG9GaXhlZCgzKSArIFwiLVwiICsgci5lbmQoaSkudG9GaXhlZCgzKSArIFwiXVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvZztcbiAgICB9XG4gIH07XG5cbiAgdmFyIFN0YXRlID0ge1xuICAgIFNUT1BQRUQ6ICdTVE9QUEVEJyxcbiAgICBJRExFOiAnSURMRScsXG4gICAgS0VZX0xPQURJTkc6ICdLRVlfTE9BRElORycsXG4gICAgRlJBR19MT0FESU5HOiAnRlJBR19MT0FESU5HJyxcbiAgICBGUkFHX0xPQURJTkdfV0FJVElOR19SRVRSWTogJ0ZSQUdfTE9BRElOR19XQUlUSU5HX1JFVFJZJyxcbiAgICBXQUlUSU5HX1RSQUNLOiAnV0FJVElOR19UUkFDSycsXG4gICAgUEFSU0lORzogJ1BBUlNJTkcnLFxuICAgIFBBUlNFRDogJ1BBUlNFRCcsXG4gICAgRU5ERUQ6ICdFTkRFRCcsXG4gICAgRVJST1I6ICdFUlJPUicsXG4gICAgV0FJVElOR19JTklUX1BUUzogJ1dBSVRJTkdfSU5JVF9QVFMnLFxuICAgIFdBSVRJTkdfTEVWRUw6ICdXQUlUSU5HX0xFVkVMJ1xuICB9O1xuICB2YXIgQmFzZVN0cmVhbUNvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UYXNrTG9vcCkge1xuICAgIGZ1bmN0aW9uIEJhc2VTdHJlYW1Db250cm9sbGVyKGhscywgZnJhZ21lbnRUcmFja2VyLCBrZXlMb2FkZXIsIGxvZ1ByZWZpeCwgcGxheWxpc3RUeXBlKSB7XG4gICAgICB2YXIgX3RoaXM7XG4gICAgICBfdGhpcyA9IF9UYXNrTG9vcC5jYWxsKHRoaXMsIGxvZ1ByZWZpeCwgaGxzLmxvZ2dlcikgfHwgdGhpcztcbiAgICAgIF90aGlzLmhscyA9IHZvaWQgMDtcbiAgICAgIF90aGlzLmZyYWdQcmV2aW91cyA9IG51bGw7XG4gICAgICBfdGhpcy5mcmFnQ3VycmVudCA9IG51bGw7XG4gICAgICBfdGhpcy5mcmFnbWVudFRyYWNrZXIgPSB2b2lkIDA7XG4gICAgICBfdGhpcy50cmFuc211eGVyID0gbnVsbDtcbiAgICAgIF90aGlzLl9zdGF0ZSA9IFN0YXRlLlNUT1BQRUQ7XG4gICAgICBfdGhpcy5wbGF5bGlzdFR5cGUgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgICBfdGhpcy5tZWRpYUJ1ZmZlciA9IG51bGw7XG4gICAgICBfdGhpcy5jb25maWcgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5iaXRyYXRlVGVzdCA9IGZhbHNlO1xuICAgICAgX3RoaXMubGFzdEN1cnJlbnRUaW1lID0gMDtcbiAgICAgIF90aGlzLm5leHRMb2FkUG9zaXRpb24gPSAwO1xuICAgICAgX3RoaXMuc3RhcnRQb3NpdGlvbiA9IDA7XG4gICAgICBfdGhpcy5zdGFydFRpbWVPZmZzZXQgPSBudWxsO1xuICAgICAgX3RoaXMucmV0cnlEYXRlID0gMDtcbiAgICAgIF90aGlzLmxldmVscyA9IG51bGw7XG4gICAgICBfdGhpcy5mcmFnbWVudExvYWRlciA9IHZvaWQgMDtcbiAgICAgIF90aGlzLmtleUxvYWRlciA9IHZvaWQgMDtcbiAgICAgIF90aGlzLmxldmVsTGFzdExvYWRlZCA9IG51bGw7XG4gICAgICBfdGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLmRlY3J5cHRlciA9IHZvaWQgMDtcbiAgICAgIF90aGlzLmluaXRQVFMgPSBbXTtcbiAgICAgIF90aGlzLmJ1ZmZlcmluZyA9IHRydWU7XG4gICAgICBfdGhpcy5sb2FkaW5nUGFydHMgPSBmYWxzZTtcbiAgICAgIF90aGlzLmxvb3BTbiA9IHZvaWQgMDtcbiAgICAgIF90aGlzLm9uTWVkaWFTZWVraW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gX3RoaXMsXG4gICAgICAgICAgY29uZmlnID0gX3RoaXMyLmNvbmZpZyxcbiAgICAgICAgICBmcmFnQ3VycmVudCA9IF90aGlzMi5mcmFnQ3VycmVudCxcbiAgICAgICAgICBtZWRpYSA9IF90aGlzMi5tZWRpYSxcbiAgICAgICAgICBtZWRpYUJ1ZmZlciA9IF90aGlzMi5tZWRpYUJ1ZmZlcixcbiAgICAgICAgICBzdGF0ZSA9IF90aGlzMi5zdGF0ZTtcbiAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gbWVkaWEgPyBtZWRpYS5jdXJyZW50VGltZSA6IDA7XG4gICAgICAgIHZhciBidWZmZXJJbmZvID0gQnVmZmVySGVscGVyLmJ1ZmZlckluZm8obWVkaWFCdWZmZXIgPyBtZWRpYUJ1ZmZlciA6IG1lZGlhLCBjdXJyZW50VGltZSwgY29uZmlnLm1heEJ1ZmZlckhvbGUpO1xuICAgICAgICBfdGhpcy5sb2coXCJtZWRpYSBzZWVraW5nIHRvIFwiICsgKGlzRmluaXRlTnVtYmVyKGN1cnJlbnRUaW1lKSA/IGN1cnJlbnRUaW1lLnRvRml4ZWQoMykgOiBjdXJyZW50VGltZSkgKyBcIiwgc3RhdGU6IFwiICsgc3RhdGUpO1xuICAgICAgICBpZiAoX3RoaXMuc3RhdGUgPT09IFN0YXRlLkVOREVEKSB7XG4gICAgICAgICAgX3RoaXMucmVzZXRMb2FkaW5nU3RhdGUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChmcmFnQ3VycmVudCkge1xuICAgICAgICAgIC8vIFNlZWtpbmcgd2hpbGUgZnJhZyBsb2FkIGlzIGluIHByb2dyZXNzXG4gICAgICAgICAgdmFyIHRvbGVyYW5jZSA9IGNvbmZpZy5tYXhGcmFnTG9va1VwVG9sZXJhbmNlO1xuICAgICAgICAgIHZhciBmcmFnU3RhcnRPZmZzZXQgPSBmcmFnQ3VycmVudC5zdGFydCAtIHRvbGVyYW5jZTtcbiAgICAgICAgICB2YXIgZnJhZ0VuZE9mZnNldCA9IGZyYWdDdXJyZW50LnN0YXJ0ICsgZnJhZ0N1cnJlbnQuZHVyYXRpb24gKyB0b2xlcmFuY2U7XG4gICAgICAgICAgLy8gaWYgc2Vla2luZyBvdXQgb2YgYnVmZmVyZWQgcmFuZ2Ugb3IgaW50byBuZXcgb25lXG4gICAgICAgICAgaWYgKCFidWZmZXJJbmZvLmxlbiB8fCBmcmFnRW5kT2Zmc2V0IDwgYnVmZmVySW5mby5zdGFydCB8fCBmcmFnU3RhcnRPZmZzZXQgPiBidWZmZXJJbmZvLmVuZCkge1xuICAgICAgICAgICAgdmFyIHBhc3RGcmFnbWVudCA9IGN1cnJlbnRUaW1lID4gZnJhZ0VuZE9mZnNldDtcbiAgICAgICAgICAgIC8vIGlmIHRoZSBzZWVrIHBvc2l0aW9uIGlzIG91dHNpZGUgdGhlIGN1cnJlbnQgZnJhZ21lbnQgcmFuZ2VcbiAgICAgICAgICAgIGlmIChjdXJyZW50VGltZSA8IGZyYWdTdGFydE9mZnNldCB8fCBwYXN0RnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgaWYgKHBhc3RGcmFnbWVudCAmJiBmcmFnQ3VycmVudC5sb2FkZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2coJ3NlZWtpbmcgb3V0c2lkZSBvZiBidWZmZXIgd2hpbGUgZnJhZ21lbnQgbG9hZCBpbiBwcm9ncmVzcywgY2FuY2VsIGZyYWdtZW50IGxvYWQnKTtcbiAgICAgICAgICAgICAgICBmcmFnQ3VycmVudC5hYm9ydFJlcXVlc3RzKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVzZXRMb2FkaW5nU3RhdGUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBfdGhpcy5mcmFnUHJldmlvdXMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgZ2FwIGZyYWdtZW50c1xuICAgICAgICAgIF90aGlzLmZyYWdtZW50VHJhY2tlci5yZW1vdmVGcmFnbWVudHNJblJhbmdlKGN1cnJlbnRUaW1lLCBJbmZpbml0eSwgX3RoaXMucGxheWxpc3RUeXBlLCB0cnVlKTtcblxuICAgICAgICAgIC8vIERvbid0IHNldCBsYXN0Q3VycmVudFRpbWUgd2l0aCBiYWNrd2FyZCBzZWVrcyAoYWxsb3dzIGZvciBmcmFnIHNlbGVjdGlvbiB3aXRoIHN0cmljdCB0b2xlcmFuY2VzKVxuICAgICAgICAgIHZhciBsYXN0Q3VycmVudFRpbWUgPSBfdGhpcy5sYXN0Q3VycmVudFRpbWU7XG4gICAgICAgICAgaWYgKGN1cnJlbnRUaW1lID4gbGFzdEN1cnJlbnRUaW1lKSB7XG4gICAgICAgICAgICBfdGhpcy5sYXN0Q3VycmVudFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFfdGhpcy5sb2FkaW5nUGFydHMpIHtcbiAgICAgICAgICAgIHZhciBidWZmZXJFbmQgPSBNYXRoLm1heChidWZmZXJJbmZvLmVuZCwgY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgdmFyIHNob3VsZExvYWRQYXJ0cyA9IF90aGlzLnNob3VsZExvYWRQYXJ0cyhfdGhpcy5nZXRMZXZlbERldGFpbHMoKSwgYnVmZmVyRW5kKTtcbiAgICAgICAgICAgIGlmIChzaG91bGRMb2FkUGFydHMpIHtcbiAgICAgICAgICAgICAgX3RoaXMubG9nKFwiTEwtUGFydCBsb2FkaW5nIE9OIGFmdGVyIHNlZWtpbmcgdG8gXCIgKyBjdXJyZW50VGltZS50b0ZpeGVkKDIpICsgXCIgd2l0aCBidWZmZXIgQFwiICsgYnVmZmVyRW5kLnRvRml4ZWQoMikpO1xuICAgICAgICAgICAgICBfdGhpcy5sb2FkaW5nUGFydHMgPSBzaG91bGRMb2FkUGFydHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW4gY2FzZSBzZWVraW5nIG9jY3VycyBhbHRob3VnaCBubyBtZWRpYSBidWZmZXJlZCwgYWRqdXN0IHN0YXJ0UG9zaXRpb24gYW5kIG5leHRMb2FkUG9zaXRpb24gdG8gc2VlayB0YXJnZXRcbiAgICAgICAgaWYgKCFfdGhpcy5obHMuaGFzRW5vdWdoVG9TdGFydCAmJiAhYnVmZmVySW5mby5sZW4pIHtcbiAgICAgICAgICBfdGhpcy5sb2coXCJzZXR0aW5nIHN0YXJ0UG9zaXRpb24gdG8gXCIgKyBjdXJyZW50VGltZSArIFwiIGJlY2F1c2Ugb2Ygc2VlayBiZWZvcmUgc3RhcnRcIik7XG4gICAgICAgICAgX3RoaXMubmV4dExvYWRQb3NpdGlvbiA9IF90aGlzLnN0YXJ0UG9zaXRpb24gPSBjdXJyZW50VGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFzeW5jIHRpY2sgdG8gc3BlZWQgdXAgcHJvY2Vzc2luZ1xuICAgICAgICBfdGhpcy50aWNrSW1tZWRpYXRlKCk7XG4gICAgICB9O1xuICAgICAgX3RoaXMub25NZWRpYUVuZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyByZXNldCBzdGFydFBvc2l0aW9uIGFuZCBsYXN0Q3VycmVudFRpbWUgdG8gcmVzdGFydCBwbGF5YmFjayBAIHN0cmVhbSBiZWdpbm5pbmdcbiAgICAgICAgX3RoaXMubG9nKFwic2V0dGluZyBzdGFydFBvc2l0aW9uIHRvIDAgYmVjYXVzZSBtZWRpYSBlbmRlZFwiKTtcbiAgICAgICAgX3RoaXMuc3RhcnRQb3NpdGlvbiA9IF90aGlzLmxhc3RDdXJyZW50VGltZSA9IDA7XG4gICAgICB9O1xuICAgICAgX3RoaXMucGxheWxpc3RUeXBlID0gcGxheWxpc3RUeXBlO1xuICAgICAgX3RoaXMuaGxzID0gaGxzO1xuICAgICAgX3RoaXMuZnJhZ21lbnRMb2FkZXIgPSBuZXcgRnJhZ21lbnRMb2FkZXIoaGxzLmNvbmZpZyk7XG4gICAgICBfdGhpcy5rZXlMb2FkZXIgPSBrZXlMb2FkZXI7XG4gICAgICBfdGhpcy5mcmFnbWVudFRyYWNrZXIgPSBmcmFnbWVudFRyYWNrZXI7XG4gICAgICBfdGhpcy5jb25maWcgPSBobHMuY29uZmlnO1xuICAgICAgX3RoaXMuZGVjcnlwdGVyID0gbmV3IERlY3J5cHRlcihobHMuY29uZmlnKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgX2luaGVyaXRzTG9vc2UoQmFzZVN0cmVhbUNvbnRyb2xsZXIsIF9UYXNrTG9vcCk7XG4gICAgdmFyIF9wcm90byA9IEJhc2VTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGhscy5vbihFdmVudHMuTUVESUFfQVRUQUNIRUQsIHRoaXMub25NZWRpYUF0dGFjaGVkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUVESUFfREVUQUNISU5HLCB0aGlzLm9uTWVkaWFEZXRhY2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUFOSUZFU1RfTE9BREVELCB0aGlzLm9uTWFuaWZlc3RMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5FUlJPUiwgdGhpcy5vbkVycm9yLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by51bnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1FRElBX0FUVEFDSEVELCB0aGlzLm9uTWVkaWFBdHRhY2hlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NRURJQV9ERVRBQ0hJTkcsIHRoaXMub25NZWRpYURldGFjaGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1BTklGRVNUX0xPQURFRCwgdGhpcy5vbk1hbmlmZXN0TG9hZGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkVSUk9SLCB0aGlzLm9uRXJyb3IsIHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLmRvVGljayA9IGZ1bmN0aW9uIGRvVGljaygpIHtcbiAgICAgIHRoaXMub25UaWNrRW5kKCk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25UaWNrRW5kID0gZnVuY3Rpb24gb25UaWNrRW5kKCkge307XG4gICAgX3Byb3RvLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uIHN0YXJ0TG9hZChzdGFydFBvc2l0aW9uKSB7fTtcbiAgICBfcHJvdG8uc3RvcExvYWQgPSBmdW5jdGlvbiBzdG9wTG9hZCgpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5TVE9QUEVEKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZnJhZ21lbnRMb2FkZXIuYWJvcnQoKTtcbiAgICAgIHRoaXMua2V5TG9hZGVyLmFib3J0KHRoaXMucGxheWxpc3RUeXBlKTtcbiAgICAgIHZhciBmcmFnID0gdGhpcy5mcmFnQ3VycmVudDtcbiAgICAgIGlmIChmcmFnICE9IG51bGwgJiYgZnJhZy5sb2FkZXIpIHtcbiAgICAgICAgZnJhZy5hYm9ydFJlcXVlc3RzKCk7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLnJlbW92ZUZyYWdtZW50KGZyYWcpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXNldFRyYW5zbXV4ZXIoKTtcbiAgICAgIHRoaXMuZnJhZ0N1cnJlbnQgPSBudWxsO1xuICAgICAgdGhpcy5mcmFnUHJldmlvdXMgPSBudWxsO1xuICAgICAgdGhpcy5jbGVhckludGVydmFsKCk7XG4gICAgICB0aGlzLmNsZWFyTmV4dFRpY2soKTtcbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TVE9QUEVEO1xuICAgIH07XG4gICAgX3Byb3RvLnBhdXNlQnVmZmVyaW5nID0gZnVuY3Rpb24gcGF1c2VCdWZmZXJpbmcoKSB7XG4gICAgICB0aGlzLmJ1ZmZlcmluZyA9IGZhbHNlO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc3VtZUJ1ZmZlcmluZyA9IGZ1bmN0aW9uIHJlc3VtZUJ1ZmZlcmluZygpIHtcbiAgICAgIHRoaXMuYnVmZmVyaW5nID0gdHJ1ZTtcbiAgICB9O1xuICAgIF9wcm90by5fc3RyZWFtRW5kZWQgPSBmdW5jdGlvbiBfc3RyZWFtRW5kZWQoYnVmZmVySW5mbywgbGV2ZWxEZXRhaWxzKSB7XG4gICAgICAvLyBTdHJlYW0gaXMgbmV2ZXIgXCJlbmRlZFwiIHdoZW4gcGxheWxpc3QgaXMgbGl2ZSBvciBtZWRpYSBpcyBkZXRhY2hlZFxuICAgICAgaWYgKGxldmVsRGV0YWlscy5saXZlIHx8ICF0aGlzLm1lZGlhKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIFN0cmVhbSBpcyBub3QgXCJlbmRlZFwiIHdoZW4gbm90aGluZyBpcyBidWZmZXJlZCBwYXN0IHRoZSBzdGFydFxuICAgICAgdmFyIGJ1ZmZlckVuZCA9IGJ1ZmZlckluZm8uZW5kIHx8IDA7XG4gICAgICB2YXIgdGltZWxpbmVTdGFydCA9IHRoaXMuY29uZmlnLnRpbWVsaW5lT2Zmc2V0IHx8IDA7XG4gICAgICBpZiAoYnVmZmVyRW5kIDw9IHRpbWVsaW5lU3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gU3RyZWFtIGlzIG5vdCBcImVuZGVkXCIgd2hlbiB0aGVyZSBpcyBhIHNlY29uZCBidWZmZXJlZCByYW5nZSBzdGFydGluZyBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgcGxheWxpc3RcbiAgICAgIHZhciBidWZmZXJlZFJhbmdlcyA9IGJ1ZmZlckluZm8uYnVmZmVyZWQ7XG4gICAgICBpZiAodGhpcy5jb25maWcubWF4QnVmZmVySG9sZSAmJiBidWZmZXJlZFJhbmdlcyAmJiBidWZmZXJlZFJhbmdlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIG1ha2Ugc3VyZSBidWZmZXJJbmZvIGFjY291bnRzIGZvciBhbnkgZ2Fwc1xuICAgICAgICBidWZmZXJJbmZvID0gQnVmZmVySGVscGVyLmJ1ZmZlcmVkSW5mbyhidWZmZXJlZFJhbmdlcywgYnVmZmVySW5mby5zdGFydCwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbmV4dFN0YXJ0ID0gYnVmZmVySW5mby5uZXh0U3RhcnQ7XG4gICAgICB2YXIgaGFzU2Vjb25kQnVmZmVyZWRSYW5nZSA9IG5leHRTdGFydCAmJiBuZXh0U3RhcnQgPiB0aW1lbGluZVN0YXJ0ICYmIG5leHRTdGFydCA8IGxldmVsRGV0YWlscy5lZGdlO1xuICAgICAgaWYgKGhhc1NlY29uZEJ1ZmZlcmVkUmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gUGxheWhlYWQgaXMgaW4gdW5idWZmZXJlZCByZWdpb24uIE1hcmtpbmcgRW9TIG5vdyBjb3VsZCByZXN1bHQgaW4gU2FmYXJpIGZhaWxpbmcgdG8gZGlzcGF0Y2ggXCJlbmRlZFwiIGV2ZW50IGZvbGxvd2luZyBzZWVrIG9uIHN0YXJ0LlxuICAgICAgaWYgKHRoaXMubWVkaWEuY3VycmVudFRpbWUgPCBidWZmZXJJbmZvLnN0YXJ0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXJ0TGlzdCA9IGxldmVsRGV0YWlscy5wYXJ0TGlzdDtcbiAgICAgIC8vIFNpbmNlIHRoZSBsYXN0IHBhcnQgaXNuJ3QgZ3VhcmFudGVlZCB0byBjb3JyZXNwb25kIHRvIHRoZSBsYXN0IHBsYXlsaXN0IHNlZ21lbnQgZm9yIExvdy1MYXRlbmN5IEhMUyxcbiAgICAgIC8vIGNoZWNrIGluc3RlYWQgaWYgdGhlIGxhc3QgcGFydCBpcyBidWZmZXJlZC5cbiAgICAgIGlmIChwYXJ0TGlzdCAhPSBudWxsICYmIHBhcnRMaXN0Lmxlbmd0aCkge1xuICAgICAgICB2YXIgbGFzdFBhcnQgPSBwYXJ0TGlzdFtwYXJ0TGlzdC5sZW5ndGggLSAxXTtcblxuICAgICAgICAvLyBDaGVja2luZyB0aGUgbWlkcG9pbnQgb2YgdGhlIHBhcnQgZm9yIHBvdGVudGlhbCBtYXJnaW4gb2YgZXJyb3IgYW5kIHJlbGF0ZWQgaXNzdWVzLlxuICAgICAgICAvLyBOT1RFOiBUZWNobmljYWxseSBJIGJlbGlldmUgcGFydHMgY291bGQgeWllbGQgY29udGVudCB0aGF0IGlzIDwgdGhlIGNvbXB1dGVkIGR1cmF0aW9uIChpbmNsdWRpbmcgcG90ZW50aWFsIGEgZHVyYXRpb24gb2YgMClcbiAgICAgICAgLy8gYW5kIHN0aWxsIGJlIHNwZWMtY29tcGxpYW50LCBzbyB0aGVyZSBtYXkgc3RpbGwgYmUgZWRnZSBjYXNlcyBoZXJlLiBMaWtld2lzZSwgdGhlcmUgY291bGQgYmUgaXNzdWVzIGluIGVuZCBvZiBzdHJlYW1cbiAgICAgICAgLy8gcGFydCBtaXNtYXRjaGVzIGZvciBpbmRlcGVuZGVudCBhdWRpbyBhbmQgdmlkZW8gcGxheWxpc3RzL3NlZ21lbnRzLlxuICAgICAgICB2YXIgbGFzdFBhcnRCdWZmZXJlZCA9IEJ1ZmZlckhlbHBlci5pc0J1ZmZlcmVkKHRoaXMubWVkaWEsIGxhc3RQYXJ0LnN0YXJ0ICsgbGFzdFBhcnQuZHVyYXRpb24gLyAyKTtcbiAgICAgICAgcmV0dXJuIGxhc3RQYXJ0QnVmZmVyZWQ7XG4gICAgICB9XG4gICAgICB2YXIgcGxheWxpc3RUeXBlID0gbGV2ZWxEZXRhaWxzLmZyYWdtZW50c1tsZXZlbERldGFpbHMuZnJhZ21lbnRzLmxlbmd0aCAtIDFdLnR5cGU7XG4gICAgICByZXR1cm4gdGhpcy5mcmFnbWVudFRyYWNrZXIuaXNFbmRMaXN0QXBwZW5kZWQocGxheWxpc3RUeXBlKTtcbiAgICB9O1xuICAgIF9wcm90by5nZXRMZXZlbERldGFpbHMgPSBmdW5jdGlvbiBnZXRMZXZlbERldGFpbHMoKSB7XG4gICAgICBpZiAodGhpcy5sZXZlbHMgJiYgdGhpcy5sZXZlbExhc3RMb2FkZWQgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIF90aGlzJGxldmVsTGFzdExvYWRlZDtcbiAgICAgICAgcmV0dXJuIChfdGhpcyRsZXZlbExhc3RMb2FkZWQgPSB0aGlzLmxldmVsTGFzdExvYWRlZCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGxldmVsTGFzdExvYWRlZC5kZXRhaWxzO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uTWVkaWFBdHRhY2hlZCA9IGZ1bmN0aW9uIG9uTWVkaWFBdHRhY2hlZChldmVudCwgZGF0YSkge1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYSA9IHRoaXMubWVkaWFCdWZmZXIgPSBkYXRhLm1lZGlhO1xuICAgICAgbWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Vla2luZycsIHRoaXMub25NZWRpYVNlZWtpbmcpO1xuICAgICAgbWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5kZWQnLCB0aGlzLm9uTWVkaWFFbmRlZCk7XG4gICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdzZWVraW5nJywgdGhpcy5vbk1lZGlhU2Vla2luZyk7XG4gICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIHRoaXMub25NZWRpYUVuZGVkKTtcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICAgIGlmICh0aGlzLmxldmVscyAmJiBjb25maWcuYXV0b1N0YXJ0TG9hZCAmJiB0aGlzLnN0YXRlID09PSBTdGF0ZS5TVE9QUEVEKSB7XG4gICAgICAgIHRoaXMuc3RhcnRMb2FkKGNvbmZpZy5zdGFydFBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbk1lZGlhRGV0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYURldGFjaGluZyhldmVudCwgZGF0YSkge1xuICAgICAgdmFyIHRyYW5zZmVycmluZ01lZGlhID0gISFkYXRhLnRyYW5zZmVyTWVkaWE7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgICAgaWYgKG1lZGlhID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYS5lbmRlZCkge1xuICAgICAgICB0aGlzLmxvZygnTVNFIGRldGFjaGluZyBhbmQgdmlkZW8gZW5kZWQsIHJlc2V0IHN0YXJ0UG9zaXRpb24nKTtcbiAgICAgICAgdGhpcy5zdGFydFBvc2l0aW9uID0gdGhpcy5sYXN0Q3VycmVudFRpbWUgPSAwO1xuICAgICAgfVxuXG4gICAgICAvLyByZW1vdmUgdmlkZW8gbGlzdGVuZXJzXG4gICAgICBtZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWVraW5nJywgdGhpcy5vbk1lZGlhU2Vla2luZyk7XG4gICAgICBtZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdlbmRlZCcsIHRoaXMub25NZWRpYUVuZGVkKTtcbiAgICAgIGlmICh0aGlzLmtleUxvYWRlciAmJiAhdHJhbnNmZXJyaW5nTWVkaWEpIHtcbiAgICAgICAgdGhpcy5rZXlMb2FkZXIuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm1lZGlhID0gdGhpcy5tZWRpYUJ1ZmZlciA9IG51bGw7XG4gICAgICB0aGlzLmxvb3BTbiA9IHVuZGVmaW5lZDtcbiAgICAgIGlmICh0cmFuc2ZlcnJpbmdNZWRpYSkge1xuICAgICAgICB0aGlzLnJlc2V0TG9hZGluZ1N0YXRlKCk7XG4gICAgICAgIHRoaXMucmVzZXRUcmFuc211eGVyKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubG9hZGluZ1BhcnRzID0gZmFsc2U7XG4gICAgICB0aGlzLmZyYWdtZW50VHJhY2tlci5yZW1vdmVBbGxGcmFnbWVudHMoKTtcbiAgICAgIHRoaXMuc3RvcExvYWQoKTtcbiAgICB9O1xuICAgIF9wcm90by5vbk1hbmlmZXN0TG9hZGluZyA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkaW5nKCkge1xuICAgICAgdGhpcy5pbml0UFRTID0gW107XG4gICAgICB0aGlzLmxldmVscyA9IHRoaXMubGV2ZWxMYXN0TG9hZGVkID0gdGhpcy5mcmFnQ3VycmVudCA9IG51bGw7XG4gICAgICB0aGlzLmxhc3RDdXJyZW50VGltZSA9IHRoaXMuc3RhcnRQb3NpdGlvbiA9IDA7XG4gICAgICB0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgX3Byb3RvLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKGV2ZW50LCBkYXRhKSB7fTtcbiAgICBfcHJvdG8ub25NYW5pZmVzdExvYWRlZCA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMuc3RhcnRUaW1lT2Zmc2V0ID0gZGF0YS5zdGFydFRpbWVPZmZzZXQ7XG4gICAgfTtcbiAgICBfcHJvdG8ub25IYW5kbGVyRGVzdHJveWluZyA9IGZ1bmN0aW9uIG9uSGFuZGxlckRlc3Ryb3lpbmcoKSB7XG4gICAgICB0aGlzLnN0b3BMb2FkKCk7XG4gICAgICBpZiAodGhpcy50cmFuc211eGVyKSB7XG4gICAgICAgIHRoaXMudHJhbnNtdXhlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMudHJhbnNtdXhlciA9IG51bGw7XG4gICAgICB9XG4gICAgICBfVGFza0xvb3AucHJvdG90eXBlLm9uSGFuZGxlckRlc3Ryb3lpbmcuY2FsbCh0aGlzKTtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMuaGxzID0gdGhpcy5vbk1lZGlhU2Vla2luZyA9IHRoaXMub25NZWRpYUVuZGVkID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5vbkhhbmRsZXJEZXN0cm95ZWQgPSBmdW5jdGlvbiBvbkhhbmRsZXJEZXN0cm95ZWQoKSB7XG4gICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU1RPUFBFRDtcbiAgICAgIGlmICh0aGlzLmZyYWdtZW50TG9hZGVyKSB7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRMb2FkZXIuZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMua2V5TG9hZGVyKSB7XG4gICAgICAgIHRoaXMua2V5TG9hZGVyLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmRlY3J5cHRlcikge1xuICAgICAgICB0aGlzLmRlY3J5cHRlci5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICB0aGlzLmhscyA9IHRoaXMubG9nID0gdGhpcy53YXJuID0gdGhpcy5kZWNyeXB0ZXIgPSB0aGlzLmtleUxvYWRlciA9IHRoaXMuZnJhZ21lbnRMb2FkZXIgPSB0aGlzLmZyYWdtZW50VHJhY2tlciA9IG51bGw7XG4gICAgICBfVGFza0xvb3AucHJvdG90eXBlLm9uSGFuZGxlckRlc3Ryb3llZC5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLmxvYWRGcmFnbWVudCA9IGZ1bmN0aW9uIGxvYWRGcmFnbWVudChmcmFnLCBsZXZlbCwgdGFyZ2V0QnVmZmVyVGltZSkge1xuICAgICAgdGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fbG9hZEZyYWdGb3JQbGF5YmFjayhmcmFnLCBsZXZlbCwgdGFyZ2V0QnVmZmVyVGltZSk7XG4gICAgfTtcbiAgICBfcHJvdG8uX2xvYWRGcmFnRm9yUGxheWJhY2sgPSBmdW5jdGlvbiBfbG9hZEZyYWdGb3JQbGF5YmFjayhmcmFnbWVudCwgbGV2ZWwsIHRhcmdldEJ1ZmZlclRpbWUpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgdmFyIHByb2dyZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbiBwcm9ncmVzc0NhbGxiYWNrKGRhdGEpIHtcbiAgICAgICAgdmFyIGZyYWcgPSBkYXRhLmZyYWc7XG4gICAgICAgIGlmIChfdGhpczMuZnJhZ0NvbnRleHRDaGFuZ2VkKGZyYWcpKSB7XG4gICAgICAgICAgX3RoaXMzLndhcm4oZnJhZy50eXBlICsgXCIgc246IFwiICsgZnJhZy5zbiArIChkYXRhLnBhcnQgPyAnIHBhcnQ6ICcgKyBkYXRhLnBhcnQuaW5kZXggOiAnJykgKyBcIiBvZiBcIiArIF90aGlzMy5mcmFnSW5mbyhmcmFnLCBmYWxzZSwgZGF0YS5wYXJ0KSArIFwiKSB3YXMgZHJvcHBlZCBkdXJpbmcgZG93bmxvYWQuXCIpO1xuICAgICAgICAgIF90aGlzMy5mcmFnbWVudFRyYWNrZXIucmVtb3ZlRnJhZ21lbnQoZnJhZyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZyYWcuc3RhdHMuY2h1bmtDb3VudCsrO1xuICAgICAgICBfdGhpczMuX2hhbmRsZUZyYWdtZW50TG9hZFByb2dyZXNzKGRhdGEpO1xuICAgICAgfTtcbiAgICAgIHRoaXMuX2RvRnJhZ0xvYWQoZnJhZ21lbnQsIGxldmVsLCB0YXJnZXRCdWZmZXJUaW1lLCBwcm9ncmVzc0NhbGxiYWNrKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIC8vIGlmIHdlJ3JlIGhlcmUgd2UgcHJvYmFibHkgbmVlZGVkIHRvIGJhY2t0cmFjayBvciBhcmUgd2FpdGluZyBmb3IgbW9yZSBwYXJ0c1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RhdGUgPSBfdGhpczMuc3RhdGU7XG4gICAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnO1xuICAgICAgICBpZiAoX3RoaXMzLmZyYWdDb250ZXh0Q2hhbmdlZChmcmFnKSkge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gU3RhdGUuRlJBR19MT0FESU5HIHx8ICFfdGhpczMuZnJhZ0N1cnJlbnQgJiYgc3RhdGUgPT09IFN0YXRlLlBBUlNJTkcpIHtcbiAgICAgICAgICAgIF90aGlzMy5mcmFnbWVudFRyYWNrZXIucmVtb3ZlRnJhZ21lbnQoZnJhZyk7XG4gICAgICAgICAgICBfdGhpczMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdwYXlsb2FkJyBpbiBkYXRhKSB7XG4gICAgICAgICAgX3RoaXMzLmxvZyhcIkxvYWRlZCBcIiArIGZyYWcudHlwZSArIFwiIHNuOiBcIiArIGZyYWcuc24gKyBcIiBvZiBcIiArIF90aGlzMy5wbGF5bGlzdExhYmVsKCkgKyBcIiBcIiArIGZyYWcubGV2ZWwpO1xuICAgICAgICAgIF90aGlzMy5obHMudHJpZ2dlcihFdmVudHMuRlJBR19MT0FERUQsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFzcyB0aHJvdWdoIHRoZSB3aG9sZSBwYXlsb2FkOyBjb250cm9sbGVycyBub3QgaW1wbGVtZW50aW5nIHByb2dyZXNzaXZlIGxvYWRpbmcgcmVjZWl2ZSBkYXRhIGZyb20gdGhpcyBjYWxsYmFja1xuICAgICAgICBfdGhpczMuX2hhbmRsZUZyYWdtZW50TG9hZENvbXBsZXRlKGRhdGEpO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICBpZiAoX3RoaXMzLnN0YXRlID09PSBTdGF0ZS5TVE9QUEVEIHx8IF90aGlzMy5zdGF0ZSA9PT0gU3RhdGUuRVJST1IpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMzLndhcm4oXCJGcmFnIGVycm9yOiBcIiArICgocmVhc29uID09IG51bGwgPyB2b2lkIDAgOiByZWFzb24ubWVzc2FnZSkgfHwgcmVhc29uKSk7XG4gICAgICAgIF90aGlzMy5yZXNldEZyYWdtZW50TG9hZGluZyhmcmFnbWVudCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5jbGVhclRyYWNrZXJJZk5lZWRlZCA9IGZ1bmN0aW9uIGNsZWFyVHJhY2tlcklmTmVlZGVkKGZyYWcpIHtcbiAgICAgIHZhciBfdGhpcyRtZWRpYUJ1ZmZlcjtcbiAgICAgIHZhciBmcmFnbWVudFRyYWNrZXIgPSB0aGlzLmZyYWdtZW50VHJhY2tlcjtcbiAgICAgIHZhciBmcmFnU3RhdGUgPSBmcmFnbWVudFRyYWNrZXIuZ2V0U3RhdGUoZnJhZyk7XG4gICAgICBpZiAoZnJhZ1N0YXRlID09PSBGcmFnbWVudFN0YXRlLkFQUEVORElORykge1xuICAgICAgICAvLyBMb3dlciB0aGUgbWF4IGJ1ZmZlciBsZW5ndGggYW5kIHRyeSBhZ2FpblxuICAgICAgICB2YXIgcGxheWxpc3RUeXBlID0gZnJhZy50eXBlO1xuICAgICAgICB2YXIgYnVmZmVyZWRJbmZvID0gdGhpcy5nZXRGd2RCdWZmZXJJbmZvKHRoaXMubWVkaWFCdWZmZXIsIHBsYXlsaXN0VHlwZSk7XG4gICAgICAgIHZhciBtaW5Gb3J3YXJkQnVmZmVyTGVuZ3RoID0gTWF0aC5tYXgoZnJhZy5kdXJhdGlvbiwgYnVmZmVyZWRJbmZvID8gYnVmZmVyZWRJbmZvLmxlbiA6IHRoaXMuY29uZmlnLm1heEJ1ZmZlckxlbmd0aCk7XG4gICAgICAgIC8vIElmIGJhY2t0cmFja2luZywgYWx3YXlzIHJlbW92ZSBmcm9tIHRoZSB0cmFja2VyIHdpdGhvdXQgcmVkdWNpbmcgbWF4IGJ1ZmZlciBsZW5ndGhcbiAgICAgICAgdmFyIGJhY2t0cmFja0ZyYWdtZW50ID0gdGhpcy5iYWNrdHJhY2tGcmFnbWVudDtcbiAgICAgICAgdmFyIGJhY2t0cmFja2VkID0gYmFja3RyYWNrRnJhZ21lbnQgPyBmcmFnLnNuIC0gYmFja3RyYWNrRnJhZ21lbnQuc24gOiAwO1xuICAgICAgICBpZiAoYmFja3RyYWNrZWQgPT09IDEgfHwgdGhpcy5yZWR1Y2VNYXhCdWZmZXJMZW5ndGgobWluRm9yd2FyZEJ1ZmZlckxlbmd0aCwgZnJhZy5kdXJhdGlvbikpIHtcbiAgICAgICAgICBmcmFnbWVudFRyYWNrZXIucmVtb3ZlRnJhZ21lbnQoZnJhZyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKChfdGhpcyRtZWRpYUJ1ZmZlciA9IHRoaXMubWVkaWFCdWZmZXIpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRtZWRpYUJ1ZmZlci5idWZmZXJlZC5sZW5ndGgpID09PSAwKSB7XG4gICAgICAgIC8vIFN0b3AgZ2FwIGZvciBiYWQgdHJhY2tlciAvIGJ1ZmZlciBmbHVzaCBiZWhhdmlvclxuICAgICAgICBmcmFnbWVudFRyYWNrZXIucmVtb3ZlQWxsRnJhZ21lbnRzKCk7XG4gICAgICB9IGVsc2UgaWYgKGZyYWdtZW50VHJhY2tlci5oYXNQYXJ0cyhmcmFnLnR5cGUpKSB7XG4gICAgICAgIC8vIEluIGxvdyBsYXRlbmN5IG1vZGUsIHJlbW92ZSBmcmFnbWVudHMgZm9yIHdoaWNoIG9ubHkgc29tZSBwYXJ0cyB3ZXJlIGJ1ZmZlcmVkXG4gICAgICAgIGZyYWdtZW50VHJhY2tlci5kZXRlY3RQYXJ0aWFsRnJhZ21lbnRzKHtcbiAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgIHBhcnQ6IG51bGwsXG4gICAgICAgICAgc3RhdHM6IGZyYWcuc3RhdHMsXG4gICAgICAgICAgaWQ6IGZyYWcudHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZyYWdtZW50VHJhY2tlci5nZXRTdGF0ZShmcmFnKSA9PT0gRnJhZ21lbnRTdGF0ZS5QQVJUSUFMKSB7XG4gICAgICAgICAgZnJhZ21lbnRUcmFja2VyLnJlbW92ZUZyYWdtZW50KGZyYWcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uY2hlY2tMaXZlVXBkYXRlID0gZnVuY3Rpb24gY2hlY2tMaXZlVXBkYXRlKGRldGFpbHMpIHtcbiAgICAgIGlmIChkZXRhaWxzLnVwZGF0ZWQgJiYgIWRldGFpbHMubGl2ZSkge1xuICAgICAgICAvLyBMaXZlIHN0cmVhbSBlbmRlZCwgdXBkYXRlIGZyYWdtZW50IHRyYWNrZXJcbiAgICAgICAgdmFyIGxhc3RGcmFnbWVudCA9IGRldGFpbHMuZnJhZ21lbnRzW2RldGFpbHMuZnJhZ21lbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICB0aGlzLmZyYWdtZW50VHJhY2tlci5kZXRlY3RQYXJ0aWFsRnJhZ21lbnRzKHtcbiAgICAgICAgICBmcmFnOiBsYXN0RnJhZ21lbnQsXG4gICAgICAgICAgcGFydDogbnVsbCxcbiAgICAgICAgICBzdGF0czogbGFzdEZyYWdtZW50LnN0YXRzLFxuICAgICAgICAgIGlkOiBsYXN0RnJhZ21lbnQudHlwZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghZGV0YWlscy5mcmFnbWVudHNbMF0pIHtcbiAgICAgICAgZGV0YWlscy5kZWx0YVVwZGF0ZUZhaWxlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ud2FpdEZvckxpdmUgPSBmdW5jdGlvbiB3YWl0Rm9yTGl2ZShsZXZlbEluZm8pIHtcbiAgICAgIHZhciBkZXRhaWxzID0gbGV2ZWxJbmZvLmRldGFpbHM7XG4gICAgICByZXR1cm4gKGRldGFpbHMgPT0gbnVsbCA/IHZvaWQgMCA6IGRldGFpbHMubGl2ZSkgJiYgZGV0YWlscy50eXBlICE9PSAnRVZFTlQnICYmICh0aGlzLmxldmVsTGFzdExvYWRlZCAhPT0gbGV2ZWxJbmZvIHx8IGRldGFpbHMuZXhwaXJlZCk7XG4gICAgfTtcbiAgICBfcHJvdG8uZmx1c2hNYWluQnVmZmVyID0gZnVuY3Rpb24gZmx1c2hNYWluQnVmZmVyKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQsIHR5cGUpIHtcbiAgICAgIGlmICh0eXBlID09PSB2b2lkIDApIHtcbiAgICAgICAgdHlwZSA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoIShzdGFydE9mZnNldCAtIGVuZE9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gV2hlbiBhbHRlcm5hdGUgYXVkaW8gaXMgcGxheWluZywgdGhlIGF1ZGlvLXN0cmVhbS1jb250cm9sbGVyIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgYXVkaW8gYnVmZmVyLiBPdGhlcndpc2UsXG4gICAgICAvLyBwYXNzaW5nIGEgbnVsbCB0eXBlIGZsdXNoZXMgYm90aCBidWZmZXJzXG4gICAgICB2YXIgZmx1c2hTY29wZSA9IHtcbiAgICAgICAgc3RhcnRPZmZzZXQ6IHN0YXJ0T2Zmc2V0LFxuICAgICAgICBlbmRPZmZzZXQ6IGVuZE9mZnNldCxcbiAgICAgICAgdHlwZTogdHlwZVxuICAgICAgfTtcbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkJVRkZFUl9GTFVTSElORywgZmx1c2hTY29wZSk7XG4gICAgfTtcbiAgICBfcHJvdG8uX2xvYWRJbml0U2VnbWVudCA9IGZ1bmN0aW9uIF9sb2FkSW5pdFNlZ21lbnQoZnJhZ21lbnQsIGxldmVsKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcbiAgICAgIHRoaXMuX2RvRnJhZ0xvYWQoZnJhZ21lbnQsIGxldmVsKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBmcmFnID0gZGF0YSA9PSBudWxsID8gdm9pZCAwIDogZGF0YS5mcmFnO1xuICAgICAgICBpZiAoIWZyYWcgfHwgX3RoaXM0LmZyYWdDb250ZXh0Q2hhbmdlZChmcmFnKSB8fCAhX3RoaXM0LmxldmVscykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW5pdCBsb2FkIGFib3J0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIGhscyA9IF90aGlzNC5obHM7XG4gICAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnLFxuICAgICAgICAgIHBheWxvYWQgPSBkYXRhLnBheWxvYWQ7XG4gICAgICAgIHZhciBkZWNyeXB0RGF0YSA9IGZyYWcuZGVjcnlwdGRhdGE7XG5cbiAgICAgICAgLy8gY2hlY2sgdG8gc2VlIGlmIHRoZSBwYXlsb2FkIG5lZWRzIHRvIGJlIGRlY3J5cHRlZFxuICAgICAgICBpZiAocGF5bG9hZCAmJiBwYXlsb2FkLmJ5dGVMZW5ndGggPiAwICYmIGRlY3J5cHREYXRhICE9IG51bGwgJiYgZGVjcnlwdERhdGEua2V5ICYmIGRlY3J5cHREYXRhLml2ICYmIGlzRnVsbFNlZ21lbnRFbmNyeXB0aW9uKGRlY3J5cHREYXRhLm1ldGhvZCkpIHtcbiAgICAgICAgICB2YXIgc3RhcnRUaW1lID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAvLyBkZWNyeXB0IGluaXQgc2VnbWVudCBkYXRhXG4gICAgICAgICAgcmV0dXJuIF90aGlzNC5kZWNyeXB0ZXIuZGVjcnlwdChuZXcgVWludDhBcnJheShwYXlsb2FkKSwgZGVjcnlwdERhdGEua2V5LmJ1ZmZlciwgZGVjcnlwdERhdGEuaXYuYnVmZmVyLCBnZXRBZXNNb2RlRnJvbUZ1bGxTZWdtZW50TWV0aG9kKGRlY3J5cHREYXRhLm1ldGhvZCkpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwge1xuICAgICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk1FRElBX0VSUk9SLFxuICAgICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuRlJBR19ERUNSWVBUX0VSUk9SLFxuICAgICAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGVycm9yOiBlcnIsXG4gICAgICAgICAgICAgIHJlYXNvbjogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgIGZyYWc6IGZyYWdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRlY3J5cHRlZERhdGEpIHtcbiAgICAgICAgICAgIHZhciBlbmRUaW1lID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIGhscy50cmlnZ2VyKEV2ZW50cy5GUkFHX0RFQ1JZUFRFRCwge1xuICAgICAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiBkZWNyeXB0ZWREYXRhLFxuICAgICAgICAgICAgICBzdGF0czoge1xuICAgICAgICAgICAgICAgIHRzdGFydDogc3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgIHRkZWNyeXB0OiBlbmRUaW1lXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGF0YS5wYXlsb2FkID0gZGVjcnlwdGVkRGF0YTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczQuY29tcGxldGVJbml0U2VnbWVudExvYWQoZGF0YSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzNC5jb21wbGV0ZUluaXRTZWdtZW50TG9hZChkYXRhKTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgaWYgKF90aGlzNC5zdGF0ZSA9PT0gU3RhdGUuU1RPUFBFRCB8fCBfdGhpczQuc3RhdGUgPT09IFN0YXRlLkVSUk9SKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzNC53YXJuKHJlYXNvbik7XG4gICAgICAgIF90aGlzNC5yZXNldEZyYWdtZW50TG9hZGluZyhmcmFnbWVudCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5jb21wbGV0ZUluaXRTZWdtZW50TG9hZCA9IGZ1bmN0aW9uIGNvbXBsZXRlSW5pdFNlZ21lbnRMb2FkKGRhdGEpIHtcbiAgICAgIHZhciBsZXZlbHMgPSB0aGlzLmxldmVscztcbiAgICAgIGlmICghbGV2ZWxzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW5pdCBsb2FkIGFib3J0ZWQsIG1pc3NpbmcgbGV2ZWxzJyk7XG4gICAgICB9XG4gICAgICB2YXIgc3RhdHMgPSBkYXRhLmZyYWcuc3RhdHM7XG4gICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU3RhdGUuU1RPUFBFRCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgIH1cbiAgICAgIGRhdGEuZnJhZy5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5wYXlsb2FkKTtcbiAgICAgIHN0YXRzLnBhcnNpbmcuc3RhcnQgPSBzdGF0cy5idWZmZXJpbmcuc3RhcnQgPSBzZWxmLnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgc3RhdHMucGFyc2luZy5lbmQgPSBzdGF0cy5idWZmZXJpbmcuZW5kID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIHRoaXMudGljaygpO1xuICAgIH07XG4gICAgX3Byb3RvLmZyYWdDb250ZXh0Q2hhbmdlZCA9IGZ1bmN0aW9uIGZyYWdDb250ZXh0Q2hhbmdlZChmcmFnKSB7XG4gICAgICB2YXIgZnJhZ0N1cnJlbnQgPSB0aGlzLmZyYWdDdXJyZW50O1xuICAgICAgcmV0dXJuICFmcmFnIHx8ICFmcmFnQ3VycmVudCB8fCBmcmFnLnNuICE9PSBmcmFnQ3VycmVudC5zbiB8fCBmcmFnLmxldmVsICE9PSBmcmFnQ3VycmVudC5sZXZlbDtcbiAgICB9O1xuICAgIF9wcm90by5mcmFnQnVmZmVyZWRDb21wbGV0ZSA9IGZ1bmN0aW9uIGZyYWdCdWZmZXJlZENvbXBsZXRlKGZyYWcsIHBhcnQpIHtcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWFCdWZmZXIgPyB0aGlzLm1lZGlhQnVmZmVyIDogdGhpcy5tZWRpYTtcbiAgICAgIHRoaXMubG9nKFwiQnVmZmVyZWQgXCIgKyBmcmFnLnR5cGUgKyBcIiBzbjogXCIgKyBmcmFnLnNuICsgKHBhcnQgPyAnIHBhcnQ6ICcgKyBwYXJ0LmluZGV4IDogJycpICsgXCIgb2YgXCIgKyB0aGlzLmZyYWdJbmZvKGZyYWcsIGZhbHNlLCBwYXJ0KSArIFwiID4gYnVmZmVyOlwiICsgKG1lZGlhID8gVGltZVJhbmdlcy50b1N0cmluZyhCdWZmZXJIZWxwZXIuZ2V0QnVmZmVyZWQobWVkaWEpKSA6ICcoZGV0YWNoZWQpJykgKyBcIilcIik7XG4gICAgICBpZiAoaXNNZWRpYUZyYWdtZW50KGZyYWcpKSB7XG4gICAgICAgIHZhciBfdGhpcyRsZXZlbHM7XG4gICAgICAgIGlmIChmcmFnLnR5cGUgIT09IFBsYXlsaXN0TGV2ZWxUeXBlLlNVQlRJVExFKSB7XG4gICAgICAgICAgdmFyIGVsID0gZnJhZy5lbGVtZW50YXJ5U3RyZWFtcztcbiAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKGVsKS5zb21lKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gISFlbFt0eXBlXTtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgLy8gZW1wdHkgc2VnbWVudFxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBsZXZlbCA9IChfdGhpcyRsZXZlbHMgPSB0aGlzLmxldmVscykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGxldmVsc1tmcmFnLmxldmVsXTtcbiAgICAgICAgaWYgKGxldmVsICE9IG51bGwgJiYgbGV2ZWwuZnJhZ21lbnRFcnJvcikge1xuICAgICAgICAgIHRoaXMubG9nKFwiUmVzZXR0aW5nIGxldmVsIGZyYWdtZW50IGVycm9yIGNvdW50IG9mIFwiICsgbGV2ZWwuZnJhZ21lbnRFcnJvciArIFwiIG9uIGZyYWcgYnVmZmVyZWRcIik7XG4gICAgICAgICAgbGV2ZWwuZnJhZ21lbnRFcnJvciA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgIH07XG4gICAgX3Byb3RvLl9oYW5kbGVGcmFnbWVudExvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uIF9oYW5kbGVGcmFnbWVudExvYWRDb21wbGV0ZShmcmFnTG9hZGVkRW5kRGF0YSkge1xuICAgICAgdmFyIHRyYW5zbXV4ZXIgPSB0aGlzLnRyYW5zbXV4ZXI7XG4gICAgICBpZiAoIXRyYW5zbXV4ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGZyYWcgPSBmcmFnTG9hZGVkRW5kRGF0YS5mcmFnLFxuICAgICAgICBwYXJ0ID0gZnJhZ0xvYWRlZEVuZERhdGEucGFydCxcbiAgICAgICAgcGFydHNMb2FkZWQgPSBmcmFnTG9hZGVkRW5kRGF0YS5wYXJ0c0xvYWRlZDtcbiAgICAgIC8vIElmIHdlIGRpZCBub3QgbG9hZCBwYXJ0cywgb3IgbG9hZGVkIGFsbCBwYXJ0cywgd2UgaGF2ZSBjb21wbGV0ZSAobm90IHBhcnRpYWwpIGZyYWdtZW50IGRhdGFcbiAgICAgIHZhciBjb21wbGV0ZSA9ICFwYXJ0c0xvYWRlZCB8fCBwYXJ0c0xvYWRlZC5sZW5ndGggPT09IDAgfHwgcGFydHNMb2FkZWQuc29tZShmdW5jdGlvbiAoZnJhZ0xvYWRlZCkge1xuICAgICAgICByZXR1cm4gIWZyYWdMb2FkZWQ7XG4gICAgICB9KTtcbiAgICAgIHZhciBjaHVua01ldGEgPSBuZXcgQ2h1bmtNZXRhZGF0YShmcmFnLmxldmVsLCBmcmFnLnNuLCBmcmFnLnN0YXRzLmNodW5rQ291bnQgKyAxLCAwLCBwYXJ0ID8gcGFydC5pbmRleCA6IC0xLCAhY29tcGxldGUpO1xuICAgICAgdHJhbnNtdXhlci5mbHVzaChjaHVua01ldGEpO1xuICAgIH07XG4gICAgX3Byb3RvLl9oYW5kbGVGcmFnbWVudExvYWRQcm9ncmVzcyA9IGZ1bmN0aW9uIF9oYW5kbGVGcmFnbWVudExvYWRQcm9ncmVzcyhmcmFnKSB7fTtcbiAgICBfcHJvdG8uX2RvRnJhZ0xvYWQgPSBmdW5jdGlvbiBfZG9GcmFnTG9hZChmcmFnLCBsZXZlbCwgdGFyZ2V0QnVmZmVyVGltZSwgcHJvZ3Jlc3NDYWxsYmFjaykge1xuICAgICAgdmFyIF9mcmFnJGRlY3J5cHRkYXRhLFxuICAgICAgICBfdGhpczUgPSB0aGlzO1xuICAgICAgaWYgKHRhcmdldEJ1ZmZlclRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgICB0YXJnZXRCdWZmZXJUaW1lID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuZnJhZ0N1cnJlbnQgPSBmcmFnO1xuICAgICAgdmFyIGRldGFpbHMgPSBsZXZlbCA9PSBudWxsID8gdm9pZCAwIDogbGV2ZWwuZGV0YWlscztcbiAgICAgIGlmICghdGhpcy5sZXZlbHMgfHwgIWRldGFpbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZnJhZyBsb2FkIGFib3J0ZWQsIG1pc3NpbmcgbGV2ZWxcIiArIChkZXRhaWxzID8gJycgOiAnIGRldGFpbCcpICsgXCJzXCIpO1xuICAgICAgfVxuICAgICAgdmFyIGtleUxvYWRpbmdQcm9taXNlID0gbnVsbDtcbiAgICAgIGlmIChmcmFnLmVuY3J5cHRlZCAmJiAhKChfZnJhZyRkZWNyeXB0ZGF0YSA9IGZyYWcuZGVjcnlwdGRhdGEpICE9IG51bGwgJiYgX2ZyYWckZGVjcnlwdGRhdGEua2V5KSkge1xuICAgICAgICB0aGlzLmxvZyhcIkxvYWRpbmcga2V5IGZvciBcIiArIGZyYWcuc24gKyBcIiBvZiBbXCIgKyBkZXRhaWxzLnN0YXJ0U04gKyBcIi1cIiArIGRldGFpbHMuZW5kU04gKyBcIl0sIFwiICsgdGhpcy5wbGF5bGlzdExhYmVsKCkgKyBcIiBcIiArIGZyYWcubGV2ZWwpO1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuS0VZX0xPQURJTkc7XG4gICAgICAgIHRoaXMuZnJhZ0N1cnJlbnQgPSBmcmFnO1xuICAgICAgICBrZXlMb2FkaW5nUHJvbWlzZSA9IHRoaXMua2V5TG9hZGVyLmxvYWQoZnJhZykudGhlbihmdW5jdGlvbiAoa2V5TG9hZGVkRGF0YSkge1xuICAgICAgICAgIGlmICghX3RoaXM1LmZyYWdDb250ZXh0Q2hhbmdlZChrZXlMb2FkZWREYXRhLmZyYWcpKSB7XG4gICAgICAgICAgICBfdGhpczUuaGxzLnRyaWdnZXIoRXZlbnRzLktFWV9MT0FERUQsIGtleUxvYWRlZERhdGEpO1xuICAgICAgICAgICAgaWYgKF90aGlzNS5zdGF0ZSA9PT0gU3RhdGUuS0VZX0xPQURJTkcpIHtcbiAgICAgICAgICAgICAgX3RoaXM1LnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXlMb2FkZWREYXRhO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLktFWV9MT0FESU5HLCB7XG4gICAgICAgICAgZnJhZzogZnJhZ1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuZnJhZ0N1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICBrZXlMb2FkaW5nUHJvbWlzZSA9IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImZyYWcgbG9hZCBhYm9ydGVkLCBjb250ZXh0IGNoYW5nZWQgaW4gS0VZX0xPQURJTkdcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFmcmFnLmVuY3J5cHRlZCkge1xuICAgICAgICBrZXlMb2FkaW5nUHJvbWlzZSA9IHRoaXMua2V5TG9hZGVyLmxvYWRDbGVhcihmcmFnLCBkZXRhaWxzLmVuY3J5cHRlZEZyYWdtZW50cyk7XG4gICAgICAgIGlmIChrZXlMb2FkaW5nUHJvbWlzZSkge1xuICAgICAgICAgIHRoaXMubG9nKFwiW2VtZV0gYmxvY2tpbmcgZnJhZyBsb2FkIHVudGlsIG1lZGlhLWtleXMgYWNxdWlyZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBmcmFnUHJldmlvdXMgPSB0aGlzLmZyYWdQcmV2aW91cztcbiAgICAgIGlmIChpc01lZGlhRnJhZ21lbnQoZnJhZykgJiYgKCFmcmFnUHJldmlvdXMgfHwgZnJhZy5zbiAhPT0gZnJhZ1ByZXZpb3VzLnNuKSkge1xuICAgICAgICB2YXIgc2hvdWxkTG9hZFBhcnRzID0gdGhpcy5zaG91bGRMb2FkUGFydHMobGV2ZWwuZGV0YWlscywgZnJhZy5lbmQpO1xuICAgICAgICBpZiAoc2hvdWxkTG9hZFBhcnRzICE9PSB0aGlzLmxvYWRpbmdQYXJ0cykge1xuICAgICAgICAgIHRoaXMubG9nKFwiTEwtUGFydCBsb2FkaW5nIFwiICsgKHNob3VsZExvYWRQYXJ0cyA/ICdPTicgOiAnT0ZGJykgKyBcIiBsb2FkaW5nIHNuIFwiICsgKGZyYWdQcmV2aW91cyA9PSBudWxsID8gdm9pZCAwIDogZnJhZ1ByZXZpb3VzLnNuKSArIFwiLT5cIiArIGZyYWcuc24pO1xuICAgICAgICAgIHRoaXMubG9hZGluZ1BhcnRzID0gc2hvdWxkTG9hZFBhcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0YXJnZXRCdWZmZXJUaW1lID0gTWF0aC5tYXgoZnJhZy5zdGFydCwgdGFyZ2V0QnVmZmVyVGltZSB8fCAwKTtcbiAgICAgIGlmICh0aGlzLmxvYWRpbmdQYXJ0cyAmJiBpc01lZGlhRnJhZ21lbnQoZnJhZykpIHtcbiAgICAgICAgdmFyIHBhcnRMaXN0ID0gZGV0YWlscy5wYXJ0TGlzdDtcbiAgICAgICAgaWYgKHBhcnRMaXN0ICYmIHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICBpZiAodGFyZ2V0QnVmZmVyVGltZSA+IGZyYWcuZW5kICYmIGRldGFpbHMuZnJhZ21lbnRIaW50KSB7XG4gICAgICAgICAgICBmcmFnID0gZGV0YWlscy5mcmFnbWVudEhpbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBwYXJ0SW5kZXggPSB0aGlzLmdldE5leHRQYXJ0KHBhcnRMaXN0LCBmcmFnLCB0YXJnZXRCdWZmZXJUaW1lKTtcbiAgICAgICAgICBpZiAocGFydEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gcGFydExpc3RbcGFydEluZGV4XTtcbiAgICAgICAgICAgIGZyYWcgPSB0aGlzLmZyYWdDdXJyZW50ID0gcGFydC5mcmFnbWVudDtcbiAgICAgICAgICAgIHRoaXMubG9nKFwiTG9hZGluZyBcIiArIGZyYWcudHlwZSArIFwiIHNuOiBcIiArIGZyYWcuc24gKyBcIiBwYXJ0OiBcIiArIHBhcnQuaW5kZXggKyBcIiAoXCIgKyBwYXJ0SW5kZXggKyBcIi9cIiArIChwYXJ0TGlzdC5sZW5ndGggLSAxKSArIFwiKSBvZiBcIiArIHRoaXMuZnJhZ0luZm8oZnJhZywgZmFsc2UsIHBhcnQpICsgXCIpIGNjOiBcIiArIGZyYWcuY2MgKyBcIiBbXCIgKyBkZXRhaWxzLnN0YXJ0U04gKyBcIi1cIiArIGRldGFpbHMuZW5kU04gKyBcIl0sIHRhcmdldDogXCIgKyBwYXJzZUZsb2F0KHRhcmdldEJ1ZmZlclRpbWUudG9GaXhlZCgzKSkpO1xuICAgICAgICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gcGFydC5zdGFydCArIHBhcnQuZHVyYXRpb247XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRlJBR19MT0FESU5HO1xuICAgICAgICAgICAgdmFyIF9yZXN1bHQ7XG4gICAgICAgICAgICBpZiAoa2V5TG9hZGluZ1Byb21pc2UpIHtcbiAgICAgICAgICAgICAgX3Jlc3VsdCA9IGtleUxvYWRpbmdQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGtleUxvYWRlZERhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtleUxvYWRlZERhdGEgfHwgX3RoaXM1LmZyYWdDb250ZXh0Q2hhbmdlZChrZXlMb2FkZWREYXRhLmZyYWcpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNS5kb0ZyYWdQYXJ0c0xvYWQoZnJhZywgcGFydCwgbGV2ZWwsIHByb2dyZXNzQ2FsbGJhY2spO1xuICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM1LmhhbmRsZUZyYWdMb2FkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9yZXN1bHQgPSB0aGlzLmRvRnJhZ1BhcnRzTG9hZChmcmFnLCBwYXJ0LCBsZXZlbCwgcHJvZ3Jlc3NDYWxsYmFjaykuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNS5oYW5kbGVGcmFnTG9hZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5GUkFHX0xPQURJTkcsIHtcbiAgICAgICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICAgICAgcGFydDogcGFydCxcbiAgICAgICAgICAgICAgdGFyZ2V0QnVmZmVyVGltZTogdGFyZ2V0QnVmZmVyVGltZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5mcmFnQ3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiZnJhZyBsb2FkIGFib3J0ZWQsIGNvbnRleHQgY2hhbmdlZCBpbiBGUkFHX0xPQURJTkcgcGFydHNcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9yZXN1bHQ7XG4gICAgICAgICAgfSBlbHNlIGlmICghZnJhZy51cmwgfHwgdGhpcy5sb2FkZWRFbmRPZlBhcnRzKHBhcnRMaXN0LCB0YXJnZXRCdWZmZXJUaW1lKSkge1xuICAgICAgICAgICAgLy8gRnJhZ21lbnQgaGludCBoYXMgbm8gcGFydHNcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNNZWRpYUZyYWdtZW50KGZyYWcpICYmIHRoaXMubG9hZGluZ1BhcnRzKSB7XG4gICAgICAgIHRoaXMubG9nKFwiTEwtUGFydCBsb2FkaW5nIE9GRiBhZnRlciBuZXh0IHBhcnQgbWlzcyBAXCIgKyB0YXJnZXRCdWZmZXJUaW1lLnRvRml4ZWQoMikpO1xuICAgICAgICB0aGlzLmxvYWRpbmdQYXJ0cyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICghZnJhZy51cmwpIHtcbiAgICAgICAgLy8gU2VsZWN0ZWQgZnJhZ21lbnQgaGludCBmb3IgcGFydCBidXQgbm90IGxvYWRpbmcgcGFydHNcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubG9nKFwiTG9hZGluZyBcIiArIGZyYWcudHlwZSArIFwiIHNuOiBcIiArIGZyYWcuc24gKyBcIiBvZiBcIiArIHRoaXMuZnJhZ0luZm8oZnJhZywgZmFsc2UpICsgXCIpIGNjOiBcIiArIGZyYWcuY2MgKyBcIiBcIiArIChkZXRhaWxzID8gJ1snICsgZGV0YWlscy5zdGFydFNOICsgJy0nICsgZGV0YWlscy5lbmRTTiArICddJyA6ICcnKSArIFwiLCB0YXJnZXQ6IFwiICsgcGFyc2VGbG9hdCh0YXJnZXRCdWZmZXJUaW1lLnRvRml4ZWQoMykpKTtcbiAgICAgIC8vIERvbid0IHVwZGF0ZSBuZXh0TG9hZFBvc2l0aW9uIGZvciBmcmFnbWVudHMgd2hpY2ggYXJlIG5vdCBidWZmZXJlZFxuICAgICAgaWYgKGlzRmluaXRlTnVtYmVyKGZyYWcuc24pICYmICF0aGlzLmJpdHJhdGVUZXN0KSB7XG4gICAgICAgIHRoaXMubmV4dExvYWRQb3NpdGlvbiA9IGZyYWcuc3RhcnQgKyBmcmFnLmR1cmF0aW9uO1xuICAgICAgfVxuICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkZSQUdfTE9BRElORztcblxuICAgICAgLy8gTG9hZCBrZXkgYmVmb3JlIHN0cmVhbWluZyBmcmFnbWVudCBkYXRhXG4gICAgICB2YXIgZGF0YU9uUHJvZ3Jlc3MgPSB0aGlzLmNvbmZpZy5wcm9ncmVzc2l2ZTtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAoZGF0YU9uUHJvZ3Jlc3MgJiYga2V5TG9hZGluZ1Byb21pc2UpIHtcbiAgICAgICAgcmVzdWx0ID0ga2V5TG9hZGluZ1Byb21pc2UudGhlbihmdW5jdGlvbiAoa2V5TG9hZGVkRGF0YSkge1xuICAgICAgICAgIGlmICgha2V5TG9hZGVkRGF0YSB8fCBfdGhpczUuZnJhZ0NvbnRleHRDaGFuZ2VkKGtleUxvYWRlZERhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGtleUxvYWRlZERhdGEuZnJhZykpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX3RoaXM1LmZyYWdtZW50TG9hZGVyLmxvYWQoZnJhZywgcHJvZ3Jlc3NDYWxsYmFjayk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBfdGhpczUuaGFuZGxlRnJhZ0xvYWRFcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbG9hZCB1bmVuY3J5cHRlZCBmcmFnbWVudCBkYXRhIHdpdGggcHJvZ3Jlc3MgZXZlbnQsXG4gICAgICAgIC8vIG9yIGhhbmRsZSBmcmFnbWVudCByZXN1bHQgYWZ0ZXIga2V5IGFuZCBmcmFnbWVudCBhcmUgZmluaXNoZWQgbG9hZGluZ1xuICAgICAgICByZXN1bHQgPSBQcm9taXNlLmFsbChbdGhpcy5mcmFnbWVudExvYWRlci5sb2FkKGZyYWcsIGRhdGFPblByb2dyZXNzID8gcHJvZ3Jlc3NDYWxsYmFjayA6IHVuZGVmaW5lZCksIGtleUxvYWRpbmdQcm9taXNlXSkudGhlbihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgIHZhciBmcmFnTG9hZGVkRGF0YSA9IF9yZWZbMF07XG4gICAgICAgICAgaWYgKCFkYXRhT25Qcm9ncmVzcyAmJiBmcmFnTG9hZGVkRGF0YSAmJiBwcm9ncmVzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICBwcm9ncmVzc0NhbGxiYWNrKGZyYWdMb2FkZWREYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZyYWdMb2FkZWREYXRhO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM1LmhhbmRsZUZyYWdMb2FkRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkZSQUdfTE9BRElORywge1xuICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICB0YXJnZXRCdWZmZXJUaW1lOiB0YXJnZXRCdWZmZXJUaW1lXG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLmZyYWdDdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJmcmFnIGxvYWQgYWJvcnRlZCwgY29udGV4dCBjaGFuZ2VkIGluIEZSQUdfTE9BRElOR1wiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgX3Byb3RvLmRvRnJhZ1BhcnRzTG9hZCA9IGZ1bmN0aW9uIGRvRnJhZ1BhcnRzTG9hZChmcmFnLCBmcm9tUGFydCwgbGV2ZWwsIHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIF9sZXZlbCRkZXRhaWxzO1xuICAgICAgICB2YXIgcGFydHNMb2FkZWQgPSBbXTtcbiAgICAgICAgdmFyIGluaXRpYWxQYXJ0TGlzdCA9IChfbGV2ZWwkZGV0YWlscyA9IGxldmVsLmRldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfbGV2ZWwkZGV0YWlscy5wYXJ0TGlzdDtcbiAgICAgICAgdmFyIF9sb2FkUGFydCA9IGZ1bmN0aW9uIGxvYWRQYXJ0KHBhcnQpIHtcbiAgICAgICAgICBfdGhpczYuZnJhZ21lbnRMb2FkZXIubG9hZFBhcnQoZnJhZywgcGFydCwgcHJvZ3Jlc3NDYWxsYmFjaykudGhlbihmdW5jdGlvbiAocGFydExvYWRlZERhdGEpIHtcbiAgICAgICAgICAgIHBhcnRzTG9hZGVkW3BhcnQuaW5kZXhdID0gcGFydExvYWRlZERhdGE7XG4gICAgICAgICAgICB2YXIgbG9hZGVkUGFydCA9IHBhcnRMb2FkZWREYXRhLnBhcnQ7XG4gICAgICAgICAgICBfdGhpczYuaGxzLnRyaWdnZXIoRXZlbnRzLkZSQUdfTE9BREVELCBwYXJ0TG9hZGVkRGF0YSk7XG4gICAgICAgICAgICB2YXIgbmV4dFBhcnQgPSBnZXRQYXJ0V2l0aChsZXZlbC5kZXRhaWxzLCBmcmFnLnNuLCBwYXJ0LmluZGV4ICsgMSkgfHwgZmluZFBhcnQoaW5pdGlhbFBhcnRMaXN0LCBmcmFnLnNuLCBwYXJ0LmluZGV4ICsgMSk7XG4gICAgICAgICAgICBpZiAobmV4dFBhcnQpIHtcbiAgICAgICAgICAgICAgX2xvYWRQYXJ0KG5leHRQYXJ0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgICAgICAgIHBhcnQ6IGxvYWRlZFBhcnQsXG4gICAgICAgICAgICAgICAgcGFydHNMb2FkZWQ6IHBhcnRzTG9hZGVkXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLmNhdGNoKHJlamVjdCk7XG4gICAgICAgIH07XG4gICAgICAgIF9sb2FkUGFydChmcm9tUGFydCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5oYW5kbGVGcmFnTG9hZEVycm9yID0gZnVuY3Rpb24gaGFuZGxlRnJhZ0xvYWRFcnJvcihlcnJvcikge1xuICAgICAgaWYgKCdkYXRhJyBpbiBlcnJvcikge1xuICAgICAgICB2YXIgZGF0YSA9IGVycm9yLmRhdGE7XG4gICAgICAgIGlmIChlcnJvci5kYXRhICYmIGRhdGEuZGV0YWlscyA9PT0gRXJyb3JEZXRhaWxzLklOVEVSTkFMX0FCT1JURUQpIHtcbiAgICAgICAgICB0aGlzLmhhbmRsZUZyYWdMb2FkQWJvcnRlZChkYXRhLmZyYWcsIGRhdGEucGFydCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuRVJST1IsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwge1xuICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuT1RIRVJfRVJST1IsXG4gICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLklOVEVSTkFMX0VYQ0VQVElPTixcbiAgICAgICAgICBlcnI6IGVycm9yLFxuICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLl9oYW5kbGVUcmFuc211eGVyRmx1c2ggPSBmdW5jdGlvbiBfaGFuZGxlVHJhbnNtdXhlckZsdXNoKGNodW5rTWV0YSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmdldEN1cnJlbnRDb250ZXh0KGNodW5rTWV0YSk7XG4gICAgICBpZiAoIWNvbnRleHQgfHwgdGhpcy5zdGF0ZSAhPT0gU3RhdGUuUEFSU0lORykge1xuICAgICAgICBpZiAoIXRoaXMuZnJhZ0N1cnJlbnQgJiYgdGhpcy5zdGF0ZSAhPT0gU3RhdGUuU1RPUFBFRCAmJiB0aGlzLnN0YXRlICE9PSBTdGF0ZS5FUlJPUikge1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBmcmFnID0gY29udGV4dC5mcmFnLFxuICAgICAgICBwYXJ0ID0gY29udGV4dC5wYXJ0LFxuICAgICAgICBsZXZlbCA9IGNvbnRleHQubGV2ZWw7XG4gICAgICB2YXIgbm93ID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGZyYWcuc3RhdHMucGFyc2luZy5lbmQgPSBub3c7XG4gICAgICBpZiAocGFydCkge1xuICAgICAgICBwYXJ0LnN0YXRzLnBhcnNpbmcuZW5kID0gbm93O1xuICAgICAgfVxuICAgICAgLy8gU2VlIGlmIHBhcnQgbG9hZGluZyBzaG91bGQgYmUgZGlzYWJsZWQvZW5hYmxlZCBiYXNlZCBvbiBidWZmZXIgYW5kIHBsYXliYWNrIHBvc2l0aW9uLlxuICAgICAgdmFyIGxldmVsRGV0YWlscyA9IHRoaXMuZ2V0TGV2ZWxEZXRhaWxzKCk7XG4gICAgICB2YXIgbG9hZGluZ1BhcnRzQXRFZGdlID0gbGV2ZWxEZXRhaWxzICYmIGZyYWcuc24gPiBsZXZlbERldGFpbHMuZW5kU047XG4gICAgICB2YXIgc2hvdWxkTG9hZFBhcnRzID0gbG9hZGluZ1BhcnRzQXRFZGdlIHx8IHRoaXMuc2hvdWxkTG9hZFBhcnRzKGxldmVsRGV0YWlscywgZnJhZy5lbmQpO1xuICAgICAgaWYgKHNob3VsZExvYWRQYXJ0cyAhPT0gdGhpcy5sb2FkaW5nUGFydHMpIHtcbiAgICAgICAgdGhpcy5sb2coXCJMTC1QYXJ0IGxvYWRpbmcgXCIgKyAoc2hvdWxkTG9hZFBhcnRzID8gJ09OJyA6ICdPRkYnKSArIFwiIGFmdGVyIHBhcnNpbmcgc2VnbWVudCBlbmRpbmcgQFwiICsgZnJhZy5lbmQudG9GaXhlZCgyKSk7XG4gICAgICAgIHRoaXMubG9hZGluZ1BhcnRzID0gc2hvdWxkTG9hZFBhcnRzO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVMZXZlbFRpbWluZyhmcmFnLCBwYXJ0LCBsZXZlbCwgY2h1bmtNZXRhLnBhcnRpYWwpO1xuICAgIH07XG4gICAgX3Byb3RvLnNob3VsZExvYWRQYXJ0cyA9IGZ1bmN0aW9uIHNob3VsZExvYWRQYXJ0cyhkZXRhaWxzLCBidWZmZXJFbmQpIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5sb3dMYXRlbmN5TW9kZSkge1xuICAgICAgICBpZiAoIWRldGFpbHMpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkaW5nUGFydHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRldGFpbHMgIT0gbnVsbCAmJiBkZXRhaWxzLnBhcnRMaXN0KSB7XG4gICAgICAgICAgdmFyIF9kZXRhaWxzJGZyYWdtZW50SGludDtcbiAgICAgICAgICAvLyBCdWZmZXIgbXVzdCBiZSBhaGVhZCBvZiBmaXJzdCBwYXJ0ICsgZHVyYXRpb24gb2YgcGFydHMgYWZ0ZXIgbGFzdCBzZWdtZW50XG4gICAgICAgICAgLy8gYW5kIHBsYXliYWNrIG11c3QgYmUgYXQgb3IgcGFzdCBzZWdtZW50IGFkamFjZW50IHRvIHBhcnQgbGlzdFxuICAgICAgICAgIHZhciBmaXJzdFBhcnQgPSBkZXRhaWxzLnBhcnRMaXN0WzBdO1xuICAgICAgICAgIHZhciBzYWZlUGFydFN0YXJ0ID0gZmlyc3RQYXJ0LmVuZCArICgoKF9kZXRhaWxzJGZyYWdtZW50SGludCA9IGRldGFpbHMuZnJhZ21lbnRIaW50KSA9PSBudWxsID8gdm9pZCAwIDogX2RldGFpbHMkZnJhZ21lbnRIaW50LmR1cmF0aW9uKSB8fCAwKTtcbiAgICAgICAgICBpZiAoYnVmZmVyRW5kID49IHNhZmVQYXJ0U3RhcnQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyRtZWRpYTtcbiAgICAgICAgICAgIHZhciBwbGF5aGVhZCA9IHRoaXMuaGxzLmhhc0Vub3VnaFRvU3RhcnQgPyAoKF90aGlzJG1lZGlhID0gdGhpcy5tZWRpYSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG1lZGlhLmN1cnJlbnRUaW1lKSB8fCB0aGlzLmxhc3RDdXJyZW50VGltZSA6IHRoaXMuZ2V0TG9hZFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBpZiAocGxheWhlYWQgPiBmaXJzdFBhcnQuc3RhcnQgLSBmaXJzdFBhcnQuZnJhZ21lbnQuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0Q3VycmVudENvbnRleHQgPSBmdW5jdGlvbiBnZXRDdXJyZW50Q29udGV4dChjaHVua01ldGEpIHtcbiAgICAgIHZhciBsZXZlbHMgPSB0aGlzLmxldmVscyxcbiAgICAgICAgZnJhZ0N1cnJlbnQgPSB0aGlzLmZyYWdDdXJyZW50O1xuICAgICAgdmFyIGxldmVsSW5kZXggPSBjaHVua01ldGEubGV2ZWwsXG4gICAgICAgIHNuID0gY2h1bmtNZXRhLnNuLFxuICAgICAgICBwYXJ0SW5kZXggPSBjaHVua01ldGEucGFydDtcbiAgICAgIGlmICghKGxldmVscyAhPSBudWxsICYmIGxldmVsc1tsZXZlbEluZGV4XSkpIHtcbiAgICAgICAgdGhpcy53YXJuKFwiTGV2ZWxzIG9iamVjdCB3YXMgdW5zZXQgd2hpbGUgYnVmZmVyaW5nIGZyYWdtZW50IFwiICsgc24gKyBcIiBvZiBcIiArIHRoaXMucGxheWxpc3RMYWJlbCgpICsgXCIgXCIgKyBsZXZlbEluZGV4ICsgXCIuIFRoZSBjdXJyZW50IGNodW5rIHdpbGwgbm90IGJlIGJ1ZmZlcmVkLlwiKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgbGV2ZWwgPSBsZXZlbHNbbGV2ZWxJbmRleF07XG4gICAgICB2YXIgbGV2ZWxEZXRhaWxzID0gbGV2ZWwuZGV0YWlscztcbiAgICAgIHZhciBwYXJ0ID0gcGFydEluZGV4ID4gLTEgPyBnZXRQYXJ0V2l0aChsZXZlbERldGFpbHMsIHNuLCBwYXJ0SW5kZXgpIDogbnVsbDtcbiAgICAgIHZhciBmcmFnID0gcGFydCA/IHBhcnQuZnJhZ21lbnQgOiBnZXRGcmFnbWVudFdpdGhTTihsZXZlbERldGFpbHMsIHNuLCBmcmFnQ3VycmVudCk7XG4gICAgICBpZiAoIWZyYWcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoZnJhZ0N1cnJlbnQgJiYgZnJhZ0N1cnJlbnQgIT09IGZyYWcpIHtcbiAgICAgICAgZnJhZy5zdGF0cyA9IGZyYWdDdXJyZW50LnN0YXRzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgcGFydDogcGFydCxcbiAgICAgICAgbGV2ZWw6IGxldmVsXG4gICAgICB9O1xuICAgIH07XG4gICAgX3Byb3RvLmJ1ZmZlckZyYWdtZW50RGF0YSA9IGZ1bmN0aW9uIGJ1ZmZlckZyYWdtZW50RGF0YShkYXRhLCBmcmFnLCBwYXJ0LCBjaHVua01ldGEsIG5vQmFja3RyYWNraW5nKSB7XG4gICAgICB2YXIgX2J1ZmZlcjtcbiAgICAgIGlmICghZGF0YSB8fCB0aGlzLnN0YXRlICE9PSBTdGF0ZS5QQVJTSU5HKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhMSA9IGRhdGEuZGF0YTEsXG4gICAgICAgIGRhdGEyID0gZGF0YS5kYXRhMjtcbiAgICAgIHZhciBidWZmZXIgPSBkYXRhMTtcbiAgICAgIGlmIChkYXRhMSAmJiBkYXRhMikge1xuICAgICAgICAvLyBDb21iaW5lIHRoZSBtb29mICsgbWRhdCBzbyB0aGF0IHdlIGJ1ZmZlciB3aXRoIGEgc2luZ2xlIGFwcGVuZFxuICAgICAgICBidWZmZXIgPSBhcHBlbmRVaW50OEFycmF5KGRhdGExLCBkYXRhMik7XG4gICAgICB9XG4gICAgICBpZiAoISgoX2J1ZmZlciA9IGJ1ZmZlcikgIT0gbnVsbCAmJiBfYnVmZmVyLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHNlZ21lbnQgPSB7XG4gICAgICAgIHR5cGU6IGRhdGEudHlwZSxcbiAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgcGFydDogcGFydCxcbiAgICAgICAgY2h1bmtNZXRhOiBjaHVua01ldGEsXG4gICAgICAgIHBhcmVudDogZnJhZy50eXBlLFxuICAgICAgICBkYXRhOiBidWZmZXJcbiAgICAgIH07XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5CVUZGRVJfQVBQRU5ESU5HLCBzZWdtZW50KTtcbiAgICAgIGlmIChkYXRhLmRyb3BwZWQgJiYgZGF0YS5pbmRlcGVuZGVudCAmJiAhcGFydCkge1xuICAgICAgICBpZiAobm9CYWNrdHJhY2tpbmcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2xlYXIgYnVmZmVyIHNvIHRoYXQgd2UgcmVsb2FkIHByZXZpb3VzIHNlZ21lbnRzIHNlcXVlbnRpYWxseSBpZiByZXF1aXJlZFxuICAgICAgICB0aGlzLmZsdXNoQnVmZmVyR2FwKGZyYWcpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmZsdXNoQnVmZmVyR2FwID0gZnVuY3Rpb24gZmx1c2hCdWZmZXJHYXAoZnJhZykge1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIGlmICghbWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gSWYgY3VycmVudFRpbWUgaXMgbm90IGJ1ZmZlcmVkLCBjbGVhciB0aGUgYmFjayBidWZmZXIgc28gdGhhdCB3ZSBjYW4gYmFja3RyYWNrIGFzIG11Y2ggYXMgbmVlZGVkXG4gICAgICBpZiAoIUJ1ZmZlckhlbHBlci5pc0J1ZmZlcmVkKG1lZGlhLCBtZWRpYS5jdXJyZW50VGltZSkpIHtcbiAgICAgICAgdGhpcy5mbHVzaE1haW5CdWZmZXIoMCwgZnJhZy5zdGFydCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFJlbW92ZSBiYWNrLWJ1ZmZlciB3aXRob3V0IGludGVycnVwdGluZyBwbGF5YmFjayB0byBhbGxvdyBiYWNrIHRyYWNraW5nXG4gICAgICB2YXIgY3VycmVudFRpbWUgPSBtZWRpYS5jdXJyZW50VGltZTtcbiAgICAgIHZhciBidWZmZXJJbmZvID0gQnVmZmVySGVscGVyLmJ1ZmZlckluZm8obWVkaWEsIGN1cnJlbnRUaW1lLCAwKTtcbiAgICAgIHZhciBmcmFnRHVyYXRpb24gPSBmcmFnLmR1cmF0aW9uO1xuICAgICAgdmFyIHNlZ21lbnRGcmFjdGlvbiA9IE1hdGgubWluKHRoaXMuY29uZmlnLm1heEZyYWdMb29rVXBUb2xlcmFuY2UgKiAyLCBmcmFnRHVyYXRpb24gKiAwLjI1KTtcbiAgICAgIHZhciBzdGFydCA9IE1hdGgubWF4KE1hdGgubWluKGZyYWcuc3RhcnQgLSBzZWdtZW50RnJhY3Rpb24sIGJ1ZmZlckluZm8uZW5kIC0gc2VnbWVudEZyYWN0aW9uKSwgY3VycmVudFRpbWUgKyBzZWdtZW50RnJhY3Rpb24pO1xuICAgICAgaWYgKGZyYWcuc3RhcnQgLSBzdGFydCA+IHNlZ21lbnRGcmFjdGlvbikge1xuICAgICAgICB0aGlzLmZsdXNoTWFpbkJ1ZmZlcihzdGFydCwgZnJhZy5zdGFydCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0RndkQnVmZmVySW5mbyA9IGZ1bmN0aW9uIGdldEZ3ZEJ1ZmZlckluZm8oYnVmZmVyYWJsZSwgdHlwZSkge1xuICAgICAgdmFyIF90aGlzJG1lZGlhMjtcbiAgICAgIHZhciBwb3MgPSB0aGlzLmdldExvYWRQb3NpdGlvbigpO1xuICAgICAgaWYgKCFpc0Zpbml0ZU51bWJlcihwb3MpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIGJhY2t3YXJkU2VlayA9IHRoaXMubGFzdEN1cnJlbnRUaW1lID4gcG9zO1xuICAgICAgdmFyIG1heEJ1ZmZlckhvbGUgPSBiYWNrd2FyZFNlZWsgfHwgKF90aGlzJG1lZGlhMiA9IHRoaXMubWVkaWEpICE9IG51bGwgJiYgX3RoaXMkbWVkaWEyLnBhdXNlZCA/IDAgOiB0aGlzLmNvbmZpZy5tYXhCdWZmZXJIb2xlO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RndkQnVmZmVySW5mb0F0UG9zKGJ1ZmZlcmFibGUsIHBvcywgdHlwZSwgbWF4QnVmZmVySG9sZSk7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0RndkQnVmZmVySW5mb0F0UG9zID0gZnVuY3Rpb24gZ2V0RndkQnVmZmVySW5mb0F0UG9zKGJ1ZmZlcmFibGUsIHBvcywgdHlwZSwgbWF4QnVmZmVySG9sZSkge1xuICAgICAgdmFyIGJ1ZmZlckluZm8gPSBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyhidWZmZXJhYmxlLCBwb3MsIG1heEJ1ZmZlckhvbGUpO1xuICAgICAgLy8gV29ya2Fyb3VuZCBmbGF3IGluIGdldHRpbmcgZm9yd2FyZCBidWZmZXIgd2hlbiBtYXhCdWZmZXJIb2xlIGlzIHNtYWxsZXIgdGhhbiBnYXAgYXQgY3VycmVudCBwb3NcbiAgICAgIGlmIChidWZmZXJJbmZvLmxlbiA9PT0gMCAmJiBidWZmZXJJbmZvLm5leHRTdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBidWZmZXJlZEZyYWdBdFBvcyA9IHRoaXMuZnJhZ21lbnRUcmFja2VyLmdldEJ1ZmZlcmVkRnJhZyhwb3MsIHR5cGUpO1xuICAgICAgICBpZiAoYnVmZmVyZWRGcmFnQXRQb3MgJiYgKGJ1ZmZlckluZm8ubmV4dFN0YXJ0IDw9IGJ1ZmZlcmVkRnJhZ0F0UG9zLmVuZCB8fCBidWZmZXJlZEZyYWdBdFBvcy5nYXApKSB7XG4gICAgICAgICAgdmFyIGdhcER1cmF0aW9uID0gTWF0aC5tYXgoTWF0aC5taW4oYnVmZmVySW5mby5uZXh0U3RhcnQsIGJ1ZmZlcmVkRnJhZ0F0UG9zLmVuZCkgLSBwb3MsIG1heEJ1ZmZlckhvbGUpO1xuICAgICAgICAgIHJldHVybiBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyhidWZmZXJhYmxlLCBwb3MsIGdhcER1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJ1ZmZlckluZm87XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0TWF4QnVmZmVyTGVuZ3RoID0gZnVuY3Rpb24gZ2V0TWF4QnVmZmVyTGVuZ3RoKGxldmVsQml0cmF0ZSkge1xuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgICAgdmFyIG1heEJ1ZkxlbjtcbiAgICAgIGlmIChsZXZlbEJpdHJhdGUpIHtcbiAgICAgICAgbWF4QnVmTGVuID0gTWF0aC5tYXgoOCAqIGNvbmZpZy5tYXhCdWZmZXJTaXplIC8gbGV2ZWxCaXRyYXRlLCBjb25maWcubWF4QnVmZmVyTGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1heEJ1ZkxlbiA9IGNvbmZpZy5tYXhCdWZmZXJMZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gTWF0aC5taW4obWF4QnVmTGVuLCBjb25maWcubWF4TWF4QnVmZmVyTGVuZ3RoKTtcbiAgICB9O1xuICAgIF9wcm90by5yZWR1Y2VNYXhCdWZmZXJMZW5ndGggPSBmdW5jdGlvbiByZWR1Y2VNYXhCdWZmZXJMZW5ndGgodGhyZXNob2xkLCBmcmFnRHVyYXRpb24pIHtcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICAgIHZhciBtaW5MZW5ndGggPSBNYXRoLm1heChNYXRoLm1pbih0aHJlc2hvbGQgLSBmcmFnRHVyYXRpb24sIGNvbmZpZy5tYXhCdWZmZXJMZW5ndGgpLCBmcmFnRHVyYXRpb24pO1xuICAgICAgdmFyIHJlZHVjZWRMZW5ndGggPSBNYXRoLm1heCh0aHJlc2hvbGQgLSBmcmFnRHVyYXRpb24gKiAzLCBjb25maWcubWF4TWF4QnVmZmVyTGVuZ3RoIC8gMiwgbWluTGVuZ3RoKTtcbiAgICAgIGlmIChyZWR1Y2VkTGVuZ3RoID49IG1pbkxlbmd0aCkge1xuICAgICAgICAvLyByZWR1Y2UgbWF4IGJ1ZmZlciBsZW5ndGggYXMgaXQgbWlnaHQgYmUgdG9vIGhpZ2guIHdlIGRvIHRoaXMgdG8gYXZvaWQgbG9vcCBmbHVzaGluZyAuLi5cbiAgICAgICAgY29uZmlnLm1heE1heEJ1ZmZlckxlbmd0aCA9IHJlZHVjZWRMZW5ndGg7XG4gICAgICAgIHRoaXMud2FybihcIlJlZHVjZSBtYXggYnVmZmVyIGxlbmd0aCB0byBcIiArIHJlZHVjZWRMZW5ndGggKyBcInNcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgX3Byb3RvLmdldEFwcGVuZGVkRnJhZyA9IGZ1bmN0aW9uIGdldEFwcGVuZGVkRnJhZyhwb3NpdGlvbiwgcGxheWxpc3RUeXBlKSB7XG4gICAgICB2YXIgX3RoaXMkZnJhZ21lbnRUcmFja2VyO1xuICAgICAgaWYgKHBsYXlsaXN0VHlwZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHBsYXlsaXN0VHlwZSA9IFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU47XG4gICAgICB9XG4gICAgICB2YXIgZnJhZ09yUGFydCA9IChfdGhpcyRmcmFnbWVudFRyYWNrZXIgPSB0aGlzLmZyYWdtZW50VHJhY2tlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGZyYWdtZW50VHJhY2tlci5nZXRBcHBlbmRlZEZyYWcocG9zaXRpb24sIHBsYXlsaXN0VHlwZSk7XG4gICAgICBpZiAoZnJhZ09yUGFydCAmJiAnZnJhZ21lbnQnIGluIGZyYWdPclBhcnQpIHtcbiAgICAgICAgcmV0dXJuIGZyYWdPclBhcnQuZnJhZ21lbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnJhZ09yUGFydDtcbiAgICB9O1xuICAgIF9wcm90by5nZXROZXh0RnJhZ21lbnQgPSBmdW5jdGlvbiBnZXROZXh0RnJhZ21lbnQocG9zLCBsZXZlbERldGFpbHMpIHtcbiAgICAgIHZhciBmcmFnbWVudHMgPSBsZXZlbERldGFpbHMuZnJhZ21lbnRzO1xuICAgICAgdmFyIGZyYWdMZW4gPSBmcmFnbWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFmcmFnTGVuKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBmaW5kIGZyYWdtZW50IGluZGV4LCBjb250aWd1b3VzIHdpdGggZW5kIG9mIGJ1ZmZlciBwb3NpdGlvblxuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgICAgdmFyIHN0YXJ0ID0gZnJhZ21lbnRzWzBdLnN0YXJ0O1xuICAgICAgdmFyIGNhbkxvYWRQYXJ0cyA9IGNvbmZpZy5sb3dMYXRlbmN5TW9kZSAmJiAhIWxldmVsRGV0YWlscy5wYXJ0TGlzdDtcbiAgICAgIHZhciBmcmFnID0gbnVsbDtcbiAgICAgIGlmIChsZXZlbERldGFpbHMubGl2ZSkge1xuICAgICAgICB2YXIgaW5pdGlhbExpdmVNYW5pZmVzdFNpemUgPSBjb25maWcuaW5pdGlhbExpdmVNYW5pZmVzdFNpemU7XG4gICAgICAgIGlmIChmcmFnTGVuIDwgaW5pdGlhbExpdmVNYW5pZmVzdFNpemUpIHtcbiAgICAgICAgICB0aGlzLndhcm4oXCJOb3QgZW5vdWdoIGZyYWdtZW50cyB0byBzdGFydCBwbGF5YmFjayAoaGF2ZTogXCIgKyBmcmFnTGVuICsgXCIsIG5lZWQ6IFwiICsgaW5pdGlhbExpdmVNYW5pZmVzdFNpemUgKyBcIilcIik7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIHJlYWwgZnJhZ21lbnQgc3RhcnQgdGltZXMgZm9yIGEgbGl2ZSBzdHJlYW0gYXJlIG9ubHkga25vd24gYWZ0ZXIgdGhlIFBUUyByYW5nZSBmb3IgdGhhdCBsZXZlbCBpcyBrbm93bi5cbiAgICAgICAgLy8gSW4gb3JkZXIgdG8gZGlzY292ZXIgdGhlIHJhbmdlLCB3ZSBsb2FkIHRoZSBiZXN0IG1hdGNoaW5nIGZyYWdtZW50IGZvciB0aGF0IGxldmVsIGFuZCBkZW11eCBpdC5cbiAgICAgICAgLy8gRG8gbm90IGxvYWQgdXNpbmcgbGl2ZSBsb2dpYyBpZiB0aGUgc3RhcnRpbmcgZnJhZyBpcyByZXF1ZXN0ZWQgLSB3ZSB3YW50IHRvIHVzZSBnZXRGcmFnbWVudEF0UG9zaXRpb24oKSBzbyB0aGF0XG4gICAgICAgIC8vIHdlIGdldCB0aGUgZnJhZ21lbnQgbWF0Y2hpbmcgdGhhdCBzdGFydCB0aW1lXG4gICAgICAgIGlmICghbGV2ZWxEZXRhaWxzLlBUU0tub3duICYmICF0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCAmJiB0aGlzLnN0YXJ0UG9zaXRpb24gPT09IC0xIHx8IHBvcyA8IHN0YXJ0KSB7XG4gICAgICAgICAgdmFyIF9mcmFnO1xuICAgICAgICAgIGlmIChjYW5Mb2FkUGFydHMgJiYgIXRoaXMubG9hZGluZ1BhcnRzKSB7XG4gICAgICAgICAgICB0aGlzLmxvZyhcIkxMLVBhcnQgbG9hZGluZyBPTiBmb3IgaW5pdGlhbCBsaXZlIGZyYWdtZW50XCIpO1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nUGFydHMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmcmFnID0gdGhpcy5nZXRJbml0aWFsTGl2ZUZyYWdtZW50KGxldmVsRGV0YWlscyk7XG4gICAgICAgICAgdmFyIG1haW5TdGFydCA9IHRoaXMuaGxzLnN0YXJ0UG9zaXRpb247XG4gICAgICAgICAgdmFyIGxpdmVTeW5jUG9zaXRpb24gPSB0aGlzLmhscy5saXZlU3luY1Bvc2l0aW9uO1xuICAgICAgICAgIHZhciBzdGFydFBvc2l0aW9uID0gZnJhZyA/IChtYWluU3RhcnQgIT09IC0xICYmIG1haW5TdGFydCA+PSBzdGFydCA/IG1haW5TdGFydCA6IGxpdmVTeW5jUG9zaXRpb24pIHx8IGZyYWcuc3RhcnQgOiBwb3M7XG4gICAgICAgICAgdGhpcy5sb2coXCJTZXR0aW5nIHN0YXJ0UG9zaXRpb24gdG8gXCIgKyBzdGFydFBvc2l0aW9uICsgXCIgdG8gbWF0Y2ggc3RhcnQgZnJhZyBhdCBsaXZlIGVkZ2UuIG1haW5TdGFydDogXCIgKyBtYWluU3RhcnQgKyBcIiBsaXZlU3luY1Bvc2l0aW9uOiBcIiArIGxpdmVTeW5jUG9zaXRpb24gKyBcIiBmcmFnLnN0YXJ0OiBcIiArICgoX2ZyYWcgPSBmcmFnKSA9PSBudWxsID8gdm9pZCAwIDogX2ZyYWcuc3RhcnQpKTtcbiAgICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSB0aGlzLm5leHRMb2FkUG9zaXRpb24gPSBzdGFydFBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBvcyA8PSBzdGFydCkge1xuICAgICAgICAvLyBWb0QgcGxheWxpc3Q6IGlmIGxvYWRQb3NpdGlvbiBiZWZvcmUgc3RhcnQgb2YgcGxheWxpc3QsIGxvYWQgZmlyc3QgZnJhZ21lbnRcbiAgICAgICAgZnJhZyA9IGZyYWdtZW50c1swXTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgd2UgaGF2ZW4ndCBydW4gaW50byBhbnkgc3BlY2lhbCBjYXNlcyBhbHJlYWR5LCBqdXN0IGxvYWQgdGhlIGZyYWdtZW50IG1vc3QgY2xvc2VseSBtYXRjaGluZyB0aGUgcmVxdWVzdGVkIHBvc2l0aW9uXG4gICAgICBpZiAoIWZyYWcpIHtcbiAgICAgICAgdmFyIGVuZCA9IHRoaXMubG9hZGluZ1BhcnRzID8gbGV2ZWxEZXRhaWxzLnBhcnRFbmQgOiBsZXZlbERldGFpbHMuZnJhZ21lbnRFbmQ7XG4gICAgICAgIGZyYWcgPSB0aGlzLmdldEZyYWdtZW50QXRQb3NpdGlvbihwb3MsIGVuZCwgbGV2ZWxEZXRhaWxzKTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9ncmFtRnJhZyA9IHRoaXMuZmlsdGVyUmVwbGFjZWRQcmltYXJ5KGZyYWcsIGxldmVsRGV0YWlscyk7XG4gICAgICBpZiAoIXByb2dyYW1GcmFnICYmIGZyYWcpIHtcbiAgICAgICAgdmFyIGN1clNOSWR4ID0gZnJhZy5zbiAtIGxldmVsRGV0YWlscy5zdGFydFNOO1xuICAgICAgICBwcm9ncmFtRnJhZyA9IHRoaXMuZmlsdGVyUmVwbGFjZWRQcmltYXJ5KGZyYWdtZW50c1tjdXJTTklkeCArIDFdIHx8IG51bGwsIGxldmVsRGV0YWlscyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXBUb0luaXRGcmFnV2hlblJlcXVpcmVkKHByb2dyYW1GcmFnKTtcbiAgICB9O1xuICAgIF9wcm90by5pc0xvb3BMb2FkaW5nID0gZnVuY3Rpb24gaXNMb29wTG9hZGluZyhmcmFnLCB0YXJnZXRCdWZmZXJUaW1lKSB7XG4gICAgICB2YXIgdHJhY2tlclN0YXRlID0gdGhpcy5mcmFnbWVudFRyYWNrZXIuZ2V0U3RhdGUoZnJhZyk7XG4gICAgICByZXR1cm4gKHRyYWNrZXJTdGF0ZSA9PT0gRnJhZ21lbnRTdGF0ZS5PSyB8fCB0cmFja2VyU3RhdGUgPT09IEZyYWdtZW50U3RhdGUuUEFSVElBTCAmJiAhIWZyYWcuZ2FwKSAmJiB0aGlzLm5leHRMb2FkUG9zaXRpb24gPiB0YXJnZXRCdWZmZXJUaW1lO1xuICAgIH07XG4gICAgX3Byb3RvLmdldE5leHRGcmFnbWVudExvb3BMb2FkaW5nID0gZnVuY3Rpb24gZ2V0TmV4dEZyYWdtZW50TG9vcExvYWRpbmcoZnJhZywgbGV2ZWxEZXRhaWxzLCBidWZmZXJJbmZvLCBwbGF5bGlzdFR5cGUsIG1heEJ1Zkxlbikge1xuICAgICAgdmFyIG5leHRGcmFnbWVudCA9IG51bGw7XG4gICAgICBpZiAoZnJhZy5nYXApIHtcbiAgICAgICAgbmV4dEZyYWdtZW50ID0gdGhpcy5nZXROZXh0RnJhZ21lbnQodGhpcy5uZXh0TG9hZFBvc2l0aW9uLCBsZXZlbERldGFpbHMpO1xuICAgICAgICBpZiAobmV4dEZyYWdtZW50ICYmICFuZXh0RnJhZ21lbnQuZ2FwICYmIGJ1ZmZlckluZm8ubmV4dFN0YXJ0KSB7XG4gICAgICAgICAgLy8gTWVkaWEgYnVmZmVyZWQgYWZ0ZXIgR0FQIHRhZ3Mgc2hvdWxkIG5vdCBtYWtlIHRoZSBuZXh0IGJ1ZmZlciB0aW1lcmFuZ2UgZXhjZWVkIGZvcndhcmQgYnVmZmVyIGxlbmd0aFxuICAgICAgICAgIHZhciBuZXh0YnVmZmVySW5mbyA9IHRoaXMuZ2V0RndkQnVmZmVySW5mb0F0UG9zKHRoaXMubWVkaWFCdWZmZXIgPyB0aGlzLm1lZGlhQnVmZmVyIDogdGhpcy5tZWRpYSwgYnVmZmVySW5mby5uZXh0U3RhcnQsIHBsYXlsaXN0VHlwZSwgMCk7XG4gICAgICAgICAgaWYgKG5leHRidWZmZXJJbmZvICE9PSBudWxsICYmIGJ1ZmZlckluZm8ubGVuICsgbmV4dGJ1ZmZlckluZm8ubGVuID49IG1heEJ1Zkxlbikge1xuICAgICAgICAgICAgLy8gUmV0dXJuaW5nIGhlcmUgbWlnaHQgcmVzdWx0IGluIG5vdCBmaW5kaW5nIGFuIGF1ZGlvIGFuZCB2aWRlbyBjYW5kaWF0ZSB0byBza2lwIHRvXG4gICAgICAgICAgICB2YXIgc24gPSBuZXh0RnJhZ21lbnQuc247XG4gICAgICAgICAgICBpZiAodGhpcy5sb29wU24gIT09IHNuKSB7XG4gICAgICAgICAgICAgIHRoaXMubG9nKFwiYnVmZmVyIGZ1bGwgYWZ0ZXIgZ2FwcyBpbiBcXFwiXCIgKyBwbGF5bGlzdFR5cGUgKyBcIlxcXCIgcGxheWxpc3Qgc3RhcnRpbmcgYXQgc246IFwiICsgc24pO1xuICAgICAgICAgICAgICB0aGlzLmxvb3BTbiA9IHNuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmxvb3BTbiA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBuZXh0RnJhZ21lbnQ7XG4gICAgfTtcbiAgICBfcHJvdG8uZmlsdGVyUmVwbGFjZWRQcmltYXJ5ID0gZnVuY3Rpb24gZmlsdGVyUmVwbGFjZWRQcmltYXJ5KGZyYWcsIGRldGFpbHMpIHtcbiAgICAgIGlmICghZnJhZykge1xuICAgICAgICByZXR1cm4gZnJhZztcbiAgICAgIH1cbiAgICAgIGlmIChpbnRlcnN0aXRpYWxzRW5hYmxlZCh0aGlzLmhscy5jb25maWcpICYmIGZyYWcudHlwZSAhPT0gUGxheWxpc3RMZXZlbFR5cGUuU1VCVElUTEUpIHtcbiAgICAgICAgLy8gRG8gbm90IGxvYWQgZnJhZ21lbnRzIG91dHNpZGUgdGhlIGJ1ZmZlcmluZyBzY2hlZHVsZSBzZWdtZW50XG4gICAgICAgIHZhciBpbnRlcnN0aXRpYWxzID0gdGhpcy5obHMuaW50ZXJzdGl0aWFsc01hbmFnZXI7XG4gICAgICAgIHZhciBidWZmZXJpbmdJdGVtID0gaW50ZXJzdGl0aWFscyA9PSBudWxsID8gdm9pZCAwIDogaW50ZXJzdGl0aWFscy5idWZmZXJpbmdJdGVtO1xuICAgICAgICBpZiAoYnVmZmVyaW5nSXRlbSkge1xuICAgICAgICAgIHZhciBidWZmZXJpbmdJbnRlcnN0aXRpYWwgPSBidWZmZXJpbmdJdGVtLmV2ZW50O1xuICAgICAgICAgIGlmIChidWZmZXJpbmdJbnRlcnN0aXRpYWwpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCBzdHJlYW0gZnJhZ21lbnRzIHdoaWxlIGJ1ZmZlcmluZyBJbnRlcnN0aXRpYWwgRXZlbnRzIChleGNlcHQgZm9yIG92ZXJsYXAgYXQgdGhlIHN0YXJ0KVxuICAgICAgICAgICAgaWYgKGJ1ZmZlcmluZ0ludGVyc3RpdGlhbC5hcHBlbmRJblBsYWNlIHx8IE1hdGguYWJzKGZyYWcuc3RhcnQgLSBidWZmZXJpbmdJdGVtLnN0YXJ0KSA+IDEgfHwgYnVmZmVyaW5nSXRlbS5zdGFydCA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTGltaXQgZnJhZ21lbnQgbG9hZGluZyB0byBtZWRpYSBpbiBzY2hlZHVsZSBpdGVtXG4gICAgICAgICAgICBpZiAoZnJhZy5lbmQgPD0gYnVmZmVyaW5nSXRlbS5zdGFydCAmJiAoZGV0YWlscyA9PSBudWxsID8gdm9pZCAwIDogZGV0YWlscy5saXZlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgLy8gZnJhZ21lbnQgZW5kcyBieSBzY2hlZHVsZSBpdGVtIHN0YXJ0XG4gICAgICAgICAgICAgIC8vIHRoaXMuZnJhZ21lbnRUcmFja2VyLmZyYWdCdWZmZXJlZChmcmFnLCB0cnVlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZnJhZy5zdGFydCA+IGJ1ZmZlcmluZ0l0ZW0uZW5kICYmIGJ1ZmZlcmluZ0l0ZW0ubmV4dEV2ZW50KSB7XG4gICAgICAgICAgICAgIC8vIGZyYWdtZW50IGlzIHBhc3Qgc2NoZWR1bGUgaXRlbSBlbmRcbiAgICAgICAgICAgICAgLy8gYWxsb3cgc29tZSBvdmVyZmxvdyB3aGVuIG5vdCBhcHBlbmRpbmcgaW4gcGxhY2UgdG8gcHJldmVudCBzdGFsbHNcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcmluZ0l0ZW0ubmV4dEV2ZW50LmFwcGVuZEluUGxhY2UgfHwgZnJhZy5zdGFydCAtIGJ1ZmZlcmluZ0l0ZW0uZW5kID4gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNraXAgbG9hZGluZyBvZiBmcmFnbWVudHMgdGhhdCBvdmVybGFwIGNvbXBsZXRlbHkgd2l0aCBhcHBlbmRJblBsYWNlIGludGVyc3RpdGlhbHNcbiAgICAgICAgdmFyIHBsYXllclF1ZXVlID0gaW50ZXJzdGl0aWFscyA9PSBudWxsID8gdm9pZCAwIDogaW50ZXJzdGl0aWFscy5wbGF5ZXJRdWV1ZTtcbiAgICAgICAgaWYgKHBsYXllclF1ZXVlKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IHBsYXllclF1ZXVlLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgdmFyIGludGVyc3RpdGlhbCA9IHBsYXllclF1ZXVlW2ldLmludGVyc3RpdGlhbDtcbiAgICAgICAgICAgIGlmIChpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZSAmJiBmcmFnLnN0YXJ0ID49IGludGVyc3RpdGlhbC5zdGFydFRpbWUgJiYgZnJhZy5lbmQgPD0gaW50ZXJzdGl0aWFsLnJlc3VtZVRpbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZnJhZztcbiAgICB9O1xuICAgIF9wcm90by5tYXBUb0luaXRGcmFnV2hlblJlcXVpcmVkID0gZnVuY3Rpb24gbWFwVG9Jbml0RnJhZ1doZW5SZXF1aXJlZChmcmFnKSB7XG4gICAgICAvLyBJZiBhbiBpbml0U2VnbWVudCBpcyBwcmVzZW50LCBpdCBtdXN0IGJlIGJ1ZmZlcmVkIGZpcnN0XG4gICAgICBpZiAoZnJhZyAhPSBudWxsICYmIGZyYWcuaW5pdFNlZ21lbnQgJiYgIShmcmFnICE9IG51bGwgJiYgZnJhZy5pbml0U2VnbWVudC5kYXRhKSAmJiAhdGhpcy5iaXRyYXRlVGVzdCkge1xuICAgICAgICByZXR1cm4gZnJhZy5pbml0U2VnbWVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcmFnO1xuICAgIH07XG4gICAgX3Byb3RvLmdldE5leHRQYXJ0ID0gZnVuY3Rpb24gZ2V0TmV4dFBhcnQocGFydExpc3QsIGZyYWcsIHRhcmdldEJ1ZmZlclRpbWUpIHtcbiAgICAgIHZhciBuZXh0UGFydCA9IC0xO1xuICAgICAgdmFyIGNvbnRpZ3VvdXMgPSBmYWxzZTtcbiAgICAgIHZhciBpbmRlcGVuZGVudEF0dHJPbWl0dGVkID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwYXJ0TGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgcGFydCA9IHBhcnRMaXN0W2ldO1xuICAgICAgICBpbmRlcGVuZGVudEF0dHJPbWl0dGVkID0gaW5kZXBlbmRlbnRBdHRyT21pdHRlZCAmJiAhcGFydC5pbmRlcGVuZGVudDtcbiAgICAgICAgaWYgKG5leHRQYXJ0ID4gLTEgJiYgdGFyZ2V0QnVmZmVyVGltZSA8IHBhcnQuc3RhcnQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgbG9hZGVkID0gcGFydC5sb2FkZWQ7XG4gICAgICAgIGlmIChsb2FkZWQpIHtcbiAgICAgICAgICBuZXh0UGFydCA9IC0xO1xuICAgICAgICB9IGVsc2UgaWYgKChjb250aWd1b3VzIHx8IHBhcnQuaW5kZXBlbmRlbnQgfHwgaW5kZXBlbmRlbnRBdHRyT21pdHRlZCkgJiYgcGFydC5mcmFnbWVudCA9PT0gZnJhZykge1xuICAgICAgICAgIG5leHRQYXJ0ID0gaTtcbiAgICAgICAgfVxuICAgICAgICBjb250aWd1b3VzID0gbG9hZGVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHRQYXJ0O1xuICAgIH07XG4gICAgX3Byb3RvLmxvYWRlZEVuZE9mUGFydHMgPSBmdW5jdGlvbiBsb2FkZWRFbmRPZlBhcnRzKHBhcnRMaXN0LCB0YXJnZXRCdWZmZXJUaW1lKSB7XG4gICAgICB2YXIgbGFzdFBhcnQgPSBwYXJ0TGlzdFtwYXJ0TGlzdC5sZW5ndGggLSAxXTtcbiAgICAgIHJldHVybiBsYXN0UGFydCAmJiB0YXJnZXRCdWZmZXJUaW1lID4gbGFzdFBhcnQuc3RhcnQgJiYgbGFzdFBhcnQubG9hZGVkO1xuICAgIH1cblxuICAgIC8qXG4gICAgIFRoaXMgbWV0aG9kIGlzIHVzZWQgZmluZCB0aGUgYmVzdCBtYXRjaGluZyBmaXJzdCBmcmFnbWVudCBmb3IgYSBsaXZlIHBsYXlsaXN0LiBUaGlzIGZyYWdtZW50IGlzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZVxuICAgICBcInNsaWRpbmdcIiBvZiB0aGUgcGxheWxpc3QsIHdoaWNoIGlzIGl0cyBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgcGxheWJhY2suIEFmdGVyIHNsaWRpbmcgd2UgY2FuIGNvbXB1dGUgdGhlIHJlYWxcbiAgICAgc3RhcnQgYW5kIGVuZCB0aW1lcyBmb3IgZWFjaCBmcmFnbWVudCBpbiB0aGUgcGxheWxpc3QgKGFmdGVyIHdoaWNoIHRoaXMgbWV0aG9kIHdpbGwgbm90IG5lZWQgdG8gYmUgY2FsbGVkKS5cbiAgICAqLztcbiAgICBfcHJvdG8uZ2V0SW5pdGlhbExpdmVGcmFnbWVudCA9IGZ1bmN0aW9uIGdldEluaXRpYWxMaXZlRnJhZ21lbnQobGV2ZWxEZXRhaWxzKSB7XG4gICAgICB2YXIgZnJhZ21lbnRzID0gbGV2ZWxEZXRhaWxzLmZyYWdtZW50cztcbiAgICAgIHZhciBmcmFnUHJldmlvdXMgPSB0aGlzLmZyYWdQcmV2aW91cztcbiAgICAgIHZhciBmcmFnID0gbnVsbDtcbiAgICAgIGlmIChmcmFnUHJldmlvdXMpIHtcbiAgICAgICAgaWYgKGxldmVsRGV0YWlscy5oYXNQcm9ncmFtRGF0ZVRpbWUpIHtcbiAgICAgICAgICAvLyBQcmVmZXIgdXNpbmcgUERULCBiZWNhdXNlIGl0IGNhbiBiZSBhY2N1cmF0ZSBlbm91Z2ggdG8gY2hvb3NlIHRoZSBjb3JyZWN0IGZyYWdtZW50IHdpdGhvdXQga25vd2luZyB0aGUgbGV2ZWwgc2xpZGluZ1xuICAgICAgICAgIHRoaXMubG9nKFwiTGl2ZSBwbGF5bGlzdCwgc3dpdGNoaW5nIHBsYXlsaXN0LCBsb2FkIGZyYWcgd2l0aCBzYW1lIFBEVDogXCIgKyBmcmFnUHJldmlvdXMucHJvZ3JhbURhdGVUaW1lKTtcbiAgICAgICAgICBmcmFnID0gZmluZEZyYWdtZW50QnlQRFQoZnJhZ21lbnRzLCBmcmFnUHJldmlvdXMuZW5kUHJvZ3JhbURhdGVUaW1lLCB0aGlzLmNvbmZpZy5tYXhGcmFnTG9va1VwVG9sZXJhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZyYWcpIHtcbiAgICAgICAgICAvLyBTTiBkb2VzIG5vdCBuZWVkIHRvIGJlIGFjY3VyYXRlIGJldHdlZW4gcmVuZGl0aW9ucywgYnV0IGRlcGVuZGluZyBvbiB0aGUgcGFja2FnaW5nIGl0IG1heSBiZSBzby5cbiAgICAgICAgICB2YXIgdGFyZ2V0U04gPSBmcmFnUHJldmlvdXMuc24gKyAxO1xuICAgICAgICAgIGlmICh0YXJnZXRTTiA+PSBsZXZlbERldGFpbHMuc3RhcnRTTiAmJiB0YXJnZXRTTiA8PSBsZXZlbERldGFpbHMuZW5kU04pIHtcbiAgICAgICAgICAgIHZhciBmcmFnTmV4dCA9IGZyYWdtZW50c1t0YXJnZXRTTiAtIGxldmVsRGV0YWlscy5zdGFydFNOXTtcbiAgICAgICAgICAgIC8vIEVuc3VyZSB0aGF0IHdlJ3JlIHN0YXlpbmcgd2l0aGluIHRoZSBjb250aW51aXR5IHJhbmdlLCBzaW5jZSBQVFMgcmVzZXRzIHVwb24gYSBuZXcgcmFuZ2VcbiAgICAgICAgICAgIGlmIChmcmFnUHJldmlvdXMuY2MgPT09IGZyYWdOZXh0LmNjKSB7XG4gICAgICAgICAgICAgIGZyYWcgPSBmcmFnTmV4dDtcbiAgICAgICAgICAgICAgdGhpcy5sb2coXCJMaXZlIHBsYXlsaXN0LCBzd2l0Y2hpbmcgcGxheWxpc3QsIGxvYWQgZnJhZyB3aXRoIG5leHQgU046IFwiICsgZnJhZy5zbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEl0J3MgaW1wb3J0YW50IHRvIHN0YXkgd2l0aGluIHRoZSBjb250aW51aXR5IHJhbmdlIGlmIGF2YWlsYWJsZTsgb3RoZXJ3aXNlIHRoZSBmcmFnbWVudHMgaW4gdGhlIHBsYXlsaXN0XG4gICAgICAgICAgLy8gd2lsbCBoYXZlIHRoZSB3cm9uZyBzdGFydCB0aW1lc1xuICAgICAgICAgIGlmICghZnJhZykge1xuICAgICAgICAgICAgZnJhZyA9IGZpbmROZWFyZXN0V2l0aENDKGxldmVsRGV0YWlscywgZnJhZ1ByZXZpb3VzLmNjLCBmcmFnUHJldmlvdXMuZW5kKTtcbiAgICAgICAgICAgIGlmIChmcmFnKSB7XG4gICAgICAgICAgICAgIHRoaXMubG9nKFwiTGl2ZSBwbGF5bGlzdCwgc3dpdGNoaW5nIHBsYXlsaXN0LCBsb2FkIGZyYWcgd2l0aCBzYW1lIENDOiBcIiArIGZyYWcuc24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmluZCBhIG5ldyBzdGFydCBmcmFnbWVudCB3aGVuIGZyYWdQcmV2aW91cyBpcyBudWxsXG4gICAgICAgIHZhciBsaXZlU3RhcnQgPSB0aGlzLmhscy5saXZlU3luY1Bvc2l0aW9uO1xuICAgICAgICBpZiAobGl2ZVN0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgZnJhZyA9IHRoaXMuZ2V0RnJhZ21lbnRBdFBvc2l0aW9uKGxpdmVTdGFydCwgdGhpcy5iaXRyYXRlVGVzdCA/IGxldmVsRGV0YWlscy5mcmFnbWVudEVuZCA6IGxldmVsRGV0YWlscy5lZGdlLCBsZXZlbERldGFpbHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZnJhZztcbiAgICB9XG5cbiAgICAvKlxuICAgIFRoaXMgbWV0aG9kIGZpbmRzIHRoZSBiZXN0IG1hdGNoaW5nIGZyYWdtZW50IGdpdmVuIHRoZSBwcm92aWRlZCBwb3NpdGlvbi5cbiAgICAgKi87XG4gICAgX3Byb3RvLmdldEZyYWdtZW50QXRQb3NpdGlvbiA9IGZ1bmN0aW9uIGdldEZyYWdtZW50QXRQb3NpdGlvbihidWZmZXJFbmQsIGVuZCwgbGV2ZWxEZXRhaWxzKSB7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgICB2YXIgZnJhZ1ByZXZpb3VzID0gdGhpcy5mcmFnUHJldmlvdXM7XG4gICAgICB2YXIgZnJhZ21lbnRzID0gbGV2ZWxEZXRhaWxzLmZyYWdtZW50cyxcbiAgICAgICAgZW5kU04gPSBsZXZlbERldGFpbHMuZW5kU047XG4gICAgICB2YXIgZnJhZ21lbnRIaW50ID0gbGV2ZWxEZXRhaWxzLmZyYWdtZW50SGludDtcbiAgICAgIHZhciBtYXhGcmFnTG9va1VwVG9sZXJhbmNlID0gY29uZmlnLm1heEZyYWdMb29rVXBUb2xlcmFuY2U7XG4gICAgICB2YXIgcGFydExpc3QgPSBsZXZlbERldGFpbHMucGFydExpc3Q7XG4gICAgICB2YXIgbG9hZGluZ1BhcnRzID0gISEodGhpcy5sb2FkaW5nUGFydHMgJiYgcGFydExpc3QgIT0gbnVsbCAmJiBwYXJ0TGlzdC5sZW5ndGggJiYgZnJhZ21lbnRIaW50KTtcbiAgICAgIGlmIChsb2FkaW5nUGFydHMgJiYgZnJhZ21lbnRIaW50ICYmICF0aGlzLmJpdHJhdGVUZXN0ICYmIHBhcnRMaXN0W3BhcnRMaXN0Lmxlbmd0aCAtIDFdLmZyYWdtZW50LnNuID09PSBmcmFnbWVudEhpbnQuc24pIHtcbiAgICAgICAgLy8gSW5jbHVkZSBpbmNvbXBsZXRlIGZyYWdtZW50IHdpdGggcGFydHMgYXQgZW5kXG4gICAgICAgIGZyYWdtZW50cyA9IGZyYWdtZW50cy5jb25jYXQoZnJhZ21lbnRIaW50KTtcbiAgICAgICAgZW5kU04gPSBmcmFnbWVudEhpbnQuc247XG4gICAgICB9XG4gICAgICB2YXIgZnJhZztcbiAgICAgIGlmIChidWZmZXJFbmQgPCBlbmQpIHtcbiAgICAgICAgdmFyIF90aGlzJG1lZGlhMztcbiAgICAgICAgdmFyIGJhY2t3YXJkU2VlayA9IGJ1ZmZlckVuZCA8IHRoaXMubGFzdEN1cnJlbnRUaW1lO1xuICAgICAgICB2YXIgbG9va3VwVG9sZXJhbmNlID0gYmFja3dhcmRTZWVrIHx8IGJ1ZmZlckVuZCA+IGVuZCAtIG1heEZyYWdMb29rVXBUb2xlcmFuY2UgfHwgKF90aGlzJG1lZGlhMyA9IHRoaXMubWVkaWEpICE9IG51bGwgJiYgX3RoaXMkbWVkaWEzLnBhdXNlZCB8fCAhdGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQgPyAwIDogbWF4RnJhZ0xvb2tVcFRvbGVyYW5jZTtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSB0b2xlcmFuY2UgaWYgaXQgd291bGQgcHV0IHRoZSBidWZmZXJFbmQgcGFzdCB0aGUgYWN0dWFsIGVuZCBvZiBzdHJlYW1cbiAgICAgICAgLy8gVXNlcyBidWZmZXIgYW5kIHNlcXVlbmNlIG51bWJlciB0byBjYWxjdWxhdGUgc3dpdGNoIHNlZ21lbnQgKHJlcXVpcmVkIGlmIHVzaW5nIEVYVC1YLURJU0NPTlRJTlVJVFktU0VRVUVOQ0UpXG4gICAgICAgIGZyYWcgPSBmaW5kRnJhZ21lbnRCeVBUUyhmcmFnUHJldmlvdXMsIGZyYWdtZW50cywgYnVmZmVyRW5kLCBsb29rdXBUb2xlcmFuY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVhY2ggZW5kIG9mIHBsYXlsaXN0XG4gICAgICAgIGZyYWcgPSBmcmFnbWVudHNbZnJhZ21lbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuICAgICAgaWYgKGZyYWcpIHtcbiAgICAgICAgdmFyIGN1clNOSWR4ID0gZnJhZy5zbiAtIGxldmVsRGV0YWlscy5zdGFydFNOO1xuICAgICAgICAvLyBNb3ZlIGZyYWdQcmV2aW91cyBmb3J3YXJkIHRvIHN1cHBvcnQgZm9yY2luZyB0aGUgbmV4dCBmcmFnbWVudCB0byBsb2FkXG4gICAgICAgIC8vIHdoZW4gdGhlIGJ1ZmZlciBjYXRjaGVzIHVwIHRvIGEgcHJldmlvdXNseSBidWZmZXJlZCByYW5nZS5cbiAgICAgICAgdmFyIGZyYWdTdGF0ZSA9IHRoaXMuZnJhZ21lbnRUcmFja2VyLmdldFN0YXRlKGZyYWcpO1xuICAgICAgICBpZiAoZnJhZ1N0YXRlID09PSBGcmFnbWVudFN0YXRlLk9LIHx8IGZyYWdTdGF0ZSA9PT0gRnJhZ21lbnRTdGF0ZS5QQVJUSUFMICYmIGZyYWcuZ2FwKSB7XG4gICAgICAgICAgZnJhZ1ByZXZpb3VzID0gZnJhZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJhZ1ByZXZpb3VzICYmIGZyYWcuc24gPT09IGZyYWdQcmV2aW91cy5zbiAmJiAoIWxvYWRpbmdQYXJ0cyB8fCBwYXJ0TGlzdFswXS5mcmFnbWVudC5zbiA+IGZyYWcuc24gfHwgIWxldmVsRGV0YWlscy5saXZlICYmICFsb2FkaW5nUGFydHMpKSB7XG4gICAgICAgICAgLy8gRm9yY2UgdGhlIG5leHQgZnJhZ21lbnQgdG8gbG9hZCBpZiB0aGUgcHJldmlvdXMgb25lIHdhcyBhbHJlYWR5IHNlbGVjdGVkLiBUaGlzIGNhbiBvY2Nhc2lvbmFsbHkgaGFwcGVuIHdpdGhcbiAgICAgICAgICAvLyBub24tdW5pZm9ybSBmcmFnbWVudCBkdXJhdGlvbnNcbiAgICAgICAgICB2YXIgc2FtZUxldmVsID0gZnJhZ1ByZXZpb3VzICYmIGZyYWcubGV2ZWwgPT09IGZyYWdQcmV2aW91cy5sZXZlbDtcbiAgICAgICAgICBpZiAoc2FtZUxldmVsKSB7XG4gICAgICAgICAgICB2YXIgbmV4dEZyYWcgPSBmcmFnbWVudHNbY3VyU05JZHggKyAxXTtcbiAgICAgICAgICAgIGlmIChmcmFnLnNuIDwgZW5kU04gJiYgdGhpcy5mcmFnbWVudFRyYWNrZXIuZ2V0U3RhdGUobmV4dEZyYWcpICE9PSBGcmFnbWVudFN0YXRlLk9LKSB7XG4gICAgICAgICAgICAgIGZyYWcgPSBuZXh0RnJhZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZyYWcgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyYWc7XG4gICAgfTtcbiAgICBfcHJvdG8uYWxpZ25QbGF5bGlzdHMgPSBmdW5jdGlvbiBhbGlnblBsYXlsaXN0cyhkZXRhaWxzLCBwcmV2aW91c0RldGFpbHMsIHN3aXRjaERldGFpbHMpIHtcbiAgICAgIC8vIFRPRE86IElmIG5vdCBmb3IgYHNob3VsZEFsaWduT25EaXNjb250aW51aXRpZXNgIHJlcXVpcmluZyBmcmFnUHJldmlvdXMuY2MsXG4gICAgICAvLyAgdGhpcyBjb3VsZCBhbGwgZ28gaW4gbGV2ZWwtaGVscGVyIG1lcmdlRGV0YWlscygpXG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5mcmFnbWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgdGhpcy53YXJuKFwiTm8gZnJhZ21lbnRzIGluIGxpdmUgcGxheWxpc3RcIik7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgdmFyIHNsaWRpbmdTdGFydCA9IGRldGFpbHMuZnJhZ21lbnRTdGFydDtcbiAgICAgIHZhciBmaXJzdExldmVsTG9hZCA9ICFwcmV2aW91c0RldGFpbHM7XG4gICAgICB2YXIgYWxpZ25lZCA9IGRldGFpbHMuYWxpZ25lZFNsaWRpbmcgJiYgaXNGaW5pdGVOdW1iZXIoc2xpZGluZ1N0YXJ0KTtcbiAgICAgIGlmIChmaXJzdExldmVsTG9hZCB8fCAhYWxpZ25lZCAmJiAhc2xpZGluZ1N0YXJ0KSB7XG4gICAgICAgIGFsaWduU3RyZWFtKHN3aXRjaERldGFpbHMsIGRldGFpbHMpO1xuICAgICAgICB2YXIgYWxpZ25lZFNsaWRpbmdTdGFydCA9IGRldGFpbHMuZnJhZ21lbnRTdGFydDtcbiAgICAgICAgdGhpcy5sb2coXCJMaXZlIHBsYXlsaXN0IHNsaWRpbmc6IFwiICsgYWxpZ25lZFNsaWRpbmdTdGFydC50b0ZpeGVkKDIpICsgXCIgc3RhcnQtc246IFwiICsgKHByZXZpb3VzRGV0YWlscyA/IHByZXZpb3VzRGV0YWlscy5zdGFydFNOIDogJ25hJykgKyBcIi0+XCIgKyBkZXRhaWxzLnN0YXJ0U04gKyBcIiBmcmFnbWVudHM6IFwiICsgbGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGFsaWduZWRTbGlkaW5nU3RhcnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2xpZGluZ1N0YXJ0O1xuICAgIH07XG4gICAgX3Byb3RvLndhaXRGb3JDZG5UdW5lSW4gPSBmdW5jdGlvbiB3YWl0Rm9yQ2RuVHVuZUluKGRldGFpbHMpIHtcbiAgICAgIC8vIFdhaXQgZm9yIExvdy1MYXRlbmN5IENETiBUdW5lLWluIHRvIGdldCBhbiB1cGRhdGVkIHBsYXlsaXN0XG4gICAgICB2YXIgYWR2YW5jZVBhcnRMaW1pdCA9IDM7XG4gICAgICByZXR1cm4gZGV0YWlscy5saXZlICYmIGRldGFpbHMuY2FuQmxvY2tSZWxvYWQgJiYgZGV0YWlscy5wYXJ0VGFyZ2V0ICYmIGRldGFpbHMudHVuZUluR29hbCA+IE1hdGgubWF4KGRldGFpbHMucGFydEhvbGRCYWNrLCBkZXRhaWxzLnBhcnRUYXJnZXQgKiBhZHZhbmNlUGFydExpbWl0KTtcbiAgICB9O1xuICAgIF9wcm90by5zZXRTdGFydFBvc2l0aW9uID0gZnVuY3Rpb24gc2V0U3RhcnRQb3NpdGlvbihkZXRhaWxzLCBzbGlkaW5nKSB7XG4gICAgICAvLyBjb21wdXRlIHN0YXJ0IHBvc2l0aW9uIGlmIHNldCB0byAtMS4gdXNlIGl0IHN0cmFpZ2h0IGF3YXkgaWYgdmFsdWUgaXMgZGVmaW5lZFxuICAgICAgdmFyIHN0YXJ0UG9zaXRpb24gPSB0aGlzLnN0YXJ0UG9zaXRpb247XG4gICAgICBpZiAoc3RhcnRQb3NpdGlvbiA8IHNsaWRpbmcpIHtcbiAgICAgICAgc3RhcnRQb3NpdGlvbiA9IC0xO1xuICAgICAgfVxuICAgICAgdmFyIHRpbWVsaW5lT2Zmc2V0ID0gdGhpcy50aW1lbGluZU9mZnNldDtcbiAgICAgIGlmIChzdGFydFBvc2l0aW9uID09PSAtMSkge1xuICAgICAgICAvLyBVc2UgUGxheWxpc3QgRVhULVgtU1RBUlQ6VElNRS1PRkZTRVQgd2hlbiBzZXRcbiAgICAgICAgLy8gUHJpb3JpdGl6ZSBNdWx0aXZhcmlhbnQgUGxheWxpc3Qgb2Zmc2V0IHNvIHRoYXQgbWFpbiwgYXVkaW8sIGFuZCBzdWJ0aXRsZSBzdHJlYW0tY29udHJvbGxlciBzdGFydCB0aW1lcyBtYXRjaFxuICAgICAgICB2YXIgb2Zmc2V0SW5NdWx0aXZhcmlhbnRQbGF5bGlzdCA9IHRoaXMuc3RhcnRUaW1lT2Zmc2V0ICE9PSBudWxsO1xuICAgICAgICB2YXIgc3RhcnRUaW1lT2Zmc2V0ID0gb2Zmc2V0SW5NdWx0aXZhcmlhbnRQbGF5bGlzdCA/IHRoaXMuc3RhcnRUaW1lT2Zmc2V0IDogZGV0YWlscy5zdGFydFRpbWVPZmZzZXQ7XG4gICAgICAgIGlmIChzdGFydFRpbWVPZmZzZXQgIT09IG51bGwgJiYgaXNGaW5pdGVOdW1iZXIoc3RhcnRUaW1lT2Zmc2V0KSkge1xuICAgICAgICAgIHN0YXJ0UG9zaXRpb24gPSBzbGlkaW5nICsgc3RhcnRUaW1lT2Zmc2V0O1xuICAgICAgICAgIGlmIChzdGFydFRpbWVPZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICBzdGFydFBvc2l0aW9uICs9IGRldGFpbHMuZWRnZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhcnRQb3NpdGlvbiA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRpbmcsIHN0YXJ0UG9zaXRpb24pLCBzbGlkaW5nICsgZGV0YWlscy50b3RhbGR1cmF0aW9uKTtcbiAgICAgICAgICB0aGlzLmxvZyhcIlNldHRpbmcgc3RhcnRQb3NpdGlvbiB0byBcIiArIHN0YXJ0UG9zaXRpb24gKyBcIiBmb3Igc3RhcnQgdGltZSBvZmZzZXQgXCIgKyBzdGFydFRpbWVPZmZzZXQgKyBcIiBmb3VuZCBpbiBcIiArIChvZmZzZXRJbk11bHRpdmFyaWFudFBsYXlsaXN0ID8gJ211bHRpdmFyaWFudCcgOiAnbWVkaWEnKSArIFwiIHBsYXlsaXN0XCIpO1xuICAgICAgICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IHN0YXJ0UG9zaXRpb247XG4gICAgICAgIH0gZWxzZSBpZiAoZGV0YWlscy5saXZlKSB7XG4gICAgICAgICAgLy8gTGVhdmUgdGhpcy5zdGFydFBvc2l0aW9uIGF0IC0xLCBzbyB0aGF0IHdlIGNhbiB1c2UgYGdldEluaXRpYWxMaXZlRnJhZ21lbnRgIGxvZ2ljIHdoZW4gc3RhcnRQb3NpdGlvbiBoYXNcbiAgICAgICAgICAvLyBub3QgYmVlbiBzcGVjaWZpZWQgdmlhIHRoZSBjb25maWcgb3IgYW4gYXMgYW4gYXJndW1lbnQgdG8gc3RhcnRMb2FkICgjMzczNikuXG4gICAgICAgICAgc3RhcnRQb3NpdGlvbiA9IHRoaXMuaGxzLmxpdmVTeW5jUG9zaXRpb24gfHwgc2xpZGluZztcbiAgICAgICAgICB0aGlzLmxvZyhcIlNldHRpbmcgc3RhcnRQb3NpdGlvbiB0byAtMSB0byBzdGFydCBhdCBsaXZlIGVkZ2UgXCIgKyBzdGFydFBvc2l0aW9uKTtcbiAgICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxvZyhcInNldHRpbmcgc3RhcnRQb3NpdGlvbiB0byAwIGJ5IGRlZmF1bHRcIik7XG4gICAgICAgICAgdGhpcy5zdGFydFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0Q3VycmVudFRpbWUgPSBzdGFydFBvc2l0aW9uICsgdGltZWxpbmVPZmZzZXQ7XG4gICAgICB9XG4gICAgICB0aGlzLm5leHRMb2FkUG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgdGltZWxpbmVPZmZzZXQ7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0TG9hZFBvc2l0aW9uID0gZnVuY3Rpb24gZ2V0TG9hZFBvc2l0aW9uKCkge1xuICAgICAgdmFyIF90aGlzJGhscztcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgICAvLyBpZiB3ZSBoYXZlIG5vdCB5ZXQgbG9hZGVkIGFueSBmcmFnbWVudCwgc3RhcnQgbG9hZGluZyBmcm9tIHN0YXJ0IHBvc2l0aW9uXG4gICAgICB2YXIgcG9zID0gMDtcbiAgICAgIGlmICgoX3RoaXMkaGxzID0gdGhpcy5obHMpICE9IG51bGwgJiYgX3RoaXMkaGxzLmhhc0Vub3VnaFRvU3RhcnQgJiYgbWVkaWEpIHtcbiAgICAgICAgcG9zID0gbWVkaWEuY3VycmVudFRpbWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubmV4dExvYWRQb3NpdGlvbiA+PSAwKSB7XG4gICAgICAgIHBvcyA9IHRoaXMubmV4dExvYWRQb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwb3M7XG4gICAgfTtcbiAgICBfcHJvdG8uaGFuZGxlRnJhZ0xvYWRBYm9ydGVkID0gZnVuY3Rpb24gaGFuZGxlRnJhZ0xvYWRBYm9ydGVkKGZyYWcsIHBhcnQpIHtcbiAgICAgIGlmICh0aGlzLnRyYW5zbXV4ZXIgJiYgZnJhZy50eXBlID09PSB0aGlzLnBsYXlsaXN0VHlwZSAmJiBpc01lZGlhRnJhZ21lbnQoZnJhZykgJiYgZnJhZy5zdGF0cy5hYm9ydGVkKSB7XG4gICAgICAgIHRoaXMud2FybihcIkZyYWdtZW50IFwiICsgZnJhZy5zbiArIChwYXJ0ID8gJyBwYXJ0ICcgKyBwYXJ0LmluZGV4IDogJycpICsgXCIgb2YgXCIgKyB0aGlzLnBsYXlsaXN0TGFiZWwoKSArIFwiIFwiICsgZnJhZy5sZXZlbCArIFwiIHdhcyBhYm9ydGVkXCIpO1xuICAgICAgICB0aGlzLnJlc2V0RnJhZ21lbnRMb2FkaW5nKGZyYWcpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0RnJhZ21lbnRMb2FkaW5nID0gZnVuY3Rpb24gcmVzZXRGcmFnbWVudExvYWRpbmcoZnJhZykge1xuICAgICAgaWYgKCF0aGlzLmZyYWdDdXJyZW50IHx8ICF0aGlzLmZyYWdDb250ZXh0Q2hhbmdlZChmcmFnKSAmJiB0aGlzLnN0YXRlICE9PSBTdGF0ZS5GUkFHX0xPQURJTkdfV0FJVElOR19SRVRSWSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkZyYWdtZW50T3JLZXlMb2FkRXJyb3IgPSBmdW5jdGlvbiBvbkZyYWdtZW50T3JLZXlMb2FkRXJyb3IoZmlsdGVyVHlwZSwgZGF0YSkge1xuICAgICAgaWYgKGRhdGEuY2h1bmtNZXRhICYmICFkYXRhLmZyYWcpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmdldEN1cnJlbnRDb250ZXh0KGRhdGEuY2h1bmtNZXRhKTtcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICBkYXRhLmZyYWcgPSBjb250ZXh0LmZyYWc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnO1xuICAgICAgLy8gSGFuZGxlIGZyYWcgZXJyb3IgcmVsYXRlZCB0byBjYWxsZXIncyBmaWx0ZXJUeXBlXG4gICAgICBpZiAoIWZyYWcgfHwgZnJhZy50eXBlICE9PSBmaWx0ZXJUeXBlIHx8ICF0aGlzLmxldmVscykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5mcmFnQ29udGV4dENoYW5nZWQoZnJhZykpIHtcbiAgICAgICAgdmFyIF90aGlzJGZyYWdDdXJyZW50O1xuICAgICAgICB0aGlzLndhcm4oXCJGcmFnIGxvYWQgZXJyb3IgbXVzdCBtYXRjaCBjdXJyZW50IGZyYWcgdG8gcmV0cnkgXCIgKyBmcmFnLnVybCArIFwiID4gXCIgKyAoKF90aGlzJGZyYWdDdXJyZW50ID0gdGhpcy5mcmFnQ3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGZyYWdDdXJyZW50LnVybCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgZ2FwVGFnRW5jb3VudGVyZWQgPSBkYXRhLmRldGFpbHMgPT09IEVycm9yRGV0YWlscy5GUkFHX0dBUDtcbiAgICAgIGlmIChnYXBUYWdFbmNvdW50ZXJlZCkge1xuICAgICAgICB0aGlzLmZyYWdtZW50VHJhY2tlci5mcmFnQnVmZmVyZWQoZnJhZywgdHJ1ZSk7XG4gICAgICB9XG4gICAgICAvLyBrZWVwIHJldHJ5aW5nIHVudGlsIHRoZSBsaW1pdCB3aWxsIGJlIHJlYWNoZWRcbiAgICAgIHZhciBlcnJvckFjdGlvbiA9IGRhdGEuZXJyb3JBY3Rpb247XG4gICAgICB2YXIgX3JlZjIgPSBlcnJvckFjdGlvbiB8fCB7fSxcbiAgICAgICAgYWN0aW9uID0gX3JlZjIuYWN0aW9uLFxuICAgICAgICBmbGFncyA9IF9yZWYyLmZsYWdzLFxuICAgICAgICBfcmVmMiRyZXRyeUNvdW50ID0gX3JlZjIucmV0cnlDb3VudCxcbiAgICAgICAgcmV0cnlDb3VudCA9IF9yZWYyJHJldHJ5Q291bnQgPT09IHZvaWQgMCA/IDAgOiBfcmVmMiRyZXRyeUNvdW50LFxuICAgICAgICByZXRyeUNvbmZpZyA9IF9yZWYyLnJldHJ5Q29uZmlnO1xuICAgICAgdmFyIGNvdWxkUmV0cnkgPSAhIWVycm9yQWN0aW9uICYmICEhcmV0cnlDb25maWc7XG4gICAgICB2YXIgcmV0cnkgPSBjb3VsZFJldHJ5ICYmIGFjdGlvbiA9PT0gTmV0d29ya0Vycm9yQWN0aW9uLlJldHJ5UmVxdWVzdDtcbiAgICAgIHZhciBub0FsdGVybmF0ZSA9IGNvdWxkUmV0cnkgJiYgIWVycm9yQWN0aW9uLnJlc29sdmVkICYmIGZsYWdzID09PSBFcnJvckFjdGlvbkZsYWdzLk1vdmVBbGxBbHRlcm5hdGVzTWF0Y2hpbmdIb3N0O1xuICAgICAgaWYgKCFyZXRyeSAmJiBub0FsdGVybmF0ZSAmJiBpc01lZGlhRnJhZ21lbnQoZnJhZykgJiYgIWZyYWcuZW5kTGlzdCkge1xuICAgICAgICB0aGlzLnJlc2V0RnJhZ21lbnRFcnJvcnMoZmlsdGVyVHlwZSk7XG4gICAgICAgIHRoaXMudHJlYXRBc0dhcChmcmFnKTtcbiAgICAgICAgZXJyb3JBY3Rpb24ucmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICgocmV0cnkgfHwgbm9BbHRlcm5hdGUpICYmIHJldHJ5Q291bnQgPCByZXRyeUNvbmZpZy5tYXhOdW1SZXRyeSkge1xuICAgICAgICB0aGlzLnJlc2V0U3RhcnRXaGVuTm90TG9hZGVkKHRoaXMubGV2ZWxMYXN0TG9hZGVkKTtcbiAgICAgICAgdmFyIGRlbGF5ID0gZ2V0UmV0cnlEZWxheShyZXRyeUNvbmZpZywgcmV0cnlDb3VudCk7XG4gICAgICAgIHRoaXMud2FybihcIkZyYWdtZW50IFwiICsgZnJhZy5zbiArIFwiIG9mIFwiICsgZmlsdGVyVHlwZSArIFwiIFwiICsgZnJhZy5sZXZlbCArIFwiIGVycm9yZWQgd2l0aCBcIiArIGRhdGEuZGV0YWlscyArIFwiLCByZXRyeWluZyBsb2FkaW5nIFwiICsgKHJldHJ5Q291bnQgKyAxKSArIFwiL1wiICsgcmV0cnlDb25maWcubWF4TnVtUmV0cnkgKyBcIiBpbiBcIiArIGRlbGF5ICsgXCJtc1wiKTtcbiAgICAgICAgZXJyb3JBY3Rpb24ucmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnJldHJ5RGF0ZSA9IHNlbGYucGVyZm9ybWFuY2Uubm93KCkgKyBkZWxheTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkZSQUdfTE9BRElOR19XQUlUSU5HX1JFVFJZO1xuICAgICAgfSBlbHNlIGlmIChyZXRyeUNvbmZpZyAmJiBlcnJvckFjdGlvbikge1xuICAgICAgICB0aGlzLnJlc2V0RnJhZ21lbnRFcnJvcnMoZmlsdGVyVHlwZSk7XG4gICAgICAgIGlmIChyZXRyeUNvdW50IDwgcmV0cnlDb25maWcubWF4TnVtUmV0cnkpIHtcbiAgICAgICAgICAvLyBOZXR3b3JrIHJldHJ5IGlzIHNraXBwZWQgd2hlbiBsZXZlbCBzd2l0Y2ggaXMgcHJlZmVycmVkXG4gICAgICAgICAgaWYgKCFnYXBUYWdFbmNvdW50ZXJlZCAmJiBhY3Rpb24gIT09IE5ldHdvcmtFcnJvckFjdGlvbi5SZW1vdmVBbHRlcm5hdGVQZXJtYW5lbnRseSkge1xuICAgICAgICAgICAgZXJyb3JBY3Rpb24ucmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLndhcm4oZGF0YS5kZXRhaWxzICsgXCIgcmVhY2hlZCBvciBleGNlZWRlZCBtYXggcmV0cnkgKFwiICsgcmV0cnlDb3VudCArIFwiKVwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBOZXR3b3JrRXJyb3JBY3Rpb24uU2VuZEFsdGVybmF0ZVRvUGVuYWx0eUJveCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuV0FJVElOR19MRVZFTDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5FUlJPUjtcbiAgICAgIH1cbiAgICAgIC8vIFBlcmZvcm0gbmV4dCBhc3luYyB0aWNrIHNvb25lciB0byBzcGVlZCB1cCBlcnJvciBhY3Rpb24gcmVzb2x1dGlvblxuICAgICAgdGhpcy50aWNrSW1tZWRpYXRlKCk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVkdWNlTGVuZ3RoQW5kRmx1c2hCdWZmZXIgPSBmdW5jdGlvbiByZWR1Y2VMZW5ndGhBbmRGbHVzaEJ1ZmZlcihkYXRhKSB7XG4gICAgICAvLyBpZiBpbiBhcHBlbmRpbmcgc3RhdGVcbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5QQVJTSU5HIHx8IHRoaXMuc3RhdGUgPT09IFN0YXRlLlBBUlNFRCkge1xuICAgICAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZztcbiAgICAgICAgdmFyIHBsYXlsaXN0VHlwZSA9IGRhdGEucGFyZW50O1xuICAgICAgICB2YXIgYnVmZmVyZWRJbmZvID0gdGhpcy5nZXRGd2RCdWZmZXJJbmZvKHRoaXMubWVkaWFCdWZmZXIsIHBsYXlsaXN0VHlwZSk7XG4gICAgICAgIC8vIDAuNSA6IHRvbGVyYW5jZSBuZWVkZWQgYXMgc29tZSBicm93c2VycyBzdGFsbHMgcGxheWJhY2sgYmVmb3JlIHJlYWNoaW5nIGJ1ZmZlcmVkIGVuZFxuICAgICAgICAvLyByZWR1Y2UgbWF4IGJ1ZiBsZW4gaWYgY3VycmVudCBwb3NpdGlvbiBpcyBidWZmZXJlZFxuICAgICAgICB2YXIgYnVmZmVyZWQgPSBidWZmZXJlZEluZm8gJiYgYnVmZmVyZWRJbmZvLmxlbiA+IDAuNTtcbiAgICAgICAgaWYgKGJ1ZmZlcmVkKSB7XG4gICAgICAgICAgdGhpcy5yZWR1Y2VNYXhCdWZmZXJMZW5ndGgoYnVmZmVyZWRJbmZvLmxlbiwgKGZyYWcgPT0gbnVsbCA/IHZvaWQgMCA6IGZyYWcuZHVyYXRpb24pIHx8IDEwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmx1c2hCdWZmZXIgPSAhYnVmZmVyZWQ7XG4gICAgICAgIGlmIChmbHVzaEJ1ZmZlcikge1xuICAgICAgICAgIC8vIGN1cnJlbnQgcG9zaXRpb24gaXMgbm90IGJ1ZmZlcmVkLCBidXQgYnJvd3NlciBpcyBzdGlsbCBjb21wbGFpbmluZyBhYm91dCBidWZmZXIgZnVsbCBlcnJvclxuICAgICAgICAgIC8vIHRoaXMgaGFwcGVucyBvbiBJRS9FZGdlLCByZWZlciB0byBodHRwczovL2dpdGh1Yi5jb20vdmlkZW8tZGV2L2hscy5qcy9wdWxsLzcwOFxuICAgICAgICAgIC8vIGluIHRoYXQgY2FzZSBmbHVzaCB0aGUgd2hvbGUgYXVkaW8gYnVmZmVyIHRvIHJlY292ZXJcbiAgICAgICAgICB0aGlzLndhcm4oXCJCdWZmZXIgZnVsbCBlcnJvciB3aGlsZSBtZWRpYS5jdXJyZW50VGltZSBpcyBub3QgYnVmZmVyZWQsIGZsdXNoIFwiICsgcGxheWxpc3RUeXBlICsgXCIgYnVmZmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmcmFnKSB7XG4gICAgICAgICAgdGhpcy5mcmFnbWVudFRyYWNrZXIucmVtb3ZlRnJhZ21lbnQoZnJhZyk7XG4gICAgICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gZnJhZy5zdGFydDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc2V0TG9hZGluZ1N0YXRlKCk7XG4gICAgICAgIHJldHVybiBmbHVzaEJ1ZmZlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIF9wcm90by5yZXNldEZyYWdtZW50RXJyb3JzID0gZnVuY3Rpb24gcmVzZXRGcmFnbWVudEVycm9ycyhmaWx0ZXJUeXBlKSB7XG4gICAgICBpZiAoZmlsdGVyVHlwZSA9PT0gUGxheWxpc3RMZXZlbFR5cGUuQVVESU8pIHtcbiAgICAgICAgLy8gUmVzZXQgY3VycmVudCBmcmFnbWVudCBzaW5jZSBhdWRpbyB0cmFjayBhdWRpbyBpcyBlc3NlbnRpYWwgYW5kIG1heSBub3QgaGF2ZSBhIGZhaWwtb3ZlciB0cmFja1xuICAgICAgICB0aGlzLmZyYWdDdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIEZyYWdtZW50IGVycm9ycyB0aGF0IHJlc3VsdCBpbiBhIGxldmVsIHN3aXRjaCBvciByZWR1bmRhbnQgZmFpbC1vdmVyXG4gICAgICAvLyBzaG91bGQgcmVzZXQgdGhlIHN0cmVhbSBjb250cm9sbGVyIHN0YXRlIHRvIGlkbGVcbiAgICAgIGlmICghdGhpcy5obHMuaGFzRW5vdWdoVG9TdGFydCkge1xuICAgICAgICB0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IFN0YXRlLlNUT1BQRUQpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uYWZ0ZXJCdWZmZXJGbHVzaGVkID0gZnVuY3Rpb24gYWZ0ZXJCdWZmZXJGbHVzaGVkKG1lZGlhLCBidWZmZXJUeXBlLCBwbGF5bGlzdFR5cGUpIHtcbiAgICAgIGlmICghbWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gQWZ0ZXIgc3VjY2Vzc2Z1bCBidWZmZXIgZmx1c2hpbmcsIGZpbHRlciBmbHVzaGVkIGZyYWdtZW50cyBmcm9tIGJ1ZmZlcmVkRnJhZ3MgdXNlIG1lZGlhQnVmZmVyZWQgaW5zdGVhZCBvZiBtZWRpYVxuICAgICAgLy8gKHNvIHRoYXQgd2Ugd2lsbCBjaGVjayBhZ2FpbnN0IHZpZGVvLmJ1ZmZlcmVkIHJhbmdlcyBpbiBjYXNlIG9mIGFsdCBhdWRpbyB0cmFjaylcbiAgICAgIHZhciBidWZmZXJlZFRpbWVSYW5nZXMgPSBCdWZmZXJIZWxwZXIuZ2V0QnVmZmVyZWQobWVkaWEpO1xuICAgICAgdGhpcy5mcmFnbWVudFRyYWNrZXIuZGV0ZWN0RXZpY3RlZEZyYWdtZW50cyhidWZmZXJUeXBlLCBidWZmZXJlZFRpbWVSYW5nZXMsIHBsYXlsaXN0VHlwZSk7XG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuRU5ERUQpIHtcbiAgICAgICAgdGhpcy5yZXNldExvYWRpbmdTdGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0TG9hZGluZ1N0YXRlID0gZnVuY3Rpb24gcmVzZXRMb2FkaW5nU3RhdGUoKSB7XG4gICAgICB0aGlzLmxvZygnUmVzZXQgbG9hZGluZyBzdGF0ZScpO1xuICAgICAgdGhpcy5mcmFnQ3VycmVudCA9IG51bGw7XG4gICAgICB0aGlzLmZyYWdQcmV2aW91cyA9IG51bGw7XG4gICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU3RhdGUuU1RPUFBFRCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5yZXNldFN0YXJ0V2hlbk5vdExvYWRlZCA9IGZ1bmN0aW9uIHJlc2V0U3RhcnRXaGVuTm90TG9hZGVkKGxldmVsKSB7XG4gICAgICAvLyBpZiBsb2FkZWRtZXRhZGF0YSBpcyBub3Qgc2V0LCBpdCBtZWFucyB0aGF0IGZpcnN0IGZyYWcgcmVxdWVzdCBmYWlsZWRcbiAgICAgIC8vIGluIHRoYXQgY2FzZSwgcmVzZXQgc3RhcnRGcmFnUmVxdWVzdGVkIGZsYWdcbiAgICAgIGlmICghdGhpcy5obHMuaGFzRW5vdWdoVG9TdGFydCkge1xuICAgICAgICB0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZGV0YWlscyA9IGxldmVsID8gbGV2ZWwuZGV0YWlscyA6IG51bGw7XG4gICAgICAgIGlmIChkZXRhaWxzICE9IG51bGwgJiYgZGV0YWlscy5saXZlKSB7XG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSBzdGFydCBwb3NpdGlvbiBhbmQgcmV0dXJuIHRvIElETEUgdG8gcmVjb3ZlciBsaXZlIHN0YXJ0XG4gICAgICAgICAgdGhpcy5sb2coXCJyZXNldHRpbmcgc3RhcnRQb3NpdGlvbiBmb3IgbGl2ZSBzdGFydFwiKTtcbiAgICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSAtMTtcbiAgICAgICAgICB0aGlzLnNldFN0YXJ0UG9zaXRpb24oZGV0YWlscywgZGV0YWlscy5mcmFnbWVudFN0YXJ0KTtcbiAgICAgICAgICB0aGlzLnJlc2V0TG9hZGluZ1N0YXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gdGhpcy5zdGFydFBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXRXaGVuTWlzc2luZ0NvbnRleHQgPSBmdW5jdGlvbiByZXNldFdoZW5NaXNzaW5nQ29udGV4dChjaHVua01ldGEpIHtcbiAgICAgIHRoaXMud2FybihcIlRoZSBsb2FkaW5nIGNvbnRleHQgY2hhbmdlZCB3aGlsZSBidWZmZXJpbmcgZnJhZ21lbnQgXCIgKyBjaHVua01ldGEuc24gKyBcIiBvZiBcIiArIHRoaXMucGxheWxpc3RMYWJlbCgpICsgXCIgXCIgKyBjaHVua01ldGEubGV2ZWwgKyBcIi4gVGhpcyBjaHVuayB3aWxsIG5vdCBiZSBidWZmZXJlZC5cIik7XG4gICAgICB0aGlzLnJlbW92ZVVuYnVmZmVyZWRGcmFncygpO1xuICAgICAgdGhpcy5yZXNldFN0YXJ0V2hlbk5vdExvYWRlZCh0aGlzLmxldmVsTGFzdExvYWRlZCk7XG4gICAgICB0aGlzLnJlc2V0TG9hZGluZ1N0YXRlKCk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVtb3ZlVW5idWZmZXJlZEZyYWdzID0gZnVuY3Rpb24gcmVtb3ZlVW5idWZmZXJlZEZyYWdzKHN0YXJ0KSB7XG4gICAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9XG4gICAgICB0aGlzLmZyYWdtZW50VHJhY2tlci5yZW1vdmVGcmFnbWVudHNJblJhbmdlKHN0YXJ0LCBJbmZpbml0eSwgdGhpcy5wbGF5bGlzdFR5cGUsIGZhbHNlLCB0cnVlKTtcbiAgICB9O1xuICAgIF9wcm90by51cGRhdGVMZXZlbFRpbWluZyA9IGZ1bmN0aW9uIHVwZGF0ZUxldmVsVGltaW5nKGZyYWcsIHBhcnQsIGxldmVsLCBwYXJ0aWFsKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcbiAgICAgIHZhciBkZXRhaWxzID0gbGV2ZWwuZGV0YWlscztcbiAgICAgIGlmICghZGV0YWlscykge1xuICAgICAgICB0aGlzLndhcm4oJ2xldmVsLmRldGFpbHMgdW5kZWZpbmVkJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBwYXJzZWQgPSBPYmplY3Qua2V5cyhmcmFnLmVsZW1lbnRhcnlTdHJlYW1zKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgdHlwZSkge1xuICAgICAgICB2YXIgaW5mbyA9IGZyYWcuZWxlbWVudGFyeVN0cmVhbXNbdHlwZV07XG4gICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgdmFyIHBhcnNlZER1cmF0aW9uID0gaW5mby5lbmRQVFMgLSBpbmZvLnN0YXJ0UFRTO1xuICAgICAgICAgIGlmIChwYXJzZWREdXJhdGlvbiA8PSAwKSB7XG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSB0cmFuc211eGVyIGFmdGVyIGl0J3MgbmV4dCB0aW1lIG9mZnNldCBmYWlsZWQgdG8gYWR2YW5jZSBiZWNhdXNlIGR1cmF0aW9uIHdhcyA8PSAwLlxuICAgICAgICAgICAgLy8gVGhlIG5ldyB0cmFuc211eGVyIHdpbGwgYmUgY29uZmlndXJlZCB3aXRoIGEgdGltZSBvZmZzZXQgbWF0Y2hpbmcgdGhlIG5leHQgZnJhZ21lbnQgc3RhcnQsXG4gICAgICAgICAgICAvLyBwcmV2ZW50aW5nIHRoZSB0aW1lbGluZSBmcm9tIHNoaWZ0aW5nLlxuICAgICAgICAgICAgX3RoaXM3Lndhcm4oXCJDb3VsZCBub3QgcGFyc2UgZnJhZ21lbnQgXCIgKyBmcmFnLnNuICsgXCIgXCIgKyB0eXBlICsgXCIgZHVyYXRpb24gcmVsaWFibHkgKFwiICsgcGFyc2VkRHVyYXRpb24gKyBcIilcIik7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0IHx8IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZHJpZnQgPSBwYXJ0aWFsID8gMCA6IHVwZGF0ZUZyYWdQVFNEVFMoZGV0YWlscywgZnJhZywgaW5mby5zdGFydFBUUywgaW5mby5lbmRQVFMsIGluZm8uc3RhcnREVFMsIGluZm8uZW5kRFRTKTtcbiAgICAgICAgICBfdGhpczcuaGxzLnRyaWdnZXIoRXZlbnRzLkxFVkVMX1BUU19VUERBVEVELCB7XG4gICAgICAgICAgICBkZXRhaWxzOiBkZXRhaWxzLFxuICAgICAgICAgICAgbGV2ZWw6IGxldmVsLFxuICAgICAgICAgICAgZHJpZnQ6IGRyaWZ0LFxuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgICBzdGFydDogaW5mby5zdGFydFBUUyxcbiAgICAgICAgICAgIGVuZDogaW5mby5lbmRQVFNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSwgZmFsc2UpO1xuICAgICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgICAgdmFyIF90aGlzJHRyYW5zbXV4ZXI7XG4gICAgICAgIGlmIChsZXZlbC5mcmFnbWVudEVycm9yID09PSAwKSB7XG4gICAgICAgICAgLy8gTWFyayBhbmQgdHJhY2sgdGhlIG9kZCBlbXB0eSBzZWdtZW50IGFzIGEgZ2FwIHRvIGF2b2lkIHJlbG9hZGluZ1xuICAgICAgICAgIHRoaXMudHJlYXRBc0dhcChmcmFnLCBsZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgoX3RoaXMkdHJhbnNtdXhlciA9IHRoaXMudHJhbnNtdXhlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHRyYW5zbXV4ZXIuZXJyb3IpID09PSBudWxsKSB7XG4gICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKFwiRm91bmQgbm8gbWVkaWEgaW4gZnJhZ21lbnQgXCIgKyBmcmFnLnNuICsgXCIgb2YgXCIgKyB0aGlzLnBsYXlsaXN0TGFiZWwoKSArIFwiIFwiICsgZnJhZy5sZXZlbCArIFwiIHJlc2V0dGluZyB0cmFuc211eGVyIHRvIGZhbGxiYWNrIHRvIHBsYXlsaXN0IHRpbWluZ1wiKTtcbiAgICAgICAgICB0aGlzLndhcm4oZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuRVJST1IsIHtcbiAgICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTUVESUFfRVJST1IsXG4gICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuRlJBR19QQVJTSU5HX0VSUk9SLFxuICAgICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICAgIHJlYXNvbjogXCJGb3VuZCBubyBtZWRpYSBpbiBtc24gXCIgKyBmcmFnLnNuICsgXCIgb2YgXCIgKyB0aGlzLnBsYXlsaXN0TGFiZWwoKSArIFwiIFxcXCJcIiArIGxldmVsLnVybCArIFwiXFxcIlwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCF0aGlzLmhscykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnJlc2V0VHJhbnNtdXhlcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZvciB0aGlzIGVycm9yIGZhbGx0aHJvdWdoLiBNYXJraW5nIHBhcnNlZCB3aWxsIGFsbG93IGFkdmFuY2luZyB0byBuZXh0IGZyYWdtZW50LlxuICAgICAgfVxuICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlBBUlNFRDtcbiAgICAgIHRoaXMubG9nKFwiUGFyc2VkIFwiICsgZnJhZy50eXBlICsgXCIgc246IFwiICsgZnJhZy5zbiArIChwYXJ0ID8gJyBwYXJ0OiAnICsgcGFydC5pbmRleCA6ICcnKSArIFwiIG9mIFwiICsgdGhpcy5mcmFnSW5mbyhmcmFnLCBmYWxzZSwgcGFydCkgKyBcIilcIik7XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5GUkFHX1BBUlNFRCwge1xuICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICBwYXJ0OiBwYXJ0XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5wbGF5bGlzdExhYmVsID0gZnVuY3Rpb24gcGxheWxpc3RMYWJlbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnBsYXlsaXN0VHlwZSA9PT0gUGxheWxpc3RMZXZlbFR5cGUuTUFJTiA/ICdsZXZlbCcgOiAndHJhY2snO1xuICAgIH07XG4gICAgX3Byb3RvLmZyYWdJbmZvID0gZnVuY3Rpb24gZnJhZ0luZm8oZnJhZywgcHRzLCBwYXJ0KSB7XG4gICAgICB2YXIgX3JlZjMsIF9yZWY0O1xuICAgICAgaWYgKHB0cyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHB0cyA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5wbGF5bGlzdExhYmVsKCkgKyBcIiBcIiArIGZyYWcubGV2ZWwgKyBcIiAoXCIgKyAocGFydCA/ICdwYXJ0JyA6ICdmcmFnJykgKyBcIjpbXCIgKyAoKF9yZWYzID0gcHRzICYmICFwYXJ0ID8gZnJhZy5zdGFydFBUUyA6IChwYXJ0IHx8IGZyYWcpLnN0YXJ0KSAhPSBudWxsID8gX3JlZjMgOiBOYU4pLnRvRml4ZWQoMykgKyBcIi1cIiArICgoX3JlZjQgPSBwdHMgJiYgIXBhcnQgPyBmcmFnLmVuZFBUUyA6IChwYXJ0IHx8IGZyYWcpLmVuZCkgIT0gbnVsbCA/IF9yZWY0IDogTmFOKS50b0ZpeGVkKDMpICsgXCJdXCIgKyAocGFydCAmJiBmcmFnLnR5cGUgPT09ICdtYWluJyA/ICdJTkRFUEVOREVOVD0nICsgKHBhcnQuaW5kZXBlbmRlbnQgPyAnWUVTJyA6ICdOTycpIDogJycpO1xuICAgIH07XG4gICAgX3Byb3RvLnRyZWF0QXNHYXAgPSBmdW5jdGlvbiB0cmVhdEFzR2FwKGZyYWcsIGxldmVsKSB7XG4gICAgICBpZiAobGV2ZWwpIHtcbiAgICAgICAgbGV2ZWwuZnJhZ21lbnRFcnJvcisrO1xuICAgICAgfVxuICAgICAgZnJhZy5nYXAgPSB0cnVlO1xuICAgICAgdGhpcy5mcmFnbWVudFRyYWNrZXIucmVtb3ZlRnJhZ21lbnQoZnJhZyk7XG4gICAgICB0aGlzLmZyYWdtZW50VHJhY2tlci5mcmFnQnVmZmVyZWQoZnJhZywgdHJ1ZSk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXRUcmFuc211eGVyID0gZnVuY3Rpb24gcmVzZXRUcmFuc211eGVyKCkge1xuICAgICAgdmFyIF90aGlzJHRyYW5zbXV4ZXIyO1xuICAgICAgKF90aGlzJHRyYW5zbXV4ZXIyID0gdGhpcy50cmFuc211eGVyKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkdHJhbnNtdXhlcjIucmVzZXQoKTtcbiAgICB9O1xuICAgIF9wcm90by5yZWNvdmVyV29ya2VyRXJyb3IgPSBmdW5jdGlvbiByZWNvdmVyV29ya2VyRXJyb3IoZGF0YSkge1xuICAgICAgaWYgKGRhdGEuZXZlbnQgPT09ICdkZW11eGVyV29ya2VyJykge1xuICAgICAgICB0aGlzLmZyYWdtZW50VHJhY2tlci5yZW1vdmVBbGxGcmFnbWVudHMoKTtcbiAgICAgICAgaWYgKHRoaXMudHJhbnNtdXhlcikge1xuICAgICAgICAgIHRoaXMudHJhbnNtdXhlci5kZXN0cm95KCk7XG4gICAgICAgICAgdGhpcy50cmFuc211eGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc2V0U3RhcnRXaGVuTm90TG9hZGVkKHRoaXMubGV2ZWxMYXN0TG9hZGVkKTtcbiAgICAgICAgdGhpcy5yZXNldExvYWRpbmdTdGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhCYXNlU3RyZWFtQ29udHJvbGxlciwgW3tcbiAgICAgIGtleTogXCJzdGFydFBvc2l0aW9uVmFsdWVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgbmV4dExvYWRQb3NpdGlvbiA9IHRoaXMubmV4dExvYWRQb3NpdGlvbixcbiAgICAgICAgICBzdGFydFBvc2l0aW9uID0gdGhpcy5zdGFydFBvc2l0aW9uO1xuICAgICAgICBpZiAoc3RhcnRQb3NpdGlvbiA9PT0gLTEgJiYgbmV4dExvYWRQb3NpdGlvbikge1xuICAgICAgICAgIHJldHVybiBuZXh0TG9hZFBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFydFBvc2l0aW9uO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJidWZmZXJpbmdFbmFibGVkXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyaW5nO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpbkZsaWdodEZyYWdcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZyYWc6IHRoaXMuZnJhZ0N1cnJlbnQsXG4gICAgICAgICAgc3RhdGU6IHRoaXMuc3RhdGVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidGltZWxpbmVPZmZzZXRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgY29uZmlndXJlZFRpbWVsaW5lT2Zmc2V0ID0gdGhpcy5jb25maWcudGltZWxpbmVPZmZzZXQ7XG4gICAgICAgIGlmIChjb25maWd1cmVkVGltZWxpbmVPZmZzZXQpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkZ2V0TGV2ZWxEZXRhaWxzO1xuICAgICAgICAgIHJldHVybiAoKF90aGlzJGdldExldmVsRGV0YWlscyA9IHRoaXMuZ2V0TGV2ZWxEZXRhaWxzKCkpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRnZXRMZXZlbERldGFpbHMuYXBwbGllZFRpbWVsaW5lT2Zmc2V0KSB8fCBjb25maWd1cmVkVGltZWxpbmVPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInByaW1hcnlQcmVmZXRjaFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmIChpbnRlcnN0aXRpYWxzRW5hYmxlZCh0aGlzLmhscy5jb25maWcpKSB7XG4gICAgICAgICAgdmFyIF90aGlzJGhscyRpbnRlcnN0aXRpYSwgX3RoaXMkaGxzJGludGVyc3RpdGlhMjtcbiAgICAgICAgICB2YXIgcGxheWluZ0ludGVyc3RpdGlhbCA9IChfdGhpcyRobHMkaW50ZXJzdGl0aWEgPSB0aGlzLmhscy5pbnRlcnN0aXRpYWxzTWFuYWdlcikgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhpcyRobHMkaW50ZXJzdGl0aWEyID0gX3RoaXMkaGxzJGludGVyc3RpdGlhLnBsYXlpbmdJdGVtKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkaGxzJGludGVyc3RpdGlhMi5ldmVudDtcbiAgICAgICAgICBpZiAocGxheWluZ0ludGVyc3RpdGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RhdGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQobmV4dFN0YXRlKSB7XG4gICAgICAgIHZhciBwcmV2aW91c1N0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBuZXh0U3RhdGUpIHtcbiAgICAgICAgICB0aGlzLl9zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgICAgICB0aGlzLmxvZyhwcmV2aW91c1N0YXRlICsgXCItPlwiICsgbmV4dFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcbiAgfShUYXNrTG9vcCk7XG4gIGZ1bmN0aW9uIGludGVyc3RpdGlhbHNFbmFibGVkKGNvbmZpZykge1xuICAgIHJldHVybiAhIWNvbmZpZy5pbnRlcnN0aXRpYWxzQ29udHJvbGxlciAmJiBjb25maWcuZW5hYmxlSW50ZXJzdGl0aWFsUGxheWJhY2sgIT09IGZhbHNlO1xuICB9XG5cbiAgdmFyIENodW5rQ2FjaGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENodW5rQ2FjaGUoKSB7XG4gICAgICB0aGlzLmNodW5rcyA9IFtdO1xuICAgICAgdGhpcy5kYXRhTGVuZ3RoID0gMDtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IENodW5rQ2FjaGUucHJvdG90eXBlO1xuICAgIF9wcm90by5wdXNoID0gZnVuY3Rpb24gcHVzaChjaHVuaykge1xuICAgICAgdGhpcy5jaHVua3MucHVzaChjaHVuayk7XG4gICAgICB0aGlzLmRhdGFMZW5ndGggKz0gY2h1bmsubGVuZ3RoO1xuICAgIH07XG4gICAgX3Byb3RvLmZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICB2YXIgY2h1bmtzID0gdGhpcy5jaHVua3MsXG4gICAgICAgIGRhdGFMZW5ndGggPSB0aGlzLmRhdGFMZW5ndGg7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgaWYgKCFjaHVua3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmtzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXN1bHQgPSBjaHVua3NbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjb25jYXRVaW50OEFycmF5cyhjaHVua3MsIGRhdGFMZW5ndGgpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5jaHVua3MubGVuZ3RoID0gMDtcbiAgICAgIHRoaXMuZGF0YUxlbmd0aCA9IDA7XG4gICAgfTtcbiAgICByZXR1cm4gQ2h1bmtDYWNoZTtcbiAgfSgpO1xuICBmdW5jdGlvbiBjb25jYXRVaW50OEFycmF5cyhjaHVua3MsIGRhdGFMZW5ndGgpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YUxlbmd0aCk7XG4gICAgdmFyIG9mZnNldCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaHVua3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaHVuayA9IGNodW5rc1tpXTtcbiAgICAgIHJlc3VsdC5zZXQoY2h1bmssIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBhbiBJRDMgZm9vdGVyIGNhbiBiZSBmb3VuZCBhdCBvZmZzZXQgaW4gZGF0YVxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIHRvIHNlYXJjaCBpblxuICAgKiBAcGFyYW0gb2Zmc2V0IC0gVGhlIG9mZnNldCBhdCB3aGljaCB0byBzdGFydCBzZWFyY2hpbmdcbiAgICpcbiAgICogQHJldHVybnMgYHRydWVgIGlmIGFuIElEMyBmb290ZXIgaXMgZm91bmRcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqXG4gICAqIEBncm91cCBJRDNcbiAgICovXG4gIGZ1bmN0aW9uIGlzSWQzRm9vdGVyKGRhdGEsIG9mZnNldCkge1xuICAgIC8qXG4gICAgICogVGhlIGZvb3RlciBpcyBhIGNvcHkgb2YgdGhlIGhlYWRlciwgYnV0IHdpdGggYSBkaWZmZXJlbnQgaWRlbnRpZmllclxuICAgICAqL1xuICAgIGlmIChvZmZzZXQgKyAxMCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgLy8gbG9vayBmb3IgJzNESScgaWRlbnRpZmllclxuICAgICAgaWYgKGRhdGFbb2Zmc2V0XSA9PT0gMHgzMyAmJiBkYXRhW29mZnNldCArIDFdID09PSAweDQ0ICYmIGRhdGFbb2Zmc2V0ICsgMl0gPT09IDB4NDkpIHtcbiAgICAgICAgLy8gY2hlY2sgdmVyc2lvbiBpcyB3aXRoaW4gcmFuZ2VcbiAgICAgICAgaWYgKGRhdGFbb2Zmc2V0ICsgM10gPCAweGZmICYmIGRhdGFbb2Zmc2V0ICsgNF0gPCAweGZmKSB7XG4gICAgICAgICAgLy8gY2hlY2sgc2l6ZSBpcyB3aXRoaW4gcmFuZ2VcbiAgICAgICAgICBpZiAoZGF0YVtvZmZzZXQgKyA2XSA8IDB4ODAgJiYgZGF0YVtvZmZzZXQgKyA3XSA8IDB4ODAgJiYgZGF0YVtvZmZzZXQgKyA4XSA8IDB4ODAgJiYgZGF0YVtvZmZzZXQgKyA5XSA8IDB4ODApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGFuIElEMyBoZWFkZXIgY2FuIGJlIGZvdW5kIGF0IG9mZnNldCBpbiBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gVGhlIGRhdGEgdG8gc2VhcmNoIGluXG4gICAqIEBwYXJhbSBvZmZzZXQgLSBUaGUgb2Zmc2V0IGF0IHdoaWNoIHRvIHN0YXJ0IHNlYXJjaGluZ1xuICAgKlxuICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYW4gSUQzIGhlYWRlciBpcyBmb3VuZFxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICpcbiAgICogQGdyb3VwIElEM1xuICAgKi9cbiAgZnVuY3Rpb24gaXNJZDNIZWFkZXIoZGF0YSwgb2Zmc2V0KSB7XG4gICAgLypcbiAgICAgKiBodHRwOi8vaWQzLm9yZy9pZDN2Mi4zLjBcbiAgICAgKiBbMF0gICAgID0gJ0knXG4gICAgICogWzFdICAgICA9ICdEJ1xuICAgICAqIFsyXSAgICAgPSAnMydcbiAgICAgKiBbMyw0XSAgID0ge1ZlcnNpb259XG4gICAgICogWzVdICAgICA9IHtGbGFnc31cbiAgICAgKiBbNi05XSAgID0ge0lEMyBTaXplfVxuICAgICAqXG4gICAgICogQW4gSUQzdjIgdGFnIGNhbiBiZSBkZXRlY3RlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcGF0dGVybjpcbiAgICAgKiAgJDQ5IDQ0IDMzIHl5IHl5IHh4IHp6IHp6IHp6IHp6XG4gICAgICogV2hlcmUgeXkgaXMgbGVzcyB0aGFuICRGRiwgeHggaXMgdGhlICdmbGFncycgYnl0ZSBhbmQgenogaXMgbGVzcyB0aGFuICQ4MFxuICAgICAqL1xuICAgIGlmIChvZmZzZXQgKyAxMCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgLy8gbG9vayBmb3IgJ0lEMycgaWRlbnRpZmllclxuICAgICAgaWYgKGRhdGFbb2Zmc2V0XSA9PT0gMHg0OSAmJiBkYXRhW29mZnNldCArIDFdID09PSAweDQ0ICYmIGRhdGFbb2Zmc2V0ICsgMl0gPT09IDB4MzMpIHtcbiAgICAgICAgLy8gY2hlY2sgdmVyc2lvbiBpcyB3aXRoaW4gcmFuZ2VcbiAgICAgICAgaWYgKGRhdGFbb2Zmc2V0ICsgM10gPCAweGZmICYmIGRhdGFbb2Zmc2V0ICsgNF0gPCAweGZmKSB7XG4gICAgICAgICAgLy8gY2hlY2sgc2l6ZSBpcyB3aXRoaW4gcmFuZ2VcbiAgICAgICAgICBpZiAoZGF0YVtvZmZzZXQgKyA2XSA8IDB4ODAgJiYgZGF0YVtvZmZzZXQgKyA3XSA8IDB4ODAgJiYgZGF0YVtvZmZzZXQgKyA4XSA8IDB4ODAgJiYgZGF0YVtvZmZzZXQgKyA5XSA8IDB4ODApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmVhZCBJRDMgc2l6ZVxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIHRvIHJlYWQgZnJvbVxuICAgKiBAcGFyYW0gb2Zmc2V0IC0gVGhlIG9mZnNldCBhdCB3aGljaCB0byBzdGFydCByZWFkaW5nXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBzaXplXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKlxuICAgKiBAZ3JvdXAgSUQzXG4gICAqL1xuICBmdW5jdGlvbiByZWFkSWQzU2l6ZShkYXRhLCBvZmZzZXQpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgc2l6ZSA9IChkYXRhW29mZnNldF0gJiAweDdmKSA8PCAyMTtcbiAgICBzaXplIHw9IChkYXRhW29mZnNldCArIDFdICYgMHg3ZikgPDwgMTQ7XG4gICAgc2l6ZSB8PSAoZGF0YVtvZmZzZXQgKyAyXSAmIDB4N2YpIDw8IDc7XG4gICAgc2l6ZSB8PSBkYXRhW29mZnNldCArIDNdICYgMHg3ZjtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFueSBhZGphY2VudCBJRDMgdGFncyBmb3VuZCBpbiBkYXRhIHN0YXJ0aW5nIGF0IG9mZnNldCwgYXMgb25lIGJsb2NrIG9mIGRhdGFcbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBUaGUgZGF0YSB0byBzZWFyY2ggaW5cbiAgICogQHBhcmFtIG9mZnNldCAtIFRoZSBvZmZzZXQgYXQgd2hpY2ggdG8gc3RhcnQgc2VhcmNoaW5nXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBibG9jayBvZiBkYXRhIGNvbnRhaW5pbmcgYW55IElEMyB0YWdzIGZvdW5kXG4gICAqIG9yIGB1bmRlZmluZWRgIGlmIG5vIGhlYWRlciBpcyBmb3VuZCBhdCB0aGUgc3RhcnRpbmcgb2Zmc2V0XG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKlxuICAgKiBAZ3JvdXAgSUQzXG4gICAqL1xuICBmdW5jdGlvbiBnZXRJZDNEYXRhKGRhdGEsIG9mZnNldCkge1xuICAgIHZhciBmcm9udCA9IG9mZnNldDtcbiAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICB3aGlsZSAoaXNJZDNIZWFkZXIoZGF0YSwgb2Zmc2V0KSkge1xuICAgICAgLy8gSUQzIGhlYWRlciBpcyAxMCBieXRlc1xuICAgICAgbGVuZ3RoICs9IDEwO1xuICAgICAgdmFyIHNpemUgPSByZWFkSWQzU2l6ZShkYXRhLCBvZmZzZXQgKyA2KTtcbiAgICAgIGxlbmd0aCArPSBzaXplO1xuICAgICAgaWYgKGlzSWQzRm9vdGVyKGRhdGEsIG9mZnNldCArIDEwKSkge1xuICAgICAgICAvLyBJRDMgZm9vdGVyIGlzIDEwIGJ5dGVzXG4gICAgICAgIGxlbmd0aCArPSAxMDtcbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSBsZW5ndGg7XG4gICAgfVxuICAgIGlmIChsZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gZGF0YS5zdWJhcnJheShmcm9udCwgZnJvbnQgKyBsZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QXVkaW9Db25maWcob2JzZXJ2ZXIsIGRhdGEsIG9mZnNldCwgbWFuaWZlc3RDb2RlYykge1xuICAgIHZhciBhZHRzU2FtcGxpbmdSYXRlcyA9IFs5NjAwMCwgODgyMDAsIDY0MDAwLCA0ODAwMCwgNDQxMDAsIDMyMDAwLCAyNDAwMCwgMjIwNTAsIDE2MDAwLCAxMjAwMCwgMTEwMjUsIDgwMDAsIDczNTBdO1xuICAgIHZhciBieXRlMiA9IGRhdGFbb2Zmc2V0ICsgMl07XG4gICAgdmFyIGFkdHNTYW1wbGluZ0luZGV4ID0gYnl0ZTIgPj4gMiAmIDB4ZjtcbiAgICBpZiAoYWR0c1NhbXBsaW5nSW5kZXggPiAxMikge1xuICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKFwiaW52YWxpZCBBRFRTIHNhbXBsaW5nIGluZGV4OlwiICsgYWR0c1NhbXBsaW5nSW5kZXgpO1xuICAgICAgb2JzZXJ2ZXIuZW1pdChFdmVudHMuRVJST1IsIEV2ZW50cy5FUlJPUiwge1xuICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk1FRElBX0VSUk9SLFxuICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuRlJBR19QQVJTSU5HX0VSUk9SLFxuICAgICAgICBmYXRhbDogdHJ1ZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICByZWFzb246IGVycm9yLm1lc3NhZ2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBNUEVHLTQgQXVkaW8gT2JqZWN0IFR5cGUgKHByb2ZpbGVfT2JqZWN0VHlwZSsxKVxuICAgIHZhciBhZHRzT2JqZWN0VHlwZSA9IChieXRlMiA+PiA2ICYgMHgzKSArIDE7XG4gICAgdmFyIGNoYW5uZWxDb3VudCA9IGRhdGFbb2Zmc2V0ICsgM10gPj4gNiAmIDB4MyB8IChieXRlMiAmIDEpIDw8IDI7XG4gICAgdmFyIGNvZGVjID0gJ21wNGEuNDAuJyArIGFkdHNPYmplY3RUeXBlO1xuICAgIC8qIHJlZmVyIHRvIGh0dHA6Ly93aWtpLm11bHRpbWVkaWEuY3gvaW5kZXgucGhwP3RpdGxlPU1QRUctNF9BdWRpbyNBdWRpb19TcGVjaWZpY19Db25maWdcbiAgICAgICAgSVNPL0lFQyAxNDQ5Ni0zIC0gVGFibGUgMS4xMyDigJQgU3ludGF4IG9mIEF1ZGlvU3BlY2lmaWNDb25maWcoKVxuICAgICAgQXVkaW8gUHJvZmlsZSAvIEF1ZGlvIE9iamVjdCBUeXBlXG4gICAgICAwOiBOdWxsXG4gICAgICAxOiBBQUMgTWFpblxuICAgICAgMjogQUFDIExDIChMb3cgQ29tcGxleGl0eSlcbiAgICAgIDM6IEFBQyBTU1IgKFNjYWxhYmxlIFNhbXBsZSBSYXRlKVxuICAgICAgNDogQUFDIExUUCAoTG9uZyBUZXJtIFByZWRpY3Rpb24pXG4gICAgICA1OiBTQlIgKFNwZWN0cmFsIEJhbmQgUmVwbGljYXRpb24pXG4gICAgICA2OiBBQUMgU2NhbGFibGVcbiAgICAgc2FtcGxpbmcgZnJlcVxuICAgICAgMDogOTYwMDAgSHpcbiAgICAgIDE6IDg4MjAwIEh6XG4gICAgICAyOiA2NDAwMCBIelxuICAgICAgMzogNDgwMDAgSHpcbiAgICAgIDQ6IDQ0MTAwIEh6XG4gICAgICA1OiAzMjAwMCBIelxuICAgICAgNjogMjQwMDAgSHpcbiAgICAgIDc6IDIyMDUwIEh6XG4gICAgICA4OiAxNjAwMCBIelxuICAgICAgOTogMTIwMDAgSHpcbiAgICAgIDEwOiAxMTAyNSBIelxuICAgICAgMTE6IDgwMDAgSHpcbiAgICAgIDEyOiA3MzUwIEh6XG4gICAgICAxMzogUmVzZXJ2ZWRcbiAgICAgIDE0OiBSZXNlcnZlZFxuICAgICAgMTU6IGZyZXF1ZW5jeSBpcyB3cml0dGVuIGV4cGxpY3RseVxuICAgICAgQ2hhbm5lbCBDb25maWd1cmF0aW9uc1xuICAgICAgVGhlc2UgYXJlIHRoZSBjaGFubmVsIGNvbmZpZ3VyYXRpb25zOlxuICAgICAgMDogRGVmaW5lZCBpbiBBT1QgU3BlY2lmYyBDb25maWdcbiAgICAgIDE6IDEgY2hhbm5lbDogZnJvbnQtY2VudGVyXG4gICAgICAyOiAyIGNoYW5uZWxzOiBmcm9udC1sZWZ0LCBmcm9udC1yaWdodFxuICAgICovXG4gICAgLy8gYXVkaW9PYmplY3RUeXBlID0gcHJvZmlsZSA9PiBwcm9maWxlLCB0aGUgTVBFRy00IEF1ZGlvIE9iamVjdCBUeXBlIG1pbnVzIDFcbiAgICB2YXIgc2FtcGxlcmF0ZSA9IGFkdHNTYW1wbGluZ1JhdGVzW2FkdHNTYW1wbGluZ0luZGV4XTtcbiAgICB2YXIgYWFjU2FtcGxlSW5kZXggPSBhZHRzU2FtcGxpbmdJbmRleDtcbiAgICBpZiAoYWR0c09iamVjdFR5cGUgPT09IDUgfHwgYWR0c09iamVjdFR5cGUgPT09IDI5KSB7XG4gICAgICAvLyBIRS1BQUMgdXNlcyBTQlIgKFNwZWN0cmFsIEJhbmQgUmVwbGljYXRpb24pICwgaGlnaCBmcmVxdWVuY2llcyBhcmUgY29uc3RydWN0ZWQgZnJvbSBsb3cgZnJlcXVlbmNpZXNcbiAgICAgIC8vIHRoZXJlIGlzIGEgZmFjdG9yIDIgYmV0d2VlbiBmcmFtZSBzYW1wbGUgcmF0ZSBhbmQgb3V0cHV0IHNhbXBsZSByYXRlXG4gICAgICAvLyBtdWx0aXBseSBmcmVxdWVuY3kgYnkgMiAoc2VlIHRhYmxlIGFib3ZlLCBlcXVpdmFsZW50IHRvIHN1YnN0cmFjdCAzKVxuICAgICAgYWFjU2FtcGxlSW5kZXggLT0gMztcbiAgICB9XG4gICAgdmFyIGNvbmZpZyA9IFthZHRzT2JqZWN0VHlwZSA8PCAzIHwgKGFhY1NhbXBsZUluZGV4ICYgMHgwZSkgPj4gMSwgKGFhY1NhbXBsZUluZGV4ICYgMHgwMSkgPDwgNyB8IGNoYW5uZWxDb3VudCA8PCAzXTtcbiAgICBsb2dnZXIubG9nKFwibWFuaWZlc3QgY29kZWM6XCIgKyBtYW5pZmVzdENvZGVjICsgXCIsIHBhcnNlZCBjb2RlYzpcIiArIGNvZGVjICsgXCIsIGNoYW5uZWxzOlwiICsgY2hhbm5lbENvdW50ICsgXCIsIHJhdGU6XCIgKyBzYW1wbGVyYXRlICsgXCIgKEFEVFMgb2JqZWN0IHR5cGU6XCIgKyBhZHRzT2JqZWN0VHlwZSArIFwiIHNhbXBsaW5nIGluZGV4OlwiICsgYWR0c1NhbXBsaW5nSW5kZXggKyBcIilcIik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgc2FtcGxlcmF0ZTogc2FtcGxlcmF0ZSxcbiAgICAgIGNoYW5uZWxDb3VudDogY2hhbm5lbENvdW50LFxuICAgICAgY29kZWM6IGNvZGVjLFxuICAgICAgcGFyc2VkQ29kZWM6IGNvZGVjLFxuICAgICAgbWFuaWZlc3RDb2RlYzogbWFuaWZlc3RDb2RlY1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gaXNIZWFkZXJQYXR0ZXJuJDEoZGF0YSwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIGRhdGFbb2Zmc2V0XSA9PT0gMHhmZiAmJiAoZGF0YVtvZmZzZXQgKyAxXSAmIDB4ZjYpID09PSAweGYwO1xuICB9XG4gIGZ1bmN0aW9uIGdldEhlYWRlckxlbmd0aChkYXRhLCBvZmZzZXQpIHtcbiAgICByZXR1cm4gZGF0YVtvZmZzZXQgKyAxXSAmIDB4MDEgPyA3IDogOTtcbiAgfVxuICBmdW5jdGlvbiBnZXRGdWxsRnJhbWVMZW5ndGgoZGF0YSwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIChkYXRhW29mZnNldCArIDNdICYgMHgwMykgPDwgMTEgfCBkYXRhW29mZnNldCArIDRdIDw8IDMgfCAoZGF0YVtvZmZzZXQgKyA1XSAmIDB4ZTApID4+PiA1O1xuICB9XG4gIGZ1bmN0aW9uIGNhbkdldEZyYW1lTGVuZ3RoKGRhdGEsIG9mZnNldCkge1xuICAgIHJldHVybiBvZmZzZXQgKyA1IDwgZGF0YS5sZW5ndGg7XG4gIH1cbiAgZnVuY3Rpb24gaXNIZWFkZXIkMShkYXRhLCBvZmZzZXQpIHtcbiAgICAvLyBMb29rIGZvciBBRFRTIGhlYWRlciB8IDExMTEgMTExMSB8IDExMTEgWDAwWCB8IHdoZXJlIFggY2FuIGJlIGVpdGhlciAwIG9yIDFcbiAgICAvLyBMYXllciBiaXRzIChwb3NpdGlvbiAxNCBhbmQgMTUpIGluIGhlYWRlciBzaG91bGQgYmUgYWx3YXlzIDAgZm9yIEFEVFNcbiAgICAvLyBNb3JlIGluZm8gaHR0cHM6Ly93aWtpLm11bHRpbWVkaWEuY3gvaW5kZXgucGhwP3RpdGxlPUFEVFNcbiAgICByZXR1cm4gb2Zmc2V0ICsgMSA8IGRhdGEubGVuZ3RoICYmIGlzSGVhZGVyUGF0dGVybiQxKGRhdGEsIG9mZnNldCk7XG4gIH1cbiAgZnVuY3Rpb24gY2FuUGFyc2UkMShkYXRhLCBvZmZzZXQpIHtcbiAgICByZXR1cm4gY2FuR2V0RnJhbWVMZW5ndGgoZGF0YSwgb2Zmc2V0KSAmJiBpc0hlYWRlclBhdHRlcm4kMShkYXRhLCBvZmZzZXQpICYmIGdldEZ1bGxGcmFtZUxlbmd0aChkYXRhLCBvZmZzZXQpIDw9IGRhdGEubGVuZ3RoIC0gb2Zmc2V0O1xuICB9XG4gIGZ1bmN0aW9uIHByb2JlJDEoZGF0YSwgb2Zmc2V0KSB7XG4gICAgLy8gc2FtZSBhcyBpc0hlYWRlciBidXQgd2UgYWxzbyBjaGVjayB0aGF0IEFEVFMgZnJhbWUgZm9sbG93cyBsYXN0IEFEVFMgZnJhbWVcbiAgICAvLyBvciBlbmQgb2YgZGF0YSBpcyByZWFjaGVkXG4gICAgaWYgKGlzSGVhZGVyJDEoZGF0YSwgb2Zmc2V0KSkge1xuICAgICAgLy8gQURUUyBoZWFkZXIgTGVuZ3RoXG4gICAgICB2YXIgaGVhZGVyTGVuZ3RoID0gZ2V0SGVhZGVyTGVuZ3RoKGRhdGEsIG9mZnNldCk7XG4gICAgICBpZiAob2Zmc2V0ICsgaGVhZGVyTGVuZ3RoID49IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFEVFMgZnJhbWUgTGVuZ3RoXG4gICAgICB2YXIgZnJhbWVMZW5ndGggPSBnZXRGdWxsRnJhbWVMZW5ndGgoZGF0YSwgb2Zmc2V0KTtcbiAgICAgIGlmIChmcmFtZUxlbmd0aCA8PSBoZWFkZXJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIG5ld09mZnNldCA9IG9mZnNldCArIGZyYW1lTGVuZ3RoO1xuICAgICAgcmV0dXJuIG5ld09mZnNldCA9PT0gZGF0YS5sZW5ndGggfHwgaXNIZWFkZXIkMShkYXRhLCBuZXdPZmZzZXQpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdFRyYWNrQ29uZmlnKHRyYWNrLCBvYnNlcnZlciwgZGF0YSwgb2Zmc2V0LCBhdWRpb0NvZGVjKSB7XG4gICAgaWYgKCF0cmFjay5zYW1wbGVyYXRlKSB7XG4gICAgICB2YXIgY29uZmlnID0gZ2V0QXVkaW9Db25maWcob2JzZXJ2ZXIsIGRhdGEsIG9mZnNldCwgYXVkaW9Db2RlYyk7XG4gICAgICBpZiAoIWNvbmZpZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBfZXh0ZW5kcyh0cmFjaywgY29uZmlnKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RnJhbWVEdXJhdGlvbihzYW1wbGVyYXRlKSB7XG4gICAgcmV0dXJuIDEwMjQgKiA5MDAwMCAvIHNhbXBsZXJhdGU7XG4gIH1cbiAgZnVuY3Rpb24gcGFyc2VGcmFtZUhlYWRlcihkYXRhLCBvZmZzZXQpIHtcbiAgICAvLyBUaGUgcHJvdGVjdGlvbiBza2lwIGJpdCB0ZWxscyB1cyBpZiB3ZSBoYXZlIDIgYnl0ZXMgb2YgQ1JDIGRhdGEgYXQgdGhlIGVuZCBvZiB0aGUgQURUUyBoZWFkZXJcbiAgICB2YXIgaGVhZGVyTGVuZ3RoID0gZ2V0SGVhZGVyTGVuZ3RoKGRhdGEsIG9mZnNldCk7XG4gICAgaWYgKG9mZnNldCArIGhlYWRlckxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgLy8gcmV0cmlldmUgZnJhbWUgc2l6ZVxuICAgICAgdmFyIGZyYW1lTGVuZ3RoID0gZ2V0RnVsbEZyYW1lTGVuZ3RoKGRhdGEsIG9mZnNldCkgLSBoZWFkZXJMZW5ndGg7XG4gICAgICBpZiAoZnJhbWVMZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIGxvZ2dlci5sb2coYEFBQyBmcmFtZSwgb2Zmc2V0L2xlbmd0aC90b3RhbC9wdHM6JHtvZmZzZXQraGVhZGVyTGVuZ3RofS8ke2ZyYW1lTGVuZ3RofS8ke2RhdGEuYnl0ZUxlbmd0aH1gKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBoZWFkZXJMZW5ndGg6IGhlYWRlckxlbmd0aCxcbiAgICAgICAgICBmcmFtZUxlbmd0aDogZnJhbWVMZW5ndGhcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYXBwZW5kRnJhbWUkMSh0cmFjaywgZGF0YSwgb2Zmc2V0LCBwdHMsIGZyYW1lSW5kZXgpIHtcbiAgICB2YXIgZnJhbWVEdXJhdGlvbiA9IGdldEZyYW1lRHVyYXRpb24odHJhY2suc2FtcGxlcmF0ZSk7XG4gICAgdmFyIHN0YW1wID0gcHRzICsgZnJhbWVJbmRleCAqIGZyYW1lRHVyYXRpb247XG4gICAgdmFyIGhlYWRlciA9IHBhcnNlRnJhbWVIZWFkZXIoZGF0YSwgb2Zmc2V0KTtcbiAgICB2YXIgdW5pdDtcbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICB2YXIgZnJhbWVMZW5ndGggPSBoZWFkZXIuZnJhbWVMZW5ndGgsXG4gICAgICAgIGhlYWRlckxlbmd0aCA9IGhlYWRlci5oZWFkZXJMZW5ndGg7XG4gICAgICB2YXIgX2xlbmd0aCA9IGhlYWRlckxlbmd0aCArIGZyYW1lTGVuZ3RoO1xuICAgICAgdmFyIG1pc3NpbmcgPSBNYXRoLm1heCgwLCBvZmZzZXQgKyBfbGVuZ3RoIC0gZGF0YS5sZW5ndGgpO1xuICAgICAgLy8gbG9nZ2VyLmxvZyhgQUFDIGZyYW1lICR7ZnJhbWVJbmRleH0sIHB0czoke3N0YW1wfSBsZW5ndGhAb2Zmc2V0L3RvdGFsOiAke2ZyYW1lTGVuZ3RofUAke29mZnNldCtoZWFkZXJMZW5ndGh9LyR7ZGF0YS5ieXRlTGVuZ3RofSBtaXNzaW5nOiAke21pc3Npbmd9YCk7XG4gICAgICBpZiAobWlzc2luZykge1xuICAgICAgICB1bml0ID0gbmV3IFVpbnQ4QXJyYXkoX2xlbmd0aCAtIGhlYWRlckxlbmd0aCk7XG4gICAgICAgIHVuaXQuc2V0KGRhdGEuc3ViYXJyYXkob2Zmc2V0ICsgaGVhZGVyTGVuZ3RoLCBkYXRhLmxlbmd0aCksIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW5pdCA9IGRhdGEuc3ViYXJyYXkob2Zmc2V0ICsgaGVhZGVyTGVuZ3RoLCBvZmZzZXQgKyBfbGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHZhciBfc2FtcGxlID0ge1xuICAgICAgICB1bml0OiB1bml0LFxuICAgICAgICBwdHM6IHN0YW1wXG4gICAgICB9O1xuICAgICAgaWYgKCFtaXNzaW5nKSB7XG4gICAgICAgIHRyYWNrLnNhbXBsZXMucHVzaChfc2FtcGxlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNhbXBsZTogX3NhbXBsZSxcbiAgICAgICAgbGVuZ3RoOiBfbGVuZ3RoLFxuICAgICAgICBtaXNzaW5nOiBtaXNzaW5nXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBvdmVyZmxvdyBpbmNvbXBsZXRlIGhlYWRlclxuICAgIHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aCAtIG9mZnNldDtcbiAgICB1bml0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICB1bml0LnNldChkYXRhLnN1YmFycmF5KG9mZnNldCwgZGF0YS5sZW5ndGgpLCAwKTtcbiAgICB2YXIgc2FtcGxlID0ge1xuICAgICAgdW5pdDogdW5pdCxcbiAgICAgIHB0czogc3RhbXBcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBzYW1wbGU6IHNhbXBsZSxcbiAgICAgIGxlbmd0aDogbGVuZ3RoLFxuICAgICAgbWlzc2luZzogLTFcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZGF0YSBjb250YWlucyBhbiBJRDMgdGFnLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIHRvIGNoZWNrXG4gICAqIEBwYXJhbSBvZmZzZXQgLSBUaGUgb2Zmc2V0IGF0IHdoaWNoIHRvIHN0YXJ0IGNoZWNraW5nXG4gICAqXG4gICAqIEByZXR1cm5zIGB0cnVlYCBpZiBhbiBJRDMgdGFnIGlzIGZvdW5kXG4gICAqXG4gICAqIEBncm91cCBJRDNcbiAgICpcbiAgICogQGJldGFcbiAgICovXG4gIGZ1bmN0aW9uIGNhblBhcnNlSWQzKGRhdGEsIG9mZnNldCkge1xuICAgIHJldHVybiBpc0lkM0hlYWRlcihkYXRhLCBvZmZzZXQpICYmIHJlYWRJZDNTaXplKGRhdGEsIG9mZnNldCArIDYpICsgMTAgPD0gZGF0YS5sZW5ndGggLSBvZmZzZXQ7XG4gIH1cblxuICBmdW5jdGlvbiB0b0FycmF5QnVmZmVyKHZpZXcpIHtcbiAgICBpZiAodmlldyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gdmlldztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZpZXcuYnl0ZU9mZnNldCA9PSAwICYmIHZpZXcuYnl0ZUxlbmd0aCA9PSB2aWV3LmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSBUeXBlZEFycmF5IG92ZXIgdGhlIHdob2xlIGJ1ZmZlci5cbiAgICAgICAgcmV0dXJuIHZpZXcuYnVmZmVyO1xuICAgICAgfVxuICAgICAgLy8gVGhpcyBpcyBhICd2aWV3JyBvbiB0aGUgYnVmZmVyLiAgQ3JlYXRlIGEgbmV3IGJ1ZmZlciB0aGF0IG9ubHkgY29udGFpbnNcbiAgICAgIC8vIHRoZSBkYXRhLiAgTm90ZSB0aGF0IHNpbmNlIHRoaXMgaXNuJ3QgYW4gQXJyYXlCdWZmZXIsIHRoZSAnbmV3JyBjYWxsXG4gICAgICAvLyB3aWxsIGFsbG9jYXRlIGEgbmV3IGJ1ZmZlciB0byBob2xkIHRoZSBjb3B5LlxuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHZpZXcpLmJ1ZmZlcjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b1VpbnQ4KGRhdGEsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgIH1cbiAgICBpZiAobGVuZ3RoID09PSB2b2lkIDApIHtcbiAgICAgIGxlbmd0aCA9IEluZmluaXR5O1xuICAgIH1cbiAgICByZXR1cm4gdmlldyhkYXRhLCBvZmZzZXQsIGxlbmd0aCwgVWludDhBcnJheSk7XG4gIH1cbiAgZnVuY3Rpb24gdmlldyhkYXRhLCBvZmZzZXQsIGxlbmd0aCwgVHlwZSkge1xuICAgIHZhciBidWZmZXIgPSB1bnNhZmVHZXRBcnJheUJ1ZmZlcihkYXRhKTtcbiAgICB2YXIgYnl0ZXNQZXJFbGVtZW50ID0gMTtcbiAgICBpZiAoJ0JZVEVTX1BFUl9FTEVNRU5UJyBpbiBUeXBlKSB7XG4gICAgICBieXRlc1BlckVsZW1lbnQgPSBUeXBlLkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgIH1cbiAgICAvLyBBYnNvbHV0ZSBlbmQgb2YgdGhlIHxkYXRhfCB2aWV3IHdpdGhpbiB8YnVmZmVyfC5cbiAgICB2YXIgZGF0YU9mZnNldCA9IGlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpID8gZGF0YS5ieXRlT2Zmc2V0IDogMDtcbiAgICB2YXIgZGF0YUVuZCA9IChkYXRhT2Zmc2V0ICsgZGF0YS5ieXRlTGVuZ3RoKSAvIGJ5dGVzUGVyRWxlbWVudDtcbiAgICAvLyBBYnNvbHV0ZSBzdGFydCBvZiB0aGUgcmVzdWx0IHdpdGhpbiB8YnVmZmVyfC5cbiAgICB2YXIgcmF3U3RhcnQgPSAoZGF0YU9mZnNldCArIG9mZnNldCkgLyBieXRlc1BlckVsZW1lbnQ7XG4gICAgdmFyIHN0YXJ0ID0gTWF0aC5mbG9vcihNYXRoLm1heCgwLCBNYXRoLm1pbihyYXdTdGFydCwgZGF0YUVuZCkpKTtcbiAgICAvLyBBYnNvbHV0ZSBlbmQgb2YgdGhlIHJlc3VsdCB3aXRoaW4gfGJ1ZmZlcnwuXG4gICAgdmFyIGVuZCA9IE1hdGguZmxvb3IoTWF0aC5taW4oc3RhcnQgKyBNYXRoLm1heChsZW5ndGgsIDApLCBkYXRhRW5kKSk7XG4gICAgcmV0dXJuIG5ldyBUeXBlKGJ1ZmZlciwgc3RhcnQsIGVuZCAtIHN0YXJ0KTtcbiAgfVxuICBmdW5jdGlvbiB1bnNhZmVHZXRBcnJheUJ1ZmZlcih2aWV3KSB7XG4gICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2aWV3LmJ1ZmZlcjtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgJiYgb2JqLmJ5dGVMZW5ndGggIT09IHVuZGVmaW5lZCAmJiBvYmouYnl0ZU9mZnNldCAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlSWQzSW1hZ2VGcmFtZShmcmFtZSkge1xuICAgIHZhciBtZXRhZGF0YUZyYW1lID0ge1xuICAgICAga2V5OiBmcmFtZS50eXBlLFxuICAgICAgZGVzY3JpcHRpb246ICcnLFxuICAgICAgZGF0YTogJycsXG4gICAgICBtaW1lVHlwZTogbnVsbCxcbiAgICAgIHBpY3R1cmVUeXBlOiBudWxsXG4gICAgfTtcbiAgICB2YXIgdXRmOEVuY29kaW5nID0gMHgwMztcbiAgICBpZiAoZnJhbWUuc2l6ZSA8IDIpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChmcmFtZS5kYXRhWzBdICE9PSB1dGY4RW5jb2RpbmcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdJZ25vcmUgZnJhbWUgd2l0aCB1bnJlY29nbml6ZWQgY2hhcmFjdGVyICcgKyAnZW5jb2RpbmcnKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHZhciBtaW1lVHlwZUVuZEluZGV4ID0gZnJhbWUuZGF0YS5zdWJhcnJheSgxKS5pbmRleE9mKDApO1xuICAgIGlmIChtaW1lVHlwZUVuZEluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdmFyIG1pbWVUeXBlID0gdXRmOEFycmF5VG9TdHIodG9VaW50OChmcmFtZS5kYXRhLCAxLCBtaW1lVHlwZUVuZEluZGV4KSk7XG4gICAgdmFyIHBpY3R1cmVUeXBlID0gZnJhbWUuZGF0YVsyICsgbWltZVR5cGVFbmRJbmRleF07XG4gICAgdmFyIGRlc2NyaXB0aW9uRW5kSW5kZXggPSBmcmFtZS5kYXRhLnN1YmFycmF5KDMgKyBtaW1lVHlwZUVuZEluZGV4KS5pbmRleE9mKDApO1xuICAgIGlmIChkZXNjcmlwdGlvbkVuZEluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdXRmOEFycmF5VG9TdHIodG9VaW50OChmcmFtZS5kYXRhLCAzICsgbWltZVR5cGVFbmRJbmRleCwgZGVzY3JpcHRpb25FbmRJbmRleCkpO1xuICAgIHZhciBkYXRhO1xuICAgIGlmIChtaW1lVHlwZSA9PT0gJy0tPicpIHtcbiAgICAgIGRhdGEgPSB1dGY4QXJyYXlUb1N0cih0b1VpbnQ4KGZyYW1lLmRhdGEsIDQgKyBtaW1lVHlwZUVuZEluZGV4ICsgZGVzY3JpcHRpb25FbmRJbmRleCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gdG9BcnJheUJ1ZmZlcihmcmFtZS5kYXRhLnN1YmFycmF5KDQgKyBtaW1lVHlwZUVuZEluZGV4ICsgZGVzY3JpcHRpb25FbmRJbmRleCkpO1xuICAgIH1cbiAgICBtZXRhZGF0YUZyYW1lLm1pbWVUeXBlID0gbWltZVR5cGU7XG4gICAgbWV0YWRhdGFGcmFtZS5waWN0dXJlVHlwZSA9IHBpY3R1cmVUeXBlO1xuICAgIG1ldGFkYXRhRnJhbWUuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICBtZXRhZGF0YUZyYW1lLmRhdGEgPSBkYXRhO1xuICAgIHJldHVybiBtZXRhZGF0YUZyYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhbiBJRDMgUFJJViBmcmFtZS5cbiAgICpcbiAgICogQHBhcmFtIGZyYW1lIC0gdGhlIElEMyBQUklWIGZyYW1lXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIElEMyBQUklWIGZyYW1lXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKlxuICAgKiBAZ3JvdXAgSUQzXG4gICAqL1xuICBmdW5jdGlvbiBkZWNvZGVJZDNQcml2RnJhbWUoZnJhbWUpIHtcbiAgICAvKlxuICAgIEZvcm1hdDogPHRleHQgc3RyaW5nPlxcMDxiaW5hcnkgZGF0YT5cbiAgICAqL1xuICAgIGlmIChmcmFtZS5zaXplIDwgMikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdmFyIG93bmVyID0gdXRmOEFycmF5VG9TdHIoZnJhbWUuZGF0YSwgdHJ1ZSk7XG4gICAgdmFyIHByaXZhdGVEYXRhID0gbmV3IFVpbnQ4QXJyYXkoZnJhbWUuZGF0YS5zdWJhcnJheShvd25lci5sZW5ndGggKyAxKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleTogZnJhbWUudHlwZSxcbiAgICAgIGluZm86IG93bmVyLFxuICAgICAgZGF0YTogcHJpdmF0ZURhdGEuYnVmZmVyXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGVzIGFuIElEMyB0ZXh0IGZyYW1lXG4gICAqXG4gICAqIEBwYXJhbSBmcmFtZSAtIHRoZSBJRDMgdGV4dCBmcmFtZVxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgZGVjb2RlZCBJRDMgdGV4dCBmcmFtZVxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICpcbiAgICogQGdyb3VwIElEM1xuICAgKi9cbiAgZnVuY3Rpb24gZGVjb2RlSWQzVGV4dEZyYW1lKGZyYW1lKSB7XG4gICAgaWYgKGZyYW1lLnNpemUgPCAyKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoZnJhbWUudHlwZSA9PT0gJ1RYWFgnKSB7XG4gICAgICAvKlxuICAgICAgRm9ybWF0OlxuICAgICAgWzBdICAgPSB7VGV4dCBFbmNvZGluZ31cbiAgICAgIFsxLT9dID0ge0Rlc2NyaXB0aW9ufVxcMHtWYWx1ZX1cbiAgICAgICovXG4gICAgICB2YXIgaW5kZXggPSAxO1xuICAgICAgdmFyIGRlc2NyaXB0aW9uID0gdXRmOEFycmF5VG9TdHIoZnJhbWUuZGF0YS5zdWJhcnJheShpbmRleCksIHRydWUpO1xuICAgICAgaW5kZXggKz0gZGVzY3JpcHRpb24ubGVuZ3RoICsgMTtcbiAgICAgIHZhciB2YWx1ZSA9IHV0ZjhBcnJheVRvU3RyKGZyYW1lLmRhdGEuc3ViYXJyYXkoaW5kZXgpKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogZnJhbWUudHlwZSxcbiAgICAgICAgaW5mbzogZGVzY3JpcHRpb24sXG4gICAgICAgIGRhdGE6IHZhbHVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvKlxuICAgIEZvcm1hdDpcbiAgICBbMF0gICA9IHtUZXh0IEVuY29kaW5nfVxuICAgIFsxLT9dID0ge1ZhbHVlfVxuICAgICovXG4gICAgdmFyIHRleHQgPSB1dGY4QXJyYXlUb1N0cihmcmFtZS5kYXRhLnN1YmFycmF5KDEpKTtcbiAgICByZXR1cm4ge1xuICAgICAga2V5OiBmcmFtZS50eXBlLFxuICAgICAgaW5mbzogJycsXG4gICAgICBkYXRhOiB0ZXh0XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgYSBVUkwgZnJhbWVcbiAgICpcbiAgICogQHBhcmFtIGZyYW1lIC0gdGhlIElEMyBVUkwgZnJhbWVcbiAgICpcbiAgICogQHJldHVybnMgVGhlIGRlY29kZWQgSUQzIFVSTCBmcmFtZVxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICpcbiAgICogQGdyb3VwIElEM1xuICAgKi9cbiAgZnVuY3Rpb24gZGVjb2RlSWQzVXJsRnJhbWUoZnJhbWUpIHtcbiAgICBpZiAoZnJhbWUudHlwZSA9PT0gJ1dYWFgnKSB7XG4gICAgICAvKlxuICAgICAgRm9ybWF0OlxuICAgICAgWzBdICAgPSB7VGV4dCBFbmNvZGluZ31cbiAgICAgIFsxLT9dID0ge0Rlc2NyaXB0aW9ufVxcMHtVUkx9XG4gICAgICAqL1xuICAgICAgaWYgKGZyYW1lLnNpemUgPCAyKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAxO1xuICAgICAgdmFyIGRlc2NyaXB0aW9uID0gdXRmOEFycmF5VG9TdHIoZnJhbWUuZGF0YS5zdWJhcnJheShpbmRleCksIHRydWUpO1xuICAgICAgaW5kZXggKz0gZGVzY3JpcHRpb24ubGVuZ3RoICsgMTtcbiAgICAgIHZhciB2YWx1ZSA9IHV0ZjhBcnJheVRvU3RyKGZyYW1lLmRhdGEuc3ViYXJyYXkoaW5kZXgpKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogZnJhbWUudHlwZSxcbiAgICAgICAgaW5mbzogZGVzY3JpcHRpb24sXG4gICAgICAgIGRhdGE6IHZhbHVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvKlxuICAgIEZvcm1hdDpcbiAgICBbMC0/XSA9IHtVUkx9XG4gICAgKi9cbiAgICB2YXIgdXJsID0gdXRmOEFycmF5VG9TdHIoZnJhbWUuZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleTogZnJhbWUudHlwZSxcbiAgICAgIGluZm86ICcnLFxuICAgICAgZGF0YTogdXJsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgYW4gSUQzIGZyYW1lLlxuICAgKlxuICAgKiBAcGFyYW0gZnJhbWUgLSB0aGUgSUQzIGZyYW1lXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIElEMyBmcmFtZVxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICpcbiAgICogQGdyb3VwIElEM1xuICAgKi9cbiAgZnVuY3Rpb24gZGVjb2RlSWQzRnJhbWUoZnJhbWUpIHtcbiAgICBpZiAoZnJhbWUudHlwZSA9PT0gJ1BSSVYnKSB7XG4gICAgICByZXR1cm4gZGVjb2RlSWQzUHJpdkZyYW1lKGZyYW1lKTtcbiAgICB9IGVsc2UgaWYgKGZyYW1lLnR5cGVbMF0gPT09ICdXJykge1xuICAgICAgcmV0dXJuIGRlY29kZUlkM1VybEZyYW1lKGZyYW1lKTtcbiAgICB9IGVsc2UgaWYgKGZyYW1lLnR5cGUgPT09ICdBUElDJykge1xuICAgICAgcmV0dXJuIGRlY29kZUlkM0ltYWdlRnJhbWUoZnJhbWUpO1xuICAgIH1cbiAgICByZXR1cm4gZGVjb2RlSWQzVGV4dEZyYW1lKGZyYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkYXRhIG9mIGFuIElEMyBmcmFtZS5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBUaGUgZGF0YSB0byByZWFkIGZyb21cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGRhdGEgb2YgdGhlIElEMyBmcmFtZVxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICpcbiAgICogQGdyb3VwIElEM1xuICAgKi9cbiAgZnVuY3Rpb24gZ2V0SWQzRnJhbWVEYXRhKGRhdGEpIHtcbiAgICAvKlxuICAgIEZyYW1lIElEICAgICAgICR4eCB4eCB4eCB4eCAoZm91ciBjaGFyYWN0ZXJzKVxuICAgIFNpemUgICAgICAgICAgICR4eCB4eCB4eCB4eFxuICAgIEZsYWdzICAgICAgICAgICR4eCB4eFxuICAgICovXG4gICAgdmFyIHR5cGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGFbMF0sIGRhdGFbMV0sIGRhdGFbMl0sIGRhdGFbM10pO1xuICAgIHZhciBzaXplID0gcmVhZElkM1NpemUoZGF0YSwgNCk7XG4gICAgLy8gc2tpcCBmcmFtZSBpZCwgc2l6ZSwgYW5kIGZsYWdzXG4gICAgdmFyIG9mZnNldCA9IDEwO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgIGRhdGE6IGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyBzaXplKVxuICAgIH07XG4gIH1cblxuICB2YXIgSEVBREVSX0ZPT1RFUl9TSVpFID0gMTA7XG4gIHZhciBGUkFNRV9TSVpFID0gMTA7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIElEMyBmcmFtZXMgZm91bmQgaW4gYWxsIHRoZSBJRDMgdGFncyBpbiB0aGUgaWQzRGF0YVxuICAgKlxuICAgKiBAcGFyYW0gaWQzRGF0YSAtIFRoZSBJRDMgZGF0YSBjb250YWluaW5nIG9uZSBvciBtb3JlIElEMyB0YWdzXG4gICAqXG4gICAqIEByZXR1cm5zIEFycmF5IG9mIElEMyBmcmFtZSBvYmplY3RzXG4gICAqXG4gICAqIEBncm91cCBJRDNcbiAgICpcbiAgICogQGJldGFcbiAgICovXG4gIGZ1bmN0aW9uIGdldElkM0ZyYW1lcyhpZDNEYXRhKSB7XG4gICAgdmFyIG9mZnNldCA9IDA7XG4gICAgdmFyIGZyYW1lcyA9IFtdO1xuICAgIHdoaWxlIChpc0lkM0hlYWRlcihpZDNEYXRhLCBvZmZzZXQpKSB7XG4gICAgICB2YXIgc2l6ZSA9IHJlYWRJZDNTaXplKGlkM0RhdGEsIG9mZnNldCArIDYpO1xuICAgICAgaWYgKGlkM0RhdGFbb2Zmc2V0ICsgNV0gPj4gNiAmIDEpIHtcbiAgICAgICAgLy8gc2tpcCBleHRlbmRlZCBoZWFkZXJcbiAgICAgICAgb2Zmc2V0ICs9IEhFQURFUl9GT09URVJfU0laRTtcbiAgICAgIH1cbiAgICAgIC8vIHNraXAgcGFzdCBJRDMgaGVhZGVyXG4gICAgICBvZmZzZXQgKz0gSEVBREVSX0ZPT1RFUl9TSVpFO1xuICAgICAgdmFyIGVuZCA9IG9mZnNldCArIHNpemU7XG4gICAgICAvLyBsb29wIHRocm91Z2ggZnJhbWVzIGluIHRoZSBJRDMgdGFnXG4gICAgICB3aGlsZSAob2Zmc2V0ICsgRlJBTUVfU0laRSA8IGVuZCkge1xuICAgICAgICB2YXIgZnJhbWVEYXRhID0gZ2V0SWQzRnJhbWVEYXRhKGlkM0RhdGEuc3ViYXJyYXkob2Zmc2V0KSk7XG4gICAgICAgIHZhciBmcmFtZSA9IGRlY29kZUlkM0ZyYW1lKGZyYW1lRGF0YSk7XG4gICAgICAgIGlmIChmcmFtZSkge1xuICAgICAgICAgIGZyYW1lcy5wdXNoKGZyYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBza2lwIGZyYW1lIGhlYWRlciBhbmQgZnJhbWUgZGF0YVxuICAgICAgICBvZmZzZXQgKz0gZnJhbWVEYXRhLnNpemUgKyBIRUFERVJfRk9PVEVSX1NJWkU7XG4gICAgICB9XG4gICAgICBpZiAoaXNJZDNGb290ZXIoaWQzRGF0YSwgb2Zmc2V0KSkge1xuICAgICAgICBvZmZzZXQgKz0gSEVBREVSX0ZPT1RFUl9TSVpFO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnJhbWVzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSUQzIGZyYW1lIGlzIGFuIEVsZW1lbnRhcnkgU3RyZWFtIHRpbWVzdGFtcCBmcmFtZVxuICAgKlxuICAgKiBAcGFyYW0gZnJhbWUgLSB0aGUgSUQzIGZyYW1lXG4gICAqXG4gICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgSUQzIGZyYW1lIGlzIGFuIEVsZW1lbnRhcnkgU3RyZWFtIHRpbWVzdGFtcCBmcmFtZVxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICpcbiAgICogQGdyb3VwIElEM1xuICAgKi9cbiAgZnVuY3Rpb24gaXNJZDNUaW1lc3RhbXBGcmFtZShmcmFtZSkge1xuICAgIHJldHVybiBmcmFtZSAmJiBmcmFtZS5rZXkgPT09ICdQUklWJyAmJiBmcmFtZS5pbmZvID09PSAnY29tLmFwcGxlLnN0cmVhbWluZy50cmFuc3BvcnRTdHJlYW1UaW1lc3RhbXAnO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgYSAzMyBiaXQgdGltZXN0YW1wIGZyb20gYW4gSUQzIGZyYW1lLlxuICAgKlxuICAgKiBAcGFyYW0gdGltZVN0YW1wRnJhbWUgLSB0aGUgSUQzIGZyYW1lXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSB0aW1lc3RhbXBcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqXG4gICAqIEBncm91cCBJRDNcbiAgICovXG4gIGZ1bmN0aW9uIHJlYWRJZDNUaW1lc3RhbXAodGltZVN0YW1wRnJhbWUpIHtcbiAgICBpZiAodGltZVN0YW1wRnJhbWUuZGF0YS5ieXRlTGVuZ3RoID09PSA4KSB7XG4gICAgICB2YXIgZGF0YSA9IG5ldyBVaW50OEFycmF5KHRpbWVTdGFtcEZyYW1lLmRhdGEpO1xuICAgICAgLy8gdGltZXN0YW1wIGlzIDMzIGJpdCBleHByZXNzZWQgYXMgYSBiaWctZW5kaWFuIGVpZ2h0LW9jdGV0IG51bWJlcixcbiAgICAgIC8vIHdpdGggdGhlIHVwcGVyIDMxIGJpdHMgc2V0IHRvIHplcm8uXG4gICAgICB2YXIgcHRzMzNCaXQgPSBkYXRhWzNdICYgMHgxO1xuICAgICAgdmFyIHRpbWVzdGFtcCA9IChkYXRhWzRdIDw8IDIzKSArIChkYXRhWzVdIDw8IDE1KSArIChkYXRhWzZdIDw8IDcpICsgZGF0YVs3XTtcbiAgICAgIHRpbWVzdGFtcCAvPSA0NTtcbiAgICAgIGlmIChwdHMzM0JpdCkge1xuICAgICAgICB0aW1lc3RhbXAgKz0gNDc3MjE4NTguODQ7XG4gICAgICB9IC8vIDJeMzIgLyA5MFxuICAgICAgcmV0dXJuIE1hdGgucm91bmQodGltZXN0YW1wKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWFyY2hlcyBmb3IgdGhlIEVsZW1lbnRhcnkgU3RyZWFtIHRpbWVzdGFtcCBmb3VuZCBpbiB0aGUgSUQzIGRhdGEgY2h1bmtcbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBCbG9jayBvZiBkYXRhIGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgSUQzIHRhZ3NcbiAgICpcbiAgICogQHJldHVybnMgVGhlIHRpbWVzdGFtcFxuICAgKlxuICAgKiBAZ3JvdXAgSUQzXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICBmdW5jdGlvbiBnZXRJZDNUaW1lc3RhbXAoZGF0YSkge1xuICAgIHZhciBmcmFtZXMgPSBnZXRJZDNGcmFtZXMoZGF0YSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmcmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBmcmFtZSA9IGZyYW1lc1tpXTtcbiAgICAgIGlmIChpc0lkM1RpbWVzdGFtcEZyYW1lKGZyYW1lKSkge1xuICAgICAgICByZXR1cm4gcmVhZElkM1RpbWVzdGFtcChmcmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgTWV0YWRhdGFTY2hlbWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKE1ldGFkYXRhU2NoZW1hKSB7XG4gICAgTWV0YWRhdGFTY2hlbWFbXCJhdWRpb0lkM1wiXSA9IFwib3JnLmlkM1wiO1xuICAgIE1ldGFkYXRhU2NoZW1hW1wiZGF0ZVJhbmdlXCJdID0gXCJjb20uYXBwbGUucXVpY2t0aW1lLkhMU1wiO1xuICAgIE1ldGFkYXRhU2NoZW1hW1wiZW1zZ1wiXSA9IFwiaHR0cHM6Ly9hb21lZGlhLm9yZy9lbXNnL0lEM1wiO1xuICAgIE1ldGFkYXRhU2NoZW1hW1wibWlzYmtsdlwiXSA9IFwidXJuOm1pc2I6S0xWOmJpbjoxOTEwLjFcIjtcbiAgICByZXR1cm4gTWV0YWRhdGFTY2hlbWE7XG4gIH0oe30pO1xuXG4gIGZ1bmN0aW9uIGR1bW15VHJhY2sodHlwZSwgaW5wdXRUaW1lU2NhbGUpIHtcbiAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7XG4gICAgICB0eXBlID0gJyc7XG4gICAgfVxuICAgIGlmIChpbnB1dFRpbWVTY2FsZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpbnB1dFRpbWVTY2FsZSA9IDkwMDAwO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGlkOiAtMSxcbiAgICAgIHBpZDogLTEsXG4gICAgICBpbnB1dFRpbWVTY2FsZTogaW5wdXRUaW1lU2NhbGUsXG4gICAgICBzZXF1ZW5jZU51bWJlcjogLTEsXG4gICAgICBzYW1wbGVzOiBbXSxcbiAgICAgIGRyb3BwZWQ6IDBcbiAgICB9O1xuICB9XG5cbiAgdmFyIEJhc2VBdWRpb0RlbXV4ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhc2VBdWRpb0RlbXV4ZXIoKSB7XG4gICAgICB0aGlzLl9hdWRpb1RyYWNrID0gdm9pZCAwO1xuICAgICAgdGhpcy5faWQzVHJhY2sgPSB2b2lkIDA7XG4gICAgICB0aGlzLmZyYW1lSW5kZXggPSAwO1xuICAgICAgdGhpcy5jYWNoZWREYXRhID0gbnVsbDtcbiAgICAgIHRoaXMuYmFzZVBUUyA9IG51bGw7XG4gICAgICB0aGlzLmluaXRQVFMgPSBudWxsO1xuICAgICAgdGhpcy5sYXN0UFRTID0gbnVsbDtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IEJhc2VBdWRpb0RlbXV4ZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5yZXNldEluaXRTZWdtZW50ID0gZnVuY3Rpb24gcmVzZXRJbml0U2VnbWVudChpbml0U2VnbWVudCwgYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgdHJhY2tEdXJhdGlvbikge1xuICAgICAgdGhpcy5faWQzVHJhY2sgPSB7XG4gICAgICAgIHR5cGU6ICdpZDMnLFxuICAgICAgICBpZDogMyxcbiAgICAgICAgcGlkOiAtMSxcbiAgICAgICAgaW5wdXRUaW1lU2NhbGU6IDkwMDAwLFxuICAgICAgICBzZXF1ZW5jZU51bWJlcjogMCxcbiAgICAgICAgc2FtcGxlczogW10sXG4gICAgICAgIGRyb3BwZWQ6IDBcbiAgICAgIH07XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXRUaW1lU3RhbXAgPSBmdW5jdGlvbiByZXNldFRpbWVTdGFtcChkZWF1bHRUaW1lc3RhbXApIHtcbiAgICAgIHRoaXMuaW5pdFBUUyA9IGRlYXVsdFRpbWVzdGFtcDtcbiAgICAgIHRoaXMucmVzZXRDb250aWd1aXR5KCk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXRDb250aWd1aXR5ID0gZnVuY3Rpb24gcmVzZXRDb250aWd1aXR5KCkge1xuICAgICAgdGhpcy5iYXNlUFRTID0gbnVsbDtcbiAgICAgIHRoaXMubGFzdFBUUyA9IG51bGw7XG4gICAgICB0aGlzLmZyYW1lSW5kZXggPSAwO1xuICAgIH07XG4gICAgX3Byb3RvLmNhblBhcnNlID0gZnVuY3Rpb24gY2FuUGFyc2UoZGF0YSwgb2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBfcHJvdG8uYXBwZW5kRnJhbWUgPSBmdW5jdGlvbiBhcHBlbmRGcmFtZSh0cmFjaywgZGF0YSwgb2Zmc2V0KSB7fVxuXG4gICAgLy8gZmVlZCBpbmNvbWluZyBkYXRhIHRvIHRoZSBmcm9udCBvZiB0aGUgcGFyc2luZyBwaXBlbGluZVxuICAgIDtcbiAgICBfcHJvdG8uZGVtdXggPSBmdW5jdGlvbiBkZW11eChkYXRhLCB0aW1lT2Zmc2V0KSB7XG4gICAgICBpZiAodGhpcy5jYWNoZWREYXRhKSB7XG4gICAgICAgIGRhdGEgPSBhcHBlbmRVaW50OEFycmF5KHRoaXMuY2FjaGVkRGF0YSwgZGF0YSk7XG4gICAgICAgIHRoaXMuY2FjaGVkRGF0YSA9IG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgaWQzRGF0YSA9IGdldElkM0RhdGEoZGF0YSwgMCk7XG4gICAgICB2YXIgb2Zmc2V0ID0gaWQzRGF0YSA/IGlkM0RhdGEubGVuZ3RoIDogMDtcbiAgICAgIHZhciBsYXN0RGF0YUluZGV4O1xuICAgICAgdmFyIHRyYWNrID0gdGhpcy5fYXVkaW9UcmFjaztcbiAgICAgIHZhciBpZDNUcmFjayA9IHRoaXMuX2lkM1RyYWNrO1xuICAgICAgdmFyIHRpbWVzdGFtcCA9IGlkM0RhdGEgPyBnZXRJZDNUaW1lc3RhbXAoaWQzRGF0YSkgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgICBpZiAodGhpcy5iYXNlUFRTID09PSBudWxsIHx8IHRoaXMuZnJhbWVJbmRleCA9PT0gMCAmJiBpc0Zpbml0ZU51bWJlcih0aW1lc3RhbXApKSB7XG4gICAgICAgIHRoaXMuYmFzZVBUUyA9IGluaXRQVFNGbih0aW1lc3RhbXAsIHRpbWVPZmZzZXQsIHRoaXMuaW5pdFBUUyk7XG4gICAgICAgIHRoaXMubGFzdFBUUyA9IHRoaXMuYmFzZVBUUztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmxhc3RQVFMgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5sYXN0UFRTID0gdGhpcy5iYXNlUFRTO1xuICAgICAgfVxuXG4gICAgICAvLyBtb3JlIGV4cHJlc3NpdmUgdGhhbiBhbHRlcm5hdGl2ZTogaWQzRGF0YT8ubGVuZ3RoXG4gICAgICBpZiAoaWQzRGF0YSAmJiBpZDNEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWQzVHJhY2suc2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICBwdHM6IHRoaXMubGFzdFBUUyxcbiAgICAgICAgICBkdHM6IHRoaXMubGFzdFBUUyxcbiAgICAgICAgICBkYXRhOiBpZDNEYXRhLFxuICAgICAgICAgIHR5cGU6IE1ldGFkYXRhU2NoZW1hLmF1ZGlvSWQzLFxuICAgICAgICAgIGR1cmF0aW9uOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAob2Zmc2V0IDwgbGVuZ3RoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhblBhcnNlKGRhdGEsIG9mZnNldCkpIHtcbiAgICAgICAgICB2YXIgZnJhbWUgPSB0aGlzLmFwcGVuZEZyYW1lKHRyYWNrLCBkYXRhLCBvZmZzZXQpO1xuICAgICAgICAgIGlmIChmcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5mcmFtZUluZGV4Kys7XG4gICAgICAgICAgICB0aGlzLmxhc3RQVFMgPSBmcmFtZS5zYW1wbGUucHRzO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IGZyYW1lLmxlbmd0aDtcbiAgICAgICAgICAgIGxhc3REYXRhSW5kZXggPSBvZmZzZXQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9mZnNldCA9IGxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY2FuUGFyc2VJZDMoZGF0YSwgb2Zmc2V0KSkge1xuICAgICAgICAgIC8vIGFmdGVyIGEgY2FuUGFyc2UsIGEgY2FsbCB0byBnZXRJZDNEYXRhICpzaG91bGQqIGFsd2F5cyByZXR1cm5zIHNvbWUgZGF0YVxuICAgICAgICAgIGlkM0RhdGEgPSBnZXRJZDNEYXRhKGRhdGEsIG9mZnNldCk7XG4gICAgICAgICAgaWQzVHJhY2suc2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIHB0czogdGhpcy5sYXN0UFRTLFxuICAgICAgICAgICAgZHRzOiB0aGlzLmxhc3RQVFMsXG4gICAgICAgICAgICBkYXRhOiBpZDNEYXRhLFxuICAgICAgICAgICAgdHlwZTogTWV0YWRhdGFTY2hlbWEuYXVkaW9JZDMsXG4gICAgICAgICAgICBkdXJhdGlvbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb2Zmc2V0ICs9IGlkM0RhdGEubGVuZ3RoO1xuICAgICAgICAgIGxhc3REYXRhSW5kZXggPSBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA9PT0gbGVuZ3RoICYmIGxhc3REYXRhSW5kZXggIT09IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBwYXJ0aWFsRGF0YSA9IGRhdGEuc2xpY2UobGFzdERhdGFJbmRleCk7XG4gICAgICAgICAgaWYgKHRoaXMuY2FjaGVkRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZWREYXRhID0gYXBwZW5kVWludDhBcnJheSh0aGlzLmNhY2hlZERhdGEsIHBhcnRpYWxEYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZWREYXRhID0gcGFydGlhbERhdGE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhdWRpb1RyYWNrOiB0cmFjayxcbiAgICAgICAgdmlkZW9UcmFjazogZHVtbXlUcmFjaygpLFxuICAgICAgICBpZDNUcmFjazogaWQzVHJhY2ssXG4gICAgICAgIHRleHRUcmFjazogZHVtbXlUcmFjaygpXG4gICAgICB9O1xuICAgIH07XG4gICAgX3Byb3RvLmRlbXV4U2FtcGxlQWVzID0gZnVuY3Rpb24gZGVtdXhTYW1wbGVBZXMoZGF0YSwga2V5RGF0YSwgdGltZU9mZnNldCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIltcIiArIHRoaXMgKyBcIl0gVGhpcyBkZW11eGVyIGRvZXMgbm90IHN1cHBvcnQgU2FtcGxlLUFFUyBkZWNyeXB0aW9uXCIpKTtcbiAgICB9O1xuICAgIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKHRpbWVPZmZzZXQpIHtcbiAgICAgIC8vIFBhcnNlIGNhY2hlIGluIGNhc2Ugb2YgcmVtYWluaW5nIGZyYW1lcy5cbiAgICAgIHZhciBjYWNoZWREYXRhID0gdGhpcy5jYWNoZWREYXRhO1xuICAgICAgaWYgKGNhY2hlZERhdGEpIHtcbiAgICAgICAgdGhpcy5jYWNoZWREYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5kZW11eChjYWNoZWREYXRhLCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGF1ZGlvVHJhY2s6IHRoaXMuX2F1ZGlvVHJhY2ssXG4gICAgICAgIHZpZGVvVHJhY2s6IGR1bW15VHJhY2soKSxcbiAgICAgICAgaWQzVHJhY2s6IHRoaXMuX2lkM1RyYWNrLFxuICAgICAgICB0ZXh0VHJhY2s6IGR1bW15VHJhY2soKVxuICAgICAgfTtcbiAgICB9O1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuY2FjaGVkRGF0YSA9IG51bGw7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLl9hdWRpb1RyYWNrID0gdGhpcy5faWQzVHJhY2sgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICByZXR1cm4gQmFzZUF1ZGlvRGVtdXhlcjtcbiAgfSgpO1xuICAvKipcbiAgICogSW5pdGlhbGl6ZSBQVFNcbiAgICogPHA+XG4gICAqICAgIHVzZSB0aW1lc3RhbXAgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgTmFOIG9yIEluZmluaXR5XG4gICAqIDwvcD5cbiAgICovXG4gIHZhciBpbml0UFRTRm4gPSBmdW5jdGlvbiBpbml0UFRTRm4odGltZXN0YW1wLCB0aW1lT2Zmc2V0LCBpbml0UFRTKSB7XG4gICAgaWYgKGlzRmluaXRlTnVtYmVyKHRpbWVzdGFtcCkpIHtcbiAgICAgIHJldHVybiB0aW1lc3RhbXAgKiA5MDtcbiAgICB9XG4gICAgdmFyIGluaXQ5MGtIeiA9IGluaXRQVFMgPyBpbml0UFRTLmJhc2VUaW1lICogOTAwMDAgLyBpbml0UFRTLnRpbWVzY2FsZSA6IDA7XG4gICAgcmV0dXJuIHRpbWVPZmZzZXQgKiA5MDAwMCArIGluaXQ5MGtIejtcbiAgfTtcblxuICAvKipcbiAgICogIE1QRUcgcGFyc2VyIGhlbHBlclxuICAgKi9cblxuICB2YXIgY2hyb21lVmVyc2lvbiQxID0gbnVsbDtcbiAgdmFyIEJpdHJhdGVzTWFwID0gWzMyLCA2NCwgOTYsIDEyOCwgMTYwLCAxOTIsIDIyNCwgMjU2LCAyODgsIDMyMCwgMzUyLCAzODQsIDQxNiwgNDQ4LCAzMiwgNDgsIDU2LCA2NCwgODAsIDk2LCAxMTIsIDEyOCwgMTYwLCAxOTIsIDIyNCwgMjU2LCAzMjAsIDM4NCwgMzIsIDQwLCA0OCwgNTYsIDY0LCA4MCwgOTYsIDExMiwgMTI4LCAxNjAsIDE5MiwgMjI0LCAyNTYsIDMyMCwgMzIsIDQ4LCA1NiwgNjQsIDgwLCA5NiwgMTEyLCAxMjgsIDE0NCwgMTYwLCAxNzYsIDE5MiwgMjI0LCAyNTYsIDgsIDE2LCAyNCwgMzIsIDQwLCA0OCwgNTYsIDY0LCA4MCwgOTYsIDExMiwgMTI4LCAxNDQsIDE2MF07XG4gIHZhciBTYW1wbGluZ1JhdGVNYXAgPSBbNDQxMDAsIDQ4MDAwLCAzMjAwMCwgMjIwNTAsIDI0MDAwLCAxNjAwMCwgMTEwMjUsIDEyMDAwLCA4MDAwXTtcbiAgdmFyIFNhbXBsZXNDb2VmZmljaWVudHMgPSBbXG4gIC8vIE1QRUcgMi41XG4gIFswLFxuICAvLyBSZXNlcnZlZFxuICA3MixcbiAgLy8gTGF5ZXIzXG4gIDE0NCxcbiAgLy8gTGF5ZXIyXG4gIDEyIC8vIExheWVyMVxuICBdLFxuICAvLyBSZXNlcnZlZFxuICBbMCxcbiAgLy8gUmVzZXJ2ZWRcbiAgMCxcbiAgLy8gTGF5ZXIzXG4gIDAsXG4gIC8vIExheWVyMlxuICAwIC8vIExheWVyMVxuICBdLFxuICAvLyBNUEVHIDJcbiAgWzAsXG4gIC8vIFJlc2VydmVkXG4gIDcyLFxuICAvLyBMYXllcjNcbiAgMTQ0LFxuICAvLyBMYXllcjJcbiAgMTIgLy8gTGF5ZXIxXG4gIF0sXG4gIC8vIE1QRUcgMVxuICBbMCxcbiAgLy8gUmVzZXJ2ZWRcbiAgMTQ0LFxuICAvLyBMYXllcjNcbiAgMTQ0LFxuICAvLyBMYXllcjJcbiAgMTIgLy8gTGF5ZXIxXG4gIF1dO1xuICB2YXIgQnl0ZXNJblNsb3QgPSBbMCxcbiAgLy8gUmVzZXJ2ZWRcbiAgMSxcbiAgLy8gTGF5ZXIzXG4gIDEsXG4gIC8vIExheWVyMlxuICA0IC8vIExheWVyMVxuICBdO1xuICBmdW5jdGlvbiBhcHBlbmRGcmFtZSh0cmFjaywgZGF0YSwgb2Zmc2V0LCBwdHMsIGZyYW1lSW5kZXgpIHtcbiAgICAvLyBVc2luZyBodHRwOi8vd3d3LmRhdGF2b3lhZ2UuY29tL21wZ3NjcmlwdC9tcGVnaGRyLmh0bSBhcyBhIHJlZmVyZW5jZVxuICAgIGlmIChvZmZzZXQgKyAyNCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBoZWFkZXIgPSBwYXJzZUhlYWRlcihkYXRhLCBvZmZzZXQpO1xuICAgIGlmIChoZWFkZXIgJiYgb2Zmc2V0ICsgaGVhZGVyLmZyYW1lTGVuZ3RoIDw9IGRhdGEubGVuZ3RoKSB7XG4gICAgICB2YXIgZnJhbWVEdXJhdGlvbiA9IGhlYWRlci5zYW1wbGVzUGVyRnJhbWUgKiA5MDAwMCAvIGhlYWRlci5zYW1wbGVSYXRlO1xuICAgICAgdmFyIHN0YW1wID0gcHRzICsgZnJhbWVJbmRleCAqIGZyYW1lRHVyYXRpb247XG4gICAgICB2YXIgc2FtcGxlID0ge1xuICAgICAgICB1bml0OiBkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgaGVhZGVyLmZyYW1lTGVuZ3RoKSxcbiAgICAgICAgcHRzOiBzdGFtcCxcbiAgICAgICAgZHRzOiBzdGFtcFxuICAgICAgfTtcbiAgICAgIHRyYWNrLmNvbmZpZyA9IFtdO1xuICAgICAgdHJhY2suY2hhbm5lbENvdW50ID0gaGVhZGVyLmNoYW5uZWxDb3VudDtcbiAgICAgIHRyYWNrLnNhbXBsZXJhdGUgPSBoZWFkZXIuc2FtcGxlUmF0ZTtcbiAgICAgIHRyYWNrLnNhbXBsZXMucHVzaChzYW1wbGUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2FtcGxlOiBzYW1wbGUsXG4gICAgICAgIGxlbmd0aDogaGVhZGVyLmZyYW1lTGVuZ3RoLFxuICAgICAgICBtaXNzaW5nOiAwXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwYXJzZUhlYWRlcihkYXRhLCBvZmZzZXQpIHtcbiAgICB2YXIgbXBlZ1ZlcnNpb24gPSBkYXRhW29mZnNldCArIDFdID4+IDMgJiAzO1xuICAgIHZhciBtcGVnTGF5ZXIgPSBkYXRhW29mZnNldCArIDFdID4+IDEgJiAzO1xuICAgIHZhciBiaXRSYXRlSW5kZXggPSBkYXRhW29mZnNldCArIDJdID4+IDQgJiAxNTtcbiAgICB2YXIgc2FtcGxlUmF0ZUluZGV4ID0gZGF0YVtvZmZzZXQgKyAyXSA+PiAyICYgMztcbiAgICBpZiAobXBlZ1ZlcnNpb24gIT09IDEgJiYgYml0UmF0ZUluZGV4ICE9PSAwICYmIGJpdFJhdGVJbmRleCAhPT0gMTUgJiYgc2FtcGxlUmF0ZUluZGV4ICE9PSAzKSB7XG4gICAgICB2YXIgcGFkZGluZ0JpdCA9IGRhdGFbb2Zmc2V0ICsgMl0gPj4gMSAmIDE7XG4gICAgICB2YXIgY2hhbm5lbE1vZGUgPSBkYXRhW29mZnNldCArIDNdID4+IDY7XG4gICAgICB2YXIgY29sdW1uSW5CaXRyYXRlcyA9IG1wZWdWZXJzaW9uID09PSAzID8gMyAtIG1wZWdMYXllciA6IG1wZWdMYXllciA9PT0gMyA/IDMgOiA0O1xuICAgICAgdmFyIGJpdFJhdGUgPSBCaXRyYXRlc01hcFtjb2x1bW5JbkJpdHJhdGVzICogMTQgKyBiaXRSYXRlSW5kZXggLSAxXSAqIDEwMDA7XG4gICAgICB2YXIgY29sdW1uSW5TYW1wbGVSYXRlcyA9IG1wZWdWZXJzaW9uID09PSAzID8gMCA6IG1wZWdWZXJzaW9uID09PSAyID8gMSA6IDI7XG4gICAgICB2YXIgc2FtcGxlUmF0ZSA9IFNhbXBsaW5nUmF0ZU1hcFtjb2x1bW5JblNhbXBsZVJhdGVzICogMyArIHNhbXBsZVJhdGVJbmRleF07XG4gICAgICB2YXIgY2hhbm5lbENvdW50ID0gY2hhbm5lbE1vZGUgPT09IDMgPyAxIDogMjsgLy8gSWYgYml0cyBvZiBjaGFubmVsIG1vZGUgYXJlIGAxMWAgdGhlbiBpdCBpcyBhIHNpbmdsZSBjaGFubmVsIChNb25vKVxuICAgICAgdmFyIHNhbXBsZUNvZWZmaWNpZW50ID0gU2FtcGxlc0NvZWZmaWNpZW50c1ttcGVnVmVyc2lvbl1bbXBlZ0xheWVyXTtcbiAgICAgIHZhciBieXRlc0luU2xvdCA9IEJ5dGVzSW5TbG90W21wZWdMYXllcl07XG4gICAgICB2YXIgc2FtcGxlc1BlckZyYW1lID0gc2FtcGxlQ29lZmZpY2llbnQgKiA4ICogYnl0ZXNJblNsb3Q7XG4gICAgICB2YXIgZnJhbWVMZW5ndGggPSBNYXRoLmZsb29yKHNhbXBsZUNvZWZmaWNpZW50ICogYml0UmF0ZSAvIHNhbXBsZVJhdGUgKyBwYWRkaW5nQml0KSAqIGJ5dGVzSW5TbG90O1xuICAgICAgaWYgKGNocm9tZVZlcnNpb24kMSA9PT0gbnVsbCkge1xuICAgICAgICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiAgICAgICAgdmFyIHJlc3VsdCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspL2kpO1xuICAgICAgICBjaHJvbWVWZXJzaW9uJDEgPSByZXN1bHQgPyBwYXJzZUludChyZXN1bHRbMV0pIDogMDtcbiAgICAgIH1cbiAgICAgIHZhciBuZWVkQ2hyb21lRml4ID0gISFjaHJvbWVWZXJzaW9uJDEgJiYgY2hyb21lVmVyc2lvbiQxIDw9IDg3O1xuICAgICAgaWYgKG5lZWRDaHJvbWVGaXggJiYgbXBlZ0xheWVyID09PSAyICYmIGJpdFJhdGUgPj0gMjI0MDAwICYmIGNoYW5uZWxNb2RlID09PSAwKSB7XG4gICAgICAgIC8vIFdvcmsgYXJvdW5kIGJ1ZyBpbiBDaHJvbWl1bSBieSBzZXR0aW5nIGNoYW5uZWxNb2RlIHRvIGR1YWwtY2hhbm5lbCAoMDEpIGluc3RlYWQgb2Ygc3RlcmVvICgwMClcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAzXSA9IGRhdGFbb2Zmc2V0ICsgM10gfCAweDgwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2FtcGxlUmF0ZTogc2FtcGxlUmF0ZSxcbiAgICAgICAgY2hhbm5lbENvdW50OiBjaGFubmVsQ291bnQsXG4gICAgICAgIGZyYW1lTGVuZ3RoOiBmcmFtZUxlbmd0aCxcbiAgICAgICAgc2FtcGxlc1BlckZyYW1lOiBzYW1wbGVzUGVyRnJhbWVcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGlzSGVhZGVyUGF0dGVybihkYXRhLCBvZmZzZXQpIHtcbiAgICByZXR1cm4gZGF0YVtvZmZzZXRdID09PSAweGZmICYmIChkYXRhW29mZnNldCArIDFdICYgMHhlMCkgPT09IDB4ZTAgJiYgKGRhdGFbb2Zmc2V0ICsgMV0gJiAweDA2KSAhPT0gMHgwMDtcbiAgfVxuICBmdW5jdGlvbiBpc0hlYWRlcihkYXRhLCBvZmZzZXQpIHtcbiAgICAvLyBMb29rIGZvciBNUEVHIGhlYWRlciB8IDExMTEgMTExMSB8IDExMVggWFlaWCB8IHdoZXJlIFggY2FuIGJlIGVpdGhlciAwIG9yIDEgYW5kIFkgb3IgWiBzaG91bGQgYmUgMVxuICAgIC8vIExheWVyIGJpdHMgKHBvc2l0aW9uIDE0IGFuZCAxNSkgaW4gaGVhZGVyIHNob3VsZCBiZSBhbHdheXMgZGlmZmVyZW50IGZyb20gMCAoTGF5ZXIgSSBvciBMYXllciBJSSBvciBMYXllciBJSUkpXG4gICAgLy8gTW9yZSBpbmZvIGh0dHA6Ly93d3cubXAzLXRlY2gub3JnL3Byb2dyYW1tZXIvZnJhbWVfaGVhZGVyLmh0bWxcbiAgICByZXR1cm4gb2Zmc2V0ICsgMSA8IGRhdGEubGVuZ3RoICYmIGlzSGVhZGVyUGF0dGVybihkYXRhLCBvZmZzZXQpO1xuICB9XG4gIGZ1bmN0aW9uIGNhblBhcnNlKGRhdGEsIG9mZnNldCkge1xuICAgIHZhciBoZWFkZXJTaXplID0gNDtcbiAgICByZXR1cm4gaXNIZWFkZXJQYXR0ZXJuKGRhdGEsIG9mZnNldCkgJiYgaGVhZGVyU2l6ZSA8PSBkYXRhLmxlbmd0aCAtIG9mZnNldDtcbiAgfVxuICBmdW5jdGlvbiBwcm9iZShkYXRhLCBvZmZzZXQpIHtcbiAgICAvLyBzYW1lIGFzIGlzSGVhZGVyIGJ1dCB3ZSBhbHNvIGNoZWNrIHRoYXQgTVBFRyBmcmFtZSBmb2xsb3dzIGxhc3QgTVBFRyBmcmFtZVxuICAgIC8vIG9yIGVuZCBvZiBkYXRhIGlzIHJlYWNoZWRcbiAgICBpZiAob2Zmc2V0ICsgMSA8IGRhdGEubGVuZ3RoICYmIGlzSGVhZGVyUGF0dGVybihkYXRhLCBvZmZzZXQpKSB7XG4gICAgICAvLyBNUEVHIGhlYWRlciBMZW5ndGhcbiAgICAgIHZhciBoZWFkZXJMZW5ndGggPSA0O1xuICAgICAgLy8gTVBFRyBmcmFtZSBMZW5ndGhcbiAgICAgIHZhciBoZWFkZXIgPSBwYXJzZUhlYWRlcihkYXRhLCBvZmZzZXQpO1xuICAgICAgdmFyIGZyYW1lTGVuZ3RoID0gaGVhZGVyTGVuZ3RoO1xuICAgICAgaWYgKGhlYWRlciAhPSBudWxsICYmIGhlYWRlci5mcmFtZUxlbmd0aCkge1xuICAgICAgICBmcmFtZUxlbmd0aCA9IGhlYWRlci5mcmFtZUxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdPZmZzZXQgPSBvZmZzZXQgKyBmcmFtZUxlbmd0aDtcbiAgICAgIHJldHVybiBuZXdPZmZzZXQgPT09IGRhdGEubGVuZ3RoIHx8IGlzSGVhZGVyKGRhdGEsIG5ld09mZnNldCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBBQUNEZW11eGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUF1ZGlvRGVtdXhlcikge1xuICAgIGZ1bmN0aW9uIEFBQ0RlbXV4ZXIob2JzZXJ2ZXIsIGNvbmZpZykge1xuICAgICAgdmFyIF90aGlzO1xuICAgICAgX3RoaXMgPSBfQmFzZUF1ZGlvRGVtdXhlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5vYnNlcnZlciA9IHZvaWQgMDtcbiAgICAgIF90aGlzLmNvbmZpZyA9IHZvaWQgMDtcbiAgICAgIF90aGlzLm9ic2VydmVyID0gb2JzZXJ2ZXI7XG4gICAgICBfdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIF9pbmhlcml0c0xvb3NlKEFBQ0RlbXV4ZXIsIF9CYXNlQXVkaW9EZW11eGVyKTtcbiAgICB2YXIgX3Byb3RvID0gQUFDRGVtdXhlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLnJlc2V0SW5pdFNlZ21lbnQgPSBmdW5jdGlvbiByZXNldEluaXRTZWdtZW50KGluaXRTZWdtZW50LCBhdWRpb0NvZGVjLCB2aWRlb0NvZGVjLCB0cmFja0R1cmF0aW9uKSB7XG4gICAgICBfQmFzZUF1ZGlvRGVtdXhlci5wcm90b3R5cGUucmVzZXRJbml0U2VnbWVudC5jYWxsKHRoaXMsIGluaXRTZWdtZW50LCBhdWRpb0NvZGVjLCB2aWRlb0NvZGVjLCB0cmFja0R1cmF0aW9uKTtcbiAgICAgIHRoaXMuX2F1ZGlvVHJhY2sgPSB7XG4gICAgICAgIGNvbnRhaW5lcjogJ2F1ZGlvL2FkdHMnLFxuICAgICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgICBpZDogMixcbiAgICAgICAgcGlkOiAtMSxcbiAgICAgICAgc2VxdWVuY2VOdW1iZXI6IDAsXG4gICAgICAgIHNlZ21lbnRDb2RlYzogJ2FhYycsXG4gICAgICAgIHNhbXBsZXM6IFtdLFxuICAgICAgICBtYW5pZmVzdENvZGVjOiBhdWRpb0NvZGVjLFxuICAgICAgICBkdXJhdGlvbjogdHJhY2tEdXJhdGlvbixcbiAgICAgICAgaW5wdXRUaW1lU2NhbGU6IDkwMDAwLFxuICAgICAgICBkcm9wcGVkOiAwXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFNvdXJjZSBmb3IgcHJvYmUgaW5mbyAtIGh0dHBzOi8vd2lraS5tdWx0aW1lZGlhLmN4L2luZGV4LnBocD90aXRsZT1BRFRTXG4gICAgO1xuICAgIEFBQ0RlbXV4ZXIucHJvYmUgPSBmdW5jdGlvbiBwcm9iZSQyKGRhdGEsIGxvZ2dlcikge1xuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgZm9yIHRoZSBBRFRTIHN5bmMgd29yZFxuICAgICAgLy8gTG9vayBmb3IgQURUUyBoZWFkZXIgfCAxMTExIDExMTEgfCAxMTExIFgwMFggfCB3aGVyZSBYIGNhbiBiZSBlaXRoZXIgMCBvciAxXG4gICAgICAvLyBMYXllciBiaXRzIChwb3NpdGlvbiAxNCBhbmQgMTUpIGluIGhlYWRlciBzaG91bGQgYmUgYWx3YXlzIDAgZm9yIEFEVFNcbiAgICAgIC8vIE1vcmUgaW5mbyBodHRwczovL3dpa2kubXVsdGltZWRpYS5jeC9pbmRleC5waHA/dGl0bGU9QURUU1xuICAgICAgdmFyIGlkM0RhdGEgPSBnZXRJZDNEYXRhKGRhdGEsIDApO1xuICAgICAgdmFyIG9mZnNldCA9IChpZDNEYXRhID09IG51bGwgPyB2b2lkIDAgOiBpZDNEYXRhLmxlbmd0aCkgfHwgMDtcbiAgICAgIGlmIChwcm9iZShkYXRhLCBvZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoOyBvZmZzZXQgPCBsZW5ndGg7IG9mZnNldCsrKSB7XG4gICAgICAgIGlmIChwcm9iZSQxKGRhdGEsIG9mZnNldCkpIHtcbiAgICAgICAgICBsb2dnZXIubG9nKCdBRFRTIHN5bmMgd29yZCBmb3VuZCAhJyk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIF9wcm90by5jYW5QYXJzZSA9IGZ1bmN0aW9uIGNhblBhcnNlKGRhdGEsIG9mZnNldCkge1xuICAgICAgcmV0dXJuIGNhblBhcnNlJDEoZGF0YSwgb2Zmc2V0KTtcbiAgICB9O1xuICAgIF9wcm90by5hcHBlbmRGcmFtZSA9IGZ1bmN0aW9uIGFwcGVuZEZyYW1lKHRyYWNrLCBkYXRhLCBvZmZzZXQpIHtcbiAgICAgIGluaXRUcmFja0NvbmZpZyh0cmFjaywgdGhpcy5vYnNlcnZlciwgZGF0YSwgb2Zmc2V0LCB0cmFjay5tYW5pZmVzdENvZGVjKTtcbiAgICAgIHZhciBmcmFtZSA9IGFwcGVuZEZyYW1lJDEodHJhY2ssIGRhdGEsIG9mZnNldCwgdGhpcy5iYXNlUFRTLCB0aGlzLmZyYW1lSW5kZXgpO1xuICAgICAgaWYgKGZyYW1lICYmIGZyYW1lLm1pc3NpbmcgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZyYW1lO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFBQ0RlbXV4ZXI7XG4gIH0oQmFzZUF1ZGlvRGVtdXhlcik7XG5cbiAgdmFyIGdldEF1ZGlvQlNJRCA9IGZ1bmN0aW9uIGdldEF1ZGlvQlNJRChkYXRhLCBvZmZzZXQpIHtcbiAgICAvLyBjaGVjayB0aGUgYnNpZCB0byBjb25maXJtIGFjLTMgfCBlYy0zXG4gICAgdmFyIGJzaWQgPSAwO1xuICAgIHZhciBudW1CaXRzID0gNTtcbiAgICBvZmZzZXQgKz0gbnVtQml0cztcbiAgICB2YXIgdGVtcCA9IG5ldyBVaW50MzJBcnJheSgxKTsgLy8gdW5zaWduZWQgMzIgYml0IGZvciB0ZW1wb3Jhcnkgc3RvcmFnZVxuICAgIHZhciBtYXNrID0gbmV3IFVpbnQzMkFycmF5KDEpOyAvLyB1bnNpZ25lZCAzMiBiaXQgbWFzayB2YWx1ZVxuICAgIHZhciBfYnl0ZSA9IG5ldyBVaW50OEFycmF5KDEpOyAvLyB1bnNpZ25lZCA4IGJpdCBmb3IgdGVtcG9yYXJ5IHN0b3JhZ2VcbiAgICB3aGlsZSAobnVtQml0cyA+IDApIHtcbiAgICAgIF9ieXRlWzBdID0gZGF0YVtvZmZzZXRdO1xuICAgICAgLy8gcmVhZCByZW1haW5pbmcgYml0cywgdXB0byA4IGJpdHMgYXQgYSB0aW1lXG4gICAgICB2YXIgYml0cyA9IE1hdGgubWluKG51bUJpdHMsIDgpO1xuICAgICAgdmFyIHNoaWZ0ID0gOCAtIGJpdHM7XG4gICAgICBtYXNrWzBdID0gMHhmZjAwMDAwMCA+Pj4gMjQgKyBzaGlmdCA8PCBzaGlmdDtcbiAgICAgIHRlbXBbMF0gPSAoX2J5dGVbMF0gJiBtYXNrWzBdKSA+PiBzaGlmdDtcbiAgICAgIGJzaWQgPSAhYnNpZCA/IHRlbXBbMF0gOiBic2lkIDw8IGJpdHMgfCB0ZW1wWzBdO1xuICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICBudW1CaXRzIC09IGJpdHM7XG4gICAgfVxuICAgIHJldHVybiBic2lkO1xuICB9O1xuXG4gIHZhciBBQzNEZW11eGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUF1ZGlvRGVtdXhlcikge1xuICAgIGZ1bmN0aW9uIEFDM0RlbXV4ZXIob2JzZXJ2ZXIpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF90aGlzID0gX0Jhc2VBdWRpb0RlbXV4ZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMub2JzZXJ2ZXIgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBfaW5oZXJpdHNMb29zZShBQzNEZW11eGVyLCBfQmFzZUF1ZGlvRGVtdXhlcik7XG4gICAgdmFyIF9wcm90byA9IEFDM0RlbXV4ZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5yZXNldEluaXRTZWdtZW50ID0gZnVuY3Rpb24gcmVzZXRJbml0U2VnbWVudChpbml0U2VnbWVudCwgYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgdHJhY2tEdXJhdGlvbikge1xuICAgICAgX0Jhc2VBdWRpb0RlbXV4ZXIucHJvdG90eXBlLnJlc2V0SW5pdFNlZ21lbnQuY2FsbCh0aGlzLCBpbml0U2VnbWVudCwgYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgdHJhY2tEdXJhdGlvbik7XG4gICAgICB0aGlzLl9hdWRpb1RyYWNrID0ge1xuICAgICAgICBjb250YWluZXI6ICdhdWRpby9hYy0zJyxcbiAgICAgICAgdHlwZTogJ2F1ZGlvJyxcbiAgICAgICAgaWQ6IDIsXG4gICAgICAgIHBpZDogLTEsXG4gICAgICAgIHNlcXVlbmNlTnVtYmVyOiAwLFxuICAgICAgICBzZWdtZW50Q29kZWM6ICdhYzMnLFxuICAgICAgICBzYW1wbGVzOiBbXSxcbiAgICAgICAgbWFuaWZlc3RDb2RlYzogYXVkaW9Db2RlYyxcbiAgICAgICAgZHVyYXRpb246IHRyYWNrRHVyYXRpb24sXG4gICAgICAgIGlucHV0VGltZVNjYWxlOiA5MDAwMCxcbiAgICAgICAgZHJvcHBlZDogMFxuICAgICAgfTtcbiAgICB9O1xuICAgIF9wcm90by5jYW5QYXJzZSA9IGZ1bmN0aW9uIGNhblBhcnNlKGRhdGEsIG9mZnNldCkge1xuICAgICAgcmV0dXJuIG9mZnNldCArIDY0IDwgZGF0YS5sZW5ndGg7XG4gICAgfTtcbiAgICBfcHJvdG8uYXBwZW5kRnJhbWUgPSBmdW5jdGlvbiBhcHBlbmRGcmFtZSh0cmFjaywgZGF0YSwgb2Zmc2V0KSB7XG4gICAgICB2YXIgZnJhbWVMZW5ndGggPSBfYXBwZW5kRnJhbWUodHJhY2ssIGRhdGEsIG9mZnNldCwgdGhpcy5iYXNlUFRTLCB0aGlzLmZyYW1lSW5kZXgpO1xuICAgICAgaWYgKGZyYW1lTGVuZ3RoICE9PSAtMSkge1xuICAgICAgICB2YXIgc2FtcGxlID0gdHJhY2suc2FtcGxlc1t0cmFjay5zYW1wbGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNhbXBsZTogc2FtcGxlLFxuICAgICAgICAgIGxlbmd0aDogZnJhbWVMZW5ndGgsXG4gICAgICAgICAgbWlzc2luZzogMFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gICAgQUMzRGVtdXhlci5wcm9iZSA9IGZ1bmN0aW9uIHByb2JlKGRhdGEpIHtcbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaWQzRGF0YSA9IGdldElkM0RhdGEoZGF0YSwgMCk7XG4gICAgICBpZiAoIWlkM0RhdGEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBsb29rIGZvciB0aGUgYWMtMyBzeW5jIGJ5dGVzXG4gICAgICB2YXIgb2Zmc2V0ID0gaWQzRGF0YS5sZW5ndGg7XG4gICAgICBpZiAoZGF0YVtvZmZzZXRdID09PSAweDBiICYmIGRhdGFbb2Zmc2V0ICsgMV0gPT09IDB4NzcgJiYgZ2V0SWQzVGltZXN0YW1wKGlkM0RhdGEpICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIC8vIGNoZWNrIHRoZSBic2lkIHRvIGNvbmZpcm0gYWMtM1xuICAgICAgZ2V0QXVkaW9CU0lEKGRhdGEsIG9mZnNldCkgPCAxNikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBBQzNEZW11eGVyO1xuICB9KEJhc2VBdWRpb0RlbXV4ZXIpO1xuICBmdW5jdGlvbiBfYXBwZW5kRnJhbWUodHJhY2ssIGRhdGEsIHN0YXJ0LCBwdHMsIGZyYW1lSW5kZXgpIHtcbiAgICBpZiAoc3RhcnQgKyA4ID4gZGF0YS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAtMTsgLy8gbm90IGVub3VnaCBieXRlcyBsZWZ0XG4gICAgfVxuICAgIGlmIChkYXRhW3N0YXJ0XSAhPT0gMHgwYiB8fCBkYXRhW3N0YXJ0ICsgMV0gIT09IDB4NzcpIHtcbiAgICAgIHJldHVybiAtMTsgLy8gaW52YWxpZCBtYWdpY1xuICAgIH1cblxuICAgIC8vIGdldCBzYW1wbGUgcmF0ZVxuICAgIHZhciBzYW1wbGluZ1JhdGVDb2RlID0gZGF0YVtzdGFydCArIDRdID4+IDY7XG4gICAgaWYgKHNhbXBsaW5nUmF0ZUNvZGUgPj0gMykge1xuICAgICAgcmV0dXJuIC0xOyAvLyBpbnZhbGlkIHNhbXBsaW5nIHJhdGVcbiAgICB9XG4gICAgdmFyIHNhbXBsaW5nUmF0ZU1hcCA9IFs0ODAwMCwgNDQxMDAsIDMyMDAwXTtcbiAgICB2YXIgc2FtcGxlUmF0ZSA9IHNhbXBsaW5nUmF0ZU1hcFtzYW1wbGluZ1JhdGVDb2RlXTtcblxuICAgIC8vIGdldCBmcmFtZSBzaXplXG4gICAgdmFyIGZyYW1lU2l6ZUNvZGUgPSBkYXRhW3N0YXJ0ICsgNF0gJiAweDNmO1xuICAgIHZhciBmcmFtZVNpemVNYXAgPSBbNjQsIDY5LCA5NiwgNjQsIDcwLCA5NiwgODAsIDg3LCAxMjAsIDgwLCA4OCwgMTIwLCA5NiwgMTA0LCAxNDQsIDk2LCAxMDUsIDE0NCwgMTEyLCAxMjEsIDE2OCwgMTEyLCAxMjIsIDE2OCwgMTI4LCAxMzksIDE5MiwgMTI4LCAxNDAsIDE5MiwgMTYwLCAxNzQsIDI0MCwgMTYwLCAxNzUsIDI0MCwgMTkyLCAyMDgsIDI4OCwgMTkyLCAyMDksIDI4OCwgMjI0LCAyNDMsIDMzNiwgMjI0LCAyNDQsIDMzNiwgMjU2LCAyNzgsIDM4NCwgMjU2LCAyNzksIDM4NCwgMzIwLCAzNDgsIDQ4MCwgMzIwLCAzNDksIDQ4MCwgMzg0LCA0MTcsIDU3NiwgMzg0LCA0MTgsIDU3NiwgNDQ4LCA0ODcsIDY3MiwgNDQ4LCA0ODgsIDY3MiwgNTEyLCA1NTcsIDc2OCwgNTEyLCA1NTgsIDc2OCwgNjQwLCA2OTYsIDk2MCwgNjQwLCA2OTcsIDk2MCwgNzY4LCA4MzUsIDExNTIsIDc2OCwgODM2LCAxMTUyLCA4OTYsIDk3NSwgMTM0NCwgODk2LCA5NzYsIDEzNDQsIDEwMjQsIDExMTQsIDE1MzYsIDEwMjQsIDExMTUsIDE1MzYsIDExNTIsIDEyNTMsIDE3MjgsIDExNTIsIDEyNTQsIDE3MjgsIDEyODAsIDEzOTMsIDE5MjAsIDEyODAsIDEzOTQsIDE5MjBdO1xuICAgIHZhciBmcmFtZUxlbmd0aCA9IGZyYW1lU2l6ZU1hcFtmcmFtZVNpemVDb2RlICogMyArIHNhbXBsaW5nUmF0ZUNvZGVdICogMjtcbiAgICBpZiAoc3RhcnQgKyBmcmFtZUxlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLy8gZ2V0IGNoYW5uZWwgY291bnRcbiAgICB2YXIgY2hhbm5lbE1vZGUgPSBkYXRhW3N0YXJ0ICsgNl0gPj4gNTtcbiAgICB2YXIgc2tpcENvdW50ID0gMDtcbiAgICBpZiAoY2hhbm5lbE1vZGUgPT09IDIpIHtcbiAgICAgIHNraXBDb3VudCArPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY2hhbm5lbE1vZGUgJiAxICYmIGNoYW5uZWxNb2RlICE9PSAxKSB7XG4gICAgICAgIHNraXBDb3VudCArPSAyO1xuICAgICAgfVxuICAgICAgaWYgKGNoYW5uZWxNb2RlICYgNCkge1xuICAgICAgICBza2lwQ291bnQgKz0gMjtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGxmZW9uID0gKGRhdGFbc3RhcnQgKyA2XSA8PCA4IHwgZGF0YVtzdGFydCArIDddKSA+PiAxMiAtIHNraXBDb3VudCAmIDE7XG4gICAgdmFyIGNoYW5uZWxzTWFwID0gWzIsIDEsIDIsIDMsIDMsIDQsIDQsIDVdO1xuICAgIHZhciBjaGFubmVsQ291bnQgPSBjaGFubmVsc01hcFtjaGFubmVsTW9kZV0gKyBsZmVvbjtcblxuICAgIC8vIGJ1aWxkIGRhYzMgYm94XG4gICAgdmFyIGJzaWQgPSBkYXRhW3N0YXJ0ICsgNV0gPj4gMztcbiAgICB2YXIgYnNtb2QgPSBkYXRhW3N0YXJ0ICsgNV0gJiA3O1xuICAgIHZhciBjb25maWcgPSBuZXcgVWludDhBcnJheShbc2FtcGxpbmdSYXRlQ29kZSA8PCA2IHwgYnNpZCA8PCAxIHwgYnNtb2QgPj4gMiwgKGJzbW9kICYgMykgPDwgNiB8IGNoYW5uZWxNb2RlIDw8IDMgfCBsZmVvbiA8PCAyIHwgZnJhbWVTaXplQ29kZSA+PiA0LCBmcmFtZVNpemVDb2RlIDw8IDQgJiAweGUwXSk7XG4gICAgdmFyIGZyYW1lRHVyYXRpb24gPSAxNTM2IC8gc2FtcGxlUmF0ZSAqIDkwMDAwO1xuICAgIHZhciBzdGFtcCA9IHB0cyArIGZyYW1lSW5kZXggKiBmcmFtZUR1cmF0aW9uO1xuICAgIHZhciB1bml0ID0gZGF0YS5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBmcmFtZUxlbmd0aCk7XG4gICAgdHJhY2suY29uZmlnID0gY29uZmlnO1xuICAgIHRyYWNrLmNoYW5uZWxDb3VudCA9IGNoYW5uZWxDb3VudDtcbiAgICB0cmFjay5zYW1wbGVyYXRlID0gc2FtcGxlUmF0ZTtcbiAgICB0cmFjay5zYW1wbGVzLnB1c2goe1xuICAgICAgdW5pdDogdW5pdCxcbiAgICAgIHB0czogc3RhbXBcbiAgICB9KTtcbiAgICByZXR1cm4gZnJhbWVMZW5ndGg7XG4gIH1cblxuICB2YXIgTVAzRGVtdXhlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VBdWRpb0RlbXV4ZXIpIHtcbiAgICBmdW5jdGlvbiBNUDNEZW11eGVyKCkge1xuICAgICAgcmV0dXJuIF9CYXNlQXVkaW9EZW11eGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgX2luaGVyaXRzTG9vc2UoTVAzRGVtdXhlciwgX0Jhc2VBdWRpb0RlbXV4ZXIpO1xuICAgIHZhciBfcHJvdG8gPSBNUDNEZW11eGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ucmVzZXRJbml0U2VnbWVudCA9IGZ1bmN0aW9uIHJlc2V0SW5pdFNlZ21lbnQoaW5pdFNlZ21lbnQsIGF1ZGlvQ29kZWMsIHZpZGVvQ29kZWMsIHRyYWNrRHVyYXRpb24pIHtcbiAgICAgIF9CYXNlQXVkaW9EZW11eGVyLnByb3RvdHlwZS5yZXNldEluaXRTZWdtZW50LmNhbGwodGhpcywgaW5pdFNlZ21lbnQsIGF1ZGlvQ29kZWMsIHZpZGVvQ29kZWMsIHRyYWNrRHVyYXRpb24pO1xuICAgICAgdGhpcy5fYXVkaW9UcmFjayA9IHtcbiAgICAgICAgY29udGFpbmVyOiAnYXVkaW8vbXBlZycsXG4gICAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICAgIGlkOiAyLFxuICAgICAgICBwaWQ6IC0xLFxuICAgICAgICBzZXF1ZW5jZU51bWJlcjogMCxcbiAgICAgICAgc2VnbWVudENvZGVjOiAnbXAzJyxcbiAgICAgICAgc2FtcGxlczogW10sXG4gICAgICAgIG1hbmlmZXN0Q29kZWM6IGF1ZGlvQ29kZWMsXG4gICAgICAgIGR1cmF0aW9uOiB0cmFja0R1cmF0aW9uLFxuICAgICAgICBpbnB1dFRpbWVTY2FsZTogOTAwMDAsXG4gICAgICAgIGRyb3BwZWQ6IDBcbiAgICAgIH07XG4gICAgfTtcbiAgICBNUDNEZW11eGVyLnByb2JlID0gZnVuY3Rpb24gcHJvYmUkMShkYXRhKSB7XG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBpZiBkYXRhIGNvbnRhaW5zIElEMyB0aW1lc3RhbXAgYW5kIE1QRUcgc3luYyB3b3JkXG4gICAgICAvLyBMb29rIGZvciBNUEVHIGhlYWRlciB8IDExMTEgMTExMSB8IDExMVggWFlaWCB8IHdoZXJlIFggY2FuIGJlIGVpdGhlciAwIG9yIDEgYW5kIFkgb3IgWiBzaG91bGQgYmUgMVxuICAgICAgLy8gTGF5ZXIgYml0cyAocG9zaXRpb24gMTQgYW5kIDE1KSBpbiBoZWFkZXIgc2hvdWxkIGJlIGFsd2F5cyBkaWZmZXJlbnQgZnJvbSAwIChMYXllciBJIG9yIExheWVyIElJIG9yIExheWVyIElJSSlcbiAgICAgIC8vIE1vcmUgaW5mbyBodHRwOi8vd3d3Lm1wMy10ZWNoLm9yZy9wcm9ncmFtbWVyL2ZyYW1lX2hlYWRlci5odG1sXG4gICAgICB2YXIgaWQzRGF0YSA9IGdldElkM0RhdGEoZGF0YSwgMCk7XG4gICAgICB2YXIgb2Zmc2V0ID0gKGlkM0RhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGlkM0RhdGEubGVuZ3RoKSB8fCAwO1xuXG4gICAgICAvLyBDaGVjayBmb3IgYWMtM3xlYy0zIHN5bmMgYnl0ZXMgYW5kIHJldHVybiBmYWxzZSBpZiBwcmVzZW50XG4gICAgICBpZiAoaWQzRGF0YSAmJiBkYXRhW29mZnNldF0gPT09IDB4MGIgJiYgZGF0YVtvZmZzZXQgKyAxXSA9PT0gMHg3NyAmJiBnZXRJZDNUaW1lc3RhbXAoaWQzRGF0YSkgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgLy8gY2hlY2sgdGhlIGJzaWQgdG8gY29uZmlybSBhYy0zIG9yIGVjLTMgKG5vdCBtcDMpXG4gICAgICBnZXRBdWRpb0JTSUQoZGF0YSwgb2Zmc2V0KSA8PSAxNikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aDsgb2Zmc2V0IDwgbGVuZ3RoOyBvZmZzZXQrKykge1xuICAgICAgICBpZiAocHJvYmUoZGF0YSwgb2Zmc2V0KSkge1xuICAgICAgICAgIGxvZ2dlci5sb2coJ01QRUcgQXVkaW8gc3luYyB3b3JkIGZvdW5kICEnKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgX3Byb3RvLmNhblBhcnNlID0gZnVuY3Rpb24gY2FuUGFyc2UkMShkYXRhLCBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBjYW5QYXJzZShkYXRhLCBvZmZzZXQpO1xuICAgIH07XG4gICAgX3Byb3RvLmFwcGVuZEZyYW1lID0gZnVuY3Rpb24gYXBwZW5kRnJhbWUkMSh0cmFjaywgZGF0YSwgb2Zmc2V0KSB7XG4gICAgICBpZiAodGhpcy5iYXNlUFRTID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcHBlbmRGcmFtZSh0cmFjaywgZGF0YSwgb2Zmc2V0LCB0aGlzLmJhc2VQVFMsIHRoaXMuZnJhbWVJbmRleCk7XG4gICAgfTtcbiAgICByZXR1cm4gTVAzRGVtdXhlcjtcbiAgfShCYXNlQXVkaW9EZW11eGVyKTtcblxuICB2YXIgZW1zZ1NjaGVtZVBhdHRlcm4gPSAvXFwvZW1zZ1stL11JRDMvaTtcbiAgdmFyIE1QNERlbXV4ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1QNERlbXV4ZXIob2JzZXJ2ZXIsIGNvbmZpZykge1xuICAgICAgdGhpcy5yZW1haW5kZXJEYXRhID0gbnVsbDtcbiAgICAgIHRoaXMudGltZU9mZnNldCA9IDA7XG4gICAgICB0aGlzLmNvbmZpZyA9IHZvaWQgMDtcbiAgICAgIHRoaXMudmlkZW9UcmFjayA9IHZvaWQgMDtcbiAgICAgIHRoaXMuYXVkaW9UcmFjayA9IHZvaWQgMDtcbiAgICAgIHRoaXMuaWQzVHJhY2sgPSB2b2lkIDA7XG4gICAgICB0aGlzLnR4dFRyYWNrID0gdm9pZCAwO1xuICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBNUDREZW11eGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ucmVzZXRUaW1lU3RhbXAgPSBmdW5jdGlvbiByZXNldFRpbWVTdGFtcCgpIHt9O1xuICAgIF9wcm90by5yZXNldEluaXRTZWdtZW50ID0gZnVuY3Rpb24gcmVzZXRJbml0U2VnbWVudChpbml0U2VnbWVudCwgYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgdHJhY2tEdXJhdGlvbikge1xuICAgICAgdmFyIHZpZGVvVHJhY2sgPSB0aGlzLnZpZGVvVHJhY2sgPSBkdW1teVRyYWNrKCd2aWRlbycsIDEpO1xuICAgICAgdmFyIGF1ZGlvVHJhY2sgPSB0aGlzLmF1ZGlvVHJhY2sgPSBkdW1teVRyYWNrKCdhdWRpbycsIDEpO1xuICAgICAgdmFyIGNhcHRpb25UcmFjayA9IHRoaXMudHh0VHJhY2sgPSBkdW1teVRyYWNrKCd0ZXh0JywgMSk7XG4gICAgICB0aGlzLmlkM1RyYWNrID0gZHVtbXlUcmFjaygnaWQzJywgMSk7XG4gICAgICB0aGlzLnRpbWVPZmZzZXQgPSAwO1xuICAgICAgaWYgKCEoaW5pdFNlZ21lbnQgIT0gbnVsbCAmJiBpbml0U2VnbWVudC5ieXRlTGVuZ3RoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaW5pdERhdGEgPSBwYXJzZUluaXRTZWdtZW50KGluaXRTZWdtZW50KTtcbiAgICAgIGlmIChpbml0RGF0YS52aWRlbykge1xuICAgICAgICB2YXIgX2luaXREYXRhJHZpZGVvID0gaW5pdERhdGEudmlkZW8sXG4gICAgICAgICAgaWQgPSBfaW5pdERhdGEkdmlkZW8uaWQsXG4gICAgICAgICAgdGltZXNjYWxlID0gX2luaXREYXRhJHZpZGVvLnRpbWVzY2FsZSxcbiAgICAgICAgICBjb2RlYyA9IF9pbml0RGF0YSR2aWRlby5jb2RlYyxcbiAgICAgICAgICBzdXBwbGVtZW50YWwgPSBfaW5pdERhdGEkdmlkZW8uc3VwcGxlbWVudGFsO1xuICAgICAgICB2aWRlb1RyYWNrLmlkID0gaWQ7XG4gICAgICAgIHZpZGVvVHJhY2sudGltZXNjYWxlID0gY2FwdGlvblRyYWNrLnRpbWVzY2FsZSA9IHRpbWVzY2FsZTtcbiAgICAgICAgdmlkZW9UcmFjay5jb2RlYyA9IGNvZGVjO1xuICAgICAgICB2aWRlb1RyYWNrLnN1cHBsZW1lbnRhbCA9IHN1cHBsZW1lbnRhbDtcbiAgICAgIH1cbiAgICAgIGlmIChpbml0RGF0YS5hdWRpbykge1xuICAgICAgICB2YXIgX2luaXREYXRhJGF1ZGlvID0gaW5pdERhdGEuYXVkaW8sXG4gICAgICAgICAgX2lkID0gX2luaXREYXRhJGF1ZGlvLmlkLFxuICAgICAgICAgIF90aW1lc2NhbGUgPSBfaW5pdERhdGEkYXVkaW8udGltZXNjYWxlLFxuICAgICAgICAgIF9jb2RlYyA9IF9pbml0RGF0YSRhdWRpby5jb2RlYztcbiAgICAgICAgYXVkaW9UcmFjay5pZCA9IF9pZDtcbiAgICAgICAgYXVkaW9UcmFjay50aW1lc2NhbGUgPSBfdGltZXNjYWxlO1xuICAgICAgICBhdWRpb1RyYWNrLmNvZGVjID0gX2NvZGVjO1xuICAgICAgfVxuICAgICAgY2FwdGlvblRyYWNrLmlkID0gUmVtdXhlclRyYWNrSWRDb25maWcudGV4dDtcbiAgICAgIHZpZGVvVHJhY2suc2FtcGxlRHVyYXRpb24gPSAwO1xuICAgICAgdmlkZW9UcmFjay5kdXJhdGlvbiA9IGF1ZGlvVHJhY2suZHVyYXRpb24gPSB0cmFja0R1cmF0aW9uO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0Q29udGlndWl0eSA9IGZ1bmN0aW9uIHJlc2V0Q29udGlndWl0eSgpIHtcbiAgICAgIHRoaXMucmVtYWluZGVyRGF0YSA9IG51bGw7XG4gICAgfTtcbiAgICBNUDREZW11eGVyLnByb2JlID0gZnVuY3Rpb24gcHJvYmUoZGF0YSkge1xuICAgICAgcmV0dXJuIGhhc01vb2ZEYXRhKGRhdGEpO1xuICAgIH07XG4gICAgX3Byb3RvLmRlbXV4ID0gZnVuY3Rpb24gZGVtdXgoZGF0YSwgdGltZU9mZnNldCkge1xuICAgICAgdGhpcy50aW1lT2Zmc2V0ID0gdGltZU9mZnNldDtcbiAgICAgIC8vIExvYWQgYWxsIGRhdGEgaW50byB0aGUgYXZjIHRyYWNrLiBUaGUgQ01BRiByZW11eGVyIHdpbGwgbG9vayBmb3IgdGhlIGRhdGEgaW4gdGhlIHNhbXBsZXMgb2JqZWN0OyB0aGUgcmVzdCBvZiB0aGUgZmllbGRzIGRvIG5vdCBtYXR0ZXJcbiAgICAgIHZhciB2aWRlb1NhbXBsZXMgPSBkYXRhO1xuICAgICAgdmFyIHZpZGVvVHJhY2sgPSB0aGlzLnZpZGVvVHJhY2s7XG4gICAgICB2YXIgdGV4dFRyYWNrID0gdGhpcy50eHRUcmFjaztcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5wcm9ncmVzc2l2ZSkge1xuICAgICAgICAvLyBTcGxpdCB0aGUgYnl0ZXN0cmVhbSBpbnRvIHR3byByYW5nZXM6IG9uZSBlbmNvbXBhc3NpbmcgYWxsIGRhdGEgdXAgdW50aWwgdGhlIHN0YXJ0IG9mIHRoZSBsYXN0IG1vb2YsIGFuZCBldmVyeXRoaW5nIGVsc2UuXG4gICAgICAgIC8vIFRoaXMgaXMgZG9uZSB0byBndWFyYW50ZWUgdGhhdCB3ZSdyZSBzZW5kaW5nIHZhbGlkIGRhdGEgdG8gTVNFIC0gd2hlbiBkZW11eGluZyBwcm9ncmVzc2l2ZWx5LCB3ZSBoYXZlIG5vIGd1YXJhbnRlZVxuICAgICAgICAvLyB0aGF0IHRoZSBmZXRjaCBsb2FkZXIgZ2l2ZXMgdXMgZmx1c2ggbW9vZittZGF0IHBhaXJzLiBJZiB3ZSBwdXNoIGphZ2dlZCBkYXRhIHRvIE1TRSwgaXQgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24uXG4gICAgICAgIGlmICh0aGlzLnJlbWFpbmRlckRhdGEpIHtcbiAgICAgICAgICB2aWRlb1NhbXBsZXMgPSBhcHBlbmRVaW50OEFycmF5KHRoaXMucmVtYWluZGVyRGF0YSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlZ21lbnRlZERhdGEgPSBzZWdtZW50VmFsaWRSYW5nZSh2aWRlb1NhbXBsZXMpO1xuICAgICAgICB0aGlzLnJlbWFpbmRlckRhdGEgPSBzZWdtZW50ZWREYXRhLnJlbWFpbmRlcjtcbiAgICAgICAgdmlkZW9UcmFjay5zYW1wbGVzID0gc2VnbWVudGVkRGF0YS52YWxpZCB8fCBuZXcgVWludDhBcnJheSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmlkZW9UcmFjay5zYW1wbGVzID0gdmlkZW9TYW1wbGVzO1xuICAgICAgfVxuICAgICAgdmFyIGlkM1RyYWNrID0gdGhpcy5leHRyYWN0SUQzVHJhY2sodmlkZW9UcmFjaywgdGltZU9mZnNldCk7XG4gICAgICB0ZXh0VHJhY2suc2FtcGxlcyA9IHBhcnNlU2FtcGxlcyh0aW1lT2Zmc2V0LCB2aWRlb1RyYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZpZGVvVHJhY2s6IHZpZGVvVHJhY2ssXG4gICAgICAgIGF1ZGlvVHJhY2s6IHRoaXMuYXVkaW9UcmFjayxcbiAgICAgICAgaWQzVHJhY2s6IGlkM1RyYWNrLFxuICAgICAgICB0ZXh0VHJhY2s6IHRoaXMudHh0VHJhY2tcbiAgICAgIH07XG4gICAgfTtcbiAgICBfcHJvdG8uZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgIHZhciB0aW1lT2Zmc2V0ID0gdGhpcy50aW1lT2Zmc2V0O1xuICAgICAgdmFyIHZpZGVvVHJhY2sgPSB0aGlzLnZpZGVvVHJhY2s7XG4gICAgICB2YXIgdGV4dFRyYWNrID0gdGhpcy50eHRUcmFjaztcbiAgICAgIHZpZGVvVHJhY2suc2FtcGxlcyA9IHRoaXMucmVtYWluZGVyRGF0YSB8fCBuZXcgVWludDhBcnJheSgpO1xuICAgICAgdGhpcy5yZW1haW5kZXJEYXRhID0gbnVsbDtcbiAgICAgIHZhciBpZDNUcmFjayA9IHRoaXMuZXh0cmFjdElEM1RyYWNrKHZpZGVvVHJhY2ssIHRoaXMudGltZU9mZnNldCk7XG4gICAgICB0ZXh0VHJhY2suc2FtcGxlcyA9IHBhcnNlU2FtcGxlcyh0aW1lT2Zmc2V0LCB2aWRlb1RyYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZpZGVvVHJhY2s6IHZpZGVvVHJhY2ssXG4gICAgICAgIGF1ZGlvVHJhY2s6IGR1bW15VHJhY2soKSxcbiAgICAgICAgaWQzVHJhY2s6IGlkM1RyYWNrLFxuICAgICAgICB0ZXh0VHJhY2s6IGR1bW15VHJhY2soKVxuICAgICAgfTtcbiAgICB9O1xuICAgIF9wcm90by5leHRyYWN0SUQzVHJhY2sgPSBmdW5jdGlvbiBleHRyYWN0SUQzVHJhY2sodmlkZW9UcmFjaywgdGltZU9mZnNldCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBpZDNUcmFjayA9IHRoaXMuaWQzVHJhY2s7XG4gICAgICBpZiAodmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgICB2YXIgZW1zZ3MgPSBmaW5kQm94KHZpZGVvVHJhY2suc2FtcGxlcywgWydlbXNnJ10pO1xuICAgICAgICBpZiAoZW1zZ3MpIHtcbiAgICAgICAgICBlbXNncy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB2YXIgZW1zZ0luZm8gPSBwYXJzZUVtc2coZGF0YSk7XG4gICAgICAgICAgICBpZiAoZW1zZ1NjaGVtZVBhdHRlcm4udGVzdChlbXNnSW5mby5zY2hlbWVJZFVyaSkpIHtcbiAgICAgICAgICAgICAgdmFyIHB0cyA9IGdldEVtc2dTdGFydFRpbWUoZW1zZ0luZm8sIHRpbWVPZmZzZXQpO1xuICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBlbXNnSW5mby5ldmVudER1cmF0aW9uID09PSAweGZmZmZmZmZmID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDogZW1zZ0luZm8uZXZlbnREdXJhdGlvbiAvIGVtc2dJbmZvLnRpbWVTY2FsZTtcbiAgICAgICAgICAgICAgLy8gU2FmYXJpIHRha2VzIGFueXRoaW5nIDw9IDAuMDAxIHNlY29uZHMgYW5kIG1hcHMgaXQgdG8gSW5maW5pdHlcbiAgICAgICAgICAgICAgaWYgKGR1cmF0aW9uIDw9IDAuMDAxKSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBlbXNnSW5mby5wYXlsb2FkO1xuICAgICAgICAgICAgICBpZDNUcmFjay5zYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGRhdGE6IHBheWxvYWQsXG4gICAgICAgICAgICAgICAgbGVuOiBwYXlsb2FkLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICAgICAgZHRzOiBwdHMsXG4gICAgICAgICAgICAgICAgcHRzOiBwdHMsXG4gICAgICAgICAgICAgICAgdHlwZTogTWV0YWRhdGFTY2hlbWEuZW1zZyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb25cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzLmNvbmZpZy5lbmFibGVFbXNnS0xWTWV0YWRhdGEgJiYgZW1zZ0luZm8uc2NoZW1lSWRVcmkuc3RhcnRzV2l0aCgndXJuOm1pc2I6S0xWOmJpbjoxOTEwLjEnKSkge1xuICAgICAgICAgICAgICB2YXIgX3B0cyA9IGdldEVtc2dTdGFydFRpbWUoZW1zZ0luZm8sIHRpbWVPZmZzZXQpO1xuICAgICAgICAgICAgICBpZDNUcmFjay5zYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGRhdGE6IGVtc2dJbmZvLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgbGVuOiBlbXNnSW5mby5wYXlsb2FkLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICAgICAgZHRzOiBfcHRzLFxuICAgICAgICAgICAgICAgIHB0czogX3B0cyxcbiAgICAgICAgICAgICAgICB0eXBlOiBNZXRhZGF0YVNjaGVtYS5taXNia2x2LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpZDNUcmFjaztcbiAgICB9O1xuICAgIF9wcm90by5kZW11eFNhbXBsZUFlcyA9IGZ1bmN0aW9uIGRlbXV4U2FtcGxlQWVzKGRhdGEsIGtleURhdGEsIHRpbWVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1RoZSBNUDQgZGVtdXhlciBkb2VzIG5vdCBzdXBwb3J0IFNBTVBMRS1BRVMgZGVjcnlwdGlvbicpKTtcbiAgICB9O1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMuY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMucmVtYWluZGVyRGF0YSA9IG51bGw7XG4gICAgICB0aGlzLnZpZGVvVHJhY2sgPSB0aGlzLmF1ZGlvVHJhY2sgPSB0aGlzLmlkM1RyYWNrID0gdGhpcy50eHRUcmFjayA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHJldHVybiBNUDREZW11eGVyO1xuICB9KCk7XG4gIGZ1bmN0aW9uIGdldEVtc2dTdGFydFRpbWUoZW1zZ0luZm8sIHRpbWVPZmZzZXQpIHtcbiAgICByZXR1cm4gaXNGaW5pdGVOdW1iZXIoZW1zZ0luZm8ucHJlc2VudGF0aW9uVGltZSkgPyBlbXNnSW5mby5wcmVzZW50YXRpb25UaW1lIC8gZW1zZ0luZm8udGltZVNjYWxlIDogdGltZU9mZnNldCArIGVtc2dJbmZvLnByZXNlbnRhdGlvblRpbWVEZWx0YSAvIGVtc2dJbmZvLnRpbWVTY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTQU1QTEUtQUVTIGRlY3J5cHRlclxuICAgKi9cblxuICB2YXIgU2FtcGxlQWVzRGVjcnlwdGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTYW1wbGVBZXNEZWNyeXB0ZXIob2JzZXJ2ZXIsIGNvbmZpZywga2V5RGF0YSkge1xuICAgICAgdGhpcy5rZXlEYXRhID0gdm9pZCAwO1xuICAgICAgdGhpcy5kZWNyeXB0ZXIgPSB2b2lkIDA7XG4gICAgICB0aGlzLmtleURhdGEgPSBrZXlEYXRhO1xuICAgICAgdGhpcy5kZWNyeXB0ZXIgPSBuZXcgRGVjcnlwdGVyKGNvbmZpZywge1xuICAgICAgICByZW1vdmVQS0NTN1BhZGRpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IFNhbXBsZUFlc0RlY3J5cHRlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLmRlY3J5cHRCdWZmZXIgPSBmdW5jdGlvbiBkZWNyeXB0QnVmZmVyKGVuY3J5cHRlZERhdGEpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlY3J5cHRlci5kZWNyeXB0KGVuY3J5cHRlZERhdGEsIHRoaXMua2V5RGF0YS5rZXkuYnVmZmVyLCB0aGlzLmtleURhdGEuaXYuYnVmZmVyLCBEZWNyeXB0ZXJBZXNNb2RlLmNiYyk7XG4gICAgfVxuXG4gICAgLy8gQUFDIC0gZW5jcnlwdCBhbGwgZnVsbCAxNiBieXRlcyBibG9ja3Mgc3RhcnRpbmcgZnJvbSBvZmZzZXQgMTZcbiAgICA7XG4gICAgX3Byb3RvLmRlY3J5cHRBYWNTYW1wbGUgPSBmdW5jdGlvbiBkZWNyeXB0QWFjU2FtcGxlKHNhbXBsZXMsIHNhbXBsZUluZGV4LCBjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBjdXJVbml0ID0gc2FtcGxlc1tzYW1wbGVJbmRleF0udW5pdDtcbiAgICAgIGlmIChjdXJVbml0Lmxlbmd0aCA8PSAxNikge1xuICAgICAgICAvLyBObyBlbmNyeXB0ZWQgcG9ydGlvbiBpbiB0aGlzIHNhbXBsZSAoZmlyc3QgMTYgYnl0ZXMgaXMgbm90XG4gICAgICAgIC8vIGVuY3J5cHRlZCwgc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2FyY2hpdmUvZG9jdW1lbnRhdGlvbi9BdWRpb1ZpZGVvL0NvbmNlcHR1YWwvSExTX1NhbXBsZV9FbmNyeXB0aW9uL0VuY3J5cHRpb24vRW5jcnlwdGlvbi5odG1sKSxcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGVuY3J5cHRlZERhdGEgPSBjdXJVbml0LnN1YmFycmF5KDE2LCBjdXJVbml0Lmxlbmd0aCAtIGN1clVuaXQubGVuZ3RoICUgMTYpO1xuICAgICAgdmFyIGVuY3J5cHRlZEJ1ZmZlciA9IGVuY3J5cHRlZERhdGEuYnVmZmVyLnNsaWNlKGVuY3J5cHRlZERhdGEuYnl0ZU9mZnNldCwgZW5jcnlwdGVkRGF0YS5ieXRlT2Zmc2V0ICsgZW5jcnlwdGVkRGF0YS5sZW5ndGgpO1xuICAgICAgdGhpcy5kZWNyeXB0QnVmZmVyKGVuY3J5cHRlZEJ1ZmZlcikudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkQnVmZmVyKSB7XG4gICAgICAgIHZhciBkZWNyeXB0ZWREYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGVjcnlwdGVkQnVmZmVyKTtcbiAgICAgICAgY3VyVW5pdC5zZXQoZGVjcnlwdGVkRGF0YSwgMTYpO1xuICAgICAgICBpZiAoIV90aGlzLmRlY3J5cHRlci5pc1N5bmMoKSkge1xuICAgICAgICAgIF90aGlzLmRlY3J5cHRBYWNTYW1wbGVzKHNhbXBsZXMsIHNhbXBsZUluZGV4ICsgMSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5kZWNyeXB0QWFjU2FtcGxlcyA9IGZ1bmN0aW9uIGRlY3J5cHRBYWNTYW1wbGVzKHNhbXBsZXMsIHNhbXBsZUluZGV4LCBjYWxsYmFjaykge1xuICAgICAgZm9yICg7OyBzYW1wbGVJbmRleCsrKSB7XG4gICAgICAgIGlmIChzYW1wbGVJbmRleCA+PSBzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzYW1wbGVzW3NhbXBsZUluZGV4XS51bml0Lmxlbmd0aCA8IDMyKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWNyeXB0QWFjU2FtcGxlKHNhbXBsZXMsIHNhbXBsZUluZGV4LCBjYWxsYmFjayk7XG4gICAgICAgIGlmICghdGhpcy5kZWNyeXB0ZXIuaXNTeW5jKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBVkMgLSBlbmNyeXB0IG9uZSAxNiBieXRlcyBibG9jayBvdXQgb2YgdGVuLCBzdGFydGluZyBmcm9tIG9mZnNldCAzMlxuICAgIDtcbiAgICBfcHJvdG8uZ2V0QXZjRW5jcnlwdGVkRGF0YSA9IGZ1bmN0aW9uIGdldEF2Y0VuY3J5cHRlZERhdGEoZGVjb2RlZERhdGEpIHtcbiAgICAgIHZhciBlbmNyeXB0ZWREYXRhTGVuID0gTWF0aC5mbG9vcigoZGVjb2RlZERhdGEubGVuZ3RoIC0gNDgpIC8gMTYwKSAqIDE2ICsgMTY7XG4gICAgICB2YXIgZW5jcnlwdGVkRGF0YSA9IG5ldyBJbnQ4QXJyYXkoZW5jcnlwdGVkRGF0YUxlbik7XG4gICAgICB2YXIgb3V0cHV0UG9zID0gMDtcbiAgICAgIGZvciAodmFyIGlucHV0UG9zID0gMzI7IGlucHV0UG9zIDwgZGVjb2RlZERhdGEubGVuZ3RoIC0gMTY7IGlucHV0UG9zICs9IDE2MCwgb3V0cHV0UG9zICs9IDE2KSB7XG4gICAgICAgIGVuY3J5cHRlZERhdGEuc2V0KGRlY29kZWREYXRhLnN1YmFycmF5KGlucHV0UG9zLCBpbnB1dFBvcyArIDE2KSwgb3V0cHV0UG9zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmNyeXB0ZWREYXRhO1xuICAgIH07XG4gICAgX3Byb3RvLmdldEF2Y0RlY3J5cHRlZFVuaXQgPSBmdW5jdGlvbiBnZXRBdmNEZWNyeXB0ZWRVbml0KGRlY29kZWREYXRhLCBkZWNyeXB0ZWREYXRhKSB7XG4gICAgICB2YXIgdWludDhEZWNyeXB0ZWREYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGVjcnlwdGVkRGF0YSk7XG4gICAgICB2YXIgaW5wdXRQb3MgPSAwO1xuICAgICAgZm9yICh2YXIgb3V0cHV0UG9zID0gMzI7IG91dHB1dFBvcyA8IGRlY29kZWREYXRhLmxlbmd0aCAtIDE2OyBvdXRwdXRQb3MgKz0gMTYwLCBpbnB1dFBvcyArPSAxNikge1xuICAgICAgICBkZWNvZGVkRGF0YS5zZXQodWludDhEZWNyeXB0ZWREYXRhLnN1YmFycmF5KGlucHV0UG9zLCBpbnB1dFBvcyArIDE2KSwgb3V0cHV0UG9zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWNvZGVkRGF0YTtcbiAgICB9O1xuICAgIF9wcm90by5kZWNyeXB0QXZjU2FtcGxlID0gZnVuY3Rpb24gZGVjcnlwdEF2Y1NhbXBsZShzYW1wbGVzLCBzYW1wbGVJbmRleCwgdW5pdEluZGV4LCBjYWxsYmFjaywgY3VyVW5pdCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICB2YXIgZGVjb2RlZERhdGEgPSBkaXNjYXJkRVBCKGN1clVuaXQuZGF0YSk7XG4gICAgICB2YXIgZW5jcnlwdGVkRGF0YSA9IHRoaXMuZ2V0QXZjRW5jcnlwdGVkRGF0YShkZWNvZGVkRGF0YSk7XG4gICAgICB0aGlzLmRlY3J5cHRCdWZmZXIoZW5jcnlwdGVkRGF0YS5idWZmZXIpLnRoZW4oZnVuY3Rpb24gKGRlY3J5cHRlZEJ1ZmZlcikge1xuICAgICAgICBjdXJVbml0LmRhdGEgPSBfdGhpczIuZ2V0QXZjRGVjcnlwdGVkVW5pdChkZWNvZGVkRGF0YSwgZGVjcnlwdGVkQnVmZmVyKTtcbiAgICAgICAgaWYgKCFfdGhpczIuZGVjcnlwdGVyLmlzU3luYygpKSB7XG4gICAgICAgICAgX3RoaXMyLmRlY3J5cHRBdmNTYW1wbGVzKHNhbXBsZXMsIHNhbXBsZUluZGV4LCB1bml0SW5kZXggKyAxLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLmRlY3J5cHRBdmNTYW1wbGVzID0gZnVuY3Rpb24gZGVjcnlwdEF2Y1NhbXBsZXMoc2FtcGxlcywgc2FtcGxlSW5kZXgsIHVuaXRJbmRleCwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChzYW1wbGVzIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZWNyeXB0IHNhbXBsZXMgb2YgdHlwZSBVaW50OEFycmF5Jyk7XG4gICAgICB9XG4gICAgICBmb3IgKDs7IHNhbXBsZUluZGV4KyssIHVuaXRJbmRleCA9IDApIHtcbiAgICAgICAgaWYgKHNhbXBsZUluZGV4ID49IHNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN1clVuaXRzID0gc2FtcGxlc1tzYW1wbGVJbmRleF0udW5pdHM7XG4gICAgICAgIGZvciAoOzsgdW5pdEluZGV4KyspIHtcbiAgICAgICAgICBpZiAodW5pdEluZGV4ID49IGN1clVuaXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjdXJVbml0ID0gY3VyVW5pdHNbdW5pdEluZGV4XTtcbiAgICAgICAgICBpZiAoY3VyVW5pdC5kYXRhLmxlbmd0aCA8PSA0OCB8fCBjdXJVbml0LnR5cGUgIT09IDEgJiYgY3VyVW5pdC50eXBlICE9PSA1KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5kZWNyeXB0QXZjU2FtcGxlKHNhbXBsZXMsIHNhbXBsZUluZGV4LCB1bml0SW5kZXgsIGNhbGxiYWNrLCBjdXJVbml0KTtcbiAgICAgICAgICBpZiAoIXRoaXMuZGVjcnlwdGVyLmlzU3luYygpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2FtcGxlQWVzRGVjcnlwdGVyO1xuICB9KCk7XG5cbiAgdmFyIEJhc2VWaWRlb1BhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmFzZVZpZGVvUGFyc2VyKCkge1xuICAgICAgdGhpcy5WaWRlb1NhbXBsZSA9IG51bGw7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBCYXNlVmlkZW9QYXJzZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5jcmVhdGVWaWRlb1NhbXBsZSA9IGZ1bmN0aW9uIGNyZWF0ZVZpZGVvU2FtcGxlKGtleSwgcHRzLCBkdHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBmcmFtZTogZmFsc2UsXG4gICAgICAgIHB0czogcHRzLFxuICAgICAgICBkdHM6IGR0cyxcbiAgICAgICAgdW5pdHM6IFtdLFxuICAgICAgICBsZW5ndGg6IDBcbiAgICAgIH07XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0TGFzdE5hbFVuaXQgPSBmdW5jdGlvbiBnZXRMYXN0TmFsVW5pdChzYW1wbGVzKSB7XG4gICAgICB2YXIgX1ZpZGVvU2FtcGxlO1xuICAgICAgdmFyIFZpZGVvU2FtcGxlID0gdGhpcy5WaWRlb1NhbXBsZTtcbiAgICAgIHZhciBsYXN0VW5pdDtcbiAgICAgIC8vIHRyeSB0byBmYWxsYmFjayB0byBwcmV2aW91cyBzYW1wbGUgaWYgY3VycmVudCBvbmUgaXMgZW1wdHlcbiAgICAgIGlmICghVmlkZW9TYW1wbGUgfHwgVmlkZW9TYW1wbGUudW5pdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIFZpZGVvU2FtcGxlID0gc2FtcGxlc1tzYW1wbGVzLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuICAgICAgaWYgKChfVmlkZW9TYW1wbGUgPSBWaWRlb1NhbXBsZSkgIT0gbnVsbCAmJiBfVmlkZW9TYW1wbGUudW5pdHMpIHtcbiAgICAgICAgdmFyIHVuaXRzID0gVmlkZW9TYW1wbGUudW5pdHM7XG4gICAgICAgIGxhc3RVbml0ID0gdW5pdHNbdW5pdHMubGVuZ3RoIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gbGFzdFVuaXQ7XG4gICAgfTtcbiAgICBfcHJvdG8ucHVzaEFjY2Vzc1VuaXQgPSBmdW5jdGlvbiBwdXNoQWNjZXNzVW5pdChWaWRlb1NhbXBsZSwgdmlkZW9UcmFjaykge1xuICAgICAgaWYgKFZpZGVvU2FtcGxlLnVuaXRzLmxlbmd0aCAmJiBWaWRlb1NhbXBsZS5mcmFtZSkge1xuICAgICAgICAvLyBpZiBzYW1wbGUgZG9lcyBub3QgaGF2ZSBQVFMvRFRTLCBwYXRjaCB3aXRoIGxhc3Qgc2FtcGxlIFBUUy9EVFNcbiAgICAgICAgaWYgKFZpZGVvU2FtcGxlLnB0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHNhbXBsZXMgPSB2aWRlb1RyYWNrLnNhbXBsZXM7XG4gICAgICAgICAgdmFyIG5iU2FtcGxlcyA9IHNhbXBsZXMubGVuZ3RoO1xuICAgICAgICAgIGlmIChuYlNhbXBsZXMpIHtcbiAgICAgICAgICAgIHZhciBsYXN0U2FtcGxlID0gc2FtcGxlc1tuYlNhbXBsZXMgLSAxXTtcbiAgICAgICAgICAgIFZpZGVvU2FtcGxlLnB0cyA9IGxhc3RTYW1wbGUucHRzO1xuICAgICAgICAgICAgVmlkZW9TYW1wbGUuZHRzID0gbGFzdFNhbXBsZS5kdHM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRyb3BwaW5nIHNhbXBsZXMsIG5vIHRpbWVzdGFtcCBmb3VuZFxuICAgICAgICAgICAgdmlkZW9UcmFjay5kcm9wcGVkKys7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZpZGVvVHJhY2suc2FtcGxlcy5wdXNoKFZpZGVvU2FtcGxlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5wYXJzZU5BTHUgPSBmdW5jdGlvbiBwYXJzZU5BTHUodHJhY2ssIGFycmF5LCBlbmRPZlNlZ21lbnQpIHtcbiAgICAgIHZhciBsZW4gPSBhcnJheS5ieXRlTGVuZ3RoO1xuICAgICAgdmFyIHN0YXRlID0gdHJhY2submFsdVN0YXRlIHx8IDA7XG4gICAgICB2YXIgbGFzdFN0YXRlID0gc3RhdGU7XG4gICAgICB2YXIgdW5pdHMgPSBbXTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHZhciBvdmVyZmxvdztcbiAgICAgIHZhciB1bml0VHlwZTtcbiAgICAgIHZhciBsYXN0VW5pdFN0YXJ0ID0gLTE7XG4gICAgICB2YXIgbGFzdFVuaXRUeXBlID0gMDtcbiAgICAgIC8vIGxvZ2dlci5sb2coJ1BFUzonICsgSGV4LmhleER1bXAoYXJyYXkpKTtcblxuICAgICAgaWYgKHN0YXRlID09PSAtMSkge1xuICAgICAgICAvLyBzcGVjaWFsIHVzZSBjYXNlIHdoZXJlIHdlIGZvdW5kIDMgb3IgNC1ieXRlIHN0YXJ0IGNvZGVzIGV4YWN0bHkgYXQgdGhlIGVuZCBvZiBwcmV2aW91cyBQRVMgcGFja2V0XG4gICAgICAgIGxhc3RVbml0U3RhcnQgPSAwO1xuICAgICAgICAvLyBOQUx1IHR5cGUgaXMgdmFsdWUgcmVhZCBmcm9tIG9mZnNldCAwXG4gICAgICAgIGxhc3RVbml0VHlwZSA9IHRoaXMuZ2V0TkFMdVR5cGUoYXJyYXksIDApO1xuICAgICAgICBzdGF0ZSA9IDA7XG4gICAgICAgIGkgPSAxO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgdmFsdWUgPSBhcnJheVtpKytdO1xuICAgICAgICAvLyBvcHRpbWl6YXRpb24uIHN0YXRlIDAgYW5kIDEgYXJlIHRoZSBwcmVkb21pbmFudCBjYXNlLiBsZXQncyBoYW5kbGUgdGhlbSBvdXRzaWRlIG9mIHRoZSBzd2l0Y2gvY2FzZVxuICAgICAgICBpZiAoIXN0YXRlKSB7XG4gICAgICAgICAgc3RhdGUgPSB2YWx1ZSA/IDAgOiAxO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gMSkge1xuICAgICAgICAgIHN0YXRlID0gdmFsdWUgPyAwIDogMjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBoZXJlIHdlIGhhdmUgc3RhdGUgZWl0aGVyIGVxdWFsIHRvIDIgb3IgM1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgc3RhdGUgPSAzO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAxKSB7XG4gICAgICAgICAgb3ZlcmZsb3cgPSBpIC0gc3RhdGUgLSAxO1xuICAgICAgICAgIGlmIChsYXN0VW5pdFN0YXJ0ID49IDApIHtcbiAgICAgICAgICAgIHZhciB1bml0ID0ge1xuICAgICAgICAgICAgICBkYXRhOiBhcnJheS5zdWJhcnJheShsYXN0VW5pdFN0YXJ0LCBvdmVyZmxvdyksXG4gICAgICAgICAgICAgIHR5cGU6IGxhc3RVbml0VHlwZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGxvZ2dlci5sb2coJ3B1c2hpbmcgTkFMVSwgdHlwZS9zaXplOicgKyB1bml0LnR5cGUgKyAnLycgKyB1bml0LmRhdGEuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICB1bml0cy5wdXNoKHVuaXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBsYXN0VW5pdFN0YXJ0IGlzIHVuZGVmaW5lZCA9PiB0aGlzIGlzIHRoZSBmaXJzdCBzdGFydCBjb2RlIGZvdW5kIGluIHRoaXMgUEVTIHBhY2tldFxuICAgICAgICAgICAgLy8gZmlyc3QgY2hlY2sgaWYgc3RhcnQgY29kZSBkZWxpbWl0ZXIgaXMgb3ZlcmxhcHBpbmcgYmV0d2VlbiAyIFBFUyBwYWNrZXRzLFxuICAgICAgICAgICAgLy8gaWUgaXQgc3RhcnRlZCBpbiBsYXN0IHBhY2tldCAobGFzdFN0YXRlIG5vdCB6ZXJvKVxuICAgICAgICAgICAgLy8gYW5kIGVuZGVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBQRVMgcGFja2V0IChpIDw9IDQgLSBsYXN0U3RhdGUpXG4gICAgICAgICAgICB2YXIgbGFzdFVuaXQgPSB0aGlzLmdldExhc3ROYWxVbml0KHRyYWNrLnNhbXBsZXMpO1xuICAgICAgICAgICAgaWYgKGxhc3RVbml0KSB7XG4gICAgICAgICAgICAgIGlmIChsYXN0U3RhdGUgJiYgaSA8PSA0IC0gbGFzdFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgZGVsaW1pdGVyIG92ZXJsYXBwaW5nIGJldHdlZW4gUEVTIHBhY2tldHNcbiAgICAgICAgICAgICAgICAvLyBzdHJpcCBzdGFydCBkZWxpbWl0ZXIgYnl0ZXMgZnJvbSB0aGUgZW5kIG9mIGxhc3QgTkFMIHVuaXRcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBsYXN0VW5pdCBoYWQgYSBzdGF0ZSBkaWZmZXJlbnQgZnJvbSB6ZXJvXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RVbml0LnN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAvLyBzdHJpcCBsYXN0IGJ5dGVzXG4gICAgICAgICAgICAgICAgICBsYXN0VW5pdC5kYXRhID0gbGFzdFVuaXQuZGF0YS5zdWJhcnJheSgwLCBsYXN0VW5pdC5kYXRhLmJ5dGVMZW5ndGggLSBsYXN0U3RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBJZiBOQUwgdW5pdHMgYXJlIG5vdCBzdGFydGluZyByaWdodCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBQRVMgcGFja2V0LCBwdXNoIHByZWNlZGluZyBkYXRhIGludG8gcHJldmlvdXMgTkFMIHVuaXQuXG5cbiAgICAgICAgICAgICAgaWYgKG92ZXJmbG93ID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIGxvZ2dlci5sb2coJ2ZpcnN0IE5BTFUgZm91bmQgd2l0aCBvdmVyZmxvdzonICsgb3ZlcmZsb3cpO1xuICAgICAgICAgICAgICAgIGxhc3RVbml0LmRhdGEgPSBhcHBlbmRVaW50OEFycmF5KGxhc3RVbml0LmRhdGEsIGFycmF5LnN1YmFycmF5KDAsIG92ZXJmbG93KSk7XG4gICAgICAgICAgICAgICAgbGFzdFVuaXQuc3RhdGUgPSAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIGNhbiByZWFkIHVuaXQgdHlwZVxuICAgICAgICAgIGlmIChpIDwgbGVuKSB7XG4gICAgICAgICAgICB1bml0VHlwZSA9IHRoaXMuZ2V0TkFMdVR5cGUoYXJyYXksIGkpO1xuICAgICAgICAgICAgLy8gbG9nZ2VyLmxvZygnZmluZCBOQUxVIEAgb2Zmc2V0OicgKyBpICsgJyx0eXBlOicgKyB1bml0VHlwZSk7XG4gICAgICAgICAgICBsYXN0VW5pdFN0YXJ0ID0gaTtcbiAgICAgICAgICAgIGxhc3RVbml0VHlwZSA9IHVuaXRUeXBlO1xuICAgICAgICAgICAgc3RhdGUgPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBub3QgZW5vdWdoIGJ5dGUgdG8gcmVhZCB1bml0IHR5cGUuIGxldCdzIHJlYWQgaXQgb24gbmV4dCBQRVMgcGFyc2luZ1xuICAgICAgICAgICAgc3RhdGUgPSAtMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobGFzdFVuaXRTdGFydCA+PSAwICYmIHN0YXRlID49IDApIHtcbiAgICAgICAgdmFyIF91bml0ID0ge1xuICAgICAgICAgIGRhdGE6IGFycmF5LnN1YmFycmF5KGxhc3RVbml0U3RhcnQsIGxlbiksXG4gICAgICAgICAgdHlwZTogbGFzdFVuaXRUeXBlLFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9O1xuICAgICAgICB1bml0cy5wdXNoKF91bml0KTtcbiAgICAgICAgLy8gbG9nZ2VyLmxvZygncHVzaGluZyBOQUxVLCB0eXBlL3NpemUvc3RhdGU6JyArIHVuaXQudHlwZSArICcvJyArIHVuaXQuZGF0YS5ieXRlTGVuZ3RoICsgJy8nICsgc3RhdGUpO1xuICAgICAgfVxuICAgICAgLy8gbm8gTkFMdSBmb3VuZFxuICAgICAgaWYgKHVuaXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBhcHBlbmQgcGVzLmRhdGEgdG8gcHJldmlvdXMgTkFMIHVuaXRcbiAgICAgICAgdmFyIF9sYXN0VW5pdCA9IHRoaXMuZ2V0TGFzdE5hbFVuaXQodHJhY2suc2FtcGxlcyk7XG4gICAgICAgIGlmIChfbGFzdFVuaXQpIHtcbiAgICAgICAgICBfbGFzdFVuaXQuZGF0YSA9IGFwcGVuZFVpbnQ4QXJyYXkoX2xhc3RVbml0LmRhdGEsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdHJhY2submFsdVN0YXRlID0gc3RhdGU7XG4gICAgICByZXR1cm4gdW5pdHM7XG4gICAgfTtcbiAgICByZXR1cm4gQmFzZVZpZGVvUGFyc2VyO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIFBhcnNlciBmb3IgZXhwb25lbnRpYWwgR29sb21iIGNvZGVzLCBhIHZhcmlhYmxlLWJpdHdpZHRoIG51bWJlciBlbmNvZGluZyBzY2hlbWUgdXNlZCBieSBoMjY0LlxuICAgKi9cblxuICB2YXIgRXhwR29sb21iID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFeHBHb2xvbWIoZGF0YSkge1xuICAgICAgdGhpcy5kYXRhID0gdm9pZCAwO1xuICAgICAgdGhpcy5ieXRlc0F2YWlsYWJsZSA9IHZvaWQgMDtcbiAgICAgIHRoaXMud29yZCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuYml0c0F2YWlsYWJsZSA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAvLyB0aGUgbnVtYmVyIG9mIGJ5dGVzIGxlZnQgdG8gZXhhbWluZSBpbiB0aGlzLmRhdGFcbiAgICAgIHRoaXMuYnl0ZXNBdmFpbGFibGUgPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAvLyB0aGUgY3VycmVudCB3b3JkIGJlaW5nIGV4YW1pbmVkXG4gICAgICB0aGlzLndvcmQgPSAwOyAvLyA6dWludFxuICAgICAgLy8gdGhlIG51bWJlciBvZiBiaXRzIGxlZnQgdG8gZXhhbWluZSBpbiB0aGUgY3VycmVudCB3b3JkXG4gICAgICB0aGlzLmJpdHNBdmFpbGFibGUgPSAwOyAvLyA6dWludFxuICAgIH1cblxuICAgIC8vICgpOnZvaWRcbiAgICB2YXIgX3Byb3RvID0gRXhwR29sb21iLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ubG9hZFdvcmQgPSBmdW5jdGlvbiBsb2FkV29yZCgpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgdmFyIGJ5dGVzQXZhaWxhYmxlID0gdGhpcy5ieXRlc0F2YWlsYWJsZTtcbiAgICAgIHZhciBwb3NpdGlvbiA9IGRhdGEuYnl0ZUxlbmd0aCAtIGJ5dGVzQXZhaWxhYmxlO1xuICAgICAgdmFyIHdvcmtpbmdCeXRlcyA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgICAgdmFyIGF2YWlsYWJsZUJ5dGVzID0gTWF0aC5taW4oNCwgYnl0ZXNBdmFpbGFibGUpO1xuICAgICAgaWYgKGF2YWlsYWJsZUJ5dGVzID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gYnl0ZXMgYXZhaWxhYmxlJyk7XG4gICAgICB9XG4gICAgICB3b3JraW5nQnl0ZXMuc2V0KGRhdGEuc3ViYXJyYXkocG9zaXRpb24sIHBvc2l0aW9uICsgYXZhaWxhYmxlQnl0ZXMpKTtcbiAgICAgIHRoaXMud29yZCA9IG5ldyBEYXRhVmlldyh3b3JraW5nQnl0ZXMuYnVmZmVyKS5nZXRVaW50MzIoMCk7XG4gICAgICAvLyB0cmFjayB0aGUgYW1vdW50IG9mIHRoaXMuZGF0YSB0aGF0IGhhcyBiZWVuIHByb2Nlc3NlZFxuICAgICAgdGhpcy5iaXRzQXZhaWxhYmxlID0gYXZhaWxhYmxlQnl0ZXMgKiA4O1xuICAgICAgdGhpcy5ieXRlc0F2YWlsYWJsZSAtPSBhdmFpbGFibGVCeXRlcztcbiAgICB9XG5cbiAgICAvLyAoY291bnQ6aW50KTp2b2lkXG4gICAgO1xuICAgIF9wcm90by5za2lwQml0cyA9IGZ1bmN0aW9uIHNraXBCaXRzKGNvdW50KSB7XG4gICAgICB2YXIgc2tpcEJ5dGVzOyAvLyA6aW50XG4gICAgICBjb3VudCA9IE1hdGgubWluKGNvdW50LCB0aGlzLmJ5dGVzQXZhaWxhYmxlICogOCArIHRoaXMuYml0c0F2YWlsYWJsZSk7XG4gICAgICBpZiAodGhpcy5iaXRzQXZhaWxhYmxlID4gY291bnQpIHtcbiAgICAgICAgdGhpcy53b3JkIDw8PSBjb3VudDtcbiAgICAgICAgdGhpcy5iaXRzQXZhaWxhYmxlIC09IGNvdW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY291bnQgLT0gdGhpcy5iaXRzQXZhaWxhYmxlO1xuICAgICAgICBza2lwQnl0ZXMgPSBjb3VudCA+PiAzO1xuICAgICAgICBjb3VudCAtPSBza2lwQnl0ZXMgPDwgMztcbiAgICAgICAgdGhpcy5ieXRlc0F2YWlsYWJsZSAtPSBza2lwQnl0ZXM7XG4gICAgICAgIHRoaXMubG9hZFdvcmQoKTtcbiAgICAgICAgdGhpcy53b3JkIDw8PSBjb3VudDtcbiAgICAgICAgdGhpcy5iaXRzQXZhaWxhYmxlIC09IGNvdW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIChzaXplOmludCk6dWludFxuICAgIDtcbiAgICBfcHJvdG8ucmVhZEJpdHMgPSBmdW5jdGlvbiByZWFkQml0cyhzaXplKSB7XG4gICAgICB2YXIgYml0cyA9IE1hdGgubWluKHRoaXMuYml0c0F2YWlsYWJsZSwgc2l6ZSk7IC8vIDp1aW50XG4gICAgICB2YXIgdmFsdSA9IHRoaXMud29yZCA+Pj4gMzIgLSBiaXRzOyAvLyA6dWludFxuICAgICAgaWYgKHNpemUgPiAzMikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0Nhbm5vdCByZWFkIG1vcmUgdGhhbiAzMiBiaXRzIGF0IGEgdGltZScpO1xuICAgICAgfVxuICAgICAgdGhpcy5iaXRzQXZhaWxhYmxlIC09IGJpdHM7XG4gICAgICBpZiAodGhpcy5iaXRzQXZhaWxhYmxlID4gMCkge1xuICAgICAgICB0aGlzLndvcmQgPDw9IGJpdHM7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYnl0ZXNBdmFpbGFibGUgPiAwKSB7XG4gICAgICAgIHRoaXMubG9hZFdvcmQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gYml0cyBhdmFpbGFibGUnKTtcbiAgICAgIH1cbiAgICAgIGJpdHMgPSBzaXplIC0gYml0cztcbiAgICAgIGlmIChiaXRzID4gMCAmJiB0aGlzLmJpdHNBdmFpbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHUgPDwgYml0cyB8IHRoaXMucmVhZEJpdHMoYml0cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAoKTp1aW50XG4gICAgO1xuICAgIF9wcm90by5za2lwTFogPSBmdW5jdGlvbiBza2lwTFooKSB7XG4gICAgICB2YXIgbGVhZGluZ1plcm9Db3VudDsgLy8gOnVpbnRcbiAgICAgIGZvciAobGVhZGluZ1plcm9Db3VudCA9IDA7IGxlYWRpbmdaZXJvQ291bnQgPCB0aGlzLmJpdHNBdmFpbGFibGU7ICsrbGVhZGluZ1plcm9Db3VudCkge1xuICAgICAgICBpZiAoKHRoaXMud29yZCAmIDB4ODAwMDAwMDAgPj4+IGxlYWRpbmdaZXJvQ291bnQpICE9PSAwKSB7XG4gICAgICAgICAgLy8gdGhlIGZpcnN0IGJpdCBvZiB3b3JraW5nIHdvcmQgaXMgMVxuICAgICAgICAgIHRoaXMud29yZCA8PD0gbGVhZGluZ1plcm9Db3VudDtcbiAgICAgICAgICB0aGlzLmJpdHNBdmFpbGFibGUgLT0gbGVhZGluZ1plcm9Db3VudDtcbiAgICAgICAgICByZXR1cm4gbGVhZGluZ1plcm9Db3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gd2UgZXhoYXVzdGVkIHdvcmQgYW5kIHN0aWxsIGhhdmUgbm90IGZvdW5kIGEgMVxuICAgICAgdGhpcy5sb2FkV29yZCgpO1xuICAgICAgcmV0dXJuIGxlYWRpbmdaZXJvQ291bnQgKyB0aGlzLnNraXBMWigpO1xuICAgIH1cblxuICAgIC8vICgpOnZvaWRcbiAgICA7XG4gICAgX3Byb3RvLnNraXBVRUcgPSBmdW5jdGlvbiBza2lwVUVHKCkge1xuICAgICAgdGhpcy5za2lwQml0cygxICsgdGhpcy5za2lwTFooKSk7XG4gICAgfVxuXG4gICAgLy8gKCk6dm9pZFxuICAgIDtcbiAgICBfcHJvdG8uc2tpcEVHID0gZnVuY3Rpb24gc2tpcEVHKCkge1xuICAgICAgdGhpcy5za2lwQml0cygxICsgdGhpcy5za2lwTFooKSk7XG4gICAgfVxuXG4gICAgLy8gKCk6dWludFxuICAgIDtcbiAgICBfcHJvdG8ucmVhZFVFRyA9IGZ1bmN0aW9uIHJlYWRVRUcoKSB7XG4gICAgICB2YXIgY2x6ID0gdGhpcy5za2lwTFooKTsgLy8gOnVpbnRcbiAgICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKGNseiArIDEpIC0gMTtcbiAgICB9XG5cbiAgICAvLyAoKTppbnRcbiAgICA7XG4gICAgX3Byb3RvLnJlYWRFRyA9IGZ1bmN0aW9uIHJlYWRFRygpIHtcbiAgICAgIHZhciB2YWx1ID0gdGhpcy5yZWFkVUVHKCk7IC8vIDppbnRcbiAgICAgIGlmICgweDAxICYgdmFsdSkge1xuICAgICAgICAvLyB0aGUgbnVtYmVyIGlzIG9kZCBpZiB0aGUgbG93IG9yZGVyIGJpdCBpcyBzZXRcbiAgICAgICAgcmV0dXJuIDEgKyB2YWx1ID4+PiAxOyAvLyBhZGQgMSB0byBtYWtlIGl0IGV2ZW4sIGFuZCBkaXZpZGUgYnkgMlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC0xICogKHZhbHUgPj4+IDEpOyAvLyBkaXZpZGUgYnkgdHdvIHRoZW4gbWFrZSBpdCBuZWdhdGl2ZVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNvbWUgY29udmVuaWVuY2UgZnVuY3Rpb25zXG4gICAgLy8gOkJvb2xlYW5cbiAgICA7XG4gICAgX3Byb3RvLnJlYWRCb29sZWFuID0gZnVuY3Rpb24gcmVhZEJvb2xlYW4oKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWFkQml0cygxKSA9PT0gMTtcbiAgICB9XG5cbiAgICAvLyAoKTppbnRcbiAgICA7XG4gICAgX3Byb3RvLnJlYWRVQnl0ZSA9IGZ1bmN0aW9uIHJlYWRVQnl0ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDgpO1xuICAgIH1cblxuICAgIC8vICgpOmludFxuICAgIDtcbiAgICBfcHJvdG8ucmVhZFVTaG9ydCA9IGZ1bmN0aW9uIHJlYWRVU2hvcnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWFkQml0cygxNik7XG4gICAgfVxuXG4gICAgLy8gKCk6aW50XG4gICAgO1xuICAgIF9wcm90by5yZWFkVUludCA9IGZ1bmN0aW9uIHJlYWRVSW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVhZEJpdHMoMzIpO1xuICAgIH07XG4gICAgcmV0dXJuIEV4cEdvbG9tYjtcbiAgfSgpO1xuXG4gIHZhciBBdmNWaWRlb1BhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VWaWRlb1BhcnNlcikge1xuICAgIGZ1bmN0aW9uIEF2Y1ZpZGVvUGFyc2VyKCkge1xuICAgICAgcmV0dXJuIF9CYXNlVmlkZW9QYXJzZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBfaW5oZXJpdHNMb29zZShBdmNWaWRlb1BhcnNlciwgX0Jhc2VWaWRlb1BhcnNlcik7XG4gICAgdmFyIF9wcm90byA9IEF2Y1ZpZGVvUGFyc2VyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ucGFyc2VQRVMgPSBmdW5jdGlvbiBwYXJzZVBFUyh0cmFjaywgdGV4dFRyYWNrLCBwZXMsIGVuZE9mU2VnbWVudCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciB1bml0cyA9IHRoaXMucGFyc2VOQUx1KHRyYWNrLCBwZXMuZGF0YSwgZW5kT2ZTZWdtZW50KTtcbiAgICAgIHZhciBWaWRlb1NhbXBsZSA9IHRoaXMuVmlkZW9TYW1wbGU7XG4gICAgICB2YXIgcHVzaDtcbiAgICAgIHZhciBzcHNmb3VuZCA9IGZhbHNlO1xuICAgICAgLy8gZnJlZSBwZXMuZGF0YSB0byBzYXZlIHVwIHNvbWUgbWVtb3J5XG4gICAgICBwZXMuZGF0YSA9IG51bGw7XG5cbiAgICAgIC8vIGlmIG5ldyBOQUwgdW5pdHMgZm91bmQgYW5kIGxhc3Qgc2FtcGxlIHN0aWxsIHRoZXJlLCBsZXQncyBwdXNoIC4uLlxuICAgICAgLy8gdGhpcyBoZWxwcyBwYXJzaW5nIHN0cmVhbXMgd2l0aCBtaXNzaW5nIEFVRCAob25seSBkbyB0aGlzIGlmIEFVRCBuZXZlciBmb3VuZClcbiAgICAgIGlmIChWaWRlb1NhbXBsZSAmJiB1bml0cy5sZW5ndGggJiYgIXRyYWNrLmF1ZEZvdW5kKSB7XG4gICAgICAgIHRoaXMucHVzaEFjY2Vzc1VuaXQoVmlkZW9TYW1wbGUsIHRyYWNrKTtcbiAgICAgICAgVmlkZW9TYW1wbGUgPSB0aGlzLlZpZGVvU2FtcGxlID0gdGhpcy5jcmVhdGVWaWRlb1NhbXBsZShmYWxzZSwgcGVzLnB0cywgcGVzLmR0cyk7XG4gICAgICB9XG4gICAgICB1bml0cy5mb3JFYWNoKGZ1bmN0aW9uICh1bml0KSB7XG4gICAgICAgIHZhciBfVmlkZW9TYW1wbGUyLCBfVmlkZW9TYW1wbGUzO1xuICAgICAgICBzd2l0Y2ggKHVuaXQudHlwZSkge1xuICAgICAgICAgIC8vIE5EUlxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmFyIGlza2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgIHB1c2ggPSB0cnVlO1xuICAgICAgICAgICAgICB2YXIgZGF0YSA9IHVuaXQuZGF0YTtcbiAgICAgICAgICAgICAgLy8gb25seSBjaGVjayBzbGljZSB0eXBlIHRvIGRldGVjdCBLRiBpbiBjYXNlIFNQUyBmb3VuZCBpbiBzYW1lIHBhY2tldCAoYW55IGtleWZyYW1lIGlzIHByZWNlZGVkIGJ5IFNQUyAuLi4pXG4gICAgICAgICAgICAgIGlmIChzcHNmb3VuZCAmJiBkYXRhLmxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgICAgICAvLyByZXRyaWV2ZSBzbGljZSB0eXBlIGJ5IHBhcnNpbmcgYmVnaW5uaW5nIG9mIE5BTCB1bml0IChmb2xsb3cgSDI2NCBzcGVjLCBzbGljZV9oZWFkZXIgZGVmaW5pdGlvbikgdG8gZGV0ZWN0IGtleWZyYW1lIGVtYmVkZGVkIGluIE5EUlxuICAgICAgICAgICAgICAgIHZhciBzbGljZVR5cGUgPSBfdGhpcy5yZWFkU2xpY2VUeXBlKGRhdGEpO1xuICAgICAgICAgICAgICAgIC8vIDIgOiBJIHNsaWNlLCA0IDogU0kgc2xpY2UsIDcgOiBJIHNsaWNlLCA5OiBTSSBzbGljZVxuICAgICAgICAgICAgICAgIC8vIFNJIHNsaWNlIDogQSBzbGljZSB0aGF0IGlzIGNvZGVkIHVzaW5nIGludHJhIHByZWRpY3Rpb24gb25seSBhbmQgdXNpbmcgcXVhbnRpc2F0aW9uIG9mIHRoZSBwcmVkaWN0aW9uIHNhbXBsZXMuXG4gICAgICAgICAgICAgICAgLy8gQW4gU0kgc2xpY2UgY2FuIGJlIGNvZGVkIHN1Y2ggdGhhdCBpdHMgZGVjb2RlZCBzYW1wbGVzIGNhbiBiZSBjb25zdHJ1Y3RlZCBpZGVudGljYWxseSB0byBhbiBTUCBzbGljZS5cbiAgICAgICAgICAgICAgICAvLyBJIHNsaWNlOiBBIHNsaWNlIHRoYXQgaXMgbm90IGFuIFNJIHNsaWNlIHRoYXQgaXMgZGVjb2RlZCB1c2luZyBpbnRyYSBwcmVkaWN0aW9uIG9ubHkuXG4gICAgICAgICAgICAgICAgLy8gaWYgKHNsaWNlVHlwZSA9PT0gMiB8fCBzbGljZVR5cGUgPT09IDcpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpY2VUeXBlID09PSAyIHx8IHNsaWNlVHlwZSA9PT0gNCB8fCBzbGljZVR5cGUgPT09IDcgfHwgc2xpY2VUeXBlID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICBpc2tleSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChpc2tleSkge1xuICAgICAgICAgICAgICAgIHZhciBfVmlkZW9TYW1wbGU7XG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBub24ta2V5ZnJhbWUgZGF0YSBhbHJlYWR5LCB0aGF0IGNhbm5vdCBiZWxvbmcgdG8gdGhlIHNhbWUgZnJhbWUgYXMgYSBrZXlmcmFtZSwgc28gZm9yY2UgYSBwdXNoXG4gICAgICAgICAgICAgICAgaWYgKChfVmlkZW9TYW1wbGUgPSBWaWRlb1NhbXBsZSkgIT0gbnVsbCAmJiBfVmlkZW9TYW1wbGUuZnJhbWUgJiYgIVZpZGVvU2FtcGxlLmtleSkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMucHVzaEFjY2Vzc1VuaXQoVmlkZW9TYW1wbGUsIHRyYWNrKTtcbiAgICAgICAgICAgICAgICAgIFZpZGVvU2FtcGxlID0gX3RoaXMuVmlkZW9TYW1wbGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIVZpZGVvU2FtcGxlKSB7XG4gICAgICAgICAgICAgICAgVmlkZW9TYW1wbGUgPSBfdGhpcy5WaWRlb1NhbXBsZSA9IF90aGlzLmNyZWF0ZVZpZGVvU2FtcGxlKHRydWUsIHBlcy5wdHMsIHBlcy5kdHMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFZpZGVvU2FtcGxlLmZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgVmlkZW9TYW1wbGUua2V5ID0gaXNrZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAvLyBJRFJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBwdXNoID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBQRVMgbm90IHN0YXJ0aW5nIHdpdGggQVVEXG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGZyYW1lIGRhdGEgYWxyZWFkeSwgdGhhdCBjYW5ub3QgYmVsb25nIHRvIHRoZSBzYW1lIGZyYW1lLCBzbyBmb3JjZSBhIHB1c2hcbiAgICAgICAgICAgIGlmICgoX1ZpZGVvU2FtcGxlMiA9IFZpZGVvU2FtcGxlKSAhPSBudWxsICYmIF9WaWRlb1NhbXBsZTIuZnJhbWUgJiYgIVZpZGVvU2FtcGxlLmtleSkge1xuICAgICAgICAgICAgICBfdGhpcy5wdXNoQWNjZXNzVW5pdChWaWRlb1NhbXBsZSwgdHJhY2spO1xuICAgICAgICAgICAgICBWaWRlb1NhbXBsZSA9IF90aGlzLlZpZGVvU2FtcGxlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghVmlkZW9TYW1wbGUpIHtcbiAgICAgICAgICAgICAgVmlkZW9TYW1wbGUgPSBfdGhpcy5WaWRlb1NhbXBsZSA9IF90aGlzLmNyZWF0ZVZpZGVvU2FtcGxlKHRydWUsIHBlcy5wdHMsIHBlcy5kdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVmlkZW9TYW1wbGUua2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgIFZpZGVvU2FtcGxlLmZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vIFNFSVxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcHVzaCA9IHRydWU7XG4gICAgICAgICAgICAgIHBhcnNlU0VJTWVzc2FnZUZyb21OQUx1KHVuaXQuZGF0YSwgMSwgcGVzLnB0cywgdGV4dFRyYWNrLnNhbXBsZXMpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgLy8gU1BTXG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB2YXIgX3RyYWNrJHBpeGVsUmF0aW8sIF90cmFjayRwaXhlbFJhdGlvMjtcbiAgICAgICAgICAgICAgcHVzaCA9IHRydWU7XG4gICAgICAgICAgICAgIHNwc2ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIHNwcyA9IHVuaXQuZGF0YTtcbiAgICAgICAgICAgICAgdmFyIGNvbmZpZyA9IF90aGlzLnJlYWRTUFMoc3BzKTtcbiAgICAgICAgICAgICAgaWYgKCF0cmFjay5zcHMgfHwgdHJhY2sud2lkdGggIT09IGNvbmZpZy53aWR0aCB8fCB0cmFjay5oZWlnaHQgIT09IGNvbmZpZy5oZWlnaHQgfHwgKChfdHJhY2skcGl4ZWxSYXRpbyA9IHRyYWNrLnBpeGVsUmF0aW8pID09IG51bGwgPyB2b2lkIDAgOiBfdHJhY2skcGl4ZWxSYXRpb1swXSkgIT09IGNvbmZpZy5waXhlbFJhdGlvWzBdIHx8ICgoX3RyYWNrJHBpeGVsUmF0aW8yID0gdHJhY2sucGl4ZWxSYXRpbykgPT0gbnVsbCA/IHZvaWQgMCA6IF90cmFjayRwaXhlbFJhdGlvMlsxXSkgIT09IGNvbmZpZy5waXhlbFJhdGlvWzFdKSB7XG4gICAgICAgICAgICAgICAgdHJhY2sud2lkdGggPSBjb25maWcud2lkdGg7XG4gICAgICAgICAgICAgICAgdHJhY2suaGVpZ2h0ID0gY29uZmlnLmhlaWdodDtcbiAgICAgICAgICAgICAgICB0cmFjay5waXhlbFJhdGlvID0gY29uZmlnLnBpeGVsUmF0aW87XG4gICAgICAgICAgICAgICAgdHJhY2suc3BzID0gW3Nwc107XG4gICAgICAgICAgICAgICAgdmFyIGNvZGVjYXJyYXkgPSBzcHMuc3ViYXJyYXkoMSwgNCk7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGVjc3RyaW5nID0gJ2F2YzEuJztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgdmFyIGggPSBjb2RlY2FycmF5W2ldLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgICAgICAgIGlmIChoLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgaCA9ICcwJyArIGg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjb2RlY3N0cmluZyArPSBoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cmFjay5jb2RlYyA9IGNvZGVjc3RyaW5nO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIC8vIFBQU1xuICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIHB1c2ggPSB0cnVlO1xuICAgICAgICAgICAgdHJhY2sucHBzID0gW3VuaXQuZGF0YV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyBBVURcbiAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBwdXNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyYWNrLmF1ZEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICgoX1ZpZGVvU2FtcGxlMyA9IFZpZGVvU2FtcGxlKSAhPSBudWxsICYmIF9WaWRlb1NhbXBsZTMuZnJhbWUpIHtcbiAgICAgICAgICAgICAgX3RoaXMucHVzaEFjY2Vzc1VuaXQoVmlkZW9TYW1wbGUsIHRyYWNrKTtcbiAgICAgICAgICAgICAgVmlkZW9TYW1wbGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFWaWRlb1NhbXBsZSkge1xuICAgICAgICAgICAgICBWaWRlb1NhbXBsZSA9IF90aGlzLlZpZGVvU2FtcGxlID0gX3RoaXMuY3JlYXRlVmlkZW9TYW1wbGUoZmFsc2UsIHBlcy5wdHMsIHBlcy5kdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgLy8gRmlsbGVyIERhdGFcbiAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgcHVzaCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcHVzaCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFZpZGVvU2FtcGxlICYmIHB1c2gpIHtcbiAgICAgICAgICB2YXIgX3VuaXRzID0gVmlkZW9TYW1wbGUudW5pdHM7XG4gICAgICAgICAgX3VuaXRzLnB1c2godW5pdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gaWYgbGFzdCBQRVMgcGFja2V0LCBwdXNoIHNhbXBsZXNcbiAgICAgIGlmIChlbmRPZlNlZ21lbnQgJiYgVmlkZW9TYW1wbGUpIHtcbiAgICAgICAgdGhpcy5wdXNoQWNjZXNzVW5pdChWaWRlb1NhbXBsZSwgdHJhY2spO1xuICAgICAgICB0aGlzLlZpZGVvU2FtcGxlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5nZXROQUx1VHlwZSA9IGZ1bmN0aW9uIGdldE5BTHVUeXBlKGRhdGEsIG9mZnNldCkge1xuICAgICAgcmV0dXJuIGRhdGFbb2Zmc2V0XSAmIDB4MWY7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVhZFNsaWNlVHlwZSA9IGZ1bmN0aW9uIHJlYWRTbGljZVR5cGUoZGF0YSkge1xuICAgICAgdmFyIGVnID0gbmV3IEV4cEdvbG9tYihkYXRhKTtcbiAgICAgIC8vIHNraXAgTkFMdSB0eXBlXG4gICAgICBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgIC8vIGRpc2NhcmQgZmlyc3RfbWJfaW5fc2xpY2VcbiAgICAgIGVnLnJlYWRVRUcoKTtcbiAgICAgIC8vIHJldHVybiBzbGljZV90eXBlXG4gICAgICByZXR1cm4gZWcucmVhZFVFRygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBzY2FsaW5nIGxpc3QgaXMgb3B0aW9uYWxseSB0cmFuc21pdHRlZCBhcyBwYXJ0IG9mIGEgc2VxdWVuY2UgcGFyYW1ldGVyXG4gICAgICogc2V0IGFuZCBpcyBub3QgcmVsZXZhbnQgdG8gdHJhbnNtdXhpbmcuXG4gICAgICogQHBhcmFtIGNvdW50IHRoZSBudW1iZXIgb2YgZW50cmllcyBpbiB0aGlzIHNjYWxpbmcgbGlzdFxuICAgICAqIEBzZWUgUmVjb21tZW5kYXRpb24gSVRVLVQgSC4yNjQsIFNlY3Rpb24gNy4zLjIuMS4xLjFcbiAgICAgKi87XG4gICAgX3Byb3RvLnNraXBTY2FsaW5nTGlzdCA9IGZ1bmN0aW9uIHNraXBTY2FsaW5nTGlzdChjb3VudCwgcmVhZGVyKSB7XG4gICAgICB2YXIgbGFzdFNjYWxlID0gODtcbiAgICAgIHZhciBuZXh0U2NhbGUgPSA4O1xuICAgICAgdmFyIGRlbHRhU2NhbGU7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgaWYgKG5leHRTY2FsZSAhPT0gMCkge1xuICAgICAgICAgIGRlbHRhU2NhbGUgPSByZWFkZXIucmVhZEVHKCk7XG4gICAgICAgICAgbmV4dFNjYWxlID0gKGxhc3RTY2FsZSArIGRlbHRhU2NhbGUgKyAyNTYpICUgMjU2O1xuICAgICAgICB9XG4gICAgICAgIGxhc3RTY2FsZSA9IG5leHRTY2FsZSA9PT0gMCA/IGxhc3RTY2FsZSA6IG5leHRTY2FsZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgc2VxdWVuY2UgcGFyYW1ldGVyIHNldCBhbmQgcmV0dXJuIHNvbWUgaW50ZXJlc3RpbmcgdmlkZW9cbiAgICAgKiBwcm9wZXJ0aWVzLiBBIHNlcXVlbmNlIHBhcmFtZXRlciBzZXQgaXMgdGhlIEgyNjQgbWV0YWRhdGEgdGhhdFxuICAgICAqIGRlc2NyaWJlcyB0aGUgcHJvcGVydGllcyBvZiB1cGNvbWluZyB2aWRlbyBmcmFtZXMuXG4gICAgICogQHJldHVybnMgYW4gb2JqZWN0IHdpdGggY29uZmlndXJhdGlvbiBwYXJzZWQgZnJvbSB0aGVcbiAgICAgKiBzZXF1ZW5jZSBwYXJhbWV0ZXIgc2V0LCBpbmNsdWRpbmcgdGhlIGRpbWVuc2lvbnMgb2YgdGhlXG4gICAgICogYXNzb2NpYXRlZCB2aWRlbyBmcmFtZXMuXG4gICAgICovO1xuICAgIF9wcm90by5yZWFkU1BTID0gZnVuY3Rpb24gcmVhZFNQUyhzcHMpIHtcbiAgICAgIHZhciBlZyA9IG5ldyBFeHBHb2xvbWIoc3BzKTtcbiAgICAgIHZhciBmcmFtZUNyb3BMZWZ0T2Zmc2V0ID0gMDtcbiAgICAgIHZhciBmcmFtZUNyb3BSaWdodE9mZnNldCA9IDA7XG4gICAgICB2YXIgZnJhbWVDcm9wVG9wT2Zmc2V0ID0gMDtcbiAgICAgIHZhciBmcmFtZUNyb3BCb3R0b21PZmZzZXQgPSAwO1xuICAgICAgdmFyIG51bVJlZkZyYW1lc0luUGljT3JkZXJDbnRDeWNsZTtcbiAgICAgIHZhciBzY2FsaW5nTGlzdENvdW50O1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgcmVhZFVCeXRlID0gZWcucmVhZFVCeXRlLmJpbmQoZWcpO1xuICAgICAgdmFyIHJlYWRCaXRzID0gZWcucmVhZEJpdHMuYmluZChlZyk7XG4gICAgICB2YXIgcmVhZFVFRyA9IGVnLnJlYWRVRUcuYmluZChlZyk7XG4gICAgICB2YXIgcmVhZEJvb2xlYW4gPSBlZy5yZWFkQm9vbGVhbi5iaW5kKGVnKTtcbiAgICAgIHZhciBza2lwQml0cyA9IGVnLnNraXBCaXRzLmJpbmQoZWcpO1xuICAgICAgdmFyIHNraXBFRyA9IGVnLnNraXBFRy5iaW5kKGVnKTtcbiAgICAgIHZhciBza2lwVUVHID0gZWcuc2tpcFVFRy5iaW5kKGVnKTtcbiAgICAgIHZhciBza2lwU2NhbGluZ0xpc3QgPSB0aGlzLnNraXBTY2FsaW5nTGlzdC5iaW5kKHRoaXMpO1xuICAgICAgcmVhZFVCeXRlKCk7XG4gICAgICB2YXIgcHJvZmlsZUlkYyA9IHJlYWRVQnl0ZSgpOyAvLyBwcm9maWxlX2lkY1xuICAgICAgcmVhZEJpdHMoNSk7IC8vIHByb2ZpbGVDb21wYXQgY29uc3RyYWludF9zZXRbMC00XV9mbGFnLCB1KDUpXG4gICAgICBza2lwQml0cygzKTsgLy8gcmVzZXJ2ZWRfemVyb18zYml0cyB1KDMpLFxuICAgICAgcmVhZFVCeXRlKCk7IC8vIGxldmVsX2lkYyB1KDgpXG4gICAgICBza2lwVUVHKCk7IC8vIHNlcV9wYXJhbWV0ZXJfc2V0X2lkXG4gICAgICAvLyBzb21lIHByb2ZpbGVzIGhhdmUgbW9yZSBvcHRpb25hbCBkYXRhIHdlIGRvbid0IG5lZWRcbiAgICAgIGlmIChwcm9maWxlSWRjID09PSAxMDAgfHwgcHJvZmlsZUlkYyA9PT0gMTEwIHx8IHByb2ZpbGVJZGMgPT09IDEyMiB8fCBwcm9maWxlSWRjID09PSAyNDQgfHwgcHJvZmlsZUlkYyA9PT0gNDQgfHwgcHJvZmlsZUlkYyA9PT0gODMgfHwgcHJvZmlsZUlkYyA9PT0gODYgfHwgcHJvZmlsZUlkYyA9PT0gMTE4IHx8IHByb2ZpbGVJZGMgPT09IDEyOCkge1xuICAgICAgICB2YXIgY2hyb21hRm9ybWF0SWRjID0gcmVhZFVFRygpO1xuICAgICAgICBpZiAoY2hyb21hRm9ybWF0SWRjID09PSAzKSB7XG4gICAgICAgICAgc2tpcEJpdHMoMSk7XG4gICAgICAgIH0gLy8gc2VwYXJhdGVfY29sb3VyX3BsYW5lX2ZsYWdcblxuICAgICAgICBza2lwVUVHKCk7IC8vIGJpdF9kZXB0aF9sdW1hX21pbnVzOFxuICAgICAgICBza2lwVUVHKCk7IC8vIGJpdF9kZXB0aF9jaHJvbWFfbWludXM4XG4gICAgICAgIHNraXBCaXRzKDEpOyAvLyBxcHByaW1lX3lfemVyb190cmFuc2Zvcm1fYnlwYXNzX2ZsYWdcbiAgICAgICAgaWYgKHJlYWRCb29sZWFuKCkpIHtcbiAgICAgICAgICAvLyBzZXFfc2NhbGluZ19tYXRyaXhfcHJlc2VudF9mbGFnXG4gICAgICAgICAgc2NhbGluZ0xpc3RDb3VudCA9IGNocm9tYUZvcm1hdElkYyAhPT0gMyA/IDggOiAxMjtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2NhbGluZ0xpc3RDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAocmVhZEJvb2xlYW4oKSkge1xuICAgICAgICAgICAgICAvLyBzZXFfc2NhbGluZ19saXN0X3ByZXNlbnRfZmxhZ1sgaSBdXG4gICAgICAgICAgICAgIGlmIChpIDwgNikge1xuICAgICAgICAgICAgICAgIHNraXBTY2FsaW5nTGlzdCgxNiwgZWcpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNraXBTY2FsaW5nTGlzdCg2NCwgZWcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBza2lwVUVHKCk7IC8vIGxvZzJfbWF4X2ZyYW1lX251bV9taW51czRcbiAgICAgIHZhciBwaWNPcmRlckNudFR5cGUgPSByZWFkVUVHKCk7XG4gICAgICBpZiAocGljT3JkZXJDbnRUeXBlID09PSAwKSB7XG4gICAgICAgIHJlYWRVRUcoKTsgLy8gbG9nMl9tYXhfcGljX29yZGVyX2NudF9sc2JfbWludXM0XG4gICAgICB9IGVsc2UgaWYgKHBpY09yZGVyQ250VHlwZSA9PT0gMSkge1xuICAgICAgICBza2lwQml0cygxKTsgLy8gZGVsdGFfcGljX29yZGVyX2Fsd2F5c196ZXJvX2ZsYWdcbiAgICAgICAgc2tpcEVHKCk7IC8vIG9mZnNldF9mb3Jfbm9uX3JlZl9waWNcbiAgICAgICAgc2tpcEVHKCk7IC8vIG9mZnNldF9mb3JfdG9wX3RvX2JvdHRvbV9maWVsZFxuICAgICAgICBudW1SZWZGcmFtZXNJblBpY09yZGVyQ250Q3ljbGUgPSByZWFkVUVHKCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1SZWZGcmFtZXNJblBpY09yZGVyQ250Q3ljbGU7IGkrKykge1xuICAgICAgICAgIHNraXBFRygpO1xuICAgICAgICB9IC8vIG9mZnNldF9mb3JfcmVmX2ZyYW1lWyBpIF1cbiAgICAgIH1cbiAgICAgIHNraXBVRUcoKTsgLy8gbWF4X251bV9yZWZfZnJhbWVzXG4gICAgICBza2lwQml0cygxKTsgLy8gZ2Fwc19pbl9mcmFtZV9udW1fdmFsdWVfYWxsb3dlZF9mbGFnXG4gICAgICB2YXIgcGljV2lkdGhJbk1ic01pbnVzMSA9IHJlYWRVRUcoKTtcbiAgICAgIHZhciBwaWNIZWlnaHRJbk1hcFVuaXRzTWludXMxID0gcmVhZFVFRygpO1xuICAgICAgdmFyIGZyYW1lTWJzT25seUZsYWcgPSByZWFkQml0cygxKTtcbiAgICAgIGlmIChmcmFtZU1ic09ubHlGbGFnID09PSAwKSB7XG4gICAgICAgIHNraXBCaXRzKDEpO1xuICAgICAgfSAvLyBtYl9hZGFwdGl2ZV9mcmFtZV9maWVsZF9mbGFnXG5cbiAgICAgIHNraXBCaXRzKDEpOyAvLyBkaXJlY3RfOHg4X2luZmVyZW5jZV9mbGFnXG4gICAgICBpZiAocmVhZEJvb2xlYW4oKSkge1xuICAgICAgICAvLyBmcmFtZV9jcm9wcGluZ19mbGFnXG4gICAgICAgIGZyYW1lQ3JvcExlZnRPZmZzZXQgPSByZWFkVUVHKCk7XG4gICAgICAgIGZyYW1lQ3JvcFJpZ2h0T2Zmc2V0ID0gcmVhZFVFRygpO1xuICAgICAgICBmcmFtZUNyb3BUb3BPZmZzZXQgPSByZWFkVUVHKCk7XG4gICAgICAgIGZyYW1lQ3JvcEJvdHRvbU9mZnNldCA9IHJlYWRVRUcoKTtcbiAgICAgIH1cbiAgICAgIHZhciBwaXhlbFJhdGlvID0gWzEsIDFdO1xuICAgICAgaWYgKHJlYWRCb29sZWFuKCkpIHtcbiAgICAgICAgLy8gdnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnXG4gICAgICAgIGlmIChyZWFkQm9vbGVhbigpKSB7XG4gICAgICAgICAgLy8gYXNwZWN0X3JhdGlvX2luZm9fcHJlc2VudF9mbGFnXG4gICAgICAgICAgdmFyIGFzcGVjdFJhdGlvSWRjID0gcmVhZFVCeXRlKCk7XG4gICAgICAgICAgc3dpdGNoIChhc3BlY3RSYXRpb0lkYykge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBwaXhlbFJhdGlvID0gWzEsIDFdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFsxMiwgMTFdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFsxMCwgMTFdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFsxNiwgMTFdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFs0MCwgMzNdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFsyNCwgMTFdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFsyMCwgMTFdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFszMiwgMTFdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFs4MCwgMzNdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBbMTgsIDExXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICBwaXhlbFJhdGlvID0gWzE1LCAxMV07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFs2NCwgMzNdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBbMTYwLCA5OV07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFs0LCAzXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICBwaXhlbFJhdGlvID0gWzMsIDJdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBbMiwgMV07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyNTU6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwaXhlbFJhdGlvID0gW3JlYWRVQnl0ZSgpIDw8IDggfCByZWFkVUJ5dGUoKSwgcmVhZFVCeXRlKCkgPDwgOCB8IHJlYWRVQnl0ZSgpXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IE1hdGguY2VpbCgocGljV2lkdGhJbk1ic01pbnVzMSArIDEpICogMTYgLSBmcmFtZUNyb3BMZWZ0T2Zmc2V0ICogMiAtIGZyYW1lQ3JvcFJpZ2h0T2Zmc2V0ICogMiksXG4gICAgICAgIGhlaWdodDogKDIgLSBmcmFtZU1ic09ubHlGbGFnKSAqIChwaWNIZWlnaHRJbk1hcFVuaXRzTWludXMxICsgMSkgKiAxNiAtIChmcmFtZU1ic09ubHlGbGFnID8gMiA6IDQpICogKGZyYW1lQ3JvcFRvcE9mZnNldCArIGZyYW1lQ3JvcEJvdHRvbU9mZnNldCksXG4gICAgICAgIHBpeGVsUmF0aW86IHBpeGVsUmF0aW9cbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gQXZjVmlkZW9QYXJzZXI7XG4gIH0oQmFzZVZpZGVvUGFyc2VyKTtcblxuICB2YXIgSGV2Y1ZpZGVvUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVZpZGVvUGFyc2VyKSB7XG4gICAgZnVuY3Rpb24gSGV2Y1ZpZGVvUGFyc2VyKCkge1xuICAgICAgdmFyIF90aGlzO1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICBfdGhpcyA9IF9CYXNlVmlkZW9QYXJzZXIuY2FsbC5hcHBseShfQmFzZVZpZGVvUGFyc2VyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuaW5pdFZQUyA9IG51bGw7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIF9pbmhlcml0c0xvb3NlKEhldmNWaWRlb1BhcnNlciwgX0Jhc2VWaWRlb1BhcnNlcik7XG4gICAgdmFyIF9wcm90byA9IEhldmNWaWRlb1BhcnNlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLnBhcnNlUEVTID0gZnVuY3Rpb24gcGFyc2VQRVModHJhY2ssIHRleHRUcmFjaywgcGVzLCBlbmRPZlNlZ21lbnQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIHVuaXRzID0gdGhpcy5wYXJzZU5BTHUodHJhY2ssIHBlcy5kYXRhLCBlbmRPZlNlZ21lbnQpO1xuICAgICAgdmFyIFZpZGVvU2FtcGxlID0gdGhpcy5WaWRlb1NhbXBsZTtcbiAgICAgIHZhciBwdXNoO1xuICAgICAgdmFyIHNwc2ZvdW5kID0gZmFsc2U7XG4gICAgICAvLyBmcmVlIHBlcy5kYXRhIHRvIHNhdmUgdXAgc29tZSBtZW1vcnlcbiAgICAgIHBlcy5kYXRhID0gbnVsbDtcblxuICAgICAgLy8gaWYgbmV3IE5BTCB1bml0cyBmb3VuZCBhbmQgbGFzdCBzYW1wbGUgc3RpbGwgdGhlcmUsIGxldCdzIHB1c2ggLi4uXG4gICAgICAvLyB0aGlzIGhlbHBzIHBhcnNpbmcgc3RyZWFtcyB3aXRoIG1pc3NpbmcgQVVEIChvbmx5IGRvIHRoaXMgaWYgQVVEIG5ldmVyIGZvdW5kKVxuICAgICAgaWYgKFZpZGVvU2FtcGxlICYmIHVuaXRzLmxlbmd0aCAmJiAhdHJhY2suYXVkRm91bmQpIHtcbiAgICAgICAgdGhpcy5wdXNoQWNjZXNzVW5pdChWaWRlb1NhbXBsZSwgdHJhY2spO1xuICAgICAgICBWaWRlb1NhbXBsZSA9IHRoaXMuVmlkZW9TYW1wbGUgPSB0aGlzLmNyZWF0ZVZpZGVvU2FtcGxlKGZhbHNlLCBwZXMucHRzLCBwZXMuZHRzKTtcbiAgICAgIH1cbiAgICAgIHVuaXRzLmZvckVhY2goZnVuY3Rpb24gKHVuaXQpIHtcbiAgICAgICAgdmFyIF9WaWRlb1NhbXBsZTIsIF9WaWRlb1NhbXBsZTM7XG4gICAgICAgIHN3aXRjaCAodW5pdC50eXBlKSB7XG4gICAgICAgICAgLy8gTk9OLUlEUiwgTk9OIFJBTkRPTSBBQ0NFU1MgU0xJQ0VcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBpZiAoIVZpZGVvU2FtcGxlKSB7XG4gICAgICAgICAgICAgIFZpZGVvU2FtcGxlID0gX3RoaXMyLlZpZGVvU2FtcGxlID0gX3RoaXMyLmNyZWF0ZVZpZGVvU2FtcGxlKGZhbHNlLCBwZXMucHRzLCBwZXMuZHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFZpZGVvU2FtcGxlLmZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgIHB1c2ggPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAvLyBDUkEsIEJMQSAocmFuZG9tIGFjY2VzcyBwaWN0dXJlKVxuICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgICBwdXNoID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChzcHNmb3VuZCkge1xuICAgICAgICAgICAgICB2YXIgX1ZpZGVvU2FtcGxlO1xuICAgICAgICAgICAgICAvLyBoYW5kbGUgUEVTIG5vdCBzdGFydGluZyB3aXRoIEFVRFxuICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGZyYW1lIGRhdGEgYWxyZWFkeSwgdGhhdCBjYW5ub3QgYmVsb25nIHRvIHRoZSBzYW1lIGZyYW1lLCBzbyBmb3JjZSBhIHB1c2hcbiAgICAgICAgICAgICAgaWYgKChfVmlkZW9TYW1wbGUgPSBWaWRlb1NhbXBsZSkgIT0gbnVsbCAmJiBfVmlkZW9TYW1wbGUuZnJhbWUgJiYgIVZpZGVvU2FtcGxlLmtleSkge1xuICAgICAgICAgICAgICAgIF90aGlzMi5wdXNoQWNjZXNzVW5pdChWaWRlb1NhbXBsZSwgdHJhY2spO1xuICAgICAgICAgICAgICAgIFZpZGVvU2FtcGxlID0gX3RoaXMyLlZpZGVvU2FtcGxlID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFWaWRlb1NhbXBsZSkge1xuICAgICAgICAgICAgICBWaWRlb1NhbXBsZSA9IF90aGlzMi5WaWRlb1NhbXBsZSA9IF90aGlzMi5jcmVhdGVWaWRlb1NhbXBsZSh0cnVlLCBwZXMucHRzLCBwZXMuZHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFZpZGVvU2FtcGxlLmtleSA9IHRydWU7XG4gICAgICAgICAgICBWaWRlb1NhbXBsZS5mcmFtZSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIC8vIElEUlxuICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgIHB1c2ggPSB0cnVlO1xuICAgICAgICAgICAgLy8gaGFuZGxlIFBFUyBub3Qgc3RhcnRpbmcgd2l0aCBBVURcbiAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgZnJhbWUgZGF0YSBhbHJlYWR5LCB0aGF0IGNhbm5vdCBiZWxvbmcgdG8gdGhlIHNhbWUgZnJhbWUsIHNvIGZvcmNlIGEgcHVzaFxuICAgICAgICAgICAgaWYgKChfVmlkZW9TYW1wbGUyID0gVmlkZW9TYW1wbGUpICE9IG51bGwgJiYgX1ZpZGVvU2FtcGxlMi5mcmFtZSAmJiAhVmlkZW9TYW1wbGUua2V5KSB7XG4gICAgICAgICAgICAgIF90aGlzMi5wdXNoQWNjZXNzVW5pdChWaWRlb1NhbXBsZSwgdHJhY2spO1xuICAgICAgICAgICAgICBWaWRlb1NhbXBsZSA9IF90aGlzMi5WaWRlb1NhbXBsZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIVZpZGVvU2FtcGxlKSB7XG4gICAgICAgICAgICAgIFZpZGVvU2FtcGxlID0gX3RoaXMyLlZpZGVvU2FtcGxlID0gX3RoaXMyLmNyZWF0ZVZpZGVvU2FtcGxlKHRydWUsIHBlcy5wdHMsIHBlcy5kdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVmlkZW9TYW1wbGUua2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgIFZpZGVvU2FtcGxlLmZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgLy8gU0VJXG4gICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgIHB1c2ggPSB0cnVlO1xuICAgICAgICAgICAgcGFyc2VTRUlNZXNzYWdlRnJvbU5BTHUodW5pdC5kYXRhLCAyLFxuICAgICAgICAgICAgLy8gTkFMdSBoZWFkZXIgc2l6ZVxuICAgICAgICAgICAgcGVzLnB0cywgdGV4dFRyYWNrLnNhbXBsZXMpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAvLyBWUFNcbiAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgcHVzaCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIXRyYWNrLnZwcykge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHRyYWNrLnBhcmFtcyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB0cmFjay5wYXJhbXMgPSB7fTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0cmFjay5wYXJhbXMgPSBfZXh0ZW5kcyh0cmFjay5wYXJhbXMsIF90aGlzMi5yZWFkVlBTKHVuaXQuZGF0YSkpO1xuICAgICAgICAgICAgICBfdGhpczIuaW5pdFZQUyA9IHVuaXQuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNrLnZwcyA9IFt1bml0LmRhdGFdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAvLyBTUFNcbiAgICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgICAgcHVzaCA9IHRydWU7XG4gICAgICAgICAgICBzcHNmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodHJhY2sudnBzICE9PSB1bmRlZmluZWQgJiYgdHJhY2sudnBzWzBdICE9PSBfdGhpczIuaW5pdFZQUyAmJiB0cmFjay5zcHMgIT09IHVuZGVmaW5lZCAmJiAhX3RoaXMyLm1hdGNoU1BTKHRyYWNrLnNwc1swXSwgdW5pdC5kYXRhKSkge1xuICAgICAgICAgICAgICBfdGhpczIuaW5pdFZQUyA9IHRyYWNrLnZwc1swXTtcbiAgICAgICAgICAgICAgdHJhY2suc3BzID0gdHJhY2sucHBzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0cmFjay5zcHMpIHtcbiAgICAgICAgICAgICAgdmFyIGNvbmZpZyA9IF90aGlzMi5yZWFkU1BTKHVuaXQuZGF0YSk7XG4gICAgICAgICAgICAgIHRyYWNrLndpZHRoID0gY29uZmlnLndpZHRoO1xuICAgICAgICAgICAgICB0cmFjay5oZWlnaHQgPSBjb25maWcuaGVpZ2h0O1xuICAgICAgICAgICAgICB0cmFjay5waXhlbFJhdGlvID0gY29uZmlnLnBpeGVsUmF0aW87XG4gICAgICAgICAgICAgIHRyYWNrLmNvZGVjID0gY29uZmlnLmNvZGVjU3RyaW5nO1xuICAgICAgICAgICAgICB0cmFjay5zcHMgPSBbXTtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0cmFjay5wYXJhbXMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdHJhY2sucGFyYW1zID0ge307XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBjb25maWcucGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdHJhY2sucGFyYW1zW3Byb3BdID0gY29uZmlnLnBhcmFtc1twcm9wXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMyLnB1c2hQYXJhbWV0ZXJTZXQodHJhY2suc3BzLCB1bml0LmRhdGEsIHRyYWNrLnZwcyk7XG4gICAgICAgICAgICBpZiAoIVZpZGVvU2FtcGxlKSB7XG4gICAgICAgICAgICAgIFZpZGVvU2FtcGxlID0gX3RoaXMyLlZpZGVvU2FtcGxlID0gX3RoaXMyLmNyZWF0ZVZpZGVvU2FtcGxlKHRydWUsIHBlcy5wdHMsIHBlcy5kdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVmlkZW9TYW1wbGUua2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgLy8gUFBTXG4gICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIHB1c2ggPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0cmFjay5wYXJhbXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIGlmICghdHJhY2sucHBzKSB7XG4gICAgICAgICAgICAgICAgdHJhY2sucHBzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIF9jb25maWcgPSBfdGhpczIucmVhZFBQUyh1bml0LmRhdGEpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9wcm9wIGluIF9jb25maWcpIHtcbiAgICAgICAgICAgICAgICAgIHRyYWNrLnBhcmFtc1tfcHJvcF0gPSBfY29uZmlnW19wcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX3RoaXMyLnB1c2hQYXJhbWV0ZXJTZXQodHJhY2sucHBzLCB1bml0LmRhdGEsIHRyYWNrLnZwcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIC8vIEFDQ0VTUyBVTklUIERFTElNSVRFUlxuICAgICAgICAgIGNhc2UgMzU6XG4gICAgICAgICAgICBwdXNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyYWNrLmF1ZEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICgoX1ZpZGVvU2FtcGxlMyA9IFZpZGVvU2FtcGxlKSAhPSBudWxsICYmIF9WaWRlb1NhbXBsZTMuZnJhbWUpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLnB1c2hBY2Nlc3NVbml0KFZpZGVvU2FtcGxlLCB0cmFjayk7XG4gICAgICAgICAgICAgIFZpZGVvU2FtcGxlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghVmlkZW9TYW1wbGUpIHtcbiAgICAgICAgICAgICAgVmlkZW9TYW1wbGUgPSBfdGhpczIuVmlkZW9TYW1wbGUgPSBfdGhpczIuY3JlYXRlVmlkZW9TYW1wbGUoZmFsc2UsIHBlcy5wdHMsIHBlcy5kdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHB1c2ggPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChWaWRlb1NhbXBsZSAmJiBwdXNoKSB7XG4gICAgICAgICAgdmFyIF91bml0cyA9IFZpZGVvU2FtcGxlLnVuaXRzO1xuICAgICAgICAgIF91bml0cy5wdXNoKHVuaXQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIGlmIGxhc3QgUEVTIHBhY2tldCwgcHVzaCBzYW1wbGVzXG4gICAgICBpZiAoZW5kT2ZTZWdtZW50ICYmIFZpZGVvU2FtcGxlKSB7XG4gICAgICAgIHRoaXMucHVzaEFjY2Vzc1VuaXQoVmlkZW9TYW1wbGUsIHRyYWNrKTtcbiAgICAgICAgdGhpcy5WaWRlb1NhbXBsZSA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ucHVzaFBhcmFtZXRlclNldCA9IGZ1bmN0aW9uIHB1c2hQYXJhbWV0ZXJTZXQocGFyYW1ldGVyU2V0cywgZGF0YSwgdnBzKSB7XG4gICAgICBpZiAodnBzICYmIHZwc1swXSA9PT0gdGhpcy5pbml0VlBTIHx8ICF2cHMgJiYgIXBhcmFtZXRlclNldHMubGVuZ3RoKSB7XG4gICAgICAgIHBhcmFtZXRlclNldHMucHVzaChkYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5nZXROQUx1VHlwZSA9IGZ1bmN0aW9uIGdldE5BTHVUeXBlKGRhdGEsIG9mZnNldCkge1xuICAgICAgcmV0dXJuIChkYXRhW29mZnNldF0gJiAweDdlKSA+Pj4gMTtcbiAgICB9O1xuICAgIF9wcm90by5lYnNwMnJic3AgPSBmdW5jdGlvbiBlYnNwMnJic3AoYXJyKSB7XG4gICAgICB2YXIgZHN0ID0gbmV3IFVpbnQ4QXJyYXkoYXJyLmJ5dGVMZW5ndGgpO1xuICAgICAgdmFyIGRzdElkeCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGkgPj0gMikge1xuICAgICAgICAgIC8vIFVuZXNjYXBlOiBTa2lwIDB4MDMgYWZ0ZXIgMDAgMDBcbiAgICAgICAgICBpZiAoYXJyW2ldID09PSAweDAzICYmIGFycltpIC0gMV0gPT09IDB4MDAgJiYgYXJyW2kgLSAyXSA9PT0gMHgwMCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRzdFtkc3RJZHhdID0gYXJyW2ldO1xuICAgICAgICBkc3RJZHgrKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShkc3QuYnVmZmVyLCAwLCBkc3RJZHgpO1xuICAgIH07XG4gICAgX3Byb3RvLnB1c2hBY2Nlc3NVbml0ID0gZnVuY3Rpb24gcHVzaEFjY2Vzc1VuaXQoVmlkZW9TYW1wbGUsIHZpZGVvVHJhY2spIHtcbiAgICAgIF9CYXNlVmlkZW9QYXJzZXIucHJvdG90eXBlLnB1c2hBY2Nlc3NVbml0LmNhbGwodGhpcywgVmlkZW9TYW1wbGUsIHZpZGVvVHJhY2spO1xuICAgICAgaWYgKHRoaXMuaW5pdFZQUykge1xuICAgICAgICB0aGlzLmluaXRWUFMgPSBudWxsOyAvLyBudWxsIGluaXRWUFMgdG8gcHJldmVudCBwb3NzaWJsZSB0cmFjaydzIHNwcy9wcHMgZ3Jvd3RoIHVudGlsIG5leHQgVlBTXG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ucmVhZFZQUyA9IGZ1bmN0aW9uIHJlYWRWUFModnBzKSB7XG4gICAgICB2YXIgZWcgPSBuZXcgRXhwR29sb21iKHZwcyk7XG4gICAgICAvLyByZW1vdmUgaGVhZGVyXG4gICAgICBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgIGVnLnJlYWRVQnl0ZSgpO1xuICAgICAgZWcucmVhZEJpdHMoNCk7IC8vIHZpZGVvX3BhcmFtZXRlcl9zZXRfaWRcbiAgICAgIGVnLnNraXBCaXRzKDIpO1xuICAgICAgZWcucmVhZEJpdHMoNik7IC8vIG1heF9sYXllcnNfbWludXMxXG4gICAgICB2YXIgbWF4X3N1Yl9sYXllcnNfbWludXMxID0gZWcucmVhZEJpdHMoMyk7XG4gICAgICB2YXIgdGVtcG9yYWxfaWRfbmVzdGluZ19mbGFnID0gZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgIC8vIC4uLnZ1aSBmcHMgY2FuIGJlIGhlcmUsIGJ1dCBlbXB0eSBmcHMgdmFsdWUgaXMgbm90IGNyaXRpY2FsIGZvciBtZXRhZGF0YVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBudW1UZW1wb3JhbExheWVyczogbWF4X3N1Yl9sYXllcnNfbWludXMxICsgMSxcbiAgICAgICAgdGVtcG9yYWxJZE5lc3RlZDogdGVtcG9yYWxfaWRfbmVzdGluZ19mbGFnXG4gICAgICB9O1xuICAgIH07XG4gICAgX3Byb3RvLnJlYWRTUFMgPSBmdW5jdGlvbiByZWFkU1BTKHNwcykge1xuICAgICAgdmFyIGVnID0gbmV3IEV4cEdvbG9tYih0aGlzLmVic3AycmJzcChzcHMpKTtcbiAgICAgIGVnLnJlYWRVQnl0ZSgpO1xuICAgICAgZWcucmVhZFVCeXRlKCk7XG4gICAgICBlZy5yZWFkQml0cyg0KTsgLy92aWRlb19wYXJhbWV0ZXJfc2V0X2lkXG4gICAgICB2YXIgbWF4X3N1Yl9sYXllcnNfbWludXMxID0gZWcucmVhZEJpdHMoMyk7XG4gICAgICBlZy5yZWFkQm9vbGVhbigpOyAvLyB0ZW1wb3JhbF9pZF9uZXN0aW5nX2ZsYWdcblxuICAgICAgLy8gcHJvZmlsZV90aWVyX2xldmVsXG4gICAgICB2YXIgZ2VuZXJhbF9wcm9maWxlX3NwYWNlID0gZWcucmVhZEJpdHMoMik7XG4gICAgICB2YXIgZ2VuZXJhbF90aWVyX2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgdmFyIGdlbmVyYWxfcHJvZmlsZV9pZGMgPSBlZy5yZWFkQml0cyg1KTtcbiAgICAgIHZhciBnZW5lcmFsX3Byb2ZpbGVfY29tcGF0aWJpbGl0eV9mbGFnc18xID0gZWcucmVhZFVCeXRlKCk7XG4gICAgICB2YXIgZ2VuZXJhbF9wcm9maWxlX2NvbXBhdGliaWxpdHlfZmxhZ3NfMiA9IGVnLnJlYWRVQnl0ZSgpO1xuICAgICAgdmFyIGdlbmVyYWxfcHJvZmlsZV9jb21wYXRpYmlsaXR5X2ZsYWdzXzMgPSBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgIHZhciBnZW5lcmFsX3Byb2ZpbGVfY29tcGF0aWJpbGl0eV9mbGFnc180ID0gZWcucmVhZFVCeXRlKCk7XG4gICAgICB2YXIgZ2VuZXJhbF9jb25zdHJhaW50X2luZGljYXRvcl9mbGFnc18xID0gZWcucmVhZFVCeXRlKCk7XG4gICAgICB2YXIgZ2VuZXJhbF9jb25zdHJhaW50X2luZGljYXRvcl9mbGFnc18yID0gZWcucmVhZFVCeXRlKCk7XG4gICAgICB2YXIgZ2VuZXJhbF9jb25zdHJhaW50X2luZGljYXRvcl9mbGFnc18zID0gZWcucmVhZFVCeXRlKCk7XG4gICAgICB2YXIgZ2VuZXJhbF9jb25zdHJhaW50X2luZGljYXRvcl9mbGFnc180ID0gZWcucmVhZFVCeXRlKCk7XG4gICAgICB2YXIgZ2VuZXJhbF9jb25zdHJhaW50X2luZGljYXRvcl9mbGFnc181ID0gZWcucmVhZFVCeXRlKCk7XG4gICAgICB2YXIgZ2VuZXJhbF9jb25zdHJhaW50X2luZGljYXRvcl9mbGFnc182ID0gZWcucmVhZFVCeXRlKCk7XG4gICAgICB2YXIgZ2VuZXJhbF9sZXZlbF9pZGMgPSBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgIHZhciBzdWJfbGF5ZXJfcHJvZmlsZV9wcmVzZW50X2ZsYWdzID0gW107XG4gICAgICB2YXIgc3ViX2xheWVyX2xldmVsX3ByZXNlbnRfZmxhZ3MgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4X3N1Yl9sYXllcnNfbWludXMxOyBpKyspIHtcbiAgICAgICAgc3ViX2xheWVyX3Byb2ZpbGVfcHJlc2VudF9mbGFncy5wdXNoKGVnLnJlYWRCb29sZWFuKCkpO1xuICAgICAgICBzdWJfbGF5ZXJfbGV2ZWxfcHJlc2VudF9mbGFncy5wdXNoKGVnLnJlYWRCb29sZWFuKCkpO1xuICAgICAgfVxuICAgICAgaWYgKG1heF9zdWJfbGF5ZXJzX21pbnVzMSA+IDApIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSBtYXhfc3ViX2xheWVyc19taW51czE7IF9pIDwgODsgX2krKykge1xuICAgICAgICAgIGVnLnJlYWRCaXRzKDIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBtYXhfc3ViX2xheWVyc19taW51czE7IF9pMisrKSB7XG4gICAgICAgIGlmIChzdWJfbGF5ZXJfcHJvZmlsZV9wcmVzZW50X2ZsYWdzW19pMl0pIHtcbiAgICAgICAgICBlZy5yZWFkVUJ5dGUoKTsgLy8gc3ViX2xheWVyX3Byb2ZpbGVfc3BhY2UsIHN1Yl9sYXllcl90aWVyX2ZsYWcsIHN1Yl9sYXllcl9wcm9maWxlX2lkY1xuICAgICAgICAgIGVnLnJlYWRVQnl0ZSgpO1xuICAgICAgICAgIGVnLnJlYWRVQnl0ZSgpO1xuICAgICAgICAgIGVnLnJlYWRVQnl0ZSgpO1xuICAgICAgICAgIGVnLnJlYWRVQnl0ZSgpOyAvLyBzdWJfbGF5ZXJfcHJvZmlsZV9jb21wYXRpYmlsaXR5X2ZsYWdcbiAgICAgICAgICBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgICAgICBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgICAgICBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgICAgICBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgICAgICBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgICAgICBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3ViX2xheWVyX2xldmVsX3ByZXNlbnRfZmxhZ3NbX2kyXSkge1xuICAgICAgICAgIGVnLnJlYWRVQnl0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlZy5yZWFkVUVHKCk7IC8vIHNlcV9wYXJhbWV0ZXJfc2V0X2lkXG4gICAgICB2YXIgY2hyb21hX2Zvcm1hdF9pZGMgPSBlZy5yZWFkVUVHKCk7XG4gICAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPT0gMykge1xuICAgICAgICBlZy5za2lwQml0cygxKTsgLy9zZXBhcmF0ZV9jb2xvdXJfcGxhbmVfZmxhZ1xuICAgICAgfVxuICAgICAgdmFyIHBpY193aWR0aF9pbl9sdW1hX3NhbXBsZXMgPSBlZy5yZWFkVUVHKCk7XG4gICAgICB2YXIgcGljX2hlaWdodF9pbl9sdW1hX3NhbXBsZXMgPSBlZy5yZWFkVUVHKCk7XG4gICAgICB2YXIgY29uZm9ybWFuY2Vfd2luZG93X2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgdmFyIHBpY19sZWZ0X29mZnNldCA9IDAsXG4gICAgICAgIHBpY19yaWdodF9vZmZzZXQgPSAwLFxuICAgICAgICBwaWNfdG9wX29mZnNldCA9IDAsXG4gICAgICAgIHBpY19ib3R0b21fb2Zmc2V0ID0gMDtcbiAgICAgIGlmIChjb25mb3JtYW5jZV93aW5kb3dfZmxhZykge1xuICAgICAgICBwaWNfbGVmdF9vZmZzZXQgKz0gZWcucmVhZFVFRygpO1xuICAgICAgICBwaWNfcmlnaHRfb2Zmc2V0ICs9IGVnLnJlYWRVRUcoKTtcbiAgICAgICAgcGljX3RvcF9vZmZzZXQgKz0gZWcucmVhZFVFRygpO1xuICAgICAgICBwaWNfYm90dG9tX29mZnNldCArPSBlZy5yZWFkVUVHKCk7XG4gICAgICB9XG4gICAgICB2YXIgYml0X2RlcHRoX2x1bWFfbWludXM4ID0gZWcucmVhZFVFRygpO1xuICAgICAgdmFyIGJpdF9kZXB0aF9jaHJvbWFfbWludXM4ID0gZWcucmVhZFVFRygpO1xuICAgICAgdmFyIGxvZzJfbWF4X3BpY19vcmRlcl9jbnRfbHNiX21pbnVzNCA9IGVnLnJlYWRVRUcoKTtcbiAgICAgIHZhciBzdWJfbGF5ZXJfb3JkZXJpbmdfaW5mb19wcmVzZW50X2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgZm9yICh2YXIgX2kzID0gc3ViX2xheWVyX29yZGVyaW5nX2luZm9fcHJlc2VudF9mbGFnID8gMCA6IG1heF9zdWJfbGF5ZXJzX21pbnVzMTsgX2kzIDw9IG1heF9zdWJfbGF5ZXJzX21pbnVzMTsgX2kzKyspIHtcbiAgICAgICAgZWcuc2tpcFVFRygpOyAvLyBtYXhfZGVjX3BpY19idWZmZXJpbmdfbWludXMxW2ldXG4gICAgICAgIGVnLnNraXBVRUcoKTsgLy8gbWF4X251bV9yZW9yZGVyX3BpY3NbaV1cbiAgICAgICAgZWcuc2tpcFVFRygpOyAvLyBtYXhfbGF0ZW5jeV9pbmNyZWFzZV9wbHVzMVtpXVxuICAgICAgfVxuICAgICAgZWcuc2tpcFVFRygpOyAvLyBsb2cyX21pbl9sdW1hX2NvZGluZ19ibG9ja19zaXplX21pbnVzM1xuICAgICAgZWcuc2tpcFVFRygpOyAvLyBsb2cyX2RpZmZfbWF4X21pbl9sdW1hX2NvZGluZ19ibG9ja19zaXplXG4gICAgICBlZy5za2lwVUVHKCk7IC8vIGxvZzJfbWluX3RyYW5zZm9ybV9ibG9ja19zaXplX21pbnVzMlxuICAgICAgZWcuc2tpcFVFRygpOyAvLyBsb2cyX2RpZmZfbWF4X21pbl90cmFuc2Zvcm1fYmxvY2tfc2l6ZVxuICAgICAgZWcuc2tpcFVFRygpOyAvLyBtYXhfdHJhbnNmb3JtX2hpZXJhcmNoeV9kZXB0aF9pbnRlclxuICAgICAgZWcuc2tpcFVFRygpOyAvLyBtYXhfdHJhbnNmb3JtX2hpZXJhcmNoeV9kZXB0aF9pbnRyYVxuICAgICAgdmFyIHNjYWxpbmdfbGlzdF9lbmFibGVkX2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgaWYgKHNjYWxpbmdfbGlzdF9lbmFibGVkX2ZsYWcpIHtcbiAgICAgICAgdmFyIHNwc19zY2FsaW5nX2xpc3RfZGF0YV9wcmVzZW50X2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgICBpZiAoc3BzX3NjYWxpbmdfbGlzdF9kYXRhX3ByZXNlbnRfZmxhZykge1xuICAgICAgICAgIGZvciAodmFyIHNpemVJZCA9IDA7IHNpemVJZCA8IDQ7IHNpemVJZCsrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBtYXRyaXhJZCA9IDA7IG1hdHJpeElkIDwgKHNpemVJZCA9PT0gMyA/IDIgOiA2KTsgbWF0cml4SWQrKykge1xuICAgICAgICAgICAgICB2YXIgc2NhbGluZ19saXN0X3ByZWRfbW9kZV9mbGFnID0gZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgICAgICAgICAgaWYgKCFzY2FsaW5nX2xpc3RfcHJlZF9tb2RlX2ZsYWcpIHtcbiAgICAgICAgICAgICAgICBlZy5yZWFkVUVHKCk7IC8vIHNjYWxpbmdfbGlzdF9wcmVkX21hdHJpeF9pZF9kZWx0YVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBjb2VmTnVtID0gTWF0aC5taW4oNjQsIDEgPDwgNCArIChzaXplSWQgPDwgMSkpO1xuICAgICAgICAgICAgICAgIGlmIChzaXplSWQgPiAxKSB7XG4gICAgICAgICAgICAgICAgICBlZy5yZWFkRUcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2k0ID0gMDsgX2k0IDwgY29lZk51bTsgX2k0KyspIHtcbiAgICAgICAgICAgICAgICAgIGVnLnJlYWRFRygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWcucmVhZEJvb2xlYW4oKTsgLy8gYW1wX2VuYWJsZWRfZmxhZ1xuICAgICAgZWcucmVhZEJvb2xlYW4oKTsgLy8gc2FtcGxlX2FkYXB0aXZlX29mZnNldF9lbmFibGVkX2ZsYWdcbiAgICAgIHZhciBwY21fZW5hYmxlZF9mbGFnID0gZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgIGlmIChwY21fZW5hYmxlZF9mbGFnKSB7XG4gICAgICAgIGVnLnJlYWRVQnl0ZSgpO1xuICAgICAgICBlZy5za2lwVUVHKCk7XG4gICAgICAgIGVnLnNraXBVRUcoKTtcbiAgICAgICAgZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgIH1cbiAgICAgIHZhciBudW1fc2hvcnRfdGVybV9yZWZfcGljX3NldHMgPSBlZy5yZWFkVUVHKCk7XG4gICAgICB2YXIgbnVtX2RlbHRhX3BvY3MgPSAwO1xuICAgICAgZm9yICh2YXIgX2k1ID0gMDsgX2k1IDwgbnVtX3Nob3J0X3Rlcm1fcmVmX3BpY19zZXRzOyBfaTUrKykge1xuICAgICAgICB2YXIgaW50ZXJfcmVmX3BpY19zZXRfcHJlZGljdGlvbl9mbGFnID0gZmFsc2U7XG4gICAgICAgIGlmIChfaTUgIT09IDApIHtcbiAgICAgICAgICBpbnRlcl9yZWZfcGljX3NldF9wcmVkaWN0aW9uX2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcl9yZWZfcGljX3NldF9wcmVkaWN0aW9uX2ZsYWcpIHtcbiAgICAgICAgICBpZiAoX2k1ID09PSBudW1fc2hvcnRfdGVybV9yZWZfcGljX3NldHMpIHtcbiAgICAgICAgICAgIGVnLnJlYWRVRUcoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgICAgICBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgdmFyIG5leHRfbnVtX2RlbHRhX3BvY3MgPSAwO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDw9IG51bV9kZWx0YV9wb2NzOyBqKyspIHtcbiAgICAgICAgICAgIHZhciB1c2VkX2J5X2N1cnJfcGljX2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgICAgICAgdmFyIHVzZV9kZWx0YV9mbGFnID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXVzZWRfYnlfY3Vycl9waWNfZmxhZykge1xuICAgICAgICAgICAgICB1c2VfZGVsdGFfZmxhZyA9IGVnLnJlYWRCb29sZWFuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXNlZF9ieV9jdXJyX3BpY19mbGFnIHx8IHVzZV9kZWx0YV9mbGFnKSB7XG4gICAgICAgICAgICAgIG5leHRfbnVtX2RlbHRhX3BvY3MrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbnVtX2RlbHRhX3BvY3MgPSBuZXh0X251bV9kZWx0YV9wb2NzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBudW1fbmVnYXRpdmVfcGljcyA9IGVnLnJlYWRVRUcoKTtcbiAgICAgICAgICB2YXIgbnVtX3Bvc2l0aXZlX3BpY3MgPSBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgbnVtX2RlbHRhX3BvY3MgPSBudW1fbmVnYXRpdmVfcGljcyArIG51bV9wb3NpdGl2ZV9waWNzO1xuICAgICAgICAgIGZvciAodmFyIF9qID0gMDsgX2ogPCBudW1fbmVnYXRpdmVfcGljczsgX2orKykge1xuICAgICAgICAgICAgZWcucmVhZFVFRygpO1xuICAgICAgICAgICAgZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgX2oyID0gMDsgX2oyIDwgbnVtX3Bvc2l0aXZlX3BpY3M7IF9qMisrKSB7XG4gICAgICAgICAgICBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgICBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGxvbmdfdGVybV9yZWZfcGljc19wcmVzZW50X2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgaWYgKGxvbmdfdGVybV9yZWZfcGljc19wcmVzZW50X2ZsYWcpIHtcbiAgICAgICAgdmFyIG51bV9sb25nX3Rlcm1fcmVmX3BpY3Nfc3BzID0gZWcucmVhZFVFRygpO1xuICAgICAgICBmb3IgKHZhciBfaTYgPSAwOyBfaTYgPCBudW1fbG9uZ190ZXJtX3JlZl9waWNzX3NwczsgX2k2KyspIHtcbiAgICAgICAgICBmb3IgKHZhciBfajMgPSAwOyBfajMgPCBsb2cyX21heF9waWNfb3JkZXJfY250X2xzYl9taW51czQgKyA0OyBfajMrKykge1xuICAgICAgICAgICAgZWcucmVhZEJpdHMoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVnLnJlYWRCaXRzKDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbWluX3NwYXRpYWxfc2VnbWVudGF0aW9uX2lkYyA9IDA7XG4gICAgICB2YXIgc2FyX3dpZHRoID0gMSxcbiAgICAgICAgc2FyX2hlaWdodCA9IDE7XG4gICAgICB2YXIgZnBzX2ZpeGVkID0gdHJ1ZSxcbiAgICAgICAgZnBzX2RlbiA9IDEsXG4gICAgICAgIGZwc19udW0gPSAwO1xuICAgICAgZWcucmVhZEJvb2xlYW4oKTsgLy8gc3BzX3RlbXBvcmFsX212cF9lbmFibGVkX2ZsYWdcbiAgICAgIGVnLnJlYWRCb29sZWFuKCk7IC8vIHN0cm9uZ19pbnRyYV9zbW9vdGhpbmdfZW5hYmxlZF9mbGFnXG4gICAgICB2YXIgZGVmYXVsdF9kaXNwbGF5X3dpbmRvd19mbGFnID0gZmFsc2U7XG4gICAgICB2YXIgdnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnID0gZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgIGlmICh2dWlfcGFyYW1ldGVyc19wcmVzZW50X2ZsYWcpIHtcbiAgICAgICAgdmFyIGFzcGVjdF9yYXRpb19pbmZvX3ByZXNlbnRfZmxhZyA9IGVnLnJlYWRCb29sZWFuKCk7XG4gICAgICAgIGlmIChhc3BlY3RfcmF0aW9faW5mb19wcmVzZW50X2ZsYWcpIHtcbiAgICAgICAgICB2YXIgYXNwZWN0X3JhdGlvX2lkYyA9IGVnLnJlYWRVQnl0ZSgpO1xuICAgICAgICAgIHZhciBzYXJfd2lkdGhfdGFibGUgPSBbMSwgMTIsIDEwLCAxNiwgNDAsIDI0LCAyMCwgMzIsIDgwLCAxOCwgMTUsIDY0LCAxNjAsIDQsIDMsIDJdO1xuICAgICAgICAgIHZhciBzYXJfaGVpZ2h0X3RhYmxlID0gWzEsIDExLCAxMSwgMTEsIDMzLCAxMSwgMTEsIDExLCAzMywgMTEsIDExLCAzMywgOTksIDMsIDIsIDFdO1xuICAgICAgICAgIGlmIChhc3BlY3RfcmF0aW9faWRjID4gMCAmJiBhc3BlY3RfcmF0aW9faWRjIDwgMTYpIHtcbiAgICAgICAgICAgIHNhcl93aWR0aCA9IHNhcl93aWR0aF90YWJsZVthc3BlY3RfcmF0aW9faWRjIC0gMV07XG4gICAgICAgICAgICBzYXJfaGVpZ2h0ID0gc2FyX2hlaWdodF90YWJsZVthc3BlY3RfcmF0aW9faWRjIC0gMV07XG4gICAgICAgICAgfSBlbHNlIGlmIChhc3BlY3RfcmF0aW9faWRjID09PSAyNTUpIHtcbiAgICAgICAgICAgIHNhcl93aWR0aCA9IGVnLnJlYWRCaXRzKDE2KTtcbiAgICAgICAgICAgIHNhcl9oZWlnaHQgPSBlZy5yZWFkQml0cygxNik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBvdmVyc2Nhbl9pbmZvX3ByZXNlbnRfZmxhZyA9IGVnLnJlYWRCb29sZWFuKCk7XG4gICAgICAgIGlmIChvdmVyc2Nhbl9pbmZvX3ByZXNlbnRfZmxhZykge1xuICAgICAgICAgIGVnLnJlYWRCb29sZWFuKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZpZGVvX3NpZ25hbF90eXBlX3ByZXNlbnRfZmxhZyA9IGVnLnJlYWRCb29sZWFuKCk7XG4gICAgICAgIGlmICh2aWRlb19zaWduYWxfdHlwZV9wcmVzZW50X2ZsYWcpIHtcbiAgICAgICAgICBlZy5yZWFkQml0cygzKTtcbiAgICAgICAgICBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgICAgIHZhciBjb2xvdXJfZGVzY3JpcHRpb25fcHJlc2VudF9mbGFnID0gZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgICAgICBpZiAoY29sb3VyX2Rlc2NyaXB0aW9uX3ByZXNlbnRfZmxhZykge1xuICAgICAgICAgICAgZWcucmVhZFVCeXRlKCk7XG4gICAgICAgICAgICBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgICAgICAgIGVnLnJlYWRVQnl0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hyb21hX2xvY19pbmZvX3ByZXNlbnRfZmxhZyA9IGVnLnJlYWRCb29sZWFuKCk7XG4gICAgICAgIGlmIChjaHJvbWFfbG9jX2luZm9fcHJlc2VudF9mbGFnKSB7XG4gICAgICAgICAgZWcucmVhZFVFRygpO1xuICAgICAgICAgIGVnLnJlYWRVRUcoKTtcbiAgICAgICAgfVxuICAgICAgICBlZy5yZWFkQm9vbGVhbigpOyAvLyBuZXV0cmFsX2Nocm9tYV9pbmRpY2F0aW9uX2ZsYWdcbiAgICAgICAgZWcucmVhZEJvb2xlYW4oKTsgLy8gZmllbGRfc2VxX2ZsYWdcbiAgICAgICAgZWcucmVhZEJvb2xlYW4oKTsgLy8gZnJhbWVfZmllbGRfaW5mb19wcmVzZW50X2ZsYWdcbiAgICAgICAgZGVmYXVsdF9kaXNwbGF5X3dpbmRvd19mbGFnID0gZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgICAgaWYgKGRlZmF1bHRfZGlzcGxheV93aW5kb3dfZmxhZykge1xuICAgICAgICAgIHBpY19sZWZ0X29mZnNldCArPSBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgcGljX3JpZ2h0X29mZnNldCArPSBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgcGljX3RvcF9vZmZzZXQgKz0gZWcucmVhZFVFRygpO1xuICAgICAgICAgIHBpY19ib3R0b21fb2Zmc2V0ICs9IGVnLnJlYWRVRUcoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdnVpX3RpbWluZ19pbmZvX3ByZXNlbnRfZmxhZyA9IGVnLnJlYWRCb29sZWFuKCk7XG4gICAgICAgIGlmICh2dWlfdGltaW5nX2luZm9fcHJlc2VudF9mbGFnKSB7XG4gICAgICAgICAgZnBzX2RlbiA9IGVnLnJlYWRCaXRzKDMyKTtcbiAgICAgICAgICBmcHNfbnVtID0gZWcucmVhZEJpdHMoMzIpO1xuICAgICAgICAgIHZhciB2dWlfcG9jX3Byb3BvcnRpb25hbF90b190aW1pbmdfZmxhZyA9IGVnLnJlYWRCb29sZWFuKCk7XG4gICAgICAgICAgaWYgKHZ1aV9wb2NfcHJvcG9ydGlvbmFsX3RvX3RpbWluZ19mbGFnKSB7XG4gICAgICAgICAgICBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB2dWlfaHJkX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnID0gZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgICAgICBpZiAodnVpX2hyZF9wYXJhbWV0ZXJzX3ByZXNlbnRfZmxhZykge1xuICAgICAgICAgICAgLy9jb25zdCBjb21tb25JbmZQcmVzZW50RmxhZyA9IHRydWU7XG4gICAgICAgICAgICAvL2lmIChjb21tb25JbmZQcmVzZW50RmxhZykge1xuICAgICAgICAgICAgdmFyIG5hbF9ocmRfcGFyYW1ldGVyc19wcmVzZW50X2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgICAgICAgdmFyIHZjbF9ocmRfcGFyYW1ldGVyc19wcmVzZW50X2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgICAgICAgdmFyIHN1Yl9waWNfaHJkX3BhcmFtc19wcmVzZW50X2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChuYWxfaHJkX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnIHx8IHZjbF9ocmRfcGFyYW1ldGVyc19wcmVzZW50X2ZsYWcpIHtcbiAgICAgICAgICAgICAgc3ViX3BpY19ocmRfcGFyYW1zX3ByZXNlbnRfZmxhZyA9IGVnLnJlYWRCb29sZWFuKCk7XG4gICAgICAgICAgICAgIGlmIChzdWJfcGljX2hyZF9wYXJhbXNfcHJlc2VudF9mbGFnKSB7XG4gICAgICAgICAgICAgICAgZWcucmVhZFVCeXRlKCk7XG4gICAgICAgICAgICAgICAgZWcucmVhZEJpdHMoNSk7XG4gICAgICAgICAgICAgICAgZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgICAgICAgICAgICBlZy5yZWFkQml0cyg1KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlZy5yZWFkQml0cyg0KTsgLy8gYml0X3JhdGVfc2NhbGVcbiAgICAgICAgICAgICAgZWcucmVhZEJpdHMoNCk7IC8vIGNwYl9zaXplX3NjYWxlXG4gICAgICAgICAgICAgIGlmIChzdWJfcGljX2hyZF9wYXJhbXNfcHJlc2VudF9mbGFnKSB7XG4gICAgICAgICAgICAgICAgZWcucmVhZEJpdHMoNCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWcucmVhZEJpdHMoNSk7XG4gICAgICAgICAgICAgIGVnLnJlYWRCaXRzKDUpO1xuICAgICAgICAgICAgICBlZy5yZWFkQml0cyg1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgZm9yICh2YXIgX2k3ID0gMDsgX2k3IDw9IG1heF9zdWJfbGF5ZXJzX21pbnVzMTsgX2k3KyspIHtcbiAgICAgICAgICAgICAgZnBzX2ZpeGVkID0gZWcucmVhZEJvb2xlYW4oKTsgLy8gZml4ZWRfcGljX3JhdGVfZ2VuZXJhbF9mbGFnXG4gICAgICAgICAgICAgIHZhciBmaXhlZF9waWNfcmF0ZV93aXRoaW5fY3ZzX2ZsYWcgPSBmcHNfZml4ZWQgfHwgZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgICAgICAgICAgdmFyIGxvd19kZWxheV9ocmRfZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoZml4ZWRfcGljX3JhdGVfd2l0aGluX2N2c19mbGFnKSB7XG4gICAgICAgICAgICAgICAgZWcucmVhZEVHKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG93X2RlbGF5X2hyZF9mbGFnID0gZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgY3BiX2NudCA9IGxvd19kZWxheV9ocmRfZmxhZyA/IDEgOiBlZy5yZWFkVUVHKCkgKyAxO1xuICAgICAgICAgICAgICBpZiAobmFsX2hyZF9wYXJhbWV0ZXJzX3ByZXNlbnRfZmxhZykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9qNCA9IDA7IF9qNCA8IGNwYl9jbnQ7IF9qNCsrKSB7XG4gICAgICAgICAgICAgICAgICBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgICAgICAgICBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoc3ViX3BpY19ocmRfcGFyYW1zX3ByZXNlbnRfZmxhZykge1xuICAgICAgICAgICAgICAgICAgICBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgICAgICAgICAgIGVnLnJlYWRVRUcoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVnLnNraXBCaXRzKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodmNsX2hyZF9wYXJhbWV0ZXJzX3ByZXNlbnRfZmxhZykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9qNSA9IDA7IF9qNSA8IGNwYl9jbnQ7IF9qNSsrKSB7XG4gICAgICAgICAgICAgICAgICBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgICAgICAgICBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoc3ViX3BpY19ocmRfcGFyYW1zX3ByZXNlbnRfZmxhZykge1xuICAgICAgICAgICAgICAgICAgICBlZy5yZWFkVUVHKCk7XG4gICAgICAgICAgICAgICAgICAgIGVnLnJlYWRVRUcoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVnLnNraXBCaXRzKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgYml0c3RyZWFtX3Jlc3RyaWN0aW9uX2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgICBpZiAoYml0c3RyZWFtX3Jlc3RyaWN0aW9uX2ZsYWcpIHtcbiAgICAgICAgICBlZy5yZWFkQm9vbGVhbigpOyAvLyB0aWxlc19maXhlZF9zdHJ1Y3R1cmVfZmxhZ1xuICAgICAgICAgIGVnLnJlYWRCb29sZWFuKCk7IC8vIG1vdGlvbl92ZWN0b3JzX292ZXJfcGljX2JvdW5kYXJpZXNfZmxhZ1xuICAgICAgICAgIGVnLnJlYWRCb29sZWFuKCk7IC8vIHJlc3RyaWN0ZWRfcmVmX3BpY19saXN0c19mbGFnXG4gICAgICAgICAgbWluX3NwYXRpYWxfc2VnbWVudGF0aW9uX2lkYyA9IGVnLnJlYWRVRUcoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHdpZHRoID0gcGljX3dpZHRoX2luX2x1bWFfc2FtcGxlcyxcbiAgICAgICAgaGVpZ2h0ID0gcGljX2hlaWdodF9pbl9sdW1hX3NhbXBsZXM7XG4gICAgICBpZiAoY29uZm9ybWFuY2Vfd2luZG93X2ZsYWcgfHwgZGVmYXVsdF9kaXNwbGF5X3dpbmRvd19mbGFnKSB7XG4gICAgICAgIHZhciBjaHJvbWFfc2NhbGVfdyA9IDEsXG4gICAgICAgICAgY2hyb21hX3NjYWxlX2ggPSAxO1xuICAgICAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDEpIHtcbiAgICAgICAgICAvLyBZVVYgNDIwXG4gICAgICAgICAgY2hyb21hX3NjYWxlX3cgPSBjaHJvbWFfc2NhbGVfaCA9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPT0gMikge1xuICAgICAgICAgIC8vIFlVViA0MjJcbiAgICAgICAgICBjaHJvbWFfc2NhbGVfdyA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgd2lkdGggPSBwaWNfd2lkdGhfaW5fbHVtYV9zYW1wbGVzIC0gY2hyb21hX3NjYWxlX3cgKiBwaWNfcmlnaHRfb2Zmc2V0IC0gY2hyb21hX3NjYWxlX3cgKiBwaWNfbGVmdF9vZmZzZXQ7XG4gICAgICAgIGhlaWdodCA9IHBpY19oZWlnaHRfaW5fbHVtYV9zYW1wbGVzIC0gY2hyb21hX3NjYWxlX2ggKiBwaWNfYm90dG9tX29mZnNldCAtIGNocm9tYV9zY2FsZV9oICogcGljX3RvcF9vZmZzZXQ7XG4gICAgICB9XG4gICAgICB2YXIgcHJvZmlsZV9zcGFjZV9zdHJpbmcgPSBnZW5lcmFsX3Byb2ZpbGVfc3BhY2UgPyBbJ0EnLCAnQicsICdDJ11bZ2VuZXJhbF9wcm9maWxlX3NwYWNlXSA6ICcnO1xuICAgICAgdmFyIHByb2ZpbGVfY29tcGF0aWJpbGl0eV9idWYgPSBnZW5lcmFsX3Byb2ZpbGVfY29tcGF0aWJpbGl0eV9mbGFnc18xIDw8IDI0IHwgZ2VuZXJhbF9wcm9maWxlX2NvbXBhdGliaWxpdHlfZmxhZ3NfMiA8PCAxNiB8IGdlbmVyYWxfcHJvZmlsZV9jb21wYXRpYmlsaXR5X2ZsYWdzXzMgPDwgOCB8IGdlbmVyYWxfcHJvZmlsZV9jb21wYXRpYmlsaXR5X2ZsYWdzXzQ7XG4gICAgICB2YXIgcHJvZmlsZV9jb21wYXRpYmlsaXR5X3JldiA9IDA7XG4gICAgICBmb3IgKHZhciBfaTggPSAwOyBfaTggPCAzMjsgX2k4KyspIHtcbiAgICAgICAgcHJvZmlsZV9jb21wYXRpYmlsaXR5X3JldiA9IChwcm9maWxlX2NvbXBhdGliaWxpdHlfcmV2IHwgKHByb2ZpbGVfY29tcGF0aWJpbGl0eV9idWYgPj4gX2k4ICYgMSkgPDwgMzEgLSBfaTgpID4+PiAwOyAvLyByZXZlcnNlIGJpdCBwb3NpdGlvbiAoYW5kIGNhc3QgYXMgVUludDMyKVxuICAgICAgfVxuICAgICAgdmFyIHByb2ZpbGVfY29tcGF0aWJpbGl0eV9mbGFnc19zdHJpbmcgPSBwcm9maWxlX2NvbXBhdGliaWxpdHlfcmV2LnRvU3RyaW5nKDE2KTtcbiAgICAgIGlmIChnZW5lcmFsX3Byb2ZpbGVfaWRjID09PSAxICYmIHByb2ZpbGVfY29tcGF0aWJpbGl0eV9mbGFnc19zdHJpbmcgPT09ICcyJykge1xuICAgICAgICBwcm9maWxlX2NvbXBhdGliaWxpdHlfZmxhZ3Nfc3RyaW5nID0gJzYnO1xuICAgICAgfVxuICAgICAgdmFyIHRpZXJfZmxhZ19zdHJpbmcgPSBnZW5lcmFsX3RpZXJfZmxhZyA/ICdIJyA6ICdMJztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvZGVjU3RyaW5nOiBcImh2YzEuXCIgKyBwcm9maWxlX3NwYWNlX3N0cmluZyArIGdlbmVyYWxfcHJvZmlsZV9pZGMgKyBcIi5cIiArIHByb2ZpbGVfY29tcGF0aWJpbGl0eV9mbGFnc19zdHJpbmcgKyBcIi5cIiArIHRpZXJfZmxhZ19zdHJpbmcgKyBnZW5lcmFsX2xldmVsX2lkYyArIFwiLkIwXCIsXG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGdlbmVyYWxfdGllcl9mbGFnOiBnZW5lcmFsX3RpZXJfZmxhZyxcbiAgICAgICAgICBnZW5lcmFsX3Byb2ZpbGVfaWRjOiBnZW5lcmFsX3Byb2ZpbGVfaWRjLFxuICAgICAgICAgIGdlbmVyYWxfcHJvZmlsZV9zcGFjZTogZ2VuZXJhbF9wcm9maWxlX3NwYWNlLFxuICAgICAgICAgIGdlbmVyYWxfcHJvZmlsZV9jb21wYXRpYmlsaXR5X2ZsYWdzOiBbZ2VuZXJhbF9wcm9maWxlX2NvbXBhdGliaWxpdHlfZmxhZ3NfMSwgZ2VuZXJhbF9wcm9maWxlX2NvbXBhdGliaWxpdHlfZmxhZ3NfMiwgZ2VuZXJhbF9wcm9maWxlX2NvbXBhdGliaWxpdHlfZmxhZ3NfMywgZ2VuZXJhbF9wcm9maWxlX2NvbXBhdGliaWxpdHlfZmxhZ3NfNF0sXG4gICAgICAgICAgZ2VuZXJhbF9jb25zdHJhaW50X2luZGljYXRvcl9mbGFnczogW2dlbmVyYWxfY29uc3RyYWludF9pbmRpY2F0b3JfZmxhZ3NfMSwgZ2VuZXJhbF9jb25zdHJhaW50X2luZGljYXRvcl9mbGFnc18yLCBnZW5lcmFsX2NvbnN0cmFpbnRfaW5kaWNhdG9yX2ZsYWdzXzMsIGdlbmVyYWxfY29uc3RyYWludF9pbmRpY2F0b3JfZmxhZ3NfNCwgZ2VuZXJhbF9jb25zdHJhaW50X2luZGljYXRvcl9mbGFnc181LCBnZW5lcmFsX2NvbnN0cmFpbnRfaW5kaWNhdG9yX2ZsYWdzXzZdLFxuICAgICAgICAgIGdlbmVyYWxfbGV2ZWxfaWRjOiBnZW5lcmFsX2xldmVsX2lkYyxcbiAgICAgICAgICBiaXRfZGVwdGg6IGJpdF9kZXB0aF9sdW1hX21pbnVzOCArIDgsXG4gICAgICAgICAgYml0X2RlcHRoX2x1bWFfbWludXM4OiBiaXRfZGVwdGhfbHVtYV9taW51czgsXG4gICAgICAgICAgYml0X2RlcHRoX2Nocm9tYV9taW51czg6IGJpdF9kZXB0aF9jaHJvbWFfbWludXM4LFxuICAgICAgICAgIG1pbl9zcGF0aWFsX3NlZ21lbnRhdGlvbl9pZGM6IG1pbl9zcGF0aWFsX3NlZ21lbnRhdGlvbl9pZGMsXG4gICAgICAgICAgY2hyb21hX2Zvcm1hdF9pZGM6IGNocm9tYV9mb3JtYXRfaWRjLFxuICAgICAgICAgIGZyYW1lX3JhdGU6IHtcbiAgICAgICAgICAgIGZpeGVkOiBmcHNfZml4ZWQsXG4gICAgICAgICAgICBmcHM6IGZwc19udW0gLyBmcHNfZGVuXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBwaXhlbFJhdGlvOiBbc2FyX3dpZHRoLCBzYXJfaGVpZ2h0XVxuICAgICAgfTtcbiAgICB9O1xuICAgIF9wcm90by5yZWFkUFBTID0gZnVuY3Rpb24gcmVhZFBQUyhwcHMpIHtcbiAgICAgIHZhciBlZyA9IG5ldyBFeHBHb2xvbWIodGhpcy5lYnNwMnJic3AocHBzKSk7XG4gICAgICBlZy5yZWFkVUJ5dGUoKTtcbiAgICAgIGVnLnJlYWRVQnl0ZSgpO1xuICAgICAgZWcuc2tpcFVFRygpOyAvLyBwaWNfcGFyYW1ldGVyX3NldF9pZFxuICAgICAgZWcuc2tpcFVFRygpOyAvLyBzZXFfcGFyYW1ldGVyX3NldF9pZFxuICAgICAgZWcuc2tpcEJpdHMoMik7IC8vIGRlcGVuZGVudF9zbGljZV9zZWdtZW50c19lbmFibGVkX2ZsYWcsIG91dHB1dF9mbGFnX3ByZXNlbnRfZmxhZ1xuICAgICAgZWcuc2tpcEJpdHMoMyk7IC8vIG51bV9leHRyYV9zbGljZV9oZWFkZXJfYml0c1xuICAgICAgZWcuc2tpcEJpdHMoMik7IC8vIHNpZ25fZGF0YV9oaWRpbmdfZW5hYmxlZF9mbGFnLCBjYWJhY19pbml0X3ByZXNlbnRfZmxhZ1xuICAgICAgZWcuc2tpcFVFRygpO1xuICAgICAgZWcuc2tpcFVFRygpO1xuICAgICAgZWcuc2tpcEVHKCk7IC8vIGluaXRfcXBfbWludXMyNlxuICAgICAgZWcuc2tpcEJpdHMoMik7IC8vIGNvbnN0cmFpbmVkX2ludHJhX3ByZWRfZmxhZywgdHJhbnNmb3JtX3NraXBfZW5hYmxlZF9mbGFnXG4gICAgICB2YXIgY3VfcXBfZGVsdGFfZW5hYmxlZF9mbGFnID0gZWcucmVhZEJvb2xlYW4oKTtcbiAgICAgIGlmIChjdV9xcF9kZWx0YV9lbmFibGVkX2ZsYWcpIHtcbiAgICAgICAgZWcuc2tpcFVFRygpO1xuICAgICAgfVxuICAgICAgZWcuc2tpcEVHKCk7IC8vIGNiX3FwX29mZnNldFxuICAgICAgZWcuc2tpcEVHKCk7IC8vIGNyX3FwX29mZnNldFxuICAgICAgZWcuc2tpcEJpdHMoNCk7IC8vIHBwc19zbGljZV9jaHJvbWFfcXBfb2Zmc2V0c19wcmVzZW50X2ZsYWcsIHdlaWdodGVkX3ByZWRfZmxhZywgd2VpZ2h0ZWRfYmlwcmVkX2ZsYWcsIHRyYW5zcXVhbnRfYnlwYXNzX2VuYWJsZWRfZmxhZ1xuICAgICAgdmFyIHRpbGVzX2VuYWJsZWRfZmxhZyA9IGVnLnJlYWRCb29sZWFuKCk7XG4gICAgICB2YXIgZW50cm9weV9jb2Rpbmdfc3luY19lbmFibGVkX2ZsYWcgPSBlZy5yZWFkQm9vbGVhbigpO1xuICAgICAgdmFyIHBhcmFsbGVsaXNtVHlwZSA9IDE7IC8vIHNsaWNlLWJhc2VkIHBhcmFsbGVsIGRlY29kaW5nXG4gICAgICBpZiAoZW50cm9weV9jb2Rpbmdfc3luY19lbmFibGVkX2ZsYWcgJiYgdGlsZXNfZW5hYmxlZF9mbGFnKSB7XG4gICAgICAgIHBhcmFsbGVsaXNtVHlwZSA9IDA7IC8vIG1peGVkLXR5cGUgcGFyYWxsZWwgZGVjb2RpbmdcbiAgICAgIH0gZWxzZSBpZiAoZW50cm9weV9jb2Rpbmdfc3luY19lbmFibGVkX2ZsYWcpIHtcbiAgICAgICAgcGFyYWxsZWxpc21UeXBlID0gMzsgLy8gd2F2ZWZyb250LWJhc2VkIHBhcmFsbGVsIGRlY29kaW5nXG4gICAgICB9IGVsc2UgaWYgKHRpbGVzX2VuYWJsZWRfZmxhZykge1xuICAgICAgICBwYXJhbGxlbGlzbVR5cGUgPSAyOyAvLyB0aWxlLWJhc2VkIHBhcmFsbGVsIGRlY29kaW5nXG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJhbGxlbGlzbVR5cGU6IHBhcmFsbGVsaXNtVHlwZVxuICAgICAgfTtcbiAgICB9O1xuICAgIF9wcm90by5tYXRjaFNQUyA9IGZ1bmN0aW9uIG1hdGNoU1BTKHNwczEsIHNwczIpIHtcbiAgICAgIC8vIGNvbXBhcmUgd2l0aG91dCBoZWFkZXJzIGFuZCBWUFMgcmVsYXRlZCBwYXJhbXNcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHNwczEpLnN1YnN0cigzKSA9PT0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBzcHMyKS5zdWJzdHIoMyk7XG4gICAgfTtcbiAgICByZXR1cm4gSGV2Y1ZpZGVvUGFyc2VyO1xuICB9KEJhc2VWaWRlb1BhcnNlcik7XG5cbiAgdmFyIFBBQ0tFVF9MRU5HVEggPSAxODg7XG4gIHZhciBUU0RlbXV4ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRTRGVtdXhlcihvYnNlcnZlciwgY29uZmlnLCB0eXBlU3VwcG9ydGVkLCBsb2dnZXIpIHtcbiAgICAgIHRoaXMubG9nZ2VyID0gdm9pZCAwO1xuICAgICAgdGhpcy5vYnNlcnZlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMuY29uZmlnID0gdm9pZCAwO1xuICAgICAgdGhpcy50eXBlU3VwcG9ydGVkID0gdm9pZCAwO1xuICAgICAgdGhpcy5zYW1wbGVBZXMgPSBudWxsO1xuICAgICAgdGhpcy5wbXRQYXJzZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuYXVkaW9Db2RlYyA9IHZvaWQgMDtcbiAgICAgIHRoaXMudmlkZW9Db2RlYyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX3BtdElkID0gLTE7XG4gICAgICB0aGlzLl92aWRlb1RyYWNrID0gdm9pZCAwO1xuICAgICAgdGhpcy5fYXVkaW9UcmFjayA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX2lkM1RyYWNrID0gdm9pZCAwO1xuICAgICAgdGhpcy5fdHh0VHJhY2sgPSB2b2lkIDA7XG4gICAgICB0aGlzLmFhY092ZXJGbG93ID0gbnVsbDtcbiAgICAgIHRoaXMucmVtYWluZGVyRGF0YSA9IG51bGw7XG4gICAgICB0aGlzLnZpZGVvUGFyc2VyID0gdm9pZCAwO1xuICAgICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICB0aGlzLnR5cGVTdXBwb3J0ZWQgPSB0eXBlU3VwcG9ydGVkO1xuICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgICB0aGlzLnZpZGVvUGFyc2VyID0gbnVsbDtcbiAgICB9XG4gICAgVFNEZW11eGVyLnByb2JlID0gZnVuY3Rpb24gcHJvYmUoZGF0YSwgbG9nZ2VyKSB7XG4gICAgICB2YXIgc3luY09mZnNldCA9IFRTRGVtdXhlci5zeW5jT2Zmc2V0KGRhdGEpO1xuICAgICAgaWYgKHN5bmNPZmZzZXQgPiAwKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKFwiTVBFRzItVFMgZGV0ZWN0ZWQgYnV0IGZpcnN0IHN5bmMgd29yZCBmb3VuZCBAIG9mZnNldCBcIiArIHN5bmNPZmZzZXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN5bmNPZmZzZXQgIT09IC0xO1xuICAgIH07XG4gICAgVFNEZW11eGVyLnN5bmNPZmZzZXQgPSBmdW5jdGlvbiBzeW5jT2Zmc2V0KGRhdGEpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgIHZhciBzY2Fud2luZG93ID0gTWF0aC5taW4oUEFDS0VUX0xFTkdUSCAqIDUsIGxlbmd0aCAtIFBBQ0tFVF9MRU5HVEgpICsgMTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHdoaWxlIChpIDwgc2NhbndpbmRvdykge1xuICAgICAgICAvLyBhIFRTIGluaXQgc2VnbWVudCBzaG91bGQgY29udGFpbiBhdCBsZWFzdCAyIFRTIHBhY2tldHM6IFBBVCBhbmQgUE1ULCBlYWNoIHN0YXJ0aW5nIHdpdGggMHg0N1xuICAgICAgICB2YXIgZm91bmRQYXQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHBhY2tldFN0YXJ0ID0gLTE7XG4gICAgICAgIHZhciB0c1BhY2tldHMgPSAwO1xuICAgICAgICBmb3IgKHZhciBqID0gaTsgaiA8IGxlbmd0aDsgaiArPSBQQUNLRVRfTEVOR1RIKSB7XG4gICAgICAgICAgaWYgKGRhdGFbal0gPT09IDB4NDcgJiYgKGxlbmd0aCAtIGogPT09IFBBQ0tFVF9MRU5HVEggfHwgZGF0YVtqICsgUEFDS0VUX0xFTkdUSF0gPT09IDB4NDcpKSB7XG4gICAgICAgICAgICB0c1BhY2tldHMrKztcbiAgICAgICAgICAgIGlmIChwYWNrZXRTdGFydCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgcGFja2V0U3RhcnQgPSBqO1xuICAgICAgICAgICAgICAvLyBGaXJzdCBzeW5jIHdvcmQgZm91bmQgYXQgb2Zmc2V0LCBpbmNyZWFzZSBzY2FuIGxlbmd0aCAoIzUyNTEpXG4gICAgICAgICAgICAgIGlmIChwYWNrZXRTdGFydCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHNjYW53aW5kb3cgPSBNYXRoLm1pbihwYWNrZXRTdGFydCArIFBBQ0tFVF9MRU5HVEggKiA5OSwgZGF0YS5sZW5ndGggLSBQQUNLRVRfTEVOR1RIKSArIDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZm91bmRQYXQpIHtcbiAgICAgICAgICAgICAgZm91bmRQYXQgPSBwYXJzZVBJRChkYXRhLCBqKSA9PT0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN5bmMgd29yZCBmb3VuZCBhdCAwIHdpdGggMyBwYWNrZXRzLCBvciBmb3VuZCBhdCBvZmZzZXQgbGVhc3QgMiBwYWNrZXRzIHVwIHRvIHNjYW53aW5kb3cgKCM1NTAxKVxuICAgICAgICAgICAgaWYgKGZvdW5kUGF0ICYmIHRzUGFja2V0cyA+IDEgJiYgKHBhY2tldFN0YXJ0ID09PSAwICYmIHRzUGFja2V0cyA+IDIgfHwgaiArIFBBQ0tFVF9MRU5HVEggPiBzY2Fud2luZG93KSkge1xuICAgICAgICAgICAgICByZXR1cm4gcGFja2V0U3RhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0c1BhY2tldHMpIHtcbiAgICAgICAgICAgIC8vIEV4aXQgaWYgc3luYyB3b3JkIGZvdW5kLCBidXQgZG9lcyBub3QgY29udGFpbiBjb250aWd1b3VzIHBhY2tldHNcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdHJhY2sgbW9kZWwgaW50ZXJuYWwgdG8gZGVtdXhlciB1c2VkIHRvIGRyaXZlIHJlbXV4aW5nIGlucHV0XG4gICAgICovO1xuICAgIFRTRGVtdXhlci5jcmVhdGVUcmFjayA9IGZ1bmN0aW9uIGNyZWF0ZVRyYWNrKHR5cGUsIGR1cmF0aW9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250YWluZXI6IHR5cGUgPT09ICd2aWRlbycgfHwgdHlwZSA9PT0gJ2F1ZGlvJyA/ICd2aWRlby9tcDJ0JyA6IHVuZGVmaW5lZCxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgaWQ6IFJlbXV4ZXJUcmFja0lkQ29uZmlnW3R5cGVdLFxuICAgICAgICBwaWQ6IC0xLFxuICAgICAgICBpbnB1dFRpbWVTY2FsZTogOTAwMDAsXG4gICAgICAgIHNlcXVlbmNlTnVtYmVyOiAwLFxuICAgICAgICBzYW1wbGVzOiBbXSxcbiAgICAgICAgZHJvcHBlZDogMCxcbiAgICAgICAgZHVyYXRpb246IHR5cGUgPT09ICdhdWRpbycgPyBkdXJhdGlvbiA6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhIG5ldyBpbml0IHNlZ21lbnQgb24gdGhlIGRlbXV4ZXIvcmVtdXhlciBpbnRlcmZhY2UuIE5lZWRlZCBmb3IgZGlzY29udGludWl0aWVzL3RyYWNrLXN3aXRjaGVzIChvciBhdCBzdHJlYW0gc3RhcnQpXG4gICAgICogUmVzZXRzIGFsbCBpbnRlcm5hbCB0cmFjayBpbnN0YW5jZXMgb2YgdGhlIGRlbXV4ZXIuXG4gICAgICovO1xuICAgIHZhciBfcHJvdG8gPSBUU0RlbXV4ZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5yZXNldEluaXRTZWdtZW50ID0gZnVuY3Rpb24gcmVzZXRJbml0U2VnbWVudChpbml0U2VnbWVudCwgYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgdHJhY2tEdXJhdGlvbikge1xuICAgICAgdGhpcy5wbXRQYXJzZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3BtdElkID0gLTE7XG4gICAgICB0aGlzLl92aWRlb1RyYWNrID0gVFNEZW11eGVyLmNyZWF0ZVRyYWNrKCd2aWRlbycpO1xuICAgICAgdGhpcy5fdmlkZW9UcmFjay5kdXJhdGlvbiA9IHRyYWNrRHVyYXRpb247XG4gICAgICB0aGlzLl9hdWRpb1RyYWNrID0gVFNEZW11eGVyLmNyZWF0ZVRyYWNrKCdhdWRpbycsIHRyYWNrRHVyYXRpb24pO1xuICAgICAgdGhpcy5faWQzVHJhY2sgPSBUU0RlbXV4ZXIuY3JlYXRlVHJhY2soJ2lkMycpO1xuICAgICAgdGhpcy5fdHh0VHJhY2sgPSBUU0RlbXV4ZXIuY3JlYXRlVHJhY2soJ3RleHQnKTtcbiAgICAgIHRoaXMuX2F1ZGlvVHJhY2suc2VnbWVudENvZGVjID0gJ2FhYyc7XG5cbiAgICAgIC8vIGZsdXNoIGFueSBwYXJ0aWFsIGNvbnRlbnRcbiAgICAgIHRoaXMuYWFjT3ZlckZsb3cgPSBudWxsO1xuICAgICAgdGhpcy5yZW1haW5kZXJEYXRhID0gbnVsbDtcbiAgICAgIHRoaXMuYXVkaW9Db2RlYyA9IGF1ZGlvQ29kZWM7XG4gICAgICB0aGlzLnZpZGVvQ29kZWMgPSB2aWRlb0NvZGVjO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0VGltZVN0YW1wID0gZnVuY3Rpb24gcmVzZXRUaW1lU3RhbXAoKSB7fTtcbiAgICBfcHJvdG8ucmVzZXRDb250aWd1aXR5ID0gZnVuY3Rpb24gcmVzZXRDb250aWd1aXR5KCkge1xuICAgICAgdmFyIF9hdWRpb1RyYWNrID0gdGhpcy5fYXVkaW9UcmFjayxcbiAgICAgICAgX3ZpZGVvVHJhY2sgPSB0aGlzLl92aWRlb1RyYWNrLFxuICAgICAgICBfaWQzVHJhY2sgPSB0aGlzLl9pZDNUcmFjaztcbiAgICAgIGlmIChfYXVkaW9UcmFjaykge1xuICAgICAgICBfYXVkaW9UcmFjay5wZXNEYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChfdmlkZW9UcmFjaykge1xuICAgICAgICBfdmlkZW9UcmFjay5wZXNEYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChfaWQzVHJhY2spIHtcbiAgICAgICAgX2lkM1RyYWNrLnBlc0RhdGEgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5hYWNPdmVyRmxvdyA9IG51bGw7XG4gICAgICB0aGlzLnJlbWFpbmRlckRhdGEgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLmRlbXV4ID0gZnVuY3Rpb24gZGVtdXgoZGF0YSwgdGltZU9mZnNldCwgaXNTYW1wbGVBZXMsIGZsdXNoKSB7XG4gICAgICBpZiAoaXNTYW1wbGVBZXMgPT09IHZvaWQgMCkge1xuICAgICAgICBpc1NhbXBsZUFlcyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZsdXNoID09PSB2b2lkIDApIHtcbiAgICAgICAgZmx1c2ggPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1wbGVBZXMpIHtcbiAgICAgICAgdGhpcy5zYW1wbGVBZXMgPSBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHBlcztcbiAgICAgIHZhciB2aWRlb1RyYWNrID0gdGhpcy5fdmlkZW9UcmFjaztcbiAgICAgIHZhciBhdWRpb1RyYWNrID0gdGhpcy5fYXVkaW9UcmFjaztcbiAgICAgIHZhciBpZDNUcmFjayA9IHRoaXMuX2lkM1RyYWNrO1xuICAgICAgdmFyIHRleHRUcmFjayA9IHRoaXMuX3R4dFRyYWNrO1xuICAgICAgdmFyIHZpZGVvUGlkID0gdmlkZW9UcmFjay5waWQ7XG4gICAgICB2YXIgdmlkZW9EYXRhID0gdmlkZW9UcmFjay5wZXNEYXRhO1xuICAgICAgdmFyIGF1ZGlvUGlkID0gYXVkaW9UcmFjay5waWQ7XG4gICAgICB2YXIgaWQzUGlkID0gaWQzVHJhY2sucGlkO1xuICAgICAgdmFyIGF1ZGlvRGF0YSA9IGF1ZGlvVHJhY2sucGVzRGF0YTtcbiAgICAgIHZhciBpZDNEYXRhID0gaWQzVHJhY2sucGVzRGF0YTtcbiAgICAgIHZhciB1bmtub3duUElEID0gbnVsbDtcbiAgICAgIHZhciBwbXRQYXJzZWQgPSB0aGlzLnBtdFBhcnNlZDtcbiAgICAgIHZhciBwbXRJZCA9IHRoaXMuX3BtdElkO1xuICAgICAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoO1xuICAgICAgaWYgKHRoaXMucmVtYWluZGVyRGF0YSkge1xuICAgICAgICBkYXRhID0gYXBwZW5kVWludDhBcnJheSh0aGlzLnJlbWFpbmRlckRhdGEsIGRhdGEpO1xuICAgICAgICBsZW4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgdGhpcy5yZW1haW5kZXJEYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChsZW4gPCBQQUNLRVRfTEVOR1RIICYmICFmbHVzaCkge1xuICAgICAgICB0aGlzLnJlbWFpbmRlckRhdGEgPSBkYXRhO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGF1ZGlvVHJhY2s6IGF1ZGlvVHJhY2ssXG4gICAgICAgICAgdmlkZW9UcmFjazogdmlkZW9UcmFjayxcbiAgICAgICAgICBpZDNUcmFjazogaWQzVHJhY2ssXG4gICAgICAgICAgdGV4dFRyYWNrOiB0ZXh0VHJhY2tcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBzeW5jT2Zmc2V0ID0gTWF0aC5tYXgoMCwgVFNEZW11eGVyLnN5bmNPZmZzZXQoZGF0YSkpO1xuICAgICAgbGVuIC09IChsZW4gLSBzeW5jT2Zmc2V0KSAlIFBBQ0tFVF9MRU5HVEg7XG4gICAgICBpZiAobGVuIDwgZGF0YS5ieXRlTGVuZ3RoICYmICFmbHVzaCkge1xuICAgICAgICB0aGlzLnJlbWFpbmRlckRhdGEgPSBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgbGVuLCBkYXRhLmJ1ZmZlci5ieXRlTGVuZ3RoIC0gbGVuKTtcbiAgICAgIH1cblxuICAgICAgLy8gbG9vcCB0aHJvdWdoIFRTIHBhY2tldHNcbiAgICAgIHZhciB0c1BhY2tldEVycm9ycyA9IDA7XG4gICAgICBmb3IgKHZhciBzdGFydCA9IHN5bmNPZmZzZXQ7IHN0YXJ0IDwgbGVuOyBzdGFydCArPSBQQUNLRVRfTEVOR1RIKSB7XG4gICAgICAgIGlmIChkYXRhW3N0YXJ0XSA9PT0gMHg0Nykge1xuICAgICAgICAgIHZhciBzdHQgPSAhIShkYXRhW3N0YXJ0ICsgMV0gJiAweDQwKTtcbiAgICAgICAgICB2YXIgcGlkID0gcGFyc2VQSUQoZGF0YSwgc3RhcnQpO1xuICAgICAgICAgIHZhciBhdGYgPSAoZGF0YVtzdGFydCArIDNdICYgMHgzMCkgPj4gNDtcblxuICAgICAgICAgIC8vIGlmIGFuIGFkYXB0aW9uIGZpZWxkIGlzIHByZXNlbnQsIGl0cyBsZW5ndGggaXMgc3BlY2lmaWVkIGJ5IHRoZSBmaWZ0aCBieXRlIG9mIHRoZSBUUyBwYWNrZXQgaGVhZGVyLlxuICAgICAgICAgIHZhciBvZmZzZXQgPSB2b2lkIDA7XG4gICAgICAgICAgaWYgKGF0ZiA+IDEpIHtcbiAgICAgICAgICAgIG9mZnNldCA9IHN0YXJ0ICsgNSArIGRhdGFbc3RhcnQgKyA0XTtcbiAgICAgICAgICAgIC8vIGNvbnRpbnVlIGlmIHRoZXJlIGlzIG9ubHkgYWRhcHRhdGlvbiBmaWVsZFxuICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gc3RhcnQgKyBQQUNLRVRfTEVOR1RIKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBzdGFydCArIDQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXRjaCAocGlkKSB7XG4gICAgICAgICAgICBjYXNlIHZpZGVvUGlkOlxuICAgICAgICAgICAgICBpZiAoc3R0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHZpZGVvRGF0YSAmJiAocGVzID0gcGFyc2VQRVModmlkZW9EYXRhLCB0aGlzLmxvZ2dlcikpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy52aWRlb1BhcnNlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHZpZGVvVHJhY2suc2VnbWVudENvZGVjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXZjJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW9QYXJzZXIgPSBuZXcgQXZjVmlkZW9QYXJzZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hldmMnOlxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvUGFyc2VyID0gbmV3IEhldmNWaWRlb1BhcnNlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZGVvUGFyc2VyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW9QYXJzZXIucGFyc2VQRVModmlkZW9UcmFjaywgdGV4dFRyYWNrLCBwZXMsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmlkZW9EYXRhID0ge1xuICAgICAgICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICAgICAgICBzaXplOiAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodmlkZW9EYXRhKSB7XG4gICAgICAgICAgICAgICAgdmlkZW9EYXRhLmRhdGEucHVzaChkYXRhLnN1YmFycmF5KG9mZnNldCwgc3RhcnQgKyBQQUNLRVRfTEVOR1RIKSk7XG4gICAgICAgICAgICAgICAgdmlkZW9EYXRhLnNpemUgKz0gc3RhcnQgKyBQQUNLRVRfTEVOR1RIIC0gb2Zmc2V0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhdWRpb1BpZDpcbiAgICAgICAgICAgICAgaWYgKHN0dCkge1xuICAgICAgICAgICAgICAgIGlmIChhdWRpb0RhdGEgJiYgKHBlcyA9IHBhcnNlUEVTKGF1ZGlvRGF0YSwgdGhpcy5sb2dnZXIpKSkge1xuICAgICAgICAgICAgICAgICAgc3dpdGNoIChhdWRpb1RyYWNrLnNlZ21lbnRDb2RlYykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhYWMnOlxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VBQUNQRVMoYXVkaW9UcmFjaywgcGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbXAzJzpcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlTVBFR1BFUyhhdWRpb1RyYWNrLCBwZXMpO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhYzMnOlxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VBQzNQRVMoYXVkaW9UcmFjaywgcGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF1ZGlvRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgICAgICAgc2l6ZTogMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGF1ZGlvRGF0YSkge1xuICAgICAgICAgICAgICAgIGF1ZGlvRGF0YS5kYXRhLnB1c2goZGF0YS5zdWJhcnJheShvZmZzZXQsIHN0YXJ0ICsgUEFDS0VUX0xFTkdUSCkpO1xuICAgICAgICAgICAgICAgIGF1ZGlvRGF0YS5zaXplICs9IHN0YXJ0ICsgUEFDS0VUX0xFTkdUSCAtIG9mZnNldDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgaWQzUGlkOlxuICAgICAgICAgICAgICBpZiAoc3R0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGlkM0RhdGEgJiYgKHBlcyA9IHBhcnNlUEVTKGlkM0RhdGEsIHRoaXMubG9nZ2VyKSkpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VJRDNQRVMoaWQzVHJhY2ssIHBlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlkM0RhdGEgPSB7XG4gICAgICAgICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgICAgICAgIHNpemU6IDBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChpZDNEYXRhKSB7XG4gICAgICAgICAgICAgICAgaWQzRGF0YS5kYXRhLnB1c2goZGF0YS5zdWJhcnJheShvZmZzZXQsIHN0YXJ0ICsgUEFDS0VUX0xFTkdUSCkpO1xuICAgICAgICAgICAgICAgIGlkM0RhdGEuc2l6ZSArPSBzdGFydCArIFBBQ0tFVF9MRU5HVEggLSBvZmZzZXQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIGlmIChzdHQpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gZGF0YVtvZmZzZXRdICsgMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwbXRJZCA9IHRoaXMuX3BtdElkID0gcGFyc2VQQVQoZGF0YSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgLy8gdGhpcy5sb2dnZXIubG9nKCdQTVQgUElEOicgICsgdGhpcy5fcG10SWQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgcG10SWQ6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAoc3R0KSB7XG4gICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gZGF0YVtvZmZzZXRdICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHBhcnNlZFBJRHMgPSBwYXJzZVBNVChkYXRhLCBvZmZzZXQsIHRoaXMudHlwZVN1cHBvcnRlZCwgaXNTYW1wbGVBZXMsIHRoaXMub2JzZXJ2ZXIsIHRoaXMubG9nZ2VyKTtcblxuICAgICAgICAgICAgICAgIC8vIG9ubHkgdXBkYXRlIHRyYWNrIGlkIGlmIHRyYWNrIFBJRCBmb3VuZCB3aGlsZSBwYXJzaW5nIFBNVFxuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgdG8gYXZvaWQgcmVzZXR0aW5nIHRoZSBQSUQgdG8gLTEgaW4gY2FzZVxuICAgICAgICAgICAgICAgIC8vIHRyYWNrIFBJRCB0cmFuc2llbnRseSBkaXNhcHBlYXJzIGZyb20gdGhlIHN0cmVhbVxuICAgICAgICAgICAgICAgIC8vIHRoaXMgY291bGQgaGFwcGVuIGluIGNhc2Ugb2YgdHJhbnNpZW50IG1pc3NpbmcgYXVkaW8gc2FtcGxlcyBmb3IgZXhhbXBsZVxuICAgICAgICAgICAgICAgIC8vIE5PVEUgdGhpcyBpcyBvbmx5IHRoZSBQSUQgb2YgdGhlIHRyYWNrIGFzIGZvdW5kIGluIFRTLFxuICAgICAgICAgICAgICAgIC8vIGJ1dCB3ZSBhcmUgbm90IHVzaW5nIHRoaXMgZm9yIE1QNCB0cmFjayBJRHMuXG4gICAgICAgICAgICAgICAgdmlkZW9QaWQgPSBwYXJzZWRQSURzLnZpZGVvUGlkO1xuICAgICAgICAgICAgICAgIGlmICh2aWRlb1BpZCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIHZpZGVvVHJhY2sucGlkID0gdmlkZW9QaWQ7XG4gICAgICAgICAgICAgICAgICB2aWRlb1RyYWNrLnNlZ21lbnRDb2RlYyA9IHBhcnNlZFBJRHMuc2VnbWVudFZpZGVvQ29kZWM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF1ZGlvUGlkID0gcGFyc2VkUElEcy5hdWRpb1BpZDtcbiAgICAgICAgICAgICAgICBpZiAoYXVkaW9QaWQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICBhdWRpb1RyYWNrLnBpZCA9IGF1ZGlvUGlkO1xuICAgICAgICAgICAgICAgICAgYXVkaW9UcmFjay5zZWdtZW50Q29kZWMgPSBwYXJzZWRQSURzLnNlZ21lbnRBdWRpb0NvZGVjO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZDNQaWQgPSBwYXJzZWRQSURzLmlkM1BpZDtcbiAgICAgICAgICAgICAgICBpZiAoaWQzUGlkID4gMCkge1xuICAgICAgICAgICAgICAgICAgaWQzVHJhY2sucGlkID0gaWQzUGlkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodW5rbm93blBJRCAhPT0gbnVsbCAmJiAhcG10UGFyc2VkKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFwiTVBFRy1UUyBQTVQgZm91bmQgYXQgXCIgKyBzdGFydCArIFwiIGFmdGVyIHVua25vd24gUElEICdcIiArIHVua25vd25QSUQgKyBcIicuIEJhY2t0cmFja2luZyB0byBzeW5jIGJ5dGUgQFwiICsgc3luY09mZnNldCArIFwiIHRvIHBhcnNlIGFsbCBUUyBwYWNrZXRzLlwiKTtcbiAgICAgICAgICAgICAgICAgIHVua25vd25QSUQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgLy8gd2Ugc2V0IGl0IHRvIC0xODgsIHRoZSArPSAxODggaW4gdGhlIGZvciBsb29wIHdpbGwgcmVzZXQgc3RhcnQgdG8gMFxuICAgICAgICAgICAgICAgICAgc3RhcnQgPSBzeW5jT2Zmc2V0IC0gMTg4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwbXRQYXJzZWQgPSB0aGlzLnBtdFBhcnNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMHgxMTpcbiAgICAgICAgICAgIGNhc2UgMHgxZmZmOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHVua25vd25QSUQgPSBwaWQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0c1BhY2tldEVycm9ycysrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodHNQYWNrZXRFcnJvcnMgPiAwKSB7XG4gICAgICAgIGVtaXRQYXJzaW5nRXJyb3IodGhpcy5vYnNlcnZlciwgbmV3IEVycm9yKFwiRm91bmQgXCIgKyB0c1BhY2tldEVycm9ycyArIFwiIFRTIHBhY2tldC9zIHRoYXQgZG8gbm90IHN0YXJ0IHdpdGggMHg0N1wiKSwgdW5kZWZpbmVkLCB0aGlzLmxvZ2dlcik7XG4gICAgICB9XG4gICAgICB2aWRlb1RyYWNrLnBlc0RhdGEgPSB2aWRlb0RhdGE7XG4gICAgICBhdWRpb1RyYWNrLnBlc0RhdGEgPSBhdWRpb0RhdGE7XG4gICAgICBpZDNUcmFjay5wZXNEYXRhID0gaWQzRGF0YTtcbiAgICAgIHZhciBkZW11eFJlc3VsdCA9IHtcbiAgICAgICAgYXVkaW9UcmFjazogYXVkaW9UcmFjayxcbiAgICAgICAgdmlkZW9UcmFjazogdmlkZW9UcmFjayxcbiAgICAgICAgaWQzVHJhY2s6IGlkM1RyYWNrLFxuICAgICAgICB0ZXh0VHJhY2s6IHRleHRUcmFja1xuICAgICAgfTtcbiAgICAgIGlmIChmbHVzaCkge1xuICAgICAgICB0aGlzLmV4dHJhY3RSZW1haW5pbmdTYW1wbGVzKGRlbXV4UmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZW11eFJlc3VsdDtcbiAgICB9O1xuICAgIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgdmFyIHJlbWFpbmRlckRhdGEgPSB0aGlzLnJlbWFpbmRlckRhdGE7XG4gICAgICB0aGlzLnJlbWFpbmRlckRhdGEgPSBudWxsO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmIChyZW1haW5kZXJEYXRhKSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuZGVtdXgocmVtYWluZGVyRGF0YSwgLTEsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICB2aWRlb1RyYWNrOiB0aGlzLl92aWRlb1RyYWNrLFxuICAgICAgICAgIGF1ZGlvVHJhY2s6IHRoaXMuX2F1ZGlvVHJhY2ssXG4gICAgICAgICAgaWQzVHJhY2s6IHRoaXMuX2lkM1RyYWNrLFxuICAgICAgICAgIHRleHRUcmFjazogdGhpcy5fdHh0VHJhY2tcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZXh0cmFjdFJlbWFpbmluZ1NhbXBsZXMocmVzdWx0KTtcbiAgICAgIGlmICh0aGlzLnNhbXBsZUFlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0KHJlc3VsdCwgdGhpcy5zYW1wbGVBZXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIF9wcm90by5leHRyYWN0UmVtYWluaW5nU2FtcGxlcyA9IGZ1bmN0aW9uIGV4dHJhY3RSZW1haW5pbmdTYW1wbGVzKGRlbXV4UmVzdWx0KSB7XG4gICAgICB2YXIgYXVkaW9UcmFjayA9IGRlbXV4UmVzdWx0LmF1ZGlvVHJhY2ssXG4gICAgICAgIHZpZGVvVHJhY2sgPSBkZW11eFJlc3VsdC52aWRlb1RyYWNrLFxuICAgICAgICBpZDNUcmFjayA9IGRlbXV4UmVzdWx0LmlkM1RyYWNrLFxuICAgICAgICB0ZXh0VHJhY2sgPSBkZW11eFJlc3VsdC50ZXh0VHJhY2s7XG4gICAgICB2YXIgdmlkZW9EYXRhID0gdmlkZW9UcmFjay5wZXNEYXRhO1xuICAgICAgdmFyIGF1ZGlvRGF0YSA9IGF1ZGlvVHJhY2sucGVzRGF0YTtcbiAgICAgIHZhciBpZDNEYXRhID0gaWQzVHJhY2sucGVzRGF0YTtcbiAgICAgIC8vIHRyeSB0byBwYXJzZSBsYXN0IFBFUyBwYWNrZXRzXG4gICAgICB2YXIgcGVzO1xuICAgICAgaWYgKHZpZGVvRGF0YSAmJiAocGVzID0gcGFyc2VQRVModmlkZW9EYXRhLCB0aGlzLmxvZ2dlcikpKSB7XG4gICAgICAgIGlmICh0aGlzLnZpZGVvUGFyc2VyID09PSBudWxsKSB7XG4gICAgICAgICAgc3dpdGNoICh2aWRlb1RyYWNrLnNlZ21lbnRDb2RlYykge1xuICAgICAgICAgICAgY2FzZSAnYXZjJzpcbiAgICAgICAgICAgICAgdGhpcy52aWRlb1BhcnNlciA9IG5ldyBBdmNWaWRlb1BhcnNlcigpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hldmMnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb1BhcnNlciA9IG5ldyBIZXZjVmlkZW9QYXJzZXIoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmlkZW9QYXJzZXIgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnZpZGVvUGFyc2VyLnBhcnNlUEVTKHZpZGVvVHJhY2ssIHRleHRUcmFjaywgcGVzLCB0cnVlKTtcbiAgICAgICAgICB2aWRlb1RyYWNrLnBlc0RhdGEgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlaXRoZXIgYXZjRGF0YSBudWxsIG9yIFBFUyB0cnVuY2F0ZWQsIGtlZXAgaXQgZm9yIG5leHQgZnJhZyBwYXJzaW5nXG4gICAgICAgIHZpZGVvVHJhY2sucGVzRGF0YSA9IHZpZGVvRGF0YTtcbiAgICAgIH1cbiAgICAgIGlmIChhdWRpb0RhdGEgJiYgKHBlcyA9IHBhcnNlUEVTKGF1ZGlvRGF0YSwgdGhpcy5sb2dnZXIpKSkge1xuICAgICAgICBzd2l0Y2ggKGF1ZGlvVHJhY2suc2VnbWVudENvZGVjKSB7XG4gICAgICAgICAgY2FzZSAnYWFjJzpcbiAgICAgICAgICAgIHRoaXMucGFyc2VBQUNQRVMoYXVkaW9UcmFjaywgcGVzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ21wMyc6XG4gICAgICAgICAgICB0aGlzLnBhcnNlTVBFR1BFUyhhdWRpb1RyYWNrLCBwZXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYWMzJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGhpcy5wYXJzZUFDM1BFUyhhdWRpb1RyYWNrLCBwZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYXVkaW9UcmFjay5wZXNEYXRhID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhdWRpb0RhdGEgIT0gbnVsbCAmJiBhdWRpb0RhdGEuc2l6ZSkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZygnbGFzdCBBQUMgUEVTIHBhY2tldCB0cnVuY2F0ZWQsbWlnaHQgb3ZlcmxhcCBiZXR3ZWVuIGZyYWdtZW50cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZWl0aGVyIGF1ZGlvRGF0YSBudWxsIG9yIFBFUyB0cnVuY2F0ZWQsIGtlZXAgaXQgZm9yIG5leHQgZnJhZyBwYXJzaW5nXG4gICAgICAgIGF1ZGlvVHJhY2sucGVzRGF0YSA9IGF1ZGlvRGF0YTtcbiAgICAgIH1cbiAgICAgIGlmIChpZDNEYXRhICYmIChwZXMgPSBwYXJzZVBFUyhpZDNEYXRhLCB0aGlzLmxvZ2dlcikpKSB7XG4gICAgICAgIHRoaXMucGFyc2VJRDNQRVMoaWQzVHJhY2ssIHBlcyk7XG4gICAgICAgIGlkM1RyYWNrLnBlc0RhdGEgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZWl0aGVyIGlkM0RhdGEgbnVsbCBvciBQRVMgdHJ1bmNhdGVkLCBrZWVwIGl0IGZvciBuZXh0IGZyYWcgcGFyc2luZ1xuICAgICAgICBpZDNUcmFjay5wZXNEYXRhID0gaWQzRGF0YTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5kZW11eFNhbXBsZUFlcyA9IGZ1bmN0aW9uIGRlbXV4U2FtcGxlQWVzKGRhdGEsIGtleURhdGEsIHRpbWVPZmZzZXQpIHtcbiAgICAgIHZhciBkZW11eFJlc3VsdCA9IHRoaXMuZGVtdXgoZGF0YSwgdGltZU9mZnNldCwgdHJ1ZSwgIXRoaXMuY29uZmlnLnByb2dyZXNzaXZlKTtcbiAgICAgIHZhciBzYW1wbGVBZXMgPSB0aGlzLnNhbXBsZUFlcyA9IG5ldyBTYW1wbGVBZXNEZWNyeXB0ZXIodGhpcy5vYnNlcnZlciwgdGhpcy5jb25maWcsIGtleURhdGEpO1xuICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdChkZW11eFJlc3VsdCwgc2FtcGxlQWVzKTtcbiAgICB9O1xuICAgIF9wcm90by5kZWNyeXB0ID0gZnVuY3Rpb24gZGVjcnlwdChkZW11eFJlc3VsdCwgc2FtcGxlQWVzKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIGF1ZGlvVHJhY2sgPSBkZW11eFJlc3VsdC5hdWRpb1RyYWNrLFxuICAgICAgICAgIHZpZGVvVHJhY2sgPSBkZW11eFJlc3VsdC52aWRlb1RyYWNrO1xuICAgICAgICBpZiAoYXVkaW9UcmFjay5zYW1wbGVzICYmIGF1ZGlvVHJhY2suc2VnbWVudENvZGVjID09PSAnYWFjJykge1xuICAgICAgICAgIHNhbXBsZUFlcy5kZWNyeXB0QWFjU2FtcGxlcyhhdWRpb1RyYWNrLnNhbXBsZXMsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh2aWRlb1RyYWNrLnNhbXBsZXMpIHtcbiAgICAgICAgICAgICAgc2FtcGxlQWVzLmRlY3J5cHRBdmNTYW1wbGVzKHZpZGVvVHJhY2suc2FtcGxlcywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoZGVtdXhSZXN1bHQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoZGVtdXhSZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHZpZGVvVHJhY2suc2FtcGxlcykge1xuICAgICAgICAgIHNhbXBsZUFlcy5kZWNyeXB0QXZjU2FtcGxlcyh2aWRlb1RyYWNrLnNhbXBsZXMsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlc29sdmUoZGVtdXhSZXN1bHQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIGlmICh0aGlzLm9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICB9XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLmNvbmZpZyA9IHRoaXMubG9nZ2VyID0gdGhpcy5vYnNlcnZlciA9IG51bGw7XG4gICAgICB0aGlzLmFhY092ZXJGbG93ID0gdGhpcy52aWRlb1BhcnNlciA9IHRoaXMucmVtYWluZGVyRGF0YSA9IHRoaXMuc2FtcGxlQWVzID0gbnVsbDtcbiAgICAgIHRoaXMuX3ZpZGVvVHJhY2sgPSB0aGlzLl9hdWRpb1RyYWNrID0gdGhpcy5faWQzVHJhY2sgPSB0aGlzLl90eHRUcmFjayA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIF9wcm90by5wYXJzZUFBQ1BFUyA9IGZ1bmN0aW9uIHBhcnNlQUFDUEVTKHRyYWNrLCBwZXMpIHtcbiAgICAgIHZhciBzdGFydE9mZnNldCA9IDA7XG4gICAgICB2YXIgYWFjT3ZlckZsb3cgPSB0aGlzLmFhY092ZXJGbG93O1xuICAgICAgdmFyIGRhdGEgPSBwZXMuZGF0YTtcbiAgICAgIGlmIChhYWNPdmVyRmxvdykge1xuICAgICAgICB0aGlzLmFhY092ZXJGbG93ID0gbnVsbDtcbiAgICAgICAgdmFyIGZyYW1lTWlzc2luZ0J5dGVzID0gYWFjT3ZlckZsb3cubWlzc2luZztcbiAgICAgICAgdmFyIHNhbXBsZUxlbmd0aCA9IGFhY092ZXJGbG93LnNhbXBsZS51bml0LmJ5dGVMZW5ndGg7XG4gICAgICAgIC8vIGxvZ2dlci5sb2coYEFBQzogYXBwZW5kIG92ZXJmbG93aW5nICR7c2FtcGxlTGVuZ3RofSBieXRlcyB0byBiZWdpbm5pbmcgb2YgbmV3IFBFU2ApO1xuICAgICAgICBpZiAoZnJhbWVNaXNzaW5nQnl0ZXMgPT09IC0xKSB7XG4gICAgICAgICAgZGF0YSA9IGFwcGVuZFVpbnQ4QXJyYXkoYWFjT3ZlckZsb3cuc2FtcGxlLnVuaXQsIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBmcmFtZU92ZXJmbG93Qnl0ZXMgPSBzYW1wbGVMZW5ndGggLSBmcmFtZU1pc3NpbmdCeXRlcztcbiAgICAgICAgICBhYWNPdmVyRmxvdy5zYW1wbGUudW5pdC5zZXQoZGF0YS5zdWJhcnJheSgwLCBmcmFtZU1pc3NpbmdCeXRlcyksIGZyYW1lT3ZlcmZsb3dCeXRlcyk7XG4gICAgICAgICAgdHJhY2suc2FtcGxlcy5wdXNoKGFhY092ZXJGbG93LnNhbXBsZSk7XG4gICAgICAgICAgc3RhcnRPZmZzZXQgPSBhYWNPdmVyRmxvdy5taXNzaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBsb29rIGZvciBBRFRTIGhlYWRlciAoMHhGRkZ4KVxuICAgICAgdmFyIG9mZnNldDtcbiAgICAgIHZhciBsZW47XG4gICAgICBmb3IgKG9mZnNldCA9IHN0YXJ0T2Zmc2V0LCBsZW4gPSBkYXRhLmxlbmd0aDsgb2Zmc2V0IDwgbGVuIC0gMTsgb2Zmc2V0KyspIHtcbiAgICAgICAgaWYgKGlzSGVhZGVyJDEoZGF0YSwgb2Zmc2V0KSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBpZiBBRFRTIGhlYWRlciBkb2VzIG5vdCBzdGFydCBzdHJhaWdodCBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIFBFUyBwYXlsb2FkLCByYWlzZSBhbiBlcnJvclxuICAgICAgaWYgKG9mZnNldCAhPT0gc3RhcnRPZmZzZXQpIHtcbiAgICAgICAgdmFyIHJlYXNvbjtcbiAgICAgICAgdmFyIHJlY292ZXJhYmxlID0gb2Zmc2V0IDwgbGVuIC0gMTtcbiAgICAgICAgaWYgKHJlY292ZXJhYmxlKSB7XG4gICAgICAgICAgcmVhc29uID0gXCJBQUMgUEVTIGRpZCBub3Qgc3RhcnQgd2l0aCBBRFRTIGhlYWRlcixvZmZzZXQ6XCIgKyBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVhc29uID0gJ05vIEFEVFMgaGVhZGVyIGZvdW5kIGluIEFBQyBQRVMnO1xuICAgICAgICB9XG4gICAgICAgIGVtaXRQYXJzaW5nRXJyb3IodGhpcy5vYnNlcnZlciwgbmV3IEVycm9yKHJlYXNvbiksIHJlY292ZXJhYmxlLCB0aGlzLmxvZ2dlcik7XG4gICAgICAgIGlmICghcmVjb3ZlcmFibGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGluaXRUcmFja0NvbmZpZyh0cmFjaywgdGhpcy5vYnNlcnZlciwgZGF0YSwgb2Zmc2V0LCB0aGlzLmF1ZGlvQ29kZWMpO1xuICAgICAgdmFyIHB0cztcbiAgICAgIGlmIChwZXMucHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHRzID0gcGVzLnB0cztcbiAgICAgIH0gZWxzZSBpZiAoYWFjT3ZlckZsb3cpIHtcbiAgICAgICAgLy8gaWYgbGFzdCBBQUMgZnJhbWUgaXMgb3ZlcmZsb3dpbmcsIHdlIHNob3VsZCBlbnN1cmUgdGltZXN0YW1wcyBhcmUgY29udGlndW91czpcbiAgICAgICAgLy8gZmlyc3Qgc2FtcGxlIFBUUyBzaG91bGQgYmUgZXF1YWwgdG8gbGFzdCBzYW1wbGUgUFRTICsgZnJhbWVEdXJhdGlvblxuICAgICAgICB2YXIgZnJhbWVEdXJhdGlvbiA9IGdldEZyYW1lRHVyYXRpb24odHJhY2suc2FtcGxlcmF0ZSk7XG4gICAgICAgIHB0cyA9IGFhY092ZXJGbG93LnNhbXBsZS5wdHMgKyBmcmFtZUR1cmF0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybignW3RzZGVtdXhlcl06IEFBQyBQRVMgdW5rbm93biBQVFMnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBzY2FuIGZvciBhYWMgc2FtcGxlc1xuICAgICAgdmFyIGZyYW1lSW5kZXggPSAwO1xuICAgICAgdmFyIGZyYW1lO1xuICAgICAgd2hpbGUgKG9mZnNldCA8IGxlbikge1xuICAgICAgICBmcmFtZSA9IGFwcGVuZEZyYW1lJDEodHJhY2ssIGRhdGEsIG9mZnNldCwgcHRzLCBmcmFtZUluZGV4KTtcbiAgICAgICAgb2Zmc2V0ICs9IGZyYW1lLmxlbmd0aDtcbiAgICAgICAgaWYgKCFmcmFtZS5taXNzaW5nKSB7XG4gICAgICAgICAgZnJhbWVJbmRleCsrO1xuICAgICAgICAgIGZvciAoOyBvZmZzZXQgPCBsZW4gLSAxOyBvZmZzZXQrKykge1xuICAgICAgICAgICAgaWYgKGlzSGVhZGVyJDEoZGF0YSwgb2Zmc2V0KSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hYWNPdmVyRmxvdyA9IGZyYW1lO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ucGFyc2VNUEVHUEVTID0gZnVuY3Rpb24gcGFyc2VNUEVHUEVTKHRyYWNrLCBwZXMpIHtcbiAgICAgIHZhciBkYXRhID0gcGVzLmRhdGE7XG4gICAgICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgICB2YXIgZnJhbWVJbmRleCA9IDA7XG4gICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgIHZhciBwdHMgPSBwZXMucHRzO1xuICAgICAgaWYgKHB0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ1t0c2RlbXV4ZXJdOiBNUEVHIFBFUyB1bmtub3duIFBUUycpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3aGlsZSAob2Zmc2V0IDwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc0hlYWRlcihkYXRhLCBvZmZzZXQpKSB7XG4gICAgICAgICAgdmFyIGZyYW1lID0gYXBwZW5kRnJhbWUodHJhY2ssIGRhdGEsIG9mZnNldCwgcHRzLCBmcmFtZUluZGV4KTtcbiAgICAgICAgICBpZiAoZnJhbWUpIHtcbiAgICAgICAgICAgIG9mZnNldCArPSBmcmFtZS5sZW5ndGg7XG4gICAgICAgICAgICBmcmFtZUluZGV4Kys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGxvZ2dlci5sb2coJ1VuYWJsZSB0byBwYXJzZSBNcGVnIGF1ZGlvIGZyYW1lJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbm90aGluZyBmb3VuZCwga2VlcCBsb29raW5nXG4gICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5wYXJzZUFDM1BFUyA9IGZ1bmN0aW9uIHBhcnNlQUMzUEVTKHRyYWNrLCBwZXMpIHtcbiAgICAgIHtcbiAgICAgICAgdmFyIGRhdGEgPSBwZXMuZGF0YTtcbiAgICAgICAgdmFyIHB0cyA9IHBlcy5wdHM7XG4gICAgICAgIGlmIChwdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ1t0c2RlbXV4ZXJdOiBBQzMgUEVTIHVua25vd24gUFRTJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgdmFyIGZyYW1lSW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIHBhcnNlZDtcbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IGxlbmd0aCAmJiAocGFyc2VkID0gX2FwcGVuZEZyYW1lKHRyYWNrLCBkYXRhLCBvZmZzZXQsIHB0cywgZnJhbWVJbmRleCsrKSkgPiAwKSB7XG4gICAgICAgICAgb2Zmc2V0ICs9IHBhcnNlZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnBhcnNlSUQzUEVTID0gZnVuY3Rpb24gcGFyc2VJRDNQRVMoaWQzVHJhY2ssIHBlcykge1xuICAgICAgaWYgKHBlcy5wdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdbdHNkZW11eGVyXTogSUQzIFBFUyB1bmtub3duIFBUUycpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaWQzU2FtcGxlID0gX2V4dGVuZHMoe30sIHBlcywge1xuICAgICAgICB0eXBlOiB0aGlzLl92aWRlb1RyYWNrID8gTWV0YWRhdGFTY2hlbWEuZW1zZyA6IE1ldGFkYXRhU2NoZW1hLmF1ZGlvSWQzLFxuICAgICAgICBkdXJhdGlvbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgICB9KTtcbiAgICAgIGlkM1RyYWNrLnNhbXBsZXMucHVzaChpZDNTYW1wbGUpO1xuICAgIH07XG4gICAgcmV0dXJuIFRTRGVtdXhlcjtcbiAgfSgpO1xuICBmdW5jdGlvbiBwYXJzZVBJRChkYXRhLCBvZmZzZXQpIHtcbiAgICAvLyBwaWQgaXMgYSAxMy1iaXQgZmllbGQgc3RhcnRpbmcgYXQgdGhlIGxhc3QgYml0IG9mIFRTWzFdXG4gICAgcmV0dXJuICgoZGF0YVtvZmZzZXQgKyAxXSAmIDB4MWYpIDw8IDgpICsgZGF0YVtvZmZzZXQgKyAyXTtcbiAgfVxuICBmdW5jdGlvbiBwYXJzZVBBVChkYXRhLCBvZmZzZXQpIHtcbiAgICAvLyBza2lwIHRoZSBQU0kgaGVhZGVyIGFuZCBwYXJzZSB0aGUgZmlyc3QgUE1UIGVudHJ5XG4gICAgcmV0dXJuIChkYXRhW29mZnNldCArIDEwXSAmIDB4MWYpIDw8IDggfCBkYXRhW29mZnNldCArIDExXTtcbiAgfVxuICBmdW5jdGlvbiBwYXJzZVBNVChkYXRhLCBvZmZzZXQsIHR5cGVTdXBwb3J0ZWQsIGlzU2FtcGxlQWVzLCBvYnNlcnZlciwgbG9nZ2VyKSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIGF1ZGlvUGlkOiAtMSxcbiAgICAgIHZpZGVvUGlkOiAtMSxcbiAgICAgIGlkM1BpZDogLTEsXG4gICAgICBzZWdtZW50VmlkZW9Db2RlYzogJ2F2YycsXG4gICAgICBzZWdtZW50QXVkaW9Db2RlYzogJ2FhYydcbiAgICB9O1xuICAgIHZhciBzZWN0aW9uTGVuZ3RoID0gKGRhdGFbb2Zmc2V0ICsgMV0gJiAweDBmKSA8PCA4IHwgZGF0YVtvZmZzZXQgKyAyXTtcbiAgICB2YXIgdGFibGVFbmQgPSBvZmZzZXQgKyAzICsgc2VjdGlvbkxlbmd0aCAtIDQ7XG4gICAgLy8gdG8gZGV0ZXJtaW5lIHdoZXJlIHRoZSB0YWJsZSBpcywgd2UgaGF2ZSB0byBmaWd1cmUgb3V0IGhvd1xuICAgIC8vIGxvbmcgdGhlIHByb2dyYW0gaW5mbyBkZXNjcmlwdG9ycyBhcmVcbiAgICB2YXIgcHJvZ3JhbUluZm9MZW5ndGggPSAoZGF0YVtvZmZzZXQgKyAxMF0gJiAweDBmKSA8PCA4IHwgZGF0YVtvZmZzZXQgKyAxMV07XG4gICAgLy8gYWR2YW5jZSB0aGUgb2Zmc2V0IHRvIHRoZSBmaXJzdCBlbnRyeSBpbiB0aGUgbWFwcGluZyB0YWJsZVxuICAgIG9mZnNldCArPSAxMiArIHByb2dyYW1JbmZvTGVuZ3RoO1xuICAgIHdoaWxlIChvZmZzZXQgPCB0YWJsZUVuZCkge1xuICAgICAgdmFyIHBpZCA9IHBhcnNlUElEKGRhdGEsIG9mZnNldCk7XG4gICAgICB2YXIgZXNJbmZvTGVuZ3RoID0gKGRhdGFbb2Zmc2V0ICsgM10gJiAweDBmKSA8PCA4IHwgZGF0YVtvZmZzZXQgKyA0XTtcbiAgICAgIHN3aXRjaCAoZGF0YVtvZmZzZXRdKSB7XG4gICAgICAgIGNhc2UgMHhjZjpcbiAgICAgICAgICAvLyBTQU1QTEUtQUVTIEFBQ1xuICAgICAgICAgIGlmICghaXNTYW1wbGVBZXMpIHtcbiAgICAgICAgICAgIGxvZ0VuY3J5cHRlZFNhbXBsZXNGb3VuZEluVW5lbmNyeXB0ZWRTdHJlYW0oJ0FEVFMgQUFDJywgbG9nZ2VyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlIDB4MGY6XG4gICAgICAgICAgLy8gSVNPL0lFQyAxMzgxOC03IEFEVFMgQUFDIChNUEVHLTIgbG93ZXIgYml0LXJhdGUgYXVkaW8pXG4gICAgICAgICAgLy8gbG9nZ2VyLmxvZygnQUFDIFBJRDonICArIHBpZCk7XG4gICAgICAgICAgaWYgKHJlc3VsdC5hdWRpb1BpZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hdWRpb1BpZCA9IHBpZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLy8gUGFja2V0aXplZCBtZXRhZGF0YSAoSUQzKVxuICAgICAgICBjYXNlIDB4MTU6XG4gICAgICAgICAgLy8gbG9nZ2VyLmxvZygnSUQzIFBJRDonICArIHBpZCk7XG4gICAgICAgICAgaWYgKHJlc3VsdC5pZDNQaWQgPT09IC0xKSB7XG4gICAgICAgICAgICByZXN1bHQuaWQzUGlkID0gcGlkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAweGRiOlxuICAgICAgICAgIC8vIFNBTVBMRS1BRVMgQVZDXG4gICAgICAgICAgaWYgKCFpc1NhbXBsZUFlcykge1xuICAgICAgICAgICAgbG9nRW5jcnlwdGVkU2FtcGxlc0ZvdW5kSW5VbmVuY3J5cHRlZFN0cmVhbSgnSC4yNjQnLCBsb2dnZXIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgMHgxYjpcbiAgICAgICAgICAvLyBJVFUtVCBSZWMuIEguMjY0IGFuZCBJU08vSUVDIDE0NDk2LTEwIChsb3dlciBiaXQtcmF0ZSB2aWRlbylcbiAgICAgICAgICAvLyBsb2dnZXIubG9nKCdBVkMgUElEOicgICsgcGlkKTtcbiAgICAgICAgICBpZiAocmVzdWx0LnZpZGVvUGlkID09PSAtMSkge1xuICAgICAgICAgICAgcmVzdWx0LnZpZGVvUGlkID0gcGlkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAvLyBJU08vSUVDIDExMTcyLTMgKE1QRUctMSBhdWRpbylcbiAgICAgICAgLy8gb3IgSVNPL0lFQyAxMzgxOC0zIChNUEVHLTIgaGFsdmVkIHNhbXBsZSByYXRlIGF1ZGlvKVxuICAgICAgICBjYXNlIDB4MDM6XG4gICAgICAgIGNhc2UgMHgwNDpcbiAgICAgICAgICAvLyBsb2dnZXIubG9nKCdNUEVHIFBJRDonICArIHBpZCk7XG4gICAgICAgICAgaWYgKCF0eXBlU3VwcG9ydGVkLm1wZWcgJiYgIXR5cGVTdXBwb3J0ZWQubXAzKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKCdNUEVHIGF1ZGlvIGZvdW5kLCBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlcicpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmF1ZGlvUGlkID09PSAtMSkge1xuICAgICAgICAgICAgcmVzdWx0LmF1ZGlvUGlkID0gcGlkO1xuICAgICAgICAgICAgcmVzdWx0LnNlZ21lbnRBdWRpb0NvZGVjID0gJ21wMyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDB4YzE6XG4gICAgICAgICAgLy8gU0FNUExFLUFFUyBBQzNcbiAgICAgICAgICBpZiAoIWlzU2FtcGxlQWVzKSB7XG4gICAgICAgICAgICBsb2dFbmNyeXB0ZWRTYW1wbGVzRm91bmRJblVuZW5jcnlwdGVkU3RyZWFtKCdBQy0zJywgbG9nZ2VyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlIDB4ODE6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKCF0eXBlU3VwcG9ydGVkLmFjMykge1xuICAgICAgICAgICAgICBsb2dnZXIubG9nKCdBQy0zIGF1ZGlvIGZvdW5kLCBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlcicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuYXVkaW9QaWQgPT09IC0xKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5hdWRpb1BpZCA9IHBpZDtcbiAgICAgICAgICAgICAgcmVzdWx0LnNlZ21lbnRBdWRpb0NvZGVjID0gJ2FjMyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDB4MDY6XG4gICAgICAgICAgLy8gc3RyZWFtX3R5cGUgNiBjYW4gbWVhbiBhIGxvdCBvZiBkaWZmZXJlbnQgdGhpbmdzIGluIGNhc2Ugb2YgRFZCLlxuICAgICAgICAgIC8vIFdlIG5lZWQgdG8gbG9vayBhdCB0aGUgZGVzY3JpcHRvcnMuIFJpZ2h0IG5vdywgd2UncmUgb25seSBpbnRlcmVzdGVkXG4gICAgICAgICAgLy8gaW4gQUMtMyBhdWRpbywgc28gd2UgZG8gdGhlIGRlc2NyaXB0b3IgcGFyc2luZyBvbmx5IHdoZW4gd2UgZG9uJ3QgaGF2ZVxuICAgICAgICAgIC8vIGFuIGF1ZGlvIFBJRCB5ZXQuXG4gICAgICAgICAgaWYgKHJlc3VsdC5hdWRpb1BpZCA9PT0gLTEgJiYgZXNJbmZvTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHBhcnNlUG9zID0gb2Zmc2V0ICsgNTtcbiAgICAgICAgICAgIHZhciByZW1haW5pbmcgPSBlc0luZm9MZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAocmVtYWluaW5nID4gMikge1xuICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvcklkID0gZGF0YVtwYXJzZVBvc107XG4gICAgICAgICAgICAgIHN3aXRjaCAoZGVzY3JpcHRvcklkKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAweDZhOlxuICAgICAgICAgICAgICAgICAgLy8gRFZCIERlc2NyaXB0b3IgZm9yIEFDLTNcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVTdXBwb3J0ZWQuYWMzICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZygnQUMtMyBhdWRpbyBmb3VuZCwgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXIgZm9yIG5vdycpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hdWRpb1BpZCA9IHBpZDtcbiAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc2VnbWVudEF1ZGlvQ29kZWMgPSAnYWMzJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3JMZW4gPSBkYXRhW3BhcnNlUG9zICsgMV0gKyAyO1xuICAgICAgICAgICAgICBwYXJzZVBvcyArPSBkZXNjcmlwdG9yTGVuO1xuICAgICAgICAgICAgICByZW1haW5pbmcgLT0gZGVzY3JpcHRvckxlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHhjMjogLy8gU0FNUExFLUFFUyBFQzNcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlIDB4ODc6XG4gICAgICAgICAgZW1pdFBhcnNpbmdFcnJvcihvYnNlcnZlciwgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBFQy0zIGluIE0yVFMgZm91bmQnKSwgdW5kZWZpbmVkLCBsb2dnZXIpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgMHgyNDpcbiAgICAgICAgICAvLyBJVFUtVCBSZWMuIEguMjY1IGFuZCBJU08vSUVDIDIzMDA4LTIgKEhFVkMpXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC52aWRlb1BpZCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgcmVzdWx0LnZpZGVvUGlkID0gcGlkO1xuICAgICAgICAgICAgICByZXN1bHQuc2VnbWVudFZpZGVvQ29kZWMgPSAnaGV2Yyc7XG4gICAgICAgICAgICAgIGxvZ2dlci5sb2coJ0hFVkMgaW4gTTJUUyBmb3VuZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIG1vdmUgdG8gdGhlIG5leHQgdGFibGUgZW50cnlcbiAgICAgIC8vIHNraXAgcGFzdCB0aGUgZWxlbWVudGFyeSBzdHJlYW0gZGVzY3JpcHRvcnMsIGlmIHByZXNlbnRcbiAgICAgIG9mZnNldCArPSBlc0luZm9MZW5ndGggKyA1O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGZ1bmN0aW9uIGVtaXRQYXJzaW5nRXJyb3Iob2JzZXJ2ZXIsIGVycm9yLCBsZXZlbFJldHJ5LCBsb2dnZXIpIHtcbiAgICBsb2dnZXIud2FybihcInBhcnNpbmcgZXJyb3I6IFwiICsgZXJyb3IubWVzc2FnZSk7XG4gICAgb2JzZXJ2ZXIuZW1pdChFdmVudHMuRVJST1IsIEV2ZW50cy5FUlJPUiwge1xuICAgICAgdHlwZTogRXJyb3JUeXBlcy5NRURJQV9FUlJPUixcbiAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5GUkFHX1BBUlNJTkdfRVJST1IsXG4gICAgICBmYXRhbDogZmFsc2UsXG4gICAgICBsZXZlbFJldHJ5OiBsZXZlbFJldHJ5LFxuICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgcmVhc29uOiBlcnJvci5tZXNzYWdlXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gbG9nRW5jcnlwdGVkU2FtcGxlc0ZvdW5kSW5VbmVuY3J5cHRlZFN0cmVhbSh0eXBlLCBsb2dnZXIpIHtcbiAgICBsb2dnZXIubG9nKHR5cGUgKyBcIiB3aXRoIEFFUy0xMjgtQ0JDIGVuY3J5cHRpb24gZm91bmQgaW4gdW5lbmNyeXB0ZWQgc3RyZWFtXCIpO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlUEVTKHN0cmVhbSwgbG9nZ2VyKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBmcmFnO1xuICAgIHZhciBwZXNMZW47XG4gICAgdmFyIHBlc0hkckxlbjtcbiAgICB2YXIgcGVzUHRzO1xuICAgIHZhciBwZXNEdHM7XG4gICAgdmFyIGRhdGEgPSBzdHJlYW0uZGF0YTtcbiAgICAvLyBzYWZldHkgY2hlY2tcbiAgICBpZiAoIXN0cmVhbSB8fCBzdHJlYW0uc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gd2UgbWlnaHQgbmVlZCB1cCB0byAxOSBieXRlcyB0byByZWFkIFBFUyBoZWFkZXJcbiAgICAvLyBpZiBmaXJzdCBjaHVuayBvZiBkYXRhIGlzIGxlc3MgdGhhbiAxOSBieXRlcywgbGV0J3MgbWVyZ2UgaXQgd2l0aCBmb2xsb3dpbmcgb25lcyB1bnRpbCB3ZSBnZXQgMTkgYnl0ZXNcbiAgICAvLyB1c3VhbGx5IG9ubHkgb25lIG1lcmdlIGlzIG5lZWRlZCAoYW5kIHRoaXMgaXMgcmFyZSAuLi4pXG4gICAgd2hpbGUgKGRhdGFbMF0ubGVuZ3RoIDwgMTkgJiYgZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICBkYXRhWzBdID0gYXBwZW5kVWludDhBcnJheShkYXRhWzBdLCBkYXRhWzFdKTtcbiAgICAgIGRhdGEuc3BsaWNlKDEsIDEpO1xuICAgIH1cbiAgICAvLyByZXRyaWV2ZSBQVFMvRFRTIGZyb20gZmlyc3QgZnJhZ21lbnRcbiAgICBmcmFnID0gZGF0YVswXTtcbiAgICB2YXIgcGVzUHJlZml4ID0gKGZyYWdbMF0gPDwgMTYpICsgKGZyYWdbMV0gPDwgOCkgKyBmcmFnWzJdO1xuICAgIGlmIChwZXNQcmVmaXggPT09IDEpIHtcbiAgICAgIHBlc0xlbiA9IChmcmFnWzRdIDw8IDgpICsgZnJhZ1s1XTtcbiAgICAgIC8vIGlmIFBFUyBwYXJzZWQgbGVuZ3RoIGlzIG5vdCB6ZXJvIGFuZCBncmVhdGVyIHRoYW4gdG90YWwgcmVjZWl2ZWQgbGVuZ3RoLCBzdG9wIHBhcnNpbmcuIFBFUyBtaWdodCBiZSB0cnVuY2F0ZWRcbiAgICAgIC8vIG1pbnVzIDYgOiBQRVMgaGVhZGVyIHNpemVcbiAgICAgIGlmIChwZXNMZW4gJiYgcGVzTGVuID4gc3RyZWFtLnNpemUgLSA2KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHBlc0ZsYWdzID0gZnJhZ1s3XTtcbiAgICAgIGlmIChwZXNGbGFncyAmIDB4YzApIHtcbiAgICAgICAgLyogUEVTIGhlYWRlciBkZXNjcmliZWQgaGVyZSA6IGh0dHA6Ly9kdmQuc291cmNlZm9yZ2UubmV0L2R2ZGluZm8vcGVzLWhkci5odG1sXG4gICAgICAgICAgICBhcyBQVFMgLyBEVFMgaXMgMzMgYml0IHdlIGNhbm5vdCB1c2UgYml0d2lzZSBvcGVyYXRvciBpbiBKUyxcbiAgICAgICAgICAgIGFzIEJpdHdpc2Ugb3BlcmF0b3JzIHRyZWF0IHRoZWlyIG9wZXJhbmRzIGFzIGEgc2VxdWVuY2Ugb2YgMzIgYml0cyAqL1xuICAgICAgICBwZXNQdHMgPSAoZnJhZ1s5XSAmIDB4MGUpICogNTM2ODcwOTEyICtcbiAgICAgICAgLy8gMSA8PCAyOVxuICAgICAgICAoZnJhZ1sxMF0gJiAweGZmKSAqIDQxOTQzMDQgK1xuICAgICAgICAvLyAxIDw8IDIyXG4gICAgICAgIChmcmFnWzExXSAmIDB4ZmUpICogMTYzODQgK1xuICAgICAgICAvLyAxIDw8IDE0XG4gICAgICAgIChmcmFnWzEyXSAmIDB4ZmYpICogMTI4ICtcbiAgICAgICAgLy8gMSA8PCA3XG4gICAgICAgIChmcmFnWzEzXSAmIDB4ZmUpIC8gMjtcbiAgICAgICAgaWYgKHBlc0ZsYWdzICYgMHg0MCkge1xuICAgICAgICAgIHBlc0R0cyA9IChmcmFnWzE0XSAmIDB4MGUpICogNTM2ODcwOTEyICtcbiAgICAgICAgICAvLyAxIDw8IDI5XG4gICAgICAgICAgKGZyYWdbMTVdICYgMHhmZikgKiA0MTk0MzA0ICtcbiAgICAgICAgICAvLyAxIDw8IDIyXG4gICAgICAgICAgKGZyYWdbMTZdICYgMHhmZSkgKiAxNjM4NCArXG4gICAgICAgICAgLy8gMSA8PCAxNFxuICAgICAgICAgIChmcmFnWzE3XSAmIDB4ZmYpICogMTI4ICtcbiAgICAgICAgICAvLyAxIDw8IDdcbiAgICAgICAgICAoZnJhZ1sxOF0gJiAweGZlKSAvIDI7XG4gICAgICAgICAgaWYgKHBlc1B0cyAtIHBlc0R0cyA+IDYwICogOTAwMDApIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKE1hdGgucm91bmQoKHBlc1B0cyAtIHBlc0R0cykgLyA5MDAwMCkgKyBcInMgZGVsdGEgYmV0d2VlbiBQVFMgYW5kIERUUywgYWxpZ24gdGhlbVwiKTtcbiAgICAgICAgICAgIHBlc1B0cyA9IHBlc0R0cztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVzRHRzID0gcGVzUHRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwZXNIZHJMZW4gPSBmcmFnWzhdO1xuICAgICAgLy8gOSBieXRlcyA6IDYgYnl0ZXMgZm9yIFBFUyBoZWFkZXIgKyAzIGJ5dGVzIGZvciBQRVMgZXh0ZW5zaW9uXG4gICAgICB2YXIgcGF5bG9hZFN0YXJ0T2Zmc2V0ID0gcGVzSGRyTGVuICsgOTtcbiAgICAgIGlmIChzdHJlYW0uc2l6ZSA8PSBwYXlsb2FkU3RhcnRPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBzdHJlYW0uc2l6ZSAtPSBwYXlsb2FkU3RhcnRPZmZzZXQ7XG4gICAgICAvLyByZWFzc2VtYmxlIFBFUyBwYWNrZXRcbiAgICAgIHZhciBwZXNEYXRhID0gbmV3IFVpbnQ4QXJyYXkoc3RyZWFtLnNpemUpO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGRhdGFMZW4gPSBkYXRhLmxlbmd0aDsgaiA8IGRhdGFMZW47IGorKykge1xuICAgICAgICBmcmFnID0gZGF0YVtqXTtcbiAgICAgICAgdmFyIGxlbiA9IGZyYWcuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKHBheWxvYWRTdGFydE9mZnNldCkge1xuICAgICAgICAgIGlmIChwYXlsb2FkU3RhcnRPZmZzZXQgPiBsZW4pIHtcbiAgICAgICAgICAgIC8vIHRyaW0gZnVsbCBmcmFnIGlmIFBFUyBoZWFkZXIgYmlnZ2VyIHRoYW4gZnJhZ1xuICAgICAgICAgICAgcGF5bG9hZFN0YXJ0T2Zmc2V0IC09IGxlbjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0cmltIHBhcnRpYWwgZnJhZyBpZiBQRVMgaGVhZGVyIHNtYWxsZXIgdGhhbiBmcmFnXG4gICAgICAgICAgICBmcmFnID0gZnJhZy5zdWJhcnJheShwYXlsb2FkU3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgbGVuIC09IHBheWxvYWRTdGFydE9mZnNldDtcbiAgICAgICAgICAgIHBheWxvYWRTdGFydE9mZnNldCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBlc0RhdGEuc2V0KGZyYWcsIGkpO1xuICAgICAgICBpICs9IGxlbjtcbiAgICAgIH1cbiAgICAgIGlmIChwZXNMZW4pIHtcbiAgICAgICAgLy8gcGF5bG9hZCBzaXplIDogcmVtb3ZlIFBFUyBoZWFkZXIgKyBQRVMgZXh0ZW5zaW9uXG4gICAgICAgIHBlc0xlbiAtPSBwZXNIZHJMZW4gKyAzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogcGVzRGF0YSxcbiAgICAgICAgcHRzOiBwZXNQdHMsXG4gICAgICAgIGR0czogcGVzRHRzLFxuICAgICAgICBsZW46IHBlc0xlblxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogIEFBQyBoZWxwZXJcbiAgICovXG4gIHZhciBBQUMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFBQygpIHt9XG4gICAgQUFDLmdldFNpbGVudEZyYW1lID0gZnVuY3Rpb24gZ2V0U2lsZW50RnJhbWUoY29kZWMsIGNoYW5uZWxDb3VudCkge1xuICAgICAgc3dpdGNoIChjb2RlYykge1xuICAgICAgICBjYXNlICdtcDRhLjQwLjInOlxuICAgICAgICAgIGlmIChjaGFubmVsQ291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMywgMHg4MF0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MjEsIDB4MDAsIDB4NDksIDB4OTAsIDB4MDIsIDB4MTksIDB4MDAsIDB4MjMsIDB4ODBdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDhlXSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MCwgMHgyYywgMHg4MCwgMHgwOCwgMHgwMiwgMHgzOF0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA1KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MzhdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgyLCAweDMwLCAweDA0LCAweDk5LCAweDAwLCAweDIxLCAweDkwLCAweDAyLCAweDAwLCAweGIyLCAweDAwLCAweDIwLCAweDA4LCAweGUwXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBoYW5kbGUgSEUtQUFDIGJlbG93IChtcDRhLjQwLjUgLyBtcDRhLjQwLjI5KVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChjaGFubmVsQ291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIC8vIGZmbXBlZyAteSAtZiBsYXZmaSAtaSBcImFldmFsc3JjPTA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg0ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDFjLCAweDYsIDB4ZjEsIDB4YzEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICAgICAgICAvLyBmZm1wZWcgLXkgLWYgbGF2ZmkgLWkgXCJhZXZhbHNyYz0wfDA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlX3YyIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg1ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDAsIDB4OTUsIDB4MCwgMHg2LCAweGYxLCAweGExLCAweGEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWVdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMykge1xuICAgICAgICAgICAgLy8gZmZtcGVnIC15IC1mIGxhdmZpIC1pIFwiYWV2YWxzcmM9MHwwfDA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlX3YyIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg1ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDAsIDB4OTUsIDB4MCwgMHg2LCAweGYxLCAweGExLCAweGEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWVdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgcmV0dXJuIEFBQztcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBNUDQgQm94XG4gICAqL1xuXG4gIHZhciBVSU5UMzJfTUFYID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcbiAgdmFyIE1QNCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTVA0KCkge31cbiAgICBNUDQuaW5pdCA9IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICBNUDQudHlwZXMgPSB7XG4gICAgICAgIGF2YzE6IFtdLFxuICAgICAgICAvLyBjb2RpbmduYW1lXG4gICAgICAgIGF2Y0M6IFtdLFxuICAgICAgICBodmMxOiBbXSxcbiAgICAgICAgaHZjQzogW10sXG4gICAgICAgIGJ0cnQ6IFtdLFxuICAgICAgICBkaW5mOiBbXSxcbiAgICAgICAgZHJlZjogW10sXG4gICAgICAgIGVzZHM6IFtdLFxuICAgICAgICBmdHlwOiBbXSxcbiAgICAgICAgaGRscjogW10sXG4gICAgICAgIG1kYXQ6IFtdLFxuICAgICAgICBtZGhkOiBbXSxcbiAgICAgICAgbWRpYTogW10sXG4gICAgICAgIG1maGQ6IFtdLFxuICAgICAgICBtaW5mOiBbXSxcbiAgICAgICAgbW9vZjogW10sXG4gICAgICAgIG1vb3Y6IFtdLFxuICAgICAgICBtcDRhOiBbXSxcbiAgICAgICAgJy5tcDMnOiBbXSxcbiAgICAgICAgZGFjMzogW10sXG4gICAgICAgICdhYy0zJzogW10sXG4gICAgICAgIG12ZXg6IFtdLFxuICAgICAgICBtdmhkOiBbXSxcbiAgICAgICAgcGFzcDogW10sXG4gICAgICAgIHNkdHA6IFtdLFxuICAgICAgICBzdGJsOiBbXSxcbiAgICAgICAgc3RjbzogW10sXG4gICAgICAgIHN0c2M6IFtdLFxuICAgICAgICBzdHNkOiBbXSxcbiAgICAgICAgc3RzejogW10sXG4gICAgICAgIHN0dHM6IFtdLFxuICAgICAgICB0ZmR0OiBbXSxcbiAgICAgICAgdGZoZDogW10sXG4gICAgICAgIHRyYWY6IFtdLFxuICAgICAgICB0cmFrOiBbXSxcbiAgICAgICAgdHJ1bjogW10sXG4gICAgICAgIHRyZXg6IFtdLFxuICAgICAgICB0a2hkOiBbXSxcbiAgICAgICAgdm1oZDogW10sXG4gICAgICAgIHNtaGQ6IFtdXG4gICAgICB9O1xuICAgICAgdmFyIGk7XG4gICAgICBmb3IgKGkgaW4gTVA0LnR5cGVzKSB7XG4gICAgICAgIGlmIChNUDQudHlwZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICBNUDQudHlwZXNbaV0gPSBbaS5jaGFyQ29kZUF0KDApLCBpLmNoYXJDb2RlQXQoMSksIGkuY2hhckNvZGVBdCgyKSwgaS5jaGFyQ29kZUF0KDMpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHZpZGVvSGRsciA9IG5ldyBVaW50OEFycmF5KFsweDAwLFxuICAgICAgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyBwcmVfZGVmaW5lZFxuICAgICAgMHg3NiwgMHg2OSwgMHg2NCwgMHg2NSxcbiAgICAgIC8vIGhhbmRsZXJfdHlwZTogJ3ZpZGUnXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHJlc2VydmVkXG4gICAgICAweDU2LCAweDY5LCAweDY0LCAweDY1LCAweDZmLCAweDQ4LCAweDYxLCAweDZlLCAweDY0LCAweDZjLCAweDY1LCAweDcyLCAweDAwIC8vIG5hbWU6ICdWaWRlb0hhbmRsZXInXG4gICAgICBdKTtcbiAgICAgIHZhciBhdWRpb0hkbHIgPSBuZXcgVWludDhBcnJheShbMHgwMCxcbiAgICAgIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gcHJlX2RlZmluZWRcbiAgICAgIDB4NzMsIDB4NmYsIDB4NzUsIDB4NmUsXG4gICAgICAvLyBoYW5kbGVyX3R5cGU6ICdzb3VuJ1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyByZXNlcnZlZFxuICAgICAgMHg1MywgMHg2ZiwgMHg3NSwgMHg2ZSwgMHg2NCwgMHg0OCwgMHg2MSwgMHg2ZSwgMHg2NCwgMHg2YywgMHg2NSwgMHg3MiwgMHgwMCAvLyBuYW1lOiAnU291bmRIYW5kbGVyJ1xuICAgICAgXSk7XG4gICAgICBNUDQuSERMUl9UWVBFUyA9IHtcbiAgICAgICAgdmlkZW86IHZpZGVvSGRscixcbiAgICAgICAgYXVkaW86IGF1ZGlvSGRsclxuICAgICAgfTtcbiAgICAgIHZhciBkcmVmID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsXG4gICAgICAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSxcbiAgICAgIC8vIGVudHJ5X2NvdW50XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDBjLFxuICAgICAgLy8gZW50cnlfc2l6ZVxuICAgICAgMHg3NSwgMHg3MiwgMHg2YywgMHgyMCxcbiAgICAgIC8vICd1cmwnIHR5cGVcbiAgICAgIDB4MDAsXG4gICAgICAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDEgLy8gZW50cnlfZmxhZ3NcbiAgICAgIF0pO1xuICAgICAgdmFyIHN0Y28gPSBuZXcgVWludDhBcnJheShbMHgwMCxcbiAgICAgIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBlbnRyeV9jb3VudFxuICAgICAgXSk7XG4gICAgICBNUDQuU1RUUyA9IE1QNC5TVFNDID0gTVA0LlNUQ08gPSBzdGNvO1xuICAgICAgTVA0LlNUU1ogPSBuZXcgVWludDhBcnJheShbMHgwMCxcbiAgICAgIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHNhbXBsZV9zaXplXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIHNhbXBsZV9jb3VudFxuICAgICAgXSk7XG4gICAgICBNUDQuVk1IRCA9IG5ldyBVaW50OEFycmF5KFsweDAwLFxuICAgICAgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMSxcbiAgICAgIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLFxuICAgICAgLy8gZ3JhcGhpY3Ntb2RlXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIG9wY29sb3JcbiAgICAgIF0pO1xuICAgICAgTVA0LlNNSEQgPSBuZXcgVWludDhBcnJheShbMHgwMCxcbiAgICAgIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIC8vIGJhbGFuY2VcbiAgICAgIDB4MDAsIDB4MDAgLy8gcmVzZXJ2ZWRcbiAgICAgIF0pO1xuICAgICAgTVA0LlNUU0QgPSBuZXcgVWludDhBcnJheShbMHgwMCxcbiAgICAgIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxXSk7IC8vIGVudHJ5X2NvdW50XG5cbiAgICAgIHZhciBtYWpvckJyYW5kID0gbmV3IFVpbnQ4QXJyYXkoWzEwNSwgMTE1LCAxMTEsIDEwOV0pOyAvLyBpc29tXG4gICAgICB2YXIgYXZjMUJyYW5kID0gbmV3IFVpbnQ4QXJyYXkoWzk3LCAxMTgsIDk5LCA0OV0pOyAvLyBhdmMxXG4gICAgICB2YXIgbWlub3JWZXJzaW9uID0gbmV3IFVpbnQ4QXJyYXkoWzAsIDAsIDAsIDFdKTtcbiAgICAgIE1QNC5GVFlQID0gTVA0LmJveChNUDQudHlwZXMuZnR5cCwgbWFqb3JCcmFuZCwgbWlub3JWZXJzaW9uLCBtYWpvckJyYW5kLCBhdmMxQnJhbmQpO1xuICAgICAgTVA0LkRJTkYgPSBNUDQuYm94KE1QNC50eXBlcy5kaW5mLCBNUDQuYm94KE1QNC50eXBlcy5kcmVmLCBkcmVmKSk7XG4gICAgfTtcbiAgICBNUDQuYm94ID0gZnVuY3Rpb24gYm94KHR5cGUpIHtcbiAgICAgIHZhciBzaXplID0gODtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwYXlsb2FkID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgcGF5bG9hZFtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICB2YXIgaSA9IHBheWxvYWQubGVuZ3RoO1xuICAgICAgdmFyIGxlbiA9IGk7XG4gICAgICAvLyBjYWxjdWxhdGUgdGhlIHRvdGFsIHNpemUgd2UgbmVlZCB0byBhbGxvY2F0ZVxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBzaXplICs9IHBheWxvYWRbaV0uYnl0ZUxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICAgIHJlc3VsdFswXSA9IHNpemUgPj4gMjQgJiAweGZmO1xuICAgICAgcmVzdWx0WzFdID0gc2l6ZSA+PiAxNiAmIDB4ZmY7XG4gICAgICByZXN1bHRbMl0gPSBzaXplID4+IDggJiAweGZmO1xuICAgICAgcmVzdWx0WzNdID0gc2l6ZSAmIDB4ZmY7XG4gICAgICByZXN1bHQuc2V0KHR5cGUsIDQpO1xuICAgICAgLy8gY29weSB0aGUgcGF5bG9hZCBpbnRvIHRoZSByZXN1bHRcbiAgICAgIGZvciAoaSA9IDAsIHNpemUgPSA4OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgLy8gY29weSBwYXlsb2FkW2ldIGFycmF5IEAgb2Zmc2V0IHNpemVcbiAgICAgICAgcmVzdWx0LnNldChwYXlsb2FkW2ldLCBzaXplKTtcbiAgICAgICAgc2l6ZSArPSBwYXlsb2FkW2ldLmJ5dGVMZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgTVA0LmhkbHIgPSBmdW5jdGlvbiBoZGxyKHR5cGUpIHtcbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5oZGxyLCBNUDQuSERMUl9UWVBFU1t0eXBlXSk7XG4gICAgfTtcbiAgICBNUDQubWRhdCA9IGZ1bmN0aW9uIG1kYXQoZGF0YSkge1xuICAgICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm1kYXQsIGRhdGEpO1xuICAgIH07XG4gICAgTVA0Lm1kaGQgPSBmdW5jdGlvbiBtZGhkKHRpbWVzY2FsZSwgZHVyYXRpb24pIHtcbiAgICAgIGR1cmF0aW9uICo9IHRpbWVzY2FsZTtcbiAgICAgIHZhciB1cHBlcldvcmREdXJhdGlvbiA9IE1hdGguZmxvb3IoZHVyYXRpb24gLyAoVUlOVDMyX01BWCArIDEpKTtcbiAgICAgIHZhciBsb3dlcldvcmREdXJhdGlvbiA9IE1hdGguZmxvb3IoZHVyYXRpb24gJSAoVUlOVDMyX01BWCArIDEpKTtcbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tZGhkLCBuZXcgVWludDhBcnJheShbMHgwMSxcbiAgICAgIC8vIHZlcnNpb24gMVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAyLFxuICAgICAgLy8gY3JlYXRpb25fdGltZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMyxcbiAgICAgIC8vIG1vZGlmaWNhdGlvbl90aW1lXG4gICAgICB0aW1lc2NhbGUgPj4gMjQgJiAweGZmLCB0aW1lc2NhbGUgPj4gMTYgJiAweGZmLCB0aW1lc2NhbGUgPj4gOCAmIDB4ZmYsIHRpbWVzY2FsZSAmIDB4ZmYsXG4gICAgICAvLyB0aW1lc2NhbGVcbiAgICAgIHVwcGVyV29yZER1cmF0aW9uID4+IDI0LCB1cHBlcldvcmREdXJhdGlvbiA+PiAxNiAmIDB4ZmYsIHVwcGVyV29yZER1cmF0aW9uID4+IDggJiAweGZmLCB1cHBlcldvcmREdXJhdGlvbiAmIDB4ZmYsIGxvd2VyV29yZER1cmF0aW9uID4+IDI0LCBsb3dlcldvcmREdXJhdGlvbiA+PiAxNiAmIDB4ZmYsIGxvd2VyV29yZER1cmF0aW9uID4+IDggJiAweGZmLCBsb3dlcldvcmREdXJhdGlvbiAmIDB4ZmYsIDB4NTUsIDB4YzQsXG4gICAgICAvLyAndW5kJyBsYW5ndWFnZSAodW5kZXRlcm1pbmVkKVxuICAgICAgMHgwMCwgMHgwMF0pKTtcbiAgICB9O1xuICAgIE1QNC5tZGlhID0gZnVuY3Rpb24gbWRpYSh0cmFjaykge1xuICAgICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm1kaWEsIE1QNC5tZGhkKHRyYWNrLnRpbWVzY2FsZSB8fCAwLCB0cmFjay5kdXJhdGlvbiB8fCAwKSwgTVA0LmhkbHIodHJhY2sudHlwZSksIE1QNC5taW5mKHRyYWNrKSk7XG4gICAgfTtcbiAgICBNUDQubWZoZCA9IGZ1bmN0aW9uIG1maGQoc2VxdWVuY2VOdW1iZXIpIHtcbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tZmhkLCBuZXcgVWludDhBcnJheShbMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIGZsYWdzXG4gICAgICBzZXF1ZW5jZU51bWJlciA+PiAyNCwgc2VxdWVuY2VOdW1iZXIgPj4gMTYgJiAweGZmLCBzZXF1ZW5jZU51bWJlciA+PiA4ICYgMHhmZiwgc2VxdWVuY2VOdW1iZXIgJiAweGZmIC8vIHNlcXVlbmNlX251bWJlclxuICAgICAgXSkpO1xuICAgIH07XG4gICAgTVA0Lm1pbmYgPSBmdW5jdGlvbiBtaW5mKHRyYWNrKSB7XG4gICAgICBpZiAodHJhY2sudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubWluZiwgTVA0LmJveChNUDQudHlwZXMuc21oZCwgTVA0LlNNSEQpLCBNUDQuRElORiwgTVA0LnN0YmwodHJhY2spKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5taW5mLCBNUDQuYm94KE1QNC50eXBlcy52bWhkLCBNUDQuVk1IRCksIE1QNC5ESU5GLCBNUDQuc3RibCh0cmFjaykpO1xuICAgICAgfVxuICAgIH07XG4gICAgTVA0Lm1vb2YgPSBmdW5jdGlvbiBtb29mKHNuLCBiYXNlTWVkaWFEZWNvZGVUaW1lLCB0cmFjaykge1xuICAgICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm1vb2YsIE1QNC5tZmhkKHNuKSwgTVA0LnRyYWYodHJhY2ssIGJhc2VNZWRpYURlY29kZVRpbWUpKTtcbiAgICB9O1xuICAgIE1QNC5tb292ID0gZnVuY3Rpb24gbW9vdih0cmFja3MpIHtcbiAgICAgIHZhciBpID0gdHJhY2tzLmxlbmd0aDtcbiAgICAgIHZhciBib3hlcyA9IFtdO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBib3hlc1tpXSA9IE1QNC50cmFrKHRyYWNrc1tpXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gTVA0LmJveC5hcHBseShudWxsLCBbTVA0LnR5cGVzLm1vb3YsIE1QNC5tdmhkKHRyYWNrc1swXS50aW1lc2NhbGUgfHwgMCwgdHJhY2tzWzBdLmR1cmF0aW9uIHx8IDApXS5jb25jYXQoYm94ZXMpLmNvbmNhdChNUDQubXZleCh0cmFja3MpKSk7XG4gICAgfTtcbiAgICBNUDQubXZleCA9IGZ1bmN0aW9uIG12ZXgodHJhY2tzKSB7XG4gICAgICB2YXIgaSA9IHRyYWNrcy5sZW5ndGg7XG4gICAgICB2YXIgYm94ZXMgPSBbXTtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgYm94ZXNbaV0gPSBNUDQudHJleCh0cmFja3NbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1QNC5ib3guYXBwbHkobnVsbCwgW01QNC50eXBlcy5tdmV4XS5jb25jYXQoYm94ZXMpKTtcbiAgICB9O1xuICAgIE1QNC5tdmhkID0gZnVuY3Rpb24gbXZoZCh0aW1lc2NhbGUsIGR1cmF0aW9uKSB7XG4gICAgICBkdXJhdGlvbiAqPSB0aW1lc2NhbGU7XG4gICAgICB2YXIgdXBwZXJXb3JkRHVyYXRpb24gPSBNYXRoLmZsb29yKGR1cmF0aW9uIC8gKFVJTlQzMl9NQVggKyAxKSk7XG4gICAgICB2YXIgbG93ZXJXb3JkRHVyYXRpb24gPSBNYXRoLmZsb29yKGR1cmF0aW9uICUgKFVJTlQzMl9NQVggKyAxKSk7XG4gICAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShbMHgwMSxcbiAgICAgIC8vIHZlcnNpb24gMVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAyLFxuICAgICAgLy8gY3JlYXRpb25fdGltZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMyxcbiAgICAgIC8vIG1vZGlmaWNhdGlvbl90aW1lXG4gICAgICB0aW1lc2NhbGUgPj4gMjQgJiAweGZmLCB0aW1lc2NhbGUgPj4gMTYgJiAweGZmLCB0aW1lc2NhbGUgPj4gOCAmIDB4ZmYsIHRpbWVzY2FsZSAmIDB4ZmYsXG4gICAgICAvLyB0aW1lc2NhbGVcbiAgICAgIHVwcGVyV29yZER1cmF0aW9uID4+IDI0LCB1cHBlcldvcmREdXJhdGlvbiA+PiAxNiAmIDB4ZmYsIHVwcGVyV29yZER1cmF0aW9uID4+IDggJiAweGZmLCB1cHBlcldvcmREdXJhdGlvbiAmIDB4ZmYsIGxvd2VyV29yZER1cmF0aW9uID4+IDI0LCBsb3dlcldvcmREdXJhdGlvbiA+PiAxNiAmIDB4ZmYsIGxvd2VyV29yZER1cmF0aW9uID4+IDggJiAweGZmLCBsb3dlcldvcmREdXJhdGlvbiAmIDB4ZmYsIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsXG4gICAgICAvLyAxLjAgcmF0ZVxuICAgICAgMHgwMSwgMHgwMCxcbiAgICAgIC8vIDEuMCB2b2x1bWVcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyB0cmFuc2Zvcm1hdGlvbjogdW5pdHkgbWF0cml4XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gcHJlX2RlZmluZWRcbiAgICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYgLy8gbmV4dF90cmFja19JRFxuICAgICAgXSk7XG4gICAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubXZoZCwgYnl0ZXMpO1xuICAgIH07XG4gICAgTVA0LnNkdHAgPSBmdW5jdGlvbiBzZHRwKHRyYWNrKSB7XG4gICAgICB2YXIgc2FtcGxlcyA9IHRyYWNrLnNhbXBsZXMgfHwgW107XG4gICAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheSg0ICsgc2FtcGxlcy5sZW5ndGgpO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgZmxhZ3M7XG4gICAgICAvLyBsZWF2ZSB0aGUgZnVsbCBib3ggaGVhZGVyICg0IGJ5dGVzKSBhbGwgemVyb1xuICAgICAgLy8gd3JpdGUgdGhlIHNhbXBsZSB0YWJsZVxuICAgICAgZm9yIChpID0gMDsgaSA8IHNhbXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZmxhZ3MgPSBzYW1wbGVzW2ldLmZsYWdzO1xuICAgICAgICBieXRlc1tpICsgNF0gPSBmbGFncy5kZXBlbmRzT24gPDwgNCB8IGZsYWdzLmlzRGVwZW5kZWRPbiA8PCAyIHwgZmxhZ3MuaGFzUmVkdW5kYW5jeTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zZHRwLCBieXRlcyk7XG4gICAgfTtcbiAgICBNUDQuc3RibCA9IGZ1bmN0aW9uIHN0YmwodHJhY2spIHtcbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zdGJsLCBNUDQuc3RzZCh0cmFjayksIE1QNC5ib3goTVA0LnR5cGVzLnN0dHMsIE1QNC5TVFRTKSwgTVA0LmJveChNUDQudHlwZXMuc3RzYywgTVA0LlNUU0MpLCBNUDQuYm94KE1QNC50eXBlcy5zdHN6LCBNUDQuU1RTWiksIE1QNC5ib3goTVA0LnR5cGVzLnN0Y28sIE1QNC5TVENPKSk7XG4gICAgfTtcbiAgICBNUDQuYXZjMSA9IGZ1bmN0aW9uIGF2YzEodHJhY2spIHtcbiAgICAgIHZhciBzcHMgPSBbXTtcbiAgICAgIHZhciBwcHMgPSBbXTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGRhdGE7XG4gICAgICB2YXIgbGVuO1xuICAgICAgLy8gYXNzZW1ibGUgdGhlIFNQU3NcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRyYWNrLnNwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBkYXRhID0gdHJhY2suc3BzW2ldO1xuICAgICAgICBsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgIHNwcy5wdXNoKGxlbiA+Pj4gOCAmIDB4ZmYpO1xuICAgICAgICBzcHMucHVzaChsZW4gJiAweGZmKTtcblxuICAgICAgICAvLyBTUFNcbiAgICAgICAgc3BzID0gc3BzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkYXRhKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFzc2VtYmxlIHRoZSBQUFNzXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdHJhY2sucHBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRhdGEgPSB0cmFjay5wcHNbaV07XG4gICAgICAgIGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgcHBzLnB1c2gobGVuID4+PiA4ICYgMHhmZik7XG4gICAgICAgIHBwcy5wdXNoKGxlbiAmIDB4ZmYpO1xuICAgICAgICBwcHMgPSBwcHMuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRhdGEpKTtcbiAgICAgIH1cbiAgICAgIHZhciBhdmNjID0gTVA0LmJveChNUDQudHlwZXMuYXZjQywgbmV3IFVpbnQ4QXJyYXkoWzB4MDEsXG4gICAgICAvLyB2ZXJzaW9uXG4gICAgICBzcHNbM10sXG4gICAgICAvLyBwcm9maWxlXG4gICAgICBzcHNbNF0sXG4gICAgICAvLyBwcm9maWxlIGNvbXBhdFxuICAgICAgc3BzWzVdLFxuICAgICAgLy8gbGV2ZWxcbiAgICAgIDB4ZmMgfCAzLFxuICAgICAgLy8gbGVuZ3RoU2l6ZU1pbnVzT25lLCBoYXJkLWNvZGVkIHRvIDQgYnl0ZXNcbiAgICAgIDB4ZTAgfCB0cmFjay5zcHMubGVuZ3RoIC8vIDNiaXQgcmVzZXJ2ZWQgKDExMSkgKyBudW1PZlNlcXVlbmNlUGFyYW1ldGVyU2V0c1xuICAgICAgXS5jb25jYXQoc3BzKS5jb25jYXQoW3RyYWNrLnBwcy5sZW5ndGggLy8gbnVtT2ZQaWN0dXJlUGFyYW1ldGVyU2V0c1xuICAgICAgXSkuY29uY2F0KHBwcykpKTsgLy8gXCJQUFNcIlxuICAgICAgdmFyIHdpZHRoID0gdHJhY2sud2lkdGg7XG4gICAgICB2YXIgaGVpZ2h0ID0gdHJhY2suaGVpZ2h0O1xuICAgICAgdmFyIGhTcGFjaW5nID0gdHJhY2sucGl4ZWxSYXRpb1swXTtcbiAgICAgIHZhciB2U3BhY2luZyA9IHRyYWNrLnBpeGVsUmF0aW9bMV07XG4gICAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMuYXZjMSwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLFxuICAgICAgLy8gZGF0YV9yZWZlcmVuY2VfaW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAvLyBwcmVfZGVmaW5lZFxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gcHJlX2RlZmluZWRcbiAgICAgIHdpZHRoID4+IDggJiAweGZmLCB3aWR0aCAmIDB4ZmYsXG4gICAgICAvLyB3aWR0aFxuICAgICAgaGVpZ2h0ID4+IDggJiAweGZmLCBoZWlnaHQgJiAweGZmLFxuICAgICAgLy8gaGVpZ2h0XG4gICAgICAweDAwLCAweDQ4LCAweDAwLCAweDAwLFxuICAgICAgLy8gaG9yaXpyZXNvbHV0aW9uXG4gICAgICAweDAwLCAweDQ4LCAweDAwLCAweDAwLFxuICAgICAgLy8gdmVydHJlc29sdXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSxcbiAgICAgIC8vIGZyYW1lX2NvdW50XG4gICAgICAweDEyLCAweDY0LCAweDYxLCAweDY5LCAweDZjLFxuICAgICAgLy8gZGFpbHltb3Rpb24vaGxzLmpzXG4gICAgICAweDc5LCAweDZkLCAweDZmLCAweDc0LCAweDY5LCAweDZmLCAweDZlLCAweDJmLCAweDY4LCAweDZjLCAweDczLCAweDJlLCAweDZhLCAweDczLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gY29tcHJlc3Nvcm5hbWVcbiAgICAgIDB4MDAsIDB4MTgsXG4gICAgICAvLyBkZXB0aCA9IDI0XG4gICAgICAweDExLCAweDExXSksXG4gICAgICAvLyBwcmVfZGVmaW5lZCA9IC0xXG4gICAgICBhdmNjLCBNUDQuYm94KE1QNC50eXBlcy5idHJ0LCBuZXcgVWludDhBcnJheShbMHgwMCwgMHgxYywgMHg5YywgMHg4MCxcbiAgICAgIC8vIGJ1ZmZlclNpemVEQlxuICAgICAgMHgwMCwgMHgyZCwgMHhjNiwgMHhjMCxcbiAgICAgIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzBdKSksXG4gICAgICAvLyBhdmdCaXRyYXRlXG4gICAgICBNUDQuYm94KE1QNC50eXBlcy5wYXNwLCBuZXcgVWludDhBcnJheShbaFNwYWNpbmcgPj4gMjQsXG4gICAgICAvLyBoU3BhY2luZ1xuICAgICAgaFNwYWNpbmcgPj4gMTYgJiAweGZmLCBoU3BhY2luZyA+PiA4ICYgMHhmZiwgaFNwYWNpbmcgJiAweGZmLCB2U3BhY2luZyA+PiAyNCxcbiAgICAgIC8vIHZTcGFjaW5nXG4gICAgICB2U3BhY2luZyA+PiAxNiAmIDB4ZmYsIHZTcGFjaW5nID4+IDggJiAweGZmLCB2U3BhY2luZyAmIDB4ZmZdKSkpO1xuICAgIH07XG4gICAgTVA0LmVzZHMgPSBmdW5jdGlvbiBlc2RzKHRyYWNrKSB7XG4gICAgICB2YXIgY29uZmlnID0gdHJhY2suY29uZmlnO1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLFxuICAgICAgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gZmxhZ3NcblxuICAgICAgMHgwMyxcbiAgICAgIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgxOSxcbiAgICAgIC8vIGxlbmd0aFxuXG4gICAgICAweDAwLCAweDAxLFxuICAgICAgLy8gZXNfaWRcblxuICAgICAgMHgwMCxcbiAgICAgIC8vIHN0cmVhbV9wcmlvcml0eVxuXG4gICAgICAweDA0LFxuICAgICAgLy8gZGVzY3JpcHRvcl90eXBlXG4gICAgICAweDExLFxuICAgICAgLy8gbGVuZ3RoXG4gICAgICAweDQwLFxuICAgICAgLy8gY29kZWMgOiBtcGVnNF9hdWRpb1xuICAgICAgMHgxNSxcbiAgICAgIC8vIHN0cmVhbV90eXBlXG4gICAgICAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gYnVmZmVyX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyBtYXhCaXRyYXRlXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gYXZnQml0cmF0ZVxuXG4gICAgICAweDA1LFxuICAgICAgLy8gZGVzY3JpcHRvcl90eXBlXG4gICAgICAweDAyXS5jb25jYXQoY29uZmlnLCBbMHgwNiwgMHgwMSwgMHgwMiAvLyBHQVNwZWNpZmljQ29uZmlnKSk7IC8vIGxlbmd0aCArIGF1ZGlvIGNvbmZpZyBkZXNjcmlwdG9yXG4gICAgICBdKSk7XG4gICAgfTtcbiAgICBNUDQuYXVkaW9TdHNkID0gZnVuY3Rpb24gYXVkaW9TdHNkKHRyYWNrKSB7XG4gICAgICB2YXIgc2FtcGxlcmF0ZSA9IHRyYWNrLnNhbXBsZXJhdGUgfHwgMDtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDEsXG4gICAgICAvLyBkYXRhX3JlZmVyZW5jZV9pbmRleFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCB0cmFjay5jaGFubmVsQ291bnQgfHwgMCxcbiAgICAgIC8vIGNoYW5uZWxjb3VudFxuICAgICAgMHgwMCwgMHgxMCxcbiAgICAgIC8vIHNhbXBsZVNpemU6MTZiaXRzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gcmVzZXJ2ZWQyXG4gICAgICBzYW1wbGVyYXRlID4+IDggJiAweGZmLCBzYW1wbGVyYXRlICYgMHhmZixcbiAgICAgIC8vXG4gICAgICAweDAwLCAweDAwXSk7XG4gICAgfTtcbiAgICBNUDQubXA0YSA9IGZ1bmN0aW9uIG1wNGEodHJhY2spIHtcbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tcDRhLCBNUDQuYXVkaW9TdHNkKHRyYWNrKSwgTVA0LmJveChNUDQudHlwZXMuZXNkcywgTVA0LmVzZHModHJhY2spKSk7XG4gICAgfTtcbiAgICBNUDQubXAzID0gZnVuY3Rpb24gbXAzKHRyYWNrKSB7XG4gICAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXNbJy5tcDMnXSwgTVA0LmF1ZGlvU3RzZCh0cmFjaykpO1xuICAgIH07XG4gICAgTVA0LmFjMyA9IGZ1bmN0aW9uIGFjMyh0cmFjaykge1xuICAgICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzWydhYy0zJ10sIE1QNC5hdWRpb1N0c2QodHJhY2spLCBNUDQuYm94KE1QNC50eXBlcy5kYWMzLCB0cmFjay5jb25maWcpKTtcbiAgICB9O1xuICAgIE1QNC5zdHNkID0gZnVuY3Rpb24gc3RzZCh0cmFjaykge1xuICAgICAgdmFyIHNlZ21lbnRDb2RlYyA9IHRyYWNrLnNlZ21lbnRDb2RlYztcbiAgICAgIGlmICh0cmFjay50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgIGlmIChzZWdtZW50Q29kZWMgPT09ICdhYWMnKSB7XG4gICAgICAgICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLnN0c2QsIE1QNC5TVFNELCBNUDQubXA0YSh0cmFjaykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWdtZW50Q29kZWMgPT09ICdhYzMnICYmIHRyYWNrLmNvbmZpZykge1xuICAgICAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zdHNkLCBNUDQuU1RTRCwgTVA0LmFjMyh0cmFjaykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWdtZW50Q29kZWMgPT09ICdtcDMnICYmIHRyYWNrLmNvZGVjID09PSAnbXAzJykge1xuICAgICAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zdHNkLCBNUDQuU1RTRCwgTVA0Lm1wMyh0cmFjaykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHJhY2sucHBzICYmIHRyYWNrLnNwcykge1xuICAgICAgICAgIGlmIChzZWdtZW50Q29kZWMgPT09ICdhdmMnKSB7XG4gICAgICAgICAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RzZCwgTVA0LlNUU0QsIE1QNC5hdmMxKHRyYWNrKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWdtZW50Q29kZWMgPT09ICdoZXZjJyAmJiB0cmFjay52cHMpIHtcbiAgICAgICAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zdHNkLCBNUDQuU1RTRCwgTVA0Lmh2YzEodHJhY2spKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidmlkZW8gdHJhY2sgbWlzc2luZyBwcHMgb3Igc3BzXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBcIiArIHRyYWNrLnR5cGUgKyBcIiBzZWdtZW50IGNvZGVjIChcIiArIHNlZ21lbnRDb2RlYyArIFwiL1wiICsgdHJhY2suY29kZWMgKyBcIilcIik7XG4gICAgfTtcbiAgICBNUDQudGtoZCA9IGZ1bmN0aW9uIHRraGQodHJhY2spIHtcbiAgICAgIHZhciBpZCA9IHRyYWNrLmlkO1xuICAgICAgdmFyIGR1cmF0aW9uID0gKHRyYWNrLmR1cmF0aW9uIHx8IDApICogKHRyYWNrLnRpbWVzY2FsZSB8fCAwKTtcbiAgICAgIHZhciB3aWR0aCA9IHRyYWNrLndpZHRoIHx8IDA7XG4gICAgICB2YXIgaGVpZ2h0ID0gdHJhY2suaGVpZ2h0IHx8IDA7XG4gICAgICB2YXIgdXBwZXJXb3JkRHVyYXRpb24gPSBNYXRoLmZsb29yKGR1cmF0aW9uIC8gKFVJTlQzMl9NQVggKyAxKSk7XG4gICAgICB2YXIgbG93ZXJXb3JkRHVyYXRpb24gPSBNYXRoLmZsb29yKGR1cmF0aW9uICUgKFVJTlQzMl9NQVggKyAxKSk7XG4gICAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMudGtoZCwgbmV3IFVpbnQ4QXJyYXkoWzB4MDEsXG4gICAgICAvLyB2ZXJzaW9uIDFcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDcsXG4gICAgICAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMixcbiAgICAgIC8vIGNyZWF0aW9uX3RpbWVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDMsXG4gICAgICAvLyBtb2RpZmljYXRpb25fdGltZVxuICAgICAgaWQgPj4gMjQgJiAweGZmLCBpZCA+PiAxNiAmIDB4ZmYsIGlkID4+IDggJiAweGZmLCBpZCAmIDB4ZmYsXG4gICAgICAvLyB0cmFja19JRFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHJlc2VydmVkXG4gICAgICB1cHBlcldvcmREdXJhdGlvbiA+PiAyNCwgdXBwZXJXb3JkRHVyYXRpb24gPj4gMTYgJiAweGZmLCB1cHBlcldvcmREdXJhdGlvbiA+PiA4ICYgMHhmZiwgdXBwZXJXb3JkRHVyYXRpb24gJiAweGZmLCBsb3dlcldvcmREdXJhdGlvbiA+PiAyNCwgbG93ZXJXb3JkRHVyYXRpb24gPj4gMTYgJiAweGZmLCBsb3dlcldvcmREdXJhdGlvbiA+PiA4ICYgMHhmZiwgbG93ZXJXb3JkRHVyYXRpb24gJiAweGZmLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAvLyBsYXllclxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIC8vIGFsdGVybmF0ZV9ncm91cFxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIC8vIG5vbi1hdWRpbyB0cmFjayB2b2x1bWVcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHg0MCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHRyYW5zZm9ybWF0aW9uOiB1bml0eSBtYXRyaXhcbiAgICAgIHdpZHRoID4+IDggJiAweGZmLCB3aWR0aCAmIDB4ZmYsIDB4MDAsIDB4MDAsXG4gICAgICAvLyB3aWR0aFxuICAgICAgaGVpZ2h0ID4+IDggJiAweGZmLCBoZWlnaHQgJiAweGZmLCAweDAwLCAweDAwIC8vIGhlaWdodFxuICAgICAgXSkpO1xuICAgIH07XG4gICAgTVA0LnRyYWYgPSBmdW5jdGlvbiB0cmFmKHRyYWNrLCBiYXNlTWVkaWFEZWNvZGVUaW1lKSB7XG4gICAgICB2YXIgc2FtcGxlRGVwZW5kZW5jeVRhYmxlID0gTVA0LnNkdHAodHJhY2spO1xuICAgICAgdmFyIGlkID0gdHJhY2suaWQ7XG4gICAgICB2YXIgdXBwZXJXb3JkQmFzZU1lZGlhRGVjb2RlVGltZSA9IE1hdGguZmxvb3IoYmFzZU1lZGlhRGVjb2RlVGltZSAvIChVSU5UMzJfTUFYICsgMSkpO1xuICAgICAgdmFyIGxvd2VyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPSBNYXRoLmZsb29yKGJhc2VNZWRpYURlY29kZVRpbWUgJSAoVUlOVDMyX01BWCArIDEpKTtcbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50cmFmLCBNUDQuYm94KE1QNC50eXBlcy50ZmhkLCBuZXcgVWludDhBcnJheShbMHgwMCxcbiAgICAgIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIGZsYWdzXG4gICAgICBpZCA+PiAyNCwgaWQgPj4gMTYgJiAweGZmLCBpZCA+PiA4ICYgMHhmZiwgaWQgJiAweGZmIC8vIHRyYWNrX0lEXG4gICAgICBdKSksIE1QNC5ib3goTVA0LnR5cGVzLnRmZHQsIG5ldyBVaW50OEFycmF5KFsweDAxLFxuICAgICAgLy8gdmVyc2lvbiAxXG4gICAgICAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gZmxhZ3NcbiAgICAgIHVwcGVyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPj4gMjQsIHVwcGVyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPj4gMTYgJiAweGZmLCB1cHBlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lID4+IDggJiAweGZmLCB1cHBlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lICYgMHhmZiwgbG93ZXJXb3JkQmFzZU1lZGlhRGVjb2RlVGltZSA+PiAyNCwgbG93ZXJXb3JkQmFzZU1lZGlhRGVjb2RlVGltZSA+PiAxNiAmIDB4ZmYsIGxvd2VyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPj4gOCAmIDB4ZmYsIGxvd2VyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgJiAweGZmXSkpLCBNUDQudHJ1bih0cmFjaywgc2FtcGxlRGVwZW5kZW5jeVRhYmxlLmxlbmd0aCArIDE2ICtcbiAgICAgIC8vIHRmaGRcbiAgICAgIDIwICtcbiAgICAgIC8vIHRmZHRcbiAgICAgIDggK1xuICAgICAgLy8gdHJhZiBoZWFkZXJcbiAgICAgIDE2ICtcbiAgICAgIC8vIG1maGRcbiAgICAgIDggK1xuICAgICAgLy8gbW9vZiBoZWFkZXJcbiAgICAgIDgpLFxuICAgICAgLy8gbWRhdCBoZWFkZXJcbiAgICAgIHNhbXBsZURlcGVuZGVuY3lUYWJsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYSB0cmFjayBib3guXG4gICAgICogQHBhcmFtIHRyYWNrIGEgdHJhY2sgZGVmaW5pdGlvblxuICAgICAqLztcbiAgICBNUDQudHJhayA9IGZ1bmN0aW9uIHRyYWsodHJhY2spIHtcbiAgICAgIHRyYWNrLmR1cmF0aW9uID0gdHJhY2suZHVyYXRpb24gfHwgMHhmZmZmZmZmZjtcbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50cmFrLCBNUDQudGtoZCh0cmFjayksIE1QNC5tZGlhKHRyYWNrKSk7XG4gICAgfTtcbiAgICBNUDQudHJleCA9IGZ1bmN0aW9uIHRyZXgodHJhY2spIHtcbiAgICAgIHZhciBpZCA9IHRyYWNrLmlkO1xuICAgICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLnRyZXgsIG5ldyBVaW50OEFycmF5KFsweDAwLFxuICAgICAgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gZmxhZ3NcbiAgICAgIGlkID4+IDI0LCBpZCA+PiAxNiAmIDB4ZmYsIGlkID4+IDggJiAweGZmLCBpZCAmIDB4ZmYsXG4gICAgICAvLyB0cmFja19JRFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSxcbiAgICAgIC8vIGRlZmF1bHRfc2FtcGxlX2Rlc2NyaXB0aW9uX2luZGV4XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gZGVmYXVsdF9zYW1wbGVfZHVyYXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyBkZWZhdWx0X3NhbXBsZV9zaXplXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAxIC8vIGRlZmF1bHRfc2FtcGxlX2ZsYWdzXG4gICAgICBdKSk7XG4gICAgfTtcbiAgICBNUDQudHJ1biA9IGZ1bmN0aW9uIHRydW4odHJhY2ssIG9mZnNldCkge1xuICAgICAgdmFyIHNhbXBsZXMgPSB0cmFjay5zYW1wbGVzIHx8IFtdO1xuICAgICAgdmFyIGxlbiA9IHNhbXBsZXMubGVuZ3RoO1xuICAgICAgdmFyIGFycmF5bGVuID0gMTIgKyAxNiAqIGxlbjtcbiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5bGVuKTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIHNhbXBsZTtcbiAgICAgIHZhciBkdXJhdGlvbjtcbiAgICAgIHZhciBzaXplO1xuICAgICAgdmFyIGZsYWdzO1xuICAgICAgdmFyIGN0cztcbiAgICAgIG9mZnNldCArPSA4ICsgYXJyYXlsZW47XG4gICAgICBhcnJheS5zZXQoW3RyYWNrLnR5cGUgPT09ICd2aWRlbycgPyAweDAxIDogMHgwMCxcbiAgICAgIC8vIHZlcnNpb24gMSBmb3IgdmlkZW8gd2l0aCBzaWduZWQtaW50IHNhbXBsZV9jb21wb3NpdGlvbl90aW1lX29mZnNldFxuICAgICAgMHgwMCwgMHgwZiwgMHgwMSxcbiAgICAgIC8vIGZsYWdzXG4gICAgICBsZW4gPj4+IDI0ICYgMHhmZiwgbGVuID4+PiAxNiAmIDB4ZmYsIGxlbiA+Pj4gOCAmIDB4ZmYsIGxlbiAmIDB4ZmYsXG4gICAgICAvLyBzYW1wbGVfY291bnRcbiAgICAgIG9mZnNldCA+Pj4gMjQgJiAweGZmLCBvZmZzZXQgPj4+IDE2ICYgMHhmZiwgb2Zmc2V0ID4+PiA4ICYgMHhmZiwgb2Zmc2V0ICYgMHhmZiAvLyBkYXRhX29mZnNldFxuICAgICAgXSwgMCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc2FtcGxlID0gc2FtcGxlc1tpXTtcbiAgICAgICAgZHVyYXRpb24gPSBzYW1wbGUuZHVyYXRpb247XG4gICAgICAgIHNpemUgPSBzYW1wbGUuc2l6ZTtcbiAgICAgICAgZmxhZ3MgPSBzYW1wbGUuZmxhZ3M7XG4gICAgICAgIGN0cyA9IHNhbXBsZS5jdHM7XG4gICAgICAgIGFycmF5LnNldChbZHVyYXRpb24gPj4+IDI0ICYgMHhmZiwgZHVyYXRpb24gPj4+IDE2ICYgMHhmZiwgZHVyYXRpb24gPj4+IDggJiAweGZmLCBkdXJhdGlvbiAmIDB4ZmYsXG4gICAgICAgIC8vIHNhbXBsZV9kdXJhdGlvblxuICAgICAgICBzaXplID4+PiAyNCAmIDB4ZmYsIHNpemUgPj4+IDE2ICYgMHhmZiwgc2l6ZSA+Pj4gOCAmIDB4ZmYsIHNpemUgJiAweGZmLFxuICAgICAgICAvLyBzYW1wbGVfc2l6ZVxuICAgICAgICBmbGFncy5pc0xlYWRpbmcgPDwgMiB8IGZsYWdzLmRlcGVuZHNPbiwgZmxhZ3MuaXNEZXBlbmRlZE9uIDw8IDYgfCBmbGFncy5oYXNSZWR1bmRhbmN5IDw8IDQgfCBmbGFncy5wYWRkaW5nVmFsdWUgPDwgMSB8IGZsYWdzLmlzTm9uU3luYywgZmxhZ3MuZGVncmFkUHJpbyAmIDB4ZjAgPDwgOCwgZmxhZ3MuZGVncmFkUHJpbyAmIDB4MGYsXG4gICAgICAgIC8vIHNhbXBsZV9mbGFnc1xuICAgICAgICBjdHMgPj4+IDI0ICYgMHhmZiwgY3RzID4+PiAxNiAmIDB4ZmYsIGN0cyA+Pj4gOCAmIDB4ZmYsIGN0cyAmIDB4ZmYgLy8gc2FtcGxlX2NvbXBvc2l0aW9uX3RpbWVfb2Zmc2V0XG4gICAgICAgIF0sIDEyICsgMTYgKiBpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50cnVuLCBhcnJheSk7XG4gICAgfTtcbiAgICBNUDQuaW5pdFNlZ21lbnQgPSBmdW5jdGlvbiBpbml0U2VnbWVudCh0cmFja3MpIHtcbiAgICAgIGlmICghTVA0LnR5cGVzKSB7XG4gICAgICAgIE1QNC5pbml0KCk7XG4gICAgICB9XG4gICAgICB2YXIgbW92aWUgPSBNUDQubW9vdih0cmFja3MpO1xuICAgICAgdmFyIHJlc3VsdCA9IGFwcGVuZFVpbnQ4QXJyYXkoTVA0LkZUWVAsIG1vdmllKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBNUDQuaHZjMSA9IGZ1bmN0aW9uIGh2YzEodHJhY2spIHtcbiAgICAgIHZhciBwcyA9IHRyYWNrLnBhcmFtcztcbiAgICAgIHZhciB1bml0cyA9IFt0cmFjay52cHMsIHRyYWNrLnNwcywgdHJhY2sucHBzXTtcbiAgICAgIHZhciBOQUx1TGVuZ3RoU2l6ZSA9IDQ7XG4gICAgICB2YXIgY29uZmlnID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDEsIHBzLmdlbmVyYWxfcHJvZmlsZV9zcGFjZSA8PCA2IHwgKHBzLmdlbmVyYWxfdGllcl9mbGFnID8gMzIgOiAwKSB8IHBzLmdlbmVyYWxfcHJvZmlsZV9pZGMsIHBzLmdlbmVyYWxfcHJvZmlsZV9jb21wYXRpYmlsaXR5X2ZsYWdzWzBdLCBwcy5nZW5lcmFsX3Byb2ZpbGVfY29tcGF0aWJpbGl0eV9mbGFnc1sxXSwgcHMuZ2VuZXJhbF9wcm9maWxlX2NvbXBhdGliaWxpdHlfZmxhZ3NbMl0sIHBzLmdlbmVyYWxfcHJvZmlsZV9jb21wYXRpYmlsaXR5X2ZsYWdzWzNdLCBwcy5nZW5lcmFsX2NvbnN0cmFpbnRfaW5kaWNhdG9yX2ZsYWdzWzBdLCBwcy5nZW5lcmFsX2NvbnN0cmFpbnRfaW5kaWNhdG9yX2ZsYWdzWzFdLCBwcy5nZW5lcmFsX2NvbnN0cmFpbnRfaW5kaWNhdG9yX2ZsYWdzWzJdLCBwcy5nZW5lcmFsX2NvbnN0cmFpbnRfaW5kaWNhdG9yX2ZsYWdzWzNdLCBwcy5nZW5lcmFsX2NvbnN0cmFpbnRfaW5kaWNhdG9yX2ZsYWdzWzRdLCBwcy5nZW5lcmFsX2NvbnN0cmFpbnRfaW5kaWNhdG9yX2ZsYWdzWzVdLCBwcy5nZW5lcmFsX2xldmVsX2lkYywgMjQwIHwgcHMubWluX3NwYXRpYWxfc2VnbWVudGF0aW9uX2lkYyA+PiA4LCAyNTUgJiBwcy5taW5fc3BhdGlhbF9zZWdtZW50YXRpb25faWRjLCAyNTIgfCBwcy5wYXJhbGxlbGlzbVR5cGUsIDI1MiB8IHBzLmNocm9tYV9mb3JtYXRfaWRjLCAyNDggfCBwcy5iaXRfZGVwdGhfbHVtYV9taW51czgsIDI0OCB8IHBzLmJpdF9kZXB0aF9jaHJvbWFfbWludXM4LCAweDAwLCBwYXJzZUludChwcy5mcmFtZV9yYXRlLmZwcyksIE5BTHVMZW5ndGhTaXplIC0gMSB8IHBzLnRlbXBvcmFsX2lkX25lc3RlZCA8PCAyIHwgcHMubnVtX3RlbXBvcmFsX2xheWVycyA8PCAzIHwgKHBzLmZyYW1lX3JhdGUuZml4ZWQgPyA2NCA6IDApLCB1bml0cy5sZW5ndGhdKTtcblxuICAgICAgLy8gY29tcHV0ZSBodmNDIHNpemUgaW4gYnl0ZXNcbiAgICAgIHZhciBsZW5ndGggPSBjb25maWcubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bml0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBsZW5ndGggKz0gMztcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB1bml0c1tpXS5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGxlbmd0aCArPSAyICsgdW5pdHNbaV1bal0ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgaHZjQyA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICBodmNDLnNldChjb25maWcsIDApO1xuICAgICAgbGVuZ3RoID0gY29uZmlnLmxlbmd0aDtcbiAgICAgIC8vIGFwcGVuZCBwYXJhbWV0ZXIgc2V0IHVuaXRzOiBvbmUgdnBzLCBvbmUgb3IgbW9yZSBzcHMgYW5kIHBwc1xuICAgICAgdmFyIGlNYXggPSB1bml0cy5sZW5ndGggLSAxO1xuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHVuaXRzLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgICBodmNDLnNldChuZXcgVWludDhBcnJheShbMzIgKyBfaSB8IChfaSA9PT0gaU1heCA/IDEyOCA6IDApLCAweDAwLCB1bml0c1tfaV0ubGVuZ3RoXSksIGxlbmd0aCk7XG4gICAgICAgIGxlbmd0aCArPSAzO1xuICAgICAgICBmb3IgKHZhciBfaiA9IDA7IF9qIDwgdW5pdHNbX2ldLmxlbmd0aDsgX2ogKz0gMSkge1xuICAgICAgICAgIGh2Y0Muc2V0KG5ldyBVaW50OEFycmF5KFt1bml0c1tfaV1bX2pdLmxlbmd0aCA+PiA4LCB1bml0c1tfaV1bX2pdLmxlbmd0aCAmIDI1NV0pLCBsZW5ndGgpO1xuICAgICAgICAgIGxlbmd0aCArPSAyO1xuICAgICAgICAgIGh2Y0Muc2V0KHVuaXRzW19pXVtfal0sIGxlbmd0aCk7XG4gICAgICAgICAgbGVuZ3RoICs9IHVuaXRzW19pXVtfal0ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgaHZjYyA9IE1QNC5ib3goTVA0LnR5cGVzLmh2Y0MsIGh2Y0MpO1xuICAgICAgdmFyIHdpZHRoID0gdHJhY2sud2lkdGg7XG4gICAgICB2YXIgaGVpZ2h0ID0gdHJhY2suaGVpZ2h0O1xuICAgICAgdmFyIGhTcGFjaW5nID0gdHJhY2sucGl4ZWxSYXRpb1swXTtcbiAgICAgIHZhciB2U3BhY2luZyA9IHRyYWNrLnBpeGVsUmF0aW9bMV07XG4gICAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMuaHZjMSwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLFxuICAgICAgLy8gZGF0YV9yZWZlcmVuY2VfaW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAvLyBwcmVfZGVmaW5lZFxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gcHJlX2RlZmluZWRcbiAgICAgIHdpZHRoID4+IDggJiAweGZmLCB3aWR0aCAmIDB4ZmYsXG4gICAgICAvLyB3aWR0aFxuICAgICAgaGVpZ2h0ID4+IDggJiAweGZmLCBoZWlnaHQgJiAweGZmLFxuICAgICAgLy8gaGVpZ2h0XG4gICAgICAweDAwLCAweDQ4LCAweDAwLCAweDAwLFxuICAgICAgLy8gaG9yaXpyZXNvbHV0aW9uXG4gICAgICAweDAwLCAweDQ4LCAweDAwLCAweDAwLFxuICAgICAgLy8gdmVydHJlc29sdXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSxcbiAgICAgIC8vIGZyYW1lX2NvdW50XG4gICAgICAweDEyLCAweDY0LCAweDYxLCAweDY5LCAweDZjLFxuICAgICAgLy8gZGFpbHltb3Rpb24vaGxzLmpzXG4gICAgICAweDc5LCAweDZkLCAweDZmLCAweDc0LCAweDY5LCAweDZmLCAweDZlLCAweDJmLCAweDY4LCAweDZjLCAweDczLCAweDJlLCAweDZhLCAweDczLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgLy8gY29tcHJlc3Nvcm5hbWVcbiAgICAgIDB4MDAsIDB4MTgsXG4gICAgICAvLyBkZXB0aCA9IDI0XG4gICAgICAweDExLCAweDExXSksXG4gICAgICAvLyBwcmVfZGVmaW5lZCA9IC0xXG4gICAgICBodmNjLCBNUDQuYm94KE1QNC50eXBlcy5idHJ0LCBuZXcgVWludDhBcnJheShbMHgwMCwgMHgxYywgMHg5YywgMHg4MCxcbiAgICAgIC8vIGJ1ZmZlclNpemVEQlxuICAgICAgMHgwMCwgMHgyZCwgMHhjNiwgMHhjMCxcbiAgICAgIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzBdKSksXG4gICAgICAvLyBhdmdCaXRyYXRlXG4gICAgICBNUDQuYm94KE1QNC50eXBlcy5wYXNwLCBuZXcgVWludDhBcnJheShbaFNwYWNpbmcgPj4gMjQsXG4gICAgICAvLyBoU3BhY2luZ1xuICAgICAgaFNwYWNpbmcgPj4gMTYgJiAweGZmLCBoU3BhY2luZyA+PiA4ICYgMHhmZiwgaFNwYWNpbmcgJiAweGZmLCB2U3BhY2luZyA+PiAyNCxcbiAgICAgIC8vIHZTcGFjaW5nXG4gICAgICB2U3BhY2luZyA+PiAxNiAmIDB4ZmYsIHZTcGFjaW5nID4+IDggJiAweGZmLCB2U3BhY2luZyAmIDB4ZmZdKSkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1QNDtcbiAgfSgpO1xuICBNUDQudHlwZXMgPSB2b2lkIDA7XG4gIE1QNC5IRExSX1RZUEVTID0gdm9pZCAwO1xuICBNUDQuU1RUUyA9IHZvaWQgMDtcbiAgTVA0LlNUU0MgPSB2b2lkIDA7XG4gIE1QNC5TVENPID0gdm9pZCAwO1xuICBNUDQuU1RTWiA9IHZvaWQgMDtcbiAgTVA0LlZNSEQgPSB2b2lkIDA7XG4gIE1QNC5TTUhEID0gdm9pZCAwO1xuICBNUDQuU1RTRCA9IHZvaWQgMDtcbiAgTVA0LkZUWVAgPSB2b2lkIDA7XG4gIE1QNC5ESU5GID0gdm9pZCAwO1xuXG4gIHZhciBNUEVHX1RTX0NMT0NLX0ZSRVFfSFogPSA5MDAwMDtcbiAgZnVuY3Rpb24gdG9UaW1lc2NhbGVGcm9tQmFzZShiYXNlVGltZSwgZGVzdFNjYWxlLCBzcmNCYXNlLCByb3VuZCkge1xuICAgIGlmIChzcmNCYXNlID09PSB2b2lkIDApIHtcbiAgICAgIHNyY0Jhc2UgPSAxO1xuICAgIH1cbiAgICBpZiAocm91bmQgPT09IHZvaWQgMCkge1xuICAgICAgcm91bmQgPSBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VUaW1lICogZGVzdFNjYWxlICogc3JjQmFzZTsgLy8gZXF1aXZhbGVudCB0byBgKHZhbHVlICogc2NhbGUpIC8gKDEgLyBiYXNlKWBcbiAgICByZXR1cm4gcm91bmQgPyBNYXRoLnJvdW5kKHJlc3VsdCkgOiByZXN1bHQ7XG4gIH1cbiAgZnVuY3Rpb24gdG9UaW1lc2NhbGVGcm9tU2NhbGUoYmFzZVRpbWUsIGRlc3RTY2FsZSwgc3JjU2NhbGUsIHJvdW5kKSB7XG4gICAgaWYgKHNyY1NjYWxlID09PSB2b2lkIDApIHtcbiAgICAgIHNyY1NjYWxlID0gMTtcbiAgICB9XG4gICAgaWYgKHJvdW5kID09PSB2b2lkIDApIHtcbiAgICAgIHJvdW5kID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0b1RpbWVzY2FsZUZyb21CYXNlKGJhc2VUaW1lLCBkZXN0U2NhbGUsIDEgLyBzcmNTY2FsZSwgcm91bmQpO1xuICB9XG4gIGZ1bmN0aW9uIHRvTXNGcm9tTXBlZ1RzQ2xvY2soYmFzZVRpbWUsIHJvdW5kKSB7XG4gICAgcmV0dXJuIHRvVGltZXNjYWxlRnJvbUJhc2UoYmFzZVRpbWUsIDEwMDAsIDEgLyBNUEVHX1RTX0NMT0NLX0ZSRVFfSFosIHJvdW5kKTtcbiAgfVxuICBmdW5jdGlvbiB0b01wZWdUc0Nsb2NrRnJvbVRpbWVzY2FsZShiYXNlVGltZSwgc3JjU2NhbGUpIHtcbiAgICBpZiAoc3JjU2NhbGUgPT09IHZvaWQgMCkge1xuICAgICAgc3JjU2NhbGUgPSAxO1xuICAgIH1cbiAgICByZXR1cm4gdG9UaW1lc2NhbGVGcm9tQmFzZShiYXNlVGltZSwgTVBFR19UU19DTE9DS19GUkVRX0haLCAxIC8gc3JjU2NhbGUpO1xuICB9XG5cbiAgdmFyIE1BWF9TSUxFTlRfRlJBTUVfRFVSQVRJT04gPSAxMCAqIDEwMDA7IC8vIDEwIHNlY29uZHNcbiAgdmFyIEFBQ19TQU1QTEVTX1BFUl9GUkFNRSA9IDEwMjQ7XG4gIHZhciBNUEVHX0FVRElPX1NBTVBMRV9QRVJfRlJBTUUgPSAxMTUyO1xuICB2YXIgQUMzX1NBTVBMRVNfUEVSX0ZSQU1FID0gMTUzNjtcbiAgdmFyIGNocm9tZVZlcnNpb24gPSBudWxsO1xuICB2YXIgc2FmYXJpV2Via2l0VmVyc2lvbiA9IG51bGw7XG4gIGZ1bmN0aW9uIGNyZWF0ZU1wNFNhbXBsZShpc0tleWZyYW1lLCBkdXJhdGlvbiwgc2l6ZSwgY3RzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIHNpemU6IHNpemUsXG4gICAgICBjdHM6IGN0cyxcbiAgICAgIGZsYWdzOiB7XG4gICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgaXNEZXBlbmRlZE9uOiAwLFxuICAgICAgICBoYXNSZWR1bmRhbmN5OiAwLFxuICAgICAgICBkZWdyYWRQcmlvOiAwLFxuICAgICAgICBkZXBlbmRzT246IGlzS2V5ZnJhbWUgPyAyIDogMSxcbiAgICAgICAgaXNOb25TeW5jOiBpc0tleWZyYW1lID8gMCA6IDFcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHZhciBNUDRSZW11eGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNUDRSZW11eGVyKG9ic2VydmVyLCBjb25maWcsIHR5cGVTdXBwb3J0ZWQsIGxvZ2dlcikge1xuICAgICAgdGhpcy5sb2dnZXIgPSB2b2lkIDA7XG4gICAgICB0aGlzLm9ic2VydmVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5jb25maWcgPSB2b2lkIDA7XG4gICAgICB0aGlzLnR5cGVTdXBwb3J0ZWQgPSB2b2lkIDA7XG4gICAgICB0aGlzLklTR2VuZXJhdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9pbml0UFRTID0gbnVsbDtcbiAgICAgIHRoaXMuX2luaXREVFMgPSBudWxsO1xuICAgICAgdGhpcy5uZXh0QXZjRHRzID0gbnVsbDtcbiAgICAgIHRoaXMubmV4dEF1ZGlvUHRzID0gbnVsbDtcbiAgICAgIHRoaXMudmlkZW9TYW1wbGVEdXJhdGlvbiA9IG51bGw7XG4gICAgICB0aGlzLmlzQXVkaW9Db250aWd1b3VzID0gZmFsc2U7XG4gICAgICB0aGlzLmlzVmlkZW9Db250aWd1b3VzID0gZmFsc2U7XG4gICAgICB0aGlzLnZpZGVvVHJhY2tDb25maWcgPSB2b2lkIDA7XG4gICAgICB0aGlzLm9ic2VydmVyID0gb2JzZXJ2ZXI7XG4gICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgIHRoaXMudHlwZVN1cHBvcnRlZCA9IHR5cGVTdXBwb3J0ZWQ7XG4gICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgIHRoaXMuSVNHZW5lcmF0ZWQgPSBmYWxzZTtcbiAgICAgIGlmIChjaHJvbWVWZXJzaW9uID09PSBudWxsKSB7XG4gICAgICAgIHZhciB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvaSk7XG4gICAgICAgIGNocm9tZVZlcnNpb24gPSByZXN1bHQgPyBwYXJzZUludChyZXN1bHRbMV0pIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChzYWZhcmlXZWJraXRWZXJzaW9uID09PSBudWxsKSB7XG4gICAgICAgIHZhciBfcmVzdWx0ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvU2FmYXJpXFwvKFxcZCspL2kpO1xuICAgICAgICBzYWZhcmlXZWJraXRWZXJzaW9uID0gX3Jlc3VsdCA/IHBhcnNlSW50KF9yZXN1bHRbMV0pIDogMDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIF9wcm90byA9IE1QNFJlbXV4ZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMuY29uZmlnID0gdGhpcy52aWRlb1RyYWNrQ29uZmlnID0gdGhpcy5faW5pdFBUUyA9IHRoaXMuX2luaXREVFMgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0VGltZVN0YW1wID0gZnVuY3Rpb24gcmVzZXRUaW1lU3RhbXAoZGVmYXVsdFRpbWVTdGFtcCkge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKCdbbXA0LXJlbXV4ZXJdOiBpbml0UFRTICYgaW5pdERUUyByZXNldCcpO1xuICAgICAgdGhpcy5faW5pdFBUUyA9IHRoaXMuX2luaXREVFMgPSBkZWZhdWx0VGltZVN0YW1wO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0TmV4dFRpbWVzdGFtcCA9IGZ1bmN0aW9uIHJlc2V0TmV4dFRpbWVzdGFtcCgpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygnW21wNC1yZW11eGVyXTogcmVzZXQgbmV4dCB0aW1lc3RhbXAnKTtcbiAgICAgIHRoaXMuaXNWaWRlb0NvbnRpZ3VvdXMgPSBmYWxzZTtcbiAgICAgIHRoaXMuaXNBdWRpb0NvbnRpZ3VvdXMgPSBmYWxzZTtcbiAgICB9O1xuICAgIF9wcm90by5yZXNldEluaXRTZWdtZW50ID0gZnVuY3Rpb24gcmVzZXRJbml0U2VnbWVudCgpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygnW21wNC1yZW11eGVyXTogSVNHZW5lcmF0ZWQgZmxhZyByZXNldCcpO1xuICAgICAgdGhpcy5JU0dlbmVyYXRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy52aWRlb1RyYWNrQ29uZmlnID0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgX3Byb3RvLmdldFZpZGVvU3RhcnRQdHMgPSBmdW5jdGlvbiBnZXRWaWRlb1N0YXJ0UHRzKHZpZGVvU2FtcGxlcykge1xuICAgICAgLy8gR2V0IHRoZSBtaW5pbXVtIFBUUyB2YWx1ZSByZWxhdGl2ZSB0byB0aGUgZmlyc3Qgc2FtcGxlJ3MgUFRTLCBub3JtYWxpemVkIGZvciAzMy1iaXQgd3JhcHBpbmdcbiAgICAgIHZhciByb2xsb3ZlckRldGVjdGVkID0gZmFsc2U7XG4gICAgICB2YXIgZmlyc3RQdHMgPSB2aWRlb1NhbXBsZXNbMF0ucHRzO1xuICAgICAgdmFyIHN0YXJ0UFRTID0gdmlkZW9TYW1wbGVzLnJlZHVjZShmdW5jdGlvbiAobWluUFRTLCBzYW1wbGUpIHtcbiAgICAgICAgdmFyIHB0cyA9IHNhbXBsZS5wdHM7XG4gICAgICAgIHZhciBkZWx0YSA9IHB0cyAtIG1pblBUUztcbiAgICAgICAgaWYgKGRlbHRhIDwgLTQyOTQ5NjcyOTYpIHtcbiAgICAgICAgICAvLyAyXjMyLCBzZWUgUFRTTm9ybWFsaXplIGZvciByZWFzb25pbmcsIGJ1dCB3ZSdyZSBoaXR0aW5nIGEgcm9sbG92ZXIgaGVyZSwgYW5kIHdlIGRvbid0IHdhbnQgdGhhdCB0byBpbXBhY3QgdGhlIHRpbWVPZmZzZXQgY2FsY3VsYXRpb25cbiAgICAgICAgICByb2xsb3ZlckRldGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBwdHMgPSBub3JtYWxpemVQdHMocHRzLCBmaXJzdFB0cyk7XG4gICAgICAgICAgZGVsdGEgPSBwdHMgLSBtaW5QVFM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbHRhID4gMCkge1xuICAgICAgICAgIHJldHVybiBtaW5QVFM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHB0cztcbiAgICAgIH0sIGZpcnN0UHRzKTtcbiAgICAgIGlmIChyb2xsb3ZlckRldGVjdGVkKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKCdQVFMgcm9sbG92ZXIgZGV0ZWN0ZWQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFydFBUUztcbiAgICB9O1xuICAgIF9wcm90by5yZW11eCA9IGZ1bmN0aW9uIHJlbXV4KGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2ssIGlkM1RyYWNrLCB0ZXh0VHJhY2ssIHRpbWVPZmZzZXQsIGFjY3VyYXRlVGltZU9mZnNldCwgZmx1c2gsIHBsYXlsaXN0VHlwZSkge1xuICAgICAgdmFyIHZpZGVvO1xuICAgICAgdmFyIGF1ZGlvO1xuICAgICAgdmFyIGluaXRTZWdtZW50O1xuICAgICAgdmFyIHRleHQ7XG4gICAgICB2YXIgaWQzO1xuICAgICAgdmFyIGluZGVwZW5kZW50O1xuICAgICAgdmFyIGF1ZGlvVGltZU9mZnNldCA9IHRpbWVPZmZzZXQ7XG4gICAgICB2YXIgdmlkZW9UaW1lT2Zmc2V0ID0gdGltZU9mZnNldDtcblxuICAgICAgLy8gSWYgd2UncmUgcmVtdXhpbmcgYXVkaW8gYW5kIHZpZGVvIHByb2dyZXNzaXZlbHksIHdhaXQgdW50aWwgd2UndmUgcmVjZWl2ZWQgZW5vdWdoIHNhbXBsZXMgZm9yIGVhY2ggdHJhY2sgYmVmb3JlIHByb2NlZWRpbmcuXG4gICAgICAvLyBUaGlzIGlzIGRvbmUgdG8gc3luY2hyb25pemUgdGhlIGF1ZGlvIGFuZCB2aWRlbyBzdHJlYW1zLiBXZSBrbm93IGlmIHRoZSBjdXJyZW50IHNlZ21lbnQgd2lsbCBoYXZlIHNhbXBsZXMgaWYgdGhlIFwicGlkXCJcbiAgICAgIC8vIHBhcmFtZXRlciBpcyBncmVhdGVyIHRoYW4gLTEuIFRoZSBwaWQgaXMgc2V0IHdoZW4gdGhlIFBNVCBpcyBwYXJzZWQsIHdoaWNoIGNvbnRhaW5zIHRoZSB0cmFja3MgbGlzdC5cbiAgICAgIC8vIEhvd2V2ZXIsIGlmIHRoZSBpbml0U2VnbWVudCBoYXMgYWxyZWFkeSBiZWVuIGdlbmVyYXRlZCwgb3Igd2UndmUgcmVhY2hlZCB0aGUgZW5kIG9mIGEgc2VnbWVudCAoZmx1c2gpLFxuICAgICAgLy8gdGhlbiB3ZSBjYW4gcmVtdXggb25lIHRyYWNrIHdpdGhvdXQgd2FpdGluZyBmb3IgdGhlIG90aGVyLlxuICAgICAgdmFyIGhhc0F1ZGlvID0gYXVkaW9UcmFjay5waWQgPiAtMTtcbiAgICAgIHZhciBoYXNWaWRlbyA9IHZpZGVvVHJhY2sucGlkID4gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aDtcbiAgICAgIHZhciBlbm91Z2hBdWRpb1NhbXBsZXMgPSBhdWRpb1RyYWNrLnNhbXBsZXMubGVuZ3RoID4gMDtcbiAgICAgIHZhciBlbm91Z2hWaWRlb1NhbXBsZXMgPSBmbHVzaCAmJiBsZW5ndGggPiAwIHx8IGxlbmd0aCA+IDE7XG4gICAgICB2YXIgY2FuUmVtdXhBdmMgPSAoIWhhc0F1ZGlvIHx8IGVub3VnaEF1ZGlvU2FtcGxlcykgJiYgKCFoYXNWaWRlbyB8fCBlbm91Z2hWaWRlb1NhbXBsZXMpIHx8IHRoaXMuSVNHZW5lcmF0ZWQgfHwgZmx1c2g7XG4gICAgICBpZiAoY2FuUmVtdXhBdmMpIHtcbiAgICAgICAgaWYgKHRoaXMuSVNHZW5lcmF0ZWQpIHtcbiAgICAgICAgICB2YXIgX3ZpZGVvVHJhY2skcGl4ZWxSYXRpLCBfY29uZmlnJHBpeGVsUmF0aW8sIF92aWRlb1RyYWNrJHBpeGVsUmF0aTIsIF9jb25maWckcGl4ZWxSYXRpbzI7XG4gICAgICAgICAgdmFyIGNvbmZpZyA9IHRoaXMudmlkZW9UcmFja0NvbmZpZztcbiAgICAgICAgICBpZiAoY29uZmlnICYmICh2aWRlb1RyYWNrLndpZHRoICE9PSBjb25maWcud2lkdGggfHwgdmlkZW9UcmFjay5oZWlnaHQgIT09IGNvbmZpZy5oZWlnaHQgfHwgKChfdmlkZW9UcmFjayRwaXhlbFJhdGkgPSB2aWRlb1RyYWNrLnBpeGVsUmF0aW8pID09IG51bGwgPyB2b2lkIDAgOiBfdmlkZW9UcmFjayRwaXhlbFJhdGlbMF0pICE9PSAoKF9jb25maWckcGl4ZWxSYXRpbyA9IGNvbmZpZy5waXhlbFJhdGlvKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbmZpZyRwaXhlbFJhdGlvWzBdKSB8fCAoKF92aWRlb1RyYWNrJHBpeGVsUmF0aTIgPSB2aWRlb1RyYWNrLnBpeGVsUmF0aW8pID09IG51bGwgPyB2b2lkIDAgOiBfdmlkZW9UcmFjayRwaXhlbFJhdGkyWzFdKSAhPT0gKChfY29uZmlnJHBpeGVsUmF0aW8yID0gY29uZmlnLnBpeGVsUmF0aW8pID09IG51bGwgPyB2b2lkIDAgOiBfY29uZmlnJHBpeGVsUmF0aW8yWzFdKSkgfHwgIWNvbmZpZyAmJiBlbm91Z2hWaWRlb1NhbXBsZXMgfHwgdGhpcy5uZXh0QXVkaW9QdHMgPT09IG51bGwgJiYgZW5vdWdoQXVkaW9TYW1wbGVzKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0SW5pdFNlZ21lbnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLklTR2VuZXJhdGVkKSB7XG4gICAgICAgICAgaW5pdFNlZ21lbnQgPSB0aGlzLmdlbmVyYXRlSVMoYXVkaW9UcmFjaywgdmlkZW9UcmFjaywgdGltZU9mZnNldCwgYWNjdXJhdGVUaW1lT2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNWaWRlb0NvbnRpZ3VvdXMgPSB0aGlzLmlzVmlkZW9Db250aWd1b3VzO1xuICAgICAgICB2YXIgZmlyc3RLZXlGcmFtZUluZGV4ID0gLTE7XG4gICAgICAgIHZhciBmaXJzdEtleUZyYW1lUFRTO1xuICAgICAgICBpZiAoZW5vdWdoVmlkZW9TYW1wbGVzKSB7XG4gICAgICAgICAgZmlyc3RLZXlGcmFtZUluZGV4ID0gZmluZEtleWZyYW1lSW5kZXgodmlkZW9UcmFjay5zYW1wbGVzKTtcbiAgICAgICAgICBpZiAoIWlzVmlkZW9Db250aWd1b3VzICYmIHRoaXMuY29uZmlnLmZvcmNlS2V5RnJhbWVPbkRpc2NvbnRpbnVpdHkpIHtcbiAgICAgICAgICAgIGluZGVwZW5kZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChmaXJzdEtleUZyYW1lSW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJbbXA0LXJlbXV4ZXJdOiBEcm9wcGVkIFwiICsgZmlyc3RLZXlGcmFtZUluZGV4ICsgXCIgb3V0IG9mIFwiICsgbGVuZ3RoICsgXCIgdmlkZW8gc2FtcGxlcyBkdWUgdG8gYSBtaXNzaW5nIGtleWZyYW1lXCIpO1xuICAgICAgICAgICAgICB2YXIgc3RhcnRQVFMgPSB0aGlzLmdldFZpZGVvU3RhcnRQdHModmlkZW9UcmFjay5zYW1wbGVzKTtcbiAgICAgICAgICAgICAgdmlkZW9UcmFjay5zYW1wbGVzID0gdmlkZW9UcmFjay5zYW1wbGVzLnNsaWNlKGZpcnN0S2V5RnJhbWVJbmRleCk7XG4gICAgICAgICAgICAgIHZpZGVvVHJhY2suZHJvcHBlZCArPSBmaXJzdEtleUZyYW1lSW5kZXg7XG4gICAgICAgICAgICAgIHZpZGVvVGltZU9mZnNldCArPSAodmlkZW9UcmFjay5zYW1wbGVzWzBdLnB0cyAtIHN0YXJ0UFRTKSAvIHZpZGVvVHJhY2suaW5wdXRUaW1lU2NhbGU7XG4gICAgICAgICAgICAgIGZpcnN0S2V5RnJhbWVQVFMgPSB2aWRlb1RpbWVPZmZzZXQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpcnN0S2V5RnJhbWVJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybihcIlttcDQtcmVtdXhlcl06IE5vIGtleWZyYW1lIGZvdW5kIG91dCBvZiBcIiArIGxlbmd0aCArIFwiIHZpZGVvIHNhbXBsZXNcIik7XG4gICAgICAgICAgICAgIGluZGVwZW5kZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLklTR2VuZXJhdGVkKSB7XG4gICAgICAgICAgaWYgKGVub3VnaEF1ZGlvU2FtcGxlcyAmJiBlbm91Z2hWaWRlb1NhbXBsZXMpIHtcbiAgICAgICAgICAgIC8vIHRpbWVPZmZzZXQgaXMgZXhwZWN0ZWQgdG8gYmUgdGhlIG9mZnNldCBvZiB0aGUgZmlyc3QgdGltZXN0YW1wIG9mIHRoaXMgZnJhZ21lbnQgKGZpcnN0IERUUylcbiAgICAgICAgICAgIC8vIGlmIGZpcnN0IGF1ZGlvIERUUyBpcyBub3QgYWxpZ25lZCB3aXRoIGZpcnN0IHZpZGVvIERUUyB0aGVuIHdlIG5lZWQgdG8gdGFrZSB0aGF0IGludG8gYWNjb3VudFxuICAgICAgICAgICAgLy8gd2hlbiBwcm92aWRpbmcgdGltZU9mZnNldCB0byByZW11eEF1ZGlvIC8gcmVtdXhWaWRlby4gaWYgd2UgZG9uJ3QgZG8gdGhhdCwgdGhlcmUgbWlnaHQgYmUgYSBwZXJtYW5lbnQgLyBzbWFsbFxuICAgICAgICAgICAgLy8gZHJpZnQgYmV0d2VlbiBhdWRpbyBhbmQgdmlkZW8gc3RyZWFtc1xuICAgICAgICAgICAgdmFyIF9zdGFydFBUUyA9IHRoaXMuZ2V0VmlkZW9TdGFydFB0cyh2aWRlb1RyYWNrLnNhbXBsZXMpO1xuICAgICAgICAgICAgdmFyIHRzRGVsdGEgPSBub3JtYWxpemVQdHMoYXVkaW9UcmFjay5zYW1wbGVzWzBdLnB0cywgX3N0YXJ0UFRTKSAtIF9zdGFydFBUUztcbiAgICAgICAgICAgIHZhciBhdWRpb3ZpZGVvVGltZXN0YW1wRGVsdGEgPSB0c0RlbHRhIC8gdmlkZW9UcmFjay5pbnB1dFRpbWVTY2FsZTtcbiAgICAgICAgICAgIGF1ZGlvVGltZU9mZnNldCArPSBNYXRoLm1heCgwLCBhdWRpb3ZpZGVvVGltZXN0YW1wRGVsdGEpO1xuICAgICAgICAgICAgdmlkZW9UaW1lT2Zmc2V0ICs9IE1hdGgubWF4KDAsIC1hdWRpb3ZpZGVvVGltZXN0YW1wRGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFB1cnBvc2VmdWxseSByZW11eGluZyBhdWRpbyBiZWZvcmUgdmlkZW8sIHNvIHRoYXQgcmVtdXhWaWRlbyBjYW4gdXNlIG5leHRBdWRpb1B0cywgd2hpY2ggaXMgY2FsY3VsYXRlZCBpbiByZW11eEF1ZGlvLlxuICAgICAgICAgIGlmIChlbm91Z2hBdWRpb1NhbXBsZXMpIHtcbiAgICAgICAgICAgIC8vIGlmIGluaXRTZWdtZW50IHdhcyBnZW5lcmF0ZWQgd2l0aG91dCBhdWRpbyBzYW1wbGVzLCByZWdlbmVyYXRlIGl0IGFnYWluXG4gICAgICAgICAgICBpZiAoIWF1ZGlvVHJhY2suc2FtcGxlcmF0ZSkge1xuICAgICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdbbXA0LXJlbXV4ZXJdOiByZWdlbmVyYXRlIEluaXRTZWdtZW50IGFzIGF1ZGlvIGRldGVjdGVkJyk7XG4gICAgICAgICAgICAgIGluaXRTZWdtZW50ID0gdGhpcy5nZW5lcmF0ZUlTKGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2ssIHRpbWVPZmZzZXQsIGFjY3VyYXRlVGltZU9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdWRpbyA9IHRoaXMucmVtdXhBdWRpbyhhdWRpb1RyYWNrLCBhdWRpb1RpbWVPZmZzZXQsIHRoaXMuaXNBdWRpb0NvbnRpZ3VvdXMsIGFjY3VyYXRlVGltZU9mZnNldCwgaGFzVmlkZW8gfHwgZW5vdWdoVmlkZW9TYW1wbGVzIHx8IHBsYXlsaXN0VHlwZSA9PT0gUGxheWxpc3RMZXZlbFR5cGUuQVVESU8gPyB2aWRlb1RpbWVPZmZzZXQgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgaWYgKGVub3VnaFZpZGVvU2FtcGxlcykge1xuICAgICAgICAgICAgICB2YXIgYXVkaW9UcmFja0xlbmd0aCA9IGF1ZGlvID8gYXVkaW8uZW5kUFRTIC0gYXVkaW8uc3RhcnRQVFMgOiAwO1xuICAgICAgICAgICAgICAvLyBpZiBpbml0U2VnbWVudCB3YXMgZ2VuZXJhdGVkIHdpdGhvdXQgdmlkZW8gc2FtcGxlcywgcmVnZW5lcmF0ZSBpdCBhZ2FpblxuICAgICAgICAgICAgICBpZiAoIXZpZGVvVHJhY2suaW5wdXRUaW1lU2NhbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdbbXA0LXJlbXV4ZXJdOiByZWdlbmVyYXRlIEluaXRTZWdtZW50IGFzIHZpZGVvIGRldGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgaW5pdFNlZ21lbnQgPSB0aGlzLmdlbmVyYXRlSVMoYXVkaW9UcmFjaywgdmlkZW9UcmFjaywgdGltZU9mZnNldCwgYWNjdXJhdGVUaW1lT2Zmc2V0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2aWRlbyA9IHRoaXMucmVtdXhWaWRlbyh2aWRlb1RyYWNrLCB2aWRlb1RpbWVPZmZzZXQsIGlzVmlkZW9Db250aWd1b3VzLCBhdWRpb1RyYWNrTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGVub3VnaFZpZGVvU2FtcGxlcykge1xuICAgICAgICAgICAgdmlkZW8gPSB0aGlzLnJlbXV4VmlkZW8odmlkZW9UcmFjaywgdmlkZW9UaW1lT2Zmc2V0LCBpc1ZpZGVvQ29udGlndW91cywgMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2aWRlbykge1xuICAgICAgICAgICAgdmlkZW8uZmlyc3RLZXlGcmFtZSA9IGZpcnN0S2V5RnJhbWVJbmRleDtcbiAgICAgICAgICAgIHZpZGVvLmluZGVwZW5kZW50ID0gZmlyc3RLZXlGcmFtZUluZGV4ICE9PSAtMTtcbiAgICAgICAgICAgIHZpZGVvLmZpcnN0S2V5RnJhbWVQVFMgPSBmaXJzdEtleUZyYW1lUFRTO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBbGxvdyBJRDMgYW5kIHRleHQgdG8gcmVtdXgsIGV2ZW4gaWYgbW9yZSBhdWRpby92aWRlbyBzYW1wbGVzIGFyZSByZXF1aXJlZFxuICAgICAgaWYgKHRoaXMuSVNHZW5lcmF0ZWQgJiYgdGhpcy5faW5pdFBUUyAmJiB0aGlzLl9pbml0RFRTKSB7XG4gICAgICAgIGlmIChpZDNUcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgICAgIGlkMyA9IGZsdXNoVGV4dFRyYWNrTWV0YWRhdGFDdWVTYW1wbGVzKGlkM1RyYWNrLCB0aW1lT2Zmc2V0LCB0aGlzLl9pbml0UFRTLCB0aGlzLl9pbml0RFRTKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4dFRyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGV4dCA9IGZsdXNoVGV4dFRyYWNrVXNlcmRhdGFDdWVTYW1wbGVzKHRleHRUcmFjaywgdGltZU9mZnNldCwgdGhpcy5faW5pdFBUUyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGF1ZGlvOiBhdWRpbyxcbiAgICAgICAgdmlkZW86IHZpZGVvLFxuICAgICAgICBpbml0U2VnbWVudDogaW5pdFNlZ21lbnQsXG4gICAgICAgIGluZGVwZW5kZW50OiBpbmRlcGVuZGVudCxcbiAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgaWQzOiBpZDNcbiAgICAgIH07XG4gICAgfTtcbiAgICBfcHJvdG8uZ2VuZXJhdGVJUyA9IGZ1bmN0aW9uIGdlbmVyYXRlSVMoYXVkaW9UcmFjaywgdmlkZW9UcmFjaywgdGltZU9mZnNldCwgYWNjdXJhdGVUaW1lT2Zmc2V0KSB7XG4gICAgICB2YXIgYXVkaW9TYW1wbGVzID0gYXVkaW9UcmFjay5zYW1wbGVzO1xuICAgICAgdmFyIHZpZGVvU2FtcGxlcyA9IHZpZGVvVHJhY2suc2FtcGxlcztcbiAgICAgIHZhciB0eXBlU3VwcG9ydGVkID0gdGhpcy50eXBlU3VwcG9ydGVkO1xuICAgICAgdmFyIHRyYWNrcyA9IHt9O1xuICAgICAgdmFyIF9pbml0UFRTID0gdGhpcy5faW5pdFBUUztcbiAgICAgIHZhciBjb21wdXRlUFRTRFRTID0gIV9pbml0UFRTIHx8IGFjY3VyYXRlVGltZU9mZnNldDtcbiAgICAgIHZhciBjb250YWluZXIgPSAnYXVkaW8vbXA0JztcbiAgICAgIHZhciBpbml0UFRTO1xuICAgICAgdmFyIGluaXREVFM7XG4gICAgICB2YXIgdGltZXNjYWxlO1xuICAgICAgdmFyIHRyYWNrSWQ7XG4gICAgICBpZiAoY29tcHV0ZVBUU0RUUykge1xuICAgICAgICBpbml0UFRTID0gaW5pdERUUyA9IEluZmluaXR5O1xuICAgICAgfVxuICAgICAgaWYgKGF1ZGlvVHJhY2suY29uZmlnICYmIGF1ZGlvU2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gbGV0J3MgdXNlIGF1ZGlvIHNhbXBsaW5nIHJhdGUgYXMgTVA0IHRpbWUgc2NhbGUuXG4gICAgICAgIC8vIHJhdGlvbmFsZSBpcyB0aGF0IHRoZXJlIGlzIGEgaW50ZWdlciBuYiBvZiBhdWRpbyBmcmFtZXMgcGVyIGF1ZGlvIHNhbXBsZSAoMTAyNCBmb3IgQUFDKVxuICAgICAgICAvLyB1c2luZyBhdWRpbyBzYW1wbGluZyByYXRlIGhlcmUgaGVscHMgaGF2aW5nIGFuIGludGVnZXIgTVA0IGZyYW1lIGR1cmF0aW9uXG4gICAgICAgIC8vIHRoaXMgYXZvaWRzIHBvdGVudGlhbCByb3VuZGluZyBpc3N1ZSBhbmQgQVYgc3luYyBpc3N1ZVxuICAgICAgICBhdWRpb1RyYWNrLnRpbWVzY2FsZSA9IGF1ZGlvVHJhY2suc2FtcGxlcmF0ZTtcbiAgICAgICAgc3dpdGNoIChhdWRpb1RyYWNrLnNlZ21lbnRDb2RlYykge1xuICAgICAgICAgIGNhc2UgJ21wMyc6XG4gICAgICAgICAgICBpZiAodHlwZVN1cHBvcnRlZC5tcGVnKSB7XG4gICAgICAgICAgICAgIC8vIENocm9tZSBhbmQgU2FmYXJpXG4gICAgICAgICAgICAgIGNvbnRhaW5lciA9ICdhdWRpby9tcGVnJztcbiAgICAgICAgICAgICAgYXVkaW9UcmFjay5jb2RlYyA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlU3VwcG9ydGVkLm1wMykge1xuICAgICAgICAgICAgICAvLyBGaXJlZm94XG4gICAgICAgICAgICAgIGF1ZGlvVHJhY2suY29kZWMgPSAnbXAzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2FjMyc6XG4gICAgICAgICAgICBhdWRpb1RyYWNrLmNvZGVjID0gJ2FjLTMnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2tzLmF1ZGlvID0ge1xuICAgICAgICAgIGlkOiAnYXVkaW8nLFxuICAgICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgICAgIGNvZGVjOiBhdWRpb1RyYWNrLmNvZGVjLFxuICAgICAgICAgIGluaXRTZWdtZW50OiBhdWRpb1RyYWNrLnNlZ21lbnRDb2RlYyA9PT0gJ21wMycgJiYgdHlwZVN1cHBvcnRlZC5tcGVnID8gbmV3IFVpbnQ4QXJyYXkoMCkgOiBNUDQuaW5pdFNlZ21lbnQoW2F1ZGlvVHJhY2tdKSxcbiAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgY2hhbm5lbENvdW50OiBhdWRpb1RyYWNrLmNoYW5uZWxDb3VudFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGNvbXB1dGVQVFNEVFMpIHtcbiAgICAgICAgICB0cmFja0lkID0gYXVkaW9UcmFjay5pZDtcbiAgICAgICAgICB0aW1lc2NhbGUgPSBhdWRpb1RyYWNrLmlucHV0VGltZVNjYWxlO1xuICAgICAgICAgIGlmICghX2luaXRQVFMgfHwgdGltZXNjYWxlICE9PSBfaW5pdFBUUy50aW1lc2NhbGUpIHtcbiAgICAgICAgICAgIC8vIHJlbWVtYmVyIGZpcnN0IFBUUyBvZiB0aGlzIGRlbXV4aW5nIGNvbnRleHQuIGZvciBhdWRpbywgUFRTID0gRFRTXG4gICAgICAgICAgICBpbml0UFRTID0gaW5pdERUUyA9IGF1ZGlvU2FtcGxlc1swXS5wdHMgLSBNYXRoLnJvdW5kKHRpbWVzY2FsZSAqIHRpbWVPZmZzZXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wdXRlUFRTRFRTID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodmlkZW9UcmFjay5zcHMgJiYgdmlkZW9UcmFjay5wcHMgJiYgdmlkZW9TYW1wbGVzLmxlbmd0aCkge1xuICAgICAgICAvLyBsZXQncyB1c2UgaW5wdXQgdGltZSBzY2FsZSBhcyBNUDQgdmlkZW8gdGltZXNjYWxlXG4gICAgICAgIC8vIHdlIHVzZSBpbnB1dCB0aW1lIHNjYWxlIHN0cmFpZ2h0IGF3YXkgdG8gYXZvaWQgcm91bmRpbmcgaXNzdWVzIG9uIGZyYW1lIGR1cmF0aW9uIC8gY3RzIGNvbXB1dGF0aW9uXG4gICAgICAgIHZpZGVvVHJhY2sudGltZXNjYWxlID0gdmlkZW9UcmFjay5pbnB1dFRpbWVTY2FsZTtcbiAgICAgICAgdHJhY2tzLnZpZGVvID0ge1xuICAgICAgICAgIGlkOiAnbWFpbicsXG4gICAgICAgICAgY29udGFpbmVyOiAndmlkZW8vbXA0JyxcbiAgICAgICAgICBjb2RlYzogdmlkZW9UcmFjay5jb2RlYyxcbiAgICAgICAgICBpbml0U2VnbWVudDogTVA0LmluaXRTZWdtZW50KFt2aWRlb1RyYWNrXSksXG4gICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgIHdpZHRoOiB2aWRlb1RyYWNrLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB2aWRlb1RyYWNrLmhlaWdodFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGNvbXB1dGVQVFNEVFMpIHtcbiAgICAgICAgICB0cmFja0lkID0gdmlkZW9UcmFjay5pZDtcbiAgICAgICAgICB0aW1lc2NhbGUgPSB2aWRlb1RyYWNrLmlucHV0VGltZVNjYWxlO1xuICAgICAgICAgIGlmICghX2luaXRQVFMgfHwgdGltZXNjYWxlICE9PSBfaW5pdFBUUy50aW1lc2NhbGUpIHtcbiAgICAgICAgICAgIHZhciBzdGFydFBUUyA9IHRoaXMuZ2V0VmlkZW9TdGFydFB0cyh2aWRlb1NhbXBsZXMpO1xuICAgICAgICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gTWF0aC5yb3VuZCh0aW1lc2NhbGUgKiB0aW1lT2Zmc2V0KTtcbiAgICAgICAgICAgIGluaXREVFMgPSBNYXRoLm1pbihpbml0RFRTLCBub3JtYWxpemVQdHModmlkZW9TYW1wbGVzWzBdLmR0cywgc3RhcnRQVFMpIC0gc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgaW5pdFBUUyA9IE1hdGgubWluKGluaXRQVFMsIHN0YXJ0UFRTIC0gc3RhcnRPZmZzZXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wdXRlUFRTRFRTID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudmlkZW9UcmFja0NvbmZpZyA9IHtcbiAgICAgICAgICB3aWR0aDogdmlkZW9UcmFjay53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IHZpZGVvVHJhY2suaGVpZ2h0LFxuICAgICAgICAgIHBpeGVsUmF0aW86IHZpZGVvVHJhY2sucGl4ZWxSYXRpb1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5rZXlzKHRyYWNrcykubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuSVNHZW5lcmF0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoY29tcHV0ZVBUU0RUUykge1xuICAgICAgICAgIHRoaXMuX2luaXRQVFMgPSB7XG4gICAgICAgICAgICBiYXNlVGltZTogaW5pdFBUUyxcbiAgICAgICAgICAgIHRpbWVzY2FsZTogdGltZXNjYWxlXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aGlzLl9pbml0RFRTID0ge1xuICAgICAgICAgICAgYmFzZVRpbWU6IGluaXREVFMsXG4gICAgICAgICAgICB0aW1lc2NhbGU6IHRpbWVzY2FsZVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5pdFBUUyA9IHRpbWVzY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRyYWNrczogdHJhY2tzLFxuICAgICAgICAgIGluaXRQVFM6IGluaXRQVFMsXG4gICAgICAgICAgdGltZXNjYWxlOiB0aW1lc2NhbGUsXG4gICAgICAgICAgdHJhY2tJZDogdHJhY2tJZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnJlbXV4VmlkZW8gPSBmdW5jdGlvbiByZW11eFZpZGVvKHRyYWNrLCB0aW1lT2Zmc2V0LCBjb250aWd1b3VzLCBhdWRpb1RyYWNrTGVuZ3RoKSB7XG4gICAgICB2YXIgdGltZVNjYWxlID0gdHJhY2suaW5wdXRUaW1lU2NhbGU7XG4gICAgICB2YXIgaW5wdXRTYW1wbGVzID0gdHJhY2suc2FtcGxlcztcbiAgICAgIHZhciBvdXRwdXRTYW1wbGVzID0gW107XG4gICAgICB2YXIgbmJTYW1wbGVzID0gaW5wdXRTYW1wbGVzLmxlbmd0aDtcbiAgICAgIHZhciBpbml0UFRTID0gdGhpcy5faW5pdFBUUztcbiAgICAgIHZhciBuZXh0QXZjRHRzID0gdGhpcy5uZXh0QXZjRHRzO1xuICAgICAgdmFyIG9mZnNldCA9IDg7XG4gICAgICB2YXIgbXA0U2FtcGxlRHVyYXRpb24gPSB0aGlzLnZpZGVvU2FtcGxlRHVyYXRpb247XG4gICAgICB2YXIgZmlyc3REVFM7XG4gICAgICB2YXIgbGFzdERUUztcbiAgICAgIHZhciBtaW5QVFMgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICB2YXIgbWF4UFRTID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgICAgdmFyIHNvcnRTYW1wbGVzID0gZmFsc2U7XG5cbiAgICAgIC8vIGlmIHBhcnNlZCBmcmFnbWVudCBpcyBjb250aWd1b3VzIHdpdGggbGFzdCBvbmUsIGxldCdzIHVzZSBsYXN0IERUUyB2YWx1ZSBhcyByZWZlcmVuY2VcbiAgICAgIGlmICghY29udGlndW91cyB8fCBuZXh0QXZjRHRzID09PSBudWxsKSB7XG4gICAgICAgIHZhciBwdHMgPSB0aW1lT2Zmc2V0ICogdGltZVNjYWxlO1xuICAgICAgICB2YXIgY3RzID0gaW5wdXRTYW1wbGVzWzBdLnB0cyAtIG5vcm1hbGl6ZVB0cyhpbnB1dFNhbXBsZXNbMF0uZHRzLCBpbnB1dFNhbXBsZXNbMF0ucHRzKTtcbiAgICAgICAgaWYgKGNocm9tZVZlcnNpb24gJiYgbmV4dEF2Y0R0cyAhPT0gbnVsbCAmJiBNYXRoLmFicyhwdHMgLSBjdHMgLSBuZXh0QXZjRHRzKSA8IDE1MDAwKSB7XG4gICAgICAgICAgLy8gdHJlYXQgYXMgY29udGlnb3VzIHRvIGFkanVzdCBzYW1wbGVzIHRoYXQgd291bGQgb3RoZXJ3aXNlIHByb2R1Y2UgdmlkZW8gYnVmZmVyIGdhcHMgaW4gQ2hyb21lXG4gICAgICAgICAgY29udGlndW91cyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaWYgbm90IGNvbnRpZ3VvdXMsIGxldCdzIHVzZSB0YXJnZXQgdGltZU9mZnNldFxuICAgICAgICAgIG5leHRBdmNEdHMgPSBwdHMgLSBjdHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUFRTIGlzIGNvZGVkIG9uIDMzYml0cywgYW5kIGNhbiBsb29wIGZyb20gLTJeMzIgdG8gMl4zMlxuICAgICAgLy8gUFRTTm9ybWFsaXplIHdpbGwgbWFrZSBQVFMvRFRTIHZhbHVlIG1vbm90b25pYywgd2UgdXNlIGxhc3Qga25vd24gRFRTIHZhbHVlIGFzIHJlZmVyZW5jZSB2YWx1ZVxuICAgICAgdmFyIGluaXRUaW1lID0gaW5pdFBUUy5iYXNlVGltZSAqIHRpbWVTY2FsZSAvIGluaXRQVFMudGltZXNjYWxlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYlNhbXBsZXM7IGkrKykge1xuICAgICAgICB2YXIgc2FtcGxlID0gaW5wdXRTYW1wbGVzW2ldO1xuICAgICAgICBzYW1wbGUucHRzID0gbm9ybWFsaXplUHRzKHNhbXBsZS5wdHMgLSBpbml0VGltZSwgbmV4dEF2Y0R0cyk7XG4gICAgICAgIHNhbXBsZS5kdHMgPSBub3JtYWxpemVQdHMoc2FtcGxlLmR0cyAtIGluaXRUaW1lLCBuZXh0QXZjRHRzKTtcbiAgICAgICAgaWYgKHNhbXBsZS5kdHMgPCBpbnB1dFNhbXBsZXNbaSA+IDAgPyBpIC0gMSA6IGldLmR0cykge1xuICAgICAgICAgIHNvcnRTYW1wbGVzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBzb3J0IHZpZGVvIHNhbXBsZXMgYnkgRFRTIHRoZW4gUFRTIHRoZW4gZGVtdXggaWQgb3JkZXJcbiAgICAgIGlmIChzb3J0U2FtcGxlcykge1xuICAgICAgICBpbnB1dFNhbXBsZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHZhciBkZWx0YWR0cyA9IGEuZHRzIC0gYi5kdHM7XG4gICAgICAgICAgdmFyIGRlbHRhcHRzID0gYS5wdHMgLSBiLnB0cztcbiAgICAgICAgICByZXR1cm4gZGVsdGFkdHMgfHwgZGVsdGFwdHM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgZmlyc3QvbGFzdCBEVFNcbiAgICAgIGZpcnN0RFRTID0gaW5wdXRTYW1wbGVzWzBdLmR0cztcbiAgICAgIGxhc3REVFMgPSBpbnB1dFNhbXBsZXNbaW5wdXRTYW1wbGVzLmxlbmd0aCAtIDFdLmR0cztcblxuICAgICAgLy8gU2FtcGxlIGR1cmF0aW9uIChhcyBleHBlY3RlZCBieSB0cnVuIE1QNCBib3hlcyksIHNob3VsZCBiZSB0aGUgZGVsdGEgYmV0d2VlbiBzYW1wbGUgRFRTXG4gICAgICAvLyBzZXQgdGhpcyBjb25zdGFudCBkdXJhdGlvbiBhcyBiZWluZyB0aGUgYXZnIGRlbHRhIGJldHdlZW4gY29uc2VjdXRpdmUgRFRTLlxuICAgICAgdmFyIGlucHV0RHVyYXRpb24gPSBsYXN0RFRTIC0gZmlyc3REVFM7XG4gICAgICB2YXIgYXZlcmFnZVNhbXBsZUR1cmF0aW9uID0gaW5wdXREdXJhdGlvbiA/IE1hdGgucm91bmQoaW5wdXREdXJhdGlvbiAvIChuYlNhbXBsZXMgLSAxKSkgOiBtcDRTYW1wbGVEdXJhdGlvbiB8fCB0cmFjay5pbnB1dFRpbWVTY2FsZSAvIDMwO1xuXG4gICAgICAvLyBpZiBmcmFnbWVudCBhcmUgY29udGlndW91cywgZGV0ZWN0IGhvbGUvb3ZlcmxhcHBpbmcgYmV0d2VlbiBmcmFnbWVudHNcbiAgICAgIGlmIChjb250aWd1b3VzKSB7XG4gICAgICAgIC8vIGNoZWNrIHRpbWVzdGFtcCBjb250aW51aXR5IGFjcm9zcyBjb25zZWN1dGl2ZSBmcmFnbWVudHMgKHRoaXMgaXMgdG8gcmVtb3ZlIGludGVyLWZyYWdtZW50IGdhcC9ob2xlKVxuICAgICAgICB2YXIgZGVsdGEgPSBmaXJzdERUUyAtIG5leHRBdmNEdHM7XG4gICAgICAgIHZhciBmb3VuZEhvbGUgPSBkZWx0YSA+IGF2ZXJhZ2VTYW1wbGVEdXJhdGlvbjtcbiAgICAgICAgdmFyIGZvdW5kT3ZlcmxhcCA9IGRlbHRhIDwgLTE7XG4gICAgICAgIGlmIChmb3VuZEhvbGUgfHwgZm91bmRPdmVybGFwKSB7XG4gICAgICAgICAgaWYgKGZvdW5kSG9sZSkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybigodHJhY2suc2VnbWVudENvZGVjIHx8ICcnKS50b1VwcGVyQ2FzZSgpICsgXCI6IFwiICsgdG9Nc0Zyb21NcGVnVHNDbG9jayhkZWx0YSwgdHJ1ZSkgKyBcIiBtcyAoXCIgKyBkZWx0YSArIFwiZHRzKSBob2xlIGJldHdlZW4gZnJhZ21lbnRzIGRldGVjdGVkIGF0IFwiICsgdGltZU9mZnNldC50b0ZpeGVkKDMpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybigodHJhY2suc2VnbWVudENvZGVjIHx8ICcnKS50b1VwcGVyQ2FzZSgpICsgXCI6IFwiICsgdG9Nc0Zyb21NcGVnVHNDbG9jaygtZGVsdGEsIHRydWUpICsgXCIgbXMgKFwiICsgZGVsdGEgKyBcImR0cykgb3ZlcmxhcHBpbmcgYmV0d2VlbiBmcmFnbWVudHMgZGV0ZWN0ZWQgYXQgXCIgKyB0aW1lT2Zmc2V0LnRvRml4ZWQoMykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWZvdW5kT3ZlcmxhcCB8fCBuZXh0QXZjRHRzID49IGlucHV0U2FtcGxlc1swXS5wdHMgfHwgY2hyb21lVmVyc2lvbikge1xuICAgICAgICAgICAgZmlyc3REVFMgPSBuZXh0QXZjRHRzO1xuICAgICAgICAgICAgdmFyIGZpcnN0UFRTID0gaW5wdXRTYW1wbGVzWzBdLnB0cyAtIGRlbHRhO1xuICAgICAgICAgICAgaWYgKGZvdW5kSG9sZSkge1xuICAgICAgICAgICAgICBpbnB1dFNhbXBsZXNbMF0uZHRzID0gZmlyc3REVFM7XG4gICAgICAgICAgICAgIGlucHV0U2FtcGxlc1swXS5wdHMgPSBmaXJzdFBUUztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBpc1BUU09yZGVyUmV0YWluZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgaW5wdXRTYW1wbGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dFNhbXBsZXNbX2ldLmR0cyA+IGZpcnN0UFRTICYmIGlzUFRTT3JkZXJSZXRhaW5lZCkge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwcmV2UFRTID0gaW5wdXRTYW1wbGVzW19pXS5wdHM7XG4gICAgICAgICAgICAgICAgaW5wdXRTYW1wbGVzW19pXS5kdHMgLT0gZGVsdGE7XG4gICAgICAgICAgICAgICAgaW5wdXRTYW1wbGVzW19pXS5wdHMgLT0gZGVsdGE7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayB0byBzZWUgaWYgdGhpcyBzYW1wbGUncyBQVFMgb3JkZXIgaGFzIGNoYW5nZWRcbiAgICAgICAgICAgICAgICAvLyByZWxhdGl2ZSB0byB0aGUgbmV4dCBvbmVcbiAgICAgICAgICAgICAgICBpZiAoX2kgPCBpbnB1dFNhbXBsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG5leHRTYW1wbGVQVFMgPSBpbnB1dFNhbXBsZXNbX2kgKyAxXS5wdHM7XG4gICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFNhbXBsZVBUUyA9IGlucHV0U2FtcGxlc1tfaV0ucHRzO1xuICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRPcmRlciA9IG5leHRTYW1wbGVQVFMgPD0gY3VycmVudFNhbXBsZVBUUztcbiAgICAgICAgICAgICAgICAgIHZhciBwcmV2T3JkZXIgPSBuZXh0U2FtcGxlUFRTIDw9IHByZXZQVFM7XG4gICAgICAgICAgICAgICAgICBpc1BUU09yZGVyUmV0YWluZWQgPSBjdXJyZW50T3JkZXIgPT0gcHJldk9yZGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKFwiVmlkZW86IEluaXRpYWwgUFRTL0RUUyBhZGp1c3RlZDogXCIgKyB0b01zRnJvbU1wZWdUc0Nsb2NrKGZpcnN0UFRTLCB0cnVlKSArIFwiL1wiICsgdG9Nc0Zyb21NcGVnVHNDbG9jayhmaXJzdERUUywgdHJ1ZSkgKyBcIiwgZGVsdGE6IFwiICsgdG9Nc0Zyb21NcGVnVHNDbG9jayhkZWx0YSwgdHJ1ZSkgKyBcIiBtc1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZpcnN0RFRTID0gTWF0aC5tYXgoMCwgZmlyc3REVFMpO1xuICAgICAgdmFyIG5iTmFsdSA9IDA7XG4gICAgICB2YXIgbmFsdUxlbiA9IDA7XG4gICAgICB2YXIgZHRzU3RlcCA9IGZpcnN0RFRTO1xuICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgbmJTYW1wbGVzOyBfaTIrKykge1xuICAgICAgICAvLyBjb21wdXRlIHRvdGFsL2F2YyBzYW1wbGUgbGVuZ3RoIGFuZCBuYiBvZiBOQUwgdW5pdHNcbiAgICAgICAgdmFyIF9zYW1wbGUgPSBpbnB1dFNhbXBsZXNbX2kyXTtcbiAgICAgICAgdmFyIHVuaXRzID0gX3NhbXBsZS51bml0cztcbiAgICAgICAgdmFyIG5iVW5pdHMgPSB1bml0cy5sZW5ndGg7XG4gICAgICAgIHZhciBzYW1wbGVMZW4gPSAwO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5iVW5pdHM7IGorKykge1xuICAgICAgICAgIHNhbXBsZUxlbiArPSB1bml0c1tqXS5kYXRhLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBuYWx1TGVuICs9IHNhbXBsZUxlbjtcbiAgICAgICAgbmJOYWx1ICs9IG5iVW5pdHM7XG4gICAgICAgIF9zYW1wbGUubGVuZ3RoID0gc2FtcGxlTGVuO1xuXG4gICAgICAgIC8vIGVuc3VyZSBzYW1wbGUgbW9ub3RvbmljIERUU1xuICAgICAgICBpZiAoX3NhbXBsZS5kdHMgPCBkdHNTdGVwKSB7XG4gICAgICAgICAgX3NhbXBsZS5kdHMgPSBkdHNTdGVwO1xuICAgICAgICAgIGR0c1N0ZXAgKz0gYXZlcmFnZVNhbXBsZUR1cmF0aW9uIC8gNCB8IDAgfHwgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkdHNTdGVwID0gX3NhbXBsZS5kdHM7XG4gICAgICAgIH1cbiAgICAgICAgbWluUFRTID0gTWF0aC5taW4oX3NhbXBsZS5wdHMsIG1pblBUUyk7XG4gICAgICAgIG1heFBUUyA9IE1hdGgubWF4KF9zYW1wbGUucHRzLCBtYXhQVFMpO1xuICAgICAgfVxuICAgICAgbGFzdERUUyA9IGlucHV0U2FtcGxlc1tuYlNhbXBsZXMgLSAxXS5kdHM7XG5cbiAgICAgIC8qIGNvbmNhdGVuYXRlIHRoZSB2aWRlbyBkYXRhIGFuZCBjb25zdHJ1Y3QgdGhlIG1kYXQgaW4gcGxhY2VcbiAgICAgICAgKG5lZWQgOCBtb3JlIGJ5dGVzIHRvIGZpbGwgbGVuZ3RoIGFuZCBtcGRhdCB0eXBlKSAqL1xuICAgICAgdmFyIG1kYXRTaXplID0gbmFsdUxlbiArIDQgKiBuYk5hbHUgKyA4O1xuICAgICAgdmFyIG1kYXQ7XG4gICAgICB0cnkge1xuICAgICAgICBtZGF0ID0gbmV3IFVpbnQ4QXJyYXkobWRhdFNpemUpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIuZW1pdChFdmVudHMuRVJST1IsIEV2ZW50cy5FUlJPUiwge1xuICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTVVYX0VSUk9SLFxuICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5SRU1VWF9BTExPQ19FUlJPUixcbiAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgICBieXRlczogbWRhdFNpemUsXG4gICAgICAgICAgcmVhc29uOiBcImZhaWwgYWxsb2NhdGluZyB2aWRlbyBtZGF0IFwiICsgbWRhdFNpemVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KG1kYXQuYnVmZmVyKTtcbiAgICAgIHZpZXcuc2V0VWludDMyKDAsIG1kYXRTaXplKTtcbiAgICAgIG1kYXQuc2V0KE1QNC50eXBlcy5tZGF0LCA0KTtcbiAgICAgIHZhciBzdHJldGNoZWRMYXN0RnJhbWUgPSBmYWxzZTtcbiAgICAgIHZhciBtaW5EdHNEZWx0YSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgIHZhciBtaW5QdHNEZWx0YSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgIHZhciBtYXhEdHNEZWx0YSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICAgIHZhciBtYXhQdHNEZWx0YSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IG5iU2FtcGxlczsgX2kzKyspIHtcbiAgICAgICAgdmFyIFZpZGVvU2FtcGxlID0gaW5wdXRTYW1wbGVzW19pM107XG4gICAgICAgIHZhciBWaWRlb1NhbXBsZVVuaXRzID0gVmlkZW9TYW1wbGUudW5pdHM7XG4gICAgICAgIHZhciBtcDRTYW1wbGVMZW5ndGggPSAwO1xuICAgICAgICAvLyBjb252ZXJ0IE5BTFUgYml0c3RyZWFtIHRvIE1QNCBmb3JtYXQgKHByZXBlbmQgTkFMVSB3aXRoIHNpemUgZmllbGQpXG4gICAgICAgIGZvciAodmFyIF9qID0gMCwgX25iVW5pdHMgPSBWaWRlb1NhbXBsZVVuaXRzLmxlbmd0aDsgX2ogPCBfbmJVbml0czsgX2orKykge1xuICAgICAgICAgIHZhciB1bml0ID0gVmlkZW9TYW1wbGVVbml0c1tfal07XG4gICAgICAgICAgdmFyIHVuaXREYXRhID0gdW5pdC5kYXRhO1xuICAgICAgICAgIHZhciB1bml0RGF0YUxlbiA9IHVuaXQuZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIHZpZXcuc2V0VWludDMyKG9mZnNldCwgdW5pdERhdGFMZW4pO1xuICAgICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICAgIG1kYXQuc2V0KHVuaXREYXRhLCBvZmZzZXQpO1xuICAgICAgICAgIG9mZnNldCArPSB1bml0RGF0YUxlbjtcbiAgICAgICAgICBtcDRTYW1wbGVMZW5ndGggKz0gNCArIHVuaXREYXRhTGVuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXhwZWN0ZWQgc2FtcGxlIGR1cmF0aW9uIGlzIHRoZSBEZWNvZGluZyBUaW1lc3RhbXAgZGlmZiBvZiBjb25zZWN1dGl2ZSBzYW1wbGVzXG4gICAgICAgIHZhciBwdHNEZWx0YSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKF9pMyA8IG5iU2FtcGxlcyAtIDEpIHtcbiAgICAgICAgICBtcDRTYW1wbGVEdXJhdGlvbiA9IGlucHV0U2FtcGxlc1tfaTMgKyAxXS5kdHMgLSBWaWRlb1NhbXBsZS5kdHM7XG4gICAgICAgICAgcHRzRGVsdGEgPSBpbnB1dFNhbXBsZXNbX2kzICsgMV0ucHRzIC0gVmlkZW9TYW1wbGUucHRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICAgICAgICB2YXIgbGFzdEZyYW1lRHVyYXRpb24gPSBfaTMgPiAwID8gVmlkZW9TYW1wbGUuZHRzIC0gaW5wdXRTYW1wbGVzW19pMyAtIDFdLmR0cyA6IGF2ZXJhZ2VTYW1wbGVEdXJhdGlvbjtcbiAgICAgICAgICBwdHNEZWx0YSA9IF9pMyA+IDAgPyBWaWRlb1NhbXBsZS5wdHMgLSBpbnB1dFNhbXBsZXNbX2kzIC0gMV0ucHRzIDogYXZlcmFnZVNhbXBsZUR1cmF0aW9uO1xuICAgICAgICAgIGlmIChjb25maWcuc3RyZXRjaFNob3J0VmlkZW9UcmFjayAmJiB0aGlzLm5leHRBdWRpb1B0cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSW4gc29tZSBjYXNlcywgYSBzZWdtZW50J3MgYXVkaW8gdHJhY2sgZHVyYXRpb24gbWF5IGV4Y2VlZCB0aGUgdmlkZW8gdHJhY2sgZHVyYXRpb24uXG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSd2ZSBhbHJlYWR5IHJlbXV4ZWQgYXVkaW8sIGFuZCB3ZSBrbm93IGhvdyBsb25nIHRoZSBhdWRpbyB0cmFjayBpcywgd2UgbG9vayB0b1xuICAgICAgICAgICAgLy8gc2VlIGlmIHRoZSBkZWx0YSB0byB0aGUgbmV4dCBzZWdtZW50IGlzIGxvbmdlciB0aGFuIG1heEJ1ZmZlckhvbGUuXG4gICAgICAgICAgICAvLyBJZiBzbywgcGxheWJhY2sgd291bGQgcG90ZW50aWFsbHkgZ2V0IHN0dWNrLCBzbyB3ZSBhcnRpZmljaWFsbHkgaW5mbGF0ZVxuICAgICAgICAgICAgLy8gdGhlIGR1cmF0aW9uIG9mIHRoZSBsYXN0IGZyYW1lIHRvIG1pbmltaXplIGFueSBwb3RlbnRpYWwgZ2FwIGJldHdlZW4gc2VnbWVudHMuXG4gICAgICAgICAgICB2YXIgZ2FwVG9sZXJhbmNlID0gTWF0aC5mbG9vcihjb25maWcubWF4QnVmZmVySG9sZSAqIHRpbWVTY2FsZSk7XG4gICAgICAgICAgICB2YXIgZGVsdGFUb0ZyYW1lRW5kID0gKGF1ZGlvVHJhY2tMZW5ndGggPyBtaW5QVFMgKyBhdWRpb1RyYWNrTGVuZ3RoICogdGltZVNjYWxlIDogdGhpcy5uZXh0QXVkaW9QdHMpIC0gVmlkZW9TYW1wbGUucHRzO1xuICAgICAgICAgICAgaWYgKGRlbHRhVG9GcmFtZUVuZCA+IGdhcFRvbGVyYW5jZSkge1xuICAgICAgICAgICAgICAvLyBXZSBzdWJ0cmFjdCBsYXN0RnJhbWVEdXJhdGlvbiBmcm9tIGRlbHRhVG9GcmFtZUVuZCB0byB0cnkgdG8gcHJldmVudCBhbnkgdmlkZW9cbiAgICAgICAgICAgICAgLy8gZnJhbWUgb3ZlcmxhcC4gbWF4QnVmZmVySG9sZSBzaG91bGQgYmUgPj4gbGFzdEZyYW1lRHVyYXRpb24gYW55d2F5LlxuICAgICAgICAgICAgICBtcDRTYW1wbGVEdXJhdGlvbiA9IGRlbHRhVG9GcmFtZUVuZCAtIGxhc3RGcmFtZUR1cmF0aW9uO1xuICAgICAgICAgICAgICBpZiAobXA0U2FtcGxlRHVyYXRpb24gPCAwKSB7XG4gICAgICAgICAgICAgICAgbXA0U2FtcGxlRHVyYXRpb24gPSBsYXN0RnJhbWVEdXJhdGlvbjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHJldGNoZWRMYXN0RnJhbWUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhcIlttcDQtcmVtdXhlcl06IEl0IGlzIGFwcHJveGltYXRlbHkgXCIgKyBkZWx0YVRvRnJhbWVFbmQgLyA5MCArIFwiIG1zIHRvIHRoZSBuZXh0IHNlZ21lbnQ7IHVzaW5nIGR1cmF0aW9uIFwiICsgbXA0U2FtcGxlRHVyYXRpb24gLyA5MCArIFwiIG1zIGZvciB0aGUgbGFzdCB2aWRlbyBmcmFtZS5cIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtcDRTYW1wbGVEdXJhdGlvbiA9IGxhc3RGcmFtZUR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtcDRTYW1wbGVEdXJhdGlvbiA9IGxhc3RGcmFtZUR1cmF0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY29tcG9zaXRpb25UaW1lT2Zmc2V0ID0gTWF0aC5yb3VuZChWaWRlb1NhbXBsZS5wdHMgLSBWaWRlb1NhbXBsZS5kdHMpO1xuICAgICAgICBtaW5EdHNEZWx0YSA9IE1hdGgubWluKG1pbkR0c0RlbHRhLCBtcDRTYW1wbGVEdXJhdGlvbik7XG4gICAgICAgIG1heER0c0RlbHRhID0gTWF0aC5tYXgobWF4RHRzRGVsdGEsIG1wNFNhbXBsZUR1cmF0aW9uKTtcbiAgICAgICAgbWluUHRzRGVsdGEgPSBNYXRoLm1pbihtaW5QdHNEZWx0YSwgcHRzRGVsdGEpO1xuICAgICAgICBtYXhQdHNEZWx0YSA9IE1hdGgubWF4KG1heFB0c0RlbHRhLCBwdHNEZWx0YSk7XG4gICAgICAgIG91dHB1dFNhbXBsZXMucHVzaChjcmVhdGVNcDRTYW1wbGUoVmlkZW9TYW1wbGUua2V5LCBtcDRTYW1wbGVEdXJhdGlvbiwgbXA0U2FtcGxlTGVuZ3RoLCBjb21wb3NpdGlvblRpbWVPZmZzZXQpKTtcbiAgICAgIH1cbiAgICAgIGlmIChvdXRwdXRTYW1wbGVzLmxlbmd0aCkge1xuICAgICAgICBpZiAoY2hyb21lVmVyc2lvbikge1xuICAgICAgICAgIGlmIChjaHJvbWVWZXJzaW9uIDwgNzApIHtcbiAgICAgICAgICAgIC8vIENocm9tZSB3b3JrYXJvdW5kLCBtYXJrIGZpcnN0IHNhbXBsZSBhcyBiZWluZyBhIFJhbmRvbSBBY2Nlc3MgUG9pbnQgKGtleWZyYW1lKSB0byBhdm9pZCBzb3VyY2VidWZmZXIgYXBwZW5kIGlzc3VlXG4gICAgICAgICAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjI5NDEyXG4gICAgICAgICAgICB2YXIgZmxhZ3MgPSBvdXRwdXRTYW1wbGVzWzBdLmZsYWdzO1xuICAgICAgICAgICAgZmxhZ3MuZGVwZW5kc09uID0gMjtcbiAgICAgICAgICAgIGZsYWdzLmlzTm9uU3luYyA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNhZmFyaVdlYmtpdFZlcnNpb24pIHtcbiAgICAgICAgICAvLyBGaXggZm9yIFwiQ05OIHNwZWNpYWwgcmVwb3J0LCB3aXRoIENDXCIgaW4gdGVzdC1zdHJlYW1zIChTYWZhcmkgYnJvd3NlciBvbmx5KVxuICAgICAgICAgIC8vIElnbm9yZSBEVFMgd2hlbiBmcmFtZSBkdXJhdGlvbnMgYXJlIGlycmVndWxhci4gU2FmYXJpIE1TRSBkb2VzIG5vdCBoYW5kbGUgdGhpcyBsZWFkaW5nIHRvIGdhcHMuXG4gICAgICAgICAgaWYgKG1heFB0c0RlbHRhIC0gbWluUHRzRGVsdGEgPCBtYXhEdHNEZWx0YSAtIG1pbkR0c0RlbHRhICYmIGF2ZXJhZ2VTYW1wbGVEdXJhdGlvbiAvIG1heER0c0RlbHRhIDwgMC4wMjUgJiYgb3V0cHV0U2FtcGxlc1swXS5jdHMgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ0ZvdW5kIGlycmVndWxhciBnYXBzIGluIHNhbXBsZSBkdXJhdGlvbi4gVXNpbmcgUFRTIGluc3RlYWQgb2YgRFRTIHRvIGRldGVybWluZSBNUDQgc2FtcGxlIGR1cmF0aW9uLicpO1xuICAgICAgICAgICAgdmFyIGR0cyA9IGZpcnN0RFRTO1xuICAgICAgICAgICAgZm9yICh2YXIgX2k0ID0gMCwgbGVuID0gb3V0cHV0U2FtcGxlcy5sZW5ndGg7IF9pNCA8IGxlbjsgX2k0KyspIHtcbiAgICAgICAgICAgICAgdmFyIG5leHREdHMgPSBkdHMgKyBvdXRwdXRTYW1wbGVzW19pNF0uZHVyYXRpb247XG4gICAgICAgICAgICAgIHZhciBfcHRzID0gZHRzICsgb3V0cHV0U2FtcGxlc1tfaTRdLmN0cztcbiAgICAgICAgICAgICAgaWYgKF9pNCA8IGxlbiAtIDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dFB0cyA9IG5leHREdHMgKyBvdXRwdXRTYW1wbGVzW19pNCArIDFdLmN0cztcbiAgICAgICAgICAgICAgICBvdXRwdXRTYW1wbGVzW19pNF0uZHVyYXRpb24gPSBuZXh0UHRzIC0gX3B0cztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRTYW1wbGVzW19pNF0uZHVyYXRpb24gPSBfaTQgPyBvdXRwdXRTYW1wbGVzW19pNCAtIDFdLmR1cmF0aW9uIDogYXZlcmFnZVNhbXBsZUR1cmF0aW9uO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG91dHB1dFNhbXBsZXNbX2k0XS5jdHMgPSAwO1xuICAgICAgICAgICAgICBkdHMgPSBuZXh0RHRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gbmV4dCBBVkMvSEVWQyBzYW1wbGUgRFRTIHNob3VsZCBiZSBlcXVhbCB0byBsYXN0IHNhbXBsZSBEVFMgKyBsYXN0IHNhbXBsZSBkdXJhdGlvbiAoaW4gUEVTIHRpbWVzY2FsZSlcbiAgICAgIG1wNFNhbXBsZUR1cmF0aW9uID0gc3RyZXRjaGVkTGFzdEZyYW1lIHx8ICFtcDRTYW1wbGVEdXJhdGlvbiA/IGF2ZXJhZ2VTYW1wbGVEdXJhdGlvbiA6IG1wNFNhbXBsZUR1cmF0aW9uO1xuICAgICAgdGhpcy5uZXh0QXZjRHRzID0gbmV4dEF2Y0R0cyA9IGxhc3REVFMgKyBtcDRTYW1wbGVEdXJhdGlvbjtcbiAgICAgIHRoaXMudmlkZW9TYW1wbGVEdXJhdGlvbiA9IG1wNFNhbXBsZUR1cmF0aW9uO1xuICAgICAgdGhpcy5pc1ZpZGVvQ29udGlndW91cyA9IHRydWU7XG4gICAgICB2YXIgbW9vZiA9IE1QNC5tb29mKHRyYWNrLnNlcXVlbmNlTnVtYmVyKyssIGZpcnN0RFRTLCBfZXh0ZW5kcyh0cmFjaywge1xuICAgICAgICBzYW1wbGVzOiBvdXRwdXRTYW1wbGVzXG4gICAgICB9KSk7XG4gICAgICB2YXIgdHlwZSA9ICd2aWRlbyc7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgZGF0YTE6IG1vb2YsXG4gICAgICAgIGRhdGEyOiBtZGF0LFxuICAgICAgICBzdGFydFBUUzogbWluUFRTIC8gdGltZVNjYWxlLFxuICAgICAgICBlbmRQVFM6IChtYXhQVFMgKyBtcDRTYW1wbGVEdXJhdGlvbikgLyB0aW1lU2NhbGUsXG4gICAgICAgIHN0YXJ0RFRTOiBmaXJzdERUUyAvIHRpbWVTY2FsZSxcbiAgICAgICAgZW5kRFRTOiBuZXh0QXZjRHRzIC8gdGltZVNjYWxlLFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBoYXNBdWRpbzogZmFsc2UsXG4gICAgICAgIGhhc1ZpZGVvOiB0cnVlLFxuICAgICAgICBuYjogb3V0cHV0U2FtcGxlcy5sZW5ndGgsXG4gICAgICAgIGRyb3BwZWQ6IHRyYWNrLmRyb3BwZWRcbiAgICAgIH07XG4gICAgICB0cmFjay5zYW1wbGVzID0gW107XG4gICAgICB0cmFjay5kcm9wcGVkID0gMDtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH07XG4gICAgX3Byb3RvLmdldFNhbXBsZXNQZXJGcmFtZSA9IGZ1bmN0aW9uIGdldFNhbXBsZXNQZXJGcmFtZSh0cmFjaykge1xuICAgICAgc3dpdGNoICh0cmFjay5zZWdtZW50Q29kZWMpIHtcbiAgICAgICAgY2FzZSAnbXAzJzpcbiAgICAgICAgICByZXR1cm4gTVBFR19BVURJT19TQU1QTEVfUEVSX0ZSQU1FO1xuICAgICAgICBjYXNlICdhYzMnOlxuICAgICAgICAgIHJldHVybiBBQzNfU0FNUExFU19QRVJfRlJBTUU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIEFBQ19TQU1QTEVTX1BFUl9GUkFNRTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5yZW11eEF1ZGlvID0gZnVuY3Rpb24gcmVtdXhBdWRpbyh0cmFjaywgdGltZU9mZnNldCwgY29udGlndW91cywgYWNjdXJhdGVUaW1lT2Zmc2V0LCB2aWRlb1RpbWVPZmZzZXQpIHtcbiAgICAgIHZhciBpbnB1dFRpbWVTY2FsZSA9IHRyYWNrLmlucHV0VGltZVNjYWxlO1xuICAgICAgdmFyIG1wNHRpbWVTY2FsZSA9IHRyYWNrLnNhbXBsZXJhdGUgPyB0cmFjay5zYW1wbGVyYXRlIDogaW5wdXRUaW1lU2NhbGU7XG4gICAgICB2YXIgc2NhbGVGYWN0b3IgPSBpbnB1dFRpbWVTY2FsZSAvIG1wNHRpbWVTY2FsZTtcbiAgICAgIHZhciBtcDRTYW1wbGVEdXJhdGlvbiA9IHRoaXMuZ2V0U2FtcGxlc1BlckZyYW1lKHRyYWNrKTtcbiAgICAgIHZhciBpbnB1dFNhbXBsZUR1cmF0aW9uID0gbXA0U2FtcGxlRHVyYXRpb24gKiBzY2FsZUZhY3RvcjtcbiAgICAgIHZhciBpbml0UFRTID0gdGhpcy5faW5pdFBUUztcbiAgICAgIHZhciByYXdNUEVHID0gdHJhY2suc2VnbWVudENvZGVjID09PSAnbXAzJyAmJiB0aGlzLnR5cGVTdXBwb3J0ZWQubXBlZztcbiAgICAgIHZhciBvdXRwdXRTYW1wbGVzID0gW107XG4gICAgICB2YXIgYWxpZ25lZFdpdGhWaWRlbyA9IHZpZGVvVGltZU9mZnNldCAhPT0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGlucHV0U2FtcGxlcyA9IHRyYWNrLnNhbXBsZXM7XG4gICAgICB2YXIgb2Zmc2V0ID0gcmF3TVBFRyA/IDAgOiA4O1xuICAgICAgdmFyIG5leHRBdWRpb1B0cyA9IHRoaXMubmV4dEF1ZGlvUHRzIHx8IC0xO1xuXG4gICAgICAvLyB3aW5kb3cuYXVkaW9TYW1wbGVzID8gd2luZG93LmF1ZGlvU2FtcGxlcy5wdXNoKGlucHV0U2FtcGxlcy5tYXAocyA9PiBzLnB0cykpIDogKHdpbmRvdy5hdWRpb1NhbXBsZXMgPSBbaW5wdXRTYW1wbGVzLm1hcChzID0+IHMucHRzKV0pO1xuXG4gICAgICAvLyBmb3IgYXVkaW8gc2FtcGxlcywgYWxzbyBjb25zaWRlciBjb25zZWN1dGl2ZSBmcmFnbWVudHMgYXMgYmVpbmcgY29udGlndW91cyAoZXZlbiBpZiBhIGxldmVsIHN3aXRjaCBvY2N1cnMpLFxuICAgICAgLy8gZm9yIHNha2Ugb2YgY2xhcml0eTpcbiAgICAgIC8vIGNvbnNlY3V0aXZlIGZyYWdtZW50cyBhcmUgZnJhZ3Mgd2l0aFxuICAgICAgLy8gIC0gbGVzcyB0aGFuIDEwMG1zIGdhcHMgYmV0d2VlbiBuZXcgdGltZSBvZmZzZXQgKGlmIGFjY3VyYXRlKSBhbmQgbmV4dCBleHBlY3RlZCBQVFMgT1JcbiAgICAgIC8vICAtIGxlc3MgdGhhbiAyMCBhdWRpbyBmcmFtZXMgZGlzdGFuY2VcbiAgICAgIC8vIGNvbnRpZ3VvdXMgZnJhZ21lbnRzIGFyZSBjb25zZWN1dGl2ZSBmcmFnbWVudHMgZnJvbSBzYW1lIHF1YWxpdHkgbGV2ZWwgKHNhbWUgbGV2ZWwsIG5ldyBTTiA9IG9sZCBTTiArIDEpXG4gICAgICAvLyB0aGlzIGhlbHBzIGVuc3VyaW5nIGF1ZGlvIGNvbnRpbnVpdHlcbiAgICAgIC8vIGFuZCB0aGlzIGFsc28gYXZvaWRzIGF1ZGlvIGdsaXRjaGVzL2N1dCB3aGVuIHN3aXRjaGluZyBxdWFsaXR5LCBvciByZXBvcnRpbmcgd3JvbmcgZHVyYXRpb24gb24gZmlyc3QgYXVkaW8gZnJhbWVcbiAgICAgIHZhciB0aW1lT2Zmc2V0TXBlZ1RTID0gdGltZU9mZnNldCAqIGlucHV0VGltZVNjYWxlO1xuICAgICAgdmFyIGluaXRUaW1lID0gaW5pdFBUUy5iYXNlVGltZSAqIGlucHV0VGltZVNjYWxlIC8gaW5pdFBUUy50aW1lc2NhbGU7XG4gICAgICB0aGlzLmlzQXVkaW9Db250aWd1b3VzID0gY29udGlndW91cyA9IGNvbnRpZ3VvdXMgfHwgaW5wdXRTYW1wbGVzLmxlbmd0aCAmJiBuZXh0QXVkaW9QdHMgPiAwICYmIChhY2N1cmF0ZVRpbWVPZmZzZXQgJiYgTWF0aC5hYnModGltZU9mZnNldE1wZWdUUyAtIG5leHRBdWRpb1B0cykgPCA5MDAwIHx8IE1hdGguYWJzKG5vcm1hbGl6ZVB0cyhpbnB1dFNhbXBsZXNbMF0ucHRzIC0gaW5pdFRpbWUsIHRpbWVPZmZzZXRNcGVnVFMpIC0gbmV4dEF1ZGlvUHRzKSA8IDIwICogaW5wdXRTYW1wbGVEdXJhdGlvbik7XG5cbiAgICAgIC8vIGNvbXB1dGUgbm9ybWFsaXplZCBQVFNcbiAgICAgIGlucHV0U2FtcGxlcy5mb3JFYWNoKGZ1bmN0aW9uIChzYW1wbGUpIHtcbiAgICAgICAgc2FtcGxlLnB0cyA9IG5vcm1hbGl6ZVB0cyhzYW1wbGUucHRzIC0gaW5pdFRpbWUsIHRpbWVPZmZzZXRNcGVnVFMpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIWNvbnRpZ3VvdXMgfHwgbmV4dEF1ZGlvUHRzIDwgMCkge1xuICAgICAgICAvLyBmaWx0ZXIgb3V0IHNhbXBsZSB3aXRoIG5lZ2F0aXZlIFBUUyB0aGF0IGFyZSBub3QgcGxheWFibGUgYW55d2F5XG4gICAgICAgIC8vIGlmIHdlIGRvbid0IHJlbW92ZSB0aGVzZSBuZWdhdGl2ZSBzYW1wbGVzLCB0aGV5IHdpbGwgc2hpZnQgYWxsIGF1ZGlvIHNhbXBsZXMgZm9yd2FyZC5cbiAgICAgICAgLy8gbGVhZGluZyB0byBhdWRpbyBvdmVybGFwIGJldHdlZW4gY3VycmVudCAvIG5leHQgZnJhZ21lbnRcbiAgICAgICAgaW5wdXRTYW1wbGVzID0gaW5wdXRTYW1wbGVzLmZpbHRlcihmdW5jdGlvbiAoc2FtcGxlKSB7XG4gICAgICAgICAgcmV0dXJuIHNhbXBsZS5wdHMgPj0gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gaW4gY2FzZSBhbGwgc2FtcGxlcyBoYXZlIG5lZ2F0aXZlIFBUUywgYW5kIGhhdmUgYmVlbiBmaWx0ZXJlZCBvdXQsIHJldHVybiBub3dcbiAgICAgICAgaWYgKCFpbnB1dFNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aWRlb1RpbWVPZmZzZXQgPT09IDApIHtcbiAgICAgICAgICAvLyBTZXQgdGhlIHN0YXJ0IHRvIDAgdG8gbWF0Y2ggdmlkZW8gc28gdGhhdCBzdGFydCBnYXBzIGxhcmdlciB0aGFuIGlucHV0U2FtcGxlRHVyYXRpb24gYXJlIGZpbGxlZCB3aXRoIHNpbGVuY2VcbiAgICAgICAgICBuZXh0QXVkaW9QdHMgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGFjY3VyYXRlVGltZU9mZnNldCAmJiAhYWxpZ25lZFdpdGhWaWRlbykge1xuICAgICAgICAgIC8vIFdoZW4gbm90IHNlZWtpbmcsIG5vdCBsaXZlLCBhbmQgTGV2ZWxEZXRhaWxzLlBUU0tub3duLCB1c2UgZnJhZ21lbnQgc3RhcnQgYXMgcHJlZGljdGVkIG5leHQgYXVkaW8gUFRTXG4gICAgICAgICAgbmV4dEF1ZGlvUHRzID0gTWF0aC5tYXgoMCwgdGltZU9mZnNldE1wZWdUUyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaWYgZnJhZ3MgYXJlIG5vdCBjb250aWd1b3VzIGFuZCBpZiB3ZSBjYW50IHRydXN0IHRpbWUgb2Zmc2V0LCBsZXQncyB1c2UgZmlyc3Qgc2FtcGxlIFBUUyBhcyBuZXh0IGF1ZGlvIFBUU1xuICAgICAgICAgIG5leHRBdWRpb1B0cyA9IGlucHV0U2FtcGxlc1swXS5wdHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGF1ZGlvIHRyYWNrIGlzIG1pc3Npbmcgc2FtcGxlcywgdGhlIGZyYW1lcyBzZWVtIHRvIGdldCBcImxlZnQtc2hpZnRlZFwiIHdpdGhpbiB0aGVcbiAgICAgIC8vIHJlc3VsdGluZyBtcDQgc2VnbWVudCwgY2F1c2luZyBzeW5jIGlzc3VlcyBhbmQgbGVhdmluZyBnYXBzIGF0IHRoZSBlbmQgb2YgdGhlIGF1ZGlvIHNlZ21lbnQuXG4gICAgICAvLyBJbiBhbiBlZmZvcnQgdG8gcHJldmVudCB0aGlzIGZyb20gaGFwcGVuaW5nLCB3ZSBpbmplY3QgZnJhbWVzIGhlcmUgd2hlcmUgdGhlcmUgYXJlIGdhcHMuXG4gICAgICAvLyBXaGVuIHBvc3NpYmxlLCB3ZSBpbmplY3QgYSBzaWxlbnQgZnJhbWU7IHdoZW4gdGhhdCdzIG5vdCBwb3NzaWJsZSwgd2UgZHVwbGljYXRlIHRoZSBsYXN0XG4gICAgICAvLyBmcmFtZS5cblxuICAgICAgaWYgKHRyYWNrLnNlZ21lbnRDb2RlYyA9PT0gJ2FhYycpIHtcbiAgICAgICAgdmFyIG1heEF1ZGlvRnJhbWVzRHJpZnQgPSB0aGlzLmNvbmZpZy5tYXhBdWRpb0ZyYW1lc0RyaWZ0O1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbmV4dFB0cyA9IG5leHRBdWRpb1B0czsgaSA8IGlucHV0U2FtcGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIC8vIEZpcnN0LCBsZXQncyBzZWUgaG93IGZhciBvZmYgdGhpcyBmcmFtZSBpcyBmcm9tIHdoZXJlIHdlIGV4cGVjdCBpdCB0byBiZVxuICAgICAgICAgIHZhciBzYW1wbGUgPSBpbnB1dFNhbXBsZXNbaV07XG4gICAgICAgICAgdmFyIHB0cyA9IHNhbXBsZS5wdHM7XG4gICAgICAgICAgdmFyIGRlbHRhID0gcHRzIC0gbmV4dFB0cztcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSBNYXRoLmFicygxMDAwICogZGVsdGEgLyBpbnB1dFRpbWVTY2FsZSk7XG5cbiAgICAgICAgICAvLyBXaGVuIHJlbXV4aW5nIHdpdGggdmlkZW8sIGlmIHdlJ3JlIG92ZXJsYXBwaW5nIGJ5IG1vcmUgdGhhbiBhIGR1cmF0aW9uLCBkcm9wIHRoaXMgc2FtcGxlIHRvIHN0YXkgaW4gc3luY1xuICAgICAgICAgIGlmIChkZWx0YSA8PSAtbWF4QXVkaW9GcmFtZXNEcmlmdCAqIGlucHV0U2FtcGxlRHVyYXRpb24gJiYgYWxpZ25lZFdpdGhWaWRlbykge1xuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybihcIkF1ZGlvIGZyYW1lIEAgXCIgKyAocHRzIC8gaW5wdXRUaW1lU2NhbGUpLnRvRml4ZWQoMykgKyBcInMgb3ZlcmxhcHMgbmV4dEF1ZGlvUHRzIGJ5IFwiICsgTWF0aC5yb3VuZCgxMDAwICogZGVsdGEgLyBpbnB1dFRpbWVTY2FsZSkgKyBcIiBtcy5cIik7XG4gICAgICAgICAgICAgIHRoaXMubmV4dEF1ZGlvUHRzID0gbmV4dEF1ZGlvUHRzID0gbmV4dFB0cyA9IHB0cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYnJhY2Utc3R5bGVcblxuICAgICAgICAgIC8vIEluc2VydCBtaXNzaW5nIGZyYW1lcyBpZjpcbiAgICAgICAgICAvLyAxOiBXZSdyZSBtb3JlIHRoYW4gbWF4QXVkaW9GcmFtZXNEcmlmdCBmcmFtZSBhd2F5XG4gICAgICAgICAgLy8gMjogTm90IG1vcmUgdGhhbiBNQVhfU0lMRU5UX0ZSQU1FX0RVUkFUSU9OIGF3YXlcbiAgICAgICAgICAvLyAzOiBjdXJyZW50VGltZSAoYWthIG5leHRQdHNOb3JtKSBpcyBub3QgMFxuICAgICAgICAgIC8vIDQ6IHJlbXV4aW5nIHdpdGggdmlkZW8gKHZpZGVvVGltZU9mZnNldCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIGVsc2UgaWYgKGRlbHRhID49IG1heEF1ZGlvRnJhbWVzRHJpZnQgKiBpbnB1dFNhbXBsZUR1cmF0aW9uICYmIGR1cmF0aW9uIDwgTUFYX1NJTEVOVF9GUkFNRV9EVVJBVElPTiAmJiBhbGlnbmVkV2l0aFZpZGVvKSB7XG4gICAgICAgICAgICB2YXIgbWlzc2luZyA9IE1hdGgucm91bmQoZGVsdGEgLyBpbnB1dFNhbXBsZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIC8vIEFkanVzdCBuZXh0UHRzIHNvIHRoYXQgc2lsZW50IHNhbXBsZXMgYXJlIGFsaWduZWQgd2l0aCBtZWRpYSBwdHMuIFRoaXMgd2lsbCBwcmV2ZW50IG1lZGlhIHNhbXBsZXMgZnJvbVxuICAgICAgICAgICAgLy8gbGF0ZXIgYmVpbmcgc2hpZnRlZCBpZiBuZXh0UHRzIGlzIGJhc2VkIG9uIHRpbWVPZmZzZXQgYW5kIGRlbHRhIGlzIG5vdCBhIG11bHRpcGxlIG9mIGlucHV0U2FtcGxlRHVyYXRpb24uXG4gICAgICAgICAgICBuZXh0UHRzID0gcHRzIC0gbWlzc2luZyAqIGlucHV0U2FtcGxlRHVyYXRpb247XG4gICAgICAgICAgICBpZiAobmV4dFB0cyA8IDApIHtcbiAgICAgICAgICAgICAgbWlzc2luZy0tO1xuICAgICAgICAgICAgICBuZXh0UHRzICs9IGlucHV0U2FtcGxlRHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICB0aGlzLm5leHRBdWRpb1B0cyA9IG5leHRBdWRpb1B0cyA9IG5leHRQdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFwiW21wNC1yZW11eGVyXTogSW5qZWN0aW5nIFwiICsgbWlzc2luZyArIFwiIGF1ZGlvIGZyYW1lIEAgXCIgKyAobmV4dFB0cyAvIGlucHV0VGltZVNjYWxlKS50b0ZpeGVkKDMpICsgXCJzIGR1ZSB0byBcIiArIE1hdGgucm91bmQoMTAwMCAqIGRlbHRhIC8gaW5wdXRUaW1lU2NhbGUpICsgXCIgbXMgZ2FwLlwiKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWlzc2luZzsgaisrKSB7XG4gICAgICAgICAgICAgIHZhciBuZXdTdGFtcCA9IE1hdGgubWF4KG5leHRQdHMsIDApO1xuICAgICAgICAgICAgICB2YXIgZmlsbEZyYW1lID0gQUFDLmdldFNpbGVudEZyYW1lKHRyYWNrLnBhcnNlZENvZGVjIHx8IHRyYWNrLm1hbmlmZXN0Q29kZWMgfHwgdHJhY2suY29kZWMsIHRyYWNrLmNoYW5uZWxDb3VudCk7XG4gICAgICAgICAgICAgIGlmICghZmlsbEZyYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdbbXA0LXJlbXV4ZXJdOiBVbmFibGUgdG8gZ2V0IHNpbGVudCBmcmFtZSBmb3IgZ2l2ZW4gYXVkaW8gY29kZWM7IGR1cGxpY2F0aW5nIGxhc3QgZnJhbWUgaW5zdGVhZC4nKTtcbiAgICAgICAgICAgICAgICBmaWxsRnJhbWUgPSBzYW1wbGUudW5pdC5zdWJhcnJheSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlucHV0U2FtcGxlcy5zcGxpY2UoaSwgMCwge1xuICAgICAgICAgICAgICAgIHVuaXQ6IGZpbGxGcmFtZSxcbiAgICAgICAgICAgICAgICBwdHM6IG5ld1N0YW1wXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBuZXh0UHRzICs9IGlucHV0U2FtcGxlRHVyYXRpb247XG4gICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc2FtcGxlLnB0cyA9IG5leHRQdHM7XG4gICAgICAgICAgbmV4dFB0cyArPSBpbnB1dFNhbXBsZUR1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgZmlyc3RQVFMgPSBudWxsO1xuICAgICAgdmFyIGxhc3RQVFMgPSBudWxsO1xuICAgICAgdmFyIG1kYXQ7XG4gICAgICB2YXIgbWRhdFNpemUgPSAwO1xuICAgICAgdmFyIHNhbXBsZUxlbmd0aCA9IGlucHV0U2FtcGxlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoc2FtcGxlTGVuZ3RoLS0pIHtcbiAgICAgICAgbWRhdFNpemUgKz0gaW5wdXRTYW1wbGVzW3NhbXBsZUxlbmd0aF0udW5pdC5ieXRlTGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgX2oyID0gMCwgX25iU2FtcGxlcyA9IGlucHV0U2FtcGxlcy5sZW5ndGg7IF9qMiA8IF9uYlNhbXBsZXM7IF9qMisrKSB7XG4gICAgICAgIHZhciBhdWRpb1NhbXBsZSA9IGlucHV0U2FtcGxlc1tfajJdO1xuICAgICAgICB2YXIgdW5pdCA9IGF1ZGlvU2FtcGxlLnVuaXQ7XG4gICAgICAgIHZhciBfcHRzMiA9IGF1ZGlvU2FtcGxlLnB0cztcbiAgICAgICAgaWYgKGxhc3RQVFMgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIG1vcmUgdGhhbiBvbmUgc2FtcGxlLCBzZXQgdGhlIGR1cmF0aW9uIG9mIHRoZSBzYW1wbGUgdG8gdGhlIFwicmVhbFwiIGR1cmF0aW9uOyB0aGUgUFRTIGRpZmYgd2l0aFxuICAgICAgICAgIC8vIHRoZSBwcmV2aW91cyBzYW1wbGVcbiAgICAgICAgICB2YXIgcHJldlNhbXBsZSA9IG91dHB1dFNhbXBsZXNbX2oyIC0gMV07XG4gICAgICAgICAgcHJldlNhbXBsZS5kdXJhdGlvbiA9IE1hdGgucm91bmQoKF9wdHMyIC0gbGFzdFBUUykgLyBzY2FsZUZhY3Rvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNvbnRpZ3VvdXMgJiYgdHJhY2suc2VnbWVudENvZGVjID09PSAnYWFjJykge1xuICAgICAgICAgICAgLy8gc2V0IFBUUy9EVFMgdG8gZXhwZWN0ZWQgUFRTL0RUU1xuICAgICAgICAgICAgX3B0czIgPSBuZXh0QXVkaW9QdHM7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHJlbWVtYmVyIGZpcnN0IFBUUyBvZiBvdXIgYXVkaW9TYW1wbGVzXG4gICAgICAgICAgZmlyc3RQVFMgPSBfcHRzMjtcbiAgICAgICAgICBpZiAobWRhdFNpemUgPiAwKSB7XG4gICAgICAgICAgICAvKiBjb25jYXRlbmF0ZSB0aGUgYXVkaW8gZGF0YSBhbmQgY29uc3RydWN0IHRoZSBtZGF0IGluIHBsYWNlXG4gICAgICAgICAgICAgIChuZWVkIDggbW9yZSBieXRlcyB0byBmaWxsIGxlbmd0aCBhbmQgbWRhdCB0eXBlKSAqL1xuICAgICAgICAgICAgbWRhdFNpemUgKz0gb2Zmc2V0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbWRhdCA9IG5ldyBVaW50OEFycmF5KG1kYXRTaXplKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICB0aGlzLm9ic2VydmVyLmVtaXQoRXZlbnRzLkVSUk9SLCBFdmVudHMuRVJST1IsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk1VWF9FUlJPUixcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuUkVNVVhfQUxMT0NfRVJST1IsXG4gICAgICAgICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnIsXG4gICAgICAgICAgICAgICAgYnl0ZXM6IG1kYXRTaXplLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogXCJmYWlsIGFsbG9jYXRpbmcgYXVkaW8gbWRhdCBcIiArIG1kYXRTaXplXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJhd01QRUcpIHtcbiAgICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcobWRhdC5idWZmZXIpO1xuICAgICAgICAgICAgICB2aWV3LnNldFVpbnQzMigwLCBtZGF0U2l6ZSk7XG4gICAgICAgICAgICAgIG1kYXQuc2V0KE1QNC50eXBlcy5tZGF0LCA0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbm8gYXVkaW8gc2FtcGxlc1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtZGF0LnNldCh1bml0LCBvZmZzZXQpO1xuICAgICAgICB2YXIgdW5pdExlbiA9IHVuaXQuYnl0ZUxlbmd0aDtcbiAgICAgICAgb2Zmc2V0ICs9IHVuaXRMZW47XG4gICAgICAgIC8vIERlZmF1bHQgdGhlIHNhbXBsZSdzIGR1cmF0aW9uIHRvIHRoZSBjb21wdXRlZCBtcDRTYW1wbGVEdXJhdGlvbiwgd2hpY2ggd2lsbCBlaXRoZXIgYmUgMTAyNCBmb3IgQUFDIG9yIDExNTIgZm9yIE1QRUdcbiAgICAgICAgLy8gSW4gdGhlIGNhc2UgdGhhdCB3ZSBoYXZlIDEgc2FtcGxlLCB0aGlzIHdpbGwgYmUgdGhlIGR1cmF0aW9uLiBJZiB3ZSBoYXZlIG1vcmUgdGhhbiBvbmUgc2FtcGxlLCB0aGUgZHVyYXRpb25cbiAgICAgICAgLy8gYmVjb21lcyB0aGUgUFRTIGRpZmYgd2l0aCB0aGUgcHJldmlvdXMgc2FtcGxlXG4gICAgICAgIG91dHB1dFNhbXBsZXMucHVzaChjcmVhdGVNcDRTYW1wbGUodHJ1ZSwgbXA0U2FtcGxlRHVyYXRpb24sIHVuaXRMZW4sIDApKTtcbiAgICAgICAgbGFzdFBUUyA9IF9wdHMyO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBjb3VsZCBlbmQgdXAgd2l0aCBubyBhdWRpbyBzYW1wbGVzIGlmIGFsbCBpbnB1dCBzYW1wbGVzIHdlcmUgb3ZlcmxhcHBpbmcgd2l0aCB0aGUgcHJldmlvdXNseSByZW11eGVkIG9uZXNcbiAgICAgIHZhciBuYlNhbXBsZXMgPSBvdXRwdXRTYW1wbGVzLmxlbmd0aDtcbiAgICAgIGlmICghbmJTYW1wbGVzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIG5leHQgYXVkaW8gc2FtcGxlIFBUUyBzaG91bGQgYmUgZXF1YWwgdG8gbGFzdCBzYW1wbGUgUFRTICsgZHVyYXRpb25cbiAgICAgIHZhciBsYXN0U2FtcGxlID0gb3V0cHV0U2FtcGxlc1tvdXRwdXRTYW1wbGVzLmxlbmd0aCAtIDFdO1xuICAgICAgdGhpcy5uZXh0QXVkaW9QdHMgPSBuZXh0QXVkaW9QdHMgPSBsYXN0UFRTICsgc2NhbGVGYWN0b3IgKiBsYXN0U2FtcGxlLmR1cmF0aW9uO1xuXG4gICAgICAvLyBTZXQgdGhlIHRyYWNrIHNhbXBsZXMgZnJvbSBpbnB1dFNhbXBsZXMgdG8gb3V0cHV0U2FtcGxlcyBiZWZvcmUgcmVtdXhpbmdcbiAgICAgIHZhciBtb29mID0gcmF3TVBFRyA/IG5ldyBVaW50OEFycmF5KDApIDogTVA0Lm1vb2YodHJhY2suc2VxdWVuY2VOdW1iZXIrKywgZmlyc3RQVFMgLyBzY2FsZUZhY3RvciwgX2V4dGVuZHMoe30sIHRyYWNrLCB7XG4gICAgICAgIHNhbXBsZXM6IG91dHB1dFNhbXBsZXNcbiAgICAgIH0pKTtcblxuICAgICAgLy8gQ2xlYXIgdGhlIHRyYWNrIHNhbXBsZXMuIFRoaXMgYWxzbyBjbGVhcnMgdGhlIHNhbXBsZXMgYXJyYXkgaW4gdGhlIGRlbXV4ZXIsIHNpbmNlIHRoZSByZWZlcmVuY2UgaXMgc2hhcmVkXG4gICAgICB0cmFjay5zYW1wbGVzID0gW107XG4gICAgICB2YXIgc3RhcnQgPSBmaXJzdFBUUyAvIGlucHV0VGltZVNjYWxlO1xuICAgICAgdmFyIGVuZCA9IG5leHRBdWRpb1B0cyAvIGlucHV0VGltZVNjYWxlO1xuICAgICAgdmFyIHR5cGUgPSAnYXVkaW8nO1xuICAgICAgdmFyIGF1ZGlvRGF0YSA9IHtcbiAgICAgICAgZGF0YTE6IG1vb2YsXG4gICAgICAgIGRhdGEyOiBtZGF0LFxuICAgICAgICBzdGFydFBUUzogc3RhcnQsXG4gICAgICAgIGVuZFBUUzogZW5kLFxuICAgICAgICBzdGFydERUUzogc3RhcnQsXG4gICAgICAgIGVuZERUUzogZW5kLFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBoYXNBdWRpbzogdHJ1ZSxcbiAgICAgICAgaGFzVmlkZW86IGZhbHNlLFxuICAgICAgICBuYjogbmJTYW1wbGVzXG4gICAgICB9O1xuICAgICAgdGhpcy5pc0F1ZGlvQ29udGlndW91cyA9IHRydWU7XG4gICAgICByZXR1cm4gYXVkaW9EYXRhO1xuICAgIH07XG4gICAgcmV0dXJuIE1QNFJlbXV4ZXI7XG4gIH0oKTtcbiAgZnVuY3Rpb24gbm9ybWFsaXplUHRzKHZhbHVlLCByZWZlcmVuY2UpIHtcbiAgICB2YXIgb2Zmc2V0O1xuICAgIGlmIChyZWZlcmVuY2UgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHJlZmVyZW5jZSA8IHZhbHVlKSB7XG4gICAgICAvLyAtIDJeMzNcbiAgICAgIG9mZnNldCA9IC04NTg5OTM0NTkyO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyArIDJeMzNcbiAgICAgIG9mZnNldCA9IDg1ODk5MzQ1OTI7XG4gICAgfVxuICAgIC8qIFBUUyBpcyAzM2JpdCAoZnJvbSAwIHRvIDJeMzMgLTEpXG4gICAgICBpZiBkaWZmIGJldHdlZW4gdmFsdWUgYW5kIHJlZmVyZW5jZSBpcyBiaWdnZXIgdGhhbiBoYWxmIG9mIHRoZSBhbXBsaXR1ZGUgKDJeMzIpIHRoZW4gaXQgbWVhbnMgdGhhdFxuICAgICAgUFRTIGxvb3Bpbmcgb2NjdXJlZC4gZmlsbCB0aGUgZ2FwICovXG4gICAgd2hpbGUgKE1hdGguYWJzKHZhbHVlIC0gcmVmZXJlbmNlKSA+IDQyOTQ5NjcyOTYpIHtcbiAgICAgIHZhbHVlICs9IG9mZnNldDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGZ1bmN0aW9uIGZpbmRLZXlmcmFtZUluZGV4KHNhbXBsZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNhbXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzYW1wbGVzW2ldLmtleSkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGZ1bmN0aW9uIGZsdXNoVGV4dFRyYWNrTWV0YWRhdGFDdWVTYW1wbGVzKHRyYWNrLCB0aW1lT2Zmc2V0LCBpbml0UFRTLCBpbml0RFRTKSB7XG4gICAgdmFyIGxlbmd0aCA9IHRyYWNrLnNhbXBsZXMubGVuZ3RoO1xuICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpbnB1dFRpbWVTY2FsZSA9IHRyYWNrLmlucHV0VGltZVNjYWxlO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBzYW1wbGUgPSB0cmFjay5zYW1wbGVzW2luZGV4XTtcbiAgICAgIC8vIHNldHRpbmcgaWQzIHB0cywgZHRzIHRvIHJlbGF0aXZlIHRpbWVcbiAgICAgIC8vIHVzaW5nIHRoaXMuX2luaXRQVFMgYW5kIHRoaXMuX2luaXREVFMgdG8gY2FsY3VsYXRlIHJlbGF0aXZlIHRpbWVcbiAgICAgIHNhbXBsZS5wdHMgPSBub3JtYWxpemVQdHMoc2FtcGxlLnB0cyAtIGluaXRQVFMuYmFzZVRpbWUgKiBpbnB1dFRpbWVTY2FsZSAvIGluaXRQVFMudGltZXNjYWxlLCB0aW1lT2Zmc2V0ICogaW5wdXRUaW1lU2NhbGUpIC8gaW5wdXRUaW1lU2NhbGU7XG4gICAgICBzYW1wbGUuZHRzID0gbm9ybWFsaXplUHRzKHNhbXBsZS5kdHMgLSBpbml0RFRTLmJhc2VUaW1lICogaW5wdXRUaW1lU2NhbGUgLyBpbml0RFRTLnRpbWVzY2FsZSwgdGltZU9mZnNldCAqIGlucHV0VGltZVNjYWxlKSAvIGlucHV0VGltZVNjYWxlO1xuICAgIH1cbiAgICB2YXIgc2FtcGxlcyA9IHRyYWNrLnNhbXBsZXM7XG4gICAgdHJhY2suc2FtcGxlcyA9IFtdO1xuICAgIHJldHVybiB7XG4gICAgICBzYW1wbGVzOiBzYW1wbGVzXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBmbHVzaFRleHRUcmFja1VzZXJkYXRhQ3VlU2FtcGxlcyh0cmFjaywgdGltZU9mZnNldCwgaW5pdFBUUykge1xuICAgIHZhciBsZW5ndGggPSB0cmFjay5zYW1wbGVzLmxlbmd0aDtcbiAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaW5wdXRUaW1lU2NhbGUgPSB0cmFjay5pbnB1dFRpbWVTY2FsZTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgc2FtcGxlID0gdHJhY2suc2FtcGxlc1tpbmRleF07XG4gICAgICAvLyBzZXR0aW5nIHRleHQgcHRzLCBkdHMgdG8gcmVsYXRpdmUgdGltZVxuICAgICAgLy8gdXNpbmcgdGhpcy5faW5pdFBUUyBhbmQgdGhpcy5faW5pdERUUyB0byBjYWxjdWxhdGUgcmVsYXRpdmUgdGltZVxuICAgICAgc2FtcGxlLnB0cyA9IG5vcm1hbGl6ZVB0cyhzYW1wbGUucHRzIC0gaW5pdFBUUy5iYXNlVGltZSAqIGlucHV0VGltZVNjYWxlIC8gaW5pdFBUUy50aW1lc2NhbGUsIHRpbWVPZmZzZXQgKiBpbnB1dFRpbWVTY2FsZSkgLyBpbnB1dFRpbWVTY2FsZTtcbiAgICB9XG4gICAgdHJhY2suc2FtcGxlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5wdHMgLSBiLnB0cztcbiAgICB9KTtcbiAgICB2YXIgc2FtcGxlcyA9IHRyYWNrLnNhbXBsZXM7XG4gICAgdHJhY2suc2FtcGxlcyA9IFtdO1xuICAgIHJldHVybiB7XG4gICAgICBzYW1wbGVzOiBzYW1wbGVzXG4gICAgfTtcbiAgfVxuXG4gIHZhciBQYXNzVGhyb3VnaFJlbXV4ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhc3NUaHJvdWdoUmVtdXhlcihvYnNlcnZlciwgY29uZmlnLCB0eXBlU3VwcG9ydGVkLCBsb2dnZXIpIHtcbiAgICAgIHRoaXMubG9nZ2VyID0gdm9pZCAwO1xuICAgICAgdGhpcy5lbWl0SW5pdFNlZ21lbnQgPSBmYWxzZTtcbiAgICAgIHRoaXMuYXVkaW9Db2RlYyA9IHZvaWQgMDtcbiAgICAgIHRoaXMudmlkZW9Db2RlYyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuaW5pdERhdGEgPSB2b2lkIDA7XG4gICAgICB0aGlzLmluaXRQVFMgPSBudWxsO1xuICAgICAgdGhpcy5pbml0VHJhY2tzID0gdm9pZCAwO1xuICAgICAgdGhpcy5sYXN0RW5kVGltZSA9IG51bGw7XG4gICAgICB0aGlzLmlzVmlkZW9Db250aWd1b3VzID0gZmFsc2U7XG4gICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IFBhc3NUaHJvdWdoUmVtdXhlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge307XG4gICAgX3Byb3RvLnJlc2V0VGltZVN0YW1wID0gZnVuY3Rpb24gcmVzZXRUaW1lU3RhbXAoZGVmYXVsdEluaXRQVFMpIHtcbiAgICAgIHRoaXMuaW5pdFBUUyA9IGRlZmF1bHRJbml0UFRTO1xuICAgICAgdGhpcy5sYXN0RW5kVGltZSA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXROZXh0VGltZXN0YW1wID0gZnVuY3Rpb24gcmVzZXROZXh0VGltZXN0YW1wKCkge1xuICAgICAgdGhpcy5pc1ZpZGVvQ29udGlndW91cyA9IGZhbHNlO1xuICAgICAgdGhpcy5sYXN0RW5kVGltZSA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXRJbml0U2VnbWVudCA9IGZ1bmN0aW9uIHJlc2V0SW5pdFNlZ21lbnQoaW5pdFNlZ21lbnQsIGF1ZGlvQ29kZWMsIHZpZGVvQ29kZWMsIGRlY3J5cHRkYXRhKSB7XG4gICAgICB0aGlzLmF1ZGlvQ29kZWMgPSBhdWRpb0NvZGVjO1xuICAgICAgdGhpcy52aWRlb0NvZGVjID0gdmlkZW9Db2RlYztcbiAgICAgIHRoaXMuZ2VuZXJhdGVJbml0U2VnbWVudChwYXRjaEVuY3lwdGlvbkRhdGEoaW5pdFNlZ21lbnQsIGRlY3J5cHRkYXRhKSk7XG4gICAgICB0aGlzLmVtaXRJbml0U2VnbWVudCA9IHRydWU7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2VuZXJhdGVJbml0U2VnbWVudCA9IGZ1bmN0aW9uIGdlbmVyYXRlSW5pdFNlZ21lbnQoaW5pdFNlZ21lbnQpIHtcbiAgICAgIHZhciBhdWRpb0NvZGVjID0gdGhpcy5hdWRpb0NvZGVjLFxuICAgICAgICB2aWRlb0NvZGVjID0gdGhpcy52aWRlb0NvZGVjO1xuICAgICAgaWYgKCEoaW5pdFNlZ21lbnQgIT0gbnVsbCAmJiBpbml0U2VnbWVudC5ieXRlTGVuZ3RoKSkge1xuICAgICAgICB0aGlzLmluaXRUcmFja3MgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaW5pdERhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpbml0RGF0YSA9IHRoaXMuaW5pdERhdGEgPSBwYXJzZUluaXRTZWdtZW50KGluaXRTZWdtZW50KTtcblxuICAgICAgLy8gR2V0IGNvZGVjIGZyb20gaW5pdFNlZ21lbnRcbiAgICAgIGlmIChpbml0RGF0YS5hdWRpbykge1xuICAgICAgICBhdWRpb0NvZGVjID0gZ2V0UGFyc2VkVHJhY2tDb2RlYyhpbml0RGF0YS5hdWRpbywgRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPLCB0aGlzLmxvZ2dlcik7XG4gICAgICB9XG4gICAgICBpZiAoaW5pdERhdGEudmlkZW8pIHtcbiAgICAgICAgdmlkZW9Db2RlYyA9IGdldFBhcnNlZFRyYWNrQ29kZWMoaW5pdERhdGEudmlkZW8sIEVsZW1lbnRhcnlTdHJlYW1UeXBlcy5WSURFTywgdGhpcy5sb2dnZXIpO1xuICAgICAgfVxuICAgICAgdmFyIHRyYWNrcyA9IHt9O1xuICAgICAgaWYgKGluaXREYXRhLmF1ZGlvICYmIGluaXREYXRhLnZpZGVvKSB7XG4gICAgICAgIHRyYWNrcy5hdWRpb3ZpZGVvID0ge1xuICAgICAgICAgIGNvbnRhaW5lcjogJ3ZpZGVvL21wNCcsXG4gICAgICAgICAgY29kZWM6IGF1ZGlvQ29kZWMgKyAnLCcgKyB2aWRlb0NvZGVjLFxuICAgICAgICAgIHN1cHBsZW1lbnRhbDogaW5pdERhdGEudmlkZW8uc3VwcGxlbWVudGFsLFxuICAgICAgICAgIGluaXRTZWdtZW50OiBpbml0U2VnbWVudCxcbiAgICAgICAgICBpZDogJ21haW4nXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGluaXREYXRhLmF1ZGlvKSB7XG4gICAgICAgIHRyYWNrcy5hdWRpbyA9IHtcbiAgICAgICAgICBjb250YWluZXI6ICdhdWRpby9tcDQnLFxuICAgICAgICAgIGNvZGVjOiBhdWRpb0NvZGVjLFxuICAgICAgICAgIGluaXRTZWdtZW50OiBpbml0U2VnbWVudCxcbiAgICAgICAgICBpZDogJ2F1ZGlvJ1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChpbml0RGF0YS52aWRlbykge1xuICAgICAgICB0cmFja3MudmlkZW8gPSB7XG4gICAgICAgICAgY29udGFpbmVyOiAndmlkZW8vbXA0JyxcbiAgICAgICAgICBjb2RlYzogdmlkZW9Db2RlYyxcbiAgICAgICAgICBzdXBwbGVtZW50YWw6IGluaXREYXRhLnZpZGVvLnN1cHBsZW1lbnRhbCxcbiAgICAgICAgICBpbml0U2VnbWVudDogaW5pdFNlZ21lbnQsXG4gICAgICAgICAgaWQ6ICdtYWluJ1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybignW3Bhc3N0aHJvdWdoLXJlbXV4ZXIudHNdOiBpbml0U2VnbWVudCBkb2VzIG5vdCBjb250YWluIG1vb3Ygb3IgdHJhayBib3hlcy4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5pdFRyYWNrcyA9IHRyYWNrcztcbiAgICB9O1xuICAgIF9wcm90by5yZW11eCA9IGZ1bmN0aW9uIHJlbXV4KGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2ssIGlkM1RyYWNrLCB0ZXh0VHJhY2ssIHRpbWVPZmZzZXQsIGFjY3VyYXRlVGltZU9mZnNldCkge1xuICAgICAgdmFyIF9pbml0RGF0YSwgX2luaXREYXRhMjtcbiAgICAgIHZhciBpbml0UFRTID0gdGhpcy5pbml0UFRTLFxuICAgICAgICBsYXN0RW5kVGltZSA9IHRoaXMubGFzdEVuZFRpbWU7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBhdWRpbzogdW5kZWZpbmVkLFxuICAgICAgICB2aWRlbzogdW5kZWZpbmVkLFxuICAgICAgICB0ZXh0OiB0ZXh0VHJhY2ssXG4gICAgICAgIGlkMzogaWQzVHJhY2ssXG4gICAgICAgIGluaXRTZWdtZW50OiB1bmRlZmluZWRcbiAgICAgIH07XG5cbiAgICAgIC8vIElmIHdlIGhhdmVuJ3QgeWV0IHNldCBhIGxhc3RFbmREVFMsIG9yIGl0IHdhcyByZXNldCwgc2V0IGl0IHRvIHRoZSBwcm92aWRlZCB0aW1lT2Zmc2V0LiBXZSB3YW50IHRvIHVzZSB0aGVcbiAgICAgIC8vIGxhc3RFbmREVFMgb3ZlciB0aW1lT2Zmc2V0IHdoZW5ldmVyIHBvc3NpYmxlOyBkdXJpbmcgcHJvZ3Jlc3NpdmUgcGxheWJhY2ssIHRoZSBtZWRpYSBzb3VyY2Ugd2lsbCBub3QgdXBkYXRlXG4gICAgICAvLyB0aGUgbWVkaWEgZHVyYXRpb24gKHdoaWNoIGlzIHdoYXQgdGltZU9mZnNldCBpcyBwcm92aWRlZCBhcykgYmVmb3JlIHdlIG5lZWQgdG8gcHJvY2VzcyB0aGUgbmV4dCBjaHVuay5cbiAgICAgIGlmICghaXNGaW5pdGVOdW1iZXIobGFzdEVuZFRpbWUpKSB7XG4gICAgICAgIGxhc3RFbmRUaW1lID0gdGhpcy5sYXN0RW5kVGltZSA9IHRpbWVPZmZzZXQgfHwgMDtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGJpbmFyeSBzZWdtZW50IGRhdGEgaXMgYWRkZWQgdG8gdGhlIHZpZGVvVHJhY2sgaW4gdGhlIG1wNGRlbXV4ZXIuIFdlIGRvbid0IGNoZWNrIHRvIHNlZSBpZiB0aGUgZGF0YSBpcyBvbmx5XG4gICAgICAvLyBhdWRpbyBvciB2aWRlbyAob3IgYm90aCk7IGFkZGluZyBpdCB0byB2aWRlbyB3YXMgYW4gYXJiaXRyYXJ5IGNob2ljZS5cbiAgICAgIHZhciBkYXRhID0gdmlkZW9UcmFjay5zYW1wbGVzO1xuICAgICAgaWYgKCEoZGF0YSAhPSBudWxsICYmIGRhdGEubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluaXRTZWdtZW50ID0ge1xuICAgICAgICBpbml0UFRTOiB1bmRlZmluZWQsXG4gICAgICAgIHRpbWVzY2FsZTogdW5kZWZpbmVkLFxuICAgICAgICB0cmFja0lkOiB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgICB2YXIgaW5pdERhdGEgPSB0aGlzLmluaXREYXRhO1xuICAgICAgaWYgKCEoKF9pbml0RGF0YSA9IGluaXREYXRhKSAhPSBudWxsICYmIF9pbml0RGF0YS5sZW5ndGgpKSB7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVJbml0U2VnbWVudChkYXRhKTtcbiAgICAgICAgaW5pdERhdGEgPSB0aGlzLmluaXREYXRhO1xuICAgICAgfVxuICAgICAgaWYgKCEoKF9pbml0RGF0YTIgPSBpbml0RGF0YSkgIT0gbnVsbCAmJiBfaW5pdERhdGEyLmxlbmd0aCkpIHtcbiAgICAgICAgLy8gV2UgY2FuJ3QgcmVtdXggaWYgdGhlIGluaXRTZWdtZW50IGNvdWxkIG5vdCBiZSBnZW5lcmF0ZWRcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybignW3Bhc3N0aHJvdWdoLXJlbXV4ZXIudHNdOiBGYWlsZWQgdG8gZ2VuZXJhdGUgaW5pdFNlZ21lbnQuJyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5lbWl0SW5pdFNlZ21lbnQpIHtcbiAgICAgICAgaW5pdFNlZ21lbnQudHJhY2tzID0gdGhpcy5pbml0VHJhY2tzO1xuICAgICAgICB0aGlzLmVtaXRJbml0U2VnbWVudCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRyYWNrU2FtcGxlRGF0YSA9IGdldFNhbXBsZURhdGEoZGF0YSwgaW5pdERhdGEsIHRoaXMubG9nZ2VyKTtcbiAgICAgIHZhciBhdWRpb1NhbXBsZVRpbWVzdGFtcHMgPSBpbml0RGF0YS5hdWRpbyA/IHRyYWNrU2FtcGxlRGF0YVtpbml0RGF0YS5hdWRpby5pZF0gOiBudWxsO1xuICAgICAgdmFyIHZpZGVvU2FtcGxlVGltZXN0YW1wcyA9IGluaXREYXRhLnZpZGVvID8gdHJhY2tTYW1wbGVEYXRhW2luaXREYXRhLnZpZGVvLmlkXSA6IG51bGw7XG4gICAgICB2YXIgdmlkZW9TdGFydFRpbWUgPSB0b1N0YXJ0RW5kT3JEZWZhdWx0KHZpZGVvU2FtcGxlVGltZXN0YW1wcywgSW5maW5pdHkpO1xuICAgICAgdmFyIGF1ZGlvU3RhcnRUaW1lID0gdG9TdGFydEVuZE9yRGVmYXVsdChhdWRpb1NhbXBsZVRpbWVzdGFtcHMsIEluZmluaXR5KTtcbiAgICAgIHZhciB2aWRlb0VuZFRpbWUgPSB0b1N0YXJ0RW5kT3JEZWZhdWx0KHZpZGVvU2FtcGxlVGltZXN0YW1wcywgMCwgdHJ1ZSk7XG4gICAgICB2YXIgYXVkaW9FbmRUaW1lID0gdG9TdGFydEVuZE9yRGVmYXVsdChhdWRpb1NhbXBsZVRpbWVzdGFtcHMsIDAsIHRydWUpO1xuICAgICAgdmFyIGJhc2VPZmZzZXRTYW1wbGVzO1xuICAgICAgdmFyIGRlY29kZVRpbWUgPSB0aW1lT2Zmc2V0O1xuICAgICAgdmFyIGR1cmF0aW9uID0gMDtcbiAgICAgIGlmIChhdWRpb1NhbXBsZVRpbWVzdGFtcHMgJiYgKCF2aWRlb1NhbXBsZVRpbWVzdGFtcHMgfHwgIWluaXRQVFMgJiYgYXVkaW9TdGFydFRpbWUgPCB2aWRlb1N0YXJ0VGltZSB8fCBpbml0UFRTICYmIGluaXRQVFMudHJhY2tJZCA9PT0gaW5pdERhdGEuYXVkaW8uaWQpKSB7XG4gICAgICAgIGluaXRTZWdtZW50LnRyYWNrSWQgPSBpbml0RGF0YS5hdWRpby5pZDtcbiAgICAgICAgYmFzZU9mZnNldFNhbXBsZXMgPSBhdWRpb1NhbXBsZVRpbWVzdGFtcHM7XG4gICAgICAgIGR1cmF0aW9uID0gYXVkaW9FbmRUaW1lIC0gYXVkaW9TdGFydFRpbWU7XG4gICAgICB9IGVsc2UgaWYgKHZpZGVvU2FtcGxlVGltZXN0YW1wcykge1xuICAgICAgICBpbml0U2VnbWVudC50cmFja0lkID0gaW5pdERhdGEudmlkZW8uaWQ7XG4gICAgICAgIGJhc2VPZmZzZXRTYW1wbGVzID0gdmlkZW9TYW1wbGVUaW1lc3RhbXBzO1xuICAgICAgICBkdXJhdGlvbiA9IHZpZGVvRW5kVGltZSAtIHZpZGVvU3RhcnRUaW1lO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2VPZmZzZXRTYW1wbGVzKSB7XG4gICAgICAgIHZhciB0aW1lc2NhbGUgPSBiYXNlT2Zmc2V0U2FtcGxlcy50aW1lc2NhbGU7XG4gICAgICAgIGRlY29kZVRpbWUgPSBiYXNlT2Zmc2V0U2FtcGxlcy5zdGFydCAvIHRpbWVzY2FsZTtcbiAgICAgICAgaW5pdFNlZ21lbnQudGltZXNjYWxlID0gdGltZXNjYWxlO1xuICAgICAgICBpZiAoIWluaXRQVFMpIHtcbiAgICAgICAgICBpbml0U2VnbWVudC5pbml0UFRTID0gYmFzZU9mZnNldFNhbXBsZXMuc3RhcnQgLSB0aW1lT2Zmc2V0ICogdGltZXNjYWxlO1xuICAgICAgICAgIHRoaXMuaW5pdFBUUyA9IGluaXRQVFMgPSB7XG4gICAgICAgICAgICBiYXNlVGltZTogaW5pdFNlZ21lbnQuaW5pdFBUUyxcbiAgICAgICAgICAgIHRpbWVzY2FsZTogdGltZXNjYWxlLFxuICAgICAgICAgICAgdHJhY2tJZDogaW5pdFNlZ21lbnQudHJhY2tJZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgoYWNjdXJhdGVUaW1lT2Zmc2V0IHx8ICFpbml0UFRTKSAmJiAoaXNJbnZhbGlkSW5pdFB0cyhpbml0UFRTLCBkZWNvZGVUaW1lLCB0aW1lT2Zmc2V0LCBkdXJhdGlvbikgfHwgaW5pdFNlZ21lbnQudGltZXNjYWxlICE9PSBpbml0UFRTLnRpbWVzY2FsZSkpIHtcbiAgICAgICAgaW5pdFNlZ21lbnQuaW5pdFBUUyA9IGRlY29kZVRpbWUgLSB0aW1lT2Zmc2V0O1xuICAgICAgICBpZiAoaW5pdFBUUyAmJiBpbml0UFRTLnRpbWVzY2FsZSA9PT0gMSkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJBZGp1c3RpbmcgaW5pdFBUUyBAXCIgKyB0aW1lT2Zmc2V0ICsgXCIgZnJvbSBcIiArIGluaXRQVFMuYmFzZVRpbWUgLyBpbml0UFRTLnRpbWVzY2FsZSArIFwiIHRvIFwiICsgaW5pdFNlZ21lbnQuaW5pdFBUUyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0UFRTID0gaW5pdFBUUyA9IHtcbiAgICAgICAgICBiYXNlVGltZTogaW5pdFNlZ21lbnQuaW5pdFBUUyxcbiAgICAgICAgICB0aW1lc2NhbGU6IDFcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBzdGFydFRpbWUgPSBhdWRpb1RyYWNrID8gZGVjb2RlVGltZSAtIGluaXRQVFMuYmFzZVRpbWUgLyBpbml0UFRTLnRpbWVzY2FsZSA6IGxhc3RFbmRUaW1lO1xuICAgICAgb2Zmc2V0U3RhcnREVFMoaW5pdERhdGEsIGRhdGEsIGluaXRQVFMuYmFzZVRpbWUgLyBpbml0UFRTLnRpbWVzY2FsZSk7XG4gICAgICB2YXIgZW5kVGltZSA9IHN0YXJ0VGltZSArIGR1cmF0aW9uO1xuICAgICAgaWYgKGR1cmF0aW9uID4gMCkge1xuICAgICAgICB0aGlzLmxhc3RFbmRUaW1lID0gZW5kVGltZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ0R1cmF0aW9uIHBhcnNlZCBmcm9tIG1wNCBzaG91bGQgYmUgZ3JlYXRlciB0aGFuIHplcm8nKTtcbiAgICAgICAgdGhpcy5yZXNldE5leHRUaW1lc3RhbXAoKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNBdWRpbyA9ICEhaW5pdERhdGEuYXVkaW87XG4gICAgICB2YXIgaGFzVmlkZW8gPSAhIWluaXREYXRhLnZpZGVvO1xuICAgICAgdmFyIHR5cGUgPSAnJztcbiAgICAgIGlmIChoYXNBdWRpbykge1xuICAgICAgICB0eXBlICs9ICdhdWRpbyc7XG4gICAgICB9XG4gICAgICBpZiAoaGFzVmlkZW8pIHtcbiAgICAgICAgdHlwZSArPSAndmlkZW8nO1xuICAgICAgfVxuICAgICAgdmFyIHRyYWNrID0ge1xuICAgICAgICBkYXRhMTogZGF0YSxcbiAgICAgICAgc3RhcnRQVFM6IHN0YXJ0VGltZSxcbiAgICAgICAgc3RhcnREVFM6IHN0YXJ0VGltZSxcbiAgICAgICAgZW5kUFRTOiBlbmRUaW1lLFxuICAgICAgICBlbmREVFM6IGVuZFRpbWUsXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGhhc0F1ZGlvOiBoYXNBdWRpbyxcbiAgICAgICAgaGFzVmlkZW86IGhhc1ZpZGVvLFxuICAgICAgICBuYjogMSxcbiAgICAgICAgZHJvcHBlZDogMFxuICAgICAgfTtcbiAgICAgIHJlc3VsdC5hdWRpbyA9IGhhc0F1ZGlvICYmICFoYXNWaWRlbyA/IHRyYWNrIDogdW5kZWZpbmVkO1xuICAgICAgcmVzdWx0LnZpZGVvID0gaGFzVmlkZW8gPyB0cmFjayA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciB2aWRlb1NhbXBsZUNvdW50ID0gdmlkZW9TYW1wbGVUaW1lc3RhbXBzID09IG51bGwgPyB2b2lkIDAgOiB2aWRlb1NhbXBsZVRpbWVzdGFtcHMuc2FtcGxlQ291bnQ7XG4gICAgICBpZiAodmlkZW9TYW1wbGVDb3VudCkge1xuICAgICAgICB2YXIgZmlyc3RLZXlGcmFtZSA9IHZpZGVvU2FtcGxlVGltZXN0YW1wcy5rZXlGcmFtZUluZGV4O1xuICAgICAgICB2YXIgaW5kZXBlbmRlbnQgPSBmaXJzdEtleUZyYW1lICE9PSAtMTtcbiAgICAgICAgdHJhY2submIgPSB2aWRlb1NhbXBsZUNvdW50O1xuICAgICAgICB0cmFjay5kcm9wcGVkID0gZmlyc3RLZXlGcmFtZSA9PT0gMCB8fCB0aGlzLmlzVmlkZW9Db250aWd1b3VzID8gMCA6IGluZGVwZW5kZW50ID8gZmlyc3RLZXlGcmFtZSA6IHZpZGVvU2FtcGxlQ291bnQ7XG4gICAgICAgIHRyYWNrLmluZGVwZW5kZW50ID0gaW5kZXBlbmRlbnQ7XG4gICAgICAgIHRyYWNrLmZpcnN0S2V5RnJhbWUgPSBmaXJzdEtleUZyYW1lO1xuICAgICAgICBpZiAoaW5kZXBlbmRlbnQgJiYgdmlkZW9TYW1wbGVUaW1lc3RhbXBzLmtleUZyYW1lU3RhcnQpIHtcbiAgICAgICAgICB0cmFjay5maXJzdEtleUZyYW1lUFRTID0gdmlkZW9TYW1wbGVUaW1lc3RhbXBzLmtleUZyYW1lU3RhcnQgLSBpbml0UFRTLmJhc2VUaW1lIC8gaW5pdFBUUy50aW1lc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzVmlkZW9Db250aWd1b3VzKSB7XG4gICAgICAgICAgcmVzdWx0LmluZGVwZW5kZW50ID0gaW5kZXBlbmRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1ZpZGVvQ29udGlndW91cyB8fCAodGhpcy5pc1ZpZGVvQ29udGlndW91cyA9IGluZGVwZW5kZW50KTtcbiAgICAgICAgaWYgKHRyYWNrLmRyb3BwZWQpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFwiZm1wNCBkb2VzIG5vdCBzdGFydCB3aXRoIElEUjogZmlyc3RJRFIgXCIgKyBmaXJzdEtleUZyYW1lICsgXCIvXCIgKyB2aWRlb1NhbXBsZUNvdW50ICsgXCIgZHJvcHBlZDogXCIgKyB0cmFjay5kcm9wcGVkICsgXCIgcHRzOiBcIiArICh0cmFjay5maXJzdEtleUZyYW1lUFRTIHx8ICdOQScpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0LmluaXRTZWdtZW50ID0gaW5pdFNlZ21lbnQ7XG4gICAgICByZXN1bHQuaWQzID0gZmx1c2hUZXh0VHJhY2tNZXRhZGF0YUN1ZVNhbXBsZXMoaWQzVHJhY2ssIHRpbWVPZmZzZXQsIGluaXRQVFMsIGluaXRQVFMpO1xuICAgICAgaWYgKHRleHRUcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQudGV4dCA9IGZsdXNoVGV4dFRyYWNrVXNlcmRhdGFDdWVTYW1wbGVzKHRleHRUcmFjaywgdGltZU9mZnNldCwgaW5pdFBUUyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgcmV0dXJuIFBhc3NUaHJvdWdoUmVtdXhlcjtcbiAgfSgpO1xuICBmdW5jdGlvbiB0b1N0YXJ0RW5kT3JEZWZhdWx0KHRyYWNrVGltZXMsIGRlZmF1bHRWYWx1ZSwgZW5kKSB7XG4gICAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgICBlbmQgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuICh0cmFja1RpbWVzID09IG51bGwgPyB2b2lkIDAgOiB0cmFja1RpbWVzLnN0YXJ0KSAhPT0gdW5kZWZpbmVkID8gKHRyYWNrVGltZXMuc3RhcnQgKyAoZW5kID8gdHJhY2tUaW1lcy5kdXJhdGlvbiA6IDApKSAvIHRyYWNrVGltZXMudGltZXNjYWxlIDogZGVmYXVsdFZhbHVlO1xuICB9XG4gIGZ1bmN0aW9uIGlzSW52YWxpZEluaXRQdHMoaW5pdFBUUywgc3RhcnREVFMsIHRpbWVPZmZzZXQsIGR1cmF0aW9uKSB7XG4gICAgaWYgKGluaXRQVFMgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBJbml0UFRTIGlzIGludmFsaWQgd2hlbiBkaXN0YW5jZSBmcm9tIHByb2dyYW0gd291bGQgYmUgbW9yZSB0aGFuIHNlZ21lbnQgZHVyYXRpb24gb3IgYSBtaW5pbXVtIG9mIG9uZSBzZWNvbmRcbiAgICB2YXIgbWluRHVyYXRpb24gPSBNYXRoLm1heChkdXJhdGlvbiwgMSk7XG4gICAgdmFyIHN0YXJ0VGltZSA9IHN0YXJ0RFRTIC0gaW5pdFBUUy5iYXNlVGltZSAvIGluaXRQVFMudGltZXNjYWxlO1xuICAgIHJldHVybiBNYXRoLmFicyhzdGFydFRpbWUgLSB0aW1lT2Zmc2V0KSA+IG1pbkR1cmF0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGdldFBhcnNlZFRyYWNrQ29kZWModHJhY2ssIHR5cGUsIGxvZ2dlcikge1xuICAgIHZhciBwYXJzZWRDb2RlYyA9IHRyYWNrID09IG51bGwgPyB2b2lkIDAgOiB0cmFjay5jb2RlYztcbiAgICBpZiAocGFyc2VkQ29kZWMgJiYgcGFyc2VkQ29kZWMubGVuZ3RoID4gNCkge1xuICAgICAgcmV0dXJuIHBhcnNlZENvZGVjO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPKSB7XG4gICAgICBpZiAocGFyc2VkQ29kZWMgPT09ICdlYy0zJyB8fCBwYXJzZWRDb2RlYyA9PT0gJ2FjLTMnIHx8IHBhcnNlZENvZGVjID09PSAnYWxhYycpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZENvZGVjO1xuICAgICAgfVxuICAgICAgaWYgKHBhcnNlZENvZGVjID09PSAnZkxhQycgfHwgcGFyc2VkQ29kZWMgPT09ICdPcHVzJykge1xuICAgICAgICAvLyBPcHRpbmcgbm90IHRvIGdldCBgcHJlZmVyTWFuYWdlZE1lZGlhU291cmNlYCBmcm9tIHBsYXllciBjb25maWcgZm9yIGlzU3VwcG9ydGVkKCkgY2hlY2sgZm9yIHNpbXBsaWNpdHlcbiAgICAgICAgdmFyIHByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZ2V0Q29kZWNDb21wYXRpYmxlTmFtZShwYXJzZWRDb2RlYywgcHJlZmVyTWFuYWdlZE1lZGlhU291cmNlKTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci53YXJuKFwiVW5oYW5kbGVkIGF1ZGlvIGNvZGVjIFxcXCJcIiArIHBhcnNlZENvZGVjICsgXCJcXFwiIGluIG1wNCBNQVBcIik7XG4gICAgICByZXR1cm4gcGFyc2VkQ29kZWMgfHwgJ21wNGEnO1xuICAgIH1cbiAgICAvLyBQcm92aWRlIGRlZmF1bHRzIGJhc2VkIG9uIGNvZGVjIHR5cGVcbiAgICAvLyBUaGlzIGFsbG93cyBmb3Igc29tZSBwbGF5YmFjayBvZiBzb21lIGZtcDQgcGxheWxpc3RzIHdpdGhvdXQgQ09ERUNTIGRlZmluZWQgaW4gbWFuaWZlc3RcbiAgICBsb2dnZXIud2FybihcIlVuaGFuZGxlZCB2aWRlbyBjb2RlYyBcXFwiXCIgKyBwYXJzZWRDb2RlYyArIFwiXFxcIiBpbiBtcDQgTUFQXCIpO1xuICAgIHJldHVybiBwYXJzZWRDb2RlYyB8fCAnYXZjMSc7XG4gIH1cblxuICB2YXIgbm93O1xuICAvLyBwZXJmb3JtYW5jZS5ub3coKSBub3QgYXZhaWxhYmxlIG9uIFdlYldvcmtlciwgYXQgbGVhc3Qgb24gU2FmYXJpIERlc2t0b3BcbiAgdHJ5IHtcbiAgICBub3cgPSBzZWxmLnBlcmZvcm1hbmNlLm5vdy5iaW5kKHNlbGYucGVyZm9ybWFuY2UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBub3cgPSBEYXRlLm5vdztcbiAgfVxuICB2YXIgbXV4Q29uZmlnID0gW3tcbiAgICBkZW11eDogTVA0RGVtdXhlcixcbiAgICByZW11eDogUGFzc1Rocm91Z2hSZW11eGVyXG4gIH0sIHtcbiAgICBkZW11eDogVFNEZW11eGVyLFxuICAgIHJlbXV4OiBNUDRSZW11eGVyXG4gIH0sIHtcbiAgICBkZW11eDogQUFDRGVtdXhlcixcbiAgICByZW11eDogTVA0UmVtdXhlclxuICB9LCB7XG4gICAgZGVtdXg6IE1QM0RlbXV4ZXIsXG4gICAgcmVtdXg6IE1QNFJlbXV4ZXJcbiAgfV07XG4gIHtcbiAgICBtdXhDb25maWcuc3BsaWNlKDIsIDAsIHtcbiAgICAgIGRlbXV4OiBBQzNEZW11eGVyLFxuICAgICAgcmVtdXg6IE1QNFJlbXV4ZXJcbiAgICB9KTtcbiAgfVxuICB2YXIgVHJhbnNtdXhlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNtdXhlcihvYnNlcnZlciwgdHlwZVN1cHBvcnRlZCwgY29uZmlnLCB2ZW5kb3IsIGlkLCBsb2dnZXIpIHtcbiAgICAgIHRoaXMuYXN5bmNSZXN1bHQgPSBmYWxzZTtcbiAgICAgIHRoaXMubG9nZ2VyID0gdm9pZCAwO1xuICAgICAgdGhpcy5vYnNlcnZlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMudHlwZVN1cHBvcnRlZCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuY29uZmlnID0gdm9pZCAwO1xuICAgICAgdGhpcy5pZCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZGVtdXhlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMucmVtdXhlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZGVjcnlwdGVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5wcm9iZSA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZGVjcnlwdGlvblByb21pc2UgPSBudWxsO1xuICAgICAgdGhpcy50cmFuc211eENvbmZpZyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuY3VycmVudFRyYW5zbXV4U3RhdGUgPSB2b2lkIDA7XG4gICAgICB0aGlzLm9ic2VydmVyID0gb2JzZXJ2ZXI7XG4gICAgICB0aGlzLnR5cGVTdXBwb3J0ZWQgPSB0eXBlU3VwcG9ydGVkO1xuICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IFRyYW5zbXV4ZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5jb25maWd1cmUgPSBmdW5jdGlvbiBjb25maWd1cmUodHJhbnNtdXhDb25maWcpIHtcbiAgICAgIHRoaXMudHJhbnNtdXhDb25maWcgPSB0cmFuc211eENvbmZpZztcbiAgICAgIGlmICh0aGlzLmRlY3J5cHRlcikge1xuICAgICAgICB0aGlzLmRlY3J5cHRlci5yZXNldCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGRhdGEsIGRlY3J5cHRkYXRhLCBjaHVua01ldGEsIHN0YXRlKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIHN0YXRzID0gY2h1bmtNZXRhLnRyYW5zbXV4aW5nO1xuICAgICAgc3RhdHMuZXhlY3V0ZVN0YXJ0ID0gbm93KCk7XG4gICAgICB2YXIgdWludERhdGEgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICAgIHZhciBjdXJyZW50VHJhbnNtdXhTdGF0ZSA9IHRoaXMuY3VycmVudFRyYW5zbXV4U3RhdGUsXG4gICAgICAgIHRyYW5zbXV4Q29uZmlnID0gdGhpcy50cmFuc211eENvbmZpZztcbiAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUcmFuc211eFN0YXRlID0gc3RhdGU7XG4gICAgICB9XG4gICAgICB2YXIgX3JlZiA9IHN0YXRlIHx8IGN1cnJlbnRUcmFuc211eFN0YXRlLFxuICAgICAgICBjb250aWd1b3VzID0gX3JlZi5jb250aWd1b3VzLFxuICAgICAgICBkaXNjb250aW51aXR5ID0gX3JlZi5kaXNjb250aW51aXR5LFxuICAgICAgICB0cmFja1N3aXRjaCA9IF9yZWYudHJhY2tTd2l0Y2gsXG4gICAgICAgIGFjY3VyYXRlVGltZU9mZnNldCA9IF9yZWYuYWNjdXJhdGVUaW1lT2Zmc2V0LFxuICAgICAgICB0aW1lT2Zmc2V0ID0gX3JlZi50aW1lT2Zmc2V0LFxuICAgICAgICBpbml0U2VnbWVudENoYW5nZSA9IF9yZWYuaW5pdFNlZ21lbnRDaGFuZ2U7XG4gICAgICB2YXIgYXVkaW9Db2RlYyA9IHRyYW5zbXV4Q29uZmlnLmF1ZGlvQ29kZWMsXG4gICAgICAgIHZpZGVvQ29kZWMgPSB0cmFuc211eENvbmZpZy52aWRlb0NvZGVjLFxuICAgICAgICBkZWZhdWx0SW5pdFB0cyA9IHRyYW5zbXV4Q29uZmlnLmRlZmF1bHRJbml0UHRzLFxuICAgICAgICBkdXJhdGlvbiA9IHRyYW5zbXV4Q29uZmlnLmR1cmF0aW9uLFxuICAgICAgICBpbml0U2VnbWVudERhdGEgPSB0cmFuc211eENvbmZpZy5pbml0U2VnbWVudERhdGE7XG4gICAgICB2YXIga2V5RGF0YSA9IGdldEVuY3J5cHRpb25UeXBlKHVpbnREYXRhLCBkZWNyeXB0ZGF0YSk7XG4gICAgICBpZiAoa2V5RGF0YSAmJiBpc0Z1bGxTZWdtZW50RW5jcnlwdGlvbihrZXlEYXRhLm1ldGhvZCkpIHtcbiAgICAgICAgdmFyIGRlY3J5cHRlciA9IHRoaXMuZ2V0RGVjcnlwdGVyKCk7XG4gICAgICAgIHZhciBhZXNNb2RlID0gZ2V0QWVzTW9kZUZyb21GdWxsU2VnbWVudE1ldGhvZChrZXlEYXRhLm1ldGhvZCk7XG5cbiAgICAgICAgLy8gU29mdHdhcmUgZGVjcnlwdGlvbiBpcyBzeW5jaHJvbm91czsgd2ViQ3J5cHRvIGlzIG5vdFxuICAgICAgICBpZiAoZGVjcnlwdGVyLmlzU3luYygpKSB7XG4gICAgICAgICAgLy8gU29mdHdhcmUgZGVjcnlwdGlvbiBpcyBwcm9ncmVzc2l2ZS4gUHJvZ3Jlc3NpdmUgZGVjcnlwdGlvbiBtYXkgbm90IHJldHVybiBhIHJlc3VsdCBvbiBlYWNoIGNhbGwuIEFueSBjYWNoZWRcbiAgICAgICAgICAvLyBkYXRhIGlzIGhhbmRsZWQgaW4gdGhlIGZsdXNoKCkgY2FsbFxuICAgICAgICAgIHZhciBkZWNyeXB0ZWREYXRhID0gZGVjcnlwdGVyLnNvZnR3YXJlRGVjcnlwdCh1aW50RGF0YSwga2V5RGF0YS5rZXkuYnVmZmVyLCBrZXlEYXRhLml2LmJ1ZmZlciwgYWVzTW9kZSk7XG4gICAgICAgICAgLy8gRm9yIExvdy1MYXRlbmN5IEhMUyBQYXJ0cywgZGVjcnlwdCBpbiBwbGFjZSwgc2luY2UgcGFydCBwYXJzaW5nIGlzIGV4cGVjdGVkIG9uIHB1c2ggcHJvZ3Jlc3NcbiAgICAgICAgICB2YXIgbG9hZGluZ1BhcnRzID0gY2h1bmtNZXRhLnBhcnQgPiAtMTtcbiAgICAgICAgICBpZiAobG9hZGluZ1BhcnRzKSB7XG4gICAgICAgICAgICB2YXIgX2RhdGEgPSBkZWNyeXB0ZXIuZmx1c2goKTtcbiAgICAgICAgICAgIGRlY3J5cHRlZERhdGEgPSBfZGF0YSA/IF9kYXRhLmJ1ZmZlciA6IF9kYXRhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWRlY3J5cHRlZERhdGEpIHtcbiAgICAgICAgICAgIHN0YXRzLmV4ZWN1dGVFbmQgPSBub3coKTtcbiAgICAgICAgICAgIHJldHVybiBlbXB0eVJlc3VsdChjaHVua01ldGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1aW50RGF0YSA9IG5ldyBVaW50OEFycmF5KGRlY3J5cHRlZERhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYXN5bmNSZXN1bHQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuZGVjcnlwdGlvblByb21pc2UgPSBkZWNyeXB0ZXIud2ViQ3J5cHRvRGVjcnlwdCh1aW50RGF0YSwga2V5RGF0YS5rZXkuYnVmZmVyLCBrZXlEYXRhLml2LmJ1ZmZlciwgYWVzTW9kZSkudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkRGF0YSkge1xuICAgICAgICAgICAgLy8gQ2FsbGluZyBwdXNoIGhlcmUgaXMgaW1wb3J0YW50OyBpZiBmbHVzaCgpIGlzIGNhbGxlZCB3aGlsZSB0aGlzIGlzIHN0aWxsIHJlc29sdmluZywgdGhpcyBlbnN1cmVzIHRoYXRcbiAgICAgICAgICAgIC8vIHRoZSBkZWNyeXB0ZWQgZGF0YSBoYXMgYmVlbiB0cmFuc211eGVkXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMucHVzaChkZWNyeXB0ZWREYXRhLCBudWxsLCBjaHVua01ldGEpO1xuICAgICAgICAgICAgX3RoaXMuZGVjcnlwdGlvblByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0aW9uUHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHJlc2V0TXV4ZXJzID0gdGhpcy5uZWVkc1Byb2JpbmcoZGlzY29udGludWl0eSwgdHJhY2tTd2l0Y2gpO1xuICAgICAgaWYgKHJlc2V0TXV4ZXJzKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMuY29uZmlndXJlVHJhbnNtdXhlcih1aW50RGF0YSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJbdHJhbnNtdXhlcl0gXCIgKyBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICB0aGlzLm9ic2VydmVyLmVtaXQoRXZlbnRzLkVSUk9SLCBFdmVudHMuRVJST1IsIHtcbiAgICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTUVESUFfRVJST1IsXG4gICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuRlJBR19QQVJTSU5HX0VSUk9SLFxuICAgICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgcmVhc29uOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHMuZXhlY3V0ZUVuZCA9IG5vdygpO1xuICAgICAgICAgIHJldHVybiBlbXB0eVJlc3VsdChjaHVua01ldGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGlzY29udGludWl0eSB8fCB0cmFja1N3aXRjaCB8fCBpbml0U2VnbWVudENoYW5nZSB8fCByZXNldE11eGVycykge1xuICAgICAgICB0aGlzLnJlc2V0SW5pdFNlZ21lbnQoaW5pdFNlZ21lbnREYXRhLCBhdWRpb0NvZGVjLCB2aWRlb0NvZGVjLCBkdXJhdGlvbiwgZGVjcnlwdGRhdGEpO1xuICAgICAgfVxuICAgICAgaWYgKGRpc2NvbnRpbnVpdHkgfHwgaW5pdFNlZ21lbnRDaGFuZ2UgfHwgcmVzZXRNdXhlcnMpIHtcbiAgICAgICAgdGhpcy5yZXNldEluaXRpYWxUaW1lc3RhbXAoZGVmYXVsdEluaXRQdHMpO1xuICAgICAgfVxuICAgICAgaWYgKCFjb250aWd1b3VzKSB7XG4gICAgICAgIHRoaXMucmVzZXRDb250aWd1aXR5KCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy50cmFuc211eCh1aW50RGF0YSwga2V5RGF0YSwgdGltZU9mZnNldCwgYWNjdXJhdGVUaW1lT2Zmc2V0LCBjaHVua01ldGEpO1xuICAgICAgdGhpcy5hc3luY1Jlc3VsdCA9IGlzUHJvbWlzZShyZXN1bHQpO1xuICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IHRoaXMuY3VycmVudFRyYW5zbXV4U3RhdGU7XG4gICAgICBjdXJyZW50U3RhdGUuY29udGlndW91cyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUuZGlzY29udGludWl0eSA9IGZhbHNlO1xuICAgICAgY3VycmVudFN0YXRlLnRyYWNrU3dpdGNoID0gZmFsc2U7XG4gICAgICBzdGF0cy5leGVjdXRlRW5kID0gbm93KCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIER1ZSB0byBkYXRhIGNhY2hpbmcsIGZsdXNoIGNhbGxzIGNhbiBwcm9kdWNlIG1vcmUgdGhhbiBvbmUgVHJhbnNtdXhlclJlc3VsdCAoaGVuY2UgdGhlIEFycmF5IHR5cGUpXG4gICAgO1xuICAgIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKGNodW5rTWV0YSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICB2YXIgc3RhdHMgPSBjaHVua01ldGEudHJhbnNtdXhpbmc7XG4gICAgICBzdGF0cy5leGVjdXRlU3RhcnQgPSBub3coKTtcbiAgICAgIHZhciBkZWNyeXB0ZXIgPSB0aGlzLmRlY3J5cHRlcixcbiAgICAgICAgY3VycmVudFRyYW5zbXV4U3RhdGUgPSB0aGlzLmN1cnJlbnRUcmFuc211eFN0YXRlLFxuICAgICAgICBkZWNyeXB0aW9uUHJvbWlzZSA9IHRoaXMuZGVjcnlwdGlvblByb21pc2U7XG4gICAgICBpZiAoZGVjcnlwdGlvblByb21pc2UpIHtcbiAgICAgICAgdGhpcy5hc3luY1Jlc3VsdCA9IHRydWU7XG4gICAgICAgIC8vIFVwb24gcmVzb2x1dGlvbiwgdGhlIGRlY3J5cHRpb24gcHJvbWlzZSBjYWxscyBwdXNoKCkgYW5kIHJldHVybnMgaXRzIFRyYW5zbXV4ZXJSZXN1bHQgdXAgdGhlIHN0YWNrLiBUaGVyZWZvcmVcbiAgICAgICAgLy8gb25seSBmbHVzaGluZyBpcyByZXF1aXJlZCBmb3IgYXN5bmMgZGVjcnlwdGlvblxuICAgICAgICByZXR1cm4gZGVjcnlwdGlvblByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5mbHVzaChjaHVua01ldGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHZhciB0cmFuc211eFJlc3VsdHMgPSBbXTtcbiAgICAgIHZhciB0aW1lT2Zmc2V0ID0gY3VycmVudFRyYW5zbXV4U3RhdGUudGltZU9mZnNldDtcbiAgICAgIGlmIChkZWNyeXB0ZXIpIHtcbiAgICAgICAgLy8gVGhlIGRlY3J5cHRlciBtYXkgaGF2ZSBkYXRhIGNhY2hlZCwgd2hpY2ggbmVlZHMgdG8gYmUgZGVtdXhlZC4gSW4gdGhpcyBjYXNlIHdlJ2xsIGhhdmUgdHdvIFRyYW5zbXV4UmVzdWx0c1xuICAgICAgICAvLyBUaGlzIGhhcHBlbnMgaW4gdGhlIGNhc2UgdGhhdCB3ZSByZWNlaXZlIG9ubHkgMSBwdXNoIGNhbGwgZm9yIGEgc2VnbWVudCAoZWl0aGVyIGZvciBub24tcHJvZ3Jlc3NpdmUgZG93bmxvYWRzLFxuICAgICAgICAvLyBvciBmb3IgcHJvZ3Jlc3NpdmUgZG93bmxvYWRzIHdpdGggc21hbGwgc2VnbWVudHMpXG4gICAgICAgIHZhciBkZWNyeXB0ZWREYXRhID0gZGVjcnlwdGVyLmZsdXNoKCk7XG4gICAgICAgIGlmIChkZWNyeXB0ZWREYXRhKSB7XG4gICAgICAgICAgLy8gUHVzaCBhbHdheXMgcmV0dXJucyBhIFRyYW5zbXV4ZXJSZXN1bHQgaWYgZGVjcnlwdGRhdGEgaXMgbnVsbFxuICAgICAgICAgIHRyYW5zbXV4UmVzdWx0cy5wdXNoKHRoaXMucHVzaChkZWNyeXB0ZWREYXRhLmJ1ZmZlciwgbnVsbCwgY2h1bmtNZXRhKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBkZW11eGVyID0gdGhpcy5kZW11eGVyLFxuICAgICAgICByZW11eGVyID0gdGhpcy5yZW11eGVyO1xuICAgICAgaWYgKCFkZW11eGVyIHx8ICFyZW11eGVyKSB7XG4gICAgICAgIC8vIElmIHByb2JpbmcgZmFpbGVkLCB0aGVuIEhscy5qcyBoYXMgYmVlbiBnaXZlbiBjb250ZW50IGl0cyBub3QgYWJsZSB0byBoYW5kbGVcbiAgICAgICAgc3RhdHMuZXhlY3V0ZUVuZCA9IG5vdygpO1xuICAgICAgICB2YXIgZW1wdHlSZXN1bHRzID0gW2VtcHR5UmVzdWx0KGNodW5rTWV0YSldO1xuICAgICAgICBpZiAodGhpcy5hc3luY1Jlc3VsdCkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZW1wdHlSZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW1wdHlSZXN1bHRzO1xuICAgICAgfVxuICAgICAgdmFyIGRlbXV4UmVzdWx0T3JQcm9taXNlID0gZGVtdXhlci5mbHVzaCh0aW1lT2Zmc2V0KTtcbiAgICAgIGlmIChpc1Byb21pc2UoZGVtdXhSZXN1bHRPclByb21pc2UpKSB7XG4gICAgICAgIHRoaXMuYXN5bmNSZXN1bHQgPSB0cnVlO1xuICAgICAgICAvLyBEZWNyeXB0IGZpbmFsIFNBTVBMRS1BRVMgc2FtcGxlc1xuICAgICAgICByZXR1cm4gZGVtdXhSZXN1bHRPclByb21pc2UudGhlbihmdW5jdGlvbiAoZGVtdXhSZXN1bHQpIHtcbiAgICAgICAgICBfdGhpczIuZmx1c2hSZW11eCh0cmFuc211eFJlc3VsdHMsIGRlbXV4UmVzdWx0LCBjaHVua01ldGEpO1xuICAgICAgICAgIHJldHVybiB0cmFuc211eFJlc3VsdHM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5mbHVzaFJlbXV4KHRyYW5zbXV4UmVzdWx0cywgZGVtdXhSZXN1bHRPclByb21pc2UsIGNodW5rTWV0YSk7XG4gICAgICBpZiAodGhpcy5hc3luY1Jlc3VsdCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRyYW5zbXV4UmVzdWx0cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJhbnNtdXhSZXN1bHRzO1xuICAgIH07XG4gICAgX3Byb3RvLmZsdXNoUmVtdXggPSBmdW5jdGlvbiBmbHVzaFJlbXV4KHRyYW5zbXV4UmVzdWx0cywgZGVtdXhSZXN1bHQsIGNodW5rTWV0YSkge1xuICAgICAgdmFyIGF1ZGlvVHJhY2sgPSBkZW11eFJlc3VsdC5hdWRpb1RyYWNrLFxuICAgICAgICB2aWRlb1RyYWNrID0gZGVtdXhSZXN1bHQudmlkZW9UcmFjayxcbiAgICAgICAgaWQzVHJhY2sgPSBkZW11eFJlc3VsdC5pZDNUcmFjayxcbiAgICAgICAgdGV4dFRyYWNrID0gZGVtdXhSZXN1bHQudGV4dFRyYWNrO1xuICAgICAgdmFyIF90aGlzJGN1cnJlbnRUcmFuc211eCA9IHRoaXMuY3VycmVudFRyYW5zbXV4U3RhdGUsXG4gICAgICAgIGFjY3VyYXRlVGltZU9mZnNldCA9IF90aGlzJGN1cnJlbnRUcmFuc211eC5hY2N1cmF0ZVRpbWVPZmZzZXQsXG4gICAgICAgIHRpbWVPZmZzZXQgPSBfdGhpcyRjdXJyZW50VHJhbnNtdXgudGltZU9mZnNldDtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhcIlt0cmFuc211eGVyLnRzXTogRmx1c2hlZCBcIiArIHRoaXMuaWQgKyBcIiBzbjogXCIgKyBjaHVua01ldGEuc24gKyAoY2h1bmtNZXRhLnBhcnQgPiAtMSA/ICcgcGFydDogJyArIGNodW5rTWV0YS5wYXJ0IDogJycpICsgXCIgb2YgXCIgKyAodGhpcy5pZCA9PT0gUGxheWxpc3RMZXZlbFR5cGUuTUFJTiA/ICdsZXZlbCcgOiAndHJhY2snKSArIFwiIFwiICsgY2h1bmtNZXRhLmxldmVsKTtcbiAgICAgIHZhciByZW11eFJlc3VsdCA9IHRoaXMucmVtdXhlci5yZW11eChhdWRpb1RyYWNrLCB2aWRlb1RyYWNrLCBpZDNUcmFjaywgdGV4dFRyYWNrLCB0aW1lT2Zmc2V0LCBhY2N1cmF0ZVRpbWVPZmZzZXQsIHRydWUsIHRoaXMuaWQpO1xuICAgICAgdHJhbnNtdXhSZXN1bHRzLnB1c2goe1xuICAgICAgICByZW11eFJlc3VsdDogcmVtdXhSZXN1bHQsXG4gICAgICAgIGNodW5rTWV0YTogY2h1bmtNZXRhXG4gICAgICB9KTtcbiAgICAgIGNodW5rTWV0YS50cmFuc211eGluZy5leGVjdXRlRW5kID0gbm93KCk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXRJbml0aWFsVGltZXN0YW1wID0gZnVuY3Rpb24gcmVzZXRJbml0aWFsVGltZXN0YW1wKGRlZmF1bHRJbml0UHRzKSB7XG4gICAgICB2YXIgZGVtdXhlciA9IHRoaXMuZGVtdXhlcixcbiAgICAgICAgcmVtdXhlciA9IHRoaXMucmVtdXhlcjtcbiAgICAgIGlmICghZGVtdXhlciB8fCAhcmVtdXhlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkZW11eGVyLnJlc2V0VGltZVN0YW1wKGRlZmF1bHRJbml0UHRzKTtcbiAgICAgIHJlbXV4ZXIucmVzZXRUaW1lU3RhbXAoZGVmYXVsdEluaXRQdHMpO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0Q29udGlndWl0eSA9IGZ1bmN0aW9uIHJlc2V0Q29udGlndWl0eSgpIHtcbiAgICAgIHZhciBkZW11eGVyID0gdGhpcy5kZW11eGVyLFxuICAgICAgICByZW11eGVyID0gdGhpcy5yZW11eGVyO1xuICAgICAgaWYgKCFkZW11eGVyIHx8ICFyZW11eGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRlbXV4ZXIucmVzZXRDb250aWd1aXR5KCk7XG4gICAgICByZW11eGVyLnJlc2V0TmV4dFRpbWVzdGFtcCgpO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0SW5pdFNlZ21lbnQgPSBmdW5jdGlvbiByZXNldEluaXRTZWdtZW50KGluaXRTZWdtZW50RGF0YSwgYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgdHJhY2tEdXJhdGlvbiwgZGVjcnlwdGRhdGEpIHtcbiAgICAgIHZhciBkZW11eGVyID0gdGhpcy5kZW11eGVyLFxuICAgICAgICByZW11eGVyID0gdGhpcy5yZW11eGVyO1xuICAgICAgaWYgKCFkZW11eGVyIHx8ICFyZW11eGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRlbXV4ZXIucmVzZXRJbml0U2VnbWVudChpbml0U2VnbWVudERhdGEsIGF1ZGlvQ29kZWMsIHZpZGVvQ29kZWMsIHRyYWNrRHVyYXRpb24pO1xuICAgICAgcmVtdXhlci5yZXNldEluaXRTZWdtZW50KGluaXRTZWdtZW50RGF0YSwgYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgZGVjcnlwdGRhdGEpO1xuICAgIH07XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgaWYgKHRoaXMuZGVtdXhlcikge1xuICAgICAgICB0aGlzLmRlbXV4ZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmRlbXV4ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yZW11eGVyKSB7XG4gICAgICAgIHRoaXMucmVtdXhlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucmVtdXhlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by50cmFuc211eCA9IGZ1bmN0aW9uIHRyYW5zbXV4KGRhdGEsIGtleURhdGEsIHRpbWVPZmZzZXQsIGFjY3VyYXRlVGltZU9mZnNldCwgY2h1bmtNZXRhKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgaWYgKGtleURhdGEgJiYga2V5RGF0YS5tZXRob2QgPT09ICdTQU1QTEUtQUVTJykge1xuICAgICAgICByZXN1bHQgPSB0aGlzLnRyYW5zbXV4U2FtcGxlQWVzKGRhdGEsIGtleURhdGEsIHRpbWVPZmZzZXQsIGFjY3VyYXRlVGltZU9mZnNldCwgY2h1bmtNZXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMudHJhbnNtdXhVbmVuY3J5cHRlZChkYXRhLCB0aW1lT2Zmc2V0LCBhY2N1cmF0ZVRpbWVPZmZzZXQsIGNodW5rTWV0YSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgX3Byb3RvLnRyYW5zbXV4VW5lbmNyeXB0ZWQgPSBmdW5jdGlvbiB0cmFuc211eFVuZW5jcnlwdGVkKGRhdGEsIHRpbWVPZmZzZXQsIGFjY3VyYXRlVGltZU9mZnNldCwgY2h1bmtNZXRhKSB7XG4gICAgICB2YXIgX2RlbXV4ID0gdGhpcy5kZW11eGVyLmRlbXV4KGRhdGEsIHRpbWVPZmZzZXQsIGZhbHNlLCAhdGhpcy5jb25maWcucHJvZ3Jlc3NpdmUpLFxuICAgICAgICBhdWRpb1RyYWNrID0gX2RlbXV4LmF1ZGlvVHJhY2ssXG4gICAgICAgIHZpZGVvVHJhY2sgPSBfZGVtdXgudmlkZW9UcmFjayxcbiAgICAgICAgaWQzVHJhY2sgPSBfZGVtdXguaWQzVHJhY2ssXG4gICAgICAgIHRleHRUcmFjayA9IF9kZW11eC50ZXh0VHJhY2s7XG4gICAgICB2YXIgcmVtdXhSZXN1bHQgPSB0aGlzLnJlbXV4ZXIucmVtdXgoYXVkaW9UcmFjaywgdmlkZW9UcmFjaywgaWQzVHJhY2ssIHRleHRUcmFjaywgdGltZU9mZnNldCwgYWNjdXJhdGVUaW1lT2Zmc2V0LCBmYWxzZSwgdGhpcy5pZCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW11eFJlc3VsdDogcmVtdXhSZXN1bHQsXG4gICAgICAgIGNodW5rTWV0YTogY2h1bmtNZXRhXG4gICAgICB9O1xuICAgIH07XG4gICAgX3Byb3RvLnRyYW5zbXV4U2FtcGxlQWVzID0gZnVuY3Rpb24gdHJhbnNtdXhTYW1wbGVBZXMoZGF0YSwgZGVjcnlwdERhdGEsIHRpbWVPZmZzZXQsIGFjY3VyYXRlVGltZU9mZnNldCwgY2h1bmtNZXRhKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLmRlbXV4ZXIuZGVtdXhTYW1wbGVBZXMoZGF0YSwgZGVjcnlwdERhdGEsIHRpbWVPZmZzZXQpLnRoZW4oZnVuY3Rpb24gKGRlbXV4UmVzdWx0KSB7XG4gICAgICAgIHZhciByZW11eFJlc3VsdCA9IF90aGlzMy5yZW11eGVyLnJlbXV4KGRlbXV4UmVzdWx0LmF1ZGlvVHJhY2ssIGRlbXV4UmVzdWx0LnZpZGVvVHJhY2ssIGRlbXV4UmVzdWx0LmlkM1RyYWNrLCBkZW11eFJlc3VsdC50ZXh0VHJhY2ssIHRpbWVPZmZzZXQsIGFjY3VyYXRlVGltZU9mZnNldCwgZmFsc2UsIF90aGlzMy5pZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVtdXhSZXN1bHQ6IHJlbXV4UmVzdWx0LFxuICAgICAgICAgIGNodW5rTWV0YTogY2h1bmtNZXRhXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5jb25maWd1cmVUcmFuc211eGVyID0gZnVuY3Rpb24gY29uZmlndXJlVHJhbnNtdXhlcihkYXRhKSB7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICAgIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlcixcbiAgICAgICAgdHlwZVN1cHBvcnRlZCA9IHRoaXMudHlwZVN1cHBvcnRlZDtcbiAgICAgIC8vIHByb2JlIGZvciBjb250ZW50IHR5cGVcbiAgICAgIHZhciBtdXg7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbXV4Q29uZmlnLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBfbXV4Q29uZmlnJGkkZGVtdXg7XG4gICAgICAgIGlmICgoX211eENvbmZpZyRpJGRlbXV4ID0gbXV4Q29uZmlnW2ldLmRlbXV4KSAhPSBudWxsICYmIF9tdXhDb25maWckaSRkZW11eC5wcm9iZShkYXRhLCB0aGlzLmxvZ2dlcikpIHtcbiAgICAgICAgICBtdXggPSBtdXhDb25maWdbaV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghbXV4KSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmaW5kIGRlbXV4ZXIgYnkgcHJvYmluZyBmcmFnbWVudCBkYXRhJyk7XG4gICAgICB9XG4gICAgICAvLyBzbyBsZXQncyBjaGVjayB0aGF0IGN1cnJlbnQgcmVtdXhlciBhbmQgZGVtdXhlciBhcmUgc3RpbGwgdmFsaWRcbiAgICAgIHZhciBkZW11eGVyID0gdGhpcy5kZW11eGVyO1xuICAgICAgdmFyIHJlbXV4ZXIgPSB0aGlzLnJlbXV4ZXI7XG4gICAgICB2YXIgUmVtdXhlciA9IG11eC5yZW11eDtcbiAgICAgIHZhciBEZW11eGVyID0gbXV4LmRlbXV4O1xuICAgICAgaWYgKCFyZW11eGVyIHx8ICEocmVtdXhlciBpbnN0YW5jZW9mIFJlbXV4ZXIpKSB7XG4gICAgICAgIHRoaXMucmVtdXhlciA9IG5ldyBSZW11eGVyKG9ic2VydmVyLCBjb25maWcsIHR5cGVTdXBwb3J0ZWQsIHRoaXMubG9nZ2VyKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVtdXhlciB8fCAhKGRlbXV4ZXIgaW5zdGFuY2VvZiBEZW11eGVyKSkge1xuICAgICAgICB0aGlzLmRlbXV4ZXIgPSBuZXcgRGVtdXhlcihvYnNlcnZlciwgY29uZmlnLCB0eXBlU3VwcG9ydGVkLCB0aGlzLmxvZ2dlcik7XG4gICAgICAgIHRoaXMucHJvYmUgPSBEZW11eGVyLnByb2JlO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm5lZWRzUHJvYmluZyA9IGZ1bmN0aW9uIG5lZWRzUHJvYmluZyhkaXNjb250aW51aXR5LCB0cmFja1N3aXRjaCkge1xuICAgICAgLy8gaW4gY2FzZSBvZiBjb250aW51aXR5IGNoYW5nZSwgb3IgdHJhY2sgc3dpdGNoXG4gICAgICAvLyB3ZSBtaWdodCBzd2l0Y2ggZnJvbSBjb250ZW50IHR5cGUgKEFBQyBjb250YWluZXIgdG8gVFMgY29udGFpbmVyLCBvciBUUyB0byBmbXA0IGZvciBleGFtcGxlKVxuICAgICAgcmV0dXJuICF0aGlzLmRlbXV4ZXIgfHwgIXRoaXMucmVtdXhlciB8fCBkaXNjb250aW51aXR5IHx8IHRyYWNrU3dpdGNoO1xuICAgIH07XG4gICAgX3Byb3RvLmdldERlY3J5cHRlciA9IGZ1bmN0aW9uIGdldERlY3J5cHRlcigpIHtcbiAgICAgIHZhciBkZWNyeXB0ZXIgPSB0aGlzLmRlY3J5cHRlcjtcbiAgICAgIGlmICghZGVjcnlwdGVyKSB7XG4gICAgICAgIGRlY3J5cHRlciA9IHRoaXMuZGVjcnlwdGVyID0gbmV3IERlY3J5cHRlcih0aGlzLmNvbmZpZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVjcnlwdGVyO1xuICAgIH07XG4gICAgcmV0dXJuIFRyYW5zbXV4ZXI7XG4gIH0oKTtcbiAgZnVuY3Rpb24gZ2V0RW5jcnlwdGlvblR5cGUoZGF0YSwgZGVjcnlwdERhdGEpIHtcbiAgICB2YXIgZW5jcnlwdGlvblR5cGUgPSBudWxsO1xuICAgIGlmIChkYXRhLmJ5dGVMZW5ndGggPiAwICYmIChkZWNyeXB0RGF0YSA9PSBudWxsID8gdm9pZCAwIDogZGVjcnlwdERhdGEua2V5KSAhPSBudWxsICYmIGRlY3J5cHREYXRhLml2ICE9PSBudWxsICYmIGRlY3J5cHREYXRhLm1ldGhvZCAhPSBudWxsKSB7XG4gICAgICBlbmNyeXB0aW9uVHlwZSA9IGRlY3J5cHREYXRhO1xuICAgIH1cbiAgICByZXR1cm4gZW5jcnlwdGlvblR5cGU7XG4gIH1cbiAgdmFyIGVtcHR5UmVzdWx0ID0gZnVuY3Rpb24gZW1wdHlSZXN1bHQoY2h1bmtNZXRhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlbXV4UmVzdWx0OiB7fSxcbiAgICAgIGNodW5rTWV0YTogY2h1bmtNZXRhXG4gICAgfTtcbiAgfTtcbiAgZnVuY3Rpb24gaXNQcm9taXNlKHApIHtcbiAgICByZXR1cm4gJ3RoZW4nIGluIHAgJiYgcC50aGVuIGluc3RhbmNlb2YgRnVuY3Rpb247XG4gIH1cbiAgdmFyIFRyYW5zbXV4Q29uZmlnID0gZnVuY3Rpb24gVHJhbnNtdXhDb25maWcoYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgaW5pdFNlZ21lbnREYXRhLCBkdXJhdGlvbiwgZGVmYXVsdEluaXRQdHMpIHtcbiAgICB0aGlzLmF1ZGlvQ29kZWMgPSB2b2lkIDA7XG4gICAgdGhpcy52aWRlb0NvZGVjID0gdm9pZCAwO1xuICAgIHRoaXMuaW5pdFNlZ21lbnREYXRhID0gdm9pZCAwO1xuICAgIHRoaXMuZHVyYXRpb24gPSB2b2lkIDA7XG4gICAgdGhpcy5kZWZhdWx0SW5pdFB0cyA9IHZvaWQgMDtcbiAgICB0aGlzLmF1ZGlvQ29kZWMgPSBhdWRpb0NvZGVjO1xuICAgIHRoaXMudmlkZW9Db2RlYyA9IHZpZGVvQ29kZWM7XG4gICAgdGhpcy5pbml0U2VnbWVudERhdGEgPSBpbml0U2VnbWVudERhdGE7XG4gICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIHRoaXMuZGVmYXVsdEluaXRQdHMgPSBkZWZhdWx0SW5pdFB0cyB8fCBudWxsO1xuICB9O1xuICB2YXIgVHJhbnNtdXhTdGF0ZSA9IGZ1bmN0aW9uIFRyYW5zbXV4U3RhdGUoZGlzY29udGludWl0eSwgY29udGlndW91cywgYWNjdXJhdGVUaW1lT2Zmc2V0LCB0cmFja1N3aXRjaCwgdGltZU9mZnNldCwgaW5pdFNlZ21lbnRDaGFuZ2UpIHtcbiAgICB0aGlzLmRpc2NvbnRpbnVpdHkgPSB2b2lkIDA7XG4gICAgdGhpcy5jb250aWd1b3VzID0gdm9pZCAwO1xuICAgIHRoaXMuYWNjdXJhdGVUaW1lT2Zmc2V0ID0gdm9pZCAwO1xuICAgIHRoaXMudHJhY2tTd2l0Y2ggPSB2b2lkIDA7XG4gICAgdGhpcy50aW1lT2Zmc2V0ID0gdm9pZCAwO1xuICAgIHRoaXMuaW5pdFNlZ21lbnRDaGFuZ2UgPSB2b2lkIDA7XG4gICAgdGhpcy5kaXNjb250aW51aXR5ID0gZGlzY29udGludWl0eTtcbiAgICB0aGlzLmNvbnRpZ3VvdXMgPSBjb250aWd1b3VzO1xuICAgIHRoaXMuYWNjdXJhdGVUaW1lT2Zmc2V0ID0gYWNjdXJhdGVUaW1lT2Zmc2V0O1xuICAgIHRoaXMudHJhY2tTd2l0Y2ggPSB0cmFja1N3aXRjaDtcbiAgICB0aGlzLnRpbWVPZmZzZXQgPSB0aW1lT2Zmc2V0O1xuICAgIHRoaXMuaW5pdFNlZ21lbnRDaGFuZ2UgPSBpbml0U2VnbWVudENoYW5nZTtcbiAgfTtcblxuICB2YXIgdHJhbnNtdXhlcnMgPSBbXTtcbiAgaWYgKHR5cGVvZiBfX0lOX1dPUktFUl9fICE9PSAndW5kZWZpbmVkJyAmJiBfX0lOX1dPUktFUl9fKSB7XG4gICAgc3RhcnRXb3JrZXIoKTtcbiAgfVxuICBmdW5jdGlvbiBzdGFydFdvcmtlcigpIHtcbiAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgIHZhciBkYXRhID0gZXYuZGF0YTtcbiAgICAgIHZhciBpbnN0YW5jZU5vID0gZGF0YS5pbnN0YW5jZU5vO1xuICAgICAgaWYgKGluc3RhbmNlTm8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgdHJhbnNtdXhlciA9IHRyYW5zbXV4ZXJzW2luc3RhbmNlTm9dO1xuICAgICAgaWYgKGRhdGEuY21kID09PSAncmVzZXQnKSB7XG4gICAgICAgIGRlbGV0ZSB0cmFuc211eGVyc1tkYXRhLnJlc2V0Tm9dO1xuICAgICAgICBpZiAodHJhbnNtdXhlcikge1xuICAgICAgICAgIHRyYW5zbXV4ZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuY21kID0gJ2luaXQnO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEuY21kID09PSAnaW5pdCcpIHtcbiAgICAgICAgdmFyIGNvbmZpZyA9IEpTT04ucGFyc2UoZGF0YS5jb25maWcpO1xuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIG9ic2VydmVyLm9uKEV2ZW50cy5GUkFHX0RFQ1JZUFRFRCwgZm9yd2FyZE1lc3NhZ2UpO1xuICAgICAgICBvYnNlcnZlci5vbihFdmVudHMuRVJST1IsIGZvcndhcmRNZXNzYWdlKTtcbiAgICAgICAgdmFyIGxvZ2dlciA9IGVuYWJsZUxvZ3MoY29uZmlnLmRlYnVnLCBkYXRhLmlkKTtcbiAgICAgICAgZm9yd2FyZFdvcmtlckxvZ3MobG9nZ2VyLCBpbnN0YW5jZU5vKTtcbiAgICAgICAgdHJhbnNtdXhlcnNbaW5zdGFuY2VOb10gPSBuZXcgVHJhbnNtdXhlcihvYnNlcnZlciwgZGF0YS50eXBlU3VwcG9ydGVkLCBjb25maWcsICcnLCBkYXRhLmlkLCBsb2dnZXIpO1xuICAgICAgICBmb3J3YXJkTWVzc2FnZSgnaW5pdCcsIG51bGwsIGluc3RhbmNlTm8pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbXV4ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChkYXRhLmNtZCkge1xuICAgICAgICBjYXNlICdjb25maWd1cmUnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRyYW5zbXV4ZXIuY29uZmlndXJlKGRhdGEuY29uZmlnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnZGVtdXgnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciB0cmFuc211eFJlc3VsdCA9IHRyYW5zbXV4ZXIucHVzaChkYXRhLmRhdGEsIGRhdGEuZGVjcnlwdGRhdGEsIGRhdGEuY2h1bmtNZXRhLCBkYXRhLnN0YXRlKTtcbiAgICAgICAgICAgIGlmIChpc1Byb21pc2UodHJhbnNtdXhSZXN1bHQpKSB7XG4gICAgICAgICAgICAgIHRyYW5zbXV4UmVzdWx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBlbWl0VHJhbnNtdXhDb21wbGV0ZShzZWxmLCBkYXRhLCBpbnN0YW5jZU5vKTtcbiAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZm9yd2FyZE1lc3NhZ2UoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgICAgICAgICBpbnN0YW5jZU5vOiBpbnN0YW5jZU5vLFxuICAgICAgICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5NRURJQV9FUlJPUixcbiAgICAgICAgICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5GUkFHX1BBUlNJTkdfRVJST1IsXG4gICAgICAgICAgICAgICAgICBjaHVua01ldGE6IGRhdGEuY2h1bmtNZXRhLFxuICAgICAgICAgICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgICAgZXJyOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgIHJlYXNvbjogXCJ0cmFuc211eGVyLXdvcmtlciBwdXNoIGVycm9yXCJcbiAgICAgICAgICAgICAgICB9LCBpbnN0YW5jZU5vKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbWl0VHJhbnNtdXhDb21wbGV0ZShzZWxmLCB0cmFuc211eFJlc3VsdCwgaW5zdGFuY2VObyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2ZsdXNoJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgY2h1bmtNZXRhID0gZGF0YS5jaHVua01ldGE7XG4gICAgICAgICAgICB2YXIgX3RyYW5zbXV4UmVzdWx0ID0gdHJhbnNtdXhlci5mbHVzaChjaHVua01ldGEpO1xuICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShfdHJhbnNtdXhSZXN1bHQpKSB7XG4gICAgICAgICAgICAgIF90cmFuc211eFJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlRmx1c2hSZXN1bHQoc2VsZiwgcmVzdWx0cywgY2h1bmtNZXRhLCBpbnN0YW5jZU5vKTtcbiAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZm9yd2FyZE1lc3NhZ2UoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk1FRElBX0VSUk9SLFxuICAgICAgICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLkZSQUdfUEFSU0lOR19FUlJPUixcbiAgICAgICAgICAgICAgICAgIGNodW5rTWV0YTogZGF0YS5jaHVua01ldGEsXG4gICAgICAgICAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICAgICAgICBlcnI6IGVycm9yLFxuICAgICAgICAgICAgICAgICAgcmVhc29uOiBcInRyYW5zbXV4ZXItd29ya2VyIGZsdXNoIGVycm9yXCJcbiAgICAgICAgICAgICAgICB9LCBpbnN0YW5jZU5vKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBoYW5kbGVGbHVzaFJlc3VsdChzZWxmLCBfdHJhbnNtdXhSZXN1bHQsIGNodW5rTWV0YSwgaW5zdGFuY2VObyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZW1pdFRyYW5zbXV4Q29tcGxldGUoc2VsZiwgdHJhbnNtdXhSZXN1bHQsIGluc3RhbmNlTm8pIHtcbiAgICBpZiAoaXNFbXB0eVJlc3VsdCh0cmFuc211eFJlc3VsdC5yZW11eFJlc3VsdCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHRyYW5zZmVyYWJsZSA9IFtdO1xuICAgIHZhciBfdHJhbnNtdXhSZXN1bHQkcmVtdXggPSB0cmFuc211eFJlc3VsdC5yZW11eFJlc3VsdCxcbiAgICAgIGF1ZGlvID0gX3RyYW5zbXV4UmVzdWx0JHJlbXV4LmF1ZGlvLFxuICAgICAgdmlkZW8gPSBfdHJhbnNtdXhSZXN1bHQkcmVtdXgudmlkZW87XG4gICAgaWYgKGF1ZGlvKSB7XG4gICAgICBhZGRUb1RyYW5zZmVyYWJsZSh0cmFuc2ZlcmFibGUsIGF1ZGlvKTtcbiAgICB9XG4gICAgaWYgKHZpZGVvKSB7XG4gICAgICBhZGRUb1RyYW5zZmVyYWJsZSh0cmFuc2ZlcmFibGUsIHZpZGVvKTtcbiAgICB9XG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICBldmVudDogJ3RyYW5zbXV4Q29tcGxldGUnLFxuICAgICAgZGF0YTogdHJhbnNtdXhSZXN1bHQsXG4gICAgICBpbnN0YW5jZU5vOiBpbnN0YW5jZU5vXG4gICAgfSwgdHJhbnNmZXJhYmxlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIENvbnZlcnRzIGRhdGEgdG8gYSB0cmFuc2ZlcmFibGUgb2JqZWN0IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi91cGRhdGVzLzIwMTEvMTIvVHJhbnNmZXJhYmxlLU9iamVjdHMtTGlnaHRuaW5nLUZhc3QpXG4gIC8vIGluIG9yZGVyIHRvIG1pbmltaXplIG1lc3NhZ2UgcGFzc2luZyBvdmVyaGVhZFxuICBmdW5jdGlvbiBhZGRUb1RyYW5zZmVyYWJsZSh0cmFuc2ZlcmFibGUsIHRyYWNrKSB7XG4gICAgaWYgKHRyYWNrLmRhdGExKSB7XG4gICAgICB0cmFuc2ZlcmFibGUucHVzaCh0cmFjay5kYXRhMS5idWZmZXIpO1xuICAgIH1cbiAgICBpZiAodHJhY2suZGF0YTIpIHtcbiAgICAgIHRyYW5zZmVyYWJsZS5wdXNoKHRyYWNrLmRhdGEyLmJ1ZmZlcik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZUZsdXNoUmVzdWx0KHNlbGYsIHJlc3VsdHMsIGNodW5rTWV0YSwgaW5zdGFuY2VObykge1xuICAgIHZhciBwYXJzZWQgPSByZXN1bHRzLnJlZHVjZShmdW5jdGlvbiAocGFyc2VkLCByZXN1bHQpIHtcbiAgICAgIHJldHVybiBlbWl0VHJhbnNtdXhDb21wbGV0ZShzZWxmLCByZXN1bHQsIGluc3RhbmNlTm8pIHx8IHBhcnNlZDtcbiAgICB9LCBmYWxzZSk7XG4gICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgIC8vIEVtaXQgYXQgbGVhc3Qgb25lIFwidHJhbnNtdXhDb21wbGV0ZVwiIG1lc3NhZ2UgZXZlbiBpZiBtZWRpYSBpcyBub3QgZm91bmQgdG8gdXBkYXRlIHN0cmVhbS1jb250cm9sbGVyIHN0YXRlIHRvIFBBUlNJTkdcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICBldmVudDogJ3RyYW5zbXV4Q29tcGxldGUnLFxuICAgICAgICBkYXRhOiByZXN1bHRzWzBdLFxuICAgICAgICBpbnN0YW5jZU5vOiBpbnN0YW5jZU5vXG4gICAgICB9KTtcbiAgICB9XG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICBldmVudDogJ2ZsdXNoJyxcbiAgICAgIGRhdGE6IGNodW5rTWV0YSxcbiAgICAgIGluc3RhbmNlTm86IGluc3RhbmNlTm9cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBmb3J3YXJkTWVzc2FnZShldmVudCwgZGF0YSwgaW5zdGFuY2VObykge1xuICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGluc3RhbmNlTm86IGluc3RhbmNlTm9cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBmb3J3YXJkV29ya2VyTG9ncyhsb2dnZXIsIGluc3RhbmNlTm8pIHtcbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChsb2dGbikge1xuICAgICAgdmFyIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKG1lc3NhZ2UpIHtcbiAgICAgICAgZm9yd2FyZE1lc3NhZ2UoJ3dvcmtlckxvZycsIHtcbiAgICAgICAgICBsb2dUeXBlOiBsb2dGbixcbiAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH0sIGluc3RhbmNlTm8pO1xuICAgICAgfTtcbiAgICAgIGxvZ2dlcltsb2dGbl0gPSBmdW5jO1xuICAgIH07XG4gICAgZm9yICh2YXIgbG9nRm4gaW4gbG9nZ2VyKSB7XG4gICAgICBfbG9vcChsb2dGbik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGlzRW1wdHlSZXN1bHQocmVtdXhSZXN1bHQpIHtcbiAgICByZXR1cm4gIXJlbXV4UmVzdWx0LmF1ZGlvICYmICFyZW11eFJlc3VsdC52aWRlbyAmJiAhcmVtdXhSZXN1bHQudGV4dCAmJiAhcmVtdXhSZXN1bHQuaWQzICYmICFyZW11eFJlc3VsdC5pbml0U2VnbWVudDtcbiAgfVxuXG4gIHZhciB2ZXJzaW9uID0gXCIxLjYuNVwiO1xuXG4gIC8vIGVuc3VyZSB0aGUgd29ya2VyIGVuZHMgdXAgaW4gdGhlIGJ1bmRsZVxuICAvLyBJZiB0aGUgd29ya2VyIHNob3VsZCBub3QgYmUgaW5jbHVkZWQgdGhpcyBnZXRzIGFsaWFzZWQgdG8gZW1wdHkuanNcbiAgdmFyIHdvcmtlclN0b3JlID0ge307XG4gIGZ1bmN0aW9uIGhhc1VNRFdvcmtlcigpIHtcbiAgICByZXR1cm4gdHlwZW9mIF9fSExTX1dPUktFUl9CVU5ETEVfXyA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuICBmdW5jdGlvbiBpbmplY3RXb3JrZXIoKSB7XG4gICAgdmFyIHdvcmtlckNvbnRleHQgPSB3b3JrZXJTdG9yZVt2ZXJzaW9uXTtcbiAgICBpZiAod29ya2VyQ29udGV4dCkge1xuICAgICAgd29ya2VyQ29udGV4dC5jbGllbnRDb3VudCsrO1xuICAgICAgcmV0dXJuIHdvcmtlckNvbnRleHQ7XG4gICAgfVxuICAgIHZhciBibG9iID0gbmV3IHNlbGYuQmxvYihbXCJ2YXIgZXhwb3J0cz17fTt2YXIgbW9kdWxlPXtleHBvcnRzOmV4cG9ydHN9O2Z1bmN0aW9uIGRlZmluZShmKXtmKCl9O2RlZmluZS5hbWQ9dHJ1ZTsoXCIgKyBfX0hMU19XT1JLRVJfQlVORExFX18udG9TdHJpbmcoKSArIFwiKSh0cnVlKTtcIl0sIHtcbiAgICAgIHR5cGU6ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgfSk7XG4gICAgdmFyIG9iamVjdFVSTCA9IHNlbGYuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICB2YXIgd29ya2VyID0gbmV3IHNlbGYuV29ya2VyKG9iamVjdFVSTCk7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIHdvcmtlcjogd29ya2VyLFxuICAgICAgb2JqZWN0VVJMOiBvYmplY3RVUkwsXG4gICAgICBjbGllbnRDb3VudDogMVxuICAgIH07XG4gICAgd29ya2VyU3RvcmVbdmVyc2lvbl0gPSByZXN1bHQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBmdW5jdGlvbiBsb2FkV29ya2VyKHBhdGgpIHtcbiAgICB2YXIgd29ya2VyQ29udGV4dCA9IHdvcmtlclN0b3JlW3BhdGhdO1xuICAgIGlmICh3b3JrZXJDb250ZXh0KSB7XG4gICAgICB3b3JrZXJDb250ZXh0LmNsaWVudENvdW50Kys7XG4gICAgICByZXR1cm4gd29ya2VyQ29udGV4dDtcbiAgICB9XG4gICAgdmFyIHNjcmlwdFVSTCA9IG5ldyBzZWxmLlVSTChwYXRoLCBzZWxmLmxvY2F0aW9uLmhyZWYpLmhyZWY7XG4gICAgdmFyIHdvcmtlciA9IG5ldyBzZWxmLldvcmtlcihzY3JpcHRVUkwpO1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICB3b3JrZXI6IHdvcmtlcixcbiAgICAgIHNjcmlwdFVSTDogc2NyaXB0VVJMLFxuICAgICAgY2xpZW50Q291bnQ6IDFcbiAgICB9O1xuICAgIHdvcmtlclN0b3JlW3BhdGhdID0gcmVzdWx0O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlV29ya2VyRnJvbVN0b3JlKHBhdGgpIHtcbiAgICB2YXIgd29ya2VyQ29udGV4dCA9IHdvcmtlclN0b3JlW3BhdGggfHwgdmVyc2lvbl07XG4gICAgaWYgKHdvcmtlckNvbnRleHQpIHtcbiAgICAgIHZhciBjbGllbnRDb3VudCA9IHdvcmtlckNvbnRleHQuY2xpZW50Q291bnQtLTtcbiAgICAgIGlmIChjbGllbnRDb3VudCA9PT0gMSkge1xuICAgICAgICB2YXIgd29ya2VyID0gd29ya2VyQ29udGV4dC53b3JrZXIsXG4gICAgICAgICAgb2JqZWN0VVJMID0gd29ya2VyQ29udGV4dC5vYmplY3RVUkw7XG4gICAgICAgIGRlbGV0ZSB3b3JrZXJTdG9yZVtwYXRoIHx8IHZlcnNpb25dO1xuICAgICAgICBpZiAob2JqZWN0VVJMKSB7XG4gICAgICAgICAgLy8gcmV2b2tlIHRoZSBPYmplY3QgVVJMIHRoYXQgd2FzIHVzZWQgdG8gY3JlYXRlIHRyYW5zbXV4ZXIgd29ya2VyLCBzbyBhcyBub3QgdG8gbGVhayBpdFxuICAgICAgICAgIHNlbGYuVVJMLnJldm9rZU9iamVjdFVSTChvYmplY3RVUkwpO1xuICAgICAgICB9XG4gICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgdHJhbnNtdXhlckluc3RhbmNlQ291bnQgPSAwO1xuICB2YXIgVHJhbnNtdXhlckludGVyZmFjZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNtdXhlckludGVyZmFjZShfaGxzLCBpZCwgb25UcmFuc211eENvbXBsZXRlLCBvbkZsdXNoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgICB0aGlzLmhscyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuaWQgPSB2b2lkIDA7XG4gICAgICB0aGlzLmluc3RhbmNlTm8gPSB0cmFuc211eGVySW5zdGFuY2VDb3VudCsrO1xuICAgICAgdGhpcy5vYnNlcnZlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZnJhZyA9IG51bGw7XG4gICAgICB0aGlzLnBhcnQgPSBudWxsO1xuICAgICAgdGhpcy51c2VXb3JrZXIgPSB2b2lkIDA7XG4gICAgICB0aGlzLndvcmtlckNvbnRleHQgPSBudWxsO1xuICAgICAgdGhpcy50cmFuc211eGVyID0gbnVsbDtcbiAgICAgIHRoaXMub25UcmFuc211eENvbXBsZXRlID0gdm9pZCAwO1xuICAgICAgdGhpcy5vbkZsdXNoID0gdm9pZCAwO1xuICAgICAgdGhpcy5vbldvcmtlck1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBldmVudC5kYXRhO1xuICAgICAgICB2YXIgaGxzID0gX3RoaXMuaGxzO1xuICAgICAgICBpZiAoIWhscyB8fCAhKGRhdGEgIT0gbnVsbCAmJiBkYXRhLmV2ZW50KSB8fCBkYXRhLmluc3RhbmNlTm8gIT09IF90aGlzLmluc3RhbmNlTm8pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChkYXRhLmV2ZW50KSB7XG4gICAgICAgICAgY2FzZSAnaW5pdCc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBfdGhpcyR3b3JrZXJDb250ZXh0O1xuICAgICAgICAgICAgICB2YXIgb2JqZWN0VVJMID0gKF90aGlzJHdvcmtlckNvbnRleHQgPSBfdGhpcy53b3JrZXJDb250ZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkd29ya2VyQ29udGV4dC5vYmplY3RVUkw7XG4gICAgICAgICAgICAgIGlmIChvYmplY3RVUkwpIHtcbiAgICAgICAgICAgICAgICAvLyByZXZva2UgdGhlIE9iamVjdCBVUkwgdGhhdCB3YXMgdXNlZCB0byBjcmVhdGUgdHJhbnNtdXhlciB3b3JrZXIsIHNvIGFzIG5vdCB0byBsZWFrIGl0XG4gICAgICAgICAgICAgICAgc2VsZi5VUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVSTCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAndHJhbnNtdXhDb21wbGV0ZSc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIF90aGlzLmhhbmRsZVRyYW5zbXV4Q29tcGxldGUoZGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnZmx1c2gnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBfdGhpcy5vbkZsdXNoKGRhdGEuZGF0YSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gcGFzcyBsb2dzIGZyb20gdGhlIHdvcmtlciB0aHJlYWQgdG8gdGhlIG1haW4gbG9nZ2VyXG4gICAgICAgICAgY2FzZSAnd29ya2VyTG9nJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWYgKGhscy5sb2dnZXJbZGF0YS5kYXRhLmxvZ1R5cGVdKSB7XG4gICAgICAgICAgICAgICAgaGxzLmxvZ2dlcltkYXRhLmRhdGEubG9nVHlwZV0oZGF0YS5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGRhdGEuZGF0YSA9IGRhdGEuZGF0YSB8fCB7fTtcbiAgICAgICAgICAgICAgZGF0YS5kYXRhLmZyYWcgPSBfdGhpcy5mcmFnO1xuICAgICAgICAgICAgICBkYXRhLmRhdGEucGFydCA9IF90aGlzLnBhcnQ7XG4gICAgICAgICAgICAgIGRhdGEuZGF0YS5pZCA9IF90aGlzLmlkO1xuICAgICAgICAgICAgICBobHMudHJpZ2dlcihkYXRhLmV2ZW50LCBkYXRhLmRhdGEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMub25Xb3JrZXJFcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIV90aGlzLmhscykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoZXZlbnQubWVzc2FnZSArIFwiICAoXCIgKyBldmVudC5maWxlbmFtZSArIFwiOlwiICsgZXZlbnQubGluZW5vICsgXCIpXCIpO1xuICAgICAgICBfdGhpcy5obHMuY29uZmlnLmVuYWJsZVdvcmtlciA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5obHMubG9nZ2VyLndhcm4oXCJFcnJvciBpbiBcXFwiXCIgKyBfdGhpcy5pZCArIFwiXFxcIiBXZWIgV29ya2VyLCBmYWxsYmFjayB0byBpbmxpbmVcIik7XG4gICAgICAgIF90aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwge1xuICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuT1RIRVJfRVJST1IsXG4gICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLklOVEVSTkFMX0VYQ0VQVElPTixcbiAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgZXZlbnQ6ICdkZW11eGVyV29ya2VyJyxcbiAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgdmFyIGNvbmZpZyA9IF9obHMuY29uZmlnO1xuICAgICAgdGhpcy5obHMgPSBfaGxzO1xuICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgdGhpcy51c2VXb3JrZXIgPSAhIWNvbmZpZy5lbmFibGVXb3JrZXI7XG4gICAgICB0aGlzLm9uVHJhbnNtdXhDb21wbGV0ZSA9IG9uVHJhbnNtdXhDb21wbGV0ZTtcbiAgICAgIHRoaXMub25GbHVzaCA9IG9uRmx1c2g7XG4gICAgICB2YXIgZm9yd2FyZE1lc3NhZ2UgPSBmdW5jdGlvbiBmb3J3YXJkTWVzc2FnZShldiwgZGF0YSkge1xuICAgICAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICAgICAgZGF0YS5mcmFnID0gX3RoaXMuZnJhZyB8fCB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChldiA9PT0gRXZlbnRzLkVSUk9SKSB7XG4gICAgICAgICAgZGF0YSA9IGRhdGE7XG4gICAgICAgICAgZGF0YS5wYXJlbnQgPSBfdGhpcy5pZDtcbiAgICAgICAgICBkYXRhLnBhcnQgPSBfdGhpcy5wYXJ0O1xuICAgICAgICAgIF90aGlzLmVycm9yID0gZGF0YS5lcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5obHMudHJpZ2dlcihldiwgZGF0YSk7XG4gICAgICB9O1xuXG4gICAgICAvLyBmb3J3YXJkIGV2ZW50cyB0byBtYWluIHRocmVhZFxuICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgIHRoaXMub2JzZXJ2ZXIub24oRXZlbnRzLkZSQUdfREVDUllQVEVELCBmb3J3YXJkTWVzc2FnZSk7XG4gICAgICB0aGlzLm9ic2VydmVyLm9uKEV2ZW50cy5FUlJPUiwgZm9yd2FyZE1lc3NhZ2UpO1xuICAgICAgdmFyIG0ydHNUeXBlU3VwcG9ydGVkID0gZ2V0TTJUU1N1cHBvcnRlZEF1ZGlvVHlwZXMoY29uZmlnLnByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSk7XG4gICAgICBpZiAodGhpcy51c2VXb3JrZXIgJiYgdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGxvZ2dlciA9IHRoaXMuaGxzLmxvZ2dlcjtcbiAgICAgICAgdmFyIGNhbkNyZWF0ZVdvcmtlciA9IGNvbmZpZy53b3JrZXJQYXRoIHx8IGhhc1VNRFdvcmtlcigpO1xuICAgICAgICBpZiAoY2FuQ3JlYXRlV29ya2VyKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChjb25maWcud29ya2VyUGF0aCkge1xuICAgICAgICAgICAgICBsb2dnZXIubG9nKFwibG9hZGluZyBXZWIgV29ya2VyIFwiICsgY29uZmlnLndvcmtlclBhdGggKyBcIiBmb3IgXFxcIlwiICsgaWQgKyBcIlxcXCJcIik7XG4gICAgICAgICAgICAgIHRoaXMud29ya2VyQ29udGV4dCA9IGxvYWRXb3JrZXIoY29uZmlnLndvcmtlclBhdGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcImluamVjdGluZyBXZWIgV29ya2VyIGZvciBcXFwiXCIgKyBpZCArIFwiXFxcIlwiKTtcbiAgICAgICAgICAgICAgdGhpcy53b3JrZXJDb250ZXh0ID0gaW5qZWN0V29ya2VyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgd29ya2VyID0gdGhpcy53b3JrZXJDb250ZXh0LndvcmtlcjtcbiAgICAgICAgICAgIHdvcmtlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5vbldvcmtlck1lc3NhZ2UpO1xuICAgICAgICAgICAgd29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5vbldvcmtlckVycm9yKTtcbiAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgIGluc3RhbmNlTm86IHRoaXMuaW5zdGFuY2VObyxcbiAgICAgICAgICAgICAgY21kOiAnaW5pdCcsXG4gICAgICAgICAgICAgIHR5cGVTdXBwb3J0ZWQ6IG0ydHNUeXBlU3VwcG9ydGVkLFxuICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgIGNvbmZpZzogc3RyaW5naWZ5KGNvbmZpZylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJFcnJvciBzZXR0aW5nIHVwIFxcXCJcIiArIGlkICsgXCJcXFwiIFdlYiBXb3JrZXIsIGZhbGxiYWNrIHRvIGlubGluZVwiLCBlcnIpO1xuICAgICAgICAgICAgdGhpcy50ZXJtaW5hdGVXb3JrZXIoKTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy50cmFuc211eGVyID0gbmV3IFRyYW5zbXV4ZXIodGhpcy5vYnNlcnZlciwgbTJ0c1R5cGVTdXBwb3J0ZWQsIGNvbmZpZywgJycsIGlkLCBfaGxzLmxvZ2dlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy50cmFuc211eGVyID0gbmV3IFRyYW5zbXV4ZXIodGhpcy5vYnNlcnZlciwgbTJ0c1R5cGVTdXBwb3J0ZWQsIGNvbmZpZywgJycsIGlkLCBfaGxzLmxvZ2dlcik7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBUcmFuc211eGVySW50ZXJmYWNlLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHRoaXMuZnJhZyA9IG51bGw7XG4gICAgICB0aGlzLnBhcnQgPSBudWxsO1xuICAgICAgaWYgKHRoaXMud29ya2VyQ29udGV4dCkge1xuICAgICAgICB2YXIgaW5zdGFuY2VObyA9IHRoaXMuaW5zdGFuY2VObztcbiAgICAgICAgdGhpcy5pbnN0YW5jZU5vID0gdHJhbnNtdXhlckluc3RhbmNlQ291bnQrKztcbiAgICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuaGxzLmNvbmZpZztcbiAgICAgICAgdmFyIG0ydHNUeXBlU3VwcG9ydGVkID0gZ2V0TTJUU1N1cHBvcnRlZEF1ZGlvVHlwZXMoY29uZmlnLnByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSk7XG4gICAgICAgIHRoaXMud29ya2VyQ29udGV4dC53b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGluc3RhbmNlTm86IHRoaXMuaW5zdGFuY2VObyxcbiAgICAgICAgICBjbWQ6ICdyZXNldCcsXG4gICAgICAgICAgcmVzZXRObzogaW5zdGFuY2VObyxcbiAgICAgICAgICB0eXBlU3VwcG9ydGVkOiBtMnRzVHlwZVN1cHBvcnRlZCxcbiAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICBjb25maWc6IHN0cmluZ2lmeShjb25maWcpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnRlcm1pbmF0ZVdvcmtlciA9IGZ1bmN0aW9uIHRlcm1pbmF0ZVdvcmtlcigpIHtcbiAgICAgIGlmICh0aGlzLndvcmtlckNvbnRleHQpIHtcbiAgICAgICAgdmFyIHdvcmtlciA9IHRoaXMud29ya2VyQ29udGV4dC53b3JrZXI7XG4gICAgICAgIHRoaXMud29ya2VyQ29udGV4dCA9IG51bGw7XG4gICAgICAgIHdvcmtlci5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5vbldvcmtlck1lc3NhZ2UpO1xuICAgICAgICB3b3JrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0aGlzLm9uV29ya2VyRXJyb3IpO1xuICAgICAgICByZW1vdmVXb3JrZXJGcm9tU3RvcmUodGhpcy5obHMuY29uZmlnLndvcmtlclBhdGgpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgaWYgKHRoaXMud29ya2VyQ29udGV4dCkge1xuICAgICAgICB0aGlzLnRlcm1pbmF0ZVdvcmtlcigpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMub25Xb3JrZXJNZXNzYWdlID0gdGhpcy5vbldvcmtlckVycm9yID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0cmFuc211eGVyID0gdGhpcy50cmFuc211eGVyO1xuICAgICAgICBpZiAodHJhbnNtdXhlcikge1xuICAgICAgICAgIHRyYW5zbXV4ZXIuZGVzdHJveSgpO1xuICAgICAgICAgIHRoaXMudHJhbnNtdXhlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXI7XG4gICAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmZyYWcgPSBudWxsO1xuICAgICAgdGhpcy5wYXJ0ID0gbnVsbDtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMub2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5obHMgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGRhdGEsIGluaXRTZWdtZW50RGF0YSwgYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgZnJhZywgcGFydCwgZHVyYXRpb24sIGFjY3VyYXRlVGltZU9mZnNldCwgY2h1bmtNZXRhLCBkZWZhdWx0SW5pdFBUUykge1xuICAgICAgdmFyIF9mcmFnJGluaXRTZWdtZW50LFxuICAgICAgICBfbGFzdEZyYWckaW5pdFNlZ21lbnQsXG4gICAgICAgIF90aGlzMiA9IHRoaXM7XG4gICAgICBjaHVua01ldGEudHJhbnNtdXhpbmcuc3RhcnQgPSBzZWxmLnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgdmFyIGluc3RhbmNlTm8gPSB0aGlzLmluc3RhbmNlTm8sXG4gICAgICAgIHRyYW5zbXV4ZXIgPSB0aGlzLnRyYW5zbXV4ZXI7XG4gICAgICB2YXIgdGltZU9mZnNldCA9IHBhcnQgPyBwYXJ0LnN0YXJ0IDogZnJhZy5zdGFydDtcbiAgICAgIC8vIFRPRE86IHB1c2ggXCJjbGVhci1sZWFkXCIgZGVjcnlwdCBkYXRhIGZvciB1bmVuY3J5cHRlZCBmcmFnbWVudHMgaW4gc3RyZWFtcyB3aXRoIGVuY3J5cHRlZCBvbmVzXG4gICAgICB2YXIgZGVjcnlwdGRhdGEgPSBmcmFnLmRlY3J5cHRkYXRhO1xuICAgICAgdmFyIGxhc3RGcmFnID0gdGhpcy5mcmFnO1xuICAgICAgdmFyIGRpc2NvbnRpbnVpdHkgPSAhKGxhc3RGcmFnICYmIGZyYWcuY2MgPT09IGxhc3RGcmFnLmNjKTtcbiAgICAgIHZhciB0cmFja1N3aXRjaCA9ICEobGFzdEZyYWcgJiYgY2h1bmtNZXRhLmxldmVsID09PSBsYXN0RnJhZy5sZXZlbCk7XG4gICAgICB2YXIgc25EaWZmID0gbGFzdEZyYWcgPyBjaHVua01ldGEuc24gLSBsYXN0RnJhZy5zbiA6IC0xO1xuICAgICAgdmFyIHBhcnREaWZmID0gdGhpcy5wYXJ0ID8gY2h1bmtNZXRhLnBhcnQgLSB0aGlzLnBhcnQuaW5kZXggOiAtMTtcbiAgICAgIHZhciBwcm9ncmVzc2l2ZSA9IHNuRGlmZiA9PT0gMCAmJiBjaHVua01ldGEuaWQgPiAxICYmIGNodW5rTWV0YS5pZCA9PT0gKGxhc3RGcmFnID09IG51bGwgPyB2b2lkIDAgOiBsYXN0RnJhZy5zdGF0cy5jaHVua0NvdW50KTtcbiAgICAgIHZhciBjb250aWd1b3VzID0gIXRyYWNrU3dpdGNoICYmIChzbkRpZmYgPT09IDEgfHwgc25EaWZmID09PSAwICYmIChwYXJ0RGlmZiA9PT0gMSB8fCBwcm9ncmVzc2l2ZSAmJiBwYXJ0RGlmZiA8PSAwKSk7XG4gICAgICB2YXIgbm93ID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGlmICh0cmFja1N3aXRjaCB8fCBzbkRpZmYgfHwgZnJhZy5zdGF0cy5wYXJzaW5nLnN0YXJ0ID09PSAwKSB7XG4gICAgICAgIGZyYWcuc3RhdHMucGFyc2luZy5zdGFydCA9IG5vdztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0ICYmIChwYXJ0RGlmZiB8fCAhY29udGlndW91cykpIHtcbiAgICAgICAgcGFydC5zdGF0cy5wYXJzaW5nLnN0YXJ0ID0gbm93O1xuICAgICAgfVxuICAgICAgdmFyIGluaXRTZWdtZW50Q2hhbmdlID0gIShsYXN0RnJhZyAmJiAoKF9mcmFnJGluaXRTZWdtZW50ID0gZnJhZy5pbml0U2VnbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9mcmFnJGluaXRTZWdtZW50LnVybCkgPT09ICgoX2xhc3RGcmFnJGluaXRTZWdtZW50ID0gbGFzdEZyYWcuaW5pdFNlZ21lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfbGFzdEZyYWckaW5pdFNlZ21lbnQudXJsKSk7XG4gICAgICB2YXIgc3RhdGUgPSBuZXcgVHJhbnNtdXhTdGF0ZShkaXNjb250aW51aXR5LCBjb250aWd1b3VzLCBhY2N1cmF0ZVRpbWVPZmZzZXQsIHRyYWNrU3dpdGNoLCB0aW1lT2Zmc2V0LCBpbml0U2VnbWVudENoYW5nZSk7XG4gICAgICBpZiAoIWNvbnRpZ3VvdXMgfHwgZGlzY29udGludWl0eSB8fCBpbml0U2VnbWVudENoYW5nZSkge1xuICAgICAgICB0aGlzLmhscy5sb2dnZXIubG9nKFwiW3RyYW5zbXV4ZXItaW50ZXJmYWNlXTogU3RhcnRpbmcgbmV3IHRyYW5zbXV4IHNlc3Npb24gZm9yIFwiICsgZnJhZy50eXBlICsgXCIgc246IFwiICsgY2h1bmtNZXRhLnNuICsgKGNodW5rTWV0YS5wYXJ0ID4gLTEgPyAnIHBhcnQ6ICcgKyBjaHVua01ldGEucGFydCA6ICcnKSArIFwiIFwiICsgKHRoaXMuaWQgPT09IFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU4gPyAnbGV2ZWwnIDogJ3RyYWNrJykgKyBcIjogXCIgKyBjaHVua01ldGEubGV2ZWwgKyBcIiBpZDogXCIgKyBjaHVua01ldGEuaWQgKyBcIlxcbiAgICAgICAgZGlzY29udGludWl0eTogXCIgKyBkaXNjb250aW51aXR5ICsgXCJcXG4gICAgICAgIHRyYWNrU3dpdGNoOiBcIiArIHRyYWNrU3dpdGNoICsgXCJcXG4gICAgICAgIGNvbnRpZ3VvdXM6IFwiICsgY29udGlndW91cyArIFwiXFxuICAgICAgICBhY2N1cmF0ZVRpbWVPZmZzZXQ6IFwiICsgYWNjdXJhdGVUaW1lT2Zmc2V0ICsgXCJcXG4gICAgICAgIHRpbWVPZmZzZXQ6IFwiICsgdGltZU9mZnNldCArIFwiXFxuICAgICAgICBpbml0U2VnbWVudENoYW5nZTogXCIgKyBpbml0U2VnbWVudENoYW5nZSk7XG4gICAgICAgIHZhciBjb25maWcgPSBuZXcgVHJhbnNtdXhDb25maWcoYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgaW5pdFNlZ21lbnREYXRhLCBkdXJhdGlvbiwgZGVmYXVsdEluaXRQVFMpO1xuICAgICAgICB0aGlzLmNvbmZpZ3VyZVRyYW5zbXV4ZXIoY29uZmlnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZnJhZyA9IGZyYWc7XG4gICAgICB0aGlzLnBhcnQgPSBwYXJ0O1xuXG4gICAgICAvLyBGcmFncyB3aXRoIHNuIG9mICdpbml0U2VnbWVudCcgYXJlIG5vdCB0cmFuc211eGVkXG4gICAgICBpZiAodGhpcy53b3JrZXJDb250ZXh0KSB7XG4gICAgICAgIC8vIHBvc3QgZnJhZ21lbnQgcGF5bG9hZCBhcyB0cmFuc2ZlcmFibGUgb2JqZWN0cyBmb3IgQXJyYXlCdWZmZXIgKG5vIGNvcHkpXG4gICAgICAgIHRoaXMud29ya2VyQ29udGV4dC53b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGluc3RhbmNlTm86IGluc3RhbmNlTm8sXG4gICAgICAgICAgY21kOiAnZGVtdXgnLFxuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgZGVjcnlwdGRhdGE6IGRlY3J5cHRkYXRhLFxuICAgICAgICAgIGNodW5rTWV0YTogY2h1bmtNZXRhLFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBbZGF0YV0gOiBbXSk7XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbXV4ZXIpIHtcbiAgICAgICAgdmFyIHRyYW5zbXV4UmVzdWx0ID0gdHJhbnNtdXhlci5wdXNoKGRhdGEsIGRlY3J5cHRkYXRhLCBjaHVua01ldGEsIHN0YXRlKTtcbiAgICAgICAgaWYgKGlzUHJvbWlzZSh0cmFuc211eFJlc3VsdCkpIHtcbiAgICAgICAgICB0cmFuc211eFJlc3VsdC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBfdGhpczIuaGFuZGxlVHJhbnNtdXhDb21wbGV0ZShkYXRhKTtcbiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIF90aGlzMi50cmFuc211eGVyRXJyb3IoZXJyb3IsIGNodW5rTWV0YSwgJ3RyYW5zbXV4ZXItaW50ZXJmYWNlIHB1c2ggZXJyb3InKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmhhbmRsZVRyYW5zbXV4Q29tcGxldGUodHJhbnNtdXhSZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uZmx1c2ggPSBmdW5jdGlvbiBmbHVzaChjaHVua01ldGEpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgY2h1bmtNZXRhLnRyYW5zbXV4aW5nLnN0YXJ0ID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIHZhciBpbnN0YW5jZU5vID0gdGhpcy5pbnN0YW5jZU5vLFxuICAgICAgICB0cmFuc211eGVyID0gdGhpcy50cmFuc211eGVyO1xuICAgICAgaWYgKHRoaXMud29ya2VyQ29udGV4dCkge1xuICAgICAgICB0aGlzLndvcmtlckNvbnRleHQud29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBpbnN0YW5jZU5vOiBpbnN0YW5jZU5vLFxuICAgICAgICAgIGNtZDogJ2ZsdXNoJyxcbiAgICAgICAgICBjaHVua01ldGE6IGNodW5rTWV0YVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodHJhbnNtdXhlcikge1xuICAgICAgICB2YXIgdHJhbnNtdXhSZXN1bHQgPSB0cmFuc211eGVyLmZsdXNoKGNodW5rTWV0YSk7XG4gICAgICAgIGlmIChpc1Byb21pc2UodHJhbnNtdXhSZXN1bHQpKSB7XG4gICAgICAgICAgdHJhbnNtdXhSZXN1bHQudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgX3RoaXMzLmhhbmRsZUZsdXNoUmVzdWx0KGRhdGEsIGNodW5rTWV0YSk7XG4gICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpczMudHJhbnNtdXhlckVycm9yKGVycm9yLCBjaHVua01ldGEsICd0cmFuc211eGVyLWludGVyZmFjZSBmbHVzaCBlcnJvcicpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaGFuZGxlRmx1c2hSZXN1bHQodHJhbnNtdXhSZXN1bHQsIGNodW5rTWV0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by50cmFuc211eGVyRXJyb3IgPSBmdW5jdGlvbiB0cmFuc211eGVyRXJyb3IoZXJyb3IsIGNodW5rTWV0YSwgcmVhc29uKSB7XG4gICAgICBpZiAoIXRoaXMuaGxzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTUVESUFfRVJST1IsXG4gICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5GUkFHX1BBUlNJTkdfRVJST1IsXG4gICAgICAgIGNodW5rTWV0YTogY2h1bmtNZXRhLFxuICAgICAgICBmcmFnOiB0aGlzLmZyYWcgfHwgdW5kZWZpbmVkLFxuICAgICAgICBwYXJ0OiB0aGlzLnBhcnQgfHwgdW5kZWZpbmVkLFxuICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgZXJyOiBlcnJvcixcbiAgICAgICAgcmVhc29uOiByZWFzb25cbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLmhhbmRsZUZsdXNoUmVzdWx0ID0gZnVuY3Rpb24gaGFuZGxlRmx1c2hSZXN1bHQocmVzdWx0cywgY2h1bmtNZXRhKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcbiAgICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIF90aGlzNC5oYW5kbGVUcmFuc211eENvbXBsZXRlKHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMub25GbHVzaChjaHVua01ldGEpO1xuICAgIH07XG4gICAgX3Byb3RvLmNvbmZpZ3VyZVRyYW5zbXV4ZXIgPSBmdW5jdGlvbiBjb25maWd1cmVUcmFuc211eGVyKGNvbmZpZykge1xuICAgICAgdmFyIGluc3RhbmNlTm8gPSB0aGlzLmluc3RhbmNlTm8sXG4gICAgICAgIHRyYW5zbXV4ZXIgPSB0aGlzLnRyYW5zbXV4ZXI7XG4gICAgICBpZiAodGhpcy53b3JrZXJDb250ZXh0KSB7XG4gICAgICAgIHRoaXMud29ya2VyQ29udGV4dC53b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGluc3RhbmNlTm86IGluc3RhbmNlTm8sXG4gICAgICAgICAgY21kOiAnY29uZmlndXJlJyxcbiAgICAgICAgICBjb25maWc6IGNvbmZpZ1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodHJhbnNtdXhlcikge1xuICAgICAgICB0cmFuc211eGVyLmNvbmZpZ3VyZShjb25maWcpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmhhbmRsZVRyYW5zbXV4Q29tcGxldGUgPSBmdW5jdGlvbiBoYW5kbGVUcmFuc211eENvbXBsZXRlKHJlc3VsdCkge1xuICAgICAgcmVzdWx0LmNodW5rTWV0YS50cmFuc211eGluZy5lbmQgPSBzZWxmLnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgdGhpcy5vblRyYW5zbXV4Q29tcGxldGUocmVzdWx0KTtcbiAgICB9O1xuICAgIHJldHVybiBUcmFuc211eGVySW50ZXJmYWNlO1xuICB9KCk7XG5cbiAgdmFyIFRJQ0tfSU5URVJWQUwkMyA9IDEwMDsgLy8gaG93IG9mdGVuIHRvIHRpY2sgaW4gbXNcbiAgdmFyIEF1ZGlvU3RyZWFtQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VTdHJlYW1Db250cm9sbGVyKSB7XG4gICAgZnVuY3Rpb24gQXVkaW9TdHJlYW1Db250cm9sbGVyKGhscywgZnJhZ21lbnRUcmFja2VyLCBrZXlMb2FkZXIpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF90aGlzID0gX0Jhc2VTdHJlYW1Db250cm9sbGVyLmNhbGwodGhpcywgaGxzLCBmcmFnbWVudFRyYWNrZXIsIGtleUxvYWRlciwgJ2F1ZGlvLXN0cmVhbS1jb250cm9sbGVyJywgUGxheWxpc3RMZXZlbFR5cGUuQVVESU8pIHx8IHRoaXM7XG4gICAgICBfdGhpcy5tYWluQW5jaG9yID0gbnVsbDtcbiAgICAgIF90aGlzLm1haW5GcmFnTG9hZGluZyA9IG51bGw7XG4gICAgICBfdGhpcy5hdWRpb09ubHkgPSBmYWxzZTtcbiAgICAgIF90aGlzLmJ1ZmZlcmVkVHJhY2sgPSBudWxsO1xuICAgICAgX3RoaXMuc3dpdGNoaW5nVHJhY2sgPSBudWxsO1xuICAgICAgX3RoaXMudHJhY2tJZCA9IC0xO1xuICAgICAgX3RoaXMud2FpdGluZ0RhdGEgPSBudWxsO1xuICAgICAgX3RoaXMubWFpbkRldGFpbHMgPSBudWxsO1xuICAgICAgX3RoaXMuZmx1c2hpbmcgPSBmYWxzZTtcbiAgICAgIF90aGlzLmJ1ZmZlckZsdXNoZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLmNhY2hlZFRyYWNrTG9hZGVkRGF0YSA9IG51bGw7XG4gICAgICBfdGhpcy5yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBfaW5oZXJpdHNMb29zZShBdWRpb1N0cmVhbUNvbnRyb2xsZXIsIF9CYXNlU3RyZWFtQ29udHJvbGxlcik7XG4gICAgdmFyIF9wcm90byA9IEF1ZGlvU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLm9uSGFuZGxlckRlc3Ryb3lpbmcgPSBmdW5jdGlvbiBvbkhhbmRsZXJEZXN0cm95aW5nKCkge1xuICAgICAgdGhpcy51bnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgICBfQmFzZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLm9uSGFuZGxlckRlc3Ryb3lpbmcuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMucmVzZXRJdGVtKCk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXRJdGVtID0gZnVuY3Rpb24gcmVzZXRJdGVtKCkge1xuICAgICAgdGhpcy5tYWluRGV0YWlscyA9IHRoaXMubWFpbkFuY2hvciA9IHRoaXMubWFpbkZyYWdMb2FkaW5nID0gdGhpcy5idWZmZXJlZFRyYWNrID0gdGhpcy5zd2l0Y2hpbmdUcmFjayA9IHRoaXMud2FpdGluZ0RhdGEgPSB0aGlzLmNhY2hlZFRyYWNrTG9hZGVkRGF0YSA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUucmVnaXN0ZXJMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGhscy5vbihFdmVudHMuTEVWRUxfTE9BREVELCB0aGlzLm9uTGV2ZWxMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5BVURJT19UUkFDS1NfVVBEQVRFRCwgdGhpcy5vbkF1ZGlvVHJhY2tzVXBkYXRlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkFVRElPX1RSQUNLX1NXSVRDSElORywgdGhpcy5vbkF1ZGlvVHJhY2tTd2l0Y2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5BVURJT19UUkFDS19MT0FERUQsIHRoaXMub25BdWRpb1RyYWNrTG9hZGVkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuQlVGRkVSX1JFU0VULCB0aGlzLm9uQnVmZmVyUmVzZXQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5CVUZGRVJfQ1JFQVRFRCwgdGhpcy5vbkJ1ZmZlckNyZWF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5CVUZGRVJfRkxVU0hJTkcsIHRoaXMub25CdWZmZXJGbHVzaGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkJVRkZFUl9GTFVTSEVELCB0aGlzLm9uQnVmZmVyRmx1c2hlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLklOSVRfUFRTX0ZPVU5ELCB0aGlzLm9uSW5pdFB0c0ZvdW5kLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuRlJBR19MT0FESU5HLCB0aGlzLm9uRnJhZ0xvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5GUkFHX0JVRkZFUkVELCB0aGlzLm9uRnJhZ0J1ZmZlcmVkLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by51bnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGlmICghaGxzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUudW5yZWdpc3Rlckxpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTEVWRUxfTE9BREVELCB0aGlzLm9uTGV2ZWxMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuQVVESU9fVFJBQ0tTX1VQREFURUQsIHRoaXMub25BdWRpb1RyYWNrc1VwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuQVVESU9fVFJBQ0tfU1dJVENISU5HLCB0aGlzLm9uQXVkaW9UcmFja1N3aXRjaGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5BVURJT19UUkFDS19MT0FERUQsIHRoaXMub25BdWRpb1RyYWNrTG9hZGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkJVRkZFUl9SRVNFVCwgdGhpcy5vbkJ1ZmZlclJlc2V0LCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkJVRkZFUl9DUkVBVEVELCB0aGlzLm9uQnVmZmVyQ3JlYXRlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5CVUZGRVJfRkxVU0hJTkcsIHRoaXMub25CdWZmZXJGbHVzaGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5CVUZGRVJfRkxVU0hFRCwgdGhpcy5vbkJ1ZmZlckZsdXNoZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuSU5JVF9QVFNfRk9VTkQsIHRoaXMub25Jbml0UHRzRm91bmQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRlJBR19MT0FESU5HLCB0aGlzLm9uRnJhZ0xvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRlJBR19CVUZGRVJFRCwgdGhpcy5vbkZyYWdCdWZmZXJlZCwgdGhpcyk7XG4gICAgfVxuXG4gICAgLy8gSU5JVF9QVFNfRk9VTkQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHZpZGVvIHRyYWNrIHBhcnNlZCBpbiB0aGUgc3RyZWFtLWNvbnRyb2xsZXIgaGFzIGEgbmV3IFBUUyB2YWx1ZVxuICAgIDtcbiAgICBfcHJvdG8ub25Jbml0UHRzRm91bmQgPSBmdW5jdGlvbiBvbkluaXRQdHNGb3VuZChldmVudCwgX3JlZikge1xuICAgICAgdmFyIGZyYWcgPSBfcmVmLmZyYWcsXG4gICAgICAgIGlkID0gX3JlZi5pZCxcbiAgICAgICAgaW5pdFBUUyA9IF9yZWYuaW5pdFBUUyxcbiAgICAgICAgdGltZXNjYWxlID0gX3JlZi50aW1lc2NhbGU7XG4gICAgICAvLyBBbHdheXMgdXBkYXRlIHRoZSBuZXcgSU5JVCBQVFNcbiAgICAgIC8vIENhbiBjaGFuZ2UgZHVlIGxldmVsIHN3aXRjaFxuICAgICAgaWYgKGlkID09PSBQbGF5bGlzdExldmVsVHlwZS5NQUlOKSB7XG4gICAgICAgIHZhciBjYyA9IGZyYWcuY2M7XG4gICAgICAgIHZhciBpbkZsaWdodEZyYWcgPSB0aGlzLmZyYWdDdXJyZW50O1xuICAgICAgICB0aGlzLmluaXRQVFNbY2NdID0ge1xuICAgICAgICAgIGJhc2VUaW1lOiBpbml0UFRTLFxuICAgICAgICAgIHRpbWVzY2FsZTogdGltZXNjYWxlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubG9nKFwiSW5pdFBUUyBmb3IgY2M6IFwiICsgY2MgKyBcIiBmb3VuZCBmcm9tIG1haW46IFwiICsgaW5pdFBUUyArIFwiL1wiICsgdGltZXNjYWxlKTtcbiAgICAgICAgdGhpcy5tYWluQW5jaG9yID0gZnJhZztcbiAgICAgICAgLy8gSWYgd2UgYXJlIHdhaXRpbmcsIHRpY2sgaW1tZWRpYXRlbHkgdG8gdW5ibG9jayBhdWRpbyBmcmFnbWVudCB0cmFuc211eGluZ1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuV0FJVElOR19JTklUX1BUUykge1xuICAgICAgICAgIHZhciB3YWl0aW5nRGF0YSA9IHRoaXMud2FpdGluZ0RhdGE7XG4gICAgICAgICAgaWYgKCF3YWl0aW5nRGF0YSAmJiAhdGhpcy5sb2FkaW5nUGFydHMgfHwgd2FpdGluZ0RhdGEgJiYgd2FpdGluZ0RhdGEuZnJhZy5jYyAhPT0gY2MpIHtcbiAgICAgICAgICAgIHRoaXMuc3luY1dpdGhBbmNob3IoZnJhZywgd2FpdGluZ0RhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IHdhaXRpbmdEYXRhLmZyYWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5obHMuaGFzRW5vdWdoVG9TdGFydCAmJiBpbkZsaWdodEZyYWcgJiYgaW5GbGlnaHRGcmFnLmNjICE9PSBjYykge1xuICAgICAgICAgIGluRmxpZ2h0RnJhZy5hYm9ydFJlcXVlc3RzKCk7XG4gICAgICAgICAgdGhpcy5zeW5jV2l0aEFuY2hvcihmcmFnLCBpbkZsaWdodEZyYWcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLklETEUpIHtcbiAgICAgICAgICB0aGlzLnRpY2soKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmdldExvYWRQb3NpdGlvbiA9IGZ1bmN0aW9uIGdldExvYWRQb3NpdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQgJiYgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID49IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dExvYWRQb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfQmFzZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLmdldExvYWRQb3NpdGlvbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLnN5bmNXaXRoQW5jaG9yID0gZnVuY3Rpb24gc3luY1dpdGhBbmNob3IobWFpbkFuY2hvciwgd2FpdGluZ1RvQXBwZW5kKSB7XG4gICAgICB2YXIgX3RoaXMkbWFpbkZyYWdMb2FkaW5nO1xuICAgICAgLy8gRHJvcCB3YWl0aW5nIGZyYWdtZW50IGlmIHZpZGVvVHJhY2tDQyBoYXMgY2hhbmdlZCBzaW5jZSB3YWl0aW5nRnJhZ21lbnQgd2FzIHNldCBhbmQgaW5pdFBUUyB3YXMgbm90IGZvdW5kXG4gICAgICB2YXIgbWFpbkZyYWdMb2FkaW5nID0gKChfdGhpcyRtYWluRnJhZ0xvYWRpbmcgPSB0aGlzLm1haW5GcmFnTG9hZGluZykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG1haW5GcmFnTG9hZGluZy5mcmFnKSB8fCBudWxsO1xuICAgICAgaWYgKHdhaXRpbmdUb0FwcGVuZCkge1xuICAgICAgICBpZiAoKG1haW5GcmFnTG9hZGluZyA9PSBudWxsID8gdm9pZCAwIDogbWFpbkZyYWdMb2FkaW5nLmNjKSA9PT0gd2FpdGluZ1RvQXBwZW5kLmNjKSB7XG4gICAgICAgICAgLy8gV2FpdCBmb3IgbG9hZGluZyBmcmFnIHRvIGNvbXBsZXRlIGFuZCBJTklUX1BUU19GT1VORFxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHRhcmdldERpc2NvbnRpbnVpdHkgPSAobWFpbkZyYWdMb2FkaW5nIHx8IG1haW5BbmNob3IpLmNjO1xuICAgICAgdmFyIHRyYWNrRGV0YWlscyA9IHRoaXMuZ2V0TGV2ZWxEZXRhaWxzKCk7XG4gICAgICB2YXIgcG9zID0gdGhpcy5nZXRMb2FkUG9zaXRpb24oKTtcbiAgICAgIHZhciBzeW5jRnJhZyA9IGZpbmROZWFyZXN0V2l0aENDKHRyYWNrRGV0YWlscywgdGFyZ2V0RGlzY29udGludWl0eSwgcG9zKTtcbiAgICAgIC8vIE9ubHkgc3RvcCB3YWl0aW5nIGZvciBhdWRpb0ZyYWcuY2MgaWYgYW4gYXVkaW8gc2VnbWVudCBvZiB0aGUgc2FtZSBkaXNjb250aW51aXR5IGRvbWFpbiAoY2MpIGlzIGZvdW5kXG4gICAgICBpZiAoc3luY0ZyYWcpIHtcbiAgICAgICAgdGhpcy5sb2coXCJXYWl0aW5nIGZyYWdtZW50IGNjIChcIiArICh3YWl0aW5nVG9BcHBlbmQgPT0gbnVsbCA/IHZvaWQgMCA6IHdhaXRpbmdUb0FwcGVuZC5jYykgKyBcIikgY2FuY2VsbGVkIGJlY2F1c2UgdmlkZW8gaXMgYXQgY2MgXCIgKyBtYWluQW5jaG9yLmNjKTtcbiAgICAgICAgdGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gc3luY0ZyYWcuc3RhcnQ7XG4gICAgICAgIHRoaXMucmVzZXRMb2FkaW5nU3RhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLklETEUpIHtcbiAgICAgICAgICB0aGlzLmRvVGlja0lkbGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uIHN0YXJ0TG9hZChzdGFydFBvc2l0aW9uLCBza2lwU2Vla1RvU3RhcnRQb3NpdGlvbikge1xuICAgICAgaWYgKCF0aGlzLmxldmVscykge1xuICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uO1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU1RPUFBFRDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RDdXJyZW50VGltZSA9IHRoaXMubGFzdEN1cnJlbnRUaW1lO1xuICAgICAgdGhpcy5zdG9wTG9hZCgpO1xuICAgICAgdGhpcy5zZXRJbnRlcnZhbChUSUNLX0lOVEVSVkFMJDMpO1xuICAgICAgaWYgKGxhc3RDdXJyZW50VGltZSA+IDAgJiYgc3RhcnRQb3NpdGlvbiA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5sb2coXCJPdmVycmlkZSBzdGFydFBvc2l0aW9uIHdpdGggbGFzdEN1cnJlbnRUaW1lIEBcIiArIGxhc3RDdXJyZW50VGltZS50b0ZpeGVkKDMpKTtcbiAgICAgICAgc3RhcnRQb3NpdGlvbiA9IGxhc3RDdXJyZW50VGltZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuV0FJVElOR19UUkFDSztcbiAgICAgIH1cbiAgICAgIHRoaXMubmV4dExvYWRQb3NpdGlvbiA9IHRoaXMubGFzdEN1cnJlbnRUaW1lID0gc3RhcnRQb3NpdGlvbiArIHRoaXMudGltZWxpbmVPZmZzZXQ7XG4gICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSBza2lwU2Vla1RvU3RhcnRQb3NpdGlvbiA/IC0xIDogc3RhcnRQb3NpdGlvbjtcbiAgICAgIHRoaXMudGljaygpO1xuICAgIH07XG4gICAgX3Byb3RvLmRvVGljayA9IGZ1bmN0aW9uIGRvVGljaygpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xuICAgICAgICBjYXNlIFN0YXRlLklETEU6XG4gICAgICAgICAgdGhpcy5kb1RpY2tJZGxlKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU3RhdGUuV0FJVElOR19UUkFDSzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHMsXG4gICAgICAgICAgICAgIHRyYWNrSWQgPSB0aGlzLnRyYWNrSWQ7XG4gICAgICAgICAgICB2YXIgY3VycmVuVHJhY2sgPSBsZXZlbHMgPT0gbnVsbCA/IHZvaWQgMCA6IGxldmVsc1t0cmFja0lkXTtcbiAgICAgICAgICAgIHZhciBkZXRhaWxzID0gY3VycmVuVHJhY2sgPT0gbnVsbCA/IHZvaWQgMCA6IGN1cnJlblRyYWNrLmRldGFpbHM7XG4gICAgICAgICAgICBpZiAoZGV0YWlscyAmJiAhdGhpcy53YWl0Rm9yTGl2ZShjdXJyZW5UcmFjaykpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMud2FpdEZvckNkblR1bmVJbihkZXRhaWxzKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5XQUlUSU5HX0lOSVRfUFRTO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFN0YXRlLkZSQUdfTE9BRElOR19XQUlUSU5HX1JFVFJZOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyRtZWRpYTtcbiAgICAgICAgICAgIHZhciBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIHZhciByZXRyeURhdGUgPSB0aGlzLnJldHJ5RGF0ZTtcbiAgICAgICAgICAgIC8vIGlmIGN1cnJlbnQgdGltZSBpcyBndCB0aGFuIHJldHJ5RGF0ZSwgb3IgaWYgbWVkaWEgc2Vla2luZyBsZXQncyBzd2l0Y2ggdG8gSURMRSBzdGF0ZSB0byByZXRyeSBsb2FkaW5nXG4gICAgICAgICAgICBpZiAoIXJldHJ5RGF0ZSB8fCBub3cgPj0gcmV0cnlEYXRlIHx8IChfdGhpcyRtZWRpYSA9IHRoaXMubWVkaWEpICE9IG51bGwgJiYgX3RoaXMkbWVkaWEuc2Vla2luZykge1xuICAgICAgICAgICAgICB2YXIgX2xldmVscyA9IHRoaXMubGV2ZWxzLFxuICAgICAgICAgICAgICAgIF90cmFja0lkID0gdGhpcy50cmFja0lkO1xuICAgICAgICAgICAgICB0aGlzLmxvZygnUmV0cnlEYXRlIHJlYWNoZWQsIHN3aXRjaCBiYWNrIHRvIElETEUgc3RhdGUnKTtcbiAgICAgICAgICAgICAgdGhpcy5yZXNldFN0YXJ0V2hlbk5vdExvYWRlZCgoX2xldmVscyA9PSBudWxsID8gdm9pZCAwIDogX2xldmVsc1tfdHJhY2tJZF0pIHx8IG51bGwpO1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBTdGF0ZS5XQUlUSU5HX0lOSVRfUFRTOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSB3ZSBkb24ndCBnZXQgc3R1Y2sgaW4gdGhlIFdBSVRJTkdfSU5JVF9QVFMgc3RhdGUgaWYgdGhlIHdhaXRpbmcgZnJhZyBDQyBkb2Vzbid0IG1hdGNoIGFueSBpbml0UFRTXG4gICAgICAgICAgICB2YXIgd2FpdGluZ0RhdGEgPSB0aGlzLndhaXRpbmdEYXRhO1xuICAgICAgICAgICAgaWYgKHdhaXRpbmdEYXRhKSB7XG4gICAgICAgICAgICAgIHZhciBmcmFnID0gd2FpdGluZ0RhdGEuZnJhZyxcbiAgICAgICAgICAgICAgICBwYXJ0ID0gd2FpdGluZ0RhdGEucGFydCxcbiAgICAgICAgICAgICAgICBjYWNoZSA9IHdhaXRpbmdEYXRhLmNhY2hlLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gd2FpdGluZ0RhdGEuY29tcGxldGU7XG4gICAgICAgICAgICAgIHZhciBtYWluQW5jaG9yID0gdGhpcy5tYWluQW5jaG9yO1xuICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UFRTW2ZyYWcuY2NdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhaXRpbmdEYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRlJBR19MT0FESU5HO1xuICAgICAgICAgICAgICAgIHZhciBwYXlsb2FkID0gY2FjaGUuZmx1c2goKS5idWZmZXI7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgICAgICAgICAgcGFydDogcGFydCxcbiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICAgICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbnVsbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlRnJhZ21lbnRMb2FkUHJvZ3Jlc3MoZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICBfQmFzZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLl9oYW5kbGVGcmFnbWVudExvYWRDb21wbGV0ZS5jYWxsKHRoaXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYWluQW5jaG9yICYmIG1haW5BbmNob3IuY2MgIT09IHdhaXRpbmdEYXRhLmZyYWcuY2MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN5bmNXaXRoQW5jaG9yKG1haW5BbmNob3IsIHdhaXRpbmdEYXRhLmZyYWcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLm9uVGlja0VuZCgpO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0TG9hZGluZ1N0YXRlID0gZnVuY3Rpb24gcmVzZXRMb2FkaW5nU3RhdGUoKSB7XG4gICAgICB2YXIgd2FpdGluZ0RhdGEgPSB0aGlzLndhaXRpbmdEYXRhO1xuICAgICAgaWYgKHdhaXRpbmdEYXRhKSB7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLnJlbW92ZUZyYWdtZW50KHdhaXRpbmdEYXRhLmZyYWcpO1xuICAgICAgICB0aGlzLndhaXRpbmdEYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUucmVzZXRMb2FkaW5nU3RhdGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by5vblRpY2tFbmQgPSBmdW5jdGlvbiBvblRpY2tFbmQoKSB7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgICAgaWYgKCEobWVkaWEgIT0gbnVsbCAmJiBtZWRpYS5yZWFkeVN0YXRlKSkge1xuICAgICAgICAvLyBFeGl0IGVhcmx5IGlmIHdlIGRvbid0IGhhdmUgbWVkaWEgb3IgaWYgdGhlIG1lZGlhIGhhc24ndCBidWZmZXJlZCBhbnl0aGluZyB5ZXQgKHJlYWR5U3RhdGUgMClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5sYXN0Q3VycmVudFRpbWUgPSBtZWRpYS5jdXJyZW50VGltZTtcbiAgICB9O1xuICAgIF9wcm90by5kb1RpY2tJZGxlID0gZnVuY3Rpb24gZG9UaWNrSWRsZSgpIHtcbiAgICAgIHZhciBfdGhpcyRtYWluRnJhZ0xvYWRpbmcyO1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzLFxuICAgICAgICBsZXZlbHMgPSB0aGlzLmxldmVscyxcbiAgICAgICAgbWVkaWEgPSB0aGlzLm1lZGlhLFxuICAgICAgICB0cmFja0lkID0gdGhpcy50cmFja0lkO1xuICAgICAgdmFyIGNvbmZpZyA9IGhscy5jb25maWc7XG5cbiAgICAgIC8vIDEuIGlmIGJ1ZmZlcmluZyBpcyBzdXNwZW5kZWRcbiAgICAgIC8vIDIuIGlmIHZpZGVvIG5vdCBhdHRhY2hlZCBBTkRcbiAgICAgIC8vICAgIHN0YXJ0IGZyYWdtZW50IGFscmVhZHkgcmVxdWVzdGVkIE9SIHN0YXJ0IGZyYWcgcHJlZmV0Y2ggbm90IGVuYWJsZWRcbiAgICAgIC8vIDMuIGlmIHRyYWNrcyBvciB0cmFjayBub3QgbG9hZGVkIGFuZCBzZWxlY3RlZFxuICAgICAgLy8gdGhlbiBleGl0IGxvb3BcbiAgICAgIC8vID0+IGlmIG1lZGlhIG5vdCBhdHRhY2hlZCBidXQgc3RhcnQgZnJhZyBwcmVmZXRjaCBpcyBlbmFibGVkIGFuZCBzdGFydCBmcmFnIG5vdCByZXF1ZXN0ZWQgeWV0LCB3ZSB3aWxsIG5vdCBleGl0IGxvb3BcbiAgICAgIGlmICghdGhpcy5idWZmZXJpbmcgfHwgIW1lZGlhICYmICF0aGlzLnByaW1hcnlQcmVmZXRjaCAmJiAodGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQgfHwgIWNvbmZpZy5zdGFydEZyYWdQcmVmZXRjaCkgfHwgIShsZXZlbHMgIT0gbnVsbCAmJiBsZXZlbHNbdHJhY2tJZF0pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBsZXZlbEluZm8gPSBsZXZlbHNbdHJhY2tJZF07XG4gICAgICB2YXIgdHJhY2tEZXRhaWxzID0gbGV2ZWxJbmZvLmRldGFpbHM7XG4gICAgICBpZiAoIXRyYWNrRGV0YWlscyB8fCB0aGlzLndhaXRGb3JMaXZlKGxldmVsSW5mbykgfHwgdGhpcy53YWl0Rm9yQ2RuVHVuZUluKHRyYWNrRGV0YWlscykpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLldBSVRJTkdfVFJBQ0s7XG4gICAgICAgIHRoaXMuc3RhcnRGcmFnUmVxdWVzdGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBidWZmZXJhYmxlID0gdGhpcy5tZWRpYUJ1ZmZlciA/IHRoaXMubWVkaWFCdWZmZXIgOiB0aGlzLm1lZGlhO1xuICAgICAgaWYgKHRoaXMuYnVmZmVyRmx1c2hlZCAmJiBidWZmZXJhYmxlKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyRmx1c2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFmdGVyQnVmZmVyRmx1c2hlZChidWZmZXJhYmxlLCBFbGVtZW50YXJ5U3RyZWFtVHlwZXMuQVVESU8sIFBsYXlsaXN0TGV2ZWxUeXBlLkFVRElPKTtcbiAgICAgIH1cbiAgICAgIHZhciBidWZmZXJJbmZvID0gdGhpcy5nZXRGd2RCdWZmZXJJbmZvKGJ1ZmZlcmFibGUsIFBsYXlsaXN0TGV2ZWxUeXBlLkFVRElPKTtcbiAgICAgIGlmIChidWZmZXJJbmZvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5zd2l0Y2hpbmdUcmFjayAmJiB0aGlzLl9zdHJlYW1FbmRlZChidWZmZXJJbmZvLCB0cmFja0RldGFpbHMpKSB7XG4gICAgICAgIGhscy50cmlnZ2VyKEV2ZW50cy5CVUZGRVJfRU9TLCB7XG4gICAgICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkVOREVEO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgYnVmZmVyTGVuID0gYnVmZmVySW5mby5sZW47XG4gICAgICB2YXIgbWF4QnVmTGVuID0gaGxzLm1heEJ1ZmZlckxlbmd0aDtcbiAgICAgIHZhciBmcmFnbWVudHMgPSB0cmFja0RldGFpbHMuZnJhZ21lbnRzO1xuICAgICAgdmFyIHN0YXJ0ID0gZnJhZ21lbnRzWzBdLnN0YXJ0O1xuICAgICAgdmFyIGxvYWRQb3NpdGlvbiA9IHRoaXMuZ2V0TG9hZFBvc2l0aW9uKCk7XG4gICAgICB2YXIgdGFyZ2V0QnVmZmVyVGltZSA9IHRoaXMuZmx1c2hpbmcgPyBsb2FkUG9zaXRpb24gOiBidWZmZXJJbmZvLmVuZDtcbiAgICAgIGlmICh0aGlzLnN3aXRjaGluZ1RyYWNrICYmIG1lZGlhKSB7XG4gICAgICAgIHZhciBwb3MgPSBsb2FkUG9zaXRpb247XG4gICAgICAgIC8vIGlmIGN1cnJlbnRUaW1lIChwb3MpIGlzIGxlc3MgdGhhbiBhbHQgYXVkaW8gcGxheWxpc3Qgc3RhcnQgdGltZSwgaXQgbWVhbnMgdGhhdCBhbHQgYXVkaW8gaXMgYWhlYWQgb2YgY3VycmVudFRpbWVcbiAgICAgICAgaWYgKHRyYWNrRGV0YWlscy5QVFNLbm93biAmJiBwb3MgPCBzdGFydCkge1xuICAgICAgICAgIC8vIGlmIGV2ZXJ5dGhpbmcgaXMgYnVmZmVyZWQgZnJvbSBwb3MgdG8gc3RhcnQgb3IgaWYgYXVkaW8gYnVmZmVyIHVwZnJvbnQsIGxldCdzIHNlZWsgdG8gc3RhcnRcbiAgICAgICAgICBpZiAoYnVmZmVySW5mby5lbmQgPiBzdGFydCB8fCBidWZmZXJJbmZvLm5leHRTdGFydCkge1xuICAgICAgICAgICAgdGhpcy5sb2coJ0FsdCBhdWRpbyB0cmFjayBhaGVhZCBvZiBtYWluIHRyYWNrLCBzZWVrIHRvIHN0YXJ0IG9mIGFsdCBhdWRpbyB0cmFjaycpO1xuICAgICAgICAgICAgbWVkaWEuY3VycmVudFRpbWUgPSBzdGFydCArIDAuMDU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGJ1ZmZlciBsZW5ndGggaXMgbGVzcyB0aGFuIG1heEJ1Zkxlbiwgb3IgbmVhciB0aGUgZW5kLCBmaW5kIGEgZnJhZ21lbnQgdG8gbG9hZFxuICAgICAgaWYgKGJ1ZmZlckxlbiA+PSBtYXhCdWZMZW4gJiYgIXRoaXMuc3dpdGNoaW5nVHJhY2sgJiYgdGFyZ2V0QnVmZmVyVGltZSA8IGZyYWdtZW50c1tmcmFnbWVudHMubGVuZ3RoIC0gMV0uc3RhcnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGZyYWcgPSB0aGlzLmdldE5leHRGcmFnbWVudCh0YXJnZXRCdWZmZXJUaW1lLCB0cmFja0RldGFpbHMpO1xuICAgICAgLy8gQXZvaWQgbG9vcCBsb2FkaW5nIGJ5IHVzaW5nIG5leHRMb2FkUG9zaXRpb24gc2V0IGZvciBiYWNrdHJhY2tpbmcgYW5kIHNraXBwaW5nIGNvbnNlY3V0aXZlIEdBUCB0YWdzXG4gICAgICBpZiAoZnJhZyAmJiB0aGlzLmlzTG9vcExvYWRpbmcoZnJhZywgdGFyZ2V0QnVmZmVyVGltZSkpIHtcbiAgICAgICAgZnJhZyA9IHRoaXMuZ2V0TmV4dEZyYWdtZW50TG9vcExvYWRpbmcoZnJhZywgdHJhY2tEZXRhaWxzLCBidWZmZXJJbmZvLCBQbGF5bGlzdExldmVsVHlwZS5NQUlOLCBtYXhCdWZMZW4pO1xuICAgICAgfVxuICAgICAgaWYgKCFmcmFnKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyRmx1c2hlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUmVxdWVzdCBhdWRpbyBzZWdtZW50cyB1cCB0byBvbmUgZnJhZ21lbnQgYWhlYWQgb2YgbWFpbiBzdHJlYW0tY29udHJvbGxlclxuICAgICAgdmFyIG1haW5GcmFnTG9hZGluZyA9ICgoX3RoaXMkbWFpbkZyYWdMb2FkaW5nMiA9IHRoaXMubWFpbkZyYWdMb2FkaW5nKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkbWFpbkZyYWdMb2FkaW5nMi5mcmFnKSB8fCBudWxsO1xuICAgICAgaWYgKCF0aGlzLmF1ZGlvT25seSAmJiB0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCAmJiBtYWluRnJhZ0xvYWRpbmcgJiYgaXNNZWRpYUZyYWdtZW50KGZyYWcpICYmICFmcmFnLmVuZExpc3QgJiYgKCF0cmFja0RldGFpbHMubGl2ZSB8fCAhdGhpcy5sb2FkaW5nUGFydHMgJiYgdGFyZ2V0QnVmZmVyVGltZSA8IHRoaXMuaGxzLmxpdmVTeW5jUG9zaXRpb24pKSB7XG4gICAgICAgIGlmICh0aGlzLmZyYWdtZW50VHJhY2tlci5nZXRTdGF0ZShtYWluRnJhZ0xvYWRpbmcpID09PSBGcmFnbWVudFN0YXRlLk9LKSB7XG4gICAgICAgICAgdGhpcy5tYWluRnJhZ0xvYWRpbmcgPSBtYWluRnJhZ0xvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYWluRnJhZ0xvYWRpbmcgJiYgaXNNZWRpYUZyYWdtZW50KG1haW5GcmFnTG9hZGluZykpIHtcbiAgICAgICAgICBpZiAoZnJhZy5zdGFydCA+IG1haW5GcmFnTG9hZGluZy5lbmQpIHtcbiAgICAgICAgICAgIC8vIEdldCBidWZmZXJlZCBmcmFnIGF0IHRhcmdldCBwb3NpdGlvbiBmcm9tIHRyYWNrZXIgKGxvYWRlZCBvdXQgb2Ygc2VxdWVuY2UpXG4gICAgICAgICAgICB2YXIgbWFpbkZyYWdBdFBvcyA9IHRoaXMuZnJhZ21lbnRUcmFja2VyLmdldEZyYWdBdFBvcyh0YXJnZXRCdWZmZXJUaW1lLCBQbGF5bGlzdExldmVsVHlwZS5NQUlOKTtcbiAgICAgICAgICAgIGlmIChtYWluRnJhZ0F0UG9zICYmIG1haW5GcmFnQXRQb3MuZW5kID4gbWFpbkZyYWdMb2FkaW5nLmVuZCkge1xuICAgICAgICAgICAgICBtYWluRnJhZ0xvYWRpbmcgPSBtYWluRnJhZ0F0UG9zO1xuICAgICAgICAgICAgICB0aGlzLm1haW5GcmFnTG9hZGluZyA9IHtcbiAgICAgICAgICAgICAgICBmcmFnOiBtYWluRnJhZ0F0UG9zLFxuICAgICAgICAgICAgICAgIHRhcmdldEJ1ZmZlclRpbWU6IG51bGxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGF0QnVmZmVyU3luY0xpbWl0ID0gZnJhZy5zdGFydCA+IG1haW5GcmFnTG9hZGluZy5lbmQ7XG4gICAgICAgICAgaWYgKGF0QnVmZmVyU3luY0xpbWl0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmxvYWRGcmFnbWVudChmcmFnLCBsZXZlbEluZm8sIHRhcmdldEJ1ZmZlclRpbWUpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTWVkaWFEZXRhY2hpbmcgPSBmdW5jdGlvbiBvbk1lZGlhRGV0YWNoaW5nKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLmJ1ZmZlckZsdXNoZWQgPSB0aGlzLmZsdXNoaW5nID0gZmFsc2U7XG4gICAgICBfQmFzZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLm9uTWVkaWFEZXRhY2hpbmcuY2FsbCh0aGlzLCBldmVudCwgZGF0YSk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25BdWRpb1RyYWNrc1VwZGF0ZWQgPSBmdW5jdGlvbiBvbkF1ZGlvVHJhY2tzVXBkYXRlZChldmVudCwgX3JlZjIpIHtcbiAgICAgIHZhciBhdWRpb1RyYWNrcyA9IF9yZWYyLmF1ZGlvVHJhY2tzO1xuICAgICAgLy8gUmVzZXQgdHJhbnhtdXhlciBpcyBlc3NlbnRpYWwgZm9yIGxhcmdlIGNvbnRleHQgc3dpdGNoZXMgKENvbnRlbnQgU3RlZXJpbmcpXG4gICAgICB0aGlzLnJlc2V0VHJhbnNtdXhlcigpO1xuICAgICAgdGhpcy5sZXZlbHMgPSBhdWRpb1RyYWNrcy5tYXAoZnVuY3Rpb24gKG1lZGlhUGxheWxpc3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMZXZlbChtZWRpYVBsYXlsaXN0KTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLm9uQXVkaW9UcmFja1N3aXRjaGluZyA9IGZ1bmN0aW9uIG9uQXVkaW9UcmFja1N3aXRjaGluZyhldmVudCwgZGF0YSkge1xuICAgICAgLy8gaWYgYW55IFVSTCBmb3VuZCBvbiBuZXcgYXVkaW8gdHJhY2ssIGl0IGlzIGFuIGFsdGVybmF0ZSBhdWRpbyB0cmFja1xuICAgICAgdmFyIGFsdEF1ZGlvID0gISFkYXRhLnVybDtcbiAgICAgIHRoaXMudHJhY2tJZCA9IGRhdGEuaWQ7XG4gICAgICB2YXIgZnJhZ0N1cnJlbnQgPSB0aGlzLmZyYWdDdXJyZW50O1xuICAgICAgaWYgKGZyYWdDdXJyZW50KSB7XG4gICAgICAgIGZyYWdDdXJyZW50LmFib3J0UmVxdWVzdHMoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVVbmJ1ZmZlcmVkRnJhZ3MoZnJhZ0N1cnJlbnQuc3RhcnQpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXNldExvYWRpbmdTdGF0ZSgpO1xuXG4gICAgICAvLyBzaG91bGQgd2Ugc3dpdGNoIHRyYWNrcyA/XG4gICAgICBpZiAoYWx0QXVkaW8pIHtcbiAgICAgICAgdGhpcy5zd2l0Y2hpbmdUcmFjayA9IGRhdGE7XG4gICAgICAgIC8vIG1haW4gYXVkaW8gdHJhY2sgYXJlIGhhbmRsZWQgYnkgc3RyZWFtLWNvbnRyb2xsZXIsIGp1c3QgZG8gc29tZXRoaW5nIGlmIHN3aXRjaGluZyB0byBhbHQgYXVkaW8gdHJhY2tcbiAgICAgICAgdGhpcy5mbHVzaEF1ZGlvSWZOZWVkZWQoZGF0YSk7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBTdGF0ZS5TVE9QUEVEKSB7XG4gICAgICAgICAgLy8gc3dpdGNoaW5nIHRvIGF1ZGlvIHRyYWNrLCBzdGFydCB0aW1lciBpZiBub3QgYWxyZWFkeSBzdGFydGVkXG4gICAgICAgICAgdGhpcy5zZXRJbnRlcnZhbChUSUNLX0lOVEVSVkFMJDMpO1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgICAgIHRoaXMudGljaygpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZXN0cm95IHVzZWxlc3MgdHJhbnNtdXhlciB3aGVuIHN3aXRjaGluZyBhdWRpbyB0byBtYWluXG4gICAgICAgIHRoaXMucmVzZXRUcmFuc211eGVyKCk7XG4gICAgICAgIHRoaXMuc3dpdGNoaW5nVHJhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLmJ1ZmZlcmVkVHJhY2sgPSBkYXRhO1xuICAgICAgICB0aGlzLmNsZWFySW50ZXJ2YWwoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbk1hbmlmZXN0TG9hZGluZyA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkaW5nKCkge1xuICAgICAgX0Jhc2VTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5vbk1hbmlmZXN0TG9hZGluZy5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5idWZmZXJGbHVzaGVkID0gdGhpcy5mbHVzaGluZyA9IHRoaXMuYXVkaW9Pbmx5ID0gZmFsc2U7XG4gICAgICB0aGlzLnJlc2V0SXRlbSgpO1xuICAgICAgdGhpcy50cmFja0lkID0gLTE7XG4gICAgfTtcbiAgICBfcHJvdG8ub25MZXZlbExvYWRlZCA9IGZ1bmN0aW9uIG9uTGV2ZWxMb2FkZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMubWFpbkRldGFpbHMgPSBkYXRhLmRldGFpbHM7XG4gICAgICB2YXIgY2FjaGVkVHJhY2tMb2FkZWREYXRhID0gdGhpcy5jYWNoZWRUcmFja0xvYWRlZERhdGE7XG4gICAgICBpZiAoY2FjaGVkVHJhY2tMb2FkZWREYXRhKSB7XG4gICAgICAgIHRoaXMuY2FjaGVkVHJhY2tMb2FkZWREYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbkF1ZGlvVHJhY2tMb2FkZWQoRXZlbnRzLkFVRElPX1RSQUNLX0xPQURFRCwgY2FjaGVkVHJhY2tMb2FkZWREYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkF1ZGlvVHJhY2tMb2FkZWQgPSBmdW5jdGlvbiBvbkF1ZGlvVHJhY2tMb2FkZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfdHJhY2tMZXZlbCRkZXRhaWxzO1xuICAgICAgdmFyIGxldmVscyA9IHRoaXMubGV2ZWxzO1xuICAgICAgdmFyIG5ld0RldGFpbHMgPSBkYXRhLmRldGFpbHMsXG4gICAgICAgIHRyYWNrSWQgPSBkYXRhLmlkLFxuICAgICAgICBncm91cElkID0gZGF0YS5ncm91cElkLFxuICAgICAgICB0cmFjayA9IGRhdGEudHJhY2s7XG4gICAgICBpZiAoIWxldmVscykge1xuICAgICAgICB0aGlzLndhcm4oXCJBdWRpbyB0cmFja3MgcmVzZXQgd2hpbGUgbG9hZGluZyB0cmFjayBcIiArIHRyYWNrSWQgKyBcIiBcXFwiXCIgKyB0cmFjay5uYW1lICsgXCJcXFwiIG9mIFxcXCJcIiArIGdyb3VwSWQgKyBcIlxcXCJcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBtYWluRGV0YWlscyA9IHRoaXMubWFpbkRldGFpbHM7XG4gICAgICBpZiAoIW1haW5EZXRhaWxzIHx8IG5ld0RldGFpbHMuZW5kQ0MgPiBtYWluRGV0YWlscy5lbmRDQyB8fCBtYWluRGV0YWlscy5leHBpcmVkKSB7XG4gICAgICAgIHRoaXMuY2FjaGVkVHJhY2tMb2FkZWREYXRhID0gZGF0YTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IFN0YXRlLlNUT1BQRUQpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuV0FJVElOR19UUkFDSztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmNhY2hlZFRyYWNrTG9hZGVkRGF0YSA9IG51bGw7XG4gICAgICB0aGlzLmxvZyhcIkF1ZGlvIHRyYWNrIFwiICsgdHJhY2tJZCArIFwiIFxcXCJcIiArIHRyYWNrLm5hbWUgKyBcIlxcXCIgb2YgXFxcIlwiICsgZ3JvdXBJZCArIFwiXFxcIiBsb2FkZWQgW1wiICsgbmV3RGV0YWlscy5zdGFydFNOICsgXCIsXCIgKyBuZXdEZXRhaWxzLmVuZFNOICsgXCJdXCIgKyAobmV3RGV0YWlscy5sYXN0UGFydFNuID8gXCJbcGFydC1cIiArIG5ld0RldGFpbHMubGFzdFBhcnRTbiArIFwiLVwiICsgbmV3RGV0YWlscy5sYXN0UGFydEluZGV4ICsgXCJdXCIgOiAnJykgKyBcIixkdXJhdGlvbjpcIiArIG5ld0RldGFpbHMudG90YWxkdXJhdGlvbik7XG4gICAgICB2YXIgdHJhY2tMZXZlbCA9IGxldmVsc1t0cmFja0lkXTtcbiAgICAgIHZhciBzbGlkaW5nID0gMDtcbiAgICAgIGlmIChuZXdEZXRhaWxzLmxpdmUgfHwgKF90cmFja0xldmVsJGRldGFpbHMgPSB0cmFja0xldmVsLmRldGFpbHMpICE9IG51bGwgJiYgX3RyYWNrTGV2ZWwkZGV0YWlscy5saXZlKSB7XG4gICAgICAgIHRoaXMuY2hlY2tMaXZlVXBkYXRlKG5ld0RldGFpbHMpO1xuICAgICAgICBpZiAobmV3RGV0YWlscy5kZWx0YVVwZGF0ZUZhaWxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2tMZXZlbC5kZXRhaWxzKSB7XG4gICAgICAgICAgdmFyIF90aGlzJGxldmVsTGFzdExvYWRlZDtcbiAgICAgICAgICBzbGlkaW5nID0gdGhpcy5hbGlnblBsYXlsaXN0cyhuZXdEZXRhaWxzLCB0cmFja0xldmVsLmRldGFpbHMsIChfdGhpcyRsZXZlbExhc3RMb2FkZWQgPSB0aGlzLmxldmVsTGFzdExvYWRlZCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGxldmVsTGFzdExvYWRlZC5kZXRhaWxzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5ld0RldGFpbHMuYWxpZ25lZFNsaWRpbmcpIHtcbiAgICAgICAgICAvLyBBbGlnbiBhdWRpbyByZW5kaXRpb24gd2l0aCB0aGUgXCJtYWluXCIgcGxheWxpc3Qgb24gZGlzY29udGludWl0eSBjaGFuZ2VcbiAgICAgICAgICAvLyBvciBwcm9ncmFtLWRhdGUtdGltZSAoUERUKVxuICAgICAgICAgIGFsaWduRGlzY29udGludWl0aWVzKG5ld0RldGFpbHMsIG1haW5EZXRhaWxzKTtcbiAgICAgICAgICBpZiAoIW5ld0RldGFpbHMuYWxpZ25lZFNsaWRpbmcpIHtcbiAgICAgICAgICAgIGFsaWduTWVkaWFQbGF5bGlzdEJ5UERUKG5ld0RldGFpbHMsIG1haW5EZXRhaWxzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2xpZGluZyA9IG5ld0RldGFpbHMuZnJhZ21lbnRTdGFydDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdHJhY2tMZXZlbC5kZXRhaWxzID0gbmV3RGV0YWlscztcbiAgICAgIHRoaXMubGV2ZWxMYXN0TG9hZGVkID0gdHJhY2tMZXZlbDtcblxuICAgICAgLy8gY29tcHV0ZSBzdGFydCBwb3NpdGlvbiBpZiB3ZSBhcmUgYWxpZ25lZCB3aXRoIHRoZSBtYWluIHBsYXlsaXN0XG4gICAgICBpZiAoIXRoaXMuc3RhcnRGcmFnUmVxdWVzdGVkKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhcnRQb3NpdGlvbihtYWluRGV0YWlscywgc2xpZGluZyk7XG4gICAgICB9XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5BVURJT19UUkFDS19VUERBVEVELCB7XG4gICAgICAgIGRldGFpbHM6IG5ld0RldGFpbHMsXG4gICAgICAgIGlkOiB0cmFja0lkLFxuICAgICAgICBncm91cElkOiBkYXRhLmdyb3VwSWRcbiAgICAgIH0pO1xuXG4gICAgICAvLyBvbmx5IHN3aXRjaCBiYWNrIHRvIElETEUgc3RhdGUgaWYgd2Ugd2VyZSB3YWl0aW5nIGZvciB0cmFjayB0byBzdGFydCBkb3dubG9hZGluZyBhIG5ldyBmcmFnbWVudFxuICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLldBSVRJTkdfVFJBQ0sgJiYgIXRoaXMud2FpdEZvckNkblR1bmVJbihuZXdEZXRhaWxzKSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgIH1cblxuICAgICAgLy8gdHJpZ2dlciBoYW5kbGVyIHJpZ2h0IG5vd1xuICAgICAgdGhpcy50aWNrKCk7XG4gICAgfTtcbiAgICBfcHJvdG8uX2hhbmRsZUZyYWdtZW50TG9hZFByb2dyZXNzID0gZnVuY3Rpb24gX2hhbmRsZUZyYWdtZW50TG9hZFByb2dyZXNzKGRhdGEpIHtcbiAgICAgIHZhciBfZnJhZyRpbml0U2VnbWVudDtcbiAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnO1xuICAgICAgdmFyIHBhcnQgPSBkYXRhLnBhcnQsXG4gICAgICAgIHBheWxvYWQgPSBkYXRhLnBheWxvYWQ7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICAgIHRyYWNrSWQgPSB0aGlzLnRyYWNrSWQsXG4gICAgICAgIGxldmVscyA9IHRoaXMubGV2ZWxzO1xuICAgICAgaWYgKCFsZXZlbHMpIHtcbiAgICAgICAgdGhpcy53YXJuKFwiQXVkaW8gdHJhY2tzIHdlcmUgcmVzZXQgd2hpbGUgZnJhZ21lbnQgbG9hZCB3YXMgaW4gcHJvZ3Jlc3MuIEZyYWdtZW50IFwiICsgZnJhZy5zbiArIFwiIG9mIGxldmVsIFwiICsgZnJhZy5sZXZlbCArIFwiIHdpbGwgbm90IGJlIGJ1ZmZlcmVkXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgdHJhY2sgPSBsZXZlbHNbdHJhY2tJZF07XG4gICAgICBpZiAoIXRyYWNrKSB7XG4gICAgICAgIHRoaXMud2FybignQXVkaW8gdHJhY2sgaXMgdW5kZWZpbmVkIG9uIGZyYWdtZW50IGxvYWQgcHJvZ3Jlc3MnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGRldGFpbHMgPSB0cmFjay5kZXRhaWxzO1xuICAgICAgaWYgKCFkZXRhaWxzKSB7XG4gICAgICAgIHRoaXMud2FybignQXVkaW8gdHJhY2sgZGV0YWlscyB1bmRlZmluZWQgb24gZnJhZ21lbnQgbG9hZCBwcm9ncmVzcycpO1xuICAgICAgICB0aGlzLnJlbW92ZVVuYnVmZmVyZWRGcmFncyhmcmFnLnN0YXJ0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGF1ZGlvQ29kZWMgPSBjb25maWcuZGVmYXVsdEF1ZGlvQ29kZWMgfHwgdHJhY2suYXVkaW9Db2RlYyB8fCAnbXA0YS40MC4yJztcbiAgICAgIHZhciB0cmFuc211eGVyID0gdGhpcy50cmFuc211eGVyO1xuICAgICAgaWYgKCF0cmFuc211eGVyKSB7XG4gICAgICAgIHRyYW5zbXV4ZXIgPSB0aGlzLnRyYW5zbXV4ZXIgPSBuZXcgVHJhbnNtdXhlckludGVyZmFjZSh0aGlzLmhscywgUGxheWxpc3RMZXZlbFR5cGUuQVVESU8sIHRoaXMuX2hhbmRsZVRyYW5zbXV4Q29tcGxldGUuYmluZCh0aGlzKSwgdGhpcy5faGFuZGxlVHJhbnNtdXhlckZsdXNoLmJpbmQodGhpcykpO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIHZpZGVvIGluaXRQVFNcbiAgICAgIC8vIElmIG5vdCB3ZSBuZWVkIHRvIHdhaXQgZm9yIGl0XG4gICAgICB2YXIgaW5pdFBUUyA9IHRoaXMuaW5pdFBUU1tmcmFnLmNjXTtcbiAgICAgIHZhciBpbml0U2VnbWVudERhdGEgPSAoX2ZyYWckaW5pdFNlZ21lbnQgPSBmcmFnLmluaXRTZWdtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2ZyYWckaW5pdFNlZ21lbnQuZGF0YTtcbiAgICAgIGlmIChpbml0UFRTICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gdGhpcy5sb2coYFRyYW5zbXV4aW5nICR7c259IG9mIFske2RldGFpbHMuc3RhcnRTTn0gLCR7ZGV0YWlscy5lbmRTTn1dLHRyYWNrICR7dHJhY2tJZH1gKTtcbiAgICAgICAgLy8gdGltZSBPZmZzZXQgaXMgYWNjdXJhdGUgaWYgbGV2ZWwgUFRTIGlzIGtub3duLCBvciBpZiBwbGF5bGlzdCBpcyBub3Qgc2xpZGluZyAobm90IGxpdmUpXG4gICAgICAgIHZhciBhY2N1cmF0ZVRpbWVPZmZzZXQgPSBmYWxzZTsgLy8gZGV0YWlscy5QVFNLbm93biB8fCAhZGV0YWlscy5saXZlO1xuICAgICAgICB2YXIgcGFydEluZGV4ID0gcGFydCA/IHBhcnQuaW5kZXggOiAtMTtcbiAgICAgICAgdmFyIHBhcnRpYWwgPSBwYXJ0SW5kZXggIT09IC0xO1xuICAgICAgICB2YXIgY2h1bmtNZXRhID0gbmV3IENodW5rTWV0YWRhdGEoZnJhZy5sZXZlbCwgZnJhZy5zbiwgZnJhZy5zdGF0cy5jaHVua0NvdW50LCBwYXlsb2FkLmJ5dGVMZW5ndGgsIHBhcnRJbmRleCwgcGFydGlhbCk7XG4gICAgICAgIHRyYW5zbXV4ZXIucHVzaChwYXlsb2FkLCBpbml0U2VnbWVudERhdGEsIGF1ZGlvQ29kZWMsICcnLCBmcmFnLCBwYXJ0LCBkZXRhaWxzLnRvdGFsZHVyYXRpb24sIGFjY3VyYXRlVGltZU9mZnNldCwgY2h1bmtNZXRhLCBpbml0UFRTKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubG9nKFwiVW5rbm93biB2aWRlbyBQVFMgZm9yIGNjIFwiICsgZnJhZy5jYyArIFwiLCB3YWl0aW5nIGZvciB2aWRlbyBQVFMgYmVmb3JlIGRlbXV4aW5nIGF1ZGlvIGZyYWcgXCIgKyBmcmFnLnNuICsgXCIgb2YgW1wiICsgZGV0YWlscy5zdGFydFNOICsgXCIgLFwiICsgZGV0YWlscy5lbmRTTiArIFwiXSx0cmFjayBcIiArIHRyYWNrSWQpO1xuICAgICAgICB2YXIgX3RoaXMkd2FpdGluZ0RhdGEgPSB0aGlzLndhaXRpbmdEYXRhID0gdGhpcy53YWl0aW5nRGF0YSB8fCB7XG4gICAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgICAgcGFydDogcGFydCxcbiAgICAgICAgICAgIGNhY2hlOiBuZXcgQ2h1bmtDYWNoZSgpLFxuICAgICAgICAgICAgY29tcGxldGU6IGZhbHNlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjYWNoZSA9IF90aGlzJHdhaXRpbmdEYXRhLmNhY2hlO1xuICAgICAgICBjYWNoZS5wdXNoKG5ldyBVaW50OEFycmF5KHBheWxvYWQpKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IFN0YXRlLlNUT1BQRUQpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuV0FJVElOR19JTklUX1BUUztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLl9oYW5kbGVGcmFnbWVudExvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uIF9oYW5kbGVGcmFnbWVudExvYWRDb21wbGV0ZShmcmFnTG9hZGVkRGF0YSkge1xuICAgICAgaWYgKHRoaXMud2FpdGluZ0RhdGEpIHtcbiAgICAgICAgdGhpcy53YWl0aW5nRGF0YS5jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUuX2hhbmRsZUZyYWdtZW50TG9hZENvbXBsZXRlLmNhbGwodGhpcywgZnJhZ0xvYWRlZERhdGEpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uQnVmZmVyUmVzZXQgPSBmdW5jdGlvbiBvbkJ1ZmZlclJlc2V0KC8qIGV2ZW50OiBFdmVudHMuQlVGRkVSX1JFU0VUICovXG4gICAgKSB7XG4gICAgICAvLyByZXNldCByZWZlcmVuY2UgdG8gc291cmNlYnVmZmVyc1xuICAgICAgdGhpcy5tZWRpYUJ1ZmZlciA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8ub25CdWZmZXJDcmVhdGVkID0gZnVuY3Rpb24gb25CdWZmZXJDcmVhdGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLmJ1ZmZlckZsdXNoZWQgPSB0aGlzLmZsdXNoaW5nID0gZmFsc2U7XG4gICAgICB2YXIgYXVkaW9UcmFjayA9IGRhdGEudHJhY2tzLmF1ZGlvO1xuICAgICAgaWYgKGF1ZGlvVHJhY2spIHtcbiAgICAgICAgdGhpcy5tZWRpYUJ1ZmZlciA9IGF1ZGlvVHJhY2suYnVmZmVyIHx8IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25GcmFnTG9hZGluZyA9IGZ1bmN0aW9uIG9uRnJhZ0xvYWRpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIGlmICghdGhpcy5hdWRpb09ubHkgJiYgZGF0YS5mcmFnLnR5cGUgPT09IFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU4gJiYgaXNNZWRpYUZyYWdtZW50KGRhdGEuZnJhZykpIHtcbiAgICAgICAgdGhpcy5tYWluRnJhZ0xvYWRpbmcgPSBkYXRhO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuSURMRSkge1xuICAgICAgICAgIHRoaXMudGljaygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25GcmFnQnVmZmVyZWQgPSBmdW5jdGlvbiBvbkZyYWdCdWZmZXJlZChldmVudCwgZGF0YSkge1xuICAgICAgdmFyIGZyYWcgPSBkYXRhLmZyYWcsXG4gICAgICAgIHBhcnQgPSBkYXRhLnBhcnQ7XG4gICAgICBpZiAoZnJhZy50eXBlICE9PSBQbGF5bGlzdExldmVsVHlwZS5BVURJTykge1xuICAgICAgICBpZiAoIXRoaXMuYXVkaW9Pbmx5ICYmIGZyYWcudHlwZSA9PT0gUGxheWxpc3RMZXZlbFR5cGUuTUFJTiAmJiAhZnJhZy5lbGVtZW50YXJ5U3RyZWFtcy52aWRlbyAmJiAhZnJhZy5lbGVtZW50YXJ5U3RyZWFtcy5hdWRpb3ZpZGVvKSB7XG4gICAgICAgICAgdGhpcy5hdWRpb09ubHkgPSB0cnVlO1xuICAgICAgICAgIHRoaXMubWFpbkZyYWdMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5mcmFnQ29udGV4dENoYW5nZWQoZnJhZykpIHtcbiAgICAgICAgLy8gSWYgYSBsZXZlbCBzd2l0Y2ggd2FzIHJlcXVlc3RlZCB3aGlsZSBhIGZyYWdtZW50IHdhcyBidWZmZXJpbmcsIGl0IHdpbGwgZW1pdCB0aGUgRlJBR19CVUZGRVJFRCBldmVudCB1cG9uIGNvbXBsZXRpb25cbiAgICAgICAgLy8gQXZvaWQgc2V0dGluZyBzdGF0ZSBiYWNrIHRvIElETEUgb3IgY29uY2x1ZGluZyB0aGUgYXVkaW8gc3dpdGNoOyBvdGhlcndpc2UsIHRoZSBzd2l0Y2hlZC10byB0cmFjayB3aWxsIG5vdCBidWZmZXJcbiAgICAgICAgdGhpcy53YXJuKFwiRnJhZ21lbnQgXCIgKyBmcmFnLnNuICsgKHBhcnQgPyAnIHA6ICcgKyBwYXJ0LmluZGV4IDogJycpICsgXCIgb2YgbGV2ZWwgXCIgKyBmcmFnLmxldmVsICsgXCIgZmluaXNoZWQgYnVmZmVyaW5nLCBidXQgd2FzIGFib3J0ZWQuIHN0YXRlOiBcIiArIHRoaXMuc3RhdGUgKyBcIiwgYXVkaW9Td2l0Y2g6IFwiICsgKHRoaXMuc3dpdGNoaW5nVHJhY2sgPyB0aGlzLnN3aXRjaGluZ1RyYWNrLm5hbWUgOiAnZmFsc2UnKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc01lZGlhRnJhZ21lbnQoZnJhZykpIHtcbiAgICAgICAgdGhpcy5mcmFnUHJldmlvdXMgPSBmcmFnO1xuICAgICAgICB2YXIgdHJhY2sgPSB0aGlzLnN3aXRjaGluZ1RyYWNrO1xuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICB0aGlzLmJ1ZmZlcmVkVHJhY2sgPSB0cmFjaztcbiAgICAgICAgICB0aGlzLnN3aXRjaGluZ1RyYWNrID0gbnVsbDtcbiAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5BVURJT19UUkFDS19TV0lUQ0hFRCwgX29iamVjdFNwcmVhZDIoe30sIHRyYWNrKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuZnJhZ0J1ZmZlcmVkQ29tcGxldGUoZnJhZywgcGFydCk7XG4gICAgICBpZiAodGhpcy5tZWRpYSkge1xuICAgICAgICB0aGlzLnRpY2soKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvcihldmVudCwgZGF0YSkge1xuICAgICAgdmFyIF9kYXRhJGNvbnRleHQ7XG4gICAgICBpZiAoZGF0YS5mYXRhbCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRVJST1I7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoZGF0YS5kZXRhaWxzKSB7XG4gICAgICAgIGNhc2UgRXJyb3JEZXRhaWxzLkZSQUdfR0FQOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5GUkFHX1BBUlNJTkdfRVJST1I6XG4gICAgICAgIGNhc2UgRXJyb3JEZXRhaWxzLkZSQUdfREVDUllQVF9FUlJPUjpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuRlJBR19MT0FEX0VSUk9SOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5GUkFHX0xPQURfVElNRU9VVDpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuS0VZX0xPQURfRVJST1I6XG4gICAgICAgIGNhc2UgRXJyb3JEZXRhaWxzLktFWV9MT0FEX1RJTUVPVVQ6XG4gICAgICAgICAgdGhpcy5vbkZyYWdtZW50T3JLZXlMb2FkRXJyb3IoUGxheWxpc3RMZXZlbFR5cGUuQVVESU8sIGRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5BVURJT19UUkFDS19MT0FEX0VSUk9SOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5BVURJT19UUkFDS19MT0FEX1RJTUVPVVQ6XG4gICAgICAgIGNhc2UgRXJyb3JEZXRhaWxzLkxFVkVMX1BBUlNJTkdfRVJST1I6XG4gICAgICAgICAgLy8gaW4gY2FzZSBvZiBub24gZmF0YWwgZXJyb3Igd2hpbGUgbG9hZGluZyB0cmFjaywgaWYgbm90IHJldHJ5aW5nIHRvIGxvYWQgdHJhY2ssIHN3aXRjaCBiYWNrIHRvIElETEVcbiAgICAgICAgICBpZiAoIWRhdGEubGV2ZWxSZXRyeSAmJiB0aGlzLnN0YXRlID09PSBTdGF0ZS5XQUlUSU5HX1RSQUNLICYmICgoX2RhdGEkY29udGV4dCA9IGRhdGEuY29udGV4dCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhJGNvbnRleHQudHlwZSkgPT09IFBsYXlsaXN0Q29udGV4dFR5cGUuQVVESU9fVFJBQ0spIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuQlVGRkVSX0FERF9DT0RFQ19FUlJPUjpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuQlVGRkVSX0FQUEVORF9FUlJPUjpcbiAgICAgICAgICBpZiAoZGF0YS5wYXJlbnQgIT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5yZXNldExvYWRpbmdTdGF0ZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5CVUZGRVJfRlVMTF9FUlJPUjpcbiAgICAgICAgICBpZiAoZGF0YS5wYXJlbnQgIT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMucmVkdWNlTGVuZ3RoQW5kRmx1c2hCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyZWRUcmFjayA9IG51bGw7XG4gICAgICAgICAgICBfQmFzZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLmZsdXNoTWFpbkJ1ZmZlci5jYWxsKHRoaXMsIDAsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgJ2F1ZGlvJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5JTlRFUk5BTF9FWENFUFRJT046XG4gICAgICAgICAgdGhpcy5yZWNvdmVyV29ya2VyRXJyb3IoZGF0YSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25CdWZmZXJGbHVzaGluZyA9IGZ1bmN0aW9uIG9uQnVmZmVyRmx1c2hpbmcoZXZlbnQsIF9yZWYzKSB7XG4gICAgICB2YXIgdHlwZSA9IF9yZWYzLnR5cGU7XG4gICAgICBpZiAodHlwZSAhPT0gRWxlbWVudGFyeVN0cmVhbVR5cGVzLlZJREVPKSB7XG4gICAgICAgIHRoaXMuZmx1c2hpbmcgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uQnVmZmVyRmx1c2hlZCA9IGZ1bmN0aW9uIG9uQnVmZmVyRmx1c2hlZChldmVudCwgX3JlZjQpIHtcbiAgICAgIHZhciB0eXBlID0gX3JlZjQudHlwZTtcbiAgICAgIGlmICh0eXBlICE9PSBFbGVtZW50YXJ5U3RyZWFtVHlwZXMuVklERU8pIHtcbiAgICAgICAgdGhpcy5mbHVzaGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlckZsdXNoZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuRU5ERUQpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWVkaWFCdWZmZXIgPSB0aGlzLm1lZGlhQnVmZmVyIHx8IHRoaXMubWVkaWE7XG4gICAgICAgIGlmIChtZWRpYUJ1ZmZlcikge1xuICAgICAgICAgIHRoaXMuYWZ0ZXJCdWZmZXJGbHVzaGVkKG1lZGlhQnVmZmVyLCB0eXBlLCBQbGF5bGlzdExldmVsVHlwZS5BVURJTyk7XG4gICAgICAgICAgdGhpcy50aWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5faGFuZGxlVHJhbnNtdXhDb21wbGV0ZSA9IGZ1bmN0aW9uIF9oYW5kbGVUcmFuc211eENvbXBsZXRlKHRyYW5zbXV4UmVzdWx0KSB7XG4gICAgICB2YXIgX2lkMyRzYW1wbGVzO1xuICAgICAgdmFyIGlkID0gJ2F1ZGlvJztcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIHZhciByZW11eFJlc3VsdCA9IHRyYW5zbXV4UmVzdWx0LnJlbXV4UmVzdWx0LFxuICAgICAgICBjaHVua01ldGEgPSB0cmFuc211eFJlc3VsdC5jaHVua01ldGE7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMuZ2V0Q3VycmVudENvbnRleHQoY2h1bmtNZXRhKTtcbiAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICB0aGlzLnJlc2V0V2hlbk1pc3NpbmdDb250ZXh0KGNodW5rTWV0YSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBmcmFnID0gY29udGV4dC5mcmFnLFxuICAgICAgICBwYXJ0ID0gY29udGV4dC5wYXJ0LFxuICAgICAgICBsZXZlbCA9IGNvbnRleHQubGV2ZWw7XG4gICAgICB2YXIgZGV0YWlscyA9IGxldmVsLmRldGFpbHM7XG4gICAgICB2YXIgYXVkaW8gPSByZW11eFJlc3VsdC5hdWRpbyxcbiAgICAgICAgdGV4dCA9IHJlbXV4UmVzdWx0LnRleHQsXG4gICAgICAgIGlkMyA9IHJlbXV4UmVzdWx0LmlkMyxcbiAgICAgICAgaW5pdFNlZ21lbnQgPSByZW11eFJlc3VsdC5pbml0U2VnbWVudDtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgZnJhZ21lbnQgaGFzIGJlZW4gYWJvcnRlZC4gV2UgY2hlY2sgdGhpcyBieSBmaXJzdCBzZWVpbmcgaWYgd2UncmUgc3RpbGwgcGxheWluZyB0aGUgY3VycmVudCBsZXZlbC5cbiAgICAgIC8vIElmIHdlIGFyZSwgc3Vic2VxdWVudGx5IGNoZWNrIGlmIHRoZSBjdXJyZW50bHkgbG9hZGluZyBmcmFnbWVudCAoZnJhZ0N1cnJlbnQpIGhhcyBjaGFuZ2VkLlxuICAgICAgaWYgKHRoaXMuZnJhZ0NvbnRleHRDaGFuZ2VkKGZyYWcpIHx8ICFkZXRhaWxzKSB7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLnJlbW92ZUZyYWdtZW50KGZyYWcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnN0YXRlID0gU3RhdGUuUEFSU0lORztcbiAgICAgIGlmICh0aGlzLnN3aXRjaGluZ1RyYWNrICYmIGF1ZGlvKSB7XG4gICAgICAgIHRoaXMuY29tcGxldGVBdWRpb1N3aXRjaCh0aGlzLnN3aXRjaGluZ1RyYWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbml0U2VnbWVudCAhPSBudWxsICYmIGluaXRTZWdtZW50LnRyYWNrcykge1xuICAgICAgICB2YXIgbWFwRnJhZ21lbnQgPSBmcmFnLmluaXRTZWdtZW50IHx8IGZyYWc7XG4gICAgICAgIHRoaXMuX2J1ZmZlckluaXRTZWdtZW50KGxldmVsLCBpbml0U2VnbWVudC50cmFja3MsIG1hcEZyYWdtZW50LCBjaHVua01ldGEpO1xuICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuRlJBR19QQVJTSU5HX0lOSVRfU0VHTUVOVCwge1xuICAgICAgICAgIGZyYWc6IG1hcEZyYWdtZW50LFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICB0cmFja3M6IGluaXRTZWdtZW50LnRyYWNrc1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gT25seSBmbHVzaCBhdWRpbyBmcm9tIG9sZCBhdWRpbyB0cmFja3Mgd2hlbiBQVFMgaXMga25vd24gb24gbmV3IGF1ZGlvIHRyYWNrXG4gICAgICB9XG4gICAgICBpZiAoYXVkaW8pIHtcbiAgICAgICAgdmFyIHN0YXJ0UFRTID0gYXVkaW8uc3RhcnRQVFMsXG4gICAgICAgICAgZW5kUFRTID0gYXVkaW8uZW5kUFRTLFxuICAgICAgICAgIHN0YXJ0RFRTID0gYXVkaW8uc3RhcnREVFMsXG4gICAgICAgICAgZW5kRFRTID0gYXVkaW8uZW5kRFRTO1xuICAgICAgICBpZiAocGFydCkge1xuICAgICAgICAgIHBhcnQuZWxlbWVudGFyeVN0cmVhbXNbRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPXSA9IHtcbiAgICAgICAgICAgIHN0YXJ0UFRTOiBzdGFydFBUUyxcbiAgICAgICAgICAgIGVuZFBUUzogZW5kUFRTLFxuICAgICAgICAgICAgc3RhcnREVFM6IHN0YXJ0RFRTLFxuICAgICAgICAgICAgZW5kRFRTOiBlbmREVFNcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZyYWcuc2V0RWxlbWVudGFyeVN0cmVhbUluZm8oRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPLCBzdGFydFBUUywgZW5kUFRTLCBzdGFydERUUywgZW5kRFRTKTtcbiAgICAgICAgdGhpcy5idWZmZXJGcmFnbWVudERhdGEoYXVkaW8sIGZyYWcsIHBhcnQsIGNodW5rTWV0YSk7XG4gICAgICB9XG4gICAgICBpZiAoaWQzICE9IG51bGwgJiYgKF9pZDMkc2FtcGxlcyA9IGlkMy5zYW1wbGVzKSAhPSBudWxsICYmIF9pZDMkc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGVtaXR0ZWRJRDMgPSBfZXh0ZW5kcyh7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgZGV0YWlsczogZGV0YWlsc1xuICAgICAgICB9LCBpZDMpO1xuICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuRlJBR19QQVJTSU5HX01FVEFEQVRBLCBlbWl0dGVkSUQzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIHZhciBlbWl0dGVkVGV4dCA9IF9leHRlbmRzKHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICBkZXRhaWxzOiBkZXRhaWxzXG4gICAgICAgIH0sIHRleHQpO1xuICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuRlJBR19QQVJTSU5HX1VTRVJEQVRBLCBlbWl0dGVkVGV4dCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uX2J1ZmZlckluaXRTZWdtZW50ID0gZnVuY3Rpb24gX2J1ZmZlckluaXRTZWdtZW50KGN1cnJlbnRMZXZlbCwgdHJhY2tzLCBmcmFnLCBjaHVua01ldGEpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBTdGF0ZS5QQVJTSU5HKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGRlbGV0ZSBhbnkgdmlkZW8gdHJhY2sgZm91bmQgb24gYXVkaW8gdHJhbnNtdXhlclxuICAgICAgaWYgKHRyYWNrcy52aWRlbykge1xuICAgICAgICBkZWxldGUgdHJhY2tzLnZpZGVvO1xuICAgICAgfVxuICAgICAgaWYgKHRyYWNrcy5hdWRpb3ZpZGVvKSB7XG4gICAgICAgIGRlbGV0ZSB0cmFja3MuYXVkaW92aWRlbztcbiAgICAgIH1cblxuICAgICAgLy8gaW5jbHVkZSBsZXZlbENvZGVjIGluIGF1ZGlvIGFuZCB2aWRlbyB0cmFja3NcbiAgICAgIGlmICghdHJhY2tzLmF1ZGlvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0cmFjayA9IHRyYWNrcy5hdWRpbztcbiAgICAgIHRyYWNrLmlkID0gUGxheWxpc3RMZXZlbFR5cGUuQVVESU87XG4gICAgICB2YXIgdmFyaWFudEF1ZGlvQ29kZWNzID0gY3VycmVudExldmVsLmF1ZGlvQ29kZWM7XG4gICAgICB0aGlzLmxvZyhcIkluaXQgYXVkaW8gYnVmZmVyLCBjb250YWluZXI6XCIgKyB0cmFjay5jb250YWluZXIgKyBcIiwgY29kZWNzW2xldmVsL3BhcnNlZF09W1wiICsgdmFyaWFudEF1ZGlvQ29kZWNzICsgXCIvXCIgKyB0cmFjay5jb2RlYyArIFwiXVwiKTtcbiAgICAgIC8vIFNvdXJjZUJ1ZmZlciB3aWxsIHVzZSB0cmFjay5sZXZlbENvZGVjIGlmIGRlZmluZWRcbiAgICAgIGlmICh2YXJpYW50QXVkaW9Db2RlY3MgJiYgdmFyaWFudEF1ZGlvQ29kZWNzLnNwbGl0KCcsJykubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRyYWNrLmxldmVsQ29kZWMgPSB2YXJpYW50QXVkaW9Db2RlY3M7XG4gICAgICB9XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5CVUZGRVJfQ09ERUNTLCB0cmFja3MpO1xuICAgICAgdmFyIGluaXRTZWdtZW50ID0gdHJhY2suaW5pdFNlZ21lbnQ7XG4gICAgICBpZiAoaW5pdFNlZ21lbnQgIT0gbnVsbCAmJiBpbml0U2VnbWVudC5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIHZhciBzZWdtZW50ID0ge1xuICAgICAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICBwYXJ0OiBudWxsLFxuICAgICAgICAgIGNodW5rTWV0YTogY2h1bmtNZXRhLFxuICAgICAgICAgIHBhcmVudDogZnJhZy50eXBlLFxuICAgICAgICAgIGRhdGE6IGluaXRTZWdtZW50XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkJVRkZFUl9BUFBFTkRJTkcsIHNlZ21lbnQpO1xuICAgICAgfVxuICAgICAgLy8gdHJpZ2dlciBoYW5kbGVyIHJpZ2h0IG5vd1xuICAgICAgdGhpcy50aWNrSW1tZWRpYXRlKCk7XG4gICAgfTtcbiAgICBfcHJvdG8ubG9hZEZyYWdtZW50ID0gZnVuY3Rpb24gbG9hZEZyYWdtZW50KGZyYWcsIHRyYWNrLCB0YXJnZXRCdWZmZXJUaW1lKSB7XG4gICAgICAvLyBvbmx5IGxvYWQgaWYgZnJhZ21lbnQgaXMgbm90IGxvYWRlZCBvciBpZiBpbiBhdWRpbyBzd2l0Y2hcbiAgICAgIHZhciBmcmFnU3RhdGUgPSB0aGlzLmZyYWdtZW50VHJhY2tlci5nZXRTdGF0ZShmcmFnKTtcblxuICAgICAgLy8gd2UgZm9yY2UgYSBmcmFnIGxvYWRpbmcgaW4gYXVkaW8gc3dpdGNoIGFzIGZyYWdtZW50IHRyYWNrZXIgbWlnaHQgbm90IGhhdmUgZXZpY3RlZCBwcmV2aW91cyBmcmFncyBpbiBjYXNlIG9mIHF1aWNrIGF1ZGlvIHN3aXRjaFxuICAgICAgaWYgKHRoaXMuc3dpdGNoaW5nVHJhY2sgfHwgZnJhZ1N0YXRlID09PSBGcmFnbWVudFN0YXRlLk5PVF9MT0FERUQgfHwgZnJhZ1N0YXRlID09PSBGcmFnbWVudFN0YXRlLlBBUlRJQUwpIHtcbiAgICAgICAgdmFyIF90cmFjayRkZXRhaWxzO1xuICAgICAgICBpZiAoIWlzTWVkaWFGcmFnbWVudChmcmFnKSkge1xuICAgICAgICAgIHRoaXMuX2xvYWRJbml0U2VnbWVudChmcmFnLCB0cmFjayk7XG4gICAgICAgIH0gZWxzZSBpZiAoKF90cmFjayRkZXRhaWxzID0gdHJhY2suZGV0YWlscykgIT0gbnVsbCAmJiBfdHJhY2skZGV0YWlscy5saXZlICYmICF0aGlzLmluaXRQVFNbZnJhZy5jY10pIHtcbiAgICAgICAgICB0aGlzLmxvZyhcIldhaXRpbmcgZm9yIHZpZGVvIFBUUyBpbiBjb250aW51aXR5IGNvdW50ZXIgXCIgKyBmcmFnLmNjICsgXCIgb2YgbGl2ZSBzdHJlYW0gYmVmb3JlIGxvYWRpbmcgYXVkaW8gZnJhZ21lbnQgXCIgKyBmcmFnLnNuICsgXCIgb2YgbGV2ZWwgXCIgKyB0aGlzLnRyYWNrSWQpO1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5XQUlUSU5HX0lOSVRfUFRTO1xuICAgICAgICAgIHZhciBtYWluRGV0YWlscyA9IHRoaXMubWFpbkRldGFpbHM7XG4gICAgICAgICAgaWYgKG1haW5EZXRhaWxzICYmIG1haW5EZXRhaWxzLmZyYWdtZW50U3RhcnQgIT09IHRyYWNrLmRldGFpbHMuZnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgICAgYWxpZ25NZWRpYVBsYXlsaXN0QnlQRFQodHJhY2suZGV0YWlscywgbWFpbkRldGFpbHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfQmFzZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLmxvYWRGcmFnbWVudC5jYWxsKHRoaXMsIGZyYWcsIHRyYWNrLCB0YXJnZXRCdWZmZXJUaW1lKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jbGVhclRyYWNrZXJJZk5lZWRlZChmcmFnKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5mbHVzaEF1ZGlvSWZOZWVkZWQgPSBmdW5jdGlvbiBmbHVzaEF1ZGlvSWZOZWVkZWQoc3dpdGNoaW5nVHJhY2spIHtcbiAgICAgIGlmICh0aGlzLm1lZGlhICYmIHRoaXMuYnVmZmVyZWRUcmFjaykge1xuICAgICAgICB2YXIgX3RoaXMkYnVmZmVyZWRUcmFjayA9IHRoaXMuYnVmZmVyZWRUcmFjayxcbiAgICAgICAgICBuYW1lID0gX3RoaXMkYnVmZmVyZWRUcmFjay5uYW1lLFxuICAgICAgICAgIGxhbmcgPSBfdGhpcyRidWZmZXJlZFRyYWNrLmxhbmcsXG4gICAgICAgICAgYXNzb2NMYW5nID0gX3RoaXMkYnVmZmVyZWRUcmFjay5hc3NvY0xhbmcsXG4gICAgICAgICAgY2hhcmFjdGVyaXN0aWNzID0gX3RoaXMkYnVmZmVyZWRUcmFjay5jaGFyYWN0ZXJpc3RpY3MsXG4gICAgICAgICAgYXVkaW9Db2RlYyA9IF90aGlzJGJ1ZmZlcmVkVHJhY2suYXVkaW9Db2RlYyxcbiAgICAgICAgICBjaGFubmVscyA9IF90aGlzJGJ1ZmZlcmVkVHJhY2suY2hhbm5lbHM7XG4gICAgICAgIGlmICghbWF0Y2hlc09wdGlvbih7XG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICBsYW5nOiBsYW5nLFxuICAgICAgICAgIGFzc29jTGFuZzogYXNzb2NMYW5nLFxuICAgICAgICAgIGNoYXJhY3RlcmlzdGljczogY2hhcmFjdGVyaXN0aWNzLFxuICAgICAgICAgIGF1ZGlvQ29kZWM6IGF1ZGlvQ29kZWMsXG4gICAgICAgICAgY2hhbm5lbHM6IGNoYW5uZWxzXG4gICAgICAgIH0sIHN3aXRjaGluZ1RyYWNrLCBhdWRpb01hdGNoUHJlZGljYXRlKSkge1xuICAgICAgICAgIGlmICh1c2VBbHRlcm5hdGVBdWRpbyhzd2l0Y2hpbmdUcmFjay51cmwsIHRoaXMuaGxzKSkge1xuICAgICAgICAgICAgdGhpcy5sb2coJ1N3aXRjaGluZyBhdWRpbyB0cmFjayA6IGZsdXNoaW5nIGFsbCBhdWRpbycpO1xuICAgICAgICAgICAgX0Jhc2VTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5mbHVzaE1haW5CdWZmZXIuY2FsbCh0aGlzLCAwLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksICdhdWRpbycpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJlZFRyYWNrID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTWFpbiBpcyBiZWluZyBidWZmZXJlZC4gU2V0IGJ1ZmZlcmVkVHJhY2sgc28gdGhhdCBpdCBpcyBmbHVzaGVkIHdoZW4gc3dpdGNoaW5nIGJhY2sgdG8gYWx0LWF1ZGlvXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcmVkVHJhY2sgPSBzd2l0Y2hpbmdUcmFjaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5jb21wbGV0ZUF1ZGlvU3dpdGNoID0gZnVuY3Rpb24gY29tcGxldGVBdWRpb1N3aXRjaChzd2l0Y2hpbmdUcmFjaykge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgdGhpcy5mbHVzaEF1ZGlvSWZOZWVkZWQoc3dpdGNoaW5nVHJhY2spO1xuICAgICAgdGhpcy5idWZmZXJlZFRyYWNrID0gc3dpdGNoaW5nVHJhY2s7XG4gICAgICB0aGlzLnN3aXRjaGluZ1RyYWNrID0gbnVsbDtcbiAgICAgIGhscy50cmlnZ2VyKEV2ZW50cy5BVURJT19UUkFDS19TV0lUQ0hFRCwgX29iamVjdFNwcmVhZDIoe30sIHN3aXRjaGluZ1RyYWNrKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQXVkaW9TdHJlYW1Db250cm9sbGVyO1xuICB9KEJhc2VTdHJlYW1Db250cm9sbGVyKTtcblxuICB2YXIgQmFzZVBsYXlsaXN0Q29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0xvZ2dlcikge1xuICAgIGZ1bmN0aW9uIEJhc2VQbGF5bGlzdENvbnRyb2xsZXIoaGxzLCBsb2dQcmVmaXgpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF90aGlzID0gX0xvZ2dlci5jYWxsKHRoaXMsIGxvZ1ByZWZpeCwgaGxzLmxvZ2dlcikgfHwgdGhpcztcbiAgICAgIF90aGlzLmhscyA9IHZvaWQgMDtcbiAgICAgIF90aGlzLmNhbkxvYWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLnRpbWVyID0gLTE7XG4gICAgICBfdGhpcy5obHMgPSBobHM7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIF9pbmhlcml0c0xvb3NlKEJhc2VQbGF5bGlzdENvbnRyb2xsZXIsIF9Mb2dnZXIpO1xuICAgIHZhciBfcHJvdG8gPSBCYXNlUGxheWxpc3RDb250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMuaGxzID0gdGhpcy5sb2cgPSB0aGlzLndhcm4gPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLmNsZWFyVGltZXIgPSBmdW5jdGlvbiBjbGVhclRpbWVyKCkge1xuICAgICAgaWYgKHRoaXMudGltZXIgIT09IC0xKSB7XG4gICAgICAgIHNlbGYuY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgICAgICB0aGlzLnRpbWVyID0gLTE7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uc3RhcnRMb2FkID0gZnVuY3Rpb24gc3RhcnRMb2FkKCkge1xuICAgICAgdGhpcy5jYW5Mb2FkID0gdHJ1ZTtcbiAgICAgIHRoaXMubG9hZFBsYXlsaXN0KCk7XG4gICAgfTtcbiAgICBfcHJvdG8uc3RvcExvYWQgPSBmdW5jdGlvbiBzdG9wTG9hZCgpIHtcbiAgICAgIHRoaXMuY2FuTG9hZCA9IGZhbHNlO1xuICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XG4gICAgfTtcbiAgICBfcHJvdG8uc3dpdGNoUGFyYW1zID0gZnVuY3Rpb24gc3dpdGNoUGFyYW1zKHBsYXlsaXN0VXJpLCBwcmV2aW91cywgY3VycmVudCkge1xuICAgICAgdmFyIHJlbmRpdGlvblJlcG9ydHMgPSBwcmV2aW91cyA9PSBudWxsID8gdm9pZCAwIDogcHJldmlvdXMucmVuZGl0aW9uUmVwb3J0cztcbiAgICAgIGlmIChyZW5kaXRpb25SZXBvcnRzKSB7XG4gICAgICAgIHZhciBmb3VuZEluZGV4ID0gLTE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVuZGl0aW9uUmVwb3J0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBhdHRyID0gcmVuZGl0aW9uUmVwb3J0c1tpXTtcbiAgICAgICAgICB2YXIgdXJpID0gdm9pZCAwO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1cmkgPSBuZXcgc2VsZi5VUkwoYXR0ci5VUkksIHByZXZpb3VzLnVybCkuaHJlZjtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy53YXJuKFwiQ291bGQgbm90IGNvbnN0cnVjdCBuZXcgVVJMIGZvciBSZW5kaXRpb24gUmVwb3J0OiBcIiArIGVycm9yKTtcbiAgICAgICAgICAgIHVyaSA9IGF0dHIuVVJJIHx8ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBVc2UgZXhhY3QgbWF0Y2guIE90aGVyd2lzZSwgdGhlIGxhc3QgcGFydGlhbCBtYXRjaCwgaWYgYW55LCB3aWxsIGJlIHVzZWRcbiAgICAgICAgICAvLyAoUGxheWxpc3QgVVJJIGluY2x1ZGVzIGEgcXVlcnkgc3RyaW5nIHRoYXQgdGhlIFJlbmRpdGlvbiBSZXBvcnQgZG9lcyBub3QpXG4gICAgICAgICAgaWYgKHVyaSA9PT0gcGxheWxpc3RVcmkpIHtcbiAgICAgICAgICAgIGZvdW5kSW5kZXggPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmICh1cmkgPT09IHBsYXlsaXN0VXJpLnN1YnN0cmluZygwLCB1cmkubGVuZ3RoKSkge1xuICAgICAgICAgICAgZm91bmRJbmRleCA9IGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHZhciBfYXR0ciA9IHJlbmRpdGlvblJlcG9ydHNbZm91bmRJbmRleF07XG4gICAgICAgICAgdmFyIG1zbiA9IHBhcnNlSW50KF9hdHRyWydMQVNULU1TTiddKSB8fCAocHJldmlvdXMgPT0gbnVsbCA/IHZvaWQgMCA6IHByZXZpb3VzLmxhc3RQYXJ0U24pO1xuICAgICAgICAgIHZhciBwYXJ0ID0gcGFyc2VJbnQoX2F0dHJbJ0xBU1QtUEFSVCddKSB8fCAocHJldmlvdXMgPT0gbnVsbCA/IHZvaWQgMCA6IHByZXZpb3VzLmxhc3RQYXJ0SW5kZXgpO1xuICAgICAgICAgIGlmICh0aGlzLmhscy5jb25maWcubG93TGF0ZW5jeU1vZGUpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50R29hbCA9IE1hdGgubWluKHByZXZpb3VzLmFnZSAtIHByZXZpb3VzLnBhcnRUYXJnZXQsIHByZXZpb3VzLnRhcmdldGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGlmIChwYXJ0ID49IDAgJiYgY3VycmVudEdvYWwgPiBwcmV2aW91cy5wYXJ0VGFyZ2V0KSB7XG4gICAgICAgICAgICAgIHBhcnQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNraXAgPSBjdXJyZW50ICYmIGdldFNraXBWYWx1ZShjdXJyZW50KTtcbiAgICAgICAgICByZXR1cm4gbmV3IEhsc1VybFBhcmFtZXRlcnMobXNuLCBwYXJ0ID49IDAgPyBwYXJ0IDogdW5kZWZpbmVkLCBza2lwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmxvYWRQbGF5bGlzdCA9IGZ1bmN0aW9uIGxvYWRQbGF5bGlzdChobHNVcmxQYXJhbWV0ZXJzKSB7XG4gICAgICAvLyBMb2FkaW5nIGlzIGhhbmRsZWQgYnkgdGhlIHN1YmNsYXNzZXNcbiAgICAgIHRoaXMuY2xlYXJUaW1lcigpO1xuICAgIH07XG4gICAgX3Byb3RvLmxvYWRpbmdQbGF5bGlzdCA9IGZ1bmN0aW9uIGxvYWRpbmdQbGF5bGlzdChwbGF5bGlzdCwgaGxzVXJsUGFyYW1ldGVycykge1xuICAgICAgLy8gTG9hZGluZyBpcyBoYW5kbGVkIGJ5IHRoZSBzdWJjbGFzc2VzXG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICB9O1xuICAgIF9wcm90by5zaG91bGRMb2FkUGxheWxpc3QgPSBmdW5jdGlvbiBzaG91bGRMb2FkUGxheWxpc3QocGxheWxpc3QpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbkxvYWQgJiYgISFwbGF5bGlzdCAmJiAhIXBsYXlsaXN0LnVybCAmJiAoIXBsYXlsaXN0LmRldGFpbHMgfHwgcGxheWxpc3QuZGV0YWlscy5saXZlKTtcbiAgICB9O1xuICAgIF9wcm90by5nZXRVcmxXaXRoRGlyZWN0aXZlcyA9IGZ1bmN0aW9uIGdldFVybFdpdGhEaXJlY3RpdmVzKHVyaSwgaGxzVXJsUGFyYW1ldGVycykge1xuICAgICAgaWYgKGhsc1VybFBhcmFtZXRlcnMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gaGxzVXJsUGFyYW1ldGVycy5hZGREaXJlY3RpdmVzKHVyaSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgdGhpcy53YXJuKFwiQ291bGQgbm90IGNvbnN0cnVjdCBuZXcgVVJMIHdpdGggSExTIERlbGl2ZXJ5IERpcmVjdGl2ZXM6IFwiICsgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJpO1xuICAgIH07XG4gICAgX3Byb3RvLnBsYXlsaXN0TG9hZGVkID0gZnVuY3Rpb24gcGxheWxpc3RMb2FkZWQoaW5kZXgsIGRhdGEsIHByZXZpb3VzRGV0YWlscykge1xuICAgICAgdmFyIGRldGFpbHMgPSBkYXRhLmRldGFpbHMsXG4gICAgICAgIHN0YXRzID0gZGF0YS5zdGF0cztcblxuICAgICAgLy8gU2V0IGxhc3QgdXBkYXRlZCBkYXRlLXRpbWVcbiAgICAgIHZhciBub3cgPSBzZWxmLnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgdmFyIGVsYXBzZWQgPSBzdGF0cy5sb2FkaW5nLmZpcnN0ID8gTWF0aC5tYXgoMCwgbm93IC0gc3RhdHMubG9hZGluZy5maXJzdCkgOiAwO1xuICAgICAgZGV0YWlscy5hZHZhbmNlZERhdGVUaW1lID0gRGF0ZS5ub3coKSAtIGVsYXBzZWQ7XG5cbiAgICAgIC8vIHNoaWZ0IGZyYWdtZW50IHN0YXJ0cyB3aXRoIHRpbWVsaW5lT2Zmc2V0XG4gICAgICB2YXIgdGltZWxpbmVPZmZzZXQgPSB0aGlzLmhscy5jb25maWcudGltZWxpbmVPZmZzZXQ7XG4gICAgICBpZiAodGltZWxpbmVPZmZzZXQgIT09IGRldGFpbHMuYXBwbGllZFRpbWVsaW5lT2Zmc2V0KSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBNYXRoLm1heCh0aW1lbGluZU9mZnNldCB8fCAwLCAwKTtcbiAgICAgICAgZGV0YWlscy5hcHBsaWVkVGltZWxpbmVPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIGRldGFpbHMuZnJhZ21lbnRzLmZvckVhY2goZnVuY3Rpb24gKGZyYWcpIHtcbiAgICAgICAgICBmcmFnLnN0YXJ0ID0gZnJhZy5wbGF5bGlzdE9mZnNldCArIG9mZnNldDtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGN1cnJlbnQgcGxheWxpc3QgaXMgYSBsaXZlIHBsYXlsaXN0LCBhcm0gYSB0aW1lciB0byByZWxvYWQgaXRcbiAgICAgIGlmIChkZXRhaWxzLmxpdmUgfHwgcHJldmlvdXNEZXRhaWxzICE9IG51bGwgJiYgcHJldmlvdXNEZXRhaWxzLmxpdmUpIHtcbiAgICAgICAgdmFyIGxldmVsT3JUcmFjayA9ICdsZXZlbEluZm8nIGluIGRhdGEgPyBkYXRhLmxldmVsSW5mbyA6IGRhdGEudHJhY2s7XG4gICAgICAgIGRldGFpbHMucmVsb2FkZWQocHJldmlvdXNEZXRhaWxzKTtcbiAgICAgICAgLy8gTWVyZ2UgbGl2ZSBwbGF5bGlzdHMgdG8gYWRqdXN0IGZyYWdtZW50IHN0YXJ0cyBhbmQgZmlsbCBpbiBkZWx0YSBwbGF5bGlzdCBza2lwcGVkIHNlZ21lbnRzXG4gICAgICAgIGlmIChwcmV2aW91c0RldGFpbHMgJiYgZGV0YWlscy5mcmFnbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIG1lcmdlRGV0YWlscyhwcmV2aW91c0RldGFpbHMsIGRldGFpbHMpO1xuICAgICAgICAgIHZhciBlcnJvciA9IGRldGFpbHMucGxheWxpc3RQYXJzaW5nRXJyb3I7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLndhcm4oZXJyb3IpO1xuICAgICAgICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgICAgICAgaWYgKCFobHMuY29uZmlnLmlnbm9yZVBsYXlsaXN0UGFyc2luZ0Vycm9ycykge1xuICAgICAgICAgICAgICB2YXIgX2RldGFpbHMkZnJhZ21lbnRzJDtcbiAgICAgICAgICAgICAgdmFyIG5ldHdvcmtEZXRhaWxzID0gZGF0YS5uZXR3b3JrRGV0YWlscztcbiAgICAgICAgICAgICAgaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5ORVRXT1JLX0VSUk9SLFxuICAgICAgICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5MRVZFTF9QQVJTSU5HX0VSUk9SLFxuICAgICAgICAgICAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1cmw6IGRldGFpbHMudXJsLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICByZWFzb246IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgbGV2ZWw6IGRhdGEubGV2ZWwgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHBhcmVudDogKF9kZXRhaWxzJGZyYWdtZW50cyQgPSBkZXRhaWxzLmZyYWdtZW50c1swXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kZXRhaWxzJGZyYWdtZW50cyQudHlwZSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHMsXG4gICAgICAgICAgICAgICAgc3RhdHM6IHN0YXRzXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXRhaWxzLnBsYXlsaXN0UGFyc2luZ0Vycm9yID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRldGFpbHMucmVxdWVzdFNjaGVkdWxlZCA9PT0gLTEpIHtcbiAgICAgICAgICBkZXRhaWxzLnJlcXVlc3RTY2hlZHVsZWQgPSBzdGF0cy5sb2FkaW5nLnN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBidWZmZXJJbmZvID0gdGhpcy5obHMubWFpbkZvcndhcmRCdWZmZXJJbmZvO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBidWZmZXJJbmZvID8gYnVmZmVySW5mby5lbmQgLSBidWZmZXJJbmZvLmxlbiA6IDA7XG4gICAgICAgIHZhciBkaXN0YW5jZVRvTGl2ZUVkZ2VNcyA9IChkZXRhaWxzLmVkZ2UgLSBwb3NpdGlvbikgKiAxMDAwO1xuICAgICAgICB2YXIgcmVsb2FkSW50ZXJ2YWwgPSBjb21wdXRlUmVsb2FkSW50ZXJ2YWwoZGV0YWlscywgZGlzdGFuY2VUb0xpdmVFZGdlTXMpO1xuICAgICAgICBpZiAoZGV0YWlscy5yZXF1ZXN0U2NoZWR1bGVkICsgcmVsb2FkSW50ZXJ2YWwgPCBub3cpIHtcbiAgICAgICAgICBkZXRhaWxzLnJlcXVlc3RTY2hlZHVsZWQgPSBub3c7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGV0YWlscy5yZXF1ZXN0U2NoZWR1bGVkICs9IHJlbG9hZEludGVydmFsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nKFwibGl2ZSBwbGF5bGlzdCBcIiArIGluZGV4ICsgXCIgXCIgKyAoZGV0YWlscy5hZHZhbmNlZCA/ICdSRUZSRVNIRUQgJyArIGRldGFpbHMubGFzdFBhcnRTbiArICctJyArIGRldGFpbHMubGFzdFBhcnRJbmRleCA6IGRldGFpbHMudXBkYXRlZCA/ICdVUERBVEVEJyA6ICdNSVNTRUQnKSk7XG4gICAgICAgIGlmICghdGhpcy5jYW5Mb2FkIHx8ICFkZXRhaWxzLmxpdmUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGl2ZXJ5RGlyZWN0aXZlcztcbiAgICAgICAgdmFyIG1zbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHBhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChkZXRhaWxzLmNhbkJsb2NrUmVsb2FkICYmIGRldGFpbHMuZW5kU04gJiYgZGV0YWlscy5hZHZhbmNlZCkge1xuICAgICAgICAgIC8vIExvYWQgbGV2ZWwgd2l0aCBMTC1ITFMgZGVsaXZlcnkgZGlyZWN0aXZlc1xuICAgICAgICAgIHZhciBsb3dMYXRlbmN5TW9kZSA9IHRoaXMuaGxzLmNvbmZpZy5sb3dMYXRlbmN5TW9kZTtcbiAgICAgICAgICB2YXIgbGFzdFBhcnRTbiA9IGRldGFpbHMubGFzdFBhcnRTbjtcbiAgICAgICAgICB2YXIgZW5kU24gPSBkZXRhaWxzLmVuZFNOO1xuICAgICAgICAgIHZhciBsYXN0UGFydEluZGV4ID0gZGV0YWlscy5sYXN0UGFydEluZGV4O1xuICAgICAgICAgIHZhciBoYXNQYXJ0cyA9IGxhc3RQYXJ0SW5kZXggIT09IC0xO1xuICAgICAgICAgIHZhciBhdExhc3RQYXJ0T2ZTZWdtZW50ID0gbGFzdFBhcnRTbiA9PT0gZW5kU247XG4gICAgICAgICAgaWYgKGhhc1BhcnRzKSB7XG4gICAgICAgICAgICAvLyBXaGVuIGxvdyBsYXRlbmN5IG1vZGUgaXMgZGlzYWJsZWQsIHJlcXVlc3QgdGhlIGxhc3QgcGFydCBvZiB0aGUgbmV4dCBzZWdtZW50XG4gICAgICAgICAgICBpZiAoYXRMYXN0UGFydE9mU2VnbWVudCkge1xuICAgICAgICAgICAgICBtc24gPSBlbmRTbiArIDE7XG4gICAgICAgICAgICAgIHBhcnQgPSBsb3dMYXRlbmN5TW9kZSA/IDAgOiBsYXN0UGFydEluZGV4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbXNuID0gbGFzdFBhcnRTbjtcbiAgICAgICAgICAgICAgcGFydCA9IGxvd0xhdGVuY3lNb2RlID8gbGFzdFBhcnRJbmRleCArIDEgOiBkZXRhaWxzLm1heFBhcnRJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbXNuID0gZW5kU24gKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBMb3ctTGF0ZW5jeSBDRE4gVHVuZS1pbjogXCJhZ2VcIiBoZWFkZXIgYW5kIHRpbWUgc2luY2UgbG9hZCBpbmRpY2F0ZXMgd2UncmUgYmVoaW5kIGJ5IG1vcmUgdGhhbiBvbmUgcGFydFxuICAgICAgICAgIC8vIFVwZGF0ZSBkaXJlY3RpdmVzIHRvIG9idGFpbiB0aGUgUGxheWxpc3QgdGhhdCBoYXMgdGhlIGVzdGltYXRlZCBhZGRpdGlvbmFsIGR1cmF0aW9uIG9mIG1lZGlhXG4gICAgICAgICAgdmFyIGxhc3RBZHZhbmNlZCA9IGRldGFpbHMuYWdlO1xuICAgICAgICAgIHZhciBjZG5BZ2UgPSBsYXN0QWR2YW5jZWQgKyBkZXRhaWxzLmFnZUhlYWRlcjtcbiAgICAgICAgICB2YXIgY3VycmVudEdvYWwgPSBNYXRoLm1pbihjZG5BZ2UgLSBkZXRhaWxzLnBhcnRUYXJnZXQsIGRldGFpbHMudGFyZ2V0ZHVyYXRpb24gKiAxLjUpO1xuICAgICAgICAgIGlmIChjdXJyZW50R29hbCA+IDApIHtcbiAgICAgICAgICAgIGlmIChjZG5BZ2UgPiBkZXRhaWxzLnRhcmdldGR1cmF0aW9uICogMykge1xuICAgICAgICAgICAgICAvLyBPbWl0IHNlZ21lbnQgYW5kIHBhcnQgZGlyZWN0aXZlcyB3aGVuIHRoZSBsYXN0IHJlc3BvbnNlIHdhcyBtb3JlIHRoYW4gMyB0YXJnZXQgZHVyYXRpb25zIGFnbyxcbiAgICAgICAgICAgICAgdGhpcy5sb2coXCJQbGF5bGlzdCBsYXN0IGFkdmFuY2VkIFwiICsgbGFzdEFkdmFuY2VkLnRvRml4ZWQoMikgKyBcInMgYWdvLiBPbWl0dGluZyBzZWdtZW50IGFuZCBwYXJ0IGRpcmVjdGl2ZXMuXCIpO1xuICAgICAgICAgICAgICBtc24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIHBhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZpb3VzRGV0YWlscyAhPSBudWxsICYmIHByZXZpb3VzRGV0YWlscy50dW5lSW5Hb2FsICYmIGNkbkFnZSAtIGRldGFpbHMucGFydFRhcmdldCA+IHByZXZpb3VzRGV0YWlscy50dW5lSW5Hb2FsKSB7XG4gICAgICAgICAgICAgIC8vIElmIHdlIGF0dGVtcHRlZCB0byBnZXQgdGhlIG5leHQgb3IgbGF0ZXN0IHBsYXlsaXN0IHVwZGF0ZSwgYnV0IGN1cnJlbnRHb2FsIGluY3JlYXNlZCxcbiAgICAgICAgICAgICAgLy8gdGhlbiB3ZSBlaXRoZXIgY2FuJ3QgY2F0Y2h1cCwgb3IgdGhlIFwiYWdlXCIgaGVhZGVyIGNhbm5vdCBiZSB0cnVzdGVkLlxuICAgICAgICAgICAgICB0aGlzLndhcm4oXCJDRE4gVHVuZS1pbiBnb2FsIGluY3JlYXNlZCBmcm9tOiBcIiArIHByZXZpb3VzRGV0YWlscy50dW5lSW5Hb2FsICsgXCIgdG86IFwiICsgY3VycmVudEdvYWwgKyBcIiB3aXRoIHBsYXlsaXN0IGFnZTogXCIgKyBkZXRhaWxzLmFnZSk7XG4gICAgICAgICAgICAgIGN1cnJlbnRHb2FsID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBzZWdtZW50cyA9IE1hdGguZmxvb3IoY3VycmVudEdvYWwgLyBkZXRhaWxzLnRhcmdldGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgbXNuICs9IHNlZ21lbnRzO1xuICAgICAgICAgICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gTWF0aC5yb3VuZChjdXJyZW50R29hbCAlIGRldGFpbHMudGFyZ2V0ZHVyYXRpb24gLyBkZXRhaWxzLnBhcnRUYXJnZXQpO1xuICAgICAgICAgICAgICAgIHBhcnQgKz0gcGFydHM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5sb2coXCJDRE4gVHVuZS1pbiBhZ2U6IFwiICsgZGV0YWlscy5hZ2VIZWFkZXIgKyBcInMgbGFzdCBhZHZhbmNlZCBcIiArIGxhc3RBZHZhbmNlZC50b0ZpeGVkKDIpICsgXCJzIGdvYWw6IFwiICsgY3VycmVudEdvYWwgKyBcIiBza2lwIHNuIFwiICsgc2VnbWVudHMgKyBcIiB0byBwYXJ0IFwiICsgcGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXRhaWxzLnR1bmVJbkdvYWwgPSBjdXJyZW50R29hbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsaXZlcnlEaXJlY3RpdmVzID0gdGhpcy5nZXREZWxpdmVyeURpcmVjdGl2ZXMoZGV0YWlscywgZGF0YS5kZWxpdmVyeURpcmVjdGl2ZXMsIG1zbiwgcGFydCk7XG4gICAgICAgICAgaWYgKGxvd0xhdGVuY3lNb2RlIHx8ICFhdExhc3RQYXJ0T2ZTZWdtZW50KSB7XG4gICAgICAgICAgICBkZXRhaWxzLnJlcXVlc3RTY2hlZHVsZWQgPSBub3c7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdQbGF5bGlzdChsZXZlbE9yVHJhY2ssIGRlbGl2ZXJ5RGlyZWN0aXZlcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRldGFpbHMuY2FuQmxvY2tSZWxvYWQgfHwgZGV0YWlscy5jYW5Ta2lwVW50aWwpIHtcbiAgICAgICAgICBkZWxpdmVyeURpcmVjdGl2ZXMgPSB0aGlzLmdldERlbGl2ZXJ5RGlyZWN0aXZlcyhkZXRhaWxzLCBkYXRhLmRlbGl2ZXJ5RGlyZWN0aXZlcywgbXNuLCBwYXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVsaXZlcnlEaXJlY3RpdmVzICYmIG1zbiAhPT0gdW5kZWZpbmVkICYmIGRldGFpbHMuY2FuQmxvY2tSZWxvYWQpIHtcbiAgICAgICAgICBkZXRhaWxzLnJlcXVlc3RTY2hlZHVsZWQgPSBzdGF0cy5sb2FkaW5nLmZpcnN0ICsgTWF0aC5tYXgocmVsb2FkSW50ZXJ2YWwgLSBlbGFwc2VkICogMiwgcmVsb2FkSW50ZXJ2YWwgLyAyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjaGVkdWxlTG9hZGluZyhsZXZlbE9yVHJhY2ssIGRlbGl2ZXJ5RGlyZWN0aXZlcywgZGV0YWlscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5zY2hlZHVsZUxvYWRpbmcgPSBmdW5jdGlvbiBzY2hlZHVsZUxvYWRpbmcobGV2ZWxPclRyYWNrLCBkZWxpdmVyeURpcmVjdGl2ZXMsIHVwZGF0ZWREZXRhaWxzKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIHZhciBkZXRhaWxzID0gdXBkYXRlZERldGFpbHMgfHwgbGV2ZWxPclRyYWNrLmRldGFpbHM7XG4gICAgICBpZiAoIWRldGFpbHMpIHtcbiAgICAgICAgdGhpcy5sb2FkaW5nUGxheWxpc3QobGV2ZWxPclRyYWNrLCBkZWxpdmVyeURpcmVjdGl2ZXMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbm93ID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIHZhciByZXF1ZXN0U2NoZWR1bGVkID0gZGV0YWlscy5yZXF1ZXN0U2NoZWR1bGVkO1xuICAgICAgaWYgKG5vdyA+PSByZXF1ZXN0U2NoZWR1bGVkKSB7XG4gICAgICAgIHRoaXMubG9hZGluZ1BsYXlsaXN0KGxldmVsT3JUcmFjaywgZGVsaXZlcnlEaXJlY3RpdmVzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGVzdGltYXRlZFRpbWVVbnRpbFVwZGF0ZSA9IHJlcXVlc3RTY2hlZHVsZWQgLSBub3c7XG4gICAgICB0aGlzLmxvZyhcInJlbG9hZCBsaXZlIHBsYXlsaXN0IFwiICsgKGxldmVsT3JUcmFjay5uYW1lIHx8IGxldmVsT3JUcmFjay5iaXRyYXRlICsgJ2JwcycpICsgXCIgaW4gXCIgKyBNYXRoLnJvdW5kKGVzdGltYXRlZFRpbWVVbnRpbFVwZGF0ZSkgKyBcIiBtc1wiKTtcbiAgICAgIHRoaXMuY2xlYXJUaW1lcigpO1xuICAgICAgdGhpcy50aW1lciA9IHNlbGYuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIubG9hZGluZ1BsYXlsaXN0KGxldmVsT3JUcmFjaywgZGVsaXZlcnlEaXJlY3RpdmVzKTtcbiAgICAgIH0sIGVzdGltYXRlZFRpbWVVbnRpbFVwZGF0ZSk7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0RGVsaXZlcnlEaXJlY3RpdmVzID0gZnVuY3Rpb24gZ2V0RGVsaXZlcnlEaXJlY3RpdmVzKGRldGFpbHMsIHByZXZpb3VzRGVsaXZlcnlEaXJlY3RpdmVzLCBtc24sIHBhcnQpIHtcbiAgICAgIHZhciBza2lwID0gZ2V0U2tpcFZhbHVlKGRldGFpbHMpO1xuICAgICAgaWYgKHByZXZpb3VzRGVsaXZlcnlEaXJlY3RpdmVzICE9IG51bGwgJiYgcHJldmlvdXNEZWxpdmVyeURpcmVjdGl2ZXMuc2tpcCAmJiBkZXRhaWxzLmRlbHRhVXBkYXRlRmFpbGVkKSB7XG4gICAgICAgIG1zbiA9IHByZXZpb3VzRGVsaXZlcnlEaXJlY3RpdmVzLm1zbjtcbiAgICAgICAgcGFydCA9IHByZXZpb3VzRGVsaXZlcnlEaXJlY3RpdmVzLnBhcnQ7XG4gICAgICAgIHNraXAgPSBIbHNTa2lwLk5vO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBIbHNVcmxQYXJhbWV0ZXJzKG1zbiwgcGFydCwgc2tpcCk7XG4gICAgfTtcbiAgICBfcHJvdG8uY2hlY2tSZXRyeSA9IGZ1bmN0aW9uIGNoZWNrUmV0cnkoZXJyb3JFdmVudCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG4gICAgICB2YXIgZXJyb3JEZXRhaWxzID0gZXJyb3JFdmVudC5kZXRhaWxzO1xuICAgICAgdmFyIGlzVGltZW91dCA9IGlzVGltZW91dEVycm9yKGVycm9yRXZlbnQpO1xuICAgICAgdmFyIGVycm9yQWN0aW9uID0gZXJyb3JFdmVudC5lcnJvckFjdGlvbjtcbiAgICAgIHZhciBfcmVmID0gZXJyb3JBY3Rpb24gfHwge30sXG4gICAgICAgIGFjdGlvbiA9IF9yZWYuYWN0aW9uLFxuICAgICAgICBfcmVmJHJldHJ5Q291bnQgPSBfcmVmLnJldHJ5Q291bnQsXG4gICAgICAgIHJldHJ5Q291bnQgPSBfcmVmJHJldHJ5Q291bnQgPT09IHZvaWQgMCA/IDAgOiBfcmVmJHJldHJ5Q291bnQsXG4gICAgICAgIHJldHJ5Q29uZmlnID0gX3JlZi5yZXRyeUNvbmZpZztcbiAgICAgIHZhciByZXRyeSA9ICEhZXJyb3JBY3Rpb24gJiYgISFyZXRyeUNvbmZpZyAmJiAoYWN0aW9uID09PSBOZXR3b3JrRXJyb3JBY3Rpb24uUmV0cnlSZXF1ZXN0IHx8ICFlcnJvckFjdGlvbi5yZXNvbHZlZCAmJiBhY3Rpb24gPT09IE5ldHdvcmtFcnJvckFjdGlvbi5TZW5kQWx0ZXJuYXRlVG9QZW5hbHR5Qm94KTtcbiAgICAgIGlmIChyZXRyeSkge1xuICAgICAgICB2YXIgX2Vycm9yRXZlbnQkY29udGV4dDtcbiAgICAgICAgaWYgKHJldHJ5Q291bnQgPj0gcmV0cnlDb25maWcubWF4TnVtUmV0cnkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVGltZW91dCAmJiAoX2Vycm9yRXZlbnQkY29udGV4dCA9IGVycm9yRXZlbnQuY29udGV4dCkgIT0gbnVsbCAmJiBfZXJyb3JFdmVudCRjb250ZXh0LmRlbGl2ZXJ5RGlyZWN0aXZlcykge1xuICAgICAgICAgIC8vIFRoZSBMTC1ITFMgcmVxdWVzdCBhbHJlYWR5IHRpbWVkIG91dCBzbyByZXRyeSBpbW1lZGlhdGVseVxuICAgICAgICAgIHRoaXMud2FybihcIlJldHJ5aW5nIHBsYXlsaXN0IGxvYWRpbmcgXCIgKyAocmV0cnlDb3VudCArIDEpICsgXCIvXCIgKyByZXRyeUNvbmZpZy5tYXhOdW1SZXRyeSArIFwiIGFmdGVyIFxcXCJcIiArIGVycm9yRGV0YWlscyArIFwiXFxcIiB3aXRob3V0IGRlbGl2ZXJ5LWRpcmVjdGl2ZXNcIik7XG4gICAgICAgICAgdGhpcy5sb2FkUGxheWxpc3QoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgZGVsYXkgPSBnZXRSZXRyeURlbGF5KHJldHJ5Q29uZmlnLCByZXRyeUNvdW50KTtcbiAgICAgICAgICAvLyBTY2hlZHVsZSBsZXZlbC90cmFjayByZWxvYWRcbiAgICAgICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICAgICAgICB0aGlzLnRpbWVyID0gc2VsZi5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMubG9hZFBsYXlsaXN0KCk7XG4gICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgIHRoaXMud2FybihcIlJldHJ5aW5nIHBsYXlsaXN0IGxvYWRpbmcgXCIgKyAocmV0cnlDb3VudCArIDEpICsgXCIvXCIgKyByZXRyeUNvbmZpZy5tYXhOdW1SZXRyeSArIFwiIGFmdGVyIFxcXCJcIiArIGVycm9yRGV0YWlscyArIFwiXFxcIiBpbiBcIiArIGRlbGF5ICsgXCJtc1wiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBgbGV2ZWxSZXRyeSA9IHRydWVgIHVzZWQgdG8gaW5mb3JtIG90aGVyIGNvbnRyb2xsZXJzIHRoYXQgYSByZXRyeSBpcyBoYXBwZW5pbmdcbiAgICAgICAgZXJyb3JFdmVudC5sZXZlbFJldHJ5ID0gdHJ1ZTtcbiAgICAgICAgZXJyb3JBY3Rpb24ucmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldHJ5O1xuICAgIH07XG4gICAgcmV0dXJuIEJhc2VQbGF5bGlzdENvbnRyb2xsZXI7XG4gIH0oTG9nZ2VyKTtcblxuICBmdW5jdGlvbiBzdWJ0aXRsZU9wdGlvbnNJZGVudGljYWwodHJhY2tMaXN0MSwgdHJhY2tMaXN0Mikge1xuICAgIGlmICh0cmFja0xpc3QxLmxlbmd0aCAhPT0gdHJhY2tMaXN0Mi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja0xpc3QxLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW1lZGlhQXR0cmlidXRlc0lkZW50aWNhbCh0cmFja0xpc3QxW2ldLmF0dHJzLCB0cmFja0xpc3QyW2ldLmF0dHJzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIG1lZGlhQXR0cmlidXRlc0lkZW50aWNhbChhdHRyczEsIGF0dHJzMiwgY3VzdG9tQXR0cmlidXRlcykge1xuICAgIC8vIE1lZGlhIG9wdGlvbnMgd2l0aCB0aGUgc2FtZSByZW5kaXRpb24gSUQgbXVzdCBiZSBiaXQgaWRlbnRpY2FsXG4gICAgdmFyIHN0YWJsZVJlbmRpdGlvbklkID0gYXR0cnMxWydTVEFCTEUtUkVORElUSU9OLUlEJ107XG4gICAgaWYgKHN0YWJsZVJlbmRpdGlvbklkICYmICFjdXN0b21BdHRyaWJ1dGVzKSB7XG4gICAgICByZXR1cm4gc3RhYmxlUmVuZGl0aW9uSWQgPT09IGF0dHJzMlsnU1RBQkxFLVJFTkRJVElPTi1JRCddO1xuICAgIH1cbiAgICAvLyBXaGVuIHJlbmRpdGlvbiBJRCBpcyBub3QgcHJlc2VudCwgY29tcGFyZSBhdHRyaWJ1dGVzXG4gICAgcmV0dXJuICEoY3VzdG9tQXR0cmlidXRlcyB8fCBbJ0xBTkdVQUdFJywgJ05BTUUnLCAnQ0hBUkFDVEVSSVNUSUNTJywgJ0FVVE9TRUxFQ1QnLCAnREVGQVVMVCcsICdGT1JDRUQnLCAnQVNTT0MtTEFOR1VBR0UnXSkuc29tZShmdW5jdGlvbiAoc3VidGl0bGVBdHRyaWJ1dGUpIHtcbiAgICAgIHJldHVybiBhdHRyczFbc3VidGl0bGVBdHRyaWJ1dGVdICE9PSBhdHRyczJbc3VidGl0bGVBdHRyaWJ1dGVdO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHN1YnRpdGxlVHJhY2tNYXRjaGVzVGV4dFRyYWNrKHN1YnRpdGxlVHJhY2ssIHRleHRUcmFjaykge1xuICAgIHJldHVybiB0ZXh0VHJhY2subGFiZWwudG9Mb3dlckNhc2UoKSA9PT0gc3VidGl0bGVUcmFjay5uYW1lLnRvTG93ZXJDYXNlKCkgJiYgKCF0ZXh0VHJhY2subGFuZ3VhZ2UgfHwgdGV4dFRyYWNrLmxhbmd1YWdlLnRvTG93ZXJDYXNlKCkgPT09IChzdWJ0aXRsZVRyYWNrLmxhbmcgfHwgJycpLnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgdmFyIEF1ZGlvVHJhY2tDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVBsYXlsaXN0Q29udHJvbGwpIHtcbiAgICBmdW5jdGlvbiBBdWRpb1RyYWNrQ29udHJvbGxlcihobHMpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF90aGlzID0gX0Jhc2VQbGF5bGlzdENvbnRyb2xsLmNhbGwodGhpcywgaGxzLCAnYXVkaW8tdHJhY2stY29udHJvbGxlcicpIHx8IHRoaXM7XG4gICAgICBfdGhpcy50cmFja3MgPSBbXTtcbiAgICAgIF90aGlzLmdyb3VwSWRzID0gbnVsbDtcbiAgICAgIF90aGlzLnRyYWNrc0luR3JvdXAgPSBbXTtcbiAgICAgIF90aGlzLnRyYWNrSWQgPSAtMTtcbiAgICAgIF90aGlzLmN1cnJlbnRUcmFjayA9IG51bGw7XG4gICAgICBfdGhpcy5zZWxlY3REZWZhdWx0VHJhY2sgPSB0cnVlO1xuICAgICAgX3RoaXMucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgX2luaGVyaXRzTG9vc2UoQXVkaW9UcmFja0NvbnRyb2xsZXIsIF9CYXNlUGxheWxpc3RDb250cm9sbCk7XG4gICAgdmFyIF9wcm90byA9IEF1ZGlvVHJhY2tDb250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGhscy5vbihFdmVudHMuTUFOSUZFU1RfTE9BRElORywgdGhpcy5vbk1hbmlmZXN0TG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLk1BTklGRVNUX1BBUlNFRCwgdGhpcy5vbk1hbmlmZXN0UGFyc2VkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTEVWRUxfTE9BRElORywgdGhpcy5vbkxldmVsTG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkxFVkVMX1NXSVRDSElORywgdGhpcy5vbkxldmVsU3dpdGNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuQVVESU9fVFJBQ0tfTE9BREVELCB0aGlzLm9uQXVkaW9UcmFja0xvYWRlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkVSUk9SLCB0aGlzLm9uRXJyb3IsIHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLnVucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUFOSUZFU1RfTE9BRElORywgdGhpcy5vbk1hbmlmZXN0TG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NQU5JRkVTVF9QQVJTRUQsIHRoaXMub25NYW5pZmVzdFBhcnNlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5MRVZFTF9MT0FESU5HLCB0aGlzLm9uTGV2ZWxMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkxFVkVMX1NXSVRDSElORywgdGhpcy5vbkxldmVsU3dpdGNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkFVRElPX1RSQUNLX0xPQURFRCwgdGhpcy5vbkF1ZGlvVHJhY2tMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRVJST1IsIHRoaXMub25FcnJvciwgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLnVucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMudHJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLnRyYWNrc0luR3JvdXAubGVuZ3RoID0gMDtcbiAgICAgIHRoaXMuY3VycmVudFRyYWNrID0gbnVsbDtcbiAgICAgIF9CYXNlUGxheWxpc3RDb250cm9sbC5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTWFuaWZlc3RMb2FkaW5nID0gZnVuY3Rpb24gb25NYW5pZmVzdExvYWRpbmcoKSB7XG4gICAgICB0aGlzLnRyYWNrcyA9IFtdO1xuICAgICAgdGhpcy50cmFja3NJbkdyb3VwID0gW107XG4gICAgICB0aGlzLmdyb3VwSWRzID0gbnVsbDtcbiAgICAgIHRoaXMuY3VycmVudFRyYWNrID0gbnVsbDtcbiAgICAgIHRoaXMudHJhY2tJZCA9IC0xO1xuICAgICAgdGhpcy5zZWxlY3REZWZhdWx0VHJhY2sgPSB0cnVlO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTWFuaWZlc3RQYXJzZWQgPSBmdW5jdGlvbiBvbk1hbmlmZXN0UGFyc2VkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLnRyYWNrcyA9IGRhdGEuYXVkaW9UcmFja3MgfHwgW107XG4gICAgfTtcbiAgICBfcHJvdG8ub25BdWRpb1RyYWNrTG9hZGVkID0gZnVuY3Rpb24gb25BdWRpb1RyYWNrTG9hZGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgaWQgPSBkYXRhLmlkLFxuICAgICAgICBncm91cElkID0gZGF0YS5ncm91cElkLFxuICAgICAgICBkZXRhaWxzID0gZGF0YS5kZXRhaWxzO1xuICAgICAgdmFyIHRyYWNrSW5BY3RpdmVHcm91cCA9IHRoaXMudHJhY2tzSW5Hcm91cFtpZF07XG4gICAgICBpZiAoIXRyYWNrSW5BY3RpdmVHcm91cCB8fCB0cmFja0luQWN0aXZlR3JvdXAuZ3JvdXBJZCAhPT0gZ3JvdXBJZCkge1xuICAgICAgICB0aGlzLndhcm4oXCJBdWRpbyB0cmFjayB3aXRoIGlkOlwiICsgaWQgKyBcIiBhbmQgZ3JvdXA6XCIgKyBncm91cElkICsgXCIgbm90IGZvdW5kIGluIGFjdGl2ZSBncm91cCBcIiArICh0cmFja0luQWN0aXZlR3JvdXAgPT0gbnVsbCA/IHZvaWQgMCA6IHRyYWNrSW5BY3RpdmVHcm91cC5ncm91cElkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBjdXJEZXRhaWxzID0gdHJhY2tJbkFjdGl2ZUdyb3VwLmRldGFpbHM7XG4gICAgICB0cmFja0luQWN0aXZlR3JvdXAuZGV0YWlscyA9IGRhdGEuZGV0YWlscztcbiAgICAgIHRoaXMubG9nKFwiQXVkaW8gdHJhY2sgXCIgKyBpZCArIFwiIFxcXCJcIiArIHRyYWNrSW5BY3RpdmVHcm91cC5uYW1lICsgXCJcXFwiIGxhbmc6XCIgKyB0cmFja0luQWN0aXZlR3JvdXAubGFuZyArIFwiIGdyb3VwOlwiICsgZ3JvdXBJZCArIFwiIGxvYWRlZCBbXCIgKyBkZXRhaWxzLnN0YXJ0U04gKyBcIi1cIiArIGRldGFpbHMuZW5kU04gKyBcIl1cIik7XG4gICAgICBpZiAoaWQgPT09IHRoaXMudHJhY2tJZCkge1xuICAgICAgICB0aGlzLnBsYXlsaXN0TG9hZGVkKGlkLCBkYXRhLCBjdXJEZXRhaWxzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkxldmVsTG9hZGluZyA9IGZ1bmN0aW9uIG9uTGV2ZWxMb2FkaW5nKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLnN3aXRjaExldmVsKGRhdGEubGV2ZWwpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTGV2ZWxTd2l0Y2hpbmcgPSBmdW5jdGlvbiBvbkxldmVsU3dpdGNoaW5nKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLnN3aXRjaExldmVsKGRhdGEubGV2ZWwpO1xuICAgIH07XG4gICAgX3Byb3RvLnN3aXRjaExldmVsID0gZnVuY3Rpb24gc3dpdGNoTGV2ZWwobGV2ZWxJbmRleCkge1xuICAgICAgdmFyIGxldmVsSW5mbyA9IHRoaXMuaGxzLmxldmVsc1tsZXZlbEluZGV4XTtcbiAgICAgIGlmICghbGV2ZWxJbmZvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBhdWRpb0dyb3VwcyA9IGxldmVsSW5mby5hdWRpb0dyb3VwcyB8fCBudWxsO1xuICAgICAgdmFyIGN1cnJlbnRHcm91cHMgPSB0aGlzLmdyb3VwSWRzO1xuICAgICAgdmFyIGN1cnJlbnRUcmFjayA9IHRoaXMuY3VycmVudFRyYWNrO1xuICAgICAgaWYgKCFhdWRpb0dyb3VwcyB8fCAoY3VycmVudEdyb3VwcyA9PSBudWxsID8gdm9pZCAwIDogY3VycmVudEdyb3Vwcy5sZW5ndGgpICE9PSAoYXVkaW9Hcm91cHMgPT0gbnVsbCA/IHZvaWQgMCA6IGF1ZGlvR3JvdXBzLmxlbmd0aCkgfHwgYXVkaW9Hcm91cHMgIT0gbnVsbCAmJiBhdWRpb0dyb3Vwcy5zb21lKGZ1bmN0aW9uIChncm91cElkKSB7XG4gICAgICAgIHJldHVybiAoY3VycmVudEdyb3VwcyA9PSBudWxsID8gdm9pZCAwIDogY3VycmVudEdyb3Vwcy5pbmRleE9mKGdyb3VwSWQpKSA9PT0gLTE7XG4gICAgICB9KSkge1xuICAgICAgICB0aGlzLmdyb3VwSWRzID0gYXVkaW9Hcm91cHM7XG4gICAgICAgIHRoaXMudHJhY2tJZCA9IC0xO1xuICAgICAgICB0aGlzLmN1cnJlbnRUcmFjayA9IG51bGw7XG4gICAgICAgIHZhciBhdWRpb1RyYWNrcyA9IHRoaXMudHJhY2tzLmZpbHRlcihmdW5jdGlvbiAodHJhY2spIHtcbiAgICAgICAgICByZXR1cm4gIWF1ZGlvR3JvdXBzIHx8IGF1ZGlvR3JvdXBzLmluZGV4T2YodHJhY2suZ3JvdXBJZCkgIT09IC0xO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGF1ZGlvVHJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgIC8vIERpc2FibGUgc2VsZWN0RGVmYXVsdFRyYWNrIGlmIHRoZXJlIGFyZSBubyBkZWZhdWx0IHRyYWNrc1xuICAgICAgICAgIGlmICh0aGlzLnNlbGVjdERlZmF1bHRUcmFjayAmJiAhYXVkaW9UcmFja3Muc29tZShmdW5jdGlvbiAodHJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFjay5kZWZhdWx0O1xuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdERlZmF1bHRUcmFjayA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB0cmFjay5pZCBzaG91bGQgbWF0Y2ggaGxzLmF1ZGlvVHJhY2tzIGluZGV4XG4gICAgICAgICAgYXVkaW9UcmFja3MuZm9yRWFjaChmdW5jdGlvbiAodHJhY2ssIGkpIHtcbiAgICAgICAgICAgIHRyYWNrLmlkID0gaTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICghY3VycmVudFRyYWNrICYmICF0aGlzLnRyYWNrc0luR3JvdXAubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gRG8gbm90IGRpc3BhdGNoIEFVRElPX1RSQUNLU19VUERBVEVEIHdoZW4gdGhlcmUgd2VyZSBhbmQgYXJlIG5vIHRyYWNrc1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyYWNrc0luR3JvdXAgPSBhdWRpb1RyYWNrcztcblxuICAgICAgICAvLyBGaW5kIHByZWZlcnJlZCB0cmFja1xuICAgICAgICB2YXIgYXVkaW9QcmVmZXJlbmNlID0gdGhpcy5obHMuY29uZmlnLmF1ZGlvUHJlZmVyZW5jZTtcbiAgICAgICAgaWYgKCFjdXJyZW50VHJhY2sgJiYgYXVkaW9QcmVmZXJlbmNlKSB7XG4gICAgICAgICAgdmFyIGdyb3VwSW5kZXggPSBmaW5kTWF0Y2hpbmdPcHRpb24oYXVkaW9QcmVmZXJlbmNlLCBhdWRpb1RyYWNrcywgYXVkaW9NYXRjaFByZWRpY2F0ZSk7XG4gICAgICAgICAgaWYgKGdyb3VwSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgY3VycmVudFRyYWNrID0gYXVkaW9UcmFja3NbZ3JvdXBJbmRleF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhbGxJbmRleCA9IGZpbmRNYXRjaGluZ09wdGlvbihhdWRpb1ByZWZlcmVuY2UsIHRoaXMudHJhY2tzKTtcbiAgICAgICAgICAgIGN1cnJlbnRUcmFjayA9IHRoaXMudHJhY2tzW2FsbEluZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZWxlY3QgaW5pdGlhbCB0cmFja1xuICAgICAgICB2YXIgdHJhY2tJZCA9IHRoaXMuZmluZFRyYWNrSWQoY3VycmVudFRyYWNrKTtcbiAgICAgICAgaWYgKHRyYWNrSWQgPT09IC0xICYmIGN1cnJlbnRUcmFjaykge1xuICAgICAgICAgIHRyYWNrSWQgPSB0aGlzLmZpbmRUcmFja0lkKG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGlzcGF0Y2ggZXZlbnRzIGFuZCBsb2FkIHRyYWNrIGlmIG5lZWRlZFxuICAgICAgICB2YXIgYXVkaW9UcmFja3NVcGRhdGVkID0ge1xuICAgICAgICAgIGF1ZGlvVHJhY2tzOiBhdWRpb1RyYWNrc1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxvZyhcIlVwZGF0aW5nIGF1ZGlvIHRyYWNrcywgXCIgKyBhdWRpb1RyYWNrcy5sZW5ndGggKyBcIiB0cmFjayhzKSBmb3VuZCBpbiBncm91cChzKTogXCIgKyAoYXVkaW9Hcm91cHMgPT0gbnVsbCA/IHZvaWQgMCA6IGF1ZGlvR3JvdXBzLmpvaW4oJywnKSkpO1xuICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5BVURJT19UUkFDS1NfVVBEQVRFRCwgYXVkaW9UcmFja3NVcGRhdGVkKTtcbiAgICAgICAgdmFyIHNlbGVjdGVkVHJhY2tJZCA9IHRoaXMudHJhY2tJZDtcbiAgICAgICAgaWYgKHRyYWNrSWQgIT09IC0xICYmIHNlbGVjdGVkVHJhY2tJZCA9PT0gLTEpIHtcbiAgICAgICAgICB0aGlzLnNldEF1ZGlvVHJhY2sodHJhY2tJZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYXVkaW9UcmFja3MubGVuZ3RoICYmIHNlbGVjdGVkVHJhY2tJZCA9PT0gLTEpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkZ3JvdXBJZHM7XG4gICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKFwiTm8gYXVkaW8gdHJhY2sgc2VsZWN0ZWQgZm9yIGN1cnJlbnQgYXVkaW8gZ3JvdXAtSUQocyk6IFwiICsgKChfdGhpcyRncm91cElkcyA9IHRoaXMuZ3JvdXBJZHMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRncm91cElkcy5qb2luKCcsJykpICsgXCIgdHJhY2sgY291bnQ6IFwiICsgYXVkaW9UcmFja3MubGVuZ3RoKTtcbiAgICAgICAgICB0aGlzLndhcm4oZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuRVJST1IsIHtcbiAgICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTUVESUFfRVJST1IsXG4gICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuQVVESU9fVFJBQ0tfTE9BRF9FUlJPUixcbiAgICAgICAgICAgIGZhdGFsOiB0cnVlLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvcihldmVudCwgZGF0YSkge1xuICAgICAgaWYgKGRhdGEuZmF0YWwgfHwgIWRhdGEuY29udGV4dCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5jb250ZXh0LnR5cGUgPT09IFBsYXlsaXN0Q29udGV4dFR5cGUuQVVESU9fVFJBQ0sgJiYgZGF0YS5jb250ZXh0LmlkID09PSB0aGlzLnRyYWNrSWQgJiYgKCF0aGlzLmdyb3VwSWRzIHx8IHRoaXMuZ3JvdXBJZHMuaW5kZXhPZihkYXRhLmNvbnRleHQuZ3JvdXBJZCkgIT09IC0xKSkge1xuICAgICAgICB0aGlzLmNoZWNrUmV0cnkoZGF0YSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uc2V0QXVkaW9PcHRpb24gPSBmdW5jdGlvbiBzZXRBdWRpb09wdGlvbihhdWRpb09wdGlvbikge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLmNvbmZpZy5hdWRpb1ByZWZlcmVuY2UgPSBhdWRpb09wdGlvbjtcbiAgICAgIGlmIChhdWRpb09wdGlvbikge1xuICAgICAgICB2YXIgYWxsQXVkaW9UcmFja3MgPSB0aGlzLmFsbEF1ZGlvVHJhY2tzO1xuICAgICAgICB0aGlzLnNlbGVjdERlZmF1bHRUcmFjayA9IGZhbHNlO1xuICAgICAgICBpZiAoYWxsQXVkaW9UcmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gRmlyc3Qgc2VlIGlmIGN1cnJlbnQgb3B0aW9uIG1hdGNoZXMgKG5vIHN3aXRjaCBvcClcbiAgICAgICAgICB2YXIgY3VycmVudFRyYWNrID0gdGhpcy5jdXJyZW50VHJhY2s7XG4gICAgICAgICAgaWYgKGN1cnJlbnRUcmFjayAmJiBtYXRjaGVzT3B0aW9uKGF1ZGlvT3B0aW9uLCBjdXJyZW50VHJhY2ssIGF1ZGlvTWF0Y2hQcmVkaWNhdGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFRyYWNrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBGaW5kIG9wdGlvbiBpbiBhdmFpbGFibGUgdHJhY2tzICh0cmFja3NJbkdyb3VwKVxuICAgICAgICAgIHZhciBncm91cEluZGV4ID0gZmluZE1hdGNoaW5nT3B0aW9uKGF1ZGlvT3B0aW9uLCB0aGlzLnRyYWNrc0luR3JvdXAsIGF1ZGlvTWF0Y2hQcmVkaWNhdGUpO1xuICAgICAgICAgIGlmIChncm91cEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHZhciB0cmFjayA9IHRoaXMudHJhY2tzSW5Hcm91cFtncm91cEluZGV4XTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXVkaW9UcmFjayhncm91cEluZGV4KTtcbiAgICAgICAgICAgIHJldHVybiB0cmFjaztcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRUcmFjaykge1xuICAgICAgICAgICAgLy8gRmluZCBvcHRpb24gaW4gbmVhcmVzdCBsZXZlbCBhdWRpbyBncm91cFxuICAgICAgICAgICAgdmFyIHNlYXJjaEluZGV4ID0gaGxzLmxvYWRMZXZlbDtcbiAgICAgICAgICAgIGlmIChzZWFyY2hJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgc2VhcmNoSW5kZXggPSBobHMuZmlyc3RBdXRvTGV2ZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3dpdGNoSW5kZXggPSBmaW5kQ2xvc2VzdExldmVsV2l0aEF1ZGlvR3JvdXAoYXVkaW9PcHRpb24sIGhscy5sZXZlbHMsIGFsbEF1ZGlvVHJhY2tzLCBzZWFyY2hJbmRleCwgYXVkaW9NYXRjaFByZWRpY2F0ZSk7XG4gICAgICAgICAgICBpZiAoc3dpdGNoSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgIC8vIGNvdWxkIG5vdCBmaW5kIG1hdGNoaW5nIHZhcmlhbnRcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhbmQgc3dpdGNoIGxldmVsIHRvIGFjaGVpdmUgdGhlIGF1ZGlvIGdyb3VwIHN3aXRjaFxuICAgICAgICAgICAgaGxzLm5leHRMb2FkTGV2ZWwgPSBzd2l0Y2hJbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGF1ZGlvT3B0aW9uLmNoYW5uZWxzIHx8IGF1ZGlvT3B0aW9uLmF1ZGlvQ29kZWMpIHtcbiAgICAgICAgICAgIC8vIENvdWxkIG5vdCBmaW5kIGEgbWF0Y2ggd2l0aCBjb2RlYyAvIGNoYW5uZWxzIHByZWRpY2F0ZVxuICAgICAgICAgICAgLy8gRmluZCBhIG1hdGNoIHdpdGhvdXQgY2hhbm5lbHMgb3IgY29kZWNcbiAgICAgICAgICAgIHZhciB3aXRob3V0Q29kZWNBbmRDaGFubmVsc01hdGNoID0gZmluZE1hdGNoaW5nT3B0aW9uKGF1ZGlvT3B0aW9uLCBhbGxBdWRpb1RyYWNrcyk7XG4gICAgICAgICAgICBpZiAod2l0aG91dENvZGVjQW5kQ2hhbm5lbHNNYXRjaCA+IC0xKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhbGxBdWRpb1RyYWNrc1t3aXRob3V0Q29kZWNBbmRDaGFubmVsc01hdGNoXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLnNldEF1ZGlvVHJhY2sgPSBmdW5jdGlvbiBzZXRBdWRpb1RyYWNrKG5ld0lkKSB7XG4gICAgICB2YXIgdHJhY2tzID0gdGhpcy50cmFja3NJbkdyb3VwO1xuXG4gICAgICAvLyBjaGVjayBpZiBsZXZlbCBpZHggaXMgdmFsaWRcbiAgICAgIGlmIChuZXdJZCA8IDAgfHwgbmV3SWQgPj0gdHJhY2tzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLndhcm4oXCJJbnZhbGlkIGF1ZGlvIHRyYWNrIGlkOiBcIiArIG5ld0lkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zZWxlY3REZWZhdWx0VHJhY2sgPSBmYWxzZTtcbiAgICAgIHZhciBsYXN0VHJhY2sgPSB0aGlzLmN1cnJlbnRUcmFjaztcbiAgICAgIHZhciB0cmFjayA9IHRyYWNrc1tuZXdJZF07XG4gICAgICB2YXIgdHJhY2tMb2FkZWQgPSB0cmFjay5kZXRhaWxzICYmICF0cmFjay5kZXRhaWxzLmxpdmU7XG4gICAgICBpZiAobmV3SWQgPT09IHRoaXMudHJhY2tJZCAmJiB0cmFjayA9PT0gbGFzdFRyYWNrICYmIHRyYWNrTG9hZGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubG9nKFwiU3dpdGNoaW5nIHRvIGF1ZGlvLXRyYWNrIFwiICsgbmV3SWQgKyBcIiBcXFwiXCIgKyB0cmFjay5uYW1lICsgXCJcXFwiIGxhbmc6XCIgKyB0cmFjay5sYW5nICsgXCIgZ3JvdXA6XCIgKyB0cmFjay5ncm91cElkICsgXCIgY2hhbm5lbHM6XCIgKyB0cmFjay5jaGFubmVscyk7XG4gICAgICB0aGlzLnRyYWNrSWQgPSBuZXdJZDtcbiAgICAgIHRoaXMuY3VycmVudFRyYWNrID0gdHJhY2s7XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5BVURJT19UUkFDS19TV0lUQ0hJTkcsIF9vYmplY3RTcHJlYWQyKHt9LCB0cmFjaykpO1xuICAgICAgLy8gRG8gbm90IHJlbG9hZCB0cmFjayB1bmxlc3MgbGl2ZVxuICAgICAgaWYgKHRyYWNrTG9hZGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBobHNVcmxQYXJhbWV0ZXJzID0gdGhpcy5zd2l0Y2hQYXJhbXModHJhY2sudXJsLCBsYXN0VHJhY2sgPT0gbnVsbCA/IHZvaWQgMCA6IGxhc3RUcmFjay5kZXRhaWxzLCB0cmFjay5kZXRhaWxzKTtcbiAgICAgIHRoaXMubG9hZFBsYXlsaXN0KGhsc1VybFBhcmFtZXRlcnMpO1xuICAgIH07XG4gICAgX3Byb3RvLmZpbmRUcmFja0lkID0gZnVuY3Rpb24gZmluZFRyYWNrSWQoY3VycmVudFRyYWNrKSB7XG4gICAgICB2YXIgYXVkaW9UcmFja3MgPSB0aGlzLnRyYWNrc0luR3JvdXA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF1ZGlvVHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0cmFjayA9IGF1ZGlvVHJhY2tzW2ldO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3REZWZhdWx0VHJhY2sgJiYgIXRyYWNrLmRlZmF1bHQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWN1cnJlbnRUcmFjayB8fCBtYXRjaGVzT3B0aW9uKGN1cnJlbnRUcmFjaywgdHJhY2ssIGF1ZGlvTWF0Y2hQcmVkaWNhdGUpKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VHJhY2spIHtcbiAgICAgICAgdmFyIG5hbWUgPSBjdXJyZW50VHJhY2submFtZSxcbiAgICAgICAgICBsYW5nID0gY3VycmVudFRyYWNrLmxhbmcsXG4gICAgICAgICAgYXNzb2NMYW5nID0gY3VycmVudFRyYWNrLmFzc29jTGFuZyxcbiAgICAgICAgICBjaGFyYWN0ZXJpc3RpY3MgPSBjdXJyZW50VHJhY2suY2hhcmFjdGVyaXN0aWNzLFxuICAgICAgICAgIGF1ZGlvQ29kZWMgPSBjdXJyZW50VHJhY2suYXVkaW9Db2RlYyxcbiAgICAgICAgICBjaGFubmVscyA9IGN1cnJlbnRUcmFjay5jaGFubmVscztcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGF1ZGlvVHJhY2tzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgIHZhciBfdHJhY2sgPSBhdWRpb1RyYWNrc1tfaV07XG4gICAgICAgICAgaWYgKG1hdGNoZXNPcHRpb24oe1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGxhbmc6IGxhbmcsXG4gICAgICAgICAgICBhc3NvY0xhbmc6IGFzc29jTGFuZyxcbiAgICAgICAgICAgIGNoYXJhY3RlcmlzdGljczogY2hhcmFjdGVyaXN0aWNzLFxuICAgICAgICAgICAgYXVkaW9Db2RlYzogYXVkaW9Db2RlYyxcbiAgICAgICAgICAgIGNoYW5uZWxzOiBjaGFubmVsc1xuICAgICAgICAgIH0sIF90cmFjaywgYXVkaW9NYXRjaFByZWRpY2F0ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBfaTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgYXVkaW9UcmFja3MubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgIHZhciBfdHJhY2syID0gYXVkaW9UcmFja3NbX2kyXTtcbiAgICAgICAgICBpZiAobWVkaWFBdHRyaWJ1dGVzSWRlbnRpY2FsKGN1cnJlbnRUcmFjay5hdHRycywgX3RyYWNrMi5hdHRycywgWydMQU5HVUFHRScsICdBU1NPQy1MQU5HVUFHRScsICdDSEFSQUNURVJJU1RJQ1MnXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBfaTI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IGF1ZGlvVHJhY2tzLmxlbmd0aDsgX2kzKyspIHtcbiAgICAgICAgICB2YXIgX3RyYWNrMyA9IGF1ZGlvVHJhY2tzW19pM107XG4gICAgICAgICAgaWYgKG1lZGlhQXR0cmlidXRlc0lkZW50aWNhbChjdXJyZW50VHJhY2suYXR0cnMsIF90cmFjazMuYXR0cnMsIFsnTEFOR1VBR0UnXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBfaTM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICBfcHJvdG8ubG9hZFBsYXlsaXN0ID0gZnVuY3Rpb24gbG9hZFBsYXlsaXN0KGhsc1VybFBhcmFtZXRlcnMpIHtcbiAgICAgIF9CYXNlUGxheWxpc3RDb250cm9sbC5wcm90b3R5cGUubG9hZFBsYXlsaXN0LmNhbGwodGhpcyk7XG4gICAgICB2YXIgYXVkaW9UcmFjayA9IHRoaXMuY3VycmVudFRyYWNrO1xuICAgICAgaWYgKCF0aGlzLnNob3VsZExvYWRQbGF5bGlzdChhdWRpb1RyYWNrKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBEbyBub3QgbG9hZCBhdWRpbyByZW5kaXRpb24gd2l0aCBVUkkgbWF0Y2hpbmcgbWFpbiB2YXJpYW50IFVSSVxuICAgICAgaWYgKHVzZUFsdGVybmF0ZUF1ZGlvKGF1ZGlvVHJhY2sudXJsLCB0aGlzLmhscykpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZUxvYWRpbmcoYXVkaW9UcmFjaywgaGxzVXJsUGFyYW1ldGVycyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ubG9hZGluZ1BsYXlsaXN0ID0gZnVuY3Rpb24gbG9hZGluZ1BsYXlsaXN0KGF1ZGlvVHJhY2ssIGhsc1VybFBhcmFtZXRlcnMpIHtcbiAgICAgIF9CYXNlUGxheWxpc3RDb250cm9sbC5wcm90b3R5cGUubG9hZGluZ1BsYXlsaXN0LmNhbGwodGhpcywgYXVkaW9UcmFjaywgaGxzVXJsUGFyYW1ldGVycyk7XG4gICAgICB2YXIgaWQgPSBhdWRpb1RyYWNrLmlkO1xuICAgICAgdmFyIGdyb3VwSWQgPSBhdWRpb1RyYWNrLmdyb3VwSWQ7XG4gICAgICB2YXIgdXJsID0gdGhpcy5nZXRVcmxXaXRoRGlyZWN0aXZlcyhhdWRpb1RyYWNrLnVybCwgaGxzVXJsUGFyYW1ldGVycyk7XG4gICAgICB2YXIgZGV0YWlscyA9IGF1ZGlvVHJhY2suZGV0YWlscztcbiAgICAgIHZhciBhZ2UgPSBkZXRhaWxzID09IG51bGwgPyB2b2lkIDAgOiBkZXRhaWxzLmFnZTtcbiAgICAgIHRoaXMubG9nKFwiTG9hZGluZyBhdWRpby10cmFjayBcIiArIGlkICsgXCIgXFxcIlwiICsgYXVkaW9UcmFjay5uYW1lICsgXCJcXFwiIGxhbmc6XCIgKyBhdWRpb1RyYWNrLmxhbmcgKyBcIiBncm91cDpcIiArIGdyb3VwSWQgKyAoKGhsc1VybFBhcmFtZXRlcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGhsc1VybFBhcmFtZXRlcnMubXNuKSAhPT0gdW5kZWZpbmVkID8gJyBhdCBzbiAnICsgaGxzVXJsUGFyYW1ldGVycy5tc24gKyAnIHBhcnQgJyArIGhsc1VybFBhcmFtZXRlcnMucGFydCA6ICcnKSArIChhZ2UgJiYgZGV0YWlscy5saXZlID8gJyBhZ2UgJyArIGFnZS50b0ZpeGVkKDEpICsgKGRldGFpbHMudHlwZSA/ICcgJyArIGRldGFpbHMudHlwZSB8fCAnJyA6ICcnKSA6ICcnKSArIFwiIFwiICsgdXJsKTtcbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkFVRElPX1RSQUNLX0xPQURJTkcsIHtcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgZ3JvdXBJZDogZ3JvdXBJZCxcbiAgICAgICAgZGVsaXZlcnlEaXJlY3RpdmVzOiBobHNVcmxQYXJhbWV0ZXJzIHx8IG51bGwsXG4gICAgICAgIHRyYWNrOiBhdWRpb1RyYWNrXG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoQXVkaW9UcmFja0NvbnRyb2xsZXIsIFt7XG4gICAgICBrZXk6IFwiYWxsQXVkaW9UcmFja3NcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFja3M7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImF1ZGlvVHJhY2tzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhY2tzSW5Hcm91cDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYXVkaW9UcmFja1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYWNrSWQ7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3SWQpIHtcbiAgICAgICAgLy8gSWYgYXVkaW8gdHJhY2sgaXMgc2VsZWN0ZWQgZnJvbSBBUEkgdGhlbiBkb24ndCBjaG9vc2UgZnJvbSB0aGUgbWFuaWZlc3QgZGVmYXVsdCB0cmFja1xuICAgICAgICB0aGlzLnNlbGVjdERlZmF1bHRUcmFjayA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNldEF1ZGlvVHJhY2sobmV3SWQpO1xuICAgICAgfVxuICAgIH1dKTtcbiAgfShCYXNlUGxheWxpc3RDb250cm9sbGVyKTtcblxuICB2YXIgQnVmZmVyT3BlcmF0aW9uUXVldWUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlck9wZXJhdGlvblF1ZXVlKHNvdXJjZUJ1ZmZlclJlZmVyZW5jZSkge1xuICAgICAgdGhpcy50cmFja3MgPSB2b2lkIDA7XG4gICAgICB0aGlzLnF1ZXVlcyA9IHtcbiAgICAgICAgdmlkZW86IFtdLFxuICAgICAgICBhdWRpbzogW10sXG4gICAgICAgIGF1ZGlvdmlkZW86IFtdXG4gICAgICB9O1xuICAgICAgdGhpcy50cmFja3MgPSBzb3VyY2VCdWZmZXJSZWZlcmVuY2U7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBCdWZmZXJPcGVyYXRpb25RdWV1ZS5wcm90b3R5cGU7XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy50cmFja3MgPSB0aGlzLnF1ZXVlcyA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8uYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG9wZXJhdGlvbiwgdHlwZSwgcGVuZGluZykge1xuICAgICAgaWYgKHRoaXMucXVldWVzID09PSBudWxsIHx8IHRoaXMudHJhY2tzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWVzW3R5cGVdO1xuICAgICAgcXVldWUucHVzaChvcGVyYXRpb24pO1xuICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhcGVuZGluZykge1xuICAgICAgICB0aGlzLmV4ZWN1dGVOZXh0KHR5cGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmFwcGVuZEJsb2NrZXIgPSBmdW5jdGlvbiBhcHBlbmRCbG9ja2VyKHR5cGUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbiA9IHtcbiAgICAgICAgICBsYWJlbDogJ2FzeW5jLWJsb2NrZXInLFxuICAgICAgICAgIGV4ZWN1dGU6IHJlc29sdmUsXG4gICAgICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHt9LFxuICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7fSxcbiAgICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKCkge31cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuYXBwZW5kKG9wZXJhdGlvbiwgdHlwZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5wcmVwZW5kQmxvY2tlciA9IGZ1bmN0aW9uIHByZXBlbmRCbG9ja2VyKHR5cGUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGlmIChfdGhpczIucXVldWVzKSB7XG4gICAgICAgICAgdmFyIG9wZXJhdGlvbiA9IHtcbiAgICAgICAgICAgIGxhYmVsOiAnYXN5bmMtYmxvY2tlci1wcmVwZW5kJyxcbiAgICAgICAgICAgIGV4ZWN1dGU6IHJlc29sdmUsXG4gICAgICAgICAgICBvblN0YXJ0OiBmdW5jdGlvbiBvblN0YXJ0KCkge30sXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge30sXG4gICAgICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKCkge31cbiAgICAgICAgICB9O1xuICAgICAgICAgIF90aGlzMi5xdWV1ZXNbdHlwZV0udW5zaGlmdChvcGVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5yZW1vdmVCbG9ja2VycyA9IGZ1bmN0aW9uIHJlbW92ZUJsb2NrZXJzKCkge1xuICAgICAgaWYgKHRoaXMucXVldWVzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFt0aGlzLnF1ZXVlcy52aWRlbywgdGhpcy5xdWV1ZXMuYXVkaW8sIHRoaXMucXVldWVzLmF1ZGlvdmlkZW9dLmZvckVhY2goZnVuY3Rpb24gKHF1ZXVlKSB7XG4gICAgICAgIHZhciBfcXVldWUkO1xuICAgICAgICB2YXIgbGFiZWwgPSAoX3F1ZXVlJCA9IHF1ZXVlWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX3F1ZXVlJC5sYWJlbDtcbiAgICAgICAgaWYgKGxhYmVsID09PSAnYXN5bmMtYmxvY2tlcicgfHwgbGFiZWwgPT09ICdhc3luYy1ibG9ja2VyLXByZXBlbmQnKSB7XG4gICAgICAgICAgcXVldWVbMF0uZXhlY3V0ZSgpO1xuICAgICAgICAgIHF1ZXVlLnNwbGljZSgwLCAxKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8udW5ibG9ja0F1ZGlvID0gZnVuY3Rpb24gdW5ibG9ja0F1ZGlvKG9wKSB7XG4gICAgICBpZiAodGhpcy5xdWV1ZXMgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHF1ZXVlID0gdGhpcy5xdWV1ZXMuYXVkaW87XG4gICAgICBpZiAocXVldWVbMF0gPT09IG9wKSB7XG4gICAgICAgIHRoaXMuc2hpZnRBbmRFeGVjdXRlTmV4dCgnYXVkaW8nKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5leGVjdXRlTmV4dCA9IGZ1bmN0aW9uIGV4ZWN1dGVOZXh0KHR5cGUpIHtcbiAgICAgIGlmICh0aGlzLnF1ZXVlcyA9PT0gbnVsbCB8fCB0aGlzLnRyYWNrcyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlc1t0eXBlXTtcbiAgICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbiA9IHF1ZXVlWzBdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIE9wZXJhdGlvbnMgYXJlIGV4cGVjdGVkIHRvIHJlc3VsdCBpbiBhbiAndXBkYXRlZW5kJyBldmVudCBiZWluZyBmaXJlZC4gSWYgbm90LCB0aGUgcXVldWUgd2lsbCBsb2NrLiBPcGVyYXRpb25zXG4gICAgICAgICAgLy8gd2hpY2ggZG8gbm90IGVuZCB3aXRoIHRoaXMgZXZlbnQgbXVzdCBjYWxsIF9vblNCVXBkYXRlRW5kIG1hbnVhbGx5XG4gICAgICAgICAgb3BlcmF0aW9uLmV4ZWN1dGUoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkdHJhY2tzJHR5cGU7XG4gICAgICAgICAgb3BlcmF0aW9uLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgIGlmICh0aGlzLnF1ZXVlcyA9PT0gbnVsbCB8fCB0aGlzLnRyYWNrcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE9ubHkgc2hpZnQgdGhlIGN1cnJlbnQgb3BlcmF0aW9uIG9mZiwgb3RoZXJ3aXNlIHRoZSB1cGRhdGVlbmQgaGFuZGxlciB3aWxsIGRvIHRoaXMgZm9yIHVzXG4gICAgICAgICAgdmFyIHNiID0gKF90aGlzJHRyYWNrcyR0eXBlID0gdGhpcy50cmFja3NbdHlwZV0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyR0cmFja3MkdHlwZS5idWZmZXI7XG4gICAgICAgICAgaWYgKCEoc2IgIT0gbnVsbCAmJiBzYi51cGRhdGluZykpIHtcbiAgICAgICAgICAgIHRoaXMuc2hpZnRBbmRFeGVjdXRlTmV4dCh0eXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5zaGlmdEFuZEV4ZWN1dGVOZXh0ID0gZnVuY3Rpb24gc2hpZnRBbmRFeGVjdXRlTmV4dCh0eXBlKSB7XG4gICAgICBpZiAodGhpcy5xdWV1ZXMgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5xdWV1ZXNbdHlwZV0uc2hpZnQoKTtcbiAgICAgIHRoaXMuZXhlY3V0ZU5leHQodHlwZSk7XG4gICAgfTtcbiAgICBfcHJvdG8uY3VycmVudCA9IGZ1bmN0aW9uIGN1cnJlbnQodHlwZSkge1xuICAgICAgdmFyIF90aGlzJHF1ZXVlcztcbiAgICAgIHJldHVybiAoKF90aGlzJHF1ZXVlcyA9IHRoaXMucXVldWVzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkcXVldWVzW3R5cGVdWzBdKSB8fCBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICB2YXIgcXVldWVzID0gdGhpcy5xdWV1ZXMsXG4gICAgICAgIHRyYWNrcyA9IHRoaXMudHJhY2tzO1xuICAgICAgaWYgKHF1ZXVlcyA9PT0gbnVsbCB8fCB0cmFja3MgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFwiPGRlc3Ryb3llZD5cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIlxcblwiICsgdGhpcy5saXN0KCd2aWRlbycpICsgXCJcXG5cIiArIHRoaXMubGlzdCgnYXVkaW8nKSArIFwiXFxuXCIgKyB0aGlzLmxpc3QoJ2F1ZGlvdmlkZW8nKSArIFwifVwiO1xuICAgIH07XG4gICAgX3Byb3RvLmxpc3QgPSBmdW5jdGlvbiBsaXN0KHR5cGUpIHtcbiAgICAgIHZhciBfdGhpcyRxdWV1ZXMyLCBfdGhpcyR0cmFja3M7XG4gICAgICByZXR1cm4gKF90aGlzJHF1ZXVlczIgPSB0aGlzLnF1ZXVlcykgIT0gbnVsbCAmJiBfdGhpcyRxdWV1ZXMyW3R5cGVdIHx8IChfdGhpcyR0cmFja3MgPSB0aGlzLnRyYWNrcykgIT0gbnVsbCAmJiBfdGhpcyR0cmFja3NbdHlwZV0gPyB0eXBlICsgXCI6IChcIiArIHRoaXMubGlzdFNiSW5mbyh0eXBlKSArIFwiKSBcIiArIHRoaXMubGlzdE9wcyh0eXBlKSA6ICcnO1xuICAgIH07XG4gICAgX3Byb3RvLmxpc3RTYkluZm8gPSBmdW5jdGlvbiBsaXN0U2JJbmZvKHR5cGUpIHtcbiAgICAgIHZhciBfdGhpcyR0cmFja3MyO1xuICAgICAgdmFyIHRyYWNrID0gKF90aGlzJHRyYWNrczIgPSB0aGlzLnRyYWNrcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHRyYWNrczJbdHlwZV07XG4gICAgICB2YXIgc2IgPSB0cmFjayA9PSBudWxsID8gdm9pZCAwIDogdHJhY2suYnVmZmVyO1xuICAgICAgaWYgKCFzYikge1xuICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwiU291cmNlQnVmZmVyXCIgKyAoc2IudXBkYXRpbmcgPyAnIHVwZGF0aW5nJyA6ICcnKSArICh0cmFjay5lbmRlZCA/ICcgZW5kZWQnIDogJycpICsgKHRyYWNrLmVuZGluZyA/ICcgZW5kaW5nJyA6ICcnKTtcbiAgICB9O1xuICAgIF9wcm90by5saXN0T3BzID0gZnVuY3Rpb24gbGlzdE9wcyh0eXBlKSB7XG4gICAgICB2YXIgX3RoaXMkcXVldWVzMztcbiAgICAgIHJldHVybiAoKF90aGlzJHF1ZXVlczMgPSB0aGlzLnF1ZXVlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHF1ZXVlczNbdHlwZV0ubWFwKGZ1bmN0aW9uIChvcCkge1xuICAgICAgICByZXR1cm4gb3AubGFiZWw7XG4gICAgICB9KS5qb2luKCcsICcpKSB8fCAnJztcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJPcGVyYXRpb25RdWV1ZTtcbiAgfSgpO1xuXG4gIHZhciBWSURFT19DT0RFQ19QUk9GSUxFX1JFUExBQ0UgPSAvKGF2Y1sxMjM0XXxodmMxfGhldjF8ZHZoWzFlXXx2cDA5fGF2MDEpKD86XFwuW14uLF0rKSsvO1xuICB2YXIgVFJBQ0tfUkVNT1ZFRF9FUlJPUl9OQU1FID0gJ0hsc0pzVHJhY2tSZW1vdmVkRXJyb3InO1xuICB2YXIgSGxzSnNUcmFja1JlbW92ZWRFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Vycm9yKSB7XG4gICAgZnVuY3Rpb24gSGxzSnNUcmFja1JlbW92ZWRFcnJvcihtZXNzYWdlKSB7XG4gICAgICB2YXIgX3RoaXM7XG4gICAgICBfdGhpcyA9IF9FcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5uYW1lID0gVFJBQ0tfUkVNT1ZFRF9FUlJPUl9OQU1FO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBfaW5oZXJpdHNMb29zZShIbHNKc1RyYWNrUmVtb3ZlZEVycm9yLCBfRXJyb3IpO1xuICAgIHJldHVybiBIbHNKc1RyYWNrUmVtb3ZlZEVycm9yO1xuICB9KC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7XG4gIHZhciBCdWZmZXJDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTG9nZ2VyKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyQ29udHJvbGxlcihobHMsIGZyYWdtZW50VHJhY2tlcikge1xuICAgICAgdmFyIF90aGlzMjtcbiAgICAgIF90aGlzMiA9IF9Mb2dnZXIuY2FsbCh0aGlzLCAnYnVmZmVyLWNvbnRyb2xsZXInLCBobHMubG9nZ2VyKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLmhscyA9IHZvaWQgMDtcbiAgICAgIF90aGlzMi5mcmFnbWVudFRyYWNrZXIgPSB2b2lkIDA7XG4gICAgICAvLyBUaGUgbGV2ZWwgZGV0YWlscyB1c2VkIHRvIGRldGVybWluZSBkdXJhdGlvbiwgdGFyZ2V0LWR1cmF0aW9uIGFuZCBsaXZlXG4gICAgICBfdGhpczIuZGV0YWlscyA9IG51bGw7XG4gICAgICAvLyBjYWNoZSB0aGUgc2VsZiBnZW5lcmF0ZWQgb2JqZWN0IHVybCB0byBkZXRlY3QgaGlqYWNrIG9mIHZpZGVvIHRhZ1xuICAgICAgX3RoaXMyLl9vYmplY3RVcmwgPSBudWxsO1xuICAgICAgLy8gQSBxdWV1ZSBvZiBidWZmZXIgb3BlcmF0aW9ucyB3aGljaCByZXF1aXJlIHRoZSBTb3VyY2VCdWZmZXIgdG8gbm90IGJlIHVwZGF0aW5nIHVwb24gZXhlY3V0aW9uXG4gICAgICBfdGhpczIub3BlcmF0aW9uUXVldWUgPSBudWxsO1xuICAgICAgLy8gVGhlIHRvdGFsIG51bWJlciB0cmFjayBjb2RlY3MgZXhwZWN0ZWQgYmVmb3JlIGFueSBzb3VyY2VCdWZmZXJzIGFyZSBjcmVhdGVkICgyOiBhdWRpbyBhbmQgdmlkZW8gb3IgMTogYXVkaW92aWRlbyB8IGF1ZGlvIHwgdmlkZW8pXG4gICAgICBfdGhpczIuYnVmZmVyQ29kZWNFdmVudHNUb3RhbCA9IDA7XG4gICAgICAvLyBBIHJlZmVyZW5jZSB0byB0aGUgYXR0YWNoZWQgbWVkaWEgZWxlbWVudFxuICAgICAgX3RoaXMyLm1lZGlhID0gbnVsbDtcbiAgICAgIC8vIEEgcmVmZXJlbmNlIHRvIHRoZSBhY3RpdmUgbWVkaWEgc291cmNlXG4gICAgICBfdGhpczIubWVkaWFTb3VyY2UgPSBudWxsO1xuICAgICAgLy8gTGFzdCBNUDMgYXVkaW8gY2h1bmsgYXBwZW5kZWRcbiAgICAgIF90aGlzMi5sYXN0TXBlZ0F1ZGlvQ2h1bmsgPSBudWxsO1xuICAgICAgLy8gQXVkaW8gZnJhZ21lbnQgYmxvY2tlZCBmcm9tIGFwcGVuZGluZyB1bnRpbCBjb3JyZXNwb25kaW5nIHZpZGVvIGFwcGVuZHMgb3IgY29udGV4dCBjaGFuZ2VzXG4gICAgICBfdGhpczIuYmxvY2tlZEF1ZGlvQXBwZW5kID0gbnVsbDtcbiAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdmlkZW8gYXBwZW5kIHBvc2l0aW9uIGZvciB1bmJsb2NraW5nIGF1ZGlvXG4gICAgICBfdGhpczIubGFzdFZpZGVvQXBwZW5kRW5kID0gMDtcbiAgICAgIC8vIFdoZXRoZXIgb3Igbm90IHRvIHVzZSBNYW5hZ2VkTWVkaWFTb3VyY2UgQVBJIGFuZCBhcHBlbmQgc291cmNlIGVsZW1lbnQgdG8gbWVkaWEgZWxlbWVudC5cbiAgICAgIF90aGlzMi5hcHBlbmRTb3VyY2UgPSB2b2lkIDA7XG4gICAgICAvLyBUcmFuc2ZlcnJlZCBNZWRpYVNvdXJjZSBpbmZvcm1hdGlvbiB1c2VkIHRvIGRldG1lcmluZSBpZiBkdXJhdGlvbiBlbmQgZW5kc3RyZWFtIG1heSBiZSBhcHBlbmRlZFxuICAgICAgX3RoaXMyLnRyYW5zZmVyRGF0YSA9IHZvaWQgMDtcbiAgICAgIC8vIERpcmVjdGl2ZXMgdXNlZCB0byBvdmVycmlkZSBkZWZhdWx0IE1lZGlhU291cmNlIGhhbmRsaW5nXG4gICAgICBfdGhpczIub3ZlcnJpZGVzID0gdm9pZCAwO1xuICAgICAgLy8gRXJyb3IgY291bnRlcnNcbiAgICAgIF90aGlzMi5hcHBlbmRFcnJvcnMgPSB7XG4gICAgICAgIGF1ZGlvOiAwLFxuICAgICAgICB2aWRlbzogMCxcbiAgICAgICAgYXVkaW92aWRlbzogMFxuICAgICAgfTtcbiAgICAgIC8vIFJlY29yZCBvZiByZXF1aXJlZCBvciBjcmVhdGVkIGJ1ZmZlcnMgYnkgdHlwZS4gU291cmNlQnVmZmVyIGlzIHN0b3JlZCBpbiBUcmFjay5idWZmZXIgb25jZSBjcmVhdGVkLlxuICAgICAgX3RoaXMyLnRyYWNrcyA9IHt9O1xuICAgICAgLy8gQXJyYXkgb2YgU291cmNlQnVmZmVyIHR5cGUgYW5kIFNvdXJjZUJ1ZmZlciAob3IgbnVsbCkuIE9uZSBlbnRyeSBwZXIgVHJhY2tTZXQgaW4gdGhpcy50cmFja3MuXG4gICAgICBfdGhpczIuc291cmNlQnVmZmVycyA9IFtbbnVsbCwgbnVsbF0sIFtudWxsLCBudWxsXV07XG4gICAgICBfdGhpczIuX29uRW5kU3RyZWFtaW5nID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpczIkbWVkaWFTb3VyY2U7XG4gICAgICAgIGlmICghX3RoaXMyLmhscykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKChfdGhpczIkbWVkaWFTb3VyY2UgPSBfdGhpczIubWVkaWFTb3VyY2UpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczIkbWVkaWFTb3VyY2UucmVhZHlTdGF0ZSkgIT09ICdvcGVuJykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczIuaGxzLnBhdXNlQnVmZmVyaW5nKCk7XG4gICAgICB9O1xuICAgICAgX3RoaXMyLl9vblN0YXJ0U3RyZWFtaW5nID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghX3RoaXMyLmhscykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczIuaGxzLnJlc3VtZUJ1ZmZlcmluZygpO1xuICAgICAgfTtcbiAgICAgIC8vIEtlZXAgYXMgYXJyb3cgZnVuY3Rpb25zIHNvIHRoYXQgd2UgY2FuIGRpcmVjdGx5IHJlZmVyZW5jZSB0aGVzZSBmdW5jdGlvbnMgZGlyZWN0bHkgYXMgZXZlbnQgbGlzdGVuZXJzXG4gICAgICBfdGhpczIuX29uTWVkaWFTb3VyY2VPcGVuID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IF90aGlzMixcbiAgICAgICAgICBtZWRpYSA9IF90aGlzMy5tZWRpYSxcbiAgICAgICAgICBtZWRpYVNvdXJjZSA9IF90aGlzMy5tZWRpYVNvdXJjZTtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICBfdGhpczIubG9nKCdNZWRpYSBzb3VyY2Ugb3BlbmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtZWRpYSB8fCAhbWVkaWFTb3VyY2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gb25jZSByZWNlaXZlZCwgZG9uJ3QgbGlzdGVuIGFueW1vcmUgdG8gc291cmNlb3BlbiBldmVudFxuICAgICAgICBtZWRpYVNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgX3RoaXMyLl9vbk1lZGlhU291cmNlT3Blbik7XG4gICAgICAgIG1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VtcHRpZWQnLCBfdGhpczIuX29uTWVkaWFFbXB0aWVkKTtcbiAgICAgICAgX3RoaXMyLnVwZGF0ZUR1cmF0aW9uKCk7XG4gICAgICAgIF90aGlzMi5obHMudHJpZ2dlcihFdmVudHMuTUVESUFfQVRUQUNIRUQsIHtcbiAgICAgICAgICBtZWRpYTogbWVkaWEsXG4gICAgICAgICAgbWVkaWFTb3VyY2U6IG1lZGlhU291cmNlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX3RoaXMyLm1lZGlhU291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMyLmNoZWNrUGVuZGluZ1RyYWNrcygpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgX3RoaXMyLl9vbk1lZGlhU291cmNlQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5sb2coJ01lZGlhIHNvdXJjZSBjbG9zZWQnKTtcbiAgICAgIH07XG4gICAgICBfdGhpczIuX29uTWVkaWFTb3VyY2VFbmRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmxvZygnTWVkaWEgc291cmNlIGVuZGVkJyk7XG4gICAgICB9O1xuICAgICAgX3RoaXMyLl9vbk1lZGlhRW1wdGllZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzNCA9IF90aGlzMixcbiAgICAgICAgICBtZWRpYVNyYyA9IF90aGlzNC5tZWRpYVNyYyxcbiAgICAgICAgICBfb2JqZWN0VXJsID0gX3RoaXM0Ll9vYmplY3RVcmw7XG4gICAgICAgIGlmIChtZWRpYVNyYyAhPT0gX29iamVjdFVybCkge1xuICAgICAgICAgIF90aGlzMi5lcnJvcihcIk1lZGlhIGVsZW1lbnQgc3JjIHdhcyBzZXQgd2hpbGUgYXR0YWNoaW5nIE1lZGlhU291cmNlIChcIiArIF9vYmplY3RVcmwgKyBcIiA+IFwiICsgbWVkaWFTcmMgKyBcIilcIik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBfdGhpczIuaGxzID0gaGxzO1xuICAgICAgX3RoaXMyLmZyYWdtZW50VHJhY2tlciA9IGZyYWdtZW50VHJhY2tlcjtcbiAgICAgIF90aGlzMi5hcHBlbmRTb3VyY2UgPSBpc01hbmFnZWRNZWRpYVNvdXJjZShnZXRNZWRpYVNvdXJjZShobHMuY29uZmlnLnByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSkpO1xuICAgICAgX3RoaXMyLmluaXRUcmFja3MoKTtcbiAgICAgIF90aGlzMi5yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG4gICAgX2luaGVyaXRzTG9vc2UoQnVmZmVyQ29udHJvbGxlciwgX0xvZ2dlcik7XG4gICAgdmFyIF9wcm90byA9IEJ1ZmZlckNvbnRyb2xsZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5oYXNTb3VyY2VUeXBlcyA9IGZ1bmN0aW9uIGhhc1NvdXJjZVR5cGVzKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMudHJhY2tzKS5sZW5ndGggPiAwO1xuICAgIH07XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy51bnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLmRldGFpbHMgPSBudWxsO1xuICAgICAgdGhpcy5sYXN0TXBlZ0F1ZGlvQ2h1bmsgPSB0aGlzLmJsb2NrZWRBdWRpb0FwcGVuZCA9IG51bGw7XG4gICAgICB0aGlzLnRyYW5zZmVyRGF0YSA9IHRoaXMub3ZlcnJpZGVzID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKHRoaXMub3BlcmF0aW9uUXVldWUpIHtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25RdWV1ZS5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMub3BlcmF0aW9uUXVldWUgPSBudWxsO1xuICAgICAgfVxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5obHMgPSB0aGlzLmZyYWdtZW50VHJhY2tlciA9IG51bGw7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLl9vbk1lZGlhU291cmNlT3BlbiA9IHRoaXMuX29uTWVkaWFTb3VyY2VDbG9zZSA9IG51bGw7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLl9vbk1lZGlhU291cmNlRW5kZWQgPSBudWxsO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5fb25TdGFydFN0cmVhbWluZyA9IHRoaXMuX29uRW5kU3RyZWFtaW5nID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NRURJQV9BVFRBQ0hJTkcsIHRoaXMub25NZWRpYUF0dGFjaGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLk1FRElBX0RFVEFDSElORywgdGhpcy5vbk1lZGlhRGV0YWNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUFOSUZFU1RfTE9BRElORywgdGhpcy5vbk1hbmlmZXN0TG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLk1BTklGRVNUX1BBUlNFRCwgdGhpcy5vbk1hbmlmZXN0UGFyc2VkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuQlVGRkVSX1JFU0VULCB0aGlzLm9uQnVmZmVyUmVzZXQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5CVUZGRVJfQVBQRU5ESU5HLCB0aGlzLm9uQnVmZmVyQXBwZW5kaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuQlVGRkVSX0NPREVDUywgdGhpcy5vbkJ1ZmZlckNvZGVjcywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkJVRkZFUl9FT1MsIHRoaXMub25CdWZmZXJFb3MsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5CVUZGRVJfRkxVU0hJTkcsIHRoaXMub25CdWZmZXJGbHVzaGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkxFVkVMX1VQREFURUQsIHRoaXMub25MZXZlbFVwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5GUkFHX1BBUlNFRCwgdGhpcy5vbkZyYWdQYXJzZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5GUkFHX0NIQU5HRUQsIHRoaXMub25GcmFnQ2hhbmdlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkVSUk9SLCB0aGlzLm9uRXJyb3IsIHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLnVucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUVESUFfQVRUQUNISU5HLCB0aGlzLm9uTWVkaWFBdHRhY2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUVESUFfREVUQUNISU5HLCB0aGlzLm9uTWVkaWFEZXRhY2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUFOSUZFU1RfTE9BRElORywgdGhpcy5vbk1hbmlmZXN0TG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NQU5JRkVTVF9QQVJTRUQsIHRoaXMub25NYW5pZmVzdFBhcnNlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5CVUZGRVJfUkVTRVQsIHRoaXMub25CdWZmZXJSZXNldCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5CVUZGRVJfQVBQRU5ESU5HLCB0aGlzLm9uQnVmZmVyQXBwZW5kaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkJVRkZFUl9DT0RFQ1MsIHRoaXMub25CdWZmZXJDb2RlY3MsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuQlVGRkVSX0VPUywgdGhpcy5vbkJ1ZmZlckVvcywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5CVUZGRVJfRkxVU0hJTkcsIHRoaXMub25CdWZmZXJGbHVzaGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5MRVZFTF9VUERBVEVELCB0aGlzLm9uTGV2ZWxVcGRhdGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkZSQUdfUEFSU0VELCB0aGlzLm9uRnJhZ1BhcnNlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5GUkFHX0NIQU5HRUQsIHRoaXMub25GcmFnQ2hhbmdlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5FUlJPUiwgdGhpcy5vbkVycm9yLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by50cmFuc2Zlck1lZGlhID0gZnVuY3Rpb24gdHJhbnNmZXJNZWRpYSgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYSxcbiAgICAgICAgbWVkaWFTb3VyY2UgPSB0aGlzLm1lZGlhU291cmNlO1xuICAgICAgaWYgKCFtZWRpYSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciB0cmFja3MgPSB7fTtcbiAgICAgIGlmICh0aGlzLm9wZXJhdGlvblF1ZXVlKSB7XG4gICAgICAgIHZhciB1cGRhdGluZyA9IHRoaXMuaXNVcGRhdGluZygpO1xuICAgICAgICBpZiAoIXVwZGF0aW5nKSB7XG4gICAgICAgICAgdGhpcy5vcGVyYXRpb25RdWV1ZS5yZW1vdmVCbG9ja2VycygpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBxdWV1ZWQgPSB0aGlzLmlzUXVldWVkKCk7XG4gICAgICAgIGlmICh1cGRhdGluZyB8fCBxdWV1ZWQpIHtcbiAgICAgICAgICB0aGlzLndhcm4oXCJUcmFuc2ZlcmluZyBNZWRpYVNvdXJjZSB3aXRoXCIgKyAocXVldWVkID8gJyBvcGVyYXRpb25zIGluIHF1ZXVlJyA6ICcnKSArICh1cGRhdGluZyA/ICcgdXBkYXRpbmcgU291cmNlQnVmZmVyKHMpJyA6ICcnKSArIFwiIFwiICsgdGhpcy5vcGVyYXRpb25RdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcGVyYXRpb25RdWV1ZS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICB2YXIgdHJhbnNmZXJEYXRhID0gdGhpcy50cmFuc2ZlckRhdGE7XG4gICAgICBpZiAoIXRoaXMuc291cmNlQnVmZmVyQ291bnQgJiYgdHJhbnNmZXJEYXRhICYmIHRyYW5zZmVyRGF0YS5tZWRpYVNvdXJjZSA9PT0gbWVkaWFTb3VyY2UpIHtcbiAgICAgICAgX2V4dGVuZHModHJhY2tzLCB0cmFuc2ZlckRhdGEudHJhY2tzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc291cmNlQnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uICh0dXBsZSkge1xuICAgICAgICAgIHZhciB0eXBlID0gdHVwbGVbMF07XG4gICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIHRyYWNrc1t0eXBlXSA9IF9leHRlbmRzKHt9LCBfdGhpczUudHJhY2tzW3R5cGVdKTtcbiAgICAgICAgICAgIF90aGlzNS5yZW1vdmVCdWZmZXIodHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHR1cGxlWzBdID0gdHVwbGVbMV0gPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgICAgbWVkaWFTb3VyY2U6IG1lZGlhU291cmNlLFxuICAgICAgICB0cmFja3M6IHRyYWNrc1xuICAgICAgfTtcbiAgICB9O1xuICAgIF9wcm90by5pbml0VHJhY2tzID0gZnVuY3Rpb24gaW5pdFRyYWNrcygpIHtcbiAgICAgIHZhciB0cmFja3MgPSB7fTtcbiAgICAgIHRoaXMuc291cmNlQnVmZmVycyA9IFtbbnVsbCwgbnVsbF0sIFtudWxsLCBudWxsXV07XG4gICAgICB0aGlzLnRyYWNrcyA9IHRyYWNrcztcbiAgICAgIHRoaXMucmVzZXRRdWV1ZSgpO1xuICAgICAgdGhpcy5yZXNldEFwcGVuZEVycm9ycygpO1xuICAgICAgdGhpcy5sYXN0TXBlZ0F1ZGlvQ2h1bmsgPSB0aGlzLmJsb2NrZWRBdWRpb0FwcGVuZCA9IG51bGw7XG4gICAgICB0aGlzLmxhc3RWaWRlb0FwcGVuZEVuZCA9IDA7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NYW5pZmVzdExvYWRpbmcgPSBmdW5jdGlvbiBvbk1hbmlmZXN0TG9hZGluZygpIHtcbiAgICAgIHRoaXMuYnVmZmVyQ29kZWNFdmVudHNUb3RhbCA9IDA7XG4gICAgICB0aGlzLmRldGFpbHMgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTWFuaWZlc3RQYXJzZWQgPSBmdW5jdGlvbiBvbk1hbmlmZXN0UGFyc2VkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgX3RoaXMkdHJhbnNmZXJEYXRhO1xuICAgICAgLy8gaW4gY2FzZSBvZiBhbHQgYXVkaW8gMiBCVUZGRVJfQ09ERUNTIGV2ZW50cyB3aWxsIGJlIHRyaWdnZXJlZCwgb25lIHBlciBzdHJlYW0gY29udHJvbGxlclxuICAgICAgLy8gc291cmNlYnVmZmVycyB3aWxsIGJlIGNyZWF0ZWQgYWxsIGF0IG9uY2Ugd2hlbiB0aGUgZXhwZWN0ZWQgbmIgb2YgdHJhY2tzIHdpbGwgYmUgcmVhY2hlZFxuICAgICAgLy8gaW4gY2FzZSBhbHQgYXVkaW8gaXMgbm90IHVzZWQsIG9ubHkgb25lIEJVRkZFUl9DT0RFQyBldmVudCB3aWxsIGJlIGZpcmVkIGZyb20gbWFpbiBzdHJlYW0gY29udHJvbGxlclxuICAgICAgLy8gaXQgd2lsbCBjb250YWluIHRoZSBleHBlY3RlZCBuYiBvZiBzb3VyY2UgYnVmZmVycywgbm8gbmVlZCB0byBjb21wdXRlIGl0XG4gICAgICB2YXIgY29kZWNFdmVudHMgPSAyO1xuICAgICAgaWYgKGRhdGEuYXVkaW8gJiYgIWRhdGEudmlkZW8gfHwgIWRhdGEuYWx0QXVkaW8pIHtcbiAgICAgICAgY29kZWNFdmVudHMgPSAxO1xuICAgICAgfVxuICAgICAgdGhpcy5idWZmZXJDb2RlY0V2ZW50c1RvdGFsID0gY29kZWNFdmVudHM7XG4gICAgICB0aGlzLmxvZyhjb2RlY0V2ZW50cyArIFwiIGJ1ZmZlckNvZGVjIGV2ZW50KHMpIGV4cGVjdGVkLlwiKTtcbiAgICAgIGlmICgoX3RoaXMkdHJhbnNmZXJEYXRhID0gdGhpcy50cmFuc2ZlckRhdGEpICE9IG51bGwgJiYgX3RoaXMkdHJhbnNmZXJEYXRhLm1lZGlhU291cmNlICYmIHRoaXMuc291cmNlQnVmZmVyQ291bnQgJiYgY29kZWNFdmVudHMpIHtcbiAgICAgICAgdGhpcy5idWZmZXJDcmVhdGVkKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYUF0dGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFBdHRhY2hpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWEgPSBkYXRhLm1lZGlhO1xuICAgICAgdmFyIE1lZGlhU291cmNlID0gZ2V0TWVkaWFTb3VyY2UodGhpcy5hcHBlbmRTb3VyY2UpO1xuICAgICAgdGhpcy50cmFuc2ZlckRhdGEgPSB0aGlzLm92ZXJyaWRlcyA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChtZWRpYSAmJiBNZWRpYVNvdXJjZSkge1xuICAgICAgICB2YXIgdHJhbnNmZXJyaW5nTWVkaWEgPSAhIWRhdGEubWVkaWFTb3VyY2U7XG4gICAgICAgIGlmICh0cmFuc2ZlcnJpbmdNZWRpYSB8fCBkYXRhLm92ZXJyaWRlcykge1xuICAgICAgICAgIHRoaXMudHJhbnNmZXJEYXRhID0gZGF0YTtcbiAgICAgICAgICB0aGlzLm92ZXJyaWRlcyA9IGRhdGEub3ZlcnJpZGVzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtcyA9IHRoaXMubWVkaWFTb3VyY2UgPSBkYXRhLm1lZGlhU291cmNlIHx8IG5ldyBNZWRpYVNvdXJjZSgpO1xuICAgICAgICB0aGlzLmFzc2lnbk1lZGlhU291cmNlKG1zKTtcbiAgICAgICAgaWYgKHRyYW5zZmVycmluZ01lZGlhKSB7XG4gICAgICAgICAgdGhpcy5fb2JqZWN0VXJsID0gbWVkaWEuc3JjO1xuICAgICAgICAgIHRoaXMuYXR0YWNoVHJhbnNmZXJyZWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjYWNoZSB0aGUgbG9jYWxseSBnZW5lcmF0ZWQgb2JqZWN0IHVybFxuICAgICAgICAgIHZhciBvYmplY3RVcmwgPSB0aGlzLl9vYmplY3RVcmwgPSBzZWxmLlVSTC5jcmVhdGVPYmplY3RVUkwobXMpO1xuICAgICAgICAgIC8vIGxpbmsgdmlkZW8gYW5kIG1lZGlhIFNvdXJjZVxuICAgICAgICAgIGlmICh0aGlzLmFwcGVuZFNvdXJjZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbWVkaWEucmVtb3ZlQXR0cmlidXRlKCdzcmMnKTtcbiAgICAgICAgICAgICAgLy8gTWFuYWdlZE1lZGlhU291cmNlIHdpbGwgbm90IG9wZW4gd2l0aG91dCBkaXNhYmxlUmVtb3RlUGxheWJhY2sgc2V0IHRvIGZhbHNlIG9yIHNvdXJjZSBhbHRlcm5hdGl2ZXNcbiAgICAgICAgICAgICAgdmFyIE1NUyA9IHNlbGYuTWFuYWdlZE1lZGlhU291cmNlO1xuICAgICAgICAgICAgICBtZWRpYS5kaXNhYmxlUmVtb3RlUGxheWJhY2sgPSBtZWRpYS5kaXNhYmxlUmVtb3RlUGxheWJhY2sgfHwgTU1TICYmIG1zIGluc3RhbmNlb2YgTU1TO1xuICAgICAgICAgICAgICByZW1vdmVTb3VyY2VDaGlsZHJlbihtZWRpYSk7XG4gICAgICAgICAgICAgIGFkZFNvdXJjZShtZWRpYSwgb2JqZWN0VXJsKTtcbiAgICAgICAgICAgICAgbWVkaWEubG9hZCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgbWVkaWEuc3JjID0gb2JqZWN0VXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZWRpYS5zcmMgPSBvYmplY3RVcmw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2VtcHRpZWQnLCB0aGlzLl9vbk1lZGlhRW1wdGllZCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uYXNzaWduTWVkaWFTb3VyY2UgPSBmdW5jdGlvbiBhc3NpZ25NZWRpYVNvdXJjZShtcykge1xuICAgICAgdmFyIF90aGlzJHRyYW5zZmVyRGF0YTIsIF9tcyRjb25zdHJ1Y3RvcjtcbiAgICAgIHRoaXMubG9nKCgoKF90aGlzJHRyYW5zZmVyRGF0YTIgPSB0aGlzLnRyYW5zZmVyRGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHRyYW5zZmVyRGF0YTIubWVkaWFTb3VyY2UpID09PSBtcyA/ICd0cmFuc2ZlcnJlZCcgOiAnY3JlYXRlZCcpICsgXCIgbWVkaWEgc291cmNlOiBcIiArICgoX21zJGNvbnN0cnVjdG9yID0gbXMuY29uc3RydWN0b3IpID09IG51bGwgPyB2b2lkIDAgOiBfbXMkY29uc3RydWN0b3IubmFtZSkpO1xuICAgICAgLy8gTWVkaWFTb3VyY2UgbGlzdGVuZXJzIGFyZSBhcnJvdyBmdW5jdGlvbnMgd2l0aCBhIGxleGljYWwgc2NvcGUsIGFuZCBkbyBub3QgbmVlZCB0byBiZSBib3VuZFxuICAgICAgbXMuYWRkRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMuX29uTWVkaWFTb3VyY2VPcGVuKTtcbiAgICAgIG1zLmFkZEV2ZW50TGlzdGVuZXIoJ3NvdXJjZWVuZGVkJywgdGhpcy5fb25NZWRpYVNvdXJjZUVuZGVkKTtcbiAgICAgIG1zLmFkZEV2ZW50TGlzdGVuZXIoJ3NvdXJjZWNsb3NlJywgdGhpcy5fb25NZWRpYVNvdXJjZUNsb3NlKTtcbiAgICAgIGlmICh0aGlzLmFwcGVuZFNvdXJjZSkge1xuICAgICAgICBtcy5hZGRFdmVudExpc3RlbmVyKCdzdGFydHN0cmVhbWluZycsIHRoaXMuX29uU3RhcnRTdHJlYW1pbmcpO1xuICAgICAgICBtcy5hZGRFdmVudExpc3RlbmVyKCdlbmRzdHJlYW1pbmcnLCB0aGlzLl9vbkVuZFN0cmVhbWluZyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uYXR0YWNoVHJhbnNmZXJyZWQgPSBmdW5jdGlvbiBhdHRhY2hUcmFuc2ZlcnJlZCgpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIHZhciBkYXRhID0gdGhpcy50cmFuc2ZlckRhdGE7XG4gICAgICBpZiAoIWRhdGEgfHwgIW1lZGlhKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciByZXF1aXJlZFRyYWNrcyA9IHRoaXMudHJhY2tzO1xuICAgICAgdmFyIHRyYW5zZmVycmVkVHJhY2tzID0gZGF0YS50cmFja3M7XG4gICAgICB2YXIgdHJhY2tOYW1lcyA9IHRyYW5zZmVycmVkVHJhY2tzID8gT2JqZWN0LmtleXModHJhbnNmZXJyZWRUcmFja3MpIDogbnVsbDtcbiAgICAgIHZhciB0cmFja0NvdW50ID0gdHJhY2tOYW1lcyA/IHRyYWNrTmFtZXMubGVuZ3RoIDogMDtcbiAgICAgIHZhciBtZWRpYVNvdXJjZU9wZW5DYWxsYmFjayA9IGZ1bmN0aW9uIG1lZGlhU291cmNlT3BlbkNhbGxiYWNrKCkge1xuICAgICAgICBpZiAoX3RoaXM2Lm1lZGlhICYmIF90aGlzNi5tZWRpYVNvdXJjZU9wZW5PckVuZGVkKSB7XG4gICAgICAgICAgX3RoaXM2Ll9vbk1lZGlhU291cmNlT3BlbigpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKHRyYW5zZmVycmVkVHJhY2tzICYmIHRyYWNrTmFtZXMgJiYgdHJhY2tDb3VudCkge1xuICAgICAgICBpZiAoIXRoaXMudHJhY2tzUmVhZHkpIHtcbiAgICAgICAgICAvLyBXYWl0IGZvciBDT0RFQ1MgZXZlbnQocylcbiAgICAgICAgICB0aGlzLmhscy5jb25maWcuc3RhcnRGcmFnUHJlZmV0Y2ggPSB0cnVlO1xuICAgICAgICAgIHRoaXMubG9nKFwiYXR0YWNoVHJhbnNmZXJyZWQ6IHdhaXRpbmcgZm9yIFNvdXJjZUJ1ZmZlciB0cmFjayBpbmZvXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZyhcImF0dGFjaFRyYW5zZmVycmVkOiAoYnVmZmVyQ29kZWNFdmVudHNUb3RhbCBcIiArIHRoaXMuYnVmZmVyQ29kZWNFdmVudHNUb3RhbCArIFwiKVxcbnJlcXVpcmVkIHRyYWNrczogXCIgKyBzdHJpbmdpZnkocmVxdWlyZWRUcmFja3MsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGtleSA9PT0gJ2luaXRTZWdtZW50JyA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgICAgICB9KSArIFwiO1xcbnRyYW5zZmVyIHRyYWNrczogXCIgKyBzdHJpbmdpZnkodHJhbnNmZXJyZWRUcmFja3MsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGtleSA9PT0gJ2luaXRTZWdtZW50JyA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgICAgICB9KSArIFwifVwiKTtcbiAgICAgICAgaWYgKCFpc0NvbXBhdGlibGVUcmFja0NoYW5nZSh0cmFuc2ZlcnJlZFRyYWNrcywgcmVxdWlyZWRUcmFja3MpKSB7XG4gICAgICAgICAgLy8gZGVzdHJveSBhdHRhY2hpbmcgbWVkaWEgc291cmNlXG4gICAgICAgICAgZGF0YS5tZWRpYVNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgZGF0YS50cmFja3MgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gbWVkaWEuY3VycmVudFRpbWU7XG4gICAgICAgICAgdmFyIGRldGFpbHMgPSB0aGlzLmRldGFpbHM7XG4gICAgICAgICAgdmFyIHN0YXJ0VGltZSA9IE1hdGgubWF4KGN1cnJlbnRUaW1lLCAoZGV0YWlscyA9PSBudWxsID8gdm9pZCAwIDogZGV0YWlscy5mcmFnbWVudHNbMF0uc3RhcnQpIHx8IDApO1xuICAgICAgICAgIGlmIChzdGFydFRpbWUgLSBjdXJyZW50VGltZSA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMubG9nKFwiYXR0YWNoVHJhbnNmZXJyZWQ6IHdhaXRpbmcgZm9yIHBsYXliYWNrIHRvIHJlYWNoIG5ldyB0cmFja3Mgc3RhcnQgdGltZSBcIiArIGN1cnJlbnRUaW1lICsgXCIgLT4gXCIgKyBzdGFydFRpbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLndhcm4oXCJhdHRhY2hUcmFuc2ZlcnJlZDogcmVzZXR0aW5nIE1lZGlhU291cmNlIGZvciBpbmNvbXBhdGlibGUgdHJhY2tzIChcXFwiXCIgKyBPYmplY3Qua2V5cyh0cmFuc2ZlcnJlZFRyYWNrcykgKyBcIlxcXCItPlxcXCJcIiArIE9iamVjdC5rZXlzKHJlcXVpcmVkVHJhY2tzKSArIFwiXFxcIikgc3RhcnQgdGltZTogXCIgKyBzdGFydFRpbWUgKyBcIiBjdXJyZW50VGltZTogXCIgKyBjdXJyZW50VGltZSk7XG4gICAgICAgICAgdGhpcy5vbk1lZGlhRGV0YWNoaW5nKEV2ZW50cy5NRURJQV9ERVRBQ0hJTkcsIHt9KTtcbiAgICAgICAgICB0aGlzLm9uTWVkaWFBdHRhY2hpbmcoRXZlbnRzLk1FRElBX0FUVEFDSElORywgZGF0YSk7XG4gICAgICAgICAgbWVkaWEuY3VycmVudFRpbWUgPSBzdGFydFRpbWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhbnNmZXJEYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB0cmFja05hbWVzLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrTmFtZSkge1xuICAgICAgICAgIHZhciB0eXBlID0gdHJhY2tOYW1lO1xuICAgICAgICAgIHZhciB0cmFjayA9IHRyYW5zZmVycmVkVHJhY2tzW3R5cGVdO1xuICAgICAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAgICAgdmFyIHNiID0gdHJhY2suYnVmZmVyO1xuICAgICAgICAgICAgaWYgKHNiKSB7XG4gICAgICAgICAgICAgIC8vIFB1cmdlIGZyYWdtZW50IHRyYWNrZXIgb2YgZWplY3RlZCBzZWdtZW50cyBmb3IgZXhpc3RpbmcgYnVmZmVyXG4gICAgICAgICAgICAgIHZhciBmcmFnbWVudFRyYWNrZXIgPSBfdGhpczYuZnJhZ21lbnRUcmFja2VyO1xuICAgICAgICAgICAgICB2YXIgcGxheWxpc3RUeXBlID0gdHJhY2suaWQ7XG4gICAgICAgICAgICAgIGlmIChmcmFnbWVudFRyYWNrZXIuaGFzRnJhZ21lbnRzKHBsYXlsaXN0VHlwZSkgfHwgZnJhZ21lbnRUcmFja2VyLmhhc1BhcnRzKHBsYXlsaXN0VHlwZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyZWRUaW1lUmFuZ2VzID0gQnVmZmVySGVscGVyLmdldEJ1ZmZlcmVkKHNiKTtcbiAgICAgICAgICAgICAgICBmcmFnbWVudFRyYWNrZXIuZGV0ZWN0RXZpY3RlZEZyYWdtZW50cyh0eXBlLCBidWZmZXJlZFRpbWVSYW5nZXMsIHBsYXlsaXN0VHlwZSwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gVHJhbnNmZXIgU291cmNlQnVmZmVyXG4gICAgICAgICAgICAgIHZhciBzYkluZGV4ID0gc291cmNlQnVmZmVyTmFtZVRvSW5kZXgodHlwZSk7XG4gICAgICAgICAgICAgIHZhciBzYlR1cGxlID0gW3R5cGUsIHNiXTtcbiAgICAgICAgICAgICAgX3RoaXM2LnNvdXJjZUJ1ZmZlcnNbc2JJbmRleF0gPSBzYlR1cGxlO1xuICAgICAgICAgICAgICBpZiAoc2IudXBkYXRpbmcgJiYgX3RoaXM2Lm9wZXJhdGlvblF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXM2Lm9wZXJhdGlvblF1ZXVlLnByZXBlbmRCbG9ja2VyKHR5cGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF90aGlzNi50cmFja1NvdXJjZUJ1ZmZlcih0eXBlLCB0cmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbWVkaWFTb3VyY2VPcGVuQ2FsbGJhY2soKTtcbiAgICAgICAgdGhpcy5idWZmZXJDcmVhdGVkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxvZyhcImF0dGFjaFRyYW5zZmVycmVkOiBNZWRpYVNvdXJjZSB3L28gU291cmNlQnVmZmVyc1wiKTtcbiAgICAgICAgbWVkaWFTb3VyY2VPcGVuQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbk1lZGlhRGV0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYURldGFjaGluZyhldmVudCwgZGF0YSkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG4gICAgICB2YXIgdHJhbnNmZXJyaW5nTWVkaWEgPSAhIWRhdGEudHJhbnNmZXJNZWRpYTtcbiAgICAgIHRoaXMudHJhbnNmZXJEYXRhID0gdGhpcy5vdmVycmlkZXMgPSB1bmRlZmluZWQ7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhLFxuICAgICAgICBtZWRpYVNvdXJjZSA9IHRoaXMubWVkaWFTb3VyY2UsXG4gICAgICAgIF9vYmplY3RVcmwgPSB0aGlzLl9vYmplY3RVcmw7XG4gICAgICBpZiAobWVkaWFTb3VyY2UpIHtcbiAgICAgICAgdGhpcy5sb2coXCJtZWRpYSBzb3VyY2UgXCIgKyAodHJhbnNmZXJyaW5nTWVkaWEgPyAndHJhbnNmZXJyaW5nJyA6ICdkZXRhY2hpbmcnKSk7XG4gICAgICAgIGlmICh0cmFuc2ZlcnJpbmdNZWRpYSkge1xuICAgICAgICAgIC8vIERldGFjaCBTb3VyY2VCdWZmZXJzIHdpdGhvdXQgcmVtb3ZpbmcgZnJvbSBNZWRpYVNvdXJjZVxuICAgICAgICAgIC8vIGFuZCBsZWF2ZSBgdHJhY2tzYCAocmVxdWlyZWQgU291cmNlQnVmZmVycyBjb25maWd1cmF0aW9uKVxuICAgICAgICAgIHRoaXMuc291cmNlQnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IF9yZWZbMF07XG4gICAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgICBfdGhpczcucmVtb3ZlQnVmZmVyKHR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMucmVzZXRRdWV1ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLm1lZGlhU291cmNlT3Blbk9yRW5kZWQpIHtcbiAgICAgICAgICAgIHZhciBvcGVuID0gbWVkaWFTb3VyY2UucmVhZHlTdGF0ZSA9PT0gJ29wZW4nO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIHNvdXJjZUJ1ZmZlcnMgPSBtZWRpYVNvdXJjZS5zb3VyY2VCdWZmZXJzO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gc291cmNlQnVmZmVycy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICBpZiAob3Blbikge1xuICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyc1tpXS5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZWRpYVNvdXJjZS5yZW1vdmVTb3VyY2VCdWZmZXIoc291cmNlQnVmZmVyc1tpXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBlbmRPZlN0cmVhbSBjb3VsZCB0cmlnZ2VyIGV4Y2VwdGlvbiBpZiBhbnkgc291cmNlYnVmZmVyIGlzIGluIHVwZGF0aW5nIHN0YXRlXG4gICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgcmVhbGx5IGNhcmUgYWJvdXQgY2hlY2tpbmcgc291cmNlYnVmZmVyIHN0YXRlIGhlcmUsXG4gICAgICAgICAgICAgICAgLy8gYXMgd2UgYXJlIGFueXdheSBkZXRhY2hpbmcgdGhlIE1lZGlhU291cmNlXG4gICAgICAgICAgICAgICAgLy8gbGV0J3MganVzdCBhdm9pZCB0aGlzIGV4Y2VwdGlvbiB0byBwcm9wYWdhdGVcbiAgICAgICAgICAgICAgICBtZWRpYVNvdXJjZS5lbmRPZlN0cmVhbSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgdGhpcy53YXJuKFwib25NZWRpYURldGFjaGluZzogXCIgKyBlcnIubWVzc2FnZSArIFwiIHdoaWxlIGNhbGxpbmcgZW5kT2ZTdHJlYW1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIENsZWFuIHVwIHRoZSBTb3VyY2VCdWZmZXJzIGJ5IGludm9raW5nIG9uQnVmZmVyUmVzZXRcbiAgICAgICAgICBpZiAodGhpcy5zb3VyY2VCdWZmZXJDb3VudCkge1xuICAgICAgICAgICAgdGhpcy5vbkJ1ZmZlclJlc2V0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1lZGlhU291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NvdXJjZW9wZW4nLCB0aGlzLl9vbk1lZGlhU291cmNlT3Blbik7XG4gICAgICAgIG1lZGlhU291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NvdXJjZWVuZGVkJywgdGhpcy5fb25NZWRpYVNvdXJjZUVuZGVkKTtcbiAgICAgICAgbWVkaWFTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignc291cmNlY2xvc2UnLCB0aGlzLl9vbk1lZGlhU291cmNlQ2xvc2UpO1xuICAgICAgICBpZiAodGhpcy5hcHBlbmRTb3VyY2UpIHtcbiAgICAgICAgICBtZWRpYVNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdzdGFydHN0cmVhbWluZycsIHRoaXMuX29uU3RhcnRTdHJlYW1pbmcpO1xuICAgICAgICAgIG1lZGlhU291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZHN0cmVhbWluZycsIHRoaXMuX29uRW5kU3RyZWFtaW5nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1lZGlhU291cmNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb2JqZWN0VXJsID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gRGV0YWNoIHByb3Blcmx5IHRoZSBNZWRpYVNvdXJjZSBmcm9tIHRoZSBIVE1MTWVkaWFFbGVtZW50IGFzXG4gICAgICAvLyBzdWdnZXN0ZWQgaW4gaHR0cHM6Ly9naXRodWIuY29tL3czYy9tZWRpYS1zb3VyY2UvaXNzdWVzLzUzLlxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIG1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VtcHRpZWQnLCB0aGlzLl9vbk1lZGlhRW1wdGllZCk7XG4gICAgICAgIGlmICghdHJhbnNmZXJyaW5nTWVkaWEpIHtcbiAgICAgICAgICBpZiAoX29iamVjdFVybCkge1xuICAgICAgICAgICAgc2VsZi5VUkwucmV2b2tlT2JqZWN0VVJMKF9vYmplY3RVcmwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGNsZWFuIHVwIHZpZGVvIHRhZyBzcmMgb25seSBpZiBpdCdzIG91ciBvd24gdXJsLiBzb21lIGV4dGVybmFsIGxpYnJhcmllcyBtaWdodFxuICAgICAgICAgIC8vIGhpamFjayB0aGUgdmlkZW8gdGFnIGFuZCBjaGFuZ2UgaXRzICdzcmMnIHdpdGhvdXQgZGVzdHJveWluZyB0aGUgSGxzIGluc3RhbmNlIGZpcnN0XG4gICAgICAgICAgaWYgKHRoaXMubWVkaWFTcmMgPT09IF9vYmplY3RVcmwpIHtcbiAgICAgICAgICAgIG1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgICAgICAgICBpZiAodGhpcy5hcHBlbmRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgcmVtb3ZlU291cmNlQ2hpbGRyZW4obWVkaWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWVkaWEubG9hZCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLndhcm4oJ21lZGlhfHNvdXJjZS5zcmMgd2FzIGNoYW5nZWQgYnkgYSB0aGlyZCBwYXJ0eSAtIHNraXAgY2xlYW51cCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1lZGlhID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLk1FRElBX0RFVEFDSEVELCBkYXRhKTtcbiAgICB9O1xuICAgIF9wcm90by5vbkJ1ZmZlclJlc2V0ID0gZnVuY3Rpb24gb25CdWZmZXJSZXNldCgpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuICAgICAgdGhpcy5zb3VyY2VCdWZmZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgIHZhciB0eXBlID0gX3JlZjJbMF07XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgX3RoaXM4LnJlc2V0QnVmZmVyKHR5cGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuaW5pdFRyYWNrcygpO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0QnVmZmVyID0gZnVuY3Rpb24gcmVzZXRCdWZmZXIodHlwZSkge1xuICAgICAgdmFyIF90aGlzJHRyYWNrcyR0eXBlO1xuICAgICAgdmFyIHNiID0gKF90aGlzJHRyYWNrcyR0eXBlID0gdGhpcy50cmFja3NbdHlwZV0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyR0cmFja3MkdHlwZS5idWZmZXI7XG4gICAgICB0aGlzLnJlbW92ZUJ1ZmZlcih0eXBlKTtcbiAgICAgIGlmIChzYikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBfdGhpcyRtZWRpYVNvdXJjZTtcbiAgICAgICAgICBpZiAoKF90aGlzJG1lZGlhU291cmNlID0gdGhpcy5tZWRpYVNvdXJjZSkgIT0gbnVsbCAmJiBfdGhpcyRtZWRpYVNvdXJjZS5zb3VyY2VCdWZmZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5tZWRpYVNvdXJjZS5yZW1vdmVTb3VyY2VCdWZmZXIoc2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgdGhpcy53YXJuKFwib25CdWZmZXJSZXNldCBcIiArIHR5cGUsIGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLnRyYWNrc1t0eXBlXTtcbiAgICB9O1xuICAgIF9wcm90by5yZW1vdmVCdWZmZXIgPSBmdW5jdGlvbiByZW1vdmVCdWZmZXIodHlwZSkge1xuICAgICAgdGhpcy5yZW1vdmVCdWZmZXJMaXN0ZW5lcnModHlwZSk7XG4gICAgICB0aGlzLnNvdXJjZUJ1ZmZlcnNbc291cmNlQnVmZmVyTmFtZVRvSW5kZXgodHlwZSldID0gW251bGwsIG51bGxdO1xuICAgICAgdmFyIHRyYWNrID0gdGhpcy50cmFja3NbdHlwZV07XG4gICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgdHJhY2suYnVmZmVyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0UXVldWUgPSBmdW5jdGlvbiByZXNldFF1ZXVlKCkge1xuICAgICAgaWYgKHRoaXMub3BlcmF0aW9uUXVldWUpIHtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25RdWV1ZS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wZXJhdGlvblF1ZXVlID0gbmV3IEJ1ZmZlck9wZXJhdGlvblF1ZXVlKHRoaXMudHJhY2tzKTtcbiAgICB9O1xuICAgIF9wcm90by5vbkJ1ZmZlckNvZGVjcyA9IGZ1bmN0aW9uIG9uQnVmZmVyQ29kZWNzKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgX3RoaXM5ID0gdGhpcztcbiAgICAgIHZhciB0cmFja3MgPSB0aGlzLnRyYWNrcztcbiAgICAgIHZhciB0cmFja05hbWVzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgICB0aGlzLmxvZyhcIkJVRkZFUl9DT0RFQ1M6IFxcXCJcIiArIHRyYWNrTmFtZXMgKyBcIlxcXCIgKGN1cnJlbnQgU0IgY291bnQgXCIgKyB0aGlzLnNvdXJjZUJ1ZmZlckNvdW50ICsgXCIpXCIpO1xuICAgICAgdmFyIHVubXV4ZWRUb011eGVkID0gJ2F1ZGlvdmlkZW8nIGluIGRhdGEgJiYgKHRyYWNrcy5hdWRpbyB8fCB0cmFja3MudmlkZW8pIHx8IHRyYWNrcy5hdWRpb3ZpZGVvICYmICgnYXVkaW8nIGluIGRhdGEgfHwgJ3ZpZGVvJyBpbiBkYXRhKTtcbiAgICAgIHZhciBtdXhlZFRvVW5tdXhlZCA9ICF1bm11eGVkVG9NdXhlZCAmJiB0aGlzLnNvdXJjZUJ1ZmZlckNvdW50ICYmIHRoaXMubWVkaWEgJiYgdHJhY2tOYW1lcy5zb21lKGZ1bmN0aW9uIChzYk5hbWUpIHtcbiAgICAgICAgcmV0dXJuICF0cmFja3Nbc2JOYW1lXTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHVubXV4ZWRUb011eGVkIHx8IG11eGVkVG9Vbm11eGVkKSB7XG4gICAgICAgIHRoaXMud2FybihcIlVuc3VwcG9ydGVkIHRyYW5zaXRpb24gYmV0d2VlbiBcXFwiXCIgKyBPYmplY3Qua2V5cyh0cmFja3MpICsgXCJcXFwiIGFuZCBcXFwiXCIgKyB0cmFja05hbWVzICsgXCJcXFwiIFNvdXJjZUJ1ZmZlcnNcIik7XG4gICAgICAgIC8vIERvIG5vdCBhZGQgaW5jb21wYXRpYmxlIHRyYWNrICgnYXVkaW92aWRlbycgPC0+ICd2aWRlbycvJ2F1ZGlvJykuXG4gICAgICAgIC8vIEFsbG93IGZvbGxvd2luZyBvbkJ1ZmZlckFwcGVuZGluZyBoYW5kbGUgdG8gdHJpZ2dlciBCVUZGRVJfQVBQRU5EX0VSUk9SLlxuICAgICAgICAvLyBUaGlzIHdpbGwgZWl0aGVyIGJlIHJlc29sdmVkIGJ5IGxldmVsIHN3aXRjaCBvciBjb3VsZCBiZSBoYW5kbGVkIHdpdGggcmVjb3Zlck1lZGlhRXJyb3IoKS5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdHJhY2tOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFja05hbWUpIHtcbiAgICAgICAgdmFyIF90aGlzOSR0cmFuc2ZlckRhdGEsIF90aGlzOSR0cmFuc2ZlckRhdGEkdCwgX3RyYWNrQ29kZWM7XG4gICAgICAgIHZhciBwYXJzZWRUcmFjayA9IGRhdGFbdHJhY2tOYW1lXTtcbiAgICAgICAgdmFyIGlkID0gcGFyc2VkVHJhY2suaWQsXG4gICAgICAgICAgY29kZWMgPSBwYXJzZWRUcmFjay5jb2RlYyxcbiAgICAgICAgICBsZXZlbENvZGVjID0gcGFyc2VkVHJhY2subGV2ZWxDb2RlYyxcbiAgICAgICAgICBjb250YWluZXIgPSBwYXJzZWRUcmFjay5jb250YWluZXIsXG4gICAgICAgICAgbWV0YWRhdGEgPSBwYXJzZWRUcmFjay5tZXRhZGF0YSxcbiAgICAgICAgICBzdXBwbGVtZW50YWwgPSBwYXJzZWRUcmFjay5zdXBwbGVtZW50YWw7XG4gICAgICAgIHZhciB0cmFjayA9IHRyYWNrc1t0cmFja05hbWVdO1xuICAgICAgICB2YXIgdHJhbnNmZXJyZWRUcmFjayA9IChfdGhpczkkdHJhbnNmZXJEYXRhID0gX3RoaXM5LnRyYW5zZmVyRGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhpczkkdHJhbnNmZXJEYXRhJHQgPSBfdGhpczkkdHJhbnNmZXJEYXRhLnRyYWNrcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzOSR0cmFuc2ZlckRhdGEkdFt0cmFja05hbWVdO1xuICAgICAgICB2YXIgc2JUcmFjayA9IHRyYW5zZmVycmVkVHJhY2sgIT0gbnVsbCAmJiB0cmFuc2ZlcnJlZFRyYWNrLmJ1ZmZlciA/IHRyYW5zZmVycmVkVHJhY2sgOiB0cmFjaztcbiAgICAgICAgdmFyIHNiQ29kZWMgPSAoc2JUcmFjayA9PSBudWxsID8gdm9pZCAwIDogc2JUcmFjay5wZW5kaW5nQ29kZWMpIHx8IChzYlRyYWNrID09IG51bGwgPyB2b2lkIDAgOiBzYlRyYWNrLmNvZGVjKTtcbiAgICAgICAgdmFyIHRyYWNrTGV2ZWxDb2RlYyA9IHNiVHJhY2sgPT0gbnVsbCA/IHZvaWQgMCA6IHNiVHJhY2subGV2ZWxDb2RlYztcbiAgICAgICAgaWYgKCF0cmFjaykge1xuICAgICAgICAgIHRyYWNrID0gdHJhY2tzW3RyYWNrTmFtZV0gPSB7XG4gICAgICAgICAgICBidWZmZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxpc3RlbmVyczogW10sXG4gICAgICAgICAgICBjb2RlYzogY29kZWMsXG4gICAgICAgICAgICBzdXBwbGVtZW50YWw6IHN1cHBsZW1lbnRhbCxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgICAgICAgbGV2ZWxDb2RlYzogbGV2ZWxDb2RlYyxcbiAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YSxcbiAgICAgICAgICAgIGlkOiBpZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hlY2sgaWYgU291cmNlQnVmZmVyIGNvZGVjIG5lZWRzIHRvIGNoYW5nZVxuICAgICAgICB2YXIgY3VycmVudENvZGVjRnVsbCA9IHBpY2tNb3N0Q29tcGxldGVDb2RlY05hbWUoc2JDb2RlYywgdHJhY2tMZXZlbENvZGVjKTtcbiAgICAgICAgdmFyIGN1cnJlbnRDb2RlYyA9IGN1cnJlbnRDb2RlY0Z1bGwgPT0gbnVsbCA/IHZvaWQgMCA6IGN1cnJlbnRDb2RlY0Z1bGwucmVwbGFjZShWSURFT19DT0RFQ19QUk9GSUxFX1JFUExBQ0UsICckMScpO1xuICAgICAgICB2YXIgdHJhY2tDb2RlYyA9IHBpY2tNb3N0Q29tcGxldGVDb2RlY05hbWUoY29kZWMsIGxldmVsQ29kZWMpO1xuICAgICAgICB2YXIgbmV4dENvZGVjID0gKF90cmFja0NvZGVjID0gdHJhY2tDb2RlYykgPT0gbnVsbCA/IHZvaWQgMCA6IF90cmFja0NvZGVjLnJlcGxhY2UoVklERU9fQ09ERUNfUFJPRklMRV9SRVBMQUNFLCAnJDEnKTtcbiAgICAgICAgaWYgKHRyYWNrQ29kZWMgJiYgY3VycmVudENvZGVjRnVsbCAmJiBjdXJyZW50Q29kZWMgIT09IG5leHRDb2RlYykge1xuICAgICAgICAgIGlmICh0cmFja05hbWUuc2xpY2UoMCwgNSkgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgIHRyYWNrQ29kZWMgPSBnZXRDb2RlY0NvbXBhdGlibGVOYW1lKHRyYWNrQ29kZWMsIF90aGlzOS5hcHBlbmRTb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpczkubG9nKFwic3dpdGNoaW5nIGNvZGVjIFwiICsgc2JDb2RlYyArIFwiIHRvIFwiICsgdHJhY2tDb2RlYyk7XG4gICAgICAgICAgaWYgKHRyYWNrQ29kZWMgIT09ICh0cmFjay5wZW5kaW5nQ29kZWMgfHwgdHJhY2suY29kZWMpKSB7XG4gICAgICAgICAgICB0cmFjay5wZW5kaW5nQ29kZWMgPSB0cmFja0NvZGVjO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cmFjay5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgICAgX3RoaXM5LmFwcGVuZENoYW5nZVR5cGUodHJhY2tOYW1lLCBjb250YWluZXIsIHRyYWNrQ29kZWMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLnRyYWNrc1JlYWR5IHx8IHRoaXMuc291cmNlQnVmZmVyQ291bnQpIHtcbiAgICAgICAgZGF0YS50cmFja3MgPSB0aGlzLnNvdXJjZUJ1ZmZlclRyYWNrcztcbiAgICAgIH1cblxuICAgICAgLy8gaWYgc291cmNlYnVmZmVycyBhbHJlYWR5IGNyZWF0ZWQsIGRvIG5vdGhpbmcgLi4uXG4gICAgICBpZiAodGhpcy5zb3VyY2VCdWZmZXJDb3VudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tZWRpYVNvdXJjZU9wZW5PckVuZGVkKSB7XG4gICAgICAgIHRoaXMuY2hlY2tQZW5kaW5nVHJhY2tzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uYXBwZW5kQ2hhbmdlVHlwZSA9IGZ1bmN0aW9uIGFwcGVuZENoYW5nZVR5cGUodHlwZSwgY29udGFpbmVyLCBjb2RlYykge1xuICAgICAgdmFyIF90aGlzMCA9IHRoaXM7XG4gICAgICB2YXIgbWltZVR5cGUgPSBjb250YWluZXIgKyBcIjtjb2RlY3M9XCIgKyBjb2RlYztcbiAgICAgIHZhciBvcGVyYXRpb24gPSB7XG4gICAgICAgIGxhYmVsOiBcImNoYW5nZS10eXBlPVwiICsgbWltZVR5cGUsXG4gICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG4gICAgICAgICAgdmFyIHRyYWNrID0gX3RoaXMwLnRyYWNrc1t0eXBlXTtcbiAgICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICAgIHZhciBzYiA9IHRyYWNrLmJ1ZmZlcjtcbiAgICAgICAgICAgIGlmIChzYiAhPSBudWxsICYmIHNiLmNoYW5nZVR5cGUpIHtcbiAgICAgICAgICAgICAgX3RoaXMwLmxvZyhcImNoYW5naW5nIFwiICsgdHlwZSArIFwiIHNvdXJjZUJ1ZmZlciB0eXBlIHRvIFwiICsgbWltZVR5cGUpO1xuICAgICAgICAgICAgICBzYi5jaGFuZ2VUeXBlKG1pbWVUeXBlKTtcbiAgICAgICAgICAgICAgdHJhY2suY29kZWMgPSBjb2RlYztcbiAgICAgICAgICAgICAgdHJhY2suY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpczAuc2hpZnRBbmRFeGVjdXRlTmV4dCh0eXBlKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHt9LFxuICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge30sXG4gICAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgICBfdGhpczAud2FybihcIkZhaWxlZCB0byBjaGFuZ2UgXCIgKyB0eXBlICsgXCIgU291cmNlQnVmZmVyIHR5cGVcIiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5hcHBlbmQob3BlcmF0aW9uLCB0eXBlLCB0aGlzLmlzUGVuZGluZyh0aGlzLnRyYWNrc1t0eXBlXSkpO1xuICAgIH07XG4gICAgX3Byb3RvLmJsb2NrQXVkaW8gPSBmdW5jdGlvbiBibG9ja0F1ZGlvKHBhcnRPckZyYWcpIHtcbiAgICAgIHZhciBfdGhpcyRmcmFnbWVudFRyYWNrZXIsXG4gICAgICAgIF90aGlzMSA9IHRoaXM7XG4gICAgICB2YXIgcFN0YXJ0ID0gcGFydE9yRnJhZy5zdGFydDtcbiAgICAgIHZhciBwVGltZSA9IHBTdGFydCArIHBhcnRPckZyYWcuZHVyYXRpb24gKiAwLjA1O1xuICAgICAgdmFyIGF0R2FwID0gKChfdGhpcyRmcmFnbWVudFRyYWNrZXIgPSB0aGlzLmZyYWdtZW50VHJhY2tlci5nZXRBcHBlbmRlZEZyYWcocFN0YXJ0LCBQbGF5bGlzdExldmVsVHlwZS5NQUlOKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGZyYWdtZW50VHJhY2tlci5nYXApID09PSB0cnVlO1xuICAgICAgaWYgKGF0R2FwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBvcCA9IHtcbiAgICAgICAgbGFiZWw6ICdibG9jay1hdWRpbycsXG4gICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG4gICAgICAgICAgdmFyIF90aGlzMSRmcmFnbWVudFRyYWNrZTtcbiAgICAgICAgICB2YXIgdmlkZW9UcmFjayA9IF90aGlzMS50cmFja3MudmlkZW87XG4gICAgICAgICAgaWYgKF90aGlzMS5sYXN0VmlkZW9BcHBlbmRFbmQgPiBwVGltZSB8fCB2aWRlb1RyYWNrICE9IG51bGwgJiYgdmlkZW9UcmFjay5idWZmZXIgJiYgQnVmZmVySGVscGVyLmlzQnVmZmVyZWQodmlkZW9UcmFjay5idWZmZXIsIHBUaW1lKSB8fCAoKF90aGlzMSRmcmFnbWVudFRyYWNrZSA9IF90aGlzMS5mcmFnbWVudFRyYWNrZXIuZ2V0QXBwZW5kZWRGcmFnKHBUaW1lLCBQbGF5bGlzdExldmVsVHlwZS5NQUlOKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzMSRmcmFnbWVudFRyYWNrZS5nYXApID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfdGhpczEuYmxvY2tlZEF1ZGlvQXBwZW5kID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzMS5zaGlmdEFuZEV4ZWN1dGVOZXh0KCdhdWRpbycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHt9LFxuICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge30sXG4gICAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgICBfdGhpczEud2FybignRXJyb3IgZXhlY3V0aW5nIGJsb2NrLWF1ZGlvIG9wZXJhdGlvbicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuYmxvY2tlZEF1ZGlvQXBwZW5kID0ge1xuICAgICAgICBvcDogb3AsXG4gICAgICAgIGZyYWc6IHBhcnRPckZyYWdcbiAgICAgIH07XG4gICAgICB0aGlzLmFwcGVuZChvcCwgJ2F1ZGlvJywgdHJ1ZSk7XG4gICAgfTtcbiAgICBfcHJvdG8udW5ibG9ja0F1ZGlvID0gZnVuY3Rpb24gdW5ibG9ja0F1ZGlvKCkge1xuICAgICAgdmFyIGJsb2NrZWRBdWRpb0FwcGVuZCA9IHRoaXMuYmxvY2tlZEF1ZGlvQXBwZW5kLFxuICAgICAgICBvcGVyYXRpb25RdWV1ZSA9IHRoaXMub3BlcmF0aW9uUXVldWU7XG4gICAgICBpZiAoYmxvY2tlZEF1ZGlvQXBwZW5kICYmIG9wZXJhdGlvblF1ZXVlKSB7XG4gICAgICAgIHRoaXMuYmxvY2tlZEF1ZGlvQXBwZW5kID0gbnVsbDtcbiAgICAgICAgb3BlcmF0aW9uUXVldWUudW5ibG9ja0F1ZGlvKGJsb2NrZWRBdWRpb0FwcGVuZC5vcCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25CdWZmZXJBcHBlbmRpbmcgPSBmdW5jdGlvbiBvbkJ1ZmZlckFwcGVuZGluZyhldmVudCwgZXZlbnREYXRhKSB7XG4gICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG4gICAgICB2YXIgdHJhY2tzID0gdGhpcy50cmFja3M7XG4gICAgICB2YXIgZGF0YSA9IGV2ZW50RGF0YS5kYXRhLFxuICAgICAgICB0eXBlID0gZXZlbnREYXRhLnR5cGUsXG4gICAgICAgIHBhcmVudCA9IGV2ZW50RGF0YS5wYXJlbnQsXG4gICAgICAgIGZyYWcgPSBldmVudERhdGEuZnJhZyxcbiAgICAgICAgcGFydCA9IGV2ZW50RGF0YS5wYXJ0LFxuICAgICAgICBjaHVua01ldGEgPSBldmVudERhdGEuY2h1bmtNZXRhO1xuICAgICAgdmFyIGNodW5rU3RhdHMgPSBjaHVua01ldGEuYnVmZmVyaW5nW3R5cGVdO1xuICAgICAgdmFyIHNuID0gZnJhZy5zbjtcbiAgICAgIHZhciBidWZmZXJBcHBlbmRpbmdTdGFydCA9IHNlbGYucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBjaHVua1N0YXRzLnN0YXJ0ID0gYnVmZmVyQXBwZW5kaW5nU3RhcnQ7XG4gICAgICB2YXIgZnJhZ0J1ZmZlcmluZyA9IGZyYWcuc3RhdHMuYnVmZmVyaW5nO1xuICAgICAgdmFyIHBhcnRCdWZmZXJpbmcgPSBwYXJ0ID8gcGFydC5zdGF0cy5idWZmZXJpbmcgOiBudWxsO1xuICAgICAgaWYgKGZyYWdCdWZmZXJpbmcuc3RhcnQgPT09IDApIHtcbiAgICAgICAgZnJhZ0J1ZmZlcmluZy5zdGFydCA9IGJ1ZmZlckFwcGVuZGluZ1N0YXJ0O1xuICAgICAgfVxuICAgICAgaWYgKHBhcnRCdWZmZXJpbmcgJiYgcGFydEJ1ZmZlcmluZy5zdGFydCA9PT0gMCkge1xuICAgICAgICBwYXJ0QnVmZmVyaW5nLnN0YXJ0ID0gYnVmZmVyQXBwZW5kaW5nU3RhcnQ7XG4gICAgICB9XG5cbiAgICAgIC8vIFRPRE86IE9ubHkgdXBkYXRlIHRpbWVzdGFtcE9mZnNldCB3aGVuIGF1ZGlvL21wZWcgZnJhZ21lbnQgb3IgcGFydCBpcyBub3QgY29udGlndW91cyB3aXRoIHByZXZpb3VzbHkgYXBwZW5kZWRcbiAgICAgIC8vIEFkanVzdGluZyBgU291cmNlQnVmZmVyLnRpbWVzdGFtcE9mZnNldGAgKGRlc2lyZWQgcG9pbnQgaW4gdGhlIHRpbWVsaW5lIHdoZXJlIHRoZSBuZXh0IGZyYW1lcyBzaG91bGQgYmUgYXBwZW5kZWQpXG4gICAgICAvLyBpbiBDaHJvbWUgYnJvd3NlciB3aGVuIHdlIGRldGVjdCBNUEVHIGF1ZGlvIGNvbnRhaW5lciBhbmQgdGltZSBkZWx0YSBiZXR3ZWVuIGxldmVsIFBUUyBhbmQgYFNvdXJjZUJ1ZmZlci50aW1lc3RhbXBPZmZzZXRgXG4gICAgICAvLyBpcyBncmVhdGVyIHRoYW4gMTAwbXMgKHRoaXMgaXMgZW5vdWdoIHRvIGhhbmRsZSBzZWVrIGZvciBWT0Qgb3IgbGV2ZWwgY2hhbmdlIGZvciBMSVZFIHZpZGVvcykuXG4gICAgICAvLyBNb3JlIGluZm8gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvLWRldi9obHMuanMvaXNzdWVzLzMzMiNpc3N1ZWNvbW1lbnQtMjU3OTg2NDg2XG4gICAgICB2YXIgYXVkaW9UcmFjayA9IHRyYWNrcy5hdWRpbztcbiAgICAgIHZhciBjaGVja1RpbWVzdGFtcE9mZnNldCA9IGZhbHNlO1xuICAgICAgaWYgKHR5cGUgPT09ICdhdWRpbycgJiYgKGF1ZGlvVHJhY2sgPT0gbnVsbCA/IHZvaWQgMCA6IGF1ZGlvVHJhY2suY29udGFpbmVyKSA9PT0gJ2F1ZGlvL21wZWcnKSB7XG4gICAgICAgIGNoZWNrVGltZXN0YW1wT2Zmc2V0ID0gIXRoaXMubGFzdE1wZWdBdWRpb0NodW5rIHx8IGNodW5rTWV0YS5pZCA9PT0gMSB8fCB0aGlzLmxhc3RNcGVnQXVkaW9DaHVuay5zbiAhPT0gY2h1bmtNZXRhLnNuO1xuICAgICAgICB0aGlzLmxhc3RNcGVnQXVkaW9DaHVuayA9IGNodW5rTWV0YTtcbiAgICAgIH1cblxuICAgICAgLy8gQmxvY2sgYXVkaW8gYXBwZW5kIHVudGlsIG92ZXJsYXBwaW5nIHZpZGVvIGFwcGVuZFxuICAgICAgdmFyIHZpZGVvVHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlbztcbiAgICAgIHZhciB2aWRlb1NiID0gdmlkZW9UcmFjayA9PSBudWxsID8gdm9pZCAwIDogdmlkZW9UcmFjay5idWZmZXI7XG4gICAgICBpZiAodmlkZW9TYiAmJiBzbiAhPT0gJ2luaXRTZWdtZW50Jykge1xuICAgICAgICB2YXIgcGFydE9yRnJhZyA9IHBhcnQgfHwgZnJhZztcbiAgICAgICAgdmFyIGJsb2NrZWRBdWRpb0FwcGVuZCA9IHRoaXMuYmxvY2tlZEF1ZGlvQXBwZW5kO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJyAmJiBwYXJlbnQgIT09ICdtYWluJyAmJiAhdGhpcy5ibG9ja2VkQXVkaW9BcHBlbmQpIHtcbiAgICAgICAgICB2YXIgcFN0YXJ0ID0gcGFydE9yRnJhZy5zdGFydDtcbiAgICAgICAgICB2YXIgcFRpbWUgPSBwU3RhcnQgKyBwYXJ0T3JGcmFnLmR1cmF0aW9uICogMC4wNTtcbiAgICAgICAgICB2YXIgdmJ1ZmZlcmVkID0gdmlkZW9TYi5idWZmZXJlZDtcbiAgICAgICAgICB2YXIgdmFwcGVuZGluZyA9IHRoaXMuY3VycmVudE9wKCd2aWRlbycpO1xuICAgICAgICAgIGlmICghdmJ1ZmZlcmVkLmxlbmd0aCAmJiAhdmFwcGVuZGluZykge1xuICAgICAgICAgICAgLy8gd2FpdCBmb3IgdmlkZW8gYmVmb3JlIGFwcGVuZGluZyBhdWRpb1xuICAgICAgICAgICAgdGhpcy5ibG9ja0F1ZGlvKHBhcnRPckZyYWcpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXZhcHBlbmRpbmcgJiYgIUJ1ZmZlckhlbHBlci5pc0J1ZmZlcmVkKHZpZGVvU2IsIHBUaW1lKSAmJiB0aGlzLmxhc3RWaWRlb0FwcGVuZEVuZCA8IHBUaW1lKSB7XG4gICAgICAgICAgICAvLyBhdWRpbyBpcyBhaGVhZCBvZiB2aWRlb1xuICAgICAgICAgICAgdGhpcy5ibG9ja0F1ZGlvKHBhcnRPckZyYWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgdmFyIHZpZGVvQXBwZW5kRW5kID0gcGFydE9yRnJhZy5lbmQ7XG4gICAgICAgICAgaWYgKGJsb2NrZWRBdWRpb0FwcGVuZCkge1xuICAgICAgICAgICAgdmFyIGF1ZGlvU3RhcnQgPSBibG9ja2VkQXVkaW9BcHBlbmQuZnJhZy5zdGFydDtcbiAgICAgICAgICAgIGlmICh2aWRlb0FwcGVuZEVuZCA+IGF1ZGlvU3RhcnQgfHwgdmlkZW9BcHBlbmRFbmQgPCB0aGlzLmxhc3RWaWRlb0FwcGVuZEVuZCB8fCBCdWZmZXJIZWxwZXIuaXNCdWZmZXJlZCh2aWRlb1NiLCBhdWRpb1N0YXJ0KSkge1xuICAgICAgICAgICAgICB0aGlzLnVuYmxvY2tBdWRpbygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmxhc3RWaWRlb0FwcGVuZEVuZCA9IHZpZGVvQXBwZW5kRW5kO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgZnJhZ1N0YXJ0ID0gKHBhcnQgfHwgZnJhZykuc3RhcnQ7XG4gICAgICB2YXIgb3BlcmF0aW9uID0ge1xuICAgICAgICBsYWJlbDogXCJhcHBlbmQtXCIgKyB0eXBlLFxuICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKCkge1xuICAgICAgICAgIGNodW5rU3RhdHMuZXhlY3V0ZVN0YXJ0ID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICBpZiAoY2hlY2tUaW1lc3RhbXBPZmZzZXQpIHtcbiAgICAgICAgICAgIHZhciB0cmFjayA9IF90aGlzMTAudHJhY2tzW3R5cGVdO1xuICAgICAgICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgICAgICAgIHZhciBzYiA9IHRyYWNrLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgaWYgKHNiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZnJhZ1N0YXJ0IC0gc2IudGltZXN0YW1wT2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhkZWx0YSkgPj0gMC4xKSB7XG4gICAgICAgICAgICAgICAgICBfdGhpczEwLmxvZyhcIlVwZGF0aW5nIGF1ZGlvIFNvdXJjZUJ1ZmZlciB0aW1lc3RhbXBPZmZzZXQgdG8gXCIgKyBmcmFnU3RhcnQgKyBcIiAoZGVsdGE6IFwiICsgZGVsdGEgKyBcIikgc246IFwiICsgc24gKyBcIilcIik7XG4gICAgICAgICAgICAgICAgICBzYi50aW1lc3RhbXBPZmZzZXQgPSBmcmFnU3RhcnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzMTAuYXBwZW5kRXhlY3V0b3IoZGF0YSwgdHlwZSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgICAgICAgLy8gbG9nZ2VyLmRlYnVnKGBbYnVmZmVyLWNvbnRyb2xsZXJdOiAke3R5cGV9IFNvdXJjZUJ1ZmZlciB1cGRhdGVzdGFydGApO1xuICAgICAgICB9LFxuICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgICAgICAgIC8vIGxvZ2dlci5kZWJ1ZyhgW2J1ZmZlci1jb250cm9sbGVyXTogJHt0eXBlfSBTb3VyY2VCdWZmZXIgdXBkYXRlZW5kYCk7XG4gICAgICAgICAgdmFyIGVuZCA9IHNlbGYucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgY2h1bmtTdGF0cy5leGVjdXRlRW5kID0gY2h1bmtTdGF0cy5lbmQgPSBlbmQ7XG4gICAgICAgICAgaWYgKGZyYWdCdWZmZXJpbmcuZmlyc3QgPT09IDApIHtcbiAgICAgICAgICAgIGZyYWdCdWZmZXJpbmcuZmlyc3QgPSBlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJ0QnVmZmVyaW5nICYmIHBhcnRCdWZmZXJpbmcuZmlyc3QgPT09IDApIHtcbiAgICAgICAgICAgIHBhcnRCdWZmZXJpbmcuZmlyc3QgPSBlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB0aW1lUmFuZ2VzID0ge307XG4gICAgICAgICAgX3RoaXMxMC5zb3VyY2VCdWZmZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IF9yZWYzWzBdLFxuICAgICAgICAgICAgICBzYiA9IF9yZWYzWzFdO1xuICAgICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgICAgdGltZVJhbmdlc1t0eXBlXSA9IEJ1ZmZlckhlbHBlci5nZXRCdWZmZXJlZChzYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgX3RoaXMxMC5hcHBlbmRFcnJvcnNbdHlwZV0gPSAwO1xuICAgICAgICAgIGlmICh0eXBlID09PSAnYXVkaW8nIHx8IHR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgIF90aGlzMTAuYXBwZW5kRXJyb3JzLmF1ZGlvdmlkZW8gPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczEwLmFwcGVuZEVycm9ycy5hdWRpbyA9IDA7XG4gICAgICAgICAgICBfdGhpczEwLmFwcGVuZEVycm9ycy52aWRlbyA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzMTAuaGxzLnRyaWdnZXIoRXZlbnRzLkJVRkZFUl9BUFBFTkRFRCwge1xuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgICBwYXJ0OiBwYXJ0LFxuICAgICAgICAgICAgY2h1bmtNZXRhOiBjaHVua01ldGEsXG4gICAgICAgICAgICBwYXJlbnQ6IGZyYWcudHlwZSxcbiAgICAgICAgICAgIHRpbWVSYW5nZXM6IHRpbWVSYW5nZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25FcnJvcjogZnVuY3Rpb24gb25FcnJvcihlcnJvcikge1xuICAgICAgICAgIHZhciBfdGhpczEwJG1lZGlhO1xuICAgICAgICAgIC8vIGluIGNhc2UgYW55IGVycm9yIG9jY3VyZWQgd2hpbGUgYXBwZW5kaW5nLCBwdXQgYmFjayBzZWdtZW50IGluIHNlZ21lbnRzIHRhYmxlXG4gICAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5NRURJQV9FUlJPUixcbiAgICAgICAgICAgIHBhcmVudDogZnJhZy50eXBlLFxuICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLkJVRkZFUl9BUFBFTkRfRVJST1IsXG4gICAgICAgICAgICBzb3VyY2VCdWZmZXJOYW1lOiB0eXBlLFxuICAgICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICAgIHBhcnQ6IHBhcnQsXG4gICAgICAgICAgICBjaHVua01ldGE6IGNodW5rTWV0YSxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIGVycjogZXJyb3IsXG4gICAgICAgICAgICBmYXRhbDogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciBtZWRpYUVycm9yID0gKF90aGlzMTAkbWVkaWEgPSBfdGhpczEwLm1lZGlhKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMxMCRtZWRpYS5lcnJvcjtcbiAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gRE9NRXhjZXB0aW9uLlFVT1RBX0VYQ0VFREVEX0VSUikge1xuICAgICAgICAgICAgLy8gUXVvdGFFeGNlZWRlZEVycm9yOiBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmZyYXN0cnVjdHVyZS5odG1sI3F1b3RhZXhjZWVkZWRlcnJvclxuICAgICAgICAgICAgLy8gbGV0J3Mgc3RvcCBhcHBlbmRpbmcgYW55IHNlZ21lbnRzLCBhbmQgcmVwb3J0IEJVRkZFUl9GVUxMX0VSUk9SIGVycm9yXG4gICAgICAgICAgICBldmVudC5kZXRhaWxzID0gRXJyb3JEZXRhaWxzLkJVRkZFUl9GVUxMX0VSUk9SO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IuY29kZSA9PT0gRE9NRXhjZXB0aW9uLklOVkFMSURfU1RBVEVfRVJSICYmIF90aGlzMTAubWVkaWFTb3VyY2VPcGVuT3JFbmRlZCAmJiAhbWVkaWFFcnJvcikge1xuICAgICAgICAgICAgLy8gQWxsb3cgcmV0cnkgZm9yIFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ2FwcGVuZEJ1ZmZlcicgb24gJ1NvdXJjZUJ1ZmZlcic6IFRoaXMgU291cmNlQnVmZmVyIGlzIHN0aWxsIHByb2Nlc3NpbmdcIiBlcnJvcnNcbiAgICAgICAgICAgIGV2ZW50LmVycm9yQWN0aW9uID0gY3JlYXRlRG9Ob3RoaW5nRXJyb3JBY3Rpb24odHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlcnJvci5uYW1lID09PSBUUkFDS19SRU1PVkVEX0VSUk9SX05BTUUgJiYgX3RoaXMxMC5zb3VyY2VCdWZmZXJDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gRG8gbm90aGluZyBpZiBzb3VyY2VCdWZmZXJzIHdlcmUgcmVtb3ZlZCAobWVkaWEgaXMgZGV0YWNoZWQgYW5kIGFwcGVuZCB3YXMgbm90IGFib3J0ZWQpXG4gICAgICAgICAgICBldmVudC5lcnJvckFjdGlvbiA9IGNyZWF0ZURvTm90aGluZ0Vycm9yQWN0aW9uKHRydWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYXBwZW5kRXJyb3JDb3VudCA9ICsrX3RoaXMxMC5hcHBlbmRFcnJvcnNbdHlwZV07XG4gICAgICAgICAgICAvKiB3aXRoIFVIRCBjb250ZW50LCB3ZSBjb3VsZCBnZXQgbG9vcCBvZiBxdW90YSBleGNlZWRlZCBlcnJvciB1bnRpbFxuICAgICAgICAgICAgICBicm93c2VyIGlzIGFibGUgdG8gZXZpY3Qgc29tZSBkYXRhIGZyb20gc291cmNlYnVmZmVyLiBSZXRyeWluZyBjYW4gaGVscCByZWNvdmVyLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF90aGlzMTAud2FybihcIkZhaWxlZCBcIiArIGFwcGVuZEVycm9yQ291bnQgKyBcIi9cIiArIF90aGlzMTAuaGxzLmNvbmZpZy5hcHBlbmRFcnJvck1heFJldHJ5ICsgXCIgdGltZXMgdG8gYXBwZW5kIHNlZ21lbnQgaW4gXFxcIlwiICsgdHlwZSArIFwiXFxcIiBzb3VyY2VCdWZmZXIgKFwiICsgKG1lZGlhRXJyb3IgPyBtZWRpYUVycm9yIDogJ25vIG1lZGlhIGVycm9yJykgKyBcIilcIik7XG4gICAgICAgICAgICBpZiAoYXBwZW5kRXJyb3JDb3VudCA+PSBfdGhpczEwLmhscy5jb25maWcuYXBwZW5kRXJyb3JNYXhSZXRyeSB8fCAhIW1lZGlhRXJyb3IpIHtcbiAgICAgICAgICAgICAgZXZlbnQuZmF0YWwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpczEwLmhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5hcHBlbmQob3BlcmF0aW9uLCB0eXBlLCB0aGlzLmlzUGVuZGluZyh0aGlzLnRyYWNrc1t0eXBlXSkpO1xuICAgIH07XG4gICAgX3Byb3RvLmdldEZsdXNoT3AgPSBmdW5jdGlvbiBnZXRGbHVzaE9wKHR5cGUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBfdGhpczExID0gdGhpcztcbiAgICAgIHRoaXMubG9nKFwicXVldWluZyBcXFwiXCIgKyB0eXBlICsgXCJcXFwiIHJlbW92ZSBcIiArIHN0YXJ0ICsgXCItXCIgKyBlbmQpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGFiZWw6ICdyZW1vdmUnLFxuICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKCkge1xuICAgICAgICAgIF90aGlzMTEucmVtb3ZlRXhlY3V0b3IodHlwZSwgc3RhcnQsIGVuZCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgICAgICAgLy8gbG9nZ2VyLmRlYnVnKGBbYnVmZmVyLWNvbnRyb2xsZXJdOiBTdGFydGVkIGZsdXNoaW5nICR7ZGF0YS5zdGFydE9mZnNldH0gLT4gJHtkYXRhLmVuZE9mZnNldH0gZm9yICR7dHlwZX0gU291cmNlIEJ1ZmZlcmApO1xuICAgICAgICB9LFxuICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgICAgICAgIC8vIGxvZ2dlci5kZWJ1ZyhgW2J1ZmZlci1jb250cm9sbGVyXTogRmluaXNoZWQgZmx1c2hpbmcgJHtkYXRhLnN0YXJ0T2Zmc2V0fSAtPiAke2RhdGEuZW5kT2Zmc2V0fSBmb3IgJHt0eXBlfSBTb3VyY2UgQnVmZmVyYCk7XG4gICAgICAgICAgX3RoaXMxMS5obHMudHJpZ2dlcihFdmVudHMuQlVGRkVSX0ZMVVNIRUQsIHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25FcnJvcjogZnVuY3Rpb24gb25FcnJvcihlcnJvcikge1xuICAgICAgICAgIF90aGlzMTEud2FybihcIkZhaWxlZCB0byByZW1vdmUgXCIgKyBzdGFydCArIFwiLVwiICsgZW5kICsgXCIgZnJvbSBcXFwiXCIgKyB0eXBlICsgXCJcXFwiIFNvdXJjZUJ1ZmZlclwiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBfcHJvdG8ub25CdWZmZXJGbHVzaGluZyA9IGZ1bmN0aW9uIG9uQnVmZmVyRmx1c2hpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfdGhpczEyID0gdGhpcztcbiAgICAgIHZhciB0eXBlID0gZGF0YS50eXBlLFxuICAgICAgICBzdGFydE9mZnNldCA9IGRhdGEuc3RhcnRPZmZzZXQsXG4gICAgICAgIGVuZE9mZnNldCA9IGRhdGEuZW5kT2Zmc2V0O1xuICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQodGhpcy5nZXRGbHVzaE9wKHR5cGUsIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpLCB0eXBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc291cmNlQnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgICAgIHZhciB0eXBlID0gX3JlZjRbMF07XG4gICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIF90aGlzMTIuYXBwZW5kKF90aGlzMTIuZ2V0Rmx1c2hPcCh0eXBlLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSwgdHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkZyYWdQYXJzZWQgPSBmdW5jdGlvbiBvbkZyYWdQYXJzZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfdGhpczEzID0gdGhpcztcbiAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnLFxuICAgICAgICBwYXJ0ID0gZGF0YS5wYXJ0O1xuICAgICAgdmFyIGJ1ZmZlcnNBcHBlbmRlZFRvID0gW107XG4gICAgICB2YXIgZWxlbWVudGFyeVN0cmVhbXMgPSBwYXJ0ID8gcGFydC5lbGVtZW50YXJ5U3RyZWFtcyA6IGZyYWcuZWxlbWVudGFyeVN0cmVhbXM7XG4gICAgICBpZiAoZWxlbWVudGFyeVN0cmVhbXNbRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPVklERU9dKSB7XG4gICAgICAgIGJ1ZmZlcnNBcHBlbmRlZFRvLnB1c2goJ2F1ZGlvdmlkZW8nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50YXJ5U3RyZWFtc1tFbGVtZW50YXJ5U3RyZWFtVHlwZXMuQVVESU9dKSB7XG4gICAgICAgICAgYnVmZmVyc0FwcGVuZGVkVG8ucHVzaCgnYXVkaW8nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudGFyeVN0cmVhbXNbRWxlbWVudGFyeVN0cmVhbVR5cGVzLlZJREVPXSkge1xuICAgICAgICAgIGJ1ZmZlcnNBcHBlbmRlZFRvLnB1c2goJ3ZpZGVvJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBvblVuYmxvY2tlZCA9IGZ1bmN0aW9uIG9uVW5ibG9ja2VkKCkge1xuICAgICAgICB2YXIgbm93ID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgZnJhZy5zdGF0cy5idWZmZXJpbmcuZW5kID0gbm93O1xuICAgICAgICBpZiAocGFydCkge1xuICAgICAgICAgIHBhcnQuc3RhdHMuYnVmZmVyaW5nLmVuZCA9IG5vdztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RhdHMgPSBwYXJ0ID8gcGFydC5zdGF0cyA6IGZyYWcuc3RhdHM7XG4gICAgICAgIF90aGlzMTMuaGxzLnRyaWdnZXIoRXZlbnRzLkZSQUdfQlVGRkVSRUQsIHtcbiAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgIHBhcnQ6IHBhcnQsXG4gICAgICAgICAgc3RhdHM6IHN0YXRzLFxuICAgICAgICAgIGlkOiBmcmFnLnR5cGVcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgaWYgKGJ1ZmZlcnNBcHBlbmRlZFRvLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLndhcm4oXCJGcmFnbWVudHMgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBFbGVtZW50YXJ5U3RyZWFtVHlwZSBzZXQuIHR5cGU6IFwiICsgZnJhZy50eXBlICsgXCIgbGV2ZWw6IFwiICsgZnJhZy5sZXZlbCArIFwiIHNuOiBcIiArIGZyYWcuc24pO1xuICAgICAgfVxuICAgICAgdGhpcy5ibG9ja0J1ZmZlcnMob25VbmJsb2NrZWQsIGJ1ZmZlcnNBcHBlbmRlZFRvKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgX3RoaXMxMy53YXJuKFwiRnJhZ21lbnQgYnVmZmVyZWQgY2FsbGJhY2sgXCIgKyBlcnJvcik7XG4gICAgICAgIF90aGlzMTMuc3RlcE9wZXJhdGlvblF1ZXVlKF90aGlzMTMuc291cmNlQnVmZmVyVHlwZXMpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25GcmFnQ2hhbmdlZCA9IGZ1bmN0aW9uIG9uRnJhZ0NoYW5nZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMudHJpbUJ1ZmZlcnMoKTtcbiAgICB9O1xuICAgIC8vIG9uIEJVRkZFUl9FT1MgbWFyayBtYXRjaGluZyBzb3VyY2VidWZmZXIocykgYXMgXCJlbmRpbmdcIiBhbmQgXCJlbmRlZFwiIGFuZCBxdWV1ZSBlbmRPZlN0cmVhbSBhZnRlciByZW1haW5pbmcgb3BlcmF0aW9ucyhzKVxuICAgIC8vIGFuIHVuZGVmaW5lZCBkYXRhLnR5cGUgd2lsbCBtYXJrIGFsbCBidWZmZXJzIGFzIEVPUy5cbiAgICBfcHJvdG8ub25CdWZmZXJFb3MgPSBmdW5jdGlvbiBvbkJ1ZmZlckVvcyhldmVudCwgZGF0YSkge1xuICAgICAgdmFyIF90aGlzMTQgPSB0aGlzLFxuICAgICAgICBfdGhpcyRvdmVycmlkZXM7XG4gICAgICB0aGlzLnNvdXJjZUJ1ZmZlcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBfcmVmNVswXTtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICB2YXIgdHJhY2sgPSBfdGhpczE0LnRyYWNrc1t0eXBlXTtcbiAgICAgICAgICBpZiAoIWRhdGEudHlwZSB8fCBkYXRhLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgICAgIHRyYWNrLmVuZGluZyA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIXRyYWNrLmVuZGVkKSB7XG4gICAgICAgICAgICAgIHRyYWNrLmVuZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgX3RoaXMxNC5sb2codHlwZSArIFwiIGJ1ZmZlciByZWFjaGVkIEVPU1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmFyIGFsbG93RW5kT2ZTdHJlYW0gPSAoKF90aGlzJG92ZXJyaWRlcyA9IHRoaXMub3ZlcnJpZGVzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkb3ZlcnJpZGVzLmVuZE9mU3RyZWFtKSAhPT0gZmFsc2U7XG4gICAgICB2YXIgYWxsVHJhY2tzRW5kaW5nID0gdGhpcy5zb3VyY2VCdWZmZXJDb3VudCA+IDAgJiYgIXRoaXMuc291cmNlQnVmZmVycy5zb21lKGZ1bmN0aW9uIChfcmVmNikge1xuICAgICAgICB2YXIgX3RoaXMxNCR0cmFja3MkdHlwZTtcbiAgICAgICAgdmFyIHR5cGUgPSBfcmVmNlswXTtcbiAgICAgICAgcmV0dXJuIHR5cGUgJiYgISgoX3RoaXMxNCR0cmFja3MkdHlwZSA9IF90aGlzMTQudHJhY2tzW3R5cGVdKSAhPSBudWxsICYmIF90aGlzMTQkdHJhY2tzJHR5cGUuZW5kZWQpO1xuICAgICAgfSk7XG4gICAgICBpZiAoYWxsVHJhY2tzRW5kaW5nKSB7XG4gICAgICAgIGlmIChhbGxvd0VuZE9mU3RyZWFtKSB7XG4gICAgICAgICAgdGhpcy5sb2coXCJRdWV1ZWluZyBFT1NcIik7XG4gICAgICAgICAgdGhpcy5ibG9ja1VudGlsT3BlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczE0LnRyYWNrc0VuZGVkKCk7XG4gICAgICAgICAgICB2YXIgbWVkaWFTb3VyY2UgPSBfdGhpczE0Lm1lZGlhU291cmNlO1xuICAgICAgICAgICAgaWYgKCFtZWRpYVNvdXJjZSB8fCBtZWRpYVNvdXJjZS5yZWFkeVN0YXRlICE9PSAnb3BlbicpIHtcbiAgICAgICAgICAgICAgaWYgKG1lZGlhU291cmNlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMxNC5sb2coXCJDb3VsZCBub3QgY2FsbCBtZWRpYVNvdXJjZS5lbmRPZlN0cmVhbSgpLiBtZWRpYVNvdXJjZS5yZWFkeVN0YXRlOiBcIiArIG1lZGlhU291cmNlLnJlYWR5U3RhdGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzMTQubG9nKFwiQ2FsbGluZyBtZWRpYVNvdXJjZS5lbmRPZlN0cmVhbSgpXCIpO1xuICAgICAgICAgICAgLy8gQWxsb3cgdGhpcyB0byB0aHJvdyBhbmQgYmUgY2F1Z2h0IGJ5IHRoZSBlbnF1ZXVlaW5nIGZ1bmN0aW9uXG4gICAgICAgICAgICBtZWRpYVNvdXJjZS5lbmRPZlN0cmVhbSgpO1xuICAgICAgICAgICAgX3RoaXMxNC5obHMudHJpZ2dlcihFdmVudHMuQlVGRkVSRURfVE9fRU5ELCB1bmRlZmluZWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudHJhY2tzRW5kZWQoKTtcbiAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5CVUZGRVJFRF9UT19FTkQsIHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by50cmFja3NFbmRlZCA9IGZ1bmN0aW9uIHRyYWNrc0VuZGVkKCkge1xuICAgICAgdmFyIF90aGlzMTUgPSB0aGlzO1xuICAgICAgdGhpcy5zb3VyY2VCdWZmZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWY3KSB7XG4gICAgICAgIHZhciB0eXBlID0gX3JlZjdbMF07XG4gICAgICAgIGlmICh0eXBlICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIHRyYWNrID0gX3RoaXMxNS50cmFja3NbdHlwZV07XG4gICAgICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgICAgICB0cmFjay5lbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTGV2ZWxVcGRhdGVkID0gZnVuY3Rpb24gb25MZXZlbFVwZGF0ZWQoZXZlbnQsIF9yZWY4KSB7XG4gICAgICB2YXIgZGV0YWlscyA9IF9yZWY4LmRldGFpbHM7XG4gICAgICBpZiAoIWRldGFpbHMuZnJhZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmRldGFpbHMgPSBkZXRhaWxzO1xuICAgICAgdGhpcy51cGRhdGVEdXJhdGlvbigpO1xuICAgIH07XG4gICAgX3Byb3RvLnVwZGF0ZUR1cmF0aW9uID0gZnVuY3Rpb24gdXBkYXRlRHVyYXRpb24oKSB7XG4gICAgICB2YXIgX3RoaXMxNiA9IHRoaXM7XG4gICAgICB2YXIgZHVyYXRpb25BbmRSYW5nZSA9IHRoaXMuZ2V0RHVyYXRpb25BbmRSYW5nZSgpO1xuICAgICAgaWYgKCFkdXJhdGlvbkFuZFJhbmdlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuYmxvY2tVbnRpbE9wZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMxNi51cGRhdGVNZWRpYVNvdXJjZShkdXJhdGlvbkFuZFJhbmdlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKGV2ZW50LCBkYXRhKSB7XG4gICAgICBpZiAoZGF0YS5kZXRhaWxzID09PSBFcnJvckRldGFpbHMuQlVGRkVSX0FQUEVORF9FUlJPUiAmJiBkYXRhLmZyYWcpIHtcbiAgICAgICAgdmFyIF9kYXRhJGVycm9yQWN0aW9uO1xuICAgICAgICB2YXIgbmV4dEF1dG9MZXZlbCA9IChfZGF0YSRlcnJvckFjdGlvbiA9IGRhdGEuZXJyb3JBY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfZGF0YSRlcnJvckFjdGlvbi5uZXh0QXV0b0xldmVsO1xuICAgICAgICBpZiAoaXNGaW5pdGVOdW1iZXIobmV4dEF1dG9MZXZlbCkgJiYgbmV4dEF1dG9MZXZlbCAhPT0gZGF0YS5mcmFnLmxldmVsKSB7XG4gICAgICAgICAgdGhpcy5yZXNldEFwcGVuZEVycm9ycygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXRBcHBlbmRFcnJvcnMgPSBmdW5jdGlvbiByZXNldEFwcGVuZEVycm9ycygpIHtcbiAgICAgIHRoaXMuYXBwZW5kRXJyb3JzID0ge1xuICAgICAgICBhdWRpbzogMCxcbiAgICAgICAgdmlkZW86IDAsXG4gICAgICAgIGF1ZGlvdmlkZW86IDBcbiAgICAgIH07XG4gICAgfTtcbiAgICBfcHJvdG8udHJpbUJ1ZmZlcnMgPSBmdW5jdGlvbiB0cmltQnVmZmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscyxcbiAgICAgICAgZGV0YWlscyA9IHRoaXMuZGV0YWlscyxcbiAgICAgICAgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgICAgaWYgKCFtZWRpYSB8fCBkZXRhaWxzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5zb3VyY2VCdWZmZXJDb3VudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY29uZmlnID0gaGxzLmNvbmZpZztcbiAgICAgIHZhciBjdXJyZW50VGltZSA9IG1lZGlhLmN1cnJlbnRUaW1lO1xuICAgICAgdmFyIHRhcmdldER1cmF0aW9uID0gZGV0YWlscy5sZXZlbFRhcmdldER1cmF0aW9uO1xuXG4gICAgICAvLyBTdXBwb3J0IGZvciBkZXByZWNhdGVkIGxpdmVCYWNrQnVmZmVyTGVuZ3RoXG4gICAgICB2YXIgYmFja0J1ZmZlckxlbmd0aCA9IGRldGFpbHMubGl2ZSAmJiBjb25maWcubGl2ZUJhY2tCdWZmZXJMZW5ndGggIT09IG51bGwgPyBjb25maWcubGl2ZUJhY2tCdWZmZXJMZW5ndGggOiBjb25maWcuYmFja0J1ZmZlckxlbmd0aDtcbiAgICAgIGlmIChpc0Zpbml0ZU51bWJlcihiYWNrQnVmZmVyTGVuZ3RoKSAmJiBiYWNrQnVmZmVyTGVuZ3RoID49IDApIHtcbiAgICAgICAgdmFyIG1heEJhY2tCdWZmZXJMZW5ndGggPSBNYXRoLm1heChiYWNrQnVmZmVyTGVuZ3RoLCB0YXJnZXREdXJhdGlvbik7XG4gICAgICAgIHZhciB0YXJnZXRCYWNrQnVmZmVyUG9zaXRpb24gPSBNYXRoLmZsb29yKGN1cnJlbnRUaW1lIC8gdGFyZ2V0RHVyYXRpb24pICogdGFyZ2V0RHVyYXRpb24gLSBtYXhCYWNrQnVmZmVyTGVuZ3RoO1xuICAgICAgICB0aGlzLmZsdXNoQmFja0J1ZmZlcihjdXJyZW50VGltZSwgdGFyZ2V0RHVyYXRpb24sIHRhcmdldEJhY2tCdWZmZXJQb3NpdGlvbik7XG4gICAgICB9XG4gICAgICBpZiAoaXNGaW5pdGVOdW1iZXIoY29uZmlnLmZyb250QnVmZmVyRmx1c2hUaHJlc2hvbGQpICYmIGNvbmZpZy5mcm9udEJ1ZmZlckZsdXNoVGhyZXNob2xkID4gMCkge1xuICAgICAgICB2YXIgZnJvbnRCdWZmZXJMZW5ndGggPSBNYXRoLm1heChjb25maWcubWF4QnVmZmVyTGVuZ3RoLCBjb25maWcuZnJvbnRCdWZmZXJGbHVzaFRocmVzaG9sZCk7XG4gICAgICAgIHZhciBtYXhGcm9udEJ1ZmZlckxlbmd0aCA9IE1hdGgubWF4KGZyb250QnVmZmVyTGVuZ3RoLCB0YXJnZXREdXJhdGlvbik7XG4gICAgICAgIHZhciB0YXJnZXRGcm9udEJ1ZmZlclBvc2l0aW9uID0gTWF0aC5mbG9vcihjdXJyZW50VGltZSAvIHRhcmdldER1cmF0aW9uKSAqIHRhcmdldER1cmF0aW9uICsgbWF4RnJvbnRCdWZmZXJMZW5ndGg7XG4gICAgICAgIHRoaXMuZmx1c2hGcm9udEJ1ZmZlcihjdXJyZW50VGltZSwgdGFyZ2V0RHVyYXRpb24sIHRhcmdldEZyb250QnVmZmVyUG9zaXRpb24pO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmZsdXNoQmFja0J1ZmZlciA9IGZ1bmN0aW9uIGZsdXNoQmFja0J1ZmZlcihjdXJyZW50VGltZSwgdGFyZ2V0RHVyYXRpb24sIHRhcmdldEJhY2tCdWZmZXJQb3NpdGlvbikge1xuICAgICAgdmFyIF90aGlzMTcgPSB0aGlzO1xuICAgICAgdGhpcy5zb3VyY2VCdWZmZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWY5KSB7XG4gICAgICAgIHZhciB0eXBlID0gX3JlZjlbMF0sXG4gICAgICAgICAgc2IgPSBfcmVmOVsxXTtcbiAgICAgICAgaWYgKHNiKSB7XG4gICAgICAgICAgdmFyIGJ1ZmZlcmVkID0gQnVmZmVySGVscGVyLmdldEJ1ZmZlcmVkKHNiKTtcbiAgICAgICAgICAvLyB3aGVuIHRhcmdldCBidWZmZXIgc3RhcnQgZXhjZWVkcyBhY3R1YWwgYnVmZmVyIHN0YXJ0XG4gICAgICAgICAgaWYgKGJ1ZmZlcmVkLmxlbmd0aCA+IDAgJiYgdGFyZ2V0QmFja0J1ZmZlclBvc2l0aW9uID4gYnVmZmVyZWQuc3RhcnQoMCkpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczE3JGRldGFpbHM7XG4gICAgICAgICAgICBfdGhpczE3Lmhscy50cmlnZ2VyKEV2ZW50cy5CQUNLX0JVRkZFUl9SRUFDSEVELCB7XG4gICAgICAgICAgICAgIGJ1ZmZlckVuZDogdGFyZ2V0QmFja0J1ZmZlclBvc2l0aW9uXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gU3VwcG9ydCBmb3IgZGVwcmVjYXRlZCBldmVudDpcbiAgICAgICAgICAgIHZhciB0cmFjayA9IF90aGlzMTcudHJhY2tzW3R5cGVdO1xuICAgICAgICAgICAgaWYgKChfdGhpczE3JGRldGFpbHMgPSBfdGhpczE3LmRldGFpbHMpICE9IG51bGwgJiYgX3RoaXMxNyRkZXRhaWxzLmxpdmUpIHtcbiAgICAgICAgICAgICAgX3RoaXMxNy5obHMudHJpZ2dlcihFdmVudHMuTElWRV9CQUNLX0JVRkZFUl9SRUFDSEVELCB7XG4gICAgICAgICAgICAgICAgYnVmZmVyRW5kOiB0YXJnZXRCYWNrQnVmZmVyUG9zaXRpb25cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRyYWNrICE9IG51bGwgJiYgdHJhY2suZW5kZWQpIHtcbiAgICAgICAgICAgICAgX3RoaXMxNy5sb2coXCJDYW5ub3QgZmx1c2ggXCIgKyB0eXBlICsgXCIgYmFjayBidWZmZXIgd2hpbGUgU291cmNlQnVmZmVyIGlzIGluIGVuZGVkIHN0YXRlXCIpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpczE3Lmhscy50cmlnZ2VyKEV2ZW50cy5CVUZGRVJfRkxVU0hJTkcsIHtcbiAgICAgICAgICAgICAgc3RhcnRPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgIGVuZE9mZnNldDogdGFyZ2V0QmFja0J1ZmZlclBvc2l0aW9uLFxuICAgICAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLmZsdXNoRnJvbnRCdWZmZXIgPSBmdW5jdGlvbiBmbHVzaEZyb250QnVmZmVyKGN1cnJlbnRUaW1lLCB0YXJnZXREdXJhdGlvbiwgdGFyZ2V0RnJvbnRCdWZmZXJQb3NpdGlvbikge1xuICAgICAgdmFyIF90aGlzMTggPSB0aGlzO1xuICAgICAgdGhpcy5zb3VyY2VCdWZmZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYwKSB7XG4gICAgICAgIHZhciB0eXBlID0gX3JlZjBbMF0sXG4gICAgICAgICAgc2IgPSBfcmVmMFsxXTtcbiAgICAgICAgaWYgKHNiKSB7XG4gICAgICAgICAgdmFyIGJ1ZmZlcmVkID0gQnVmZmVySGVscGVyLmdldEJ1ZmZlcmVkKHNiKTtcbiAgICAgICAgICB2YXIgbnVtQnVmZmVyZWRSYW5nZXMgPSBidWZmZXJlZC5sZW5ndGg7XG4gICAgICAgICAgLy8gVGhlIGJ1ZmZlciBpcyBlaXRoZXIgZW1wdHkgb3IgY29udGlndW91c1xuICAgICAgICAgIGlmIChudW1CdWZmZXJlZFJhbmdlcyA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGJ1ZmZlclN0YXJ0ID0gYnVmZmVyZWQuc3RhcnQobnVtQnVmZmVyZWRSYW5nZXMgLSAxKTtcbiAgICAgICAgICB2YXIgYnVmZmVyRW5kID0gYnVmZmVyZWQuZW5kKG51bUJ1ZmZlcmVkUmFuZ2VzIC0gMSk7XG4gICAgICAgICAgLy8gTm8gZmx1c2ggaWYgd2UgY2FuIHRvbGVyYXRlIHRoZSBjdXJyZW50IGJ1ZmZlciBsZW5ndGggb3IgdGhlIGN1cnJlbnQgYnVmZmVyIHJhbmdlIHdlIHdvdWxkIGZsdXNoIGlzIGNvbnRpZ3VvdXMgd2l0aCBjdXJyZW50IHBvc2l0aW9uXG4gICAgICAgICAgaWYgKHRhcmdldEZyb250QnVmZmVyUG9zaXRpb24gPiBidWZmZXJTdGFydCB8fCBjdXJyZW50VGltZSA+PSBidWZmZXJTdGFydCAmJiBjdXJyZW50VGltZSA8PSBidWZmZXJFbmQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMxOC5obHMudHJpZ2dlcihFdmVudHMuQlVGRkVSX0ZMVVNISU5HLCB7XG4gICAgICAgICAgICBzdGFydE9mZnNldDogYnVmZmVyU3RhcnQsXG4gICAgICAgICAgICBlbmRPZmZzZXQ6IEluZmluaXR5LFxuICAgICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgTWVkaWEgU291cmNlIGR1cmF0aW9uIHRvIGN1cnJlbnQgbGV2ZWwgZHVyYXRpb24gb3Igb3ZlcnJpZGUgdG8gSW5maW5pdHkgaWYgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJcbiAgICAgKiAnbGl2ZUR1cmF0aW9uSW5maW5pdHlgIGlzIHNldCB0byBgdHJ1ZWBcbiAgICAgKiBNb3JlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL2lzc3Vlcy8zNTVcbiAgICAgKi87XG4gICAgX3Byb3RvLmdldER1cmF0aW9uQW5kUmFuZ2UgPSBmdW5jdGlvbiBnZXREdXJhdGlvbkFuZFJhbmdlKCkge1xuICAgICAgdmFyIF90aGlzJG92ZXJyaWRlczI7XG4gICAgICB2YXIgZGV0YWlscyA9IHRoaXMuZGV0YWlscyxcbiAgICAgICAgbWVkaWFTb3VyY2UgPSB0aGlzLm1lZGlhU291cmNlO1xuICAgICAgaWYgKCFkZXRhaWxzIHx8ICF0aGlzLm1lZGlhIHx8IChtZWRpYVNvdXJjZSA9PSBudWxsID8gdm9pZCAwIDogbWVkaWFTb3VyY2UucmVhZHlTdGF0ZSkgIT09ICdvcGVuJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBwbGF5bGlzdEVuZCA9IGRldGFpbHMuZWRnZTtcbiAgICAgIGlmIChkZXRhaWxzLmxpdmUgJiYgdGhpcy5obHMuY29uZmlnLmxpdmVEdXJhdGlvbkluZmluaXR5KSB7XG4gICAgICAgIHZhciBsZW4gPSBkZXRhaWxzLmZyYWdtZW50cy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gJiYgZGV0YWlscy5saXZlICYmICEhbWVkaWFTb3VyY2Uuc2V0TGl2ZVNlZWthYmxlUmFuZ2UpIHtcbiAgICAgICAgICB2YXIgc3RhcnQgPSBNYXRoLm1heCgwLCBkZXRhaWxzLmZyYWdtZW50U3RhcnQpO1xuICAgICAgICAgIHZhciBlbmQgPSBNYXRoLm1heChzdGFydCwgcGxheWxpc3RFbmQpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkdXJhdGlvbjogSW5maW5pdHksXG4gICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkdXJhdGlvbjogSW5maW5pdHlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBvdmVycmlkZUR1cmF0aW9uID0gKF90aGlzJG92ZXJyaWRlczIgPSB0aGlzLm92ZXJyaWRlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG92ZXJyaWRlczIuZHVyYXRpb247XG4gICAgICBpZiAob3ZlcnJpZGVEdXJhdGlvbikge1xuICAgICAgICBpZiAoIWlzRmluaXRlTnVtYmVyKG92ZXJyaWRlRHVyYXRpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkdXJhdGlvbjogb3ZlcnJpZGVEdXJhdGlvblxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFyIG1lZGlhRHVyYXRpb24gPSB0aGlzLm1lZGlhLmR1cmF0aW9uO1xuICAgICAgdmFyIG1zRHVyYXRpb24gPSBpc0Zpbml0ZU51bWJlcihtZWRpYVNvdXJjZS5kdXJhdGlvbikgPyBtZWRpYVNvdXJjZS5kdXJhdGlvbiA6IDA7XG4gICAgICBpZiAocGxheWxpc3RFbmQgPiBtc0R1cmF0aW9uICYmIHBsYXlsaXN0RW5kID4gbWVkaWFEdXJhdGlvbiB8fCAhaXNGaW5pdGVOdW1iZXIobWVkaWFEdXJhdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkdXJhdGlvbjogcGxheWxpc3RFbmRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLnVwZGF0ZU1lZGlhU291cmNlID0gZnVuY3Rpb24gdXBkYXRlTWVkaWFTb3VyY2UoX3JlZjEpIHtcbiAgICAgIHZhciBkdXJhdGlvbiA9IF9yZWYxLmR1cmF0aW9uLFxuICAgICAgICBzdGFydCA9IF9yZWYxLnN0YXJ0LFxuICAgICAgICBlbmQgPSBfcmVmMS5lbmQ7XG4gICAgICB2YXIgbWVkaWFTb3VyY2UgPSB0aGlzLm1lZGlhU291cmNlO1xuICAgICAgaWYgKCF0aGlzLm1lZGlhIHx8ICFtZWRpYVNvdXJjZSB8fCBtZWRpYVNvdXJjZS5yZWFkeVN0YXRlICE9PSAnb3BlbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG1lZGlhU291cmNlLmR1cmF0aW9uICE9PSBkdXJhdGlvbikge1xuICAgICAgICBpZiAoaXNGaW5pdGVOdW1iZXIoZHVyYXRpb24pKSB7XG4gICAgICAgICAgdGhpcy5sb2coXCJVcGRhdGluZyBNZWRpYVNvdXJjZSBkdXJhdGlvbiB0byBcIiArIGR1cmF0aW9uLnRvRml4ZWQoMykpO1xuICAgICAgICB9XG4gICAgICAgIG1lZGlhU291cmNlLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgIT09IHVuZGVmaW5lZCAmJiBlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmxvZyhcIk1lZGlhU291cmNlIGR1cmF0aW9uIGlzIHNldCB0byBcIiArIG1lZGlhU291cmNlLmR1cmF0aW9uICsgXCIuIFNldHRpbmcgc2Vla2FibGUgcmFuZ2UgdG8gXCIgKyBzdGFydCArIFwiLVwiICsgZW5kICsgXCIuXCIpO1xuICAgICAgICBtZWRpYVNvdXJjZS5zZXRMaXZlU2Vla2FibGVSYW5nZShzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5jaGVja1BlbmRpbmdUcmFja3MgPSBmdW5jdGlvbiBjaGVja1BlbmRpbmdUcmFja3MoKSB7XG4gICAgICB2YXIgYnVmZmVyQ29kZWNFdmVudHNUb3RhbCA9IHRoaXMuYnVmZmVyQ29kZWNFdmVudHNUb3RhbCxcbiAgICAgICAgcGVuZGluZ1RyYWNrQ291bnQgPSB0aGlzLnBlbmRpbmdUcmFja0NvdW50LFxuICAgICAgICB0cmFja3MgPSB0aGlzLnRyYWNrcztcbiAgICAgIHRoaXMubG9nKFwiY2hlY2tQZW5kaW5nVHJhY2tzIChwZW5kaW5nOiBcIiArIHBlbmRpbmdUcmFja0NvdW50ICsgXCIgY29kZWMgZXZlbnRzIGV4cGVjdGVkOiBcIiArIGJ1ZmZlckNvZGVjRXZlbnRzVG90YWwgKyBcIikgXCIgKyBzdHJpbmdpZnkodHJhY2tzKSk7XG4gICAgICAvLyBDaGVjayBpZiB3ZSd2ZSByZWNlaXZlZCBhbGwgb2YgdGhlIGV4cGVjdGVkIGJ1ZmZlckNvZGVjIGV2ZW50cy4gV2hlbiBub25lIHJlbWFpbiwgY3JlYXRlIGFsbCB0aGUgc291cmNlQnVmZmVycyBhdCBvbmNlLlxuICAgICAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgYmVjYXVzZSB0aGUgTVNFIHNwZWMgYWxsb3dzIGltcGxlbWVudGF0aW9ucyB0byB0aHJvdyBRdW90YUV4Y2VlZGVkRXJyb3JzIGlmIGNyZWF0aW5nIG5ldyBzb3VyY2VCdWZmZXJzIGFmdGVyXG4gICAgICAvLyBkYXRhIGhhcyBiZWVuIGFwcGVuZGVkIHRvIGV4aXN0aW5nIG9uZXMuXG4gICAgICAvLyAyIHRyYWNrcyBpcyB0aGUgbWF4IChvbmUgZm9yIGF1ZGlvLCBvbmUgZm9yIHZpZGVvKS4gSWYgd2UndmUgcmVhY2ggdGhpcyBtYXggZ28gYWhlYWQgYW5kIGNyZWF0ZSB0aGUgYnVmZmVycy5cbiAgICAgIGlmICh0aGlzLnRyYWNrc1JlYWR5KSB7XG4gICAgICAgIHZhciBfdGhpcyR0cmFuc2ZlckRhdGEzO1xuICAgICAgICB2YXIgdHJhbnNmZXJyZWRUcmFja3MgPSAoX3RoaXMkdHJhbnNmZXJEYXRhMyA9IHRoaXMudHJhbnNmZXJEYXRhKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkdHJhbnNmZXJEYXRhMy50cmFja3M7XG4gICAgICAgIGlmICh0cmFuc2ZlcnJlZFRyYWNrcyAmJiBPYmplY3Qua2V5cyh0cmFuc2ZlcnJlZFRyYWNrcykubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5hdHRhY2hUcmFuc2ZlcnJlZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG9rLCBsZXQncyBjcmVhdGUgdGhlbSBub3cgIVxuICAgICAgICAgIHRoaXMuY3JlYXRlU291cmNlQnVmZmVycygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uYnVmZmVyQ3JlYXRlZCA9IGZ1bmN0aW9uIGJ1ZmZlckNyZWF0ZWQoKSB7XG4gICAgICB2YXIgX3RoaXMxOSA9IHRoaXM7XG4gICAgICBpZiAodGhpcy5zb3VyY2VCdWZmZXJDb3VudCkge1xuICAgICAgICB2YXIgdHJhY2tzID0ge307XG4gICAgICAgIHRoaXMuc291cmNlQnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMTApIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IF9yZWYxMFswXSxcbiAgICAgICAgICAgIGJ1ZmZlciA9IF9yZWYxMFsxXTtcbiAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgdmFyIHRyYWNrID0gX3RoaXMxOS50cmFja3NbdHlwZV07XG4gICAgICAgICAgICB0cmFja3NbdHlwZV0gPSB7XG4gICAgICAgICAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgICAgICAgICBjb250YWluZXI6IHRyYWNrLmNvbnRhaW5lcixcbiAgICAgICAgICAgICAgY29kZWM6IHRyYWNrLmNvZGVjLFxuICAgICAgICAgICAgICBzdXBwbGVtZW50YWw6IHRyYWNrLnN1cHBsZW1lbnRhbCxcbiAgICAgICAgICAgICAgbGV2ZWxDb2RlYzogdHJhY2subGV2ZWxDb2RlYyxcbiAgICAgICAgICAgICAgaWQ6IHRyYWNrLmlkLFxuICAgICAgICAgICAgICBtZXRhZGF0YTogdHJhY2subWV0YWRhdGFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuQlVGRkVSX0NSRUFURUQsIHtcbiAgICAgICAgICB0cmFja3M6IHRyYWNrc1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sb2coXCJTb3VyY2VCdWZmZXJzIGNyZWF0ZWQuIFJ1bm5pbmcgcXVldWU6IFwiICsgdGhpcy5vcGVyYXRpb25RdWV1ZSk7XG4gICAgICAgIHRoaXMuc291cmNlQnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMTEpIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IF9yZWYxMVswXTtcbiAgICAgICAgICBfdGhpczE5LmV4ZWN1dGVOZXh0KHR5cGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcignY291bGQgbm90IGNyZWF0ZSBzb3VyY2UgYnVmZmVyIGZvciBtZWRpYSBjb2RlYyhzKScpO1xuICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwge1xuICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTUVESUFfRVJST1IsXG4gICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLkJVRkZFUl9JTkNPTVBBVElCTEVfQ09ERUNTX0VSUk9SLFxuICAgICAgICAgIGZhdGFsOiB0cnVlLFxuICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICByZWFzb246IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uY3JlYXRlU291cmNlQnVmZmVycyA9IGZ1bmN0aW9uIGNyZWF0ZVNvdXJjZUJ1ZmZlcnMoKSB7XG4gICAgICB2YXIgdHJhY2tzID0gdGhpcy50cmFja3MsXG4gICAgICAgIHNvdXJjZUJ1ZmZlcnMgPSB0aGlzLnNvdXJjZUJ1ZmZlcnMsXG4gICAgICAgIG1lZGlhU291cmNlID0gdGhpcy5tZWRpYVNvdXJjZTtcbiAgICAgIGlmICghbWVkaWFTb3VyY2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTb3VyY2VCdWZmZXJzIGNhbGxlZCB3aGVuIG1lZGlhU291cmNlIHdhcyBudWxsJyk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciB0cmFja05hbWUgaW4gdHJhY2tzKSB7XG4gICAgICAgIHZhciB0eXBlID0gdHJhY2tOYW1lO1xuICAgICAgICB2YXIgdHJhY2sgPSB0cmFja3NbdHlwZV07XG4gICAgICAgIGlmICh0aGlzLmlzUGVuZGluZyh0cmFjaykpIHtcbiAgICAgICAgICB2YXIgY29kZWMgPSB0aGlzLmdldFRyYWNrQ29kZWModHJhY2ssIHR5cGUpO1xuICAgICAgICAgIHZhciBtaW1lVHlwZSA9IHRyYWNrLmNvbnRhaW5lciArIFwiO2NvZGVjcz1cIiArIGNvZGVjO1xuICAgICAgICAgIHRyYWNrLmNvZGVjID0gY29kZWM7XG4gICAgICAgICAgdGhpcy5sb2coXCJjcmVhdGluZyBzb3VyY2VCdWZmZXIoXCIgKyBtaW1lVHlwZSArIFwiKVwiICsgKHRoaXMuY3VycmVudE9wKHR5cGUpID8gJyBRdWV1ZWQnIDogJycpICsgXCIgXCIgKyBzdHJpbmdpZnkodHJhY2spKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHNiID0gbWVkaWFTb3VyY2UuYWRkU291cmNlQnVmZmVyKG1pbWVUeXBlKTtcbiAgICAgICAgICAgIHZhciBzYkluZGV4ID0gc291cmNlQnVmZmVyTmFtZVRvSW5kZXgodHlwZSk7XG4gICAgICAgICAgICB2YXIgc2JUdXBsZSA9IFt0eXBlLCBzYl07XG4gICAgICAgICAgICBzb3VyY2VCdWZmZXJzW3NiSW5kZXhdID0gc2JUdXBsZTtcbiAgICAgICAgICAgIHRyYWNrLmJ1ZmZlciA9IHNiO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMkb3BlcmF0aW9uUXVldWU7XG4gICAgICAgICAgICB0aGlzLmVycm9yKFwiZXJyb3Igd2hpbGUgdHJ5aW5nIHRvIGFkZCBzb3VyY2VCdWZmZXI6IFwiICsgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAvLyByZW1vdmUgaW5pdCBzZWdtZW50IGZyb20gcXVldWUgYW5kIGRlbGV0ZSB0cmFjayBpbmZvXG4gICAgICAgICAgICB0aGlzLnNoaWZ0QW5kRXhlY3V0ZU5leHQodHlwZSk7XG4gICAgICAgICAgICAoX3RoaXMkb3BlcmF0aW9uUXVldWUgPSB0aGlzLm9wZXJhdGlvblF1ZXVlKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkb3BlcmF0aW9uUXVldWUucmVtb3ZlQmxvY2tlcnMoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRyYWNrc1t0eXBlXTtcbiAgICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTUVESUFfRVJST1IsXG4gICAgICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5CVUZGRVJfQUREX0NPREVDX0VSUk9SLFxuICAgICAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgc291cmNlQnVmZmVyTmFtZTogdHlwZSxcbiAgICAgICAgICAgICAgbWltZVR5cGU6IG1pbWVUeXBlLFxuICAgICAgICAgICAgICBwYXJlbnQ6IHRyYWNrLmlkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy50cmFja1NvdXJjZUJ1ZmZlcih0eXBlLCB0cmFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuYnVmZmVyQ3JlYXRlZCgpO1xuICAgIH07XG4gICAgX3Byb3RvLmdldFRyYWNrQ29kZWMgPSBmdW5jdGlvbiBnZXRUcmFja0NvZGVjKHRyYWNrLCB0cmFja05hbWUpIHtcbiAgICAgIC8vIFVzZSBzdXBwbGVtZW50YWwgdmlkZW8gY29kZWMgd2hlbiBzdXBwb3J0ZWQgd2hlbiBhZGRpbmcgU291cmNlQnVmZmVyICgjNTU1OClcbiAgICAgIHZhciBzdXBwbGVtZW50YWxDb2RlYyA9IHRyYWNrLnN1cHBsZW1lbnRhbDtcbiAgICAgIHZhciB0cmFja0NvZGVjID0gdHJhY2suY29kZWM7XG4gICAgICBpZiAoc3VwcGxlbWVudGFsQ29kZWMgJiYgKHRyYWNrTmFtZSA9PT0gJ3ZpZGVvJyB8fCB0cmFja05hbWUgPT09ICdhdWRpb3ZpZGVvJykgJiYgYXJlQ29kZWNzTWVkaWFTb3VyY2VTdXBwb3J0ZWQoc3VwcGxlbWVudGFsQ29kZWMsICd2aWRlbycpKSB7XG4gICAgICAgIHRyYWNrQ29kZWMgPSByZXBsYWNlVmlkZW9Db2RlYyh0cmFja0NvZGVjLCBzdXBwbGVtZW50YWxDb2RlYyk7XG4gICAgICB9XG4gICAgICB2YXIgY29kZWMgPSBwaWNrTW9zdENvbXBsZXRlQ29kZWNOYW1lKHRyYWNrQ29kZWMsIHRyYWNrLmxldmVsQ29kZWMpO1xuICAgICAgaWYgKGNvZGVjKSB7XG4gICAgICAgIGlmICh0cmFja05hbWUuc2xpY2UoMCwgNSkgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q29kZWNDb21wYXRpYmxlTmFtZShjb2RlYywgdGhpcy5hcHBlbmRTb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2RlYztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9O1xuICAgIF9wcm90by50cmFja1NvdXJjZUJ1ZmZlciA9IGZ1bmN0aW9uIHRyYWNrU291cmNlQnVmZmVyKHR5cGUsIHRyYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyMCA9IHRoaXM7XG4gICAgICB2YXIgYnVmZmVyID0gdHJhY2suYnVmZmVyO1xuICAgICAgaWYgKCFidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNvZGVjID0gdGhpcy5nZXRUcmFja0NvZGVjKHRyYWNrLCB0eXBlKTtcbiAgICAgIHRoaXMudHJhY2tzW3R5cGVdID0ge1xuICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgY29kZWM6IGNvZGVjLFxuICAgICAgICBjb250YWluZXI6IHRyYWNrLmNvbnRhaW5lcixcbiAgICAgICAgbGV2ZWxDb2RlYzogdHJhY2subGV2ZWxDb2RlYyxcbiAgICAgICAgc3VwcGxlbWVudGFsOiB0cmFjay5zdXBwbGVtZW50YWwsXG4gICAgICAgIG1ldGFkYXRhOiB0cmFjay5tZXRhZGF0YSxcbiAgICAgICAgaWQ6IHRyYWNrLmlkLFxuICAgICAgICBsaXN0ZW5lcnM6IFtdXG4gICAgICB9O1xuICAgICAgdGhpcy5yZW1vdmVCdWZmZXJMaXN0ZW5lcnModHlwZSk7XG4gICAgICB0aGlzLmFkZEJ1ZmZlckxpc3RlbmVyKHR5cGUsICd1cGRhdGVzdGFydCcsIHRoaXMub25TQlVwZGF0ZVN0YXJ0KTtcbiAgICAgIHRoaXMuYWRkQnVmZmVyTGlzdGVuZXIodHlwZSwgJ3VwZGF0ZWVuZCcsIHRoaXMub25TQlVwZGF0ZUVuZCk7XG4gICAgICB0aGlzLmFkZEJ1ZmZlckxpc3RlbmVyKHR5cGUsICdlcnJvcicsIHRoaXMub25TQlVwZGF0ZUVycm9yKTtcbiAgICAgIC8vIE1hbmFnZWRTb3VyY2VCdWZmZXIgYnVmZmVyZWRjaGFuZ2UgZXZlbnRcbiAgICAgIGlmICh0aGlzLmFwcGVuZFNvdXJjZSkge1xuICAgICAgICB0aGlzLmFkZEJ1ZmZlckxpc3RlbmVyKHR5cGUsICdidWZmZXJlZGNoYW5nZScsIGZ1bmN0aW9uICh0eXBlLCBldmVudCkge1xuICAgICAgICAgIC8vIElmIG1lZGlhIHdhcyBlamVjdGVkIGNoZWNrIGZvciBhIGNoYW5nZS4gQWRkZWQgcmFuZ2VzIGFyZSByZWR1bmRhbnQgd2l0aCBjaGFuZ2VzIG9uICd1cGRhdGVlbmQnIGV2ZW50LlxuICAgICAgICAgIHZhciByZW1vdmVkUmFuZ2VzID0gZXZlbnQucmVtb3ZlZFJhbmdlcztcbiAgICAgICAgICBpZiAocmVtb3ZlZFJhbmdlcyAhPSBudWxsICYmIHJlbW92ZWRSYW5nZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBfdGhpczIwLmhscy50cmlnZ2VyKEV2ZW50cy5CVUZGRVJfRkxVU0hFRCwge1xuICAgICAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uU0JVcGRhdGVTdGFydCA9IGZ1bmN0aW9uIG9uU0JVcGRhdGVTdGFydCh0eXBlKSB7XG4gICAgICB2YXIgb3BlcmF0aW9uID0gdGhpcy5jdXJyZW50T3AodHlwZSk7XG4gICAgICBpZiAoIW9wZXJhdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBvcGVyYXRpb24ub25TdGFydCgpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uU0JVcGRhdGVFbmQgPSBmdW5jdGlvbiBvblNCVXBkYXRlRW5kKHR5cGUpIHtcbiAgICAgIHZhciBfdGhpcyRtZWRpYVNvdXJjZTI7XG4gICAgICBpZiAoKChfdGhpcyRtZWRpYVNvdXJjZTIgPSB0aGlzLm1lZGlhU291cmNlKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkbWVkaWFTb3VyY2UyLnJlYWR5U3RhdGUpID09PSAnY2xvc2VkJykge1xuICAgICAgICB0aGlzLnJlc2V0QnVmZmVyKHR5cGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgb3BlcmF0aW9uID0gdGhpcy5jdXJyZW50T3AodHlwZSk7XG4gICAgICBpZiAoIW9wZXJhdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBvcGVyYXRpb24ub25Db21wbGV0ZSgpO1xuICAgICAgdGhpcy5zaGlmdEFuZEV4ZWN1dGVOZXh0KHR5cGUpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uU0JVcGRhdGVFcnJvciA9IGZ1bmN0aW9uIG9uU0JVcGRhdGVFcnJvcih0eXBlLCBldmVudCkge1xuICAgICAgdmFyIF90aGlzJG1lZGlhU291cmNlMztcbiAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcih0eXBlICsgXCIgU291cmNlQnVmZmVyIGVycm9yLiBNZWRpYVNvdXJjZSByZWFkeVN0YXRlOiBcIiArICgoX3RoaXMkbWVkaWFTb3VyY2UzID0gdGhpcy5tZWRpYVNvdXJjZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG1lZGlhU291cmNlMy5yZWFkeVN0YXRlKSk7XG4gICAgICB0aGlzLmVycm9yKFwiXCIgKyBlcnJvciwgZXZlbnQpO1xuICAgICAgLy8gYWNjb3JkaW5nIHRvIGh0dHA6Ly93d3cudzMub3JnL1RSL21lZGlhLXNvdXJjZS8jc291cmNlYnVmZmVyLWFwcGVuZC1lcnJvclxuICAgICAgLy8gU291cmNlQnVmZmVyIGVycm9ycyBhcmUgbm90IG5lY2Vzc2FyaWx5IGZhdGFsOyBpZiBzbywgdGhlIEhUTUxNZWRpYUVsZW1lbnQgd2lsbCBmaXJlIGFuIGVycm9yIGV2ZW50XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwge1xuICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk1FRElBX0VSUk9SLFxuICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuQlVGRkVSX0FQUEVORElOR19FUlJPUixcbiAgICAgICAgc291cmNlQnVmZmVyTmFtZTogdHlwZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBmYXRhbDogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgLy8gdXBkYXRlZW5kIGlzIGFsd2F5cyBmaXJlZCBhZnRlciBlcnJvciwgc28gd2UnbGwgYWxsb3cgdGhhdCB0byBzaGlmdCB0aGUgY3VycmVudCBvcGVyYXRpb24gb2ZmIG9mIHRoZSBxdWV1ZVxuICAgICAgdmFyIG9wZXJhdGlvbiA9IHRoaXMuY3VycmVudE9wKHR5cGUpO1xuICAgICAgaWYgKG9wZXJhdGlvbikge1xuICAgICAgICBvcGVyYXRpb24ub25FcnJvcihlcnJvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBtZXRob2QgbXVzdCByZXN1bHQgaW4gYW4gdXBkYXRlZW5kIGV2ZW50OyBpZiByZW1vdmUgaXMgbm90IGNhbGxlZCwgb25TQlVwZGF0ZUVuZCBtdXN0IGJlIGNhbGxlZCBtYW51YWxseVxuICAgIDtcbiAgICBfcHJvdG8ucmVtb3ZlRXhlY3V0b3IgPSBmdW5jdGlvbiByZW1vdmVFeGVjdXRvcih0eXBlLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSB7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhLFxuICAgICAgICBtZWRpYVNvdXJjZSA9IHRoaXMubWVkaWFTb3VyY2U7XG4gICAgICB2YXIgdHJhY2sgPSB0aGlzLnRyYWNrc1t0eXBlXTtcbiAgICAgIHZhciBzYiA9IHRyYWNrID09IG51bGwgPyB2b2lkIDAgOiB0cmFjay5idWZmZXI7XG4gICAgICBpZiAoIW1lZGlhIHx8ICFtZWRpYVNvdXJjZSB8fCAhc2IpIHtcbiAgICAgICAgdGhpcy53YXJuKFwiQXR0ZW1wdGluZyB0byByZW1vdmUgZnJvbSB0aGUgXCIgKyB0eXBlICsgXCIgU291cmNlQnVmZmVyLCBidXQgaXQgZG9lcyBub3QgZXhpc3RcIik7XG4gICAgICAgIHRoaXMuc2hpZnRBbmRFeGVjdXRlTmV4dCh0eXBlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG1lZGlhRHVyYXRpb24gPSBpc0Zpbml0ZU51bWJlcihtZWRpYS5kdXJhdGlvbikgPyBtZWRpYS5kdXJhdGlvbiA6IEluZmluaXR5O1xuICAgICAgdmFyIG1zRHVyYXRpb24gPSBpc0Zpbml0ZU51bWJlcihtZWRpYVNvdXJjZS5kdXJhdGlvbikgPyBtZWRpYVNvdXJjZS5kdXJhdGlvbiA6IEluZmluaXR5O1xuICAgICAgdmFyIHJlbW92ZVN0YXJ0ID0gTWF0aC5tYXgoMCwgc3RhcnRPZmZzZXQpO1xuICAgICAgdmFyIHJlbW92ZUVuZCA9IE1hdGgubWluKGVuZE9mZnNldCwgbWVkaWFEdXJhdGlvbiwgbXNEdXJhdGlvbik7XG4gICAgICBpZiAocmVtb3ZlRW5kID4gcmVtb3ZlU3RhcnQgJiYgKCF0cmFjay5lbmRpbmcgfHwgdHJhY2suZW5kZWQpKSB7XG4gICAgICAgIHRyYWNrLmVuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9nKFwiUmVtb3ZpbmcgW1wiICsgcmVtb3ZlU3RhcnQgKyBcIixcIiArIHJlbW92ZUVuZCArIFwiXSBmcm9tIHRoZSBcIiArIHR5cGUgKyBcIiBTb3VyY2VCdWZmZXJcIik7XG4gICAgICAgIHNiLnJlbW92ZShyZW1vdmVTdGFydCwgcmVtb3ZlRW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEN5Y2xlIHRoZSBxdWV1ZVxuICAgICAgICB0aGlzLnNoaWZ0QW5kRXhlY3V0ZU5leHQodHlwZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBtZXRob2QgbXVzdCByZXN1bHQgaW4gYW4gdXBkYXRlZW5kIGV2ZW50OyBpZiBhcHBlbmQgaXMgbm90IGNhbGxlZCwgb25TQlVwZGF0ZUVuZCBtdXN0IGJlIGNhbGxlZCBtYW51YWxseVxuICAgIDtcbiAgICBfcHJvdG8uYXBwZW5kRXhlY3V0b3IgPSBmdW5jdGlvbiBhcHBlbmRFeGVjdXRvcihkYXRhLCB0eXBlKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0aGlzLnRyYWNrc1t0eXBlXTtcbiAgICAgIHZhciBzYiA9IHRyYWNrID09IG51bGwgPyB2b2lkIDAgOiB0cmFjay5idWZmZXI7XG4gICAgICBpZiAoIXNiKSB7XG4gICAgICAgIHRocm93IG5ldyBIbHNKc1RyYWNrUmVtb3ZlZEVycm9yKFwiQXR0ZW1wdGluZyB0byBhcHBlbmQgdG8gdGhlIFwiICsgdHlwZSArIFwiIFNvdXJjZUJ1ZmZlciwgYnV0IGl0IGRvZXMgbm90IGV4aXN0XCIpO1xuICAgICAgfVxuICAgICAgdHJhY2suZW5kaW5nID0gZmFsc2U7XG4gICAgICB0cmFjay5lbmRlZCA9IGZhbHNlO1xuICAgICAgc2IuYXBwZW5kQnVmZmVyKGRhdGEpO1xuICAgIH07XG4gICAgX3Byb3RvLmJsb2NrVW50aWxPcGVuID0gZnVuY3Rpb24gYmxvY2tVbnRpbE9wZW4oY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIxID0gdGhpcztcbiAgICAgIGlmICh0aGlzLmlzVXBkYXRpbmcoKSB8fCB0aGlzLmlzUXVldWVkKCkpIHtcbiAgICAgICAgdGhpcy5ibG9ja0J1ZmZlcnMoY2FsbGJhY2spLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIF90aGlzMjEud2FybihcIlNvdXJjZUJ1ZmZlciBibG9ja2VkIGNhbGxiYWNrIFwiICsgZXJyb3IpO1xuICAgICAgICAgIF90aGlzMjEuc3RlcE9wZXJhdGlvblF1ZXVlKF90aGlzMjEuc291cmNlQnVmZmVyVHlwZXMpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICB0aGlzLndhcm4oXCJDYWxsYmFjayBydW4gd2l0aG91dCBibG9ja2luZyBcIiArIHRoaXMub3BlcmF0aW9uUXVldWUgKyBcIiBcIiArIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmlzVXBkYXRpbmcgPSBmdW5jdGlvbiBpc1VwZGF0aW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlQnVmZmVycy5zb21lKGZ1bmN0aW9uIChfcmVmMTIpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBfcmVmMTJbMF0sXG4gICAgICAgICAgc2IgPSBfcmVmMTJbMV07XG4gICAgICAgIHJldHVybiB0eXBlICYmIHNiLnVwZGF0aW5nO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8uaXNRdWV1ZWQgPSBmdW5jdGlvbiBpc1F1ZXVlZCgpIHtcbiAgICAgIHZhciBfdGhpczIyID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZUJ1ZmZlcnMuc29tZShmdW5jdGlvbiAoX3JlZjEzKSB7XG4gICAgICAgIHZhciB0eXBlID0gX3JlZjEzWzBdO1xuICAgICAgICByZXR1cm4gdHlwZSAmJiAhIV90aGlzMjIuY3VycmVudE9wKHR5cGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8uaXNQZW5kaW5nID0gZnVuY3Rpb24gaXNQZW5kaW5nKHRyYWNrKSB7XG4gICAgICByZXR1cm4gISF0cmFjayAmJiAhdHJhY2suYnVmZmVyO1xuICAgIH1cblxuICAgIC8vIEVucXVldWVzIGFuIG9wZXJhdGlvbiB0byBlYWNoIFNvdXJjZUJ1ZmZlciBxdWV1ZSB3aGljaCwgdXBvbiBleGVjdXRpb24sIHJlc29sdmVzIGEgcHJvbWlzZS4gV2hlbiBhbGwgcHJvbWlzZXNcbiAgICAvLyByZXNvbHZlLCB0aGUgb25VbmJsb2NrZWQgZnVuY3Rpb24gaXMgZXhlY3V0ZWQuIEZ1bmN0aW9ucyBjYWxsaW5nIHRoaXMgbWV0aG9kIGRvIG5vdCBuZWVkIHRvIHVuYmxvY2sgdGhlIHF1ZXVlXG4gICAgLy8gdXBvbiBjb21wbGV0aW9uLCBzaW5jZSB3ZSBhbHJlYWR5IGRvIGl0IGhlcmVcbiAgICA7XG4gICAgX3Byb3RvLmJsb2NrQnVmZmVycyA9IGZ1bmN0aW9uIGJsb2NrQnVmZmVycyhvblVuYmxvY2tlZCwgYnVmZmVyTmFtZXMpIHtcbiAgICAgIHZhciBfdGhpczIzID0gdGhpcztcbiAgICAgIGlmIChidWZmZXJOYW1lcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGJ1ZmZlck5hbWVzID0gdGhpcy5zb3VyY2VCdWZmZXJUeXBlcztcbiAgICAgIH1cbiAgICAgIGlmICghYnVmZmVyTmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMubG9nKCdCbG9ja2luZyBvcGVyYXRpb24gcmVxdWVzdGVkLCBidXQgbm8gU291cmNlQnVmZmVycyBleGlzdCcpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihvblVuYmxvY2tlZCk7XG4gICAgICB9XG4gICAgICB2YXIgb3BlcmF0aW9uUXVldWUgPSB0aGlzLm9wZXJhdGlvblF1ZXVlO1xuXG4gICAgICAvLyBsb2dnZXIuZGVidWcoYFtidWZmZXItY29udHJvbGxlcl06IEJsb2NraW5nICR7YnVmZmVyc30gU291cmNlQnVmZmVyYCk7XG4gICAgICB2YXIgYmxvY2tpbmdPcGVyYXRpb25zID0gYnVmZmVyTmFtZXMubWFwKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIzLmFwcGVuZEJsb2NrZXIodHlwZSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBhdWRpb0Jsb2NrZWQgPSBidWZmZXJOYW1lcy5sZW5ndGggPiAxICYmICEhdGhpcy5ibG9ja2VkQXVkaW9BcHBlbmQ7XG4gICAgICBpZiAoYXVkaW9CbG9ja2VkKSB7XG4gICAgICAgIHRoaXMudW5ibG9ja0F1ZGlvKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoYmxvY2tpbmdPcGVyYXRpb25zKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgaWYgKG9wZXJhdGlvblF1ZXVlICE9PSBfdGhpczIzLm9wZXJhdGlvblF1ZXVlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvZ2dlci5kZWJ1ZyhgW2J1ZmZlci1jb250cm9sbGVyXTogQmxvY2tpbmcgb3BlcmF0aW9uIHJlc29sdmVkOyB1bmJsb2NraW5nICR7YnVmZmVyc30gU291cmNlQnVmZmVyYCk7XG4gICAgICAgIG9uVW5ibG9ja2VkKCk7XG4gICAgICAgIF90aGlzMjMuc3RlcE9wZXJhdGlvblF1ZXVlKF90aGlzMjMuc291cmNlQnVmZmVyVHlwZXMpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8uc3RlcE9wZXJhdGlvblF1ZXVlID0gZnVuY3Rpb24gc3RlcE9wZXJhdGlvblF1ZXVlKGJ1ZmZlck5hbWVzKSB7XG4gICAgICB2YXIgX3RoaXMyNCA9IHRoaXM7XG4gICAgICBidWZmZXJOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHZhciBfdGhpczI0JHRyYWNrcyR0eXBlO1xuICAgICAgICB2YXIgc2IgPSAoX3RoaXMyNCR0cmFja3MkdHlwZSA9IF90aGlzMjQudHJhY2tzW3R5cGVdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMyNCR0cmFja3MkdHlwZS5idWZmZXI7XG4gICAgICAgIC8vIE9ubHkgY3ljbGUgdGhlIHF1ZXVlIGlmIHRoZSBTQiBpcyBub3QgdXBkYXRpbmcuIFRoZXJlJ3MgYSBidWcgaW4gQ2hyb21lIHdoaWNoIHNldHMgdGhlIFNCIHVwZGF0aW5nIGZsYWcgdG9cbiAgICAgICAgLy8gdHJ1ZSB3aGVuIGNoYW5naW5nIHRoZSBNZWRpYVNvdXJjZSBkdXJhdGlvbiAoaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9OTU5MzU5JmNhbj0yJnE9bWVkaWFzb3VyY2UlMjBkdXJhdGlvbilcbiAgICAgICAgLy8gV2hpbGUgdGhpcyBpcyBhIHdvcmthcm91bmQsIGl0J3MgcHJvYmFibHkgdXNlZnVsIHRvIGhhdmUgYXJvdW5kXG4gICAgICAgIGlmICghc2IgfHwgc2IudXBkYXRpbmcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMyNC5zaGlmdEFuZEV4ZWN1dGVOZXh0KHR5cGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8uYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG9wZXJhdGlvbiwgdHlwZSwgcGVuZGluZykge1xuICAgICAgaWYgKHRoaXMub3BlcmF0aW9uUXVldWUpIHtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25RdWV1ZS5hcHBlbmQob3BlcmF0aW9uLCB0eXBlLCBwZW5kaW5nKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5hcHBlbmRCbG9ja2VyID0gZnVuY3Rpb24gYXBwZW5kQmxvY2tlcih0eXBlKSB7XG4gICAgICBpZiAodGhpcy5vcGVyYXRpb25RdWV1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25RdWV1ZS5hcHBlbmRCbG9ja2VyKHR5cGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmN1cnJlbnRPcCA9IGZ1bmN0aW9uIGN1cnJlbnRPcCh0eXBlKSB7XG4gICAgICBpZiAodGhpcy5vcGVyYXRpb25RdWV1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25RdWV1ZS5jdXJyZW50KHR5cGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8uZXhlY3V0ZU5leHQgPSBmdW5jdGlvbiBleGVjdXRlTmV4dCh0eXBlKSB7XG4gICAgICBpZiAodHlwZSAmJiB0aGlzLm9wZXJhdGlvblF1ZXVlKSB7XG4gICAgICAgIHRoaXMub3BlcmF0aW9uUXVldWUuZXhlY3V0ZU5leHQodHlwZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uc2hpZnRBbmRFeGVjdXRlTmV4dCA9IGZ1bmN0aW9uIHNoaWZ0QW5kRXhlY3V0ZU5leHQodHlwZSkge1xuICAgICAgaWYgKHRoaXMub3BlcmF0aW9uUXVldWUpIHtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25RdWV1ZS5zaGlmdEFuZEV4ZWN1dGVOZXh0KHR5cGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmFkZEJ1ZmZlckxpc3RlbmVyID0gZnVuY3Rpb24gYWRkQnVmZmVyTGlzdGVuZXIodHlwZSwgZXZlbnQsIGZuKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0aGlzLnRyYWNrc1t0eXBlXTtcbiAgICAgIGlmICghdHJhY2spIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGJ1ZmZlciA9IHRyYWNrLmJ1ZmZlcjtcbiAgICAgIGlmICghYnVmZmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBsaXN0ZW5lciA9IGZuLmJpbmQodGhpcywgdHlwZSk7XG4gICAgICB0cmFjay5saXN0ZW5lcnMucHVzaCh7XG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyXG4gICAgICB9KTtcbiAgICAgIGJ1ZmZlci5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVtb3ZlQnVmZmVyTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlQnVmZmVyTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciB0cmFjayA9IHRoaXMudHJhY2tzW3R5cGVdO1xuICAgICAgaWYgKCF0cmFjaykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgYnVmZmVyID0gdHJhY2suYnVmZmVyO1xuICAgICAgaWYgKCFidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdHJhY2subGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgYnVmZmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobC5ldmVudCwgbC5saXN0ZW5lcik7XG4gICAgICB9KTtcbiAgICAgIHRyYWNrLmxpc3RlbmVycy5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhCdWZmZXJDb250cm9sbGVyLCBbe1xuICAgICAga2V5OiBcIm1lZGlhU291cmNlT3Blbk9yRW5kZWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMkbWVkaWFTb3VyY2U0O1xuICAgICAgICB2YXIgcmVhZHlTdGF0ZSA9IChfdGhpcyRtZWRpYVNvdXJjZTQgPSB0aGlzLm1lZGlhU291cmNlKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkbWVkaWFTb3VyY2U0LnJlYWR5U3RhdGU7XG4gICAgICAgIHJldHVybiByZWFkeVN0YXRlID09PSAnb3BlbicgfHwgcmVhZHlTdGF0ZSA9PT0gJ2VuZGVkJztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic291cmNlQnVmZmVyVHJhY2tzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIF90aGlzMjUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy50cmFja3MpLnJlZHVjZShmdW5jdGlvbiAoYmFzZVRyYWNrcywgdHlwZSkge1xuICAgICAgICAgIHZhciB0cmFjayA9IF90aGlzMjUudHJhY2tzW3R5cGVdO1xuICAgICAgICAgIGJhc2VUcmFja3NbdHlwZV0gPSB7XG4gICAgICAgICAgICBpZDogdHJhY2suaWQsXG4gICAgICAgICAgICBjb250YWluZXI6IHRyYWNrLmNvbnRhaW5lcixcbiAgICAgICAgICAgIGNvZGVjOiB0cmFjay5jb2RlYyxcbiAgICAgICAgICAgIGxldmVsQ29kZWM6IHRyYWNrLmxldmVsQ29kZWNcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBiYXNlVHJhY2tzO1xuICAgICAgICB9LCB7fSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJ1ZmZlcmVkVG9FbmRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMyNiA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZUJ1ZmZlckNvdW50ID4gMCAmJiAhdGhpcy5zb3VyY2VCdWZmZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYxNCkge1xuICAgICAgICAgIHZhciBfdGhpczI2JHRyYWNrcyR0eXBlLCBfdGhpczI2JHRyYWNrcyR0eXBlMjtcbiAgICAgICAgICB2YXIgdHlwZSA9IF9yZWYxNFswXTtcbiAgICAgICAgICByZXR1cm4gdHlwZSAmJiAoISgoX3RoaXMyNiR0cmFja3MkdHlwZSA9IF90aGlzMjYudHJhY2tzW3R5cGVdKSAhPSBudWxsICYmIF90aGlzMjYkdHJhY2tzJHR5cGUuZW5kZWQpIHx8ICgoX3RoaXMyNiR0cmFja3MkdHlwZTIgPSBfdGhpczI2LnRyYWNrc1t0eXBlXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzMjYkdHJhY2tzJHR5cGUyLmVuZGluZykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidHJhY2tzUmVhZHlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgcGVuZGluZ1RyYWNrQ291bnQgPSB0aGlzLnBlbmRpbmdUcmFja0NvdW50O1xuICAgICAgICByZXR1cm4gcGVuZGluZ1RyYWNrQ291bnQgPiAwICYmIChwZW5kaW5nVHJhY2tDb3VudCA+PSB0aGlzLmJ1ZmZlckNvZGVjRXZlbnRzVG90YWwgfHwgdGhpcy5pc1BlbmRpbmcodGhpcy50cmFja3MuYXVkaW92aWRlbykpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtZWRpYVNyY1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfdGhpcyRtZWRpYSwgX3RoaXMkbWVkaWEkcXVlcnlTZWxlO1xuICAgICAgICB2YXIgbWVkaWEgPSAoKF90aGlzJG1lZGlhID0gdGhpcy5tZWRpYSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhpcyRtZWRpYSRxdWVyeVNlbGUgPSBfdGhpcyRtZWRpYS5xdWVyeVNlbGVjdG9yKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkbWVkaWEkcXVlcnlTZWxlLmNhbGwoX3RoaXMkbWVkaWEsICdzb3VyY2UnKSkgfHwgdGhpcy5tZWRpYTtcbiAgICAgICAgcmV0dXJuIG1lZGlhID09IG51bGwgPyB2b2lkIDAgOiBtZWRpYS5zcmM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBlbmRpbmdUcmFja0NvdW50XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIF90aGlzMjcgPSB0aGlzO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy50cmFja3MpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCB0eXBlKSB7XG4gICAgICAgICAgcmV0dXJuIGFjYyArIChfdGhpczI3LmlzUGVuZGluZyhfdGhpczI3LnRyYWNrc1t0eXBlXSkgPyAxIDogMCk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzb3VyY2VCdWZmZXJDb3VudFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZUJ1ZmZlcnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIF9yZWYxNSkge1xuICAgICAgICAgIHZhciB0eXBlID0gX3JlZjE1WzBdO1xuICAgICAgICAgIHJldHVybiBhY2MgKyAodHlwZSA/IDEgOiAwKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNvdXJjZUJ1ZmZlclR5cGVzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlQnVmZmVycy5tYXAoZnVuY3Rpb24gKF9yZWYxNikge1xuICAgICAgICAgIHZhciB0eXBlID0gX3JlZjE2WzBdO1xuICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gISF0eXBlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG4gIH0oTG9nZ2VyKTtcbiAgZnVuY3Rpb24gcmVtb3ZlU291cmNlQ2hpbGRyZW4obm9kZSkge1xuICAgIHZhciBzb3VyY2VDaGlsZHJlbiA9IG5vZGUucXVlcnlTZWxlY3RvckFsbCgnc291cmNlJyk7XG4gICAgW10uc2xpY2UuY2FsbChzb3VyY2VDaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICBub2RlLnJlbW92ZUNoaWxkKHNvdXJjZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkU291cmNlKG1lZGlhLCB1cmwpIHtcbiAgICB2YXIgc291cmNlID0gc2VsZi5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKTtcbiAgICBzb3VyY2UudHlwZSA9ICd2aWRlby9tcDQnO1xuICAgIHNvdXJjZS5zcmMgPSB1cmw7XG4gICAgbWVkaWEuYXBwZW5kQ2hpbGQoc291cmNlKTtcbiAgfVxuICBmdW5jdGlvbiBzb3VyY2VCdWZmZXJOYW1lVG9JbmRleCh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdhdWRpbycgPyAxIDogMDtcbiAgfVxuXG4gIHZhciBDYXBMZXZlbENvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhcExldmVsQ29udHJvbGxlcihobHMpIHtcbiAgICAgIHRoaXMuaGxzID0gdm9pZCAwO1xuICAgICAgdGhpcy5hdXRvTGV2ZWxDYXBwaW5nID0gdm9pZCAwO1xuICAgICAgdGhpcy5maXJzdExldmVsID0gdm9pZCAwO1xuICAgICAgdGhpcy5tZWRpYSA9IHZvaWQgMDtcbiAgICAgIHRoaXMucmVzdHJpY3RlZExldmVscyA9IHZvaWQgMDtcbiAgICAgIHRoaXMudGltZXIgPSB2b2lkIDA7XG4gICAgICB0aGlzLmNsaWVudFJlY3QgPSB2b2lkIDA7XG4gICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXIgPSB2b2lkIDA7XG4gICAgICB0aGlzLmhscyA9IGhscztcbiAgICAgIHRoaXMuYXV0b0xldmVsQ2FwcGluZyA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgIHRoaXMuZmlyc3RMZXZlbCA9IC0xO1xuICAgICAgdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgICB0aGlzLnJlc3RyaWN0ZWRMZXZlbHMgPSBbXTtcbiAgICAgIHRoaXMudGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmNsaWVudFJlY3QgPSBudWxsO1xuICAgICAgdGhpcy5yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgIH1cbiAgICB2YXIgX3Byb3RvID0gQ2FwTGV2ZWxDb250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8uc2V0U3RyZWFtQ29udHJvbGxlciA9IGZ1bmN0aW9uIHNldFN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtQ29udHJvbGxlcikge1xuICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyID0gc3RyZWFtQ29udHJvbGxlcjtcbiAgICB9O1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIGlmICh0aGlzLmhscykge1xuICAgICAgICB0aGlzLnVucmVnaXN0ZXJMaXN0ZW5lcigpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgdGhpcy5zdG9wQ2FwcGluZygpO1xuICAgICAgfVxuICAgICAgdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgICB0aGlzLmNsaWVudFJlY3QgPSBudWxsO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5obHMgPSB0aGlzLnN0cmVhbUNvbnRyb2xsZXIgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICBobHMub24oRXZlbnRzLkZQU19EUk9QX0xFVkVMX0NBUFBJTkcsIHRoaXMub25GcHNEcm9wTGV2ZWxDYXBwaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUVESUFfQVRUQUNISU5HLCB0aGlzLm9uTWVkaWFBdHRhY2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NQU5JRkVTVF9QQVJTRUQsIHRoaXMub25NYW5pZmVzdFBhcnNlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkxFVkVMU19VUERBVEVELCB0aGlzLm9uTGV2ZWxzVXBkYXRlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkJVRkZFUl9DT0RFQ1MsIHRoaXMub25CdWZmZXJDb2RlY3MsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NRURJQV9ERVRBQ0hJTkcsIHRoaXMub25NZWRpYURldGFjaGluZywgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8udW5yZWdpc3Rlckxpc3RlbmVyID0gZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVyKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9mZihFdmVudHMuRlBTX0RST1BfTEVWRUxfQ0FQUElORywgdGhpcy5vbkZwc0Ryb3BMZXZlbENhcHBpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUVESUFfQVRUQUNISU5HLCB0aGlzLm9uTWVkaWFBdHRhY2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUFOSUZFU1RfUEFSU0VELCB0aGlzLm9uTWFuaWZlc3RQYXJzZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTEVWRUxTX1VQREFURUQsIHRoaXMub25MZXZlbHNVcGRhdGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkJVRkZFUl9DT0RFQ1MsIHRoaXMub25CdWZmZXJDb2RlY3MsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUVESUFfREVUQUNISU5HLCB0aGlzLm9uTWVkaWFEZXRhY2hpbmcsIHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uRnBzRHJvcExldmVsQ2FwcGluZyA9IGZ1bmN0aW9uIG9uRnBzRHJvcExldmVsQ2FwcGluZyhldmVudCwgZGF0YSkge1xuICAgICAgLy8gRG9uJ3QgYWRkIGEgcmVzdHJpY3RlZCBsZXZlbCBtb3JlIHRoYW4gb25jZVxuICAgICAgdmFyIGxldmVsID0gdGhpcy5obHMubGV2ZWxzW2RhdGEuZHJvcHBlZExldmVsXTtcbiAgICAgIGlmICh0aGlzLmlzTGV2ZWxBbGxvd2VkKGxldmVsKSkge1xuICAgICAgICB0aGlzLnJlc3RyaWN0ZWRMZXZlbHMucHVzaCh7XG4gICAgICAgICAgYml0cmF0ZTogbGV2ZWwuYml0cmF0ZSxcbiAgICAgICAgICBoZWlnaHQ6IGxldmVsLmhlaWdodCxcbiAgICAgICAgICB3aWR0aDogbGV2ZWwud2lkdGhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYUF0dGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFBdHRhY2hpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMubWVkaWEgPSBkYXRhLm1lZGlhIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCA/IGRhdGEubWVkaWEgOiBudWxsO1xuICAgICAgdGhpcy5jbGllbnRSZWN0ID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLnRpbWVyICYmIHRoaXMuaGxzLmxldmVscy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5kZXRlY3RQbGF5ZXJTaXplKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25NYW5pZmVzdFBhcnNlZCA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RQYXJzZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIHRoaXMucmVzdHJpY3RlZExldmVscyA9IFtdO1xuICAgICAgdGhpcy5maXJzdExldmVsID0gZGF0YS5maXJzdExldmVsO1xuICAgICAgaWYgKGhscy5jb25maWcuY2FwTGV2ZWxUb1BsYXllclNpemUgJiYgZGF0YS52aWRlbykge1xuICAgICAgICAvLyBTdGFydCBjYXBwaW5nIGltbWVkaWF0ZWx5IGlmIHRoZSBtYW5pZmVzdCBoYXMgc2lnbmFsZWQgdmlkZW8gY29kZWNzXG4gICAgICAgIHRoaXMuc3RhcnRDYXBwaW5nKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25MZXZlbHNVcGRhdGVkID0gZnVuY3Rpb24gb25MZXZlbHNVcGRhdGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICBpZiAodGhpcy50aW1lciAmJiBpc0Zpbml0ZU51bWJlcih0aGlzLmF1dG9MZXZlbENhcHBpbmcpKSB7XG4gICAgICAgIHRoaXMuZGV0ZWN0UGxheWVyU2l6ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9ubHkgYWN0aXZhdGUgY2FwcGluZyB3aGVuIHBsYXlpbmcgYSB2aWRlbyBzdHJlYW07IG90aGVyd2lzZSwgbXVsdGktYml0cmF0ZSBhdWRpby1vbmx5IHN0cmVhbXMgd2lsbCBiZSByZXN0cmljdGVkXG4gICAgLy8gdG8gdGhlIGZpcnN0IGxldmVsXG4gICAgO1xuICAgIF9wcm90by5vbkJ1ZmZlckNvZGVjcyA9IGZ1bmN0aW9uIG9uQnVmZmVyQ29kZWNzKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICBpZiAoaGxzLmNvbmZpZy5jYXBMZXZlbFRvUGxheWVyU2l6ZSAmJiBkYXRhLnZpZGVvKSB7XG4gICAgICAgIC8vIElmIHRoZSBtYW5pZmVzdCBkaWQgbm90IHNpZ25hbCBhIHZpZGVvIGNvZGVjIGNhcHBpbmcgaGFzIGJlZW4gZGVmZXJyZWQgdW50aWwgd2UncmUgY2VydGFpbiB2aWRlbyBpcyBwcmVzZW50XG4gICAgICAgIHRoaXMuc3RhcnRDYXBwaW5nKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYURldGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFEZXRhY2hpbmcoKSB7XG4gICAgICB0aGlzLnN0b3BDYXBwaW5nKCk7XG4gICAgICB0aGlzLm1lZGlhID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5kZXRlY3RQbGF5ZXJTaXplID0gZnVuY3Rpb24gZGV0ZWN0UGxheWVyU2l6ZSgpIHtcbiAgICAgIGlmICh0aGlzLm1lZGlhKSB7XG4gICAgICAgIGlmICh0aGlzLm1lZGlhSGVpZ2h0IDw9IDAgfHwgdGhpcy5tZWRpYVdpZHRoIDw9IDApIHtcbiAgICAgICAgICB0aGlzLmNsaWVudFJlY3QgPSBudWxsO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGV2ZWxzID0gdGhpcy5obHMubGV2ZWxzO1xuICAgICAgICBpZiAobGV2ZWxzLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgICAgICB2YXIgbWF4TGV2ZWwgPSB0aGlzLmdldE1heExldmVsKGxldmVscy5sZW5ndGggLSAxKTtcbiAgICAgICAgICBpZiAobWF4TGV2ZWwgIT09IHRoaXMuYXV0b0xldmVsQ2FwcGluZykge1xuICAgICAgICAgICAgaGxzLmxvZ2dlci5sb2coXCJTZXR0aW5nIGF1dG9MZXZlbENhcHBpbmcgdG8gXCIgKyBtYXhMZXZlbCArIFwiOiBcIiArIGxldmVsc1ttYXhMZXZlbF0uaGVpZ2h0ICsgXCJwQFwiICsgbGV2ZWxzW21heExldmVsXS5iaXRyYXRlICsgXCIgZm9yIG1lZGlhIFwiICsgdGhpcy5tZWRpYVdpZHRoICsgXCJ4XCIgKyB0aGlzLm1lZGlhSGVpZ2h0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGxzLmF1dG9MZXZlbENhcHBpbmcgPSBtYXhMZXZlbDtcbiAgICAgICAgICBpZiAoaGxzLmF1dG9MZXZlbEVuYWJsZWQgJiYgaGxzLmF1dG9MZXZlbENhcHBpbmcgPiB0aGlzLmF1dG9MZXZlbENhcHBpbmcgJiYgdGhpcy5zdHJlYW1Db250cm9sbGVyKSB7XG4gICAgICAgICAgICAvLyBpZiBhdXRvIGxldmVsIGNhcHBpbmcgaGFzIGEgaGlnaGVyIHZhbHVlIGZvciB0aGUgcHJldmlvdXMgb25lLCBmbHVzaCB0aGUgYnVmZmVyIHVzaW5nIG5leHRMZXZlbFN3aXRjaFxuICAgICAgICAgICAgLy8gdXN1YWxseSBoYXBwZW4gd2hlbiB0aGUgdXNlciBnbyB0byB0aGUgZnVsbHNjcmVlbiBtb2RlLlxuICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyLm5leHRMZXZlbFN3aXRjaCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmF1dG9MZXZlbENhcHBpbmcgPSBobHMuYXV0b0xldmVsQ2FwcGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgICogcmV0dXJucyBsZXZlbCBzaG91bGQgYmUgdGhlIG9uZSB3aXRoIHRoZSBkaW1lbnNpb25zIGVxdWFsIG9yIGdyZWF0ZXIgdGhhbiB0aGUgbWVkaWEgKHBsYXllcikgZGltZW5zaW9ucyAoc28gdGhlIHZpZGVvIHdpbGwgYmUgZG93bnNjYWxlZClcbiAgICAgKi87XG4gICAgX3Byb3RvLmdldE1heExldmVsID0gZnVuY3Rpb24gZ2V0TWF4TGV2ZWwoY2FwTGV2ZWxJbmRleCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBsZXZlbHMgPSB0aGlzLmhscy5sZXZlbHM7XG4gICAgICBpZiAoIWxldmVscy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIHZhbGlkTGV2ZWxzID0gbGV2ZWxzLmZpbHRlcihmdW5jdGlvbiAobGV2ZWwsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc0xldmVsQWxsb3dlZChsZXZlbCkgJiYgaW5kZXggPD0gY2FwTGV2ZWxJbmRleDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jbGllbnRSZWN0ID0gbnVsbDtcbiAgICAgIHJldHVybiBDYXBMZXZlbENvbnRyb2xsZXIuZ2V0TWF4TGV2ZWxCeU1lZGlhU2l6ZSh2YWxpZExldmVscywgdGhpcy5tZWRpYVdpZHRoLCB0aGlzLm1lZGlhSGVpZ2h0KTtcbiAgICB9O1xuICAgIF9wcm90by5zdGFydENhcHBpbmcgPSBmdW5jdGlvbiBzdGFydENhcHBpbmcoKSB7XG4gICAgICBpZiAodGhpcy50aW1lcikge1xuICAgICAgICAvLyBEb24ndCByZXNldCBjYXBwaW5nIGlmIHN0YXJ0ZWQgdHdpY2U7IHRoaXMgY2FuIGhhcHBlbiBpZiB0aGUgbWFuaWZlc3Qgc2lnbmFscyBhIHZpZGVvIGNvZGVjXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXV0b0xldmVsQ2FwcGluZyA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgIHNlbGYuY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICAgIHRoaXMudGltZXIgPSBzZWxmLnNldEludGVydmFsKHRoaXMuZGV0ZWN0UGxheWVyU2l6ZS5iaW5kKHRoaXMpLCAxMDAwKTtcbiAgICAgIHRoaXMuZGV0ZWN0UGxheWVyU2l6ZSgpO1xuICAgIH07XG4gICAgX3Byb3RvLnN0b3BDYXBwaW5nID0gZnVuY3Rpb24gc3RvcENhcHBpbmcoKSB7XG4gICAgICB0aGlzLnJlc3RyaWN0ZWRMZXZlbHMgPSBbXTtcbiAgICAgIHRoaXMuZmlyc3RMZXZlbCA9IC0xO1xuICAgICAgdGhpcy5hdXRvTGV2ZWxDYXBwaW5nID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgc2VsZi5jbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgICAgICB0aGlzLnRpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmdldERpbWVuc2lvbnMgPSBmdW5jdGlvbiBnZXREaW1lbnNpb25zKCkge1xuICAgICAgaWYgKHRoaXMuY2xpZW50UmVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRSZWN0O1xuICAgICAgfVxuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIHZhciBib3VuZHNSZWN0ID0ge1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwXG4gICAgICB9O1xuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIHZhciBjbGllbnRSZWN0ID0gbWVkaWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGJvdW5kc1JlY3Qud2lkdGggPSBjbGllbnRSZWN0LndpZHRoO1xuICAgICAgICBib3VuZHNSZWN0LmhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0O1xuICAgICAgICBpZiAoIWJvdW5kc1JlY3Qud2lkdGggJiYgIWJvdW5kc1JlY3QuaGVpZ2h0KSB7XG4gICAgICAgICAgLy8gV2hlbiB0aGUgbWVkaWEgZWxlbWVudCBoYXMgbm8gd2lkdGggb3IgaGVpZ2h0IChlcXVpdmFsZW50IHRvIG5vdCBiZWluZyBpbiB0aGUgRE9NKSxcbiAgICAgICAgICAvLyB0aGVuIHVzZSBpdHMgd2lkdGggYW5kIGhlaWdodCBhdHRyaWJ1dGVzIChtZWRpYS53aWR0aCwgbWVkaWEuaGVpZ2h0KVxuICAgICAgICAgIGJvdW5kc1JlY3Qud2lkdGggPSBjbGllbnRSZWN0LnJpZ2h0IC0gY2xpZW50UmVjdC5sZWZ0IHx8IG1lZGlhLndpZHRoIHx8IDA7XG4gICAgICAgICAgYm91bmRzUmVjdC5oZWlnaHQgPSBjbGllbnRSZWN0LmJvdHRvbSAtIGNsaWVudFJlY3QudG9wIHx8IG1lZGlhLmhlaWdodCB8fCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmNsaWVudFJlY3QgPSBib3VuZHNSZWN0O1xuICAgICAgcmV0dXJuIGJvdW5kc1JlY3Q7XG4gICAgfTtcbiAgICBfcHJvdG8uaXNMZXZlbEFsbG93ZWQgPSBmdW5jdGlvbiBpc0xldmVsQWxsb3dlZChsZXZlbCkge1xuICAgICAgdmFyIHJlc3RyaWN0ZWRMZXZlbHMgPSB0aGlzLnJlc3RyaWN0ZWRMZXZlbHM7XG4gICAgICByZXR1cm4gIXJlc3RyaWN0ZWRMZXZlbHMuc29tZShmdW5jdGlvbiAocmVzdHJpY3RlZExldmVsKSB7XG4gICAgICAgIHJldHVybiBsZXZlbC5iaXRyYXRlID09PSByZXN0cmljdGVkTGV2ZWwuYml0cmF0ZSAmJiBsZXZlbC53aWR0aCA9PT0gcmVzdHJpY3RlZExldmVsLndpZHRoICYmIGxldmVsLmhlaWdodCA9PT0gcmVzdHJpY3RlZExldmVsLmhlaWdodDtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgQ2FwTGV2ZWxDb250cm9sbGVyLmdldE1heExldmVsQnlNZWRpYVNpemUgPSBmdW5jdGlvbiBnZXRNYXhMZXZlbEJ5TWVkaWFTaXplKGxldmVscywgd2lkdGgsIGhlaWdodCkge1xuICAgICAgaWYgKCEobGV2ZWxzICE9IG51bGwgJiYgbGV2ZWxzLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuXG4gICAgICAvLyBMZXZlbHMgY2FuIGhhdmUgdGhlIHNhbWUgZGltZW5zaW9ucyBidXQgZGlmZmVyaW5nIGJhbmR3aWR0aHMgLSBzaW5jZSBsZXZlbHMgYXJlIG9yZGVyZWQsIHdlIGNhbiBsb29rIHRvIHRoZSBuZXh0XG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hldGhlciB3ZSd2ZSBjaG9zZW4gdGhlIGdyZWF0ZXN0IGJhbmR3aWR0aCBmb3IgdGhlIG1lZGlhJ3MgZGltZW5zaW9uc1xuICAgICAgdmFyIGF0R3JlYXRlc3RCYW5kd2lkdGggPSBmdW5jdGlvbiBhdEdyZWF0ZXN0QmFuZHdpZHRoKGN1ckxldmVsLCBuZXh0TGV2ZWwpIHtcbiAgICAgICAgaWYgKCFuZXh0TGV2ZWwpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VyTGV2ZWwud2lkdGggIT09IG5leHRMZXZlbC53aWR0aCB8fCBjdXJMZXZlbC5oZWlnaHQgIT09IG5leHRMZXZlbC5oZWlnaHQ7XG4gICAgICB9O1xuXG4gICAgICAvLyBJZiB3ZSBydW4gdGhyb3VnaCB0aGUgbG9vcCB3aXRob3V0IGJyZWFraW5nLCB0aGUgbWVkaWEncyBkaW1lbnNpb25zIGFyZSBncmVhdGVyIHRoYW4gZXZlcnkgbGV2ZWwsIHNvIGRlZmF1bHQgdG9cbiAgICAgIC8vIHRoZSBtYXggbGV2ZWxcbiAgICAgIHZhciBtYXhMZXZlbEluZGV4ID0gbGV2ZWxzLmxlbmd0aCAtIDE7XG4gICAgICAvLyBQcmV2ZW50IGNoYW5nZXMgaW4gYXNwZWN0LXJhdGlvIGZyb20gY2F1c2luZyBjYXBwaW5nIHRvIHRvZ2dsZSBiYWNrIGFuZCBmb3J0aFxuICAgICAgdmFyIHNxdWFyZVNpemUgPSBNYXRoLm1heCh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBsZXZlbCA9IGxldmVsc1tpXTtcbiAgICAgICAgaWYgKChsZXZlbC53aWR0aCA+PSBzcXVhcmVTaXplIHx8IGxldmVsLmhlaWdodCA+PSBzcXVhcmVTaXplKSAmJiBhdEdyZWF0ZXN0QmFuZHdpZHRoKGxldmVsLCBsZXZlbHNbaSArIDFdKSkge1xuICAgICAgICAgIG1heExldmVsSW5kZXggPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF4TGV2ZWxJbmRleDtcbiAgICB9O1xuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoQ2FwTGV2ZWxDb250cm9sbGVyLCBbe1xuICAgICAga2V5OiBcIm1lZGlhV2lkdGhcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREaW1lbnNpb25zKCkud2lkdGggKiB0aGlzLmNvbnRlbnRTY2FsZUZhY3RvcjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWVkaWFIZWlnaHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREaW1lbnNpb25zKCkuaGVpZ2h0ICogdGhpcy5jb250ZW50U2NhbGVGYWN0b3I7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNvbnRlbnRTY2FsZUZhY3RvclwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBwaXhlbFJhdGlvID0gMTtcbiAgICAgICAgaWYgKCF0aGlzLmhscy5jb25maWcuaWdub3JlRGV2aWNlUGl4ZWxSYXRpbykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwaXhlbFJhdGlvID0gc2VsZi5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8qIG5vLW9wICovXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLm1pbihwaXhlbFJhdGlvLCB0aGlzLmhscy5jb25maWcubWF4RGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICB9XG4gICAgfV0pO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIENvbW1vbiBNZWRpYSBPYmplY3QgVHlwZVxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHZhciBDbU9iamVjdFR5cGUgPSB7XG4gICAgLyoqXG4gICAgICogdGV4dCBmaWxlLCBzdWNoIGFzIGEgbWFuaWZlc3Qgb3IgcGxheWxpc3RcbiAgICAgKi9cbiAgICBNQU5JRkVTVDogJ20nLFxuICAgIC8qKlxuICAgICAqIGF1ZGlvIG9ubHlcbiAgICAgKi9cbiAgICBBVURJTzogJ2EnLFxuICAgIC8qKlxuICAgICAqIHZpZGVvIG9ubHlcbiAgICAgKi9cbiAgICBWSURFTzogJ3YnLFxuICAgIC8qKlxuICAgICAqIG11eGVkIGF1ZGlvIGFuZCB2aWRlb1xuICAgICAqL1xuICAgIE1VWEVEOiAnYXYnLFxuICAgIC8qKlxuICAgICAqIGluaXQgc2VnbWVudFxuICAgICAqL1xuICAgIElOSVQ6ICdpJyxcbiAgICAvKipcbiAgICAgKiBjYXB0aW9uIG9yIHN1YnRpdGxlXG4gICAgICovXG4gICAgQ0FQVElPTjogJ2MnLFxuICAgIC8qKlxuICAgICAqIElTT0JNRkYgdGltZWQgdGV4dCB0cmFja1xuICAgICAqL1xuICAgIFRJTUVEX1RFWFQ6ICd0dCcsXG4gICAgLyoqXG4gICAgICogY3J5cHRvZ3JhcGhpYyBrZXksIGxpY2Vuc2Ugb3IgY2VydGlmaWNhdGUuXG4gICAgICovXG4gICAgS0VZOiAnaycsXG4gICAgLyoqXG4gICAgICogb3RoZXJcbiAgICAgKi9cbiAgICBPVEhFUjogJ28nXG4gIH07XG5cbiAgLyoqXG4gICAqIENvbW1vbiBNZWRpYSBDbGllbnQgRGF0YSBPYmplY3QgVHlwZVxuICAgKlxuICAgKiBAZ3JvdXAgQ01DRFxuICAgKlxuICAgKiBAYmV0YVxuICAgKlxuICAgKiBAZW51bVxuICAgKi9cbiAgdmFyIENtY2RPYmplY3RUeXBlID0gQ21PYmplY3RUeXBlO1xuXG4gIC8qKlxuICAgKiBDb21tb24gTWVkaWEgU3RyZWFtaW5nIEZvcm1hdFxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHZhciBDbVN0cmVhbWluZ0Zvcm1hdCA9IHtcbiAgICAvKipcbiAgICAgKiBIVFRQIExpdmUgU3RyZWFtaW5nIChITFMpXG4gICAgICovXG4gICAgSExTOiAnaCd9O1xuXG4gIC8qKlxuICAgKiBDb21tb24gTWVkaWEgQ2xpZW50IERhdGEgU3RyZWFtaW5nIEZvcm1hdFxuICAgKlxuICAgKiBAZ3JvdXAgQ01DRFxuICAgKlxuICAgKiBAZW51bVxuICAgKlxuICAgKiBAYmV0YVxuICAgKi9cbiAgdmFyIENtY2RTdHJlYW1pbmdGb3JtYXQgPSBDbVN0cmVhbWluZ0Zvcm1hdDtcblxuICAvKipcbiAgICogQ01DRCBvYmplY3QgaGVhZGVyIG5hbWUuXG4gICAqXG4gICAqIEBncm91cCBDTUNEXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICB2YXIgQ01DRF9PQkpFQ1QgPSAnQ01DRC1PYmplY3QnO1xuXG4gIC8qKlxuICAgKiBDTUNEIHJlcXVlc3QgaGVhZGVyIG5hbWUuXG4gICAqXG4gICAqIEBncm91cCBDTUNEXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICB2YXIgQ01DRF9SRVFVRVNUID0gJ0NNQ0QtUmVxdWVzdCc7XG5cbiAgLyoqXG4gICAqIENNQ0Qgc2Vzc2lvbiBoZWFkZXIgbmFtZS5cbiAgICpcbiAgICogQGdyb3VwIENNQ0RcbiAgICpcbiAgICogQGJldGFcbiAgICovXG4gIHZhciBDTUNEX1NFU1NJT04gPSAnQ01DRC1TZXNzaW9uJztcblxuICAvKipcbiAgICogQ01DRCBzdGF0dXMgaGVhZGVyIG5hbWUuXG4gICAqXG4gICAqIEBncm91cCBDTUNEXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICB2YXIgQ01DRF9TVEFUVVMgPSAnQ01DRC1TdGF0dXMnO1xuXG4gIC8qKlxuICAgKiBDTUNEIGhlYWRlciBmaWVsZHMuXG4gICAqXG4gICAqIEBncm91cCBDTUNEXG4gICAqXG4gICAqIEBlbnVtXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICB2YXIgQ21jZEhlYWRlckZpZWxkID0ge1xuICAgIC8qKlxuICAgICAqIGtleXMgd2hvc2UgdmFsdWVzIHZhcnkgd2l0aCB0aGUgb2JqZWN0IGJlaW5nIHJlcXVlc3RlZC5cbiAgICAgKi9cbiAgICBPQkpFQ1Q6IENNQ0RfT0JKRUNULFxuICAgIC8qKlxuICAgICAqIGtleXMgd2hvc2UgdmFsdWVzIHZhcnkgd2l0aCBlYWNoIHJlcXVlc3QuXG4gICAgICovXG4gICAgUkVRVUVTVDogQ01DRF9SRVFVRVNULFxuICAgIC8qKlxuICAgICAqIGtleXMgd2hvc2UgdmFsdWVzIGFyZSBleHBlY3RlZCB0byBiZSBpbnZhcmlhbnQgb3ZlciB0aGUgbGlmZSBvZiB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBTRVNTSU9OOiBDTUNEX1NFU1NJT04sXG4gICAgLyoqXG4gICAgICoga2V5cyB3aG9zZSB2YWx1ZXMgZG8gbm90IHZhcnkgd2l0aCBldmVyeSByZXF1ZXN0IG9yIG9iamVjdC5cbiAgICAgKi9cbiAgICBTVEFUVVM6IENNQ0RfU1RBVFVTXG4gIH07XG5cbiAgdmFyIF9DbWNkSGVhZGVyTWFwO1xuICAvKipcbiAgICogVGhlIG1hcCBvZiBDTUNEIGhlYWRlciBmaWVsZHMgdG8gb2ZmaWNpYWwgQ01DRCBrZXlzLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICpcbiAgICogQGdyb3VwIENNQ0RcbiAgICovXG4gIHZhciBDbWNkSGVhZGVyTWFwID0gKF9DbWNkSGVhZGVyTWFwID0ge30sIF9DbWNkSGVhZGVyTWFwW0NtY2RIZWFkZXJGaWVsZC5PQkpFQ1RdID0gWydicicsICdkJywgJ290JywgJ3RiJ10sIF9DbWNkSGVhZGVyTWFwW0NtY2RIZWFkZXJGaWVsZC5SRVFVRVNUXSA9IFsnYmwnLCAnZGwnLCAnbXRwJywgJ25vcicsICducnInLCAnc3UnXSwgX0NtY2RIZWFkZXJNYXBbQ21jZEhlYWRlckZpZWxkLlNFU1NJT05dID0gWydjaWQnLCAncHInLCAnc2YnLCAnc2lkJywgJ3N0JywgJ3YnXSwgX0NtY2RIZWFkZXJNYXBbQ21jZEhlYWRlckZpZWxkLlNUQVRVU10gPSBbJ2JzJywgJ3J0cCddLCBfQ21jZEhlYWRlck1hcCk7XG5cbiAgLyoqXG4gICAqIFN0cnVjdHVyZWQgRmllbGQgSXRlbVxuICAgKlxuICAgKiBAZ3JvdXAgU3RydWN0dXJlZCBGaWVsZFxuICAgKlxuICAgKiBAYmV0YVxuICAgKi9cbiAgdmFyIFNmSXRlbSA9IGZ1bmN0aW9uIFNmSXRlbSh2YWx1ZSwgcGFyYW1zKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gdiBpbnN0YW5jZW9mIFNmSXRlbSA/IHYgOiBuZXcgU2ZJdGVtKHYpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgfTtcblxuICB2YXIgRElDVCA9ICdEaWN0JztcblxuICBmdW5jdGlvbiBmb3JtYXQodmFsdWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgcmV0dXJuICdNYXB7fSc7XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgcmV0dXJuICdTZXR7fSc7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiB0aHJvd0Vycm9yKGFjdGlvbiwgc3JjLCB0eXBlLCBjYXVzZSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJmYWlsZWQgdG8gXCIgKyBhY3Rpb24gKyBcIiBcXFwiXCIgKyBmb3JtYXQoc3JjKSArIFwiXFxcIiBhcyBcIiArIHR5cGUsIHtcbiAgICAgIGNhdXNlOiBjYXVzZVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VyaWFsaXplRXJyb3Ioc3JjLCB0eXBlLCBjYXVzZSkge1xuICAgIHJldHVybiB0aHJvd0Vycm9yKCdzZXJpYWxpemUnLCBzcmMsIHR5cGUsIGNhdXNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGNsYXNzIHRvIHJlcHJlc2VudCBzdHJ1Y3R1cmVkIGZpZWxkIHRva2VucyB3aGVuIGBTeW1ib2xgIGlzIG5vdCBhdmFpbGFibGUuXG4gICAqXG4gICAqIEBncm91cCBTdHJ1Y3R1cmVkIEZpZWxkXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICB2YXIgU2ZUb2tlbiA9IGZ1bmN0aW9uIFNmVG9rZW4oZGVzY3JpcHRpb24pIHtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIH07XG5cbiAgdmFyIEJBUkVfSVRFTSA9ICdCYXJlIEl0ZW0nO1xuXG4gIHZhciBCT09MRUFOID0gJ0Jvb2xlYW4nO1xuXG4gIC8vIDQuMS45LiAgU2VyaWFsaXppbmcgYSBCb29sZWFuXG4gIC8vXG4gIC8vIEdpdmVuIGEgQm9vbGVhbiBhcyBpbnB1dF9ib29sZWFuLCByZXR1cm4gYW4gQVNDSUkgc3RyaW5nIHN1aXRhYmxlIGZvclxuICAvLyB1c2UgaW4gYSBIVFRQIGZpZWxkIHZhbHVlLlxuICAvL1xuICAvLyAxLiAgSWYgaW5wdXRfYm9vbGVhbiBpcyBub3QgYSBib29sZWFuLCBmYWlsIHNlcmlhbGl6YXRpb24uXG4gIC8vXG4gIC8vIDIuICBMZXQgb3V0cHV0IGJlIGFuIGVtcHR5IHN0cmluZy5cbiAgLy9cbiAgLy8gMy4gIEFwcGVuZCBcIj9cIiB0byBvdXRwdXQuXG4gIC8vXG4gIC8vIDQuICBJZiBpbnB1dF9ib29sZWFuIGlzIHRydWUsIGFwcGVuZCBcIjFcIiB0byBvdXRwdXQuXG4gIC8vXG4gIC8vIDUuICBJZiBpbnB1dF9ib29sZWFuIGlzIGZhbHNlLCBhcHBlbmQgXCIwXCIgdG8gb3V0cHV0LlxuICAvL1xuICAvLyA2LiAgUmV0dXJuIG91dHB1dC5cbiAgZnVuY3Rpb24gc2VyaWFsaXplQm9vbGVhbih2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJykge1xuICAgICAgdGhyb3cgc2VyaWFsaXplRXJyb3IodmFsdWUsIEJPT0xFQU4pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgPyAnPzEnIDogJz8wJztcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmNvZGVzIGJpbmFyeSBkYXRhIHRvIGJhc2U2NFxuICAgKlxuICAgKiBAcGFyYW0gYmluYXJ5IC0gVGhlIGJpbmFyeSBkYXRhIHRvIGVuY29kZVxuICAgKiBAcmV0dXJucyBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nXG4gICAqXG4gICAqIEBncm91cCBVdGlsc1xuICAgKlxuICAgKiBAYmV0YVxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZTY0ZW5jb2RlKGJpbmFyeSkge1xuICAgIHJldHVybiBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBiaW5hcnkpKTtcbiAgfVxuXG4gIHZhciBCWVRFUyA9ICdCeXRlIFNlcXVlbmNlJztcblxuICAvLyA0LjEuOC4gIFNlcmlhbGl6aW5nIGEgQnl0ZSBTZXF1ZW5jZVxuICAvL1xuICAvLyBHaXZlbiBhIEJ5dGUgU2VxdWVuY2UgYXMgaW5wdXRfYnl0ZXMsIHJldHVybiBhbiBBU0NJSSBzdHJpbmcgc3VpdGFibGVcbiAgLy8gZm9yIHVzZSBpbiBhIEhUVFAgZmllbGQgdmFsdWUuXG4gIC8vXG4gIC8vIDEuICBJZiBpbnB1dF9ieXRlcyBpcyBub3QgYSBzZXF1ZW5jZSBvZiBieXRlcywgZmFpbCBzZXJpYWxpemF0aW9uLlxuICAvL1xuICAvLyAyLiAgTGV0IG91dHB1dCBiZSBhbiBlbXB0eSBzdHJpbmcuXG4gIC8vXG4gIC8vIDMuICBBcHBlbmQgXCI6XCIgdG8gb3V0cHV0LlxuICAvL1xuICAvLyA0LiAgQXBwZW5kIHRoZSByZXN1bHQgb2YgYmFzZTY0LWVuY29kaW5nIGlucHV0X2J5dGVzIGFzIHBlclxuICAvLyAgICAgW1JGQzQ2NDhdLCBTZWN0aW9uIDQsIHRha2luZyBhY2NvdW50IG9mIHRoZSByZXF1aXJlbWVudHMgYmVsb3cuXG4gIC8vXG4gIC8vIDUuICBBcHBlbmQgXCI6XCIgdG8gb3V0cHV0LlxuICAvL1xuICAvLyA2LiAgUmV0dXJuIG91dHB1dC5cbiAgLy9cbiAgLy8gVGhlIGVuY29kZWQgZGF0YSBpcyByZXF1aXJlZCB0byBiZSBwYWRkZWQgd2l0aCBcIj1cIiwgYXMgcGVyIFtSRkM0NjQ4XSxcbiAgLy8gU2VjdGlvbiAzLjIuXG4gIC8vXG4gIC8vIExpa2V3aXNlLCBlbmNvZGVkIGRhdGEgU0hPVUxEIGhhdmUgcGFkIGJpdHMgc2V0IHRvIHplcm8sIGFzIHBlclxuICAvLyBbUkZDNDY0OF0sIFNlY3Rpb24gMy41LCB1bmxlc3MgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGRvIHNvIGR1ZSB0b1xuICAvLyBpbXBsZW1lbnRhdGlvbiBjb25zdHJhaW50cy5cbiAgZnVuY3Rpb24gc2VyaWFsaXplQnl0ZVNlcXVlbmNlKHZhbHVlKSB7XG4gICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBzZXJpYWxpemVFcnJvcih2YWx1ZSwgQllURVMpO1xuICAgIH1cbiAgICByZXR1cm4gXCI6XCIgKyBiYXNlNjRlbmNvZGUodmFsdWUpICsgXCI6XCI7XG4gIH1cblxuICB2YXIgSU5URUdFUiA9ICdJbnRlZ2VyJztcblxuICBmdW5jdGlvbiBpc0ludmFsaWRJbnQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPCAtOTk5OTk5OTk5OTk5OTk5IHx8IDk5OTk5OTk5OTk5OTk5OSA8IHZhbHVlO1xuICB9XG5cbiAgLy8gNC4xLjQuICBTZXJpYWxpemluZyBhbiBJbnRlZ2VyXG4gIC8vXG4gIC8vIEdpdmVuIGFuIEludGVnZXIgYXMgaW5wdXRfaW50ZWdlciwgcmV0dXJuIGFuIEFTQ0lJIHN0cmluZyBzdWl0YWJsZVxuICAvLyBmb3IgdXNlIGluIGEgSFRUUCBmaWVsZCB2YWx1ZS5cbiAgLy9cbiAgLy8gMS4gIElmIGlucHV0X2ludGVnZXIgaXMgbm90IGFuIGludGVnZXIgaW4gdGhlIHJhbmdlIG9mXG4gIC8vICAgICAtOTk5LDk5OSw5OTksOTk5LDk5OSB0byA5OTksOTk5LDk5OSw5OTksOTk5IGluY2x1c2l2ZSwgZmFpbFxuICAvLyAgICAgc2VyaWFsaXphdGlvbi5cbiAgLy9cbiAgLy8gMi4gIExldCBvdXRwdXQgYmUgYW4gZW1wdHkgc3RyaW5nLlxuICAvL1xuICAvLyAzLiAgSWYgaW5wdXRfaW50ZWdlciBpcyBsZXNzIHRoYW4gKGJ1dCBub3QgZXF1YWwgdG8pIDAsIGFwcGVuZCBcIi1cIiB0b1xuICAvLyAgICAgb3V0cHV0LlxuICAvL1xuICAvLyA0LiAgQXBwZW5kIGlucHV0X2ludGVnZXIncyBudW1lcmljIHZhbHVlIHJlcHJlc2VudGVkIGluIGJhc2UgMTAgdXNpbmdcbiAgLy8gICAgIG9ubHkgZGVjaW1hbCBkaWdpdHMgdG8gb3V0cHV0LlxuICAvL1xuICAvLyA1LiAgUmV0dXJuIG91dHB1dC5cbiAgZnVuY3Rpb24gc2VyaWFsaXplSW50ZWdlcih2YWx1ZSkge1xuICAgIGlmIChpc0ludmFsaWRJbnQodmFsdWUpKSB7XG4gICAgICB0aHJvdyBzZXJpYWxpemVFcnJvcih2YWx1ZSwgSU5URUdFUik7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgLy8gNC4xLjEwLiAgU2VyaWFsaXppbmcgYSBEYXRlXG4gIC8vXG4gIC8vIEdpdmVuIGEgRGF0ZSBhcyBpbnB1dF9pbnRlZ2VyLCByZXR1cm4gYW4gQVNDSUkgc3RyaW5nIHN1aXRhYmxlIGZvclxuICAvLyB1c2UgaW4gYW4gSFRUUCBmaWVsZCB2YWx1ZS5cbiAgLy8gMS4gIExldCBvdXRwdXQgYmUgXCJAXCIuXG4gIC8vIDIuICBBcHBlbmQgdG8gb3V0cHV0IHRoZSByZXN1bHQgb2YgcnVubmluZyBTZXJpYWxpemluZyBhbiBJbnRlZ2VyXG4gIC8vICAgICB3aXRoIGlucHV0X2RhdGUgKFNlY3Rpb24gNC4xLjQpLlxuICAvLyAzLiAgUmV0dXJuIG91dHB1dC5cbiAgZnVuY3Rpb24gc2VyaWFsaXplRGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiBcIkBcIiArIHNlcmlhbGl6ZUludGVnZXIodmFsdWUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpbXBsZW1lbnRzIHRoZSByb3VuZGluZyBwcm9jZWR1cmUgZGVzY3JpYmVkIGluIHN0ZXAgMiBvZiB0aGUgXCJTZXJpYWxpemluZyBhIERlY2ltYWxcIiBzcGVjaWZpY2F0aW9uLlxuICAgKiBUaGlzIHJvdW5kaW5nIHN0eWxlIGlzIGtub3duIGFzIFwiZXZlbiByb3VuZGluZ1wiLCBcImJhbmtlcidzIHJvdW5kaW5nXCIsIG9yIFwiY29tbWVyY2lhbCByb3VuZGluZ1wiLlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gcm91bmRcbiAgICogQHBhcmFtIHByZWNpc2lvbiAtIFRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdG9cbiAgICogQHJldHVybnMgVGhlIHJvdW5kZWQgdmFsdWVcbiAgICpcbiAgICogQGdyb3VwIFV0aWxzXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICBmdW5jdGlvbiByb3VuZFRvRXZlbih2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgcmV0dXJuIC1yb3VuZFRvRXZlbigtdmFsdWUsIHByZWNpc2lvbik7XG4gICAgfVxuICAgIHZhciBkZWNpbWFsU2hpZnQgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgICB2YXIgaXNFcXVpZGlzdGFudCA9IE1hdGguYWJzKHZhbHVlICogZGVjaW1hbFNoaWZ0ICUgMSAtIDAuNSkgPCBOdW1iZXIuRVBTSUxPTjtcbiAgICBpZiAoaXNFcXVpZGlzdGFudCkge1xuICAgICAgLy8gSWYgdGhlIHRhaWwgb2YgdGhlIGRlY2ltYWwgcGxhY2UgaXMgJ2VxdWlkaXN0YW50JyB3ZSByb3VuZCB0byB0aGUgbmVhcmVzdCBldmVuIHZhbHVlXG4gICAgICB2YXIgZmxvb3JlZFZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSAqIGRlY2ltYWxTaGlmdCk7XG4gICAgICByZXR1cm4gKGZsb29yZWRWYWx1ZSAlIDIgPT09IDAgPyBmbG9vcmVkVmFsdWUgOiBmbG9vcmVkVmFsdWUgKyAxKSAvIGRlY2ltYWxTaGlmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlLCBwcm9jZWVkIGFzIG5vcm1hbFxuICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBkZWNpbWFsU2hpZnQpIC8gZGVjaW1hbFNoaWZ0O1xuICAgIH1cbiAgfVxuXG4gIHZhciBERUNJTUFMID0gJ0RlY2ltYWwnO1xuXG4gIC8vIDQuMS41LiAgU2VyaWFsaXppbmcgYSBEZWNpbWFsXG4gIC8vXG4gIC8vIEdpdmVuIGEgZGVjaW1hbCBudW1iZXIgYXMgaW5wdXRfZGVjaW1hbCwgcmV0dXJuIGFuIEFTQ0lJIHN0cmluZ1xuICAvLyBzdWl0YWJsZSBmb3IgdXNlIGluIGEgSFRUUCBmaWVsZCB2YWx1ZS5cbiAgLy9cbiAgLy8gMS4gICBJZiBpbnB1dF9kZWNpbWFsIGlzIG5vdCBhIGRlY2ltYWwgbnVtYmVyLCBmYWlsIHNlcmlhbGl6YXRpb24uXG4gIC8vXG4gIC8vIDIuICAgSWYgaW5wdXRfZGVjaW1hbCBoYXMgbW9yZSB0aGFuIHRocmVlIHNpZ25pZmljYW50IGRpZ2l0cyB0byB0aGVcbiAgLy8gICAgICByaWdodCBvZiB0aGUgZGVjaW1hbCBwb2ludCwgcm91bmQgaXQgdG8gdGhyZWUgZGVjaW1hbCBwbGFjZXMsXG4gIC8vICAgICAgcm91bmRpbmcgdGhlIGZpbmFsIGRpZ2l0IHRvIHRoZSBuZWFyZXN0IHZhbHVlLCBvciB0byB0aGUgZXZlblxuICAvLyAgICAgIHZhbHVlIGlmIGl0IGlzIGVxdWlkaXN0YW50LlxuICAvL1xuICAvLyAzLiAgIElmIGlucHV0X2RlY2ltYWwgaGFzIG1vcmUgdGhhbiAxMiBzaWduaWZpY2FudCBkaWdpdHMgdG8gdGhlIGxlZnRcbiAgLy8gICAgICBvZiB0aGUgZGVjaW1hbCBwb2ludCBhZnRlciByb3VuZGluZywgZmFpbCBzZXJpYWxpemF0aW9uLlxuICAvL1xuICAvLyA0LiAgIExldCBvdXRwdXQgYmUgYW4gZW1wdHkgc3RyaW5nLlxuICAvL1xuICAvLyA1LiAgIElmIGlucHV0X2RlY2ltYWwgaXMgbGVzcyB0aGFuIChidXQgbm90IGVxdWFsIHRvKSAwLCBhcHBlbmQgXCItXCJcbiAgLy8gICAgICB0byBvdXRwdXQuXG4gIC8vXG4gIC8vIDYuICAgQXBwZW5kIGlucHV0X2RlY2ltYWwncyBpbnRlZ2VyIGNvbXBvbmVudCByZXByZXNlbnRlZCBpbiBiYXNlIDEwXG4gIC8vICAgICAgKHVzaW5nIG9ubHkgZGVjaW1hbCBkaWdpdHMpIHRvIG91dHB1dDsgaWYgaXQgaXMgemVybywgYXBwZW5kXG4gIC8vICAgICAgXCIwXCIuXG4gIC8vXG4gIC8vIDcuICAgQXBwZW5kIFwiLlwiIHRvIG91dHB1dC5cbiAgLy9cbiAgLy8gOC4gICBJZiBpbnB1dF9kZWNpbWFsJ3MgZnJhY3Rpb25hbCBjb21wb25lbnQgaXMgemVybywgYXBwZW5kIFwiMFwiIHRvXG4gIC8vICAgICAgb3V0cHV0LlxuICAvL1xuICAvLyA5LiAgIE90aGVyd2lzZSwgYXBwZW5kIHRoZSBzaWduaWZpY2FudCBkaWdpdHMgb2YgaW5wdXRfZGVjaW1hbCdzXG4gIC8vICAgICAgZnJhY3Rpb25hbCBjb21wb25lbnQgcmVwcmVzZW50ZWQgaW4gYmFzZSAxMCAodXNpbmcgb25seSBkZWNpbWFsXG4gIC8vICAgICAgZGlnaXRzKSB0byBvdXRwdXQuXG4gIC8vXG4gIC8vIDEwLiAgUmV0dXJuIG91dHB1dC5cbiAgZnVuY3Rpb24gc2VyaWFsaXplRGVjaW1hbCh2YWx1ZSkge1xuICAgIHZhciByb3VuZGVkVmFsdWUgPSByb3VuZFRvRXZlbih2YWx1ZSwgMyk7IC8vIHJvdW5kIHRvIDMgZGVjaW1hbCBwbGFjZXNcbiAgICBpZiAoTWF0aC5mbG9vcihNYXRoLmFicyhyb3VuZGVkVmFsdWUpKS50b1N0cmluZygpLmxlbmd0aCA+IDEyKSB7XG4gICAgICB0aHJvdyBzZXJpYWxpemVFcnJvcih2YWx1ZSwgREVDSU1BTCk7XG4gICAgfVxuICAgIHZhciBzdHJpbmdWYWx1ZSA9IHJvdW5kZWRWYWx1ZS50b1N0cmluZygpO1xuICAgIHJldHVybiBzdHJpbmdWYWx1ZS5pbmNsdWRlcygnLicpID8gc3RyaW5nVmFsdWUgOiBzdHJpbmdWYWx1ZSArIFwiLjBcIjtcbiAgfVxuXG4gIHZhciBTVFJJTkcgPSAnU3RyaW5nJztcblxuICB2YXIgU1RSSU5HX1JFR0VYID0gL1tcXHgwMC1cXHgxZlxceDdmXSsvO1xuXG4gIC8vIDQuMS42LiAgU2VyaWFsaXppbmcgYSBTdHJpbmdcbiAgLy9cbiAgLy8gR2l2ZW4gYSBTdHJpbmcgYXMgaW5wdXRfc3RyaW5nLCByZXR1cm4gYW4gQVNDSUkgc3RyaW5nIHN1aXRhYmxlIGZvclxuICAvLyB1c2UgaW4gYSBIVFRQIGZpZWxkIHZhbHVlLlxuICAvL1xuICAvLyAxLiAgQ29udmVydCBpbnB1dF9zdHJpbmcgaW50byBhIHNlcXVlbmNlIG9mIEFTQ0lJIGNoYXJhY3RlcnM7IGlmXG4gIC8vICAgICBjb252ZXJzaW9uIGZhaWxzLCBmYWlsIHNlcmlhbGl6YXRpb24uXG4gIC8vXG4gIC8vIDIuICBJZiBpbnB1dF9zdHJpbmcgY29udGFpbnMgY2hhcmFjdGVycyBpbiB0aGUgcmFuZ2UgJXgwMC0xZiBvciAleDdmXG4gIC8vICAgICAoaS5lLiwgbm90IGluIFZDSEFSIG9yIFNQKSwgZmFpbCBzZXJpYWxpemF0aW9uLlxuICAvL1xuICAvLyAzLiAgTGV0IG91dHB1dCBiZSB0aGUgc3RyaW5nIERRVU9URS5cbiAgLy9cbiAgLy8gNC4gIEZvciBlYWNoIGNoYXJhY3RlciBjaGFyIGluIGlucHV0X3N0cmluZzpcbiAgLy9cbiAgLy8gICAgIDEuICBJZiBjaGFyIGlzIFwiXFxcIiBvciBEUVVPVEU6XG4gIC8vXG4gIC8vICAgICAgICAgMS4gIEFwcGVuZCBcIlxcXCIgdG8gb3V0cHV0LlxuICAvL1xuICAvLyAgICAgMi4gIEFwcGVuZCBjaGFyIHRvIG91dHB1dC5cbiAgLy9cbiAgLy8gNS4gIEFwcGVuZCBEUVVPVEUgdG8gb3V0cHV0LlxuICAvL1xuICAvLyA2LiAgUmV0dXJuIG91dHB1dC5cbiAgZnVuY3Rpb24gc2VyaWFsaXplU3RyaW5nKHZhbHVlKSB7XG4gICAgaWYgKFNUUklOR19SRUdFWC50ZXN0KHZhbHVlKSkge1xuICAgICAgdGhyb3cgc2VyaWFsaXplRXJyb3IodmFsdWUsIFNUUklORyk7XG4gICAgfVxuICAgIHJldHVybiBcIlxcXCJcIiArIHZhbHVlLnJlcGxhY2UoL1xcXFwvZywgXCJcXFxcXFxcXFwiKS5yZXBsYWNlKC9cIi9nLCBcIlxcXFxcXFwiXCIpICsgXCJcXFwiXCI7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBzeW1ib2wgdG8gYSBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBzeW1ib2wgLSBUaGUgc3ltYm9sIHRvIGNvbnZlcnQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHN5bWJvbC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBmdW5jdGlvbiBzeW1ib2xUb1N0cihzeW1ib2wpIHtcbiAgICByZXR1cm4gc3ltYm9sLmRlc2NyaXB0aW9uIHx8IHN5bWJvbC50b1N0cmluZygpLnNsaWNlKDcsIC0xKTtcbiAgfVxuXG4gIHZhciBUT0tFTiA9ICdUb2tlbic7XG5cbiAgZnVuY3Rpb24gc2VyaWFsaXplVG9rZW4odG9rZW4pIHtcbiAgICB2YXIgdmFsdWUgPSBzeW1ib2xUb1N0cih0b2tlbik7XG4gICAgaWYgKC9eKFthLXpBLVoqXSkoWyEjJCUmJyorXFwtLl5fYHx+XFx3Oi9dKikkLy50ZXN0KHZhbHVlKSA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IHNlcmlhbGl6ZUVycm9yKHZhbHVlLCBUT0tFTik7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIDQuMS4zLjEuICBTZXJpYWxpemluZyBhIEJhcmUgSXRlbVxuICAvL1xuICAvLyBHaXZlbiBhbiBJdGVtIGFzIGlucHV0X2l0ZW0sIHJldHVybiBhbiBBU0NJSSBzdHJpbmcgc3VpdGFibGUgZm9yIHVzZVxuICAvLyBpbiBhIEhUVFAgZmllbGQgdmFsdWUuXG4gIC8vXG4gIC8vIDEuICBJZiBpbnB1dF9pdGVtIGlzIGFuIEludGVnZXIsIHJldHVybiB0aGUgcmVzdWx0IG9mIHJ1bm5pbmdcbiAgLy8gICAgIFNlcmlhbGl6aW5nIGFuIEludGVnZXIgKFNlY3Rpb24gNC4xLjQpIHdpdGggaW5wdXRfaXRlbS5cbiAgLy9cbiAgLy8gMi4gIElmIGlucHV0X2l0ZW0gaXMgYSBEZWNpbWFsLCByZXR1cm4gdGhlIHJlc3VsdCBvZiBydW5uaW5nXG4gIC8vICAgICBTZXJpYWxpemluZyBhIERlY2ltYWwgKFNlY3Rpb24gNC4xLjUpIHdpdGggaW5wdXRfaXRlbS5cbiAgLy9cbiAgLy8gMy4gIElmIGlucHV0X2l0ZW0gaXMgYSBTdHJpbmcsIHJldHVybiB0aGUgcmVzdWx0IG9mIHJ1bm5pbmdcbiAgLy8gICAgIFNlcmlhbGl6aW5nIGEgU3RyaW5nIChTZWN0aW9uIDQuMS42KSB3aXRoIGlucHV0X2l0ZW0uXG4gIC8vXG4gIC8vIDQuICBJZiBpbnB1dF9pdGVtIGlzIGEgVG9rZW4sIHJldHVybiB0aGUgcmVzdWx0IG9mIHJ1bm5pbmdcbiAgLy8gICAgIFNlcmlhbGl6aW5nIGEgVG9rZW4gKFNlY3Rpb24gNC4xLjcpIHdpdGggaW5wdXRfaXRlbS5cbiAgLy9cbiAgLy8gNS4gIElmIGlucHV0X2l0ZW0gaXMgYSBCb29sZWFuLCByZXR1cm4gdGhlIHJlc3VsdCBvZiBydW5uaW5nXG4gIC8vICAgICBTZXJpYWxpemluZyBhIEJvb2xlYW4gKFNlY3Rpb24gNC4xLjkpIHdpdGggaW5wdXRfaXRlbS5cbiAgLy9cbiAgLy8gNi4gIElmIGlucHV0X2l0ZW0gaXMgYSBCeXRlIFNlcXVlbmNlLCByZXR1cm4gdGhlIHJlc3VsdCBvZiBydW5uaW5nXG4gIC8vICAgICBTZXJpYWxpemluZyBhIEJ5dGUgU2VxdWVuY2UgKFNlY3Rpb24gNC4xLjgpIHdpdGggaW5wdXRfaXRlbS5cbiAgLy9cbiAgLy8gNy4gIElmIGlucHV0X2l0ZW0gaXMgYSBEYXRlLCByZXR1cm4gdGhlIHJlc3VsdCBvZiBydW5uaW5nIFNlcmlhbGl6aW5nXG4gIC8vICAgICBhIERhdGUgKFNlY3Rpb24gNC4xLjEwKSB3aXRoIGlucHV0X2l0ZW0uXG4gIC8vXG4gIC8vIDguICBPdGhlcndpc2UsIGZhaWwgc2VyaWFsaXphdGlvbi5cbiAgZnVuY3Rpb24gc2VyaWFsaXplQmFyZUl0ZW0odmFsdWUpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgaWYgKCFpc0Zpbml0ZU51bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBzZXJpYWxpemVFcnJvcih2YWx1ZSwgQkFSRV9JVEVNKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplSW50ZWdlcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlY2ltYWwodmFsdWUpO1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZVN0cmluZyh2YWx1ZSk7XG4gICAgICBjYXNlICdzeW1ib2wnOlxuICAgICAgICByZXR1cm4gc2VyaWFsaXplVG9rZW4odmFsdWUpO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVCb29sZWFuKHZhbHVlKTtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGF0ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVCeXRlU2VxdWVuY2UodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFNmVG9rZW4pIHtcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplVG9rZW4odmFsdWUpO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBmYWlsXG4gICAgICAgIHRocm93IHNlcmlhbGl6ZUVycm9yKHZhbHVlLCBCQVJFX0lURU0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBLRVkgPSAnS2V5JztcblxuICAvLyA0LjEuMS4zLiAgU2VyaWFsaXppbmcgYSBLZXlcbiAgLy9cbiAgLy8gR2l2ZW4gYSBrZXkgYXMgaW5wdXRfa2V5LCByZXR1cm4gYW4gQVNDSUkgc3RyaW5nIHN1aXRhYmxlIGZvciB1c2UgaW5cbiAgLy8gYSBIVFRQIGZpZWxkIHZhbHVlLlxuICAvL1xuICAvLyAxLiAgQ29udmVydCBpbnB1dF9rZXkgaW50byBhIHNlcXVlbmNlIG9mIEFTQ0lJIGNoYXJhY3RlcnM7IGlmXG4gIC8vICAgICBjb252ZXJzaW9uIGZhaWxzLCBmYWlsIHNlcmlhbGl6YXRpb24uXG4gIC8vXG4gIC8vIDIuICBJZiBpbnB1dF9rZXkgY29udGFpbnMgY2hhcmFjdGVycyBub3QgaW4gbGNhbHBoYSwgRElHSVQsIFwiX1wiLCBcIi1cIixcbiAgLy8gICAgIFwiLlwiLCBvciBcIipcIiBmYWlsIHNlcmlhbGl6YXRpb24uXG4gIC8vXG4gIC8vIDMuICBJZiB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGlucHV0X2tleSBpcyBub3QgbGNhbHBoYSBvciBcIipcIiwgZmFpbFxuICAvLyAgICAgc2VyaWFsaXphdGlvbi5cbiAgLy9cbiAgLy8gNC4gIExldCBvdXRwdXQgYmUgYW4gZW1wdHkgc3RyaW5nLlxuICAvL1xuICAvLyA1LiAgQXBwZW5kIGlucHV0X2tleSB0byBvdXRwdXQuXG4gIC8vXG4gIC8vIDYuICBSZXR1cm4gb3V0cHV0LlxuICBmdW5jdGlvbiBzZXJpYWxpemVLZXkodmFsdWUpIHtcbiAgICBpZiAoL15bYS16Kl1bYS16MC05XFwtXy4qXSokLy50ZXN0KHZhbHVlKSA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IHNlcmlhbGl6ZUVycm9yKHZhbHVlLCBLRVkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvLyA0LjEuMS4yLiAgU2VyaWFsaXppbmcgUGFyYW1ldGVyc1xuICAvL1xuICAvLyBHaXZlbiBhbiBvcmRlcmVkIERpY3Rpb25hcnkgYXMgaW5wdXRfcGFyYW1ldGVycyAoZWFjaCBtZW1iZXIgaGF2aW5nIGFcbiAgLy8gcGFyYW1fbmFtZSBhbmQgYSBwYXJhbV92YWx1ZSksIHJldHVybiBhbiBBU0NJSSBzdHJpbmcgc3VpdGFibGUgZm9yXG4gIC8vIHVzZSBpbiBhIEhUVFAgZmllbGQgdmFsdWUuXG4gIC8vXG4gIC8vIDEuICBMZXQgb3V0cHV0IGJlIGFuIGVtcHR5IHN0cmluZy5cbiAgLy9cbiAgLy8gMi4gIEZvciBlYWNoIHBhcmFtX25hbWUgd2l0aCBhIHZhbHVlIG9mIHBhcmFtX3ZhbHVlIGluXG4gIC8vICAgICBpbnB1dF9wYXJhbWV0ZXJzOlxuICAvL1xuICAvLyAgICAgMS4gIEFwcGVuZCBcIjtcIiB0byBvdXRwdXQuXG4gIC8vXG4gIC8vICAgICAyLiAgQXBwZW5kIHRoZSByZXN1bHQgb2YgcnVubmluZyBTZXJpYWxpemluZyBhIEtleVxuICAvLyAgICAgICAgIChTZWN0aW9uIDQuMS4xLjMpIHdpdGggcGFyYW1fbmFtZSB0byBvdXRwdXQuXG4gIC8vXG4gIC8vICAgICAzLiAgSWYgcGFyYW1fdmFsdWUgaXMgbm90IEJvb2xlYW4gdHJ1ZTpcbiAgLy9cbiAgLy8gICAgICAgICAxLiAgQXBwZW5kIFwiPVwiIHRvIG91dHB1dC5cbiAgLy9cbiAgLy8gICAgICAgICAyLiAgQXBwZW5kIHRoZSByZXN1bHQgb2YgcnVubmluZyBTZXJpYWxpemluZyBhIGJhcmUgSXRlbVxuICAvLyAgICAgICAgICAgICAoU2VjdGlvbiA0LjEuMy4xKSB3aXRoIHBhcmFtX3ZhbHVlIHRvIG91dHB1dC5cbiAgLy9cbiAgLy8gMy4gIFJldHVybiBvdXRwdXQuXG4gIGZ1bmN0aW9uIHNlcmlhbGl6ZVBhcmFtcyhwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHBhcmFtcykubWFwKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIga2V5ID0gX3JlZlswXSxcbiAgICAgICAgdmFsdWUgPSBfcmVmWzFdO1xuICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBcIjtcIiArIHNlcmlhbGl6ZUtleShrZXkpOyAvLyBvbWl0IHRydWVcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIjtcIiArIHNlcmlhbGl6ZUtleShrZXkpICsgXCI9XCIgKyBzZXJpYWxpemVCYXJlSXRlbSh2YWx1ZSk7XG4gICAgfSkuam9pbignJyk7XG4gIH1cblxuICAvLyA0LjEuMy4gIFNlcmlhbGl6aW5nIGFuIEl0ZW1cbiAgLy9cbiAgLy8gR2l2ZW4gYW4gSXRlbSBhcyBiYXJlX2l0ZW0gYW5kIFBhcmFtZXRlcnMgYXMgaXRlbV9wYXJhbWV0ZXJzLCByZXR1cm5cbiAgLy8gYW4gQVNDSUkgc3RyaW5nIHN1aXRhYmxlIGZvciB1c2UgaW4gYSBIVFRQIGZpZWxkIHZhbHVlLlxuICAvL1xuICAvLyAxLiAgTGV0IG91dHB1dCBiZSBhbiBlbXB0eSBzdHJpbmcuXG4gIC8vXG4gIC8vIDIuICBBcHBlbmQgdGhlIHJlc3VsdCBvZiBydW5uaW5nIFNlcmlhbGl6aW5nIGEgQmFyZSBJdGVtXG4gIC8vICAgICBTZWN0aW9uIDQuMS4zLjEgd2l0aCBiYXJlX2l0ZW0gdG8gb3V0cHV0LlxuICAvL1xuICAvLyAzLiAgQXBwZW5kIHRoZSByZXN1bHQgb2YgcnVubmluZyBTZXJpYWxpemluZyBQYXJhbWV0ZXJzXG4gIC8vICAgICBTZWN0aW9uIDQuMS4xLjIgd2l0aCBpdGVtX3BhcmFtZXRlcnMgdG8gb3V0cHV0LlxuICAvL1xuICAvLyA0LiAgUmV0dXJuIG91dHB1dC5cbiAgZnVuY3Rpb24gc2VyaWFsaXplSXRlbSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFNmSXRlbSkge1xuICAgICAgcmV0dXJuIFwiXCIgKyBzZXJpYWxpemVCYXJlSXRlbSh2YWx1ZS52YWx1ZSkgKyBzZXJpYWxpemVQYXJhbXModmFsdWUucGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUJhcmVJdGVtKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvLyA0LjEuMS4xLiAgU2VyaWFsaXppbmcgYW4gSW5uZXIgTGlzdFxuICAvL1xuICAvLyBHaXZlbiBhbiBhcnJheSBvZiAobWVtYmVyX3ZhbHVlLCBwYXJhbWV0ZXJzKSB0dXBsZXMgYXMgaW5uZXJfbGlzdCxcbiAgLy8gYW5kIHBhcmFtZXRlcnMgYXMgbGlzdF9wYXJhbWV0ZXJzLCByZXR1cm4gYW4gQVNDSUkgc3RyaW5nIHN1aXRhYmxlXG4gIC8vIGZvciB1c2UgaW4gYSBIVFRQIGZpZWxkIHZhbHVlLlxuICAvL1xuICAvLyAxLiAgTGV0IG91dHB1dCBiZSB0aGUgc3RyaW5nIFwiKFwiLlxuICAvL1xuICAvLyAyLiAgRm9yIGVhY2ggKG1lbWJlcl92YWx1ZSwgcGFyYW1ldGVycykgb2YgaW5uZXJfbGlzdDpcbiAgLy9cbiAgLy8gICAgIDEuICBBcHBlbmQgdGhlIHJlc3VsdCBvZiBydW5uaW5nIFNlcmlhbGl6aW5nIGFuIEl0ZW1cbiAgLy8gICAgICAgICAoU2VjdGlvbiA0LjEuMykgd2l0aCAobWVtYmVyX3ZhbHVlLCBwYXJhbWV0ZXJzKSB0byBvdXRwdXQuXG4gIC8vXG4gIC8vICAgICAyLiAgSWYgbW9yZSB2YWx1ZXMgcmVtYWluIGluIGlubmVyX2xpc3QsIGFwcGVuZCBhIHNpbmdsZSBTUCB0b1xuICAvLyAgICAgICAgIG91dHB1dC5cbiAgLy9cbiAgLy8gMy4gIEFwcGVuZCBcIilcIiB0byBvdXRwdXQuXG4gIC8vXG4gIC8vIDQuICBBcHBlbmQgdGhlIHJlc3VsdCBvZiBydW5uaW5nIFNlcmlhbGl6aW5nIFBhcmFtZXRlcnNcbiAgLy8gICAgIChTZWN0aW9uIDQuMS4xLjIpIHdpdGggbGlzdF9wYXJhbWV0ZXJzIHRvIG91dHB1dC5cbiAgLy9cbiAgLy8gNS4gIFJldHVybiBvdXRwdXQuXG4gIGZ1bmN0aW9uIHNlcmlhbGl6ZUlubmVyTGlzdCh2YWx1ZSkge1xuICAgIHJldHVybiBcIihcIiArIHZhbHVlLnZhbHVlLm1hcChzZXJpYWxpemVJdGVtKS5qb2luKCcgJykgKyBcIilcIiArIHNlcmlhbGl6ZVBhcmFtcyh2YWx1ZS5wYXJhbXMpO1xuICB9XG5cbiAgLy8gNC4xLjIuICBTZXJpYWxpemluZyBhIERpY3Rpb25hcnlcbiAgLy9cbiAgLy8gR2l2ZW4gYW4gb3JkZXJlZCBEaWN0aW9uYXJ5IGFzIGlucHV0X2RpY3Rpb25hcnkgKGVhY2ggbWVtYmVyIGhhdmluZyBhXG4gIC8vIG1lbWJlcl9uYW1lIGFuZCBhIHR1cGxlIHZhbHVlIG9mIChtZW1iZXJfdmFsdWUsIHBhcmFtZXRlcnMpKSwgcmV0dXJuXG4gIC8vIGFuIEFTQ0lJIHN0cmluZyBzdWl0YWJsZSBmb3IgdXNlIGluIGEgSFRUUCBmaWVsZCB2YWx1ZS5cbiAgLy9cbiAgLy8gMS4gIExldCBvdXRwdXQgYmUgYW4gZW1wdHkgc3RyaW5nLlxuICAvL1xuICAvLyAyLiAgRm9yIGVhY2ggbWVtYmVyX25hbWUgd2l0aCBhIHZhbHVlIG9mIChtZW1iZXJfdmFsdWUsIHBhcmFtZXRlcnMpXG4gIC8vICAgICBpbiBpbnB1dF9kaWN0aW9uYXJ5OlxuICAvL1xuICAvLyAgICAgMS4gIEFwcGVuZCB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgU2VyaWFsaXppbmcgYSBLZXlcbiAgLy8gICAgICAgICAoU2VjdGlvbiA0LjEuMS4zKSB3aXRoIG1lbWJlcidzIG1lbWJlcl9uYW1lIHRvIG91dHB1dC5cbiAgLy9cbiAgLy8gICAgIDIuICBJZiBtZW1iZXJfdmFsdWUgaXMgQm9vbGVhbiB0cnVlOlxuICAvL1xuICAvLyAgICAgICAgIDEuICBBcHBlbmQgdGhlIHJlc3VsdCBvZiBydW5uaW5nIFNlcmlhbGl6aW5nIFBhcmFtZXRlcnNcbiAgLy8gICAgICAgICAgICAgKFNlY3Rpb24gNC4xLjEuMikgd2l0aCBwYXJhbWV0ZXJzIHRvIG91dHB1dC5cbiAgLy9cbiAgLy8gICAgIDMuICBPdGhlcndpc2U6XG4gIC8vXG4gIC8vICAgICAgICAgMS4gIEFwcGVuZCBcIj1cIiB0byBvdXRwdXQuXG4gIC8vXG4gIC8vICAgICAgICAgMi4gIElmIG1lbWJlcl92YWx1ZSBpcyBhbiBhcnJheSwgYXBwZW5kIHRoZSByZXN1bHQgb2YgcnVubmluZ1xuICAvLyAgICAgICAgICAgICBTZXJpYWxpemluZyBhbiBJbm5lciBMaXN0IChTZWN0aW9uIDQuMS4xLjEpIHdpdGhcbiAgLy8gICAgICAgICAgICAgKG1lbWJlcl92YWx1ZSwgcGFyYW1ldGVycykgdG8gb3V0cHV0LlxuICAvL1xuICAvLyAgICAgICAgIDMuICBPdGhlcndpc2UsIGFwcGVuZCB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgU2VyaWFsaXppbmcgYW5cbiAgLy8gICAgICAgICAgICAgSXRlbSAoU2VjdGlvbiA0LjEuMykgd2l0aCAobWVtYmVyX3ZhbHVlLCBwYXJhbWV0ZXJzKSB0b1xuICAvLyAgICAgICAgICAgICBvdXRwdXQuXG4gIC8vXG4gIC8vICAgICA0LiAgSWYgbW9yZSBtZW1iZXJzIHJlbWFpbiBpbiBpbnB1dF9kaWN0aW9uYXJ5OlxuICAvL1xuICAvLyAgICAgICAgIDEuICBBcHBlbmQgXCIsXCIgdG8gb3V0cHV0LlxuICAvL1xuICAvLyAgICAgICAgIDIuICBBcHBlbmQgYSBzaW5nbGUgU1AgdG8gb3V0cHV0LlxuICAvL1xuICAvLyAzLiAgUmV0dXJuIG91dHB1dC5cbiAgZnVuY3Rpb24gc2VyaWFsaXplRGljdChkaWN0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgd2hpdGVzcGFjZTogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkaWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgc2VyaWFsaXplRXJyb3IoZGljdCwgRElDVCk7XG4gICAgfVxuICAgIHZhciBlbnRyaWVzID0gZGljdCBpbnN0YW5jZW9mIE1hcCA/IGRpY3QuZW50cmllcygpIDogT2JqZWN0LmVudHJpZXMoZGljdCk7XG4gICAgdmFyIG9wdGlvbmFsV2hpdGVTcGFjZSA9IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2hpdGVzcGFjZSkgPyAnICcgOiAnJztcbiAgICByZXR1cm4gQXJyYXkuZnJvbShlbnRyaWVzKS5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBrZXkgPSBfcmVmWzBdLFxuICAgICAgICBpdGVtID0gX3JlZlsxXTtcbiAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgU2ZJdGVtID09PSBmYWxzZSkge1xuICAgICAgICBpdGVtID0gbmV3IFNmSXRlbShpdGVtKTtcbiAgICAgIH1cbiAgICAgIHZhciBvdXRwdXQgPSBzZXJpYWxpemVLZXkoa2V5KTtcbiAgICAgIGlmIChpdGVtLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIG91dHB1dCArPSBzZXJpYWxpemVQYXJhbXMoaXRlbS5wYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0ICs9ICc9JztcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbS52YWx1ZSkpIHtcbiAgICAgICAgICBvdXRwdXQgKz0gc2VyaWFsaXplSW5uZXJMaXN0KGl0ZW0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dCArPSBzZXJpYWxpemVJdGVtKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0pLmpvaW4oXCIsXCIgKyBvcHRpb25hbFdoaXRlU3BhY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuY29kZSBhbiBvYmplY3QgaW50byBhIHN0cnVjdHVyZWQgZmllbGQgZGljdGlvbmFyeVxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgc3RydWN0dXJlZCBmaWVsZCBkaWN0aW9uYXJ5IHRvIGVuY29kZVxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEVuY29kaW5nIG9wdGlvbnNcbiAgICpcbiAgICogQHJldHVybnMgVGhlIHN0cnVjdHVyZWQgZmllbGQgc3RyaW5nXG4gICAqXG4gICAqIEBncm91cCBTdHJ1Y3R1cmVkIEZpZWxkXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICBmdW5jdGlvbiBlbmNvZGVTZkRpY3QodmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplRGljdCh2YWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBrZXkgaXMgYSB0b2tlbiBmaWVsZC5cbiAgICpcbiAgICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gY2hlY2suXG4gICAqXG4gICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUga2V5IGlzIGEgdG9rZW4gZmllbGQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZnVuY3Rpb24gaXNUb2tlbkZpZWxkKGtleSkge1xuICAgIHJldHVybiBrZXkgPT09ICdvdCcgfHwga2V5ID09PSAnc2YnIHx8IGtleSA9PT0gJ3N0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIHZhbGlkXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICpcbiAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBrZXkgaXMgYSB2YWx1ZSBpcyB2YWxpZC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBmdW5jdGlvbiBpc1ZhbGlkKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBpc0Zpbml0ZU51bWJlcih2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSAnJyAmJiB2YWx1ZSAhPT0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIHJlbGF0aXZlIHBhdGggZnJvbSBhIFVSTC5cbiAgICpcbiAgICogQHBhcmFtIHVybCAtIFRoZSBkZXN0aW5hdGlvbiBVUkxcbiAgICogQHBhcmFtIGJhc2UgLSBUaGUgYmFzZSBVUkxcbiAgICogQHJldHVybnMgVGhlIHJlbGF0aXZlIHBhdGhcbiAgICpcbiAgICogQGdyb3VwIFV0aWxzXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICBmdW5jdGlvbiB1cmxUb1JlbGF0aXZlUGF0aCh1cmwsIGJhc2UpIHtcbiAgICB2YXIgdG8gPSBuZXcgVVJMKHVybCk7XG4gICAgdmFyIGZyb20gPSBuZXcgVVJMKGJhc2UpO1xuICAgIGlmICh0by5vcmlnaW4gIT09IGZyb20ub3JpZ2luKSB7XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgICB2YXIgdG9QYXRoID0gdG8ucGF0aG5hbWUuc3BsaXQoJy8nKS5zbGljZSgxKTtcbiAgICB2YXIgZnJvbVBhdGggPSBmcm9tLnBhdGhuYW1lLnNwbGl0KCcvJykuc2xpY2UoMSwgLTEpO1xuICAgIC8vIHJlbW92ZSBjb21tb24gcGFyZW50c1xuICAgIHdoaWxlICh0b1BhdGhbMF0gPT09IGZyb21QYXRoWzBdKSB7XG4gICAgICB0b1BhdGguc2hpZnQoKTtcbiAgICAgIGZyb21QYXRoLnNoaWZ0KCk7XG4gICAgfVxuICAgIC8vIGFkZCBiYWNrIHBhdGhzXG4gICAgd2hpbGUgKGZyb21QYXRoLmxlbmd0aCkge1xuICAgICAgZnJvbVBhdGguc2hpZnQoKTtcbiAgICAgIHRvUGF0aC51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgICByZXR1cm4gdG9QYXRoLmpvaW4oJy8nKTtcbiAgfVxuXG4gIHZhciB0b1JvdW5kZWQgPSBmdW5jdGlvbiB0b1JvdW5kZWQodmFsdWUpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gIH07XG4gIHZhciB0b1VybFNhZmUgPSBmdW5jdGlvbiB0b1VybFNhZmUodmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmJhc2VVcmwpIHtcbiAgICAgIHZhbHVlID0gdXJsVG9SZWxhdGl2ZVBhdGgodmFsdWUsIG9wdGlvbnMuYmFzZVVybCk7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9O1xuICB2YXIgdG9IdW5kcmVkID0gZnVuY3Rpb24gdG9IdW5kcmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvUm91bmRlZCh2YWx1ZSAvIDEwMCkgKiAxMDA7XG4gIH07XG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBmb3JtYXR0ZXJzIGZvciBDTUNEIHZhbHVlcy5cbiAgICpcbiAgICogQGdyb3VwIENNQ0RcbiAgICpcbiAgICogQGJldGFcbiAgICovXG4gIHZhciBDbWNkRm9ybWF0dGVycyA9IHtcbiAgICAvKipcbiAgICAgKiBCaXRyYXRlIChrYnBzKSByb3VuZGVkIGludGVnZXJcbiAgICAgKi9cbiAgICBicjogdG9Sb3VuZGVkLFxuICAgIC8qKlxuICAgICAqIER1cmF0aW9uIChtaWxsaXNlY29uZHMpIHJvdW5kZWQgaW50ZWdlclxuICAgICAqL1xuICAgIGQ6IHRvUm91bmRlZCxcbiAgICAvKipcbiAgICAgKiBCdWZmZXIgTGVuZ3RoIChtaWxsaXNlY29uZHMpIHJvdW5kZWQgbmVhcmVzdCAxMDBtc1xuICAgICAqL1xuICAgIGJsOiB0b0h1bmRyZWQsXG4gICAgLyoqXG4gICAgICogRGVhZGxpbmUgKG1pbGxpc2Vjb25kcykgcm91bmRlZCBuZWFyZXN0IDEwMG1zXG4gICAgICovXG4gICAgZGw6IHRvSHVuZHJlZCxcbiAgICAvKipcbiAgICAgKiBNZWFzdXJlZCBUaHJvdWdocHV0IChrYnBzKSByb3VuZGVkIG5lYXJlc3QgMTAwa2Jwc1xuICAgICAqL1xuICAgIG10cDogdG9IdW5kcmVkLFxuICAgIC8qKlxuICAgICAqIE5leHQgT2JqZWN0IFJlcXVlc3QgVVJMIGVuY29kZWRcbiAgICAgKi9cbiAgICBub3I6IHRvVXJsU2FmZSxcbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0ZWQgbWF4aW11bSB0aHJvdWdocHV0IChrYnBzKSByb3VuZGVkIG5lYXJlc3QgMTAwa2Jwc1xuICAgICAqL1xuICAgIHJ0cDogdG9IdW5kcmVkLFxuICAgIC8qKlxuICAgICAqIFRvcCBCaXRyYXRlIChrYnBzKSByb3VuZGVkIGludGVnZXJcbiAgICAgKi9cbiAgICB0YjogdG9Sb3VuZGVkXG4gIH07XG5cbiAgLyoqXG4gICAqIEludGVybmFsIENNQ0QgcHJvY2Vzc2luZyBmdW5jdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIG9iaiAtIFRoZSBDTUNEIG9iamVjdCB0byBwcm9jZXNzLlxuICAgKiBAcGFyYW0gbWFwIC0gVGhlIG1hcHBpbmcgZnVuY3Rpb24gdG8gdXNlLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIGVuY29kaW5nLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICpcbiAgICogQGdyb3VwIENNQ0RcbiAgICovXG4gIGZ1bmN0aW9uIHByb2Nlc3NDbWNkKG9iaiwgb3B0aW9ucykge1xuICAgIHZhciByZXN1bHRzID0ge307XG4gICAgaWYgKG9iaiA9PSBudWxsIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopLnNvcnQoKTtcbiAgICB2YXIgZm9ybWF0dGVycyA9IF9leHRlbmRzKHt9LCBDbWNkRm9ybWF0dGVycywgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZvcm1hdHRlcnMpO1xuICAgIHZhciBmaWx0ZXIgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlsdGVyO1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoZmlsdGVyID09PSBudWxsIHx8IGZpbHRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmlsdGVyKGtleSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1trZXldO1xuICAgICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgICB2YWx1ZSA9IGZvcm1hdHRlcih2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICAvLyBWZXJzaW9uIHNob3VsZCBvbmx5IGJlIHJlcG9ydGVkIGlmIG5vdCBlcXVhbCB0byAxLlxuICAgICAgaWYgKGtleSA9PT0gJ3YnICYmIHZhbHVlID09PSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFBsYXliYWNrIHJhdGUgc2hvdWxkIG9ubHkgYmUgc2VudCBpZiBub3QgZXF1YWwgdG8gMS5cbiAgICAgIGlmIChrZXkgPT0gJ3ByJyAmJiB2YWx1ZSA9PT0gMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBpZ25vcmUgaW52YWxpZCB2YWx1ZXNcbiAgICAgIGlmICghaXNWYWxpZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzVG9rZW5GaWVsZChrZXkpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFsdWUgPSBuZXcgU2ZUb2tlbih2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXN1bHRzW2tleV0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmNvZGUgYSBDTUNEIG9iamVjdCB0byBhIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIGNtY2QgLSBUaGUgQ01DRCBvYmplY3QgdG8gZW5jb2RlLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIGVuY29kaW5nLlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgZW5jb2RlZCBDTUNEIHN0cmluZy5cbiAgICpcbiAgICogQGdyb3VwIENNQ0RcbiAgICpcbiAgICogQGJldGFcbiAgICovXG4gIGZ1bmN0aW9uIGVuY29kZUNtY2QoY21jZCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgaWYgKCFjbWNkKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVTZkRpY3QocHJvY2Vzc0NtY2QoY21jZCwgb3B0aW9ucyksIF9leHRlbmRzKHtcbiAgICAgIHdoaXRlc3BhY2U6IGZhbHNlXG4gICAgfSwgb3B0aW9ucykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYSBDTUNEIGRhdGEgb2JqZWN0IHRvIHJlcXVlc3QgaGVhZGVyc1xuICAgKlxuICAgKiBAcGFyYW0gY21jZCAtIFRoZSBDTUNEIGRhdGEgb2JqZWN0IHRvIGNvbnZlcnQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgZW5jb2RpbmcgdGhlIENNQ0Qgb2JqZWN0LlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgQ01DRCBoZWFkZXIgc2hhcmRzLlxuICAgKlxuICAgKiBAZ3JvdXAgQ01DRFxuICAgKlxuICAgKiBAYmV0YVxuICAgKi9cbiAgZnVuY3Rpb24gdG9DbWNkSGVhZGVycyhjbWNkLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKCFjbWNkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB2YXIgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGNtY2QpO1xuICAgIHZhciBoZWFkZXJNYXAgPSBPYmplY3QuZW50cmllcyhDbWNkSGVhZGVyTWFwKS5jb25jYXQoT2JqZWN0LmVudHJpZXMoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jdXN0b21IZWFkZXJNYXApIHx8IHt9KSk7XG4gICAgdmFyIHNoYXJkcyA9IGVudHJpZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGVudHJ5KSB7XG4gICAgICB2YXIgX2EsIF9iO1xuICAgICAgdmFyIGtleSA9IGVudHJ5WzBdLFxuICAgICAgICB2YWx1ZSA9IGVudHJ5WzFdO1xuICAgICAgdmFyIGZpZWxkID0gKChfYSA9IGhlYWRlck1hcC5maW5kKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICByZXR1cm4gZW50cnlbMV0uaW5jbHVkZXMoa2V5KTtcbiAgICAgIH0pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbMF0pIHx8IENtY2RIZWFkZXJGaWVsZC5SRVFVRVNUO1xuICAgICAgKF9iID0gYWNjW2ZpZWxkXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogYWNjW2ZpZWxkXSA9IHt9O1xuICAgICAgYWNjW2ZpZWxkXVtrZXldID0gdmFsdWU7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoc2hhcmRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgX3JlZikge1xuICAgICAgdmFyIGZpZWxkID0gX3JlZlswXSxcbiAgICAgICAgdmFsdWUgPSBfcmVmWzFdO1xuICAgICAgYWNjW2ZpZWxkXSA9IGVuY29kZUNtY2QodmFsdWUsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCByZXN1bHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZCBDTUNEIHF1ZXJ5IGFyZ3MgdG8gYSBoZWFkZXIgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gaGVhZGVycyAtIFRoZSBoZWFkZXJzIHRvIGFwcGVuZCB0by5cbiAgICogQHBhcmFtIGNtY2QgLSBUaGUgQ01DRCBvYmplY3QgdG8gYXBwZW5kLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEVuY29kZSBvcHRpb25zLlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgaGVhZGVycyB3aXRoIHRoZSBDTUNEIGhlYWRlciBzaGFyZHMgYXBwZW5kZWQuXG4gICAqXG4gICAqIEBncm91cCBDTUNEXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICBmdW5jdGlvbiBhcHBlbmRDbWNkSGVhZGVycyhoZWFkZXJzLCBjbWNkLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKGhlYWRlcnMsIHRvQ21jZEhlYWRlcnMoY21jZCwgb3B0aW9ucykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENNQ0QgcGFyYW1ldGVyIG5hbWUuXG4gICAqXG4gICAqIEBncm91cCBDTUNEXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICB2YXIgQ01DRF9QQVJBTSA9ICdDTUNEJztcblxuICAvKipcbiAgICogQ29udmVydCBhIENNQ0QgZGF0YSBvYmplY3QgdG8gYSBxdWVyeSBhcmcuXG4gICAqXG4gICAqIEBwYXJhbSBjbWNkIC0gVGhlIENNQ0Qgb2JqZWN0IHRvIGNvbnZlcnQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgZW5jb2RpbmcgdGhlIENNQ0Qgb2JqZWN0LlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgQ01DRCBxdWVyeSBhcmcuXG4gICAqXG4gICAqIEBncm91cCBDTUNEXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICBmdW5jdGlvbiB0b0NtY2RRdWVyeShjbWNkLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAoIWNtY2QpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIHBhcmFtcyA9IGVuY29kZUNtY2QoY21jZCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIENNQ0RfUEFSQU0gKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXMpO1xuICB9XG5cbiAgdmFyIFJFR0VYID0gL0NNQ0Q9W14mI10rLztcbiAgLyoqXG4gICAqIEFwcGVuZCBDTUNEIHF1ZXJ5IGFyZ3MgdG8gYSBVUkwuXG4gICAqXG4gICAqIEBwYXJhbSB1cmwgLSBUaGUgVVJMIHRvIGFwcGVuZCB0by5cbiAgICogQHBhcmFtIGNtY2QgLSBUaGUgQ01DRCBvYmplY3QgdG8gYXBwZW5kLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIGVuY29kaW5nIHRoZSBDTUNEIG9iamVjdC5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIFVSTCB3aXRoIHRoZSBDTUNEIHF1ZXJ5IGFyZ3MgYXBwZW5kZWQuXG4gICAqXG4gICAqIEBncm91cCBDTUNEXG4gICAqXG4gICAqIEBiZXRhXG4gICAqL1xuICBmdW5jdGlvbiBhcHBlbmRDbWNkUXVlcnkodXJsLCBjbWNkLCBvcHRpb25zKSB7XG4gICAgLy8gVE9ETzogUmVwbGFjZSB3aXRoIFVSTFNlYXJjaFBhcmFtcyBvbmNlIHdlIGRyb3AgU2FmYXJpIDwgMTAuMSAmIENocm9tZSA8IDQ5IHN1cHBvcnQuXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTFNlYXJjaFBhcmFtc1xuICAgIHZhciBxdWVyeSA9IHRvQ21jZFF1ZXJ5KGNtY2QsIG9wdGlvbnMpO1xuICAgIGlmICghcXVlcnkpIHtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICAgIGlmIChSRUdFWC50ZXN0KHVybCkpIHtcbiAgICAgIHJldHVybiB1cmwucmVwbGFjZShSRUdFWCwgcXVlcnkpO1xuICAgIH1cbiAgICB2YXIgc2VwYXJhdG9yID0gdXJsLmluY2x1ZGVzKCc/JykgPyAnJicgOiAnPyc7XG4gICAgcmV0dXJuIFwiXCIgKyB1cmwgKyBzZXBhcmF0b3IgKyBxdWVyeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb250cm9sbGVyIHRvIGRlYWwgd2l0aCBDb21tb24gTWVkaWEgQ2xpZW50IERhdGEgKENNQ0QpXG4gICAqIEBzZWUgaHR0cHM6Ly9jZG4uY3RhLnRlY2gvY3RhL21lZGlhL21lZGlhL3Jlc291cmNlcy9zdGFuZGFyZHMvcGRmcy9jdGEtNTAwNC1maW5hbC5wZGZcbiAgICovXG4gIHZhciBDTUNEQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ01DRENvbnRyb2xsZXIoaGxzKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5obHMgPSB2b2lkIDA7XG4gICAgICB0aGlzLmNvbmZpZyA9IHZvaWQgMDtcbiAgICAgIHRoaXMubWVkaWEgPSB2b2lkIDA7XG4gICAgICB0aGlzLnNpZCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuY2lkID0gdm9pZCAwO1xuICAgICAgdGhpcy51c2VIZWFkZXJzID0gZmFsc2U7XG4gICAgICB0aGlzLmluY2x1ZGVLZXlzID0gdm9pZCAwO1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgdGhpcy5zdGFydmVkID0gZmFsc2U7XG4gICAgICB0aGlzLmJ1ZmZlcmluZyA9IHRydWU7XG4gICAgICB0aGlzLmF1ZGlvQnVmZmVyID0gdm9pZCAwO1xuICAgICAgdGhpcy52aWRlb0J1ZmZlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMub25XYWl0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX3RoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zdGFydmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5idWZmZXJpbmcgPSB0cnVlO1xuICAgICAgfTtcbiAgICAgIHRoaXMub25QbGF5aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgX3RoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmJ1ZmZlcmluZyA9IGZhbHNlO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogQXBwbHkgQ01DRCBkYXRhIHRvIGEgbWFuaWZlc3QgcmVxdWVzdC5cbiAgICAgICAqL1xuICAgICAgdGhpcy5hcHBseVBsYXlsaXN0RGF0YSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgX3RoaXMuYXBwbHkoY29udGV4dCwge1xuICAgICAgICAgICAgb3Q6IENtY2RPYmplY3RUeXBlLk1BTklGRVNULFxuICAgICAgICAgICAgc3U6ICFfdGhpcy5pbml0aWFsaXplZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIF90aGlzLmhscy5sb2dnZXIud2FybignQ291bGQgbm90IGdlbmVyYXRlIG1hbmlmZXN0IENNQ0QgZGF0YS4nLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIEFwcGx5IENNQ0QgZGF0YSB0byBhIHNlZ21lbnQgcmVxdWVzdFxuICAgICAgICovXG4gICAgICB0aGlzLmFwcGx5RnJhZ21lbnREYXRhID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgZnJhZyA9IGNvbnRleHQuZnJhZyxcbiAgICAgICAgICAgIHBhcnQgPSBjb250ZXh0LnBhcnQ7XG4gICAgICAgICAgdmFyIGxldmVsID0gX3RoaXMuaGxzLmxldmVsc1tmcmFnLmxldmVsXTtcbiAgICAgICAgICB2YXIgb3QgPSBfdGhpcy5nZXRPYmplY3RUeXBlKGZyYWcpO1xuICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgZDogKHBhcnQgfHwgZnJhZykuZHVyYXRpb24gKiAxMDAwLFxuICAgICAgICAgICAgb3Q6IG90XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAob3QgPT09IENtY2RPYmplY3RUeXBlLlZJREVPIHx8IG90ID09PSBDbWNkT2JqZWN0VHlwZS5BVURJTyB8fCBvdCA9PSBDbWNkT2JqZWN0VHlwZS5NVVhFRCkge1xuICAgICAgICAgICAgZGF0YS5iciA9IGxldmVsLmJpdHJhdGUgLyAxMDAwO1xuICAgICAgICAgICAgZGF0YS50YiA9IF90aGlzLmdldFRvcEJhbmR3aWR0aChvdCkgLyAxMDAwO1xuICAgICAgICAgICAgZGF0YS5ibCA9IF90aGlzLmdldEJ1ZmZlckxlbmd0aChvdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBuZXh0ID0gcGFydCA/IF90aGlzLmdldE5leHRQYXJ0KHBhcnQpIDogX3RoaXMuZ2V0TmV4dEZyYWcoZnJhZyk7XG4gICAgICAgICAgaWYgKG5leHQgIT0gbnVsbCAmJiBuZXh0LnVybCAmJiBuZXh0LnVybCAhPT0gZnJhZy51cmwpIHtcbiAgICAgICAgICAgIGRhdGEubm9yID0gbmV4dC51cmw7XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIF90aGlzLmhscy5sb2dnZXIud2FybignQ291bGQgbm90IGdlbmVyYXRlIHNlZ21lbnQgQ01DRCBkYXRhLicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuaGxzID0gaGxzO1xuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnID0gaGxzLmNvbmZpZztcbiAgICAgIHZhciBjbWNkID0gY29uZmlnLmNtY2Q7XG4gICAgICBpZiAoY21jZCAhPSBudWxsKSB7XG4gICAgICAgIGNvbmZpZy5wTG9hZGVyID0gdGhpcy5jcmVhdGVQbGF5bGlzdExvYWRlcigpO1xuICAgICAgICBjb25maWcuZkxvYWRlciA9IHRoaXMuY3JlYXRlRnJhZ21lbnRMb2FkZXIoKTtcbiAgICAgICAgdGhpcy5zaWQgPSBjbWNkLnNlc3Npb25JZCB8fCBobHMuc2Vzc2lvbklkO1xuICAgICAgICB0aGlzLmNpZCA9IGNtY2QuY29udGVudElkO1xuICAgICAgICB0aGlzLnVzZUhlYWRlcnMgPSBjbWNkLnVzZUhlYWRlcnMgPT09IHRydWU7XG4gICAgICAgIHRoaXMuaW5jbHVkZUtleXMgPSBjbWNkLmluY2x1ZGVLZXlzO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBDTUNEQ29udHJvbGxlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICBobHMub24oRXZlbnRzLk1FRElBX0FUVEFDSEVELCB0aGlzLm9uTWVkaWFBdHRhY2hlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLk1FRElBX0RFVEFDSEVELCB0aGlzLm9uTWVkaWFEZXRhY2hlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkJVRkZFUl9DUkVBVEVELCB0aGlzLm9uQnVmZmVyQ3JlYXRlZCwgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8udW5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NRURJQV9BVFRBQ0hFRCwgdGhpcy5vbk1lZGlhQXR0YWNoZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUVESUFfREVUQUNIRUQsIHRoaXMub25NZWRpYURldGFjaGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkJVRkZFUl9DUkVBVEVELCB0aGlzLm9uQnVmZmVyQ3JlYXRlZCwgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLnVucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMub25NZWRpYURldGFjaGVkKCk7XG5cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMuaGxzID0gdGhpcy5jb25maWcgPSB0aGlzLmF1ZGlvQnVmZmVyID0gdGhpcy52aWRlb0J1ZmZlciA9IG51bGw7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLm9uV2FpdGluZyA9IHRoaXMub25QbGF5aW5nID0gdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYUF0dGFjaGVkID0gZnVuY3Rpb24gb25NZWRpYUF0dGFjaGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLm1lZGlhID0gZGF0YS5tZWRpYTtcbiAgICAgIHRoaXMubWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIHRoaXMub25XYWl0aW5nKTtcbiAgICAgIHRoaXMubWVkaWEuYWRkRXZlbnRMaXN0ZW5lcigncGxheWluZycsIHRoaXMub25QbGF5aW5nKTtcbiAgICB9O1xuICAgIF9wcm90by5vbk1lZGlhRGV0YWNoZWQgPSBmdW5jdGlvbiBvbk1lZGlhRGV0YWNoZWQoKSB7XG4gICAgICBpZiAoIXRoaXMubWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCd3YWl0aW5nJywgdGhpcy5vbldhaXRpbmcpO1xuICAgICAgdGhpcy5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdwbGF5aW5nJywgdGhpcy5vblBsYXlpbmcpO1xuXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLm1lZGlhID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5vbkJ1ZmZlckNyZWF0ZWQgPSBmdW5jdGlvbiBvbkJ1ZmZlckNyZWF0ZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfZGF0YSR0cmFja3MkYXVkaW8sIF9kYXRhJHRyYWNrcyR2aWRlbztcbiAgICAgIHRoaXMuYXVkaW9CdWZmZXIgPSAoX2RhdGEkdHJhY2tzJGF1ZGlvID0gZGF0YS50cmFja3MuYXVkaW8pID09IG51bGwgPyB2b2lkIDAgOiBfZGF0YSR0cmFja3MkYXVkaW8uYnVmZmVyO1xuICAgICAgdGhpcy52aWRlb0J1ZmZlciA9IChfZGF0YSR0cmFja3MkdmlkZW8gPSBkYXRhLnRyYWNrcy52aWRlbykgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhJHRyYWNrcyR2aWRlby5idWZmZXI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYmFzZWxpbmUgQ01DRCBkYXRhXG4gICAgICovXG4gICAgX3Byb3RvLmNyZWF0ZURhdGEgPSBmdW5jdGlvbiBjcmVhdGVEYXRhKCkge1xuICAgICAgdmFyIF90aGlzJG1lZGlhO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdjogMSxcbiAgICAgICAgc2Y6IENtY2RTdHJlYW1pbmdGb3JtYXQuSExTLFxuICAgICAgICBzaWQ6IHRoaXMuc2lkLFxuICAgICAgICBjaWQ6IHRoaXMuY2lkLFxuICAgICAgICBwcjogKF90aGlzJG1lZGlhID0gdGhpcy5tZWRpYSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG1lZGlhLnBsYXliYWNrUmF0ZSxcbiAgICAgICAgbXRwOiB0aGlzLmhscy5iYW5kd2lkdGhFc3RpbWF0ZSAvIDEwMDBcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgQ01DRCBkYXRhIHRvIGEgcmVxdWVzdC5cbiAgICAgKi87XG4gICAgX3Byb3RvLmFwcGx5ID0gZnVuY3Rpb24gYXBwbHkoY29udGV4dCwgZGF0YSkge1xuICAgICAgaWYgKGRhdGEgPT09IHZvaWQgMCkge1xuICAgICAgICBkYXRhID0ge307XG4gICAgICB9XG4gICAgICAvLyBhcHBseSBiYXNlbGluZSBkYXRhXG4gICAgICBfZXh0ZW5kcyhkYXRhLCB0aGlzLmNyZWF0ZURhdGEoKSk7XG4gICAgICB2YXIgaXNWaWRlbyA9IGRhdGEub3QgPT09IENtY2RPYmplY3RUeXBlLklOSVQgfHwgZGF0YS5vdCA9PT0gQ21jZE9iamVjdFR5cGUuVklERU8gfHwgZGF0YS5vdCA9PT0gQ21jZE9iamVjdFR5cGUuTVVYRUQ7XG4gICAgICBpZiAodGhpcy5zdGFydmVkICYmIGlzVmlkZW8pIHtcbiAgICAgICAgZGF0YS5icyA9IHRydWU7XG4gICAgICAgIGRhdGEuc3UgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXJ2ZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLnN1ID09IG51bGwpIHtcbiAgICAgICAgZGF0YS5zdSA9IHRoaXMuYnVmZmVyaW5nO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgcnRwLCBucnIsIGRsXG5cbiAgICAgIHZhciBpbmNsdWRlS2V5cyA9IHRoaXMuaW5jbHVkZUtleXM7XG4gICAgICBpZiAoaW5jbHVkZUtleXMpIHtcbiAgICAgICAgZGF0YSA9IE9iamVjdC5rZXlzKGRhdGEpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgICBpbmNsdWRlS2V5cy5pbmNsdWRlcyhrZXkpICYmIChhY2Nba2V5XSA9IGRhdGFba2V5XSk7XG4gICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwge30pO1xuICAgICAgfVxuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIGJhc2VVcmw6IGNvbnRleHQudXJsXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMudXNlSGVhZGVycykge1xuICAgICAgICBpZiAoIWNvbnRleHQuaGVhZGVycykge1xuICAgICAgICAgIGNvbnRleHQuaGVhZGVycyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGFwcGVuZENtY2RIZWFkZXJzKGNvbnRleHQuaGVhZGVycywgZGF0YSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0LnVybCA9IGFwcGVuZENtY2RRdWVyeShjb250ZXh0LnVybCwgZGF0YSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0TmV4dEZyYWcgPSBmdW5jdGlvbiBnZXROZXh0RnJhZyhmcmFnbWVudCkge1xuICAgICAgdmFyIF90aGlzJGhscyRsZXZlbHMkZnJhZztcbiAgICAgIHZhciBsZXZlbERldGFpbHMgPSAoX3RoaXMkaGxzJGxldmVscyRmcmFnID0gdGhpcy5obHMubGV2ZWxzW2ZyYWdtZW50LmxldmVsXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGhscyRsZXZlbHMkZnJhZy5kZXRhaWxzO1xuICAgICAgaWYgKGxldmVsRGV0YWlscykge1xuICAgICAgICB2YXIgaW5kZXggPSBmcmFnbWVudC5zbiAtIGxldmVsRGV0YWlscy5zdGFydFNOO1xuICAgICAgICByZXR1cm4gbGV2ZWxEZXRhaWxzLmZyYWdtZW50c1tpbmRleCArIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIF9wcm90by5nZXROZXh0UGFydCA9IGZ1bmN0aW9uIGdldE5leHRQYXJ0KHBhcnQpIHtcbiAgICAgIHZhciBfdGhpcyRobHMkbGV2ZWxzJGZyYWcyLCBfdGhpcyRobHMkbGV2ZWxzJGZyYWczO1xuICAgICAgdmFyIGluZGV4ID0gcGFydC5pbmRleCxcbiAgICAgICAgZnJhZ21lbnQgPSBwYXJ0LmZyYWdtZW50O1xuICAgICAgdmFyIHBhcnRMaXN0ID0gKF90aGlzJGhscyRsZXZlbHMkZnJhZzIgPSB0aGlzLmhscy5sZXZlbHNbZnJhZ21lbnQubGV2ZWxdKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGlzJGhscyRsZXZlbHMkZnJhZzMgPSBfdGhpcyRobHMkbGV2ZWxzJGZyYWcyLmRldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRobHMkbGV2ZWxzJGZyYWczLnBhcnRMaXN0O1xuICAgICAgaWYgKHBhcnRMaXN0KSB7XG4gICAgICAgIHZhciBzbiA9IGZyYWdtZW50LnNuO1xuICAgICAgICBmb3IgKHZhciBpID0gcGFydExpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB2YXIgcCA9IHBhcnRMaXN0W2ldO1xuICAgICAgICAgIGlmIChwLmluZGV4ID09PSBpbmRleCAmJiBwLmZyYWdtZW50LnNuID09PSBzbikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnRMaXN0W2kgKyAxXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIENNQ0Qgb2JqZWN0IHR5cGUuXG4gICAgICovO1xuICAgIF9wcm90by5nZXRPYmplY3RUeXBlID0gZnVuY3Rpb24gZ2V0T2JqZWN0VHlwZShmcmFnbWVudCkge1xuICAgICAgdmFyIHR5cGUgPSBmcmFnbWVudC50eXBlO1xuICAgICAgaWYgKHR5cGUgPT09ICdzdWJ0aXRsZScpIHtcbiAgICAgICAgcmV0dXJuIENtY2RPYmplY3RUeXBlLlRJTUVEX1RFWFQ7XG4gICAgICB9XG4gICAgICBpZiAoZnJhZ21lbnQuc24gPT09ICdpbml0U2VnbWVudCcpIHtcbiAgICAgICAgcmV0dXJuIENtY2RPYmplY3RUeXBlLklOSVQ7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICByZXR1cm4gQ21jZE9iamVjdFR5cGUuQVVESU87XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gJ21haW4nKSB7XG4gICAgICAgIGlmICghdGhpcy5obHMuYXVkaW9UcmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIENtY2RPYmplY3RUeXBlLk1VWEVEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDbWNkT2JqZWN0VHlwZS5WSURFTztcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBoaWdoZXN0IGJpdHJhdGUuXG4gICAgICovO1xuICAgIF9wcm90by5nZXRUb3BCYW5kd2lkdGggPSBmdW5jdGlvbiBnZXRUb3BCYW5kd2lkdGgodHlwZSkge1xuICAgICAgdmFyIGJpdHJhdGUgPSAwO1xuICAgICAgdmFyIGxldmVscztcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGlmICh0eXBlID09PSBDbWNkT2JqZWN0VHlwZS5BVURJTykge1xuICAgICAgICBsZXZlbHMgPSBobHMuYXVkaW9UcmFja3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF4ID0gaGxzLm1heEF1dG9MZXZlbDtcbiAgICAgICAgdmFyIGxlbiA9IG1heCA+IC0xID8gbWF4ICsgMSA6IGhscy5sZXZlbHMubGVuZ3RoO1xuICAgICAgICBsZXZlbHMgPSBobHMubGV2ZWxzLnNsaWNlKDAsIGxlbik7XG4gICAgICB9XG4gICAgICBsZXZlbHMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgaWYgKGxldmVsLmJpdHJhdGUgPiBiaXRyYXRlKSB7XG4gICAgICAgICAgYml0cmF0ZSA9IGxldmVsLmJpdHJhdGU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJpdHJhdGUgPiAwID8gYml0cmF0ZSA6IE5hTjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGJ1ZmZlciBsZW5ndGggZm9yIGEgbWVkaWEgdHlwZSBpbiBtaWxsaXNlY29uZHNcbiAgICAgKi87XG4gICAgX3Byb3RvLmdldEJ1ZmZlckxlbmd0aCA9IGZ1bmN0aW9uIGdldEJ1ZmZlckxlbmd0aCh0eXBlKSB7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgICAgdmFyIGJ1ZmZlciA9IHR5cGUgPT09IENtY2RPYmplY3RUeXBlLkFVRElPID8gdGhpcy5hdWRpb0J1ZmZlciA6IHRoaXMudmlkZW9CdWZmZXI7XG4gICAgICBpZiAoIWJ1ZmZlciB8fCAhbWVkaWEpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgIH1cbiAgICAgIHZhciBpbmZvID0gQnVmZmVySGVscGVyLmJ1ZmZlckluZm8oYnVmZmVyLCBtZWRpYS5jdXJyZW50VGltZSwgdGhpcy5jb25maWcubWF4QnVmZmVySG9sZSk7XG4gICAgICByZXR1cm4gaW5mby5sZW4gKiAxMDAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHBsYXlsaXN0IGxvYWRlclxuICAgICAqLztcbiAgICBfcHJvdG8uY3JlYXRlUGxheWxpc3RMb2FkZXIgPSBmdW5jdGlvbiBjcmVhdGVQbGF5bGlzdExvYWRlcigpIHtcbiAgICAgIHZhciBwTG9hZGVyID0gdGhpcy5jb25maWcucExvYWRlcjtcbiAgICAgIHZhciBhcHBseSA9IHRoaXMuYXBwbHlQbGF5bGlzdERhdGE7XG4gICAgICB2YXIgQ3RvciA9IHBMb2FkZXIgfHwgdGhpcy5jb25maWcubG9hZGVyO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIENtY2RQbGF5bGlzdExvYWRlcihjb25maWcpIHtcbiAgICAgICAgICB0aGlzLmxvYWRlciA9IHZvaWQgMDtcbiAgICAgICAgICB0aGlzLmxvYWRlciA9IG5ldyBDdG9yKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9wcm90bzIgPSBDbWNkUGxheWxpc3RMb2FkZXIucHJvdG90eXBlO1xuICAgICAgICBfcHJvdG8yLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgIHRoaXMubG9hZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3Byb3RvMi5hYm9ydCA9IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICAgIHRoaXMubG9hZGVyLmFib3J0KCk7XG4gICAgICAgIH07XG4gICAgICAgIF9wcm90bzIubG9hZCA9IGZ1bmN0aW9uIGxvYWQoY29udGV4dCwgY29uZmlnLCBjYWxsYmFja3MpIHtcbiAgICAgICAgICBhcHBseShjb250ZXh0KTtcbiAgICAgICAgICB0aGlzLmxvYWRlci5sb2FkKGNvbnRleHQsIGNvbmZpZywgY2FsbGJhY2tzKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhDbWNkUGxheWxpc3RMb2FkZXIsIFt7XG4gICAgICAgICAga2V5OiBcInN0YXRzXCIsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkZXIuc3RhdHM7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiBcImNvbnRleHRcIixcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRlci5jb250ZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuICAgICAgfSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHBsYXlsaXN0IGxvYWRlclxuICAgICAqLztcbiAgICBfcHJvdG8uY3JlYXRlRnJhZ21lbnRMb2FkZXIgPSBmdW5jdGlvbiBjcmVhdGVGcmFnbWVudExvYWRlcigpIHtcbiAgICAgIHZhciBmTG9hZGVyID0gdGhpcy5jb25maWcuZkxvYWRlcjtcbiAgICAgIHZhciBhcHBseSA9IHRoaXMuYXBwbHlGcmFnbWVudERhdGE7XG4gICAgICB2YXIgQ3RvciA9IGZMb2FkZXIgfHwgdGhpcy5jb25maWcubG9hZGVyO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIENtY2RGcmFnbWVudExvYWRlcihjb25maWcpIHtcbiAgICAgICAgICB0aGlzLmxvYWRlciA9IHZvaWQgMDtcbiAgICAgICAgICB0aGlzLmxvYWRlciA9IG5ldyBDdG9yKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9wcm90bzMgPSBDbWNkRnJhZ21lbnRMb2FkZXIucHJvdG90eXBlO1xuICAgICAgICBfcHJvdG8zLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgIHRoaXMubG9hZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3Byb3RvMy5hYm9ydCA9IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICAgIHRoaXMubG9hZGVyLmFib3J0KCk7XG4gICAgICAgIH07XG4gICAgICAgIF9wcm90bzMubG9hZCA9IGZ1bmN0aW9uIGxvYWQoY29udGV4dCwgY29uZmlnLCBjYWxsYmFja3MpIHtcbiAgICAgICAgICBhcHBseShjb250ZXh0KTtcbiAgICAgICAgICB0aGlzLmxvYWRlci5sb2FkKGNvbnRleHQsIGNvbmZpZywgY2FsbGJhY2tzKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhDbWNkRnJhZ21lbnRMb2FkZXIsIFt7XG4gICAgICAgICAga2V5OiBcInN0YXRzXCIsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkZXIuc3RhdHM7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiBcImNvbnRleHRcIixcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRlci5jb250ZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuICAgICAgfSgpO1xuICAgIH07XG4gICAgcmV0dXJuIENNQ0RDb250cm9sbGVyO1xuICB9KCk7XG5cbiAgdmFyIFBBVEhXQVlfUEVOQUxUWV9EVVJBVElPTl9NUyA9IDMwMDAwMDtcbiAgdmFyIENvbnRlbnRTdGVlcmluZ0NvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Mb2dnZXIpIHtcbiAgICBmdW5jdGlvbiBDb250ZW50U3RlZXJpbmdDb250cm9sbGVyKGhscykge1xuICAgICAgdmFyIF90aGlzO1xuICAgICAgX3RoaXMgPSBfTG9nZ2VyLmNhbGwodGhpcywgJ2NvbnRlbnQtc3RlZXJpbmcnLCBobHMubG9nZ2VyKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuaGxzID0gdm9pZCAwO1xuICAgICAgX3RoaXMubG9hZGVyID0gbnVsbDtcbiAgICAgIF90aGlzLnVyaSA9IG51bGw7XG4gICAgICBfdGhpcy5wYXRod2F5SWQgPSAnLic7XG4gICAgICBfdGhpcy5fcGF0aHdheVByaW9yaXR5ID0gbnVsbDtcbiAgICAgIF90aGlzLnRpbWVUb0xvYWQgPSAzMDA7XG4gICAgICBfdGhpcy5yZWxvYWRUaW1lciA9IC0xO1xuICAgICAgX3RoaXMudXBkYXRlZCA9IDA7XG4gICAgICBfdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgICBfdGhpcy5lbmFibGVkID0gdHJ1ZTtcbiAgICAgIF90aGlzLmxldmVscyA9IG51bGw7XG4gICAgICBfdGhpcy5hdWRpb1RyYWNrcyA9IG51bGw7XG4gICAgICBfdGhpcy5zdWJ0aXRsZVRyYWNrcyA9IG51bGw7XG4gICAgICBfdGhpcy5wZW5hbGl6ZWRQYXRod2F5cyA9IHt9O1xuICAgICAgX3RoaXMuaGxzID0gaGxzO1xuICAgICAgX3RoaXMucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgX2luaGVyaXRzTG9vc2UoQ29udGVudFN0ZWVyaW5nQ29udHJvbGxlciwgX0xvZ2dlcik7XG4gICAgdmFyIF9wcm90byA9IENvbnRlbnRTdGVlcmluZ0NvbnRyb2xsZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUFOSUZFU1RfTE9BREVELCB0aGlzLm9uTWFuaWZlc3RMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NQU5JRkVTVF9QQVJTRUQsIHRoaXMub25NYW5pZmVzdFBhcnNlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkVSUk9SLCB0aGlzLm9uRXJyb3IsIHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLnVucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaWYgKCFobHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaGxzLm9mZihFdmVudHMuTUFOSUZFU1RfTE9BRElORywgdGhpcy5vbk1hbmlmZXN0TG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NQU5JRkVTVF9MT0FERUQsIHRoaXMub25NYW5pZmVzdExvYWRlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NQU5JRkVTVF9QQVJTRUQsIHRoaXMub25NYW5pZmVzdFBhcnNlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5FUlJPUiwgdGhpcy5vbkVycm9yLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by5wYXRod2F5cyA9IGZ1bmN0aW9uIHBhdGh3YXlzKCkge1xuICAgICAgcmV0dXJuICh0aGlzLmxldmVscyB8fCBbXSkucmVkdWNlKGZ1bmN0aW9uIChwYXRod2F5cywgbGV2ZWwpIHtcbiAgICAgICAgaWYgKHBhdGh3YXlzLmluZGV4T2YobGV2ZWwucGF0aHdheUlkKSA9PT0gLTEpIHtcbiAgICAgICAgICBwYXRod2F5cy5wdXNoKGxldmVsLnBhdGh3YXlJZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdGh3YXlzO1xuICAgICAgfSwgW10pO1xuICAgIH07XG4gICAgX3Byb3RvLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uIHN0YXJ0TG9hZCgpIHtcbiAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICAgICAgaWYgKHRoaXMuZW5hYmxlZCAmJiB0aGlzLnVyaSkge1xuICAgICAgICBpZiAodGhpcy51cGRhdGVkKSB7XG4gICAgICAgICAgdmFyIHR0bCA9IHRoaXMudGltZVRvTG9hZCAqIDEwMDAgLSAocGVyZm9ybWFuY2Uubm93KCkgLSB0aGlzLnVwZGF0ZWQpO1xuICAgICAgICAgIGlmICh0dGwgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlUmVmcmVzaCh0aGlzLnVyaSwgdHRsKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2FkU3RlZXJpbmdNYW5pZmVzdCh0aGlzLnVyaSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uc3RvcExvYWQgPSBmdW5jdGlvbiBzdG9wTG9hZCgpIHtcbiAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMubG9hZGVyKSB7XG4gICAgICAgIHRoaXMubG9hZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5sb2FkZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5jbGVhclRpbWVvdXQoKTtcbiAgICB9O1xuICAgIF9wcm90by5jbGVhclRpbWVvdXQgPSBmdW5jdGlvbiBjbGVhclRpbWVvdXQoKSB7XG4gICAgICBpZiAodGhpcy5yZWxvYWRUaW1lciAhPT0gLTEpIHtcbiAgICAgICAgc2VsZi5jbGVhclRpbWVvdXQodGhpcy5yZWxvYWRUaW1lcik7XG4gICAgICAgIHRoaXMucmVsb2FkVGltZXIgPSAtMTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMudW5yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgICAgdGhpcy5zdG9wTG9hZCgpO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5obHMgPSBudWxsO1xuICAgICAgdGhpcy5sZXZlbHMgPSB0aGlzLmF1ZGlvVHJhY2tzID0gdGhpcy5zdWJ0aXRsZVRyYWNrcyA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVtb3ZlTGV2ZWwgPSBmdW5jdGlvbiByZW1vdmVMZXZlbChsZXZlbFRvUmVtb3ZlKSB7XG4gICAgICB2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG4gICAgICBpZiAobGV2ZWxzKSB7XG4gICAgICAgIHRoaXMubGV2ZWxzID0gbGV2ZWxzLmZpbHRlcihmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgICByZXR1cm4gbGV2ZWwgIT09IGxldmVsVG9SZW1vdmU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uTWFuaWZlc3RMb2FkaW5nID0gZnVuY3Rpb24gb25NYW5pZmVzdExvYWRpbmcoKSB7XG4gICAgICB0aGlzLnN0b3BMb2FkKCk7XG4gICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgdGhpcy50aW1lVG9Mb2FkID0gMzAwO1xuICAgICAgdGhpcy51cGRhdGVkID0gMDtcbiAgICAgIHRoaXMudXJpID0gbnVsbDtcbiAgICAgIHRoaXMucGF0aHdheUlkID0gJy4nO1xuICAgICAgdGhpcy5sZXZlbHMgPSB0aGlzLmF1ZGlvVHJhY2tzID0gdGhpcy5zdWJ0aXRsZVRyYWNrcyA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NYW5pZmVzdExvYWRlZCA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBjb250ZW50U3RlZXJpbmcgPSBkYXRhLmNvbnRlbnRTdGVlcmluZztcbiAgICAgIGlmIChjb250ZW50U3RlZXJpbmcgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5wYXRod2F5SWQgPSBjb250ZW50U3RlZXJpbmcucGF0aHdheUlkO1xuICAgICAgdGhpcy51cmkgPSBjb250ZW50U3RlZXJpbmcudXJpO1xuICAgICAgaWYgKHRoaXMuc3RhcnRlZCkge1xuICAgICAgICB0aGlzLnN0YXJ0TG9hZCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uTWFuaWZlc3RQYXJzZWQgPSBmdW5jdGlvbiBvbk1hbmlmZXN0UGFyc2VkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLmF1ZGlvVHJhY2tzID0gZGF0YS5hdWRpb1RyYWNrcztcbiAgICAgIHRoaXMuc3VidGl0bGVUcmFja3MgPSBkYXRhLnN1YnRpdGxlVHJhY2tzO1xuICAgIH07XG4gICAgX3Byb3RvLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgZXJyb3JBY3Rpb24gPSBkYXRhLmVycm9yQWN0aW9uO1xuICAgICAgaWYgKChlcnJvckFjdGlvbiA9PSBudWxsID8gdm9pZCAwIDogZXJyb3JBY3Rpb24uYWN0aW9uKSA9PT0gTmV0d29ya0Vycm9yQWN0aW9uLlNlbmRBbHRlcm5hdGVUb1BlbmFsdHlCb3ggJiYgZXJyb3JBY3Rpb24uZmxhZ3MgPT09IEVycm9yQWN0aW9uRmxhZ3MuTW92ZUFsbEFsdGVybmF0ZXNNYXRjaGluZ0hvc3QpIHtcbiAgICAgICAgdmFyIGxldmVscyA9IHRoaXMubGV2ZWxzO1xuICAgICAgICB2YXIgcGF0aHdheVByaW9yaXR5ID0gdGhpcy5fcGF0aHdheVByaW9yaXR5O1xuICAgICAgICB2YXIgZXJyb3JQYXRod2F5ID0gdGhpcy5wYXRod2F5SWQ7XG4gICAgICAgIGlmIChkYXRhLmNvbnRleHQpIHtcbiAgICAgICAgICB2YXIgX2RhdGEkY29udGV4dCA9IGRhdGEuY29udGV4dCxcbiAgICAgICAgICAgIGdyb3VwSWQgPSBfZGF0YSRjb250ZXh0Lmdyb3VwSWQsXG4gICAgICAgICAgICBwYXRod2F5SWQgPSBfZGF0YSRjb250ZXh0LnBhdGh3YXlJZCxcbiAgICAgICAgICAgIHR5cGUgPSBfZGF0YSRjb250ZXh0LnR5cGU7XG4gICAgICAgICAgaWYgKGdyb3VwSWQgJiYgbGV2ZWxzKSB7XG4gICAgICAgICAgICBlcnJvclBhdGh3YXkgPSB0aGlzLmdldFBhdGh3YXlGb3JHcm91cElkKGdyb3VwSWQsIHR5cGUsIGVycm9yUGF0aHdheSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwYXRod2F5SWQpIHtcbiAgICAgICAgICAgIGVycm9yUGF0aHdheSA9IHBhdGh3YXlJZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoZXJyb3JQYXRod2F5IGluIHRoaXMucGVuYWxpemVkUGF0aHdheXMpKSB7XG4gICAgICAgICAgdGhpcy5wZW5hbGl6ZWRQYXRod2F5c1tlcnJvclBhdGh3YXldID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYXRod2F5UHJpb3JpdHkgJiYgbGV2ZWxzKSB7XG4gICAgICAgICAgLy8gSWYgUEFUSFdBWS1QUklPUklUWSB3YXMgbm90IHByb3ZpZGVkLCBsaXN0IHBhdGh3YXlzIGZvciBlcnJvciBoYW5kbGluZ1xuICAgICAgICAgIHBhdGh3YXlQcmlvcml0eSA9IHRoaXMucGF0aHdheXMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0aHdheVByaW9yaXR5ICYmIHBhdGh3YXlQcmlvcml0eS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVQYXRod2F5UHJpb3JpdHkocGF0aHdheVByaW9yaXR5KTtcbiAgICAgICAgICBlcnJvckFjdGlvbi5yZXNvbHZlZCA9IHRoaXMucGF0aHdheUlkICE9PSBlcnJvclBhdGh3YXk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFlcnJvckFjdGlvbi5yZXNvbHZlZCkge1xuICAgICAgICAgIHRoaXMud2FybihcIkNvdWxkIG5vdCByZXNvbHZlIFwiICsgZGF0YS5kZXRhaWxzICsgXCIgKFxcXCJcIiArIGRhdGEuZXJyb3IubWVzc2FnZSArIFwiXFxcIikgd2l0aCBjb250ZW50LXN0ZWVyaW5nIGZvciBQYXRod2F5OiBcIiArIGVycm9yUGF0aHdheSArIFwiIGxldmVsczogXCIgKyAobGV2ZWxzID8gbGV2ZWxzLmxlbmd0aCA6IGxldmVscykgKyBcIiBwcmlvcml0aWVzOiBcIiArIHN0cmluZ2lmeShwYXRod2F5UHJpb3JpdHkpICsgXCIgcGVuYWxpemVkOiBcIiArIHN0cmluZ2lmeSh0aGlzLnBlbmFsaXplZFBhdGh3YXlzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5maWx0ZXJQYXJzZWRMZXZlbHMgPSBmdW5jdGlvbiBmaWx0ZXJQYXJzZWRMZXZlbHMobGV2ZWxzKSB7XG4gICAgICAvLyBGaWx0ZXIgbGV2ZWxzIHRvIG9ubHkgaW5jbHVkZSB0aG9zZSB0aGF0IGFyZSBpbiB0aGUgaW5pdGlhbCBwYXRod2F5XG4gICAgICB0aGlzLmxldmVscyA9IGxldmVscztcbiAgICAgIHZhciBwYXRod2F5TGV2ZWxzID0gdGhpcy5nZXRMZXZlbHNGb3JQYXRod2F5KHRoaXMucGF0aHdheUlkKTtcbiAgICAgIGlmIChwYXRod2F5TGV2ZWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIgcGF0aHdheUlkID0gbGV2ZWxzWzBdLnBhdGh3YXlJZDtcbiAgICAgICAgdGhpcy5sb2coXCJObyBsZXZlbHMgZm91bmQgaW4gUGF0aHdheSBcIiArIHRoaXMucGF0aHdheUlkICsgXCIuIFNldHRpbmcgaW5pdGlhbCBQYXRod2F5IHRvIFxcXCJcIiArIHBhdGh3YXlJZCArIFwiXFxcIlwiKTtcbiAgICAgICAgcGF0aHdheUxldmVscyA9IHRoaXMuZ2V0TGV2ZWxzRm9yUGF0aHdheShwYXRod2F5SWQpO1xuICAgICAgICB0aGlzLnBhdGh3YXlJZCA9IHBhdGh3YXlJZDtcbiAgICAgIH1cbiAgICAgIGlmIChwYXRod2F5TGV2ZWxzLmxlbmd0aCAhPT0gbGV2ZWxzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmxvZyhcIkZvdW5kIFwiICsgcGF0aHdheUxldmVscy5sZW5ndGggKyBcIi9cIiArIGxldmVscy5sZW5ndGggKyBcIiBsZXZlbHMgaW4gUGF0aHdheSBcXFwiXCIgKyB0aGlzLnBhdGh3YXlJZCArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRod2F5TGV2ZWxzO1xuICAgIH07XG4gICAgX3Byb3RvLmdldExldmVsc0ZvclBhdGh3YXkgPSBmdW5jdGlvbiBnZXRMZXZlbHNGb3JQYXRod2F5KHBhdGh3YXlJZCkge1xuICAgICAgaWYgKHRoaXMubGV2ZWxzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmxldmVscy5maWx0ZXIoZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIHJldHVybiBwYXRod2F5SWQgPT09IGxldmVsLnBhdGh3YXlJZDtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLnVwZGF0ZVBhdGh3YXlQcmlvcml0eSA9IGZ1bmN0aW9uIHVwZGF0ZVBhdGh3YXlQcmlvcml0eShwYXRod2F5UHJpb3JpdHkpIHtcbiAgICAgIHRoaXMuX3BhdGh3YXlQcmlvcml0eSA9IHBhdGh3YXlQcmlvcml0eTtcbiAgICAgIHZhciBsZXZlbHM7XG5cbiAgICAgIC8vIEV2YWx1YXRlIGlmIHdlIHNob3VsZCByZW1vdmUgdGhlIHBhdGh3YXkgZnJvbSB0aGUgcGVuYWxpemVkIGxpc3RcbiAgICAgIHZhciBwZW5hbGl6ZWRQYXRod2F5cyA9IHRoaXMucGVuYWxpemVkUGF0aHdheXM7XG4gICAgICB2YXIgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBPYmplY3Qua2V5cyhwZW5hbGl6ZWRQYXRod2F5cykuZm9yRWFjaChmdW5jdGlvbiAocGF0aHdheUlkKSB7XG4gICAgICAgIGlmIChub3cgLSBwZW5hbGl6ZWRQYXRod2F5c1twYXRod2F5SWRdID4gUEFUSFdBWV9QRU5BTFRZX0RVUkFUSU9OX01TKSB7XG4gICAgICAgICAgZGVsZXRlIHBlbmFsaXplZFBhdGh3YXlzW3BhdGh3YXlJZF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRod2F5UHJpb3JpdHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBhdGh3YXlJZCA9IHBhdGh3YXlQcmlvcml0eVtpXTtcbiAgICAgICAgaWYgKHBhdGh3YXlJZCBpbiBwZW5hbGl6ZWRQYXRod2F5cykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRod2F5SWQgPT09IHRoaXMucGF0aHdheUlkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gdGhpcy5obHMubmV4dExvYWRMZXZlbDtcbiAgICAgICAgdmFyIHNlbGVjdGVkTGV2ZWwgPSB0aGlzLmhscy5sZXZlbHNbc2VsZWN0ZWRJbmRleF07XG4gICAgICAgIGxldmVscyA9IHRoaXMuZ2V0TGV2ZWxzRm9yUGF0aHdheShwYXRod2F5SWQpO1xuICAgICAgICBpZiAobGV2ZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLmxvZyhcIlNldHRpbmcgUGF0aHdheSB0byBcXFwiXCIgKyBwYXRod2F5SWQgKyBcIlxcXCJcIik7XG4gICAgICAgICAgdGhpcy5wYXRod2F5SWQgPSBwYXRod2F5SWQ7XG4gICAgICAgICAgcmVhc3NpZ25GcmFnbWVudExldmVsSW5kZXhlcyhsZXZlbHMpO1xuICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkxFVkVMU19VUERBVEVELCB7XG4gICAgICAgICAgICBsZXZlbHM6IGxldmVsc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIFNldCBMZXZlbENvbnRyb2xsZXIncyBsZXZlbCB0byB0cmlnZ2VyIExFVkVMX1NXSVRDSElORyB3aGljaCBsb2FkcyBwbGF5bGlzdCBpZiBuZWVkZWRcbiAgICAgICAgICB2YXIgbGV2ZWxBZnRlckNoYW5nZSA9IHRoaXMuaGxzLmxldmVsc1tzZWxlY3RlZEluZGV4XTtcbiAgICAgICAgICBpZiAoc2VsZWN0ZWRMZXZlbCAmJiBsZXZlbEFmdGVyQ2hhbmdlICYmIHRoaXMubGV2ZWxzKSB7XG4gICAgICAgICAgICBpZiAobGV2ZWxBZnRlckNoYW5nZS5hdHRyc1snU1RBQkxFLVZBUklBTlQtSUQnXSAhPT0gc2VsZWN0ZWRMZXZlbC5hdHRyc1snU1RBQkxFLVZBUklBTlQtSUQnXSAmJiBsZXZlbEFmdGVyQ2hhbmdlLmJpdHJhdGUgIT09IHNlbGVjdGVkTGV2ZWwuYml0cmF0ZSkge1xuICAgICAgICAgICAgICB0aGlzLmxvZyhcIlVuc3RhYmxlIFBhdGh3YXlzIGNoYW5nZSBmcm9tIGJpdHJhdGUgXCIgKyBzZWxlY3RlZExldmVsLmJpdHJhdGUgKyBcIiB0byBcIiArIGxldmVsQWZ0ZXJDaGFuZ2UuYml0cmF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhscy5uZXh0TG9hZExldmVsID0gc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5nZXRQYXRod2F5Rm9yR3JvdXBJZCA9IGZ1bmN0aW9uIGdldFBhdGh3YXlGb3JHcm91cElkKGdyb3VwSWQsIHR5cGUsIGRlZmF1bHRQYXRod2F5KSB7XG4gICAgICB2YXIgbGV2ZWxzID0gdGhpcy5nZXRMZXZlbHNGb3JQYXRod2F5KGRlZmF1bHRQYXRod2F5KS5jb25jYXQodGhpcy5sZXZlbHMgfHwgW10pO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZXZlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHR5cGUgPT09IFBsYXlsaXN0Q29udGV4dFR5cGUuQVVESU9fVFJBQ0sgJiYgbGV2ZWxzW2ldLmhhc0F1ZGlvR3JvdXAoZ3JvdXBJZCkgfHwgdHlwZSA9PT0gUGxheWxpc3RDb250ZXh0VHlwZS5TVUJUSVRMRV9UUkFDSyAmJiBsZXZlbHNbaV0uaGFzU3VidGl0bGVHcm91cChncm91cElkKSkge1xuICAgICAgICAgIHJldHVybiBsZXZlbHNbaV0ucGF0aHdheUlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmYXVsdFBhdGh3YXk7XG4gICAgfTtcbiAgICBfcHJvdG8uY2xvbmVQYXRod2F5cyA9IGZ1bmN0aW9uIGNsb25lUGF0aHdheXMocGF0aHdheUNsb25lcykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICB2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG4gICAgICBpZiAoIWxldmVscykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgYXVkaW9Hcm91cENsb25lTWFwID0ge307XG4gICAgICB2YXIgc3VidGl0bGVHcm91cENsb25lTWFwID0ge307XG4gICAgICBwYXRod2F5Q2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKHBhdGh3YXlDbG9uZSkge1xuICAgICAgICB2YXIgY2xvbmVJZCA9IHBhdGh3YXlDbG9uZS5JRCxcbiAgICAgICAgICBiYXNlSWQgPSBwYXRod2F5Q2xvbmVbJ0JBU0UtSUQnXSxcbiAgICAgICAgICB1cmlSZXBsYWNlbWVudCA9IHBhdGh3YXlDbG9uZVsnVVJJLVJFUExBQ0VNRU5UJ107XG4gICAgICAgIGlmIChsZXZlbHMuc29tZShmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgICByZXR1cm4gbGV2ZWwucGF0aHdheUlkID09PSBjbG9uZUlkO1xuICAgICAgICB9KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xvbmVkVmFyaWFudHMgPSBfdGhpczIuZ2V0TGV2ZWxzRm9yUGF0aHdheShiYXNlSWQpLm1hcChmdW5jdGlvbiAoYmFzZUxldmVsKSB7XG4gICAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBuZXcgQXR0ckxpc3QoYmFzZUxldmVsLmF0dHJzKTtcbiAgICAgICAgICBhdHRyaWJ1dGVzWydQQVRIV0FZLUlEJ10gPSBjbG9uZUlkO1xuICAgICAgICAgIHZhciBjbG9uZWRBdWRpb0dyb3VwSWQgPSBhdHRyaWJ1dGVzLkFVRElPICYmIGF0dHJpYnV0ZXMuQVVESU8gKyBcIl9jbG9uZV9cIiArIGNsb25lSWQ7XG4gICAgICAgICAgdmFyIGNsb25lZFN1YnRpdGxlR3JvdXBJZCA9IGF0dHJpYnV0ZXMuU1VCVElUTEVTICYmIGF0dHJpYnV0ZXMuU1VCVElUTEVTICsgXCJfY2xvbmVfXCIgKyBjbG9uZUlkO1xuICAgICAgICAgIGlmIChjbG9uZWRBdWRpb0dyb3VwSWQpIHtcbiAgICAgICAgICAgIGF1ZGlvR3JvdXBDbG9uZU1hcFthdHRyaWJ1dGVzLkFVRElPXSA9IGNsb25lZEF1ZGlvR3JvdXBJZDtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMuQVVESU8gPSBjbG9uZWRBdWRpb0dyb3VwSWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjbG9uZWRTdWJ0aXRsZUdyb3VwSWQpIHtcbiAgICAgICAgICAgIHN1YnRpdGxlR3JvdXBDbG9uZU1hcFthdHRyaWJ1dGVzLlNVQlRJVExFU10gPSBjbG9uZWRTdWJ0aXRsZUdyb3VwSWQ7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLlNVQlRJVExFUyA9IGNsb25lZFN1YnRpdGxlR3JvdXBJZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHVybCA9IHBlcmZvcm1VcmlSZXBsYWNlbWVudChiYXNlTGV2ZWwudXJpLCBhdHRyaWJ1dGVzWydTVEFCTEUtVkFSSUFOVC1JRCddLCAnUEVSLVZBUklBTlQtVVJJUycsIHVyaVJlcGxhY2VtZW50KTtcbiAgICAgICAgICB2YXIgY2xvbmVkTGV2ZWwgPSBuZXcgTGV2ZWwoe1xuICAgICAgICAgICAgYXR0cnM6IGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICBhdWRpb0NvZGVjOiBiYXNlTGV2ZWwuYXVkaW9Db2RlYyxcbiAgICAgICAgICAgIGJpdHJhdGU6IGJhc2VMZXZlbC5iaXRyYXRlLFxuICAgICAgICAgICAgaGVpZ2h0OiBiYXNlTGV2ZWwuaGVpZ2h0LFxuICAgICAgICAgICAgbmFtZTogYmFzZUxldmVsLm5hbWUsXG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIHZpZGVvQ29kZWM6IGJhc2VMZXZlbC52aWRlb0NvZGVjLFxuICAgICAgICAgICAgd2lkdGg6IGJhc2VMZXZlbC53aWR0aFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChiYXNlTGV2ZWwuYXVkaW9Hcm91cHMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYmFzZUxldmVsLmF1ZGlvR3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNsb25lZExldmVsLmFkZEdyb3VwSWQoJ2F1ZGlvJywgYmFzZUxldmVsLmF1ZGlvR3JvdXBzW2ldICsgXCJfY2xvbmVfXCIgKyBjbG9uZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJhc2VMZXZlbC5zdWJ0aXRsZUdyb3Vwcykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGJhc2VMZXZlbC5zdWJ0aXRsZUdyb3Vwcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgY2xvbmVkTGV2ZWwuYWRkR3JvdXBJZCgndGV4dCcsIGJhc2VMZXZlbC5zdWJ0aXRsZUdyb3Vwc1tfaV0gKyBcIl9jbG9uZV9cIiArIGNsb25lSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2xvbmVkTGV2ZWw7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXZlbHMucHVzaC5hcHBseShsZXZlbHMsIGNsb25lZFZhcmlhbnRzKTtcbiAgICAgICAgY2xvbmVSZW5kaXRpb25Hcm91cHMoX3RoaXMyLmF1ZGlvVHJhY2tzLCBhdWRpb0dyb3VwQ2xvbmVNYXAsIHVyaVJlcGxhY2VtZW50LCBjbG9uZUlkKTtcbiAgICAgICAgY2xvbmVSZW5kaXRpb25Hcm91cHMoX3RoaXMyLnN1YnRpdGxlVHJhY2tzLCBzdWJ0aXRsZUdyb3VwQ2xvbmVNYXAsIHVyaVJlcGxhY2VtZW50LCBjbG9uZUlkKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLmxvYWRTdGVlcmluZ01hbmlmZXN0ID0gZnVuY3Rpb24gbG9hZFN0ZWVyaW5nTWFuaWZlc3QodXJpKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLmhscy5jb25maWc7XG4gICAgICB2YXIgTG9hZGVyID0gY29uZmlnLmxvYWRlcjtcbiAgICAgIGlmICh0aGlzLmxvYWRlcikge1xuICAgICAgICB0aGlzLmxvYWRlci5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICB0aGlzLmxvYWRlciA9IG5ldyBMb2FkZXIoY29uZmlnKTtcbiAgICAgIHZhciB1cmw7XG4gICAgICB0cnkge1xuICAgICAgICB1cmwgPSBuZXcgc2VsZi5VUkwodXJpKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvZyhcIkZhaWxlZCB0byBwYXJzZSBTdGVlcmluZyBNYW5pZmVzdCBVUkk6IFwiICsgdXJpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHVybC5wcm90b2NvbCAhPT0gJ2RhdGE6Jykge1xuICAgICAgICB2YXIgdGhyb3VnaHB1dCA9ICh0aGlzLmhscy5iYW5kd2lkdGhFc3RpbWF0ZSB8fCBjb25maWcuYWJyRXdtYURlZmF1bHRFc3RpbWF0ZSkgfCAwO1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnX0hMU19wYXRod2F5JywgdGhpcy5wYXRod2F5SWQpO1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnX0hMU190aHJvdWdocHV0JywgJycgKyB0aHJvdWdocHV0KTtcbiAgICAgIH1cbiAgICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICAgICAgdXJsOiB1cmwuaHJlZlxuICAgICAgfTtcbiAgICAgIHZhciBsb2FkUG9saWN5ID0gY29uZmlnLnN0ZWVyaW5nTWFuaWZlc3RMb2FkUG9saWN5LmRlZmF1bHQ7XG4gICAgICB2YXIgbGVnYWN5UmV0cnlDb21wYXRpYmlsaXR5ID0gbG9hZFBvbGljeS5lcnJvclJldHJ5IHx8IGxvYWRQb2xpY3kudGltZW91dFJldHJ5IHx8IHt9O1xuICAgICAgdmFyIGxvYWRlckNvbmZpZyA9IHtcbiAgICAgICAgbG9hZFBvbGljeTogbG9hZFBvbGljeSxcbiAgICAgICAgdGltZW91dDogbG9hZFBvbGljeS5tYXhMb2FkVGltZU1zLFxuICAgICAgICBtYXhSZXRyeTogbGVnYWN5UmV0cnlDb21wYXRpYmlsaXR5Lm1heE51bVJldHJ5IHx8IDAsXG4gICAgICAgIHJldHJ5RGVsYXk6IGxlZ2FjeVJldHJ5Q29tcGF0aWJpbGl0eS5yZXRyeURlbGF5TXMgfHwgMCxcbiAgICAgICAgbWF4UmV0cnlEZWxheTogbGVnYWN5UmV0cnlDb21wYXRpYmlsaXR5Lm1heFJldHJ5RGVsYXlNcyB8fCAwXG4gICAgICB9O1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IHtcbiAgICAgICAgb25TdWNjZXNzOiBmdW5jdGlvbiBvblN1Y2Nlc3MocmVzcG9uc2UsIHN0YXRzLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscykge1xuICAgICAgICAgIF90aGlzMy5sb2coXCJMb2FkZWQgc3RlZXJpbmcgbWFuaWZlc3Q6IFxcXCJcIiArIHVybCArIFwiXFxcIlwiKTtcbiAgICAgICAgICB2YXIgc3RlZXJpbmdEYXRhID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICBpZiAoKHN0ZWVyaW5nRGF0YSA9PSBudWxsID8gdm9pZCAwIDogc3RlZXJpbmdEYXRhLlZFUlNJT04pICE9PSAxKSB7XG4gICAgICAgICAgICBfdGhpczMubG9nKFwiU3RlZXJpbmcgVkVSU0lPTiBcIiArIHN0ZWVyaW5nRGF0YS5WRVJTSU9OICsgXCIgbm90IHN1cHBvcnRlZCFcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzMy51cGRhdGVkID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgX3RoaXMzLnRpbWVUb0xvYWQgPSBzdGVlcmluZ0RhdGEuVFRMO1xuICAgICAgICAgIHZhciByZWxvYWRVcmkgPSBzdGVlcmluZ0RhdGFbJ1JFTE9BRC1VUkknXSxcbiAgICAgICAgICAgIHBhdGh3YXlDbG9uZXMgPSBzdGVlcmluZ0RhdGFbJ1BBVEhXQVktQ0xPTkVTJ10sXG4gICAgICAgICAgICBwYXRod2F5UHJpb3JpdHkgPSBzdGVlcmluZ0RhdGFbJ1BBVEhXQVktUFJJT1JJVFknXTtcbiAgICAgICAgICBpZiAocmVsb2FkVXJpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBfdGhpczMudXJpID0gbmV3IHNlbGYuVVJMKHJlbG9hZFVyaSwgdXJsKS5ocmVmO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgX3RoaXMzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgX3RoaXMzLmxvZyhcIkZhaWxlZCB0byBwYXJzZSBTdGVlcmluZyBNYW5pZmVzdCBSRUxPQUQtVVJJOiBcIiArIHJlbG9hZFVyaSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMzLnNjaGVkdWxlUmVmcmVzaChfdGhpczMudXJpIHx8IGNvbnRleHQudXJsKTtcbiAgICAgICAgICBpZiAocGF0aHdheUNsb25lcykge1xuICAgICAgICAgICAgX3RoaXMzLmNsb25lUGF0aHdheXMocGF0aHdheUNsb25lcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBsb2FkZWRTdGVlcmluZ0RhdGEgPSB7XG4gICAgICAgICAgICBzdGVlcmluZ01hbmlmZXN0OiBzdGVlcmluZ0RhdGEsXG4gICAgICAgICAgICB1cmw6IHVybC50b1N0cmluZygpXG4gICAgICAgICAgfTtcbiAgICAgICAgICBfdGhpczMuaGxzLnRyaWdnZXIoRXZlbnRzLlNURUVSSU5HX01BTklGRVNUX0xPQURFRCwgbG9hZGVkU3RlZXJpbmdEYXRhKTtcbiAgICAgICAgICBpZiAocGF0aHdheVByaW9yaXR5KSB7XG4gICAgICAgICAgICBfdGhpczMudXBkYXRlUGF0aHdheVByaW9yaXR5KHBhdGh3YXlQcmlvcml0eSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKGVycm9yLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscywgc3RhdHMpIHtcbiAgICAgICAgICBfdGhpczMubG9nKFwiRXJyb3IgbG9hZGluZyBzdGVlcmluZyBtYW5pZmVzdDogXCIgKyBlcnJvci5jb2RlICsgXCIgXCIgKyBlcnJvci50ZXh0ICsgXCIgKFwiICsgY29udGV4dC51cmwgKyBcIilcIik7XG4gICAgICAgICAgX3RoaXMzLnN0b3BMb2FkKCk7XG4gICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IDQxMCkge1xuICAgICAgICAgICAgX3RoaXMzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF90aGlzMy5sb2coXCJTdGVlcmluZyBtYW5pZmVzdCBcIiArIGNvbnRleHQudXJsICsgXCIgbm8gbG9uZ2VyIGF2YWlsYWJsZVwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHR0bCA9IF90aGlzMy50aW1lVG9Mb2FkICogMTAwMDtcbiAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gNDI5KSB7XG4gICAgICAgICAgICB2YXIgbG9hZGVyID0gX3RoaXMzLmxvYWRlcjtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGxvYWRlciA9PSBudWxsID8gdm9pZCAwIDogbG9hZGVyLmdldFJlc3BvbnNlSGVhZGVyKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB2YXIgcmV0cnlBZnRlciA9IGxvYWRlci5nZXRSZXNwb25zZUhlYWRlcignUmV0cnktQWZ0ZXInKTtcbiAgICAgICAgICAgICAgaWYgKHJldHJ5QWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICB0dGwgPSBwYXJzZUZsb2F0KHJldHJ5QWZ0ZXIpICogMTAwMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMzLmxvZyhcIlN0ZWVyaW5nIG1hbmlmZXN0IFwiICsgY29udGV4dC51cmwgKyBcIiByYXRlIGxpbWl0ZWRcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzMy5zY2hlZHVsZVJlZnJlc2goX3RoaXMzLnVyaSB8fCBjb250ZXh0LnVybCwgdHRsKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25UaW1lb3V0OiBmdW5jdGlvbiBvblRpbWVvdXQoc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgICAgICAgX3RoaXMzLmxvZyhcIlRpbWVvdXQgbG9hZGluZyBzdGVlcmluZyBtYW5pZmVzdCAoXCIgKyBjb250ZXh0LnVybCArIFwiKVwiKTtcbiAgICAgICAgICBfdGhpczMuc2NoZWR1bGVSZWZyZXNoKF90aGlzMy51cmkgfHwgY29udGV4dC51cmwpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5sb2coXCJSZXF1ZXN0aW5nIHN0ZWVyaW5nIG1hbmlmZXN0OiBcIiArIHVybCk7XG4gICAgICB0aGlzLmxvYWRlci5sb2FkKGNvbnRleHQsIGxvYWRlckNvbmZpZywgY2FsbGJhY2tzKTtcbiAgICB9O1xuICAgIF9wcm90by5zY2hlZHVsZVJlZnJlc2ggPSBmdW5jdGlvbiBzY2hlZHVsZVJlZnJlc2godXJpLCB0dGxNcykge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG4gICAgICBpZiAodHRsTXMgPT09IHZvaWQgMCkge1xuICAgICAgICB0dGxNcyA9IHRoaXMudGltZVRvTG9hZCAqIDEwMDA7XG4gICAgICB9XG4gICAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICAgICAgdGhpcy5yZWxvYWRUaW1lciA9IHNlbGYuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpczQkaGxzO1xuICAgICAgICB2YXIgbWVkaWEgPSAoX3RoaXM0JGhscyA9IF90aGlzNC5obHMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczQkaGxzLm1lZGlhO1xuICAgICAgICBpZiAobWVkaWEgJiYgIW1lZGlhLmVuZGVkKSB7XG4gICAgICAgICAgX3RoaXM0LmxvYWRTdGVlcmluZ01hbmlmZXN0KHVyaSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzNC5zY2hlZHVsZVJlZnJlc2godXJpLCBfdGhpczQudGltZVRvTG9hZCAqIDEwMDApO1xuICAgICAgfSwgdHRsTXMpO1xuICAgIH07XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhDb250ZW50U3RlZXJpbmdDb250cm9sbGVyLCBbe1xuICAgICAga2V5OiBcInBhdGh3YXlQcmlvcml0eVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXRod2F5UHJpb3JpdHk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQocGF0aHdheVByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMudXBkYXRlUGF0aHdheVByaW9yaXR5KHBhdGh3YXlQcmlvcml0eSk7XG4gICAgICB9XG4gICAgfV0pO1xuICB9KExvZ2dlcik7XG4gIGZ1bmN0aW9uIGNsb25lUmVuZGl0aW9uR3JvdXBzKHRyYWNrcywgZ3JvdXBDbG9uZU1hcCwgdXJpUmVwbGFjZW1lbnQsIGNsb25lSWQpIHtcbiAgICBpZiAoIXRyYWNrcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhncm91cENsb25lTWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChhdWRpb0dyb3VwSWQpIHtcbiAgICAgIHZhciBjbG9uZWRUcmFja3MgPSB0cmFja3MuZmlsdGVyKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgICByZXR1cm4gdHJhY2suZ3JvdXBJZCA9PT0gYXVkaW9Hcm91cElkO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgICB2YXIgY2xvbmVkVHJhY2sgPSBfZXh0ZW5kcyh7fSwgdHJhY2spO1xuICAgICAgICBjbG9uZWRUcmFjay5kZXRhaWxzID0gdW5kZWZpbmVkO1xuICAgICAgICBjbG9uZWRUcmFjay5hdHRycyA9IG5ldyBBdHRyTGlzdChjbG9uZWRUcmFjay5hdHRycyk7XG4gICAgICAgIGNsb25lZFRyYWNrLnVybCA9IGNsb25lZFRyYWNrLmF0dHJzLlVSSSA9IHBlcmZvcm1VcmlSZXBsYWNlbWVudCh0cmFjay51cmwsIHRyYWNrLmF0dHJzWydTVEFCTEUtUkVORElUSU9OLUlEJ10sICdQRVItUkVORElUSU9OLVVSSVMnLCB1cmlSZXBsYWNlbWVudCk7XG4gICAgICAgIGNsb25lZFRyYWNrLmdyb3VwSWQgPSBjbG9uZWRUcmFjay5hdHRyc1snR1JPVVAtSUQnXSA9IGdyb3VwQ2xvbmVNYXBbYXVkaW9Hcm91cElkXTtcbiAgICAgICAgY2xvbmVkVHJhY2suYXR0cnNbJ1BBVEhXQVktSUQnXSA9IGNsb25lSWQ7XG4gICAgICAgIHJldHVybiBjbG9uZWRUcmFjaztcbiAgICAgIH0pO1xuICAgICAgdHJhY2tzLnB1c2guYXBwbHkodHJhY2tzLCBjbG9uZWRUcmFja3MpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHBlcmZvcm1VcmlSZXBsYWNlbWVudCh1cmksIHN0YWJsZUlkLCBwZXJPcHRpb25LZXksIHVyaVJlcGxhY2VtZW50KSB7XG4gICAgdmFyIGhvc3QgPSB1cmlSZXBsYWNlbWVudC5IT1NULFxuICAgICAgcGFyYW1zID0gdXJpUmVwbGFjZW1lbnQuUEFSQU1TLFxuICAgICAgcGVyT3B0aW9uVXJpcyA9IHVyaVJlcGxhY2VtZW50W3Blck9wdGlvbktleV07XG4gICAgdmFyIHBlclZhcmlhbnRVcmk7XG4gICAgaWYgKHN0YWJsZUlkKSB7XG4gICAgICBwZXJWYXJpYW50VXJpID0gcGVyT3B0aW9uVXJpcyA9PSBudWxsID8gdm9pZCAwIDogcGVyT3B0aW9uVXJpc1tzdGFibGVJZF07XG4gICAgICBpZiAocGVyVmFyaWFudFVyaSkge1xuICAgICAgICB1cmkgPSBwZXJWYXJpYW50VXJpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdXJsID0gbmV3IHNlbGYuVVJMKHVyaSk7XG4gICAgaWYgKGhvc3QgJiYgIXBlclZhcmlhbnRVcmkpIHtcbiAgICAgIHVybC5ob3N0ID0gaG9zdDtcbiAgICB9XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgT2JqZWN0LmtleXMocGFyYW1zKS5zb3J0KCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldChrZXksIHBhcmFtc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB1cmwuaHJlZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZWwsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgdHlwZSwgbGlzdGVuZXIpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWwsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICAvKipcbiAgICogQ29udHJvbGxlciB0byBkZWFsIHdpdGggZW5jcnlwdGVkIG1lZGlhIGV4dGVuc2lvbnMgKEVNRSlcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRW5jcnlwdGVkX01lZGlhX0V4dGVuc2lvbnNfQVBJXG4gICAqXG4gICAqIEBjbGFzc1xuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHZhciBFTUVDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTG9nZ2VyKSB7XG4gICAgZnVuY3Rpb24gRU1FQ29udHJvbGxlcihobHMpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF90aGlzID0gX0xvZ2dlci5jYWxsKHRoaXMsICdlbWUnLCBobHMubG9nZ2VyKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuaGxzID0gdm9pZCAwO1xuICAgICAgX3RoaXMuY29uZmlnID0gdm9pZCAwO1xuICAgICAgX3RoaXMubWVkaWEgPSBudWxsO1xuICAgICAgX3RoaXMua2V5Rm9ybWF0UHJvbWlzZSA9IG51bGw7XG4gICAgICBfdGhpcy5rZXlTeXN0ZW1BY2Nlc3NQcm9taXNlcyA9IHt9O1xuICAgICAgX3RoaXMuX3JlcXVlc3RMaWNlbnNlRmFpbHVyZUNvdW50ID0gMDtcbiAgICAgIF90aGlzLm1lZGlhS2V5U2Vzc2lvbnMgPSBbXTtcbiAgICAgIF90aGlzLmtleUlkVG9LZXlTZXNzaW9uUHJvbWlzZSA9IHt9O1xuICAgICAgX3RoaXMubWVkaWFLZXlzID0gbnVsbDtcbiAgICAgIF90aGlzLnNldE1lZGlhS2V5c1F1ZXVlID0gRU1FQ29udHJvbGxlci5DRE1DbGVhbnVwUHJvbWlzZSA/IFtFTUVDb250cm9sbGVyLkNETUNsZWFudXBQcm9taXNlXSA6IFtdO1xuICAgICAgX3RoaXMub25NZWRpYUVuY3J5cHRlZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgaW5pdERhdGFUeXBlID0gZXZlbnQuaW5pdERhdGFUeXBlLFxuICAgICAgICAgIGluaXREYXRhID0gZXZlbnQuaW5pdERhdGE7XG4gICAgICAgIHZhciBsb2dNZXNzYWdlID0gXCJcXFwiXCIgKyBldmVudC50eXBlICsgXCJcXFwiIGV2ZW50OiBpbml0IGRhdGEgdHlwZTogXFxcIlwiICsgaW5pdERhdGFUeXBlICsgXCJcXFwiXCI7XG4gICAgICAgIF90aGlzLmRlYnVnKGxvZ01lc3NhZ2UpO1xuXG4gICAgICAgIC8vIElnbm9yZSBldmVudCB3aGVuIGluaXREYXRhIGlzIG51bGxcbiAgICAgICAgaWYgKGluaXREYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghX3RoaXMua2V5Rm9ybWF0UHJvbWlzZSkge1xuICAgICAgICAgIHZhciBrZXlTeXN0ZW1zID0gT2JqZWN0LmtleXMoX3RoaXMua2V5U3lzdGVtQWNjZXNzUHJvbWlzZXMpO1xuICAgICAgICAgIGlmICgha2V5U3lzdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGtleVN5c3RlbXMgPSBnZXRLZXlTeXN0ZW1zRm9yQ29uZmlnKF90aGlzLmNvbmZpZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBrZXlGb3JtYXRzID0ga2V5U3lzdGVtcy5tYXAoa2V5U3lzdGVtRG9tYWluVG9LZXlTeXN0ZW1Gb3JtYXQpLmZpbHRlcihmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgcmV0dXJuICEhaztcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBfdGhpcy5rZXlGb3JtYXRQcm9taXNlID0gX3RoaXMuZ2V0S2V5Rm9ybWF0UHJvbWlzZShrZXlGb3JtYXRzKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5rZXlGb3JtYXRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGtleVN5c3RlbUZvcm1hdCkge1xuICAgICAgICAgIHZhciBrZXlTeXN0ZW0gPSBrZXlTeXN0ZW1Gb3JtYXRUb0tleVN5c3RlbURvbWFpbihrZXlTeXN0ZW1Gb3JtYXQpO1xuICAgICAgICAgIHZhciBrZXlJZDtcbiAgICAgICAgICB2YXIga2V5U3lzdGVtRG9tYWluO1xuICAgICAgICAgIGlmIChpbml0RGF0YVR5cGUgPT09ICdzaW5mJykge1xuICAgICAgICAgICAgaWYgKGtleVN5c3RlbSAhPT0gS2V5U3lzdGVtcy5GQUlSUExBWSkge1xuICAgICAgICAgICAgICBfdGhpcy53YXJuKFwiSWdub3JpbmcgdW5leHBlY3RlZCBcXFwiXCIgKyBldmVudC50eXBlICsgXCJcXFwiIGV2ZW50IHdpdGggaW5pdCBkYXRhIHR5cGU6IFxcXCJcIiArIGluaXREYXRhVHlwZSArIFwiXFxcIiBmb3Igc2VsZWN0ZWQga2V5LXN5c3RlbSBcIiArIGtleVN5c3RlbSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1hdGNoIHNpbmYga2V5SWQgdG8gcGxheWxpc3Qgc2tkOi8va2V5SWQ9XG4gICAgICAgICAgICB2YXIganNvbiA9IGJpbjJzdHIobmV3IFVpbnQ4QXJyYXkoaW5pdERhdGEpKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBzaW5mID0gYmFzZTY0RGVjb2RlKEpTT04ucGFyc2UoanNvbikuc2luZik7XG4gICAgICAgICAgICAgIHZhciB0ZW5jID0gcGFyc2VTaW5mKHNpbmYpO1xuICAgICAgICAgICAgICBpZiAoIXRlbmMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInc2NobScgYm94IG1pc3Npbmcgb3Igbm90IGNiY3MvY2VuYyB3aXRoIHNjaGkgPiB0ZW5jXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGtleUlkID0gbmV3IFVpbnQ4QXJyYXkodGVuYy5zdWJhcnJheSg4LCAyNCkpO1xuICAgICAgICAgICAgICBrZXlTeXN0ZW1Eb21haW4gPSBLZXlTeXN0ZW1zLkZBSVJQTEFZO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgX3RoaXMud2Fybihsb2dNZXNzYWdlICsgXCIgRmFpbGVkIHRvIHBhcnNlIHNpbmY6IFwiICsgZXJyb3IpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChrZXlTeXN0ZW0gIT09IEtleVN5c3RlbXMuV0lERVZJTkUgJiYga2V5U3lzdGVtICE9PSBLZXlTeXN0ZW1zLlBMQVlSRUFEWSkge1xuICAgICAgICAgICAgICBfdGhpcy53YXJuKFwiSWdub3JpbmcgdW5leHBlY3RlZCBcXFwiXCIgKyBldmVudC50eXBlICsgXCJcXFwiIGV2ZW50IHdpdGggaW5pdCBkYXRhIHR5cGU6IFxcXCJcIiArIGluaXREYXRhVHlwZSArIFwiXFxcIiBmb3Igc2VsZWN0ZWQga2V5LXN5c3RlbSBcIiArIGtleVN5c3RlbSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN1cHBvcnQgV2lkZXZpbmUvUGxheVJlYWR5IGNsZWFyLWxlYWQga2V5LXNlc3Npb24gY3JlYXRpb24gKG90aGVyd2lzZSBkZXBlbmQgb24gcGxheWxpc3Qga2V5cylcbiAgICAgICAgICAgIHZhciBwc3NoUmVzdWx0cyA9IHBhcnNlTXVsdGlQc3NoKGluaXREYXRhKTtcbiAgICAgICAgICAgIHZhciBwc3NoSW5mb3MgPSBwc3NoUmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHBzc2gpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICEhcHNzaC5zeXN0ZW1JZCAmJiBrZXlTeXN0ZW1JZFRvS2V5U3lzdGVtRG9tYWluKHBzc2guc3lzdGVtSWQpID09PSBrZXlTeXN0ZW07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChwc3NoSW5mb3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBfdGhpcy53YXJuKGxvZ01lc3NhZ2UgKyBcIiBVc2luZyBmaXJzdCBvZiBcIiArIHBzc2hJbmZvcy5sZW5ndGggKyBcIiBwc3NoIGZvdW5kIGZvciBzZWxlY3RlZCBrZXktc3lzdGVtIFwiICsga2V5U3lzdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwc3NoSW5mbyA9IHBzc2hJbmZvc1swXTtcbiAgICAgICAgICAgIGlmICghcHNzaEluZm8pIHtcbiAgICAgICAgICAgICAgaWYgKHBzc2hSZXN1bHRzLmxlbmd0aCA9PT0gMCB8fCBwc3NoUmVzdWx0cy5zb21lKGZ1bmN0aW9uIChwc3NoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFwc3NoLnN5c3RlbUlkO1xuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgIF90aGlzLndhcm4obG9nTWVzc2FnZSArIFwiIGNvbnRhaW5zIGluY29tcGxldGUgb3IgaW52YWxpZCBwc3NoIGRhdGFcIik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubG9nKFwiaWdub3JpbmcgXCIgKyBsb2dNZXNzYWdlICsgXCIgZm9yIFwiICsgcHNzaFJlc3VsdHMubWFwKGZ1bmN0aW9uIChwc3NoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ga2V5U3lzdGVtSWRUb0tleVN5c3RlbURvbWFpbihwc3NoLnN5c3RlbUlkKTtcbiAgICAgICAgICAgICAgICB9KS5qb2luKCcsJykgKyBcIiBwc3NoIGRhdGEgaW4gZmF2b3Igb2YgcGxheWxpc3Qga2V5c1wiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXlTeXN0ZW1Eb21haW4gPSBrZXlTeXN0ZW1JZFRvS2V5U3lzdGVtRG9tYWluKHBzc2hJbmZvLnN5c3RlbUlkKTtcbiAgICAgICAgICAgIGlmIChwc3NoSW5mby52ZXJzaW9uID09PSAwICYmIHBzc2hJbmZvLmRhdGEpIHtcbiAgICAgICAgICAgICAgaWYgKGtleVN5c3RlbURvbWFpbiA9PT0gS2V5U3lzdGVtcy5XSURFVklORSkge1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBwc3NoSW5mby5kYXRhLmxlbmd0aCAtIDIyO1xuICAgICAgICAgICAgICAgIGtleUlkID0gbmV3IFVpbnQ4QXJyYXkocHNzaEluZm8uZGF0YS5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIDE2KSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5U3lzdGVtRG9tYWluID09PSBLZXlTeXN0ZW1zLlBMQVlSRUFEWSkge1xuICAgICAgICAgICAgICAgIGtleUlkID0gcGFyc2VQbGF5UmVhZHlXUk0ocHNzaEluZm8uZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFrZXlTeXN0ZW1Eb21haW4gfHwgIWtleUlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBrZXlJZEhleCA9IEhleC5oZXhEdW1wKGtleUlkKTtcbiAgICAgICAgICB2YXIgX3RoaXMyID0gX3RoaXMsXG4gICAgICAgICAgICBrZXlJZFRvS2V5U2Vzc2lvblByb21pc2UgPSBfdGhpczIua2V5SWRUb0tleVNlc3Npb25Qcm9taXNlLFxuICAgICAgICAgICAgbWVkaWFLZXlTZXNzaW9ucyA9IF90aGlzMi5tZWRpYUtleVNlc3Npb25zO1xuICAgICAgICAgIHZhciBrZXlTZXNzaW9uQ29udGV4dFByb21pc2UgPSBrZXlJZFRvS2V5U2Vzc2lvblByb21pc2Vba2V5SWRIZXhdO1xuICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICAgICAgICAgICAgICAvLyBNYXRjaCBwbGF5bGlzdCBrZXlcbiAgICAgICAgICAgICAgdmFyIGtleUNvbnRleHQgPSBtZWRpYUtleVNlc3Npb25zW2ldO1xuICAgICAgICAgICAgICB2YXIgZGVjcnlwdGRhdGEgPSBrZXlDb250ZXh0LmRlY3J5cHRkYXRhO1xuICAgICAgICAgICAgICBpZiAoIWRlY3J5cHRkYXRhLmtleUlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7IC8vIGNvbnRpbnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIG9sZEtleUlkSGV4ID0gSGV4LmhleER1bXAoZGVjcnlwdGRhdGEua2V5SWQpO1xuICAgICAgICAgICAgICBpZiAoa2V5SWRIZXggPT09IG9sZEtleUlkSGV4IHx8IGRlY3J5cHRkYXRhLnVyaS5yZXBsYWNlKC8tL2csICcnKS5pbmRleE9mKGtleUlkSGV4KSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBrZXlTZXNzaW9uQ29udGV4dFByb21pc2UgPSBrZXlJZFRvS2V5U2Vzc2lvblByb21pc2Vbb2xkS2V5SWRIZXhdO1xuICAgICAgICAgICAgICAgIGlmIChkZWNyeXB0ZGF0YS5wc3NoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gMTsgLy8gYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlIGtleUlkVG9LZXlTZXNzaW9uUHJvbWlzZVtvbGRLZXlJZEhleF07XG4gICAgICAgICAgICAgICAgZGVjcnlwdGRhdGEucHNzaCA9IG5ldyBVaW50OEFycmF5KGluaXREYXRhKTtcbiAgICAgICAgICAgICAgICBkZWNyeXB0ZGF0YS5rZXlJZCA9IGtleUlkO1xuICAgICAgICAgICAgICAgIGtleVNlc3Npb25Db250ZXh0UHJvbWlzZSA9IGtleUlkVG9LZXlTZXNzaW9uUHJvbWlzZVtrZXlJZEhleF0gPSBrZXlTZXNzaW9uQ29udGV4dFByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2VuZXJhdGVSZXF1ZXN0V2l0aFByZWZlcnJlZEtleVNlc3Npb24oa2V5Q29udGV4dCwgaW5pdERhdGFUeXBlLCBpbml0RGF0YSwgJ2VuY3J5cHRlZC1ldmVudC1rZXktbWF0Y2gnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBrZXlTZXNzaW9uQ29udGV4dFByb21pc2UuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiAxOyAvLyBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3JldDtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lZGlhS2V5U2Vzc2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIF9yZXQgPSBfbG9vcCgpO1xuICAgICAgICAgICAgaWYgKF9yZXQgPT09IDApIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKF9yZXQgPT09IDEpIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWtleVNlc3Npb25Db250ZXh0UHJvbWlzZSkge1xuICAgICAgICAgICAgaWYgKGtleVN5c3RlbURvbWFpbiAhPT0ga2V5U3lzdGVtKSB7XG4gICAgICAgICAgICAgIF90aGlzLmxvZyhcIklnbm9yaW5nIFxcXCJcIiArIGV2ZW50LnR5cGUgKyBcIlxcXCIgZXZlbnQgd2l0aCBcIiArIGtleVN5c3RlbURvbWFpbiArIFwiIGluaXQgZGF0YSBmb3Igc2VsZWN0ZWQga2V5LXN5c3RlbSBcIiArIGtleVN5c3RlbSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFwiQ2xlYXItbGVhZFwiIChtaXNjIGtleSBub3QgZW5jb3VudGVyZWQgaW4gcGxheWxpc3QpXG4gICAgICAgICAgICBrZXlTZXNzaW9uQ29udGV4dFByb21pc2UgPSBrZXlJZFRvS2V5U2Vzc2lvblByb21pc2Vba2V5SWRIZXhdID0gX3RoaXMuZ2V0S2V5U3lzdGVtU2VsZWN0aW9uUHJvbWlzZShba2V5U3lzdGVtRG9tYWluXSkudGhlbihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgICB2YXIgX2tleVN5c3RlbVRvS2V5U3lzdGVtO1xuICAgICAgICAgICAgICB2YXIga2V5U3lzdGVtID0gX3JlZi5rZXlTeXN0ZW0sXG4gICAgICAgICAgICAgICAgbWVkaWFLZXlzID0gX3JlZi5tZWRpYUtleXM7XG4gICAgICAgICAgICAgIF90aGlzLnRocm93SWZEZXN0cm95ZWQoKTtcbiAgICAgICAgICAgICAgdmFyIGRlY3J5cHRkYXRhID0gbmV3IExldmVsS2V5KCdJU08tMjMwMDEtNycsIGtleUlkSGV4LCAoX2tleVN5c3RlbVRvS2V5U3lzdGVtID0ga2V5U3lzdGVtRG9tYWluVG9LZXlTeXN0ZW1Gb3JtYXQoa2V5U3lzdGVtKSkgIT0gbnVsbCA/IF9rZXlTeXN0ZW1Ub0tleVN5c3RlbSA6ICcnKTtcbiAgICAgICAgICAgICAgZGVjcnlwdGRhdGEucHNzaCA9IG5ldyBVaW50OEFycmF5KGluaXREYXRhKTtcbiAgICAgICAgICAgICAgZGVjcnlwdGRhdGEua2V5SWQgPSBrZXlJZDtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmF0dGVtcHRTZXRNZWRpYUtleXMoa2V5U3lzdGVtLCBtZWRpYUtleXMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnRocm93SWZEZXN0cm95ZWQoKTtcbiAgICAgICAgICAgICAgICB2YXIga2V5U2Vzc2lvbkNvbnRleHQgPSBfdGhpcy5jcmVhdGVNZWRpYUtleVNlc3Npb25Db250ZXh0KHtcbiAgICAgICAgICAgICAgICAgIGRlY3J5cHRkYXRhOiBkZWNyeXB0ZGF0YSxcbiAgICAgICAgICAgICAgICAgIGtleVN5c3RlbToga2V5U3lzdGVtLFxuICAgICAgICAgICAgICAgICAgbWVkaWFLZXlzOiBtZWRpYUtleXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2VuZXJhdGVSZXF1ZXN0V2l0aFByZWZlcnJlZEtleVNlc3Npb24oa2V5U2Vzc2lvbkNvbnRleHQsIGluaXREYXRhVHlwZSwgaW5pdERhdGEsICdlbmNyeXB0ZWQtZXZlbnQtbm8tbWF0Y2gnKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGtleVNlc3Npb25Db250ZXh0UHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgX3RoaXMub25XYWl0aW5nRm9yS2V5ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIF90aGlzLmxvZyhcIlxcXCJcIiArIGV2ZW50LnR5cGUgKyBcIlxcXCIgZXZlbnRcIik7XG4gICAgICB9O1xuICAgICAgX3RoaXMuaGxzID0gaGxzO1xuICAgICAgX3RoaXMuY29uZmlnID0gaGxzLmNvbmZpZztcbiAgICAgIF90aGlzLnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIF9pbmhlcml0c0xvb3NlKEVNRUNvbnRyb2xsZXIsIF9Mb2dnZXIpO1xuICAgIHZhciBfcHJvdG8gPSBFTUVDb250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLm9uRGVzdHJveWluZygpO1xuICAgICAgdGhpcy5vbk1lZGlhRGV0YWNoZWQoKTtcbiAgICAgIC8vIFJlbW92ZSBhbnkgcmVmZXJlbmNlcyB0aGF0IGNvdWxkIGJlIGhlbGQgaW4gY29uZmlnIG9wdGlvbnMgb3IgY2FsbGJhY2tzXG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgICBjb25maWcucmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzRnVuYyA9IG51bGw7XG4gICAgICBjb25maWcubGljZW5zZVhoclNldHVwID0gY29uZmlnLmxpY2Vuc2VSZXNwb25zZUNhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgICAgY29uZmlnLmRybVN5c3RlbXMgPSBjb25maWcuZHJtU3lzdGVtT3B0aW9ucyA9IHt9O1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5obHMgPSB0aGlzLmNvbmZpZyA9IHRoaXMua2V5SWRUb0tleVNlc3Npb25Qcm9taXNlID0gbnVsbDtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMub25NZWRpYUVuY3J5cHRlZCA9IHRoaXMub25XYWl0aW5nRm9yS2V5ID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdGhpcy5obHMub24oRXZlbnRzLk1FRElBX0FUVEFDSEVELCB0aGlzLm9uTWVkaWFBdHRhY2hlZCwgdGhpcyk7XG4gICAgICB0aGlzLmhscy5vbihFdmVudHMuTUVESUFfREVUQUNIRUQsIHRoaXMub25NZWRpYURldGFjaGVkLCB0aGlzKTtcbiAgICAgIHRoaXMuaGxzLm9uKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIHRoaXMuaGxzLm9uKEV2ZW50cy5NQU5JRkVTVF9MT0FERUQsIHRoaXMub25NYW5pZmVzdExvYWRlZCwgdGhpcyk7XG4gICAgICB0aGlzLmhscy5vbihFdmVudHMuREVTVFJPWUlORywgdGhpcy5vbkRlc3Ryb3lpbmcsIHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLnVucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdGhpcy5obHMub2ZmKEV2ZW50cy5NRURJQV9BVFRBQ0hFRCwgdGhpcy5vbk1lZGlhQXR0YWNoZWQsIHRoaXMpO1xuICAgICAgdGhpcy5obHMub2ZmKEV2ZW50cy5NRURJQV9ERVRBQ0hFRCwgdGhpcy5vbk1lZGlhRGV0YWNoZWQsIHRoaXMpO1xuICAgICAgdGhpcy5obHMub2ZmKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIHRoaXMuaGxzLm9mZihFdmVudHMuTUFOSUZFU1RfTE9BREVELCB0aGlzLm9uTWFuaWZlc3RMb2FkZWQsIHRoaXMpO1xuICAgICAgdGhpcy5obHMub2ZmKEV2ZW50cy5ERVNUUk9ZSU5HLCB0aGlzLm9uRGVzdHJveWluZywgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0TGljZW5zZVNlcnZlclVybCA9IGZ1bmN0aW9uIGdldExpY2Vuc2VTZXJ2ZXJVcmwoa2V5U3lzdGVtKSB7XG4gICAgICB2YXIgX3RoaXMkY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICAgIGRybVN5c3RlbXMgPSBfdGhpcyRjb25maWcuZHJtU3lzdGVtcyxcbiAgICAgICAgd2lkZXZpbmVMaWNlbnNlVXJsID0gX3RoaXMkY29uZmlnLndpZGV2aW5lTGljZW5zZVVybDtcbiAgICAgIHZhciBrZXlTeXN0ZW1Db25maWd1cmF0aW9uID0gZHJtU3lzdGVtc1trZXlTeXN0ZW1dO1xuICAgICAgaWYgKGtleVN5c3RlbUNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGtleVN5c3RlbUNvbmZpZ3VyYXRpb24ubGljZW5zZVVybDtcbiAgICAgIH1cblxuICAgICAgLy8gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICAgIGlmIChrZXlTeXN0ZW0gPT09IEtleVN5c3RlbXMuV0lERVZJTkUgJiYgd2lkZXZpbmVMaWNlbnNlVXJsKSB7XG4gICAgICAgIHJldHVybiB3aWRldmluZUxpY2Vuc2VVcmw7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0TGljZW5zZVNlcnZlclVybE9yVGhyb3cgPSBmdW5jdGlvbiBnZXRMaWNlbnNlU2VydmVyVXJsT3JUaHJvdyhrZXlTeXN0ZW0pIHtcbiAgICAgIHZhciB1cmwgPSB0aGlzLmdldExpY2Vuc2VTZXJ2ZXJVcmwoa2V5U3lzdGVtKTtcbiAgICAgIGlmICh1cmwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJubyBsaWNlbnNlIHNlcnZlciBVUkwgY29uZmlndXJlZCBmb3Iga2V5LXN5c3RlbSBcXFwiXCIgKyBrZXlTeXN0ZW0gKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH07XG4gICAgX3Byb3RvLmdldFNlcnZlckNlcnRpZmljYXRlVXJsID0gZnVuY3Rpb24gZ2V0U2VydmVyQ2VydGlmaWNhdGVVcmwoa2V5U3lzdGVtKSB7XG4gICAgICB2YXIgZHJtU3lzdGVtcyA9IHRoaXMuY29uZmlnLmRybVN5c3RlbXM7XG4gICAgICB2YXIga2V5U3lzdGVtQ29uZmlndXJhdGlvbiA9IGRybVN5c3RlbXNba2V5U3lzdGVtXTtcbiAgICAgIGlmIChrZXlTeXN0ZW1Db25maWd1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBrZXlTeXN0ZW1Db25maWd1cmF0aW9uLnNlcnZlckNlcnRpZmljYXRlVXJsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2coXCJObyBTZXJ2ZXIgQ2VydGlmaWNhdGUgaW4gY29uZmlnLmRybVN5c3RlbXNbXFxcIlwiICsga2V5U3lzdGVtICsgXCJcXFwiXVwiKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5hdHRlbXB0S2V5U3lzdGVtQWNjZXNzID0gZnVuY3Rpb24gYXR0ZW1wdEtleVN5c3RlbUFjY2VzcyhrZXlTeXN0ZW1zVG9BdHRlbXB0KSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIHZhciBsZXZlbHMgPSB0aGlzLmhscy5sZXZlbHM7XG4gICAgICB2YXIgdW5pcXVlQ29kZWMgPSBmdW5jdGlvbiB1bmlxdWVDb2RlYyh2YWx1ZSwgaSwgYSkge1xuICAgICAgICByZXR1cm4gISF2YWx1ZSAmJiBhLmluZGV4T2YodmFsdWUpID09PSBpO1xuICAgICAgfTtcbiAgICAgIHZhciBhdWRpb0NvZGVjcyA9IGxldmVscy5tYXAoZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIHJldHVybiBsZXZlbC5hdWRpb0NvZGVjO1xuICAgICAgfSkuZmlsdGVyKHVuaXF1ZUNvZGVjKTtcbiAgICAgIHZhciB2aWRlb0NvZGVjcyA9IGxldmVscy5tYXAoZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIHJldHVybiBsZXZlbC52aWRlb0NvZGVjO1xuICAgICAgfSkuZmlsdGVyKHVuaXF1ZUNvZGVjKTtcbiAgICAgIGlmIChhdWRpb0NvZGVjcy5sZW5ndGggKyB2aWRlb0NvZGVjcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmlkZW9Db2RlY3MucHVzaCgnYXZjMS40MmUwMWUnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBfYXR0ZW1wdCA9IGZ1bmN0aW9uIGF0dGVtcHQoa2V5U3lzdGVtcykge1xuICAgICAgICAgIHZhciBrZXlTeXN0ZW0gPSBrZXlTeXN0ZW1zLnNoaWZ0KCk7XG4gICAgICAgICAgX3RoaXMzLmdldE1lZGlhS2V5c1Byb21pc2Uoa2V5U3lzdGVtLCBhdWRpb0NvZGVjcywgdmlkZW9Db2RlY3MpLnRoZW4oZnVuY3Rpb24gKG1lZGlhS2V5cykge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoe1xuICAgICAgICAgICAgICBrZXlTeXN0ZW06IGtleVN5c3RlbSxcbiAgICAgICAgICAgICAgbWVkaWFLZXlzOiBtZWRpYUtleXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGtleVN5c3RlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIF9hdHRlbXB0KGtleVN5c3RlbXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIEVNRUtleUVycm9yKSB7XG4gICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QobmV3IEVNRUtleUVycm9yKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLktFWV9TWVNURU1fRVJST1IsXG4gICAgICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLktFWV9TWVNURU1fTk9fQUNDRVNTLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgICAgICAgICB9LCBlcnJvci5tZXNzYWdlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF9hdHRlbXB0KGtleVN5c3RlbXNUb0F0dGVtcHQpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzID0gZnVuY3Rpb24gcmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzJDEoa2V5U3lzdGVtLCBzdXBwb3J0ZWRDb25maWd1cmF0aW9ucykge1xuICAgICAgdmFyIHJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2Vzc0Z1bmMgPSB0aGlzLmNvbmZpZy5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3NGdW5jO1xuICAgICAgaWYgKCEodHlwZW9mIHJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2Vzc0Z1bmMgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHZhciBlcnJNZXNzYWdlID0gXCJDb25maWd1cmVkIHJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2VzcyBpcyBub3QgYSBmdW5jdGlvbiBcIiArIHJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2Vzc0Z1bmM7XG4gICAgICAgIGlmIChyZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MgPT09IG51bGwgJiYgc2VsZi5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHA6Jykge1xuICAgICAgICAgIGVyck1lc3NhZ2UgPSBcIm5hdmlnYXRvci5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MgaXMgbm90IGF2YWlsYWJsZSBvdmVyIGluc2VjdXJlIHByb3RvY29sIFwiICsgbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihlcnJNZXNzYWdlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzRnVuYyhrZXlTeXN0ZW0sIHN1cHBvcnRlZENvbmZpZ3VyYXRpb25zKTtcbiAgICB9O1xuICAgIF9wcm90by5nZXRNZWRpYUtleXNQcm9taXNlID0gZnVuY3Rpb24gZ2V0TWVkaWFLZXlzUHJvbWlzZShrZXlTeXN0ZW0sIGF1ZGlvQ29kZWNzLCB2aWRlb0NvZGVjcykge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG4gICAgICAvLyBUaGlzIGNhbiB0aHJvdywgYnV0IGlzIGNhdWdodCBpbiBldmVudCBoYW5kbGVyIGNhbGxwYXRoXG4gICAgICB2YXIgbWVkaWFLZXlTeXN0ZW1Db25maWdzID0gZ2V0U3VwcG9ydGVkTWVkaWFLZXlTeXN0ZW1Db25maWd1cmF0aW9ucyhrZXlTeXN0ZW0sIGF1ZGlvQ29kZWNzLCB2aWRlb0NvZGVjcywgdGhpcy5jb25maWcuZHJtU3lzdGVtT3B0aW9ucyk7XG4gICAgICB2YXIga2V5U3lzdGVtQWNjZXNzUHJvbWlzZXMgPSB0aGlzLmtleVN5c3RlbUFjY2Vzc1Byb21pc2VzW2tleVN5c3RlbV07XG4gICAgICB2YXIga2V5U3lzdGVtQWNjZXNzID0ga2V5U3lzdGVtQWNjZXNzUHJvbWlzZXMgPT0gbnVsbCA/IHZvaWQgMCA6IGtleVN5c3RlbUFjY2Vzc1Byb21pc2VzLmtleVN5c3RlbUFjY2VzcztcbiAgICAgIGlmICgha2V5U3lzdGVtQWNjZXNzKSB7XG4gICAgICAgIHRoaXMubG9nKFwiUmVxdWVzdGluZyBlbmNyeXB0ZWQgbWVkaWEgXFxcIlwiICsga2V5U3lzdGVtICsgXCJcXFwiIGtleS1zeXN0ZW0gYWNjZXNzIHdpdGggY29uZmlnOiBcIiArIHN0cmluZ2lmeShtZWRpYUtleVN5c3RlbUNvbmZpZ3MpKTtcbiAgICAgICAga2V5U3lzdGVtQWNjZXNzID0gdGhpcy5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3Moa2V5U3lzdGVtLCBtZWRpYUtleVN5c3RlbUNvbmZpZ3MpO1xuICAgICAgICB2YXIgX2tleVN5c3RlbUFjY2Vzc1Byb21pc2VzID0gdGhpcy5rZXlTeXN0ZW1BY2Nlc3NQcm9taXNlc1trZXlTeXN0ZW1dID0ge1xuICAgICAgICAgIGtleVN5c3RlbUFjY2Vzczoga2V5U3lzdGVtQWNjZXNzXG4gICAgICAgIH07XG4gICAgICAgIGtleVN5c3RlbUFjY2Vzcy5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBfdGhpczQubG9nKFwiRmFpbGVkIHRvIG9idGFpbiBhY2Nlc3MgdG8ga2V5LXN5c3RlbSBcXFwiXCIgKyBrZXlTeXN0ZW0gKyBcIlxcXCI6IFwiICsgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGtleVN5c3RlbUFjY2Vzcy50aGVuKGZ1bmN0aW9uIChtZWRpYUtleVN5c3RlbUFjY2Vzcykge1xuICAgICAgICAgIF90aGlzNC5sb2coXCJBY2Nlc3MgZm9yIGtleS1zeXN0ZW0gXFxcIlwiICsgbWVkaWFLZXlTeXN0ZW1BY2Nlc3Mua2V5U3lzdGVtICsgXCJcXFwiIG9idGFpbmVkXCIpO1xuICAgICAgICAgIHZhciBjZXJ0aWZpY2F0ZVJlcXVlc3QgPSBfdGhpczQuZmV0Y2hTZXJ2ZXJDZXJ0aWZpY2F0ZShrZXlTeXN0ZW0pO1xuICAgICAgICAgIF90aGlzNC5sb2coXCJDcmVhdGUgbWVkaWEta2V5cyBmb3IgXFxcIlwiICsga2V5U3lzdGVtICsgXCJcXFwiXCIpO1xuICAgICAgICAgIF9rZXlTeXN0ZW1BY2Nlc3NQcm9taXNlcy5tZWRpYUtleXMgPSBtZWRpYUtleVN5c3RlbUFjY2Vzcy5jcmVhdGVNZWRpYUtleXMoKS50aGVuKGZ1bmN0aW9uIChtZWRpYUtleXMpIHtcbiAgICAgICAgICAgIF90aGlzNC5sb2coXCJNZWRpYS1rZXlzIGNyZWF0ZWQgZm9yIFxcXCJcIiArIGtleVN5c3RlbSArIFwiXFxcIlwiKTtcbiAgICAgICAgICAgIF9rZXlTeXN0ZW1BY2Nlc3NQcm9taXNlcy5oYXNNZWRpYUtleXMgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGNlcnRpZmljYXRlUmVxdWVzdC50aGVuKGZ1bmN0aW9uIChjZXJ0aWZpY2F0ZSkge1xuICAgICAgICAgICAgICBpZiAoY2VydGlmaWNhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LnNldE1lZGlhS2V5c1NlcnZlckNlcnRpZmljYXRlKG1lZGlhS2V5cywga2V5U3lzdGVtLCBjZXJ0aWZpY2F0ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIG1lZGlhS2V5cztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIF9rZXlTeXN0ZW1BY2Nlc3NQcm9taXNlcy5tZWRpYUtleXMuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpczQuZXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIG1lZGlhLWtleXMgZm9yIFxcXCJcIiArIGtleVN5c3RlbSArIFwiXFxcIn06IFwiICsgZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBfa2V5U3lzdGVtQWNjZXNzUHJvbWlzZXMubWVkaWFLZXlzO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXlTeXN0ZW1BY2Nlc3MudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBrZXlTeXN0ZW1BY2Nlc3NQcm9taXNlcy5tZWRpYUtleXM7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5jcmVhdGVNZWRpYUtleVNlc3Npb25Db250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTWVkaWFLZXlTZXNzaW9uQ29udGV4dChfcmVmMikge1xuICAgICAgdmFyIGRlY3J5cHRkYXRhID0gX3JlZjIuZGVjcnlwdGRhdGEsXG4gICAgICAgIGtleVN5c3RlbSA9IF9yZWYyLmtleVN5c3RlbSxcbiAgICAgICAgbWVkaWFLZXlzID0gX3JlZjIubWVkaWFLZXlzO1xuICAgICAgdGhpcy5sb2coXCJDcmVhdGluZyBrZXktc3lzdGVtIHNlc3Npb24gXFxcIlwiICsga2V5U3lzdGVtICsgXCJcXFwiIGtleUlkOiBcIiArIEhleC5oZXhEdW1wKGRlY3J5cHRkYXRhLmtleUlkIHx8IFtdKSk7XG4gICAgICB2YXIgbWVkaWFLZXlzU2Vzc2lvbiA9IG1lZGlhS2V5cy5jcmVhdGVTZXNzaW9uKCk7XG4gICAgICB2YXIgbWVkaWFLZXlTZXNzaW9uQ29udGV4dCA9IHtcbiAgICAgICAgZGVjcnlwdGRhdGE6IGRlY3J5cHRkYXRhLFxuICAgICAgICBrZXlTeXN0ZW06IGtleVN5c3RlbSxcbiAgICAgICAgbWVkaWFLZXlzOiBtZWRpYUtleXMsXG4gICAgICAgIG1lZGlhS2V5c1Nlc3Npb246IG1lZGlhS2V5c1Nlc3Npb24sXG4gICAgICAgIGtleVN0YXR1czogJ3N0YXR1cy1wZW5kaW5nJ1xuICAgICAgfTtcbiAgICAgIHRoaXMubWVkaWFLZXlTZXNzaW9ucy5wdXNoKG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQpO1xuICAgICAgcmV0dXJuIG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQ7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVuZXdLZXlTZXNzaW9uID0gZnVuY3Rpb24gcmVuZXdLZXlTZXNzaW9uKG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQpIHtcbiAgICAgIHZhciBkZWNyeXB0ZGF0YSA9IG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQuZGVjcnlwdGRhdGE7XG4gICAgICBpZiAoZGVjcnlwdGRhdGEucHNzaCkge1xuICAgICAgICB2YXIga2V5U2Vzc2lvbkNvbnRleHQgPSB0aGlzLmNyZWF0ZU1lZGlhS2V5U2Vzc2lvbkNvbnRleHQobWVkaWFLZXlTZXNzaW9uQ29udGV4dCk7XG4gICAgICAgIHZhciBrZXlJZCA9IHRoaXMuZ2V0S2V5SWRTdHJpbmcoZGVjcnlwdGRhdGEpO1xuICAgICAgICB2YXIgc2NoZW1lID0gJ2NlbmMnO1xuICAgICAgICB0aGlzLmtleUlkVG9LZXlTZXNzaW9uUHJvbWlzZVtrZXlJZF0gPSB0aGlzLmdlbmVyYXRlUmVxdWVzdFdpdGhQcmVmZXJyZWRLZXlTZXNzaW9uKGtleVNlc3Npb25Db250ZXh0LCBzY2hlbWUsIGRlY3J5cHRkYXRhLnBzc2guYnVmZmVyLCAnZXhwaXJlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53YXJuKFwiQ291bGQgbm90IHJlbmV3IGV4cGlyZWQgc2Vzc2lvbi4gTWlzc2luZyBwc3NoIGluaXREYXRhLlwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVtb3ZlU2Vzc2lvbihtZWRpYUtleVNlc3Npb25Db250ZXh0KTtcbiAgICB9O1xuICAgIF9wcm90by5nZXRLZXlJZFN0cmluZyA9IGZ1bmN0aW9uIGdldEtleUlkU3RyaW5nKGRlY3J5cHRkYXRhKSB7XG4gICAgICBpZiAoIWRlY3J5cHRkYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHJlYWQga2V5SWQgb2YgdW5kZWZpbmVkIGRlY3J5cHRkYXRhJyk7XG4gICAgICB9XG4gICAgICBpZiAoZGVjcnlwdGRhdGEua2V5SWQgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdrZXlJZCBpcyBudWxsJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gSGV4LmhleER1bXAoZGVjcnlwdGRhdGEua2V5SWQpO1xuICAgIH07XG4gICAgX3Byb3RvLnVwZGF0ZUtleVNlc3Npb24gPSBmdW5jdGlvbiB1cGRhdGVLZXlTZXNzaW9uKG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQsIGRhdGEpIHtcbiAgICAgIHZhciBfbWVkaWFLZXlTZXNzaW9uQ29udGU7XG4gICAgICB2YXIga2V5U2Vzc2lvbiA9IG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQubWVkaWFLZXlzU2Vzc2lvbjtcbiAgICAgIHRoaXMubG9nKFwiVXBkYXRpbmcga2V5LXNlc3Npb24gXFxcIlwiICsga2V5U2Vzc2lvbi5zZXNzaW9uSWQgKyBcIlxcXCIgZm9yIGtleUlEIFwiICsgSGV4LmhleER1bXAoKChfbWVkaWFLZXlTZXNzaW9uQ29udGUgPSBtZWRpYUtleVNlc3Npb25Db250ZXh0LmRlY3J5cHRkYXRhKSA9PSBudWxsID8gdm9pZCAwIDogX21lZGlhS2V5U2Vzc2lvbkNvbnRlLmtleUlkKSB8fCBbXSkgKyBcIlxcbiAgICAgIH0gKGRhdGEgbGVuZ3RoOiBcIiArIChkYXRhID8gZGF0YS5ieXRlTGVuZ3RoIDogZGF0YSkgKyBcIilcIik7XG4gICAgICByZXR1cm4ga2V5U2Vzc2lvbi51cGRhdGUoZGF0YSk7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0U2VsZWN0ZWRLZXlTeXN0ZW1Gb3JtYXRzID0gZnVuY3Rpb24gZ2V0U2VsZWN0ZWRLZXlTeXN0ZW1Gb3JtYXRzKCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5rZXlTeXN0ZW1BY2Nlc3NQcm9taXNlcykubWFwKGZ1bmN0aW9uIChrZXlTeXN0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBrZXlTeXN0ZW06IGtleVN5c3RlbSxcbiAgICAgICAgICBoYXNNZWRpYUtleXM6IF90aGlzNS5rZXlTeXN0ZW1BY2Nlc3NQcm9taXNlc1trZXlTeXN0ZW1dLmhhc01lZGlhS2V5c1xuICAgICAgICB9O1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgaGFzTWVkaWFLZXlzID0gX3JlZjMuaGFzTWVkaWFLZXlzO1xuICAgICAgICByZXR1cm4gISFoYXNNZWRpYUtleXM7XG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKF9yZWY0KSB7XG4gICAgICAgIHZhciBrZXlTeXN0ZW0gPSBfcmVmNC5rZXlTeXN0ZW07XG4gICAgICAgIHJldHVybiBrZXlTeXN0ZW1Eb21haW5Ub0tleVN5c3RlbUZvcm1hdChrZXlTeXN0ZW0pO1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChrZXlTeXN0ZW0pIHtcbiAgICAgICAgcmV0dXJuICEha2V5U3lzdGVtO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0S2V5U3lzdGVtQWNjZXNzID0gZnVuY3Rpb24gZ2V0S2V5U3lzdGVtQWNjZXNzKGtleVN5c3RlbXNUb0F0dGVtcHQpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5U3lzdGVtU2VsZWN0aW9uUHJvbWlzZShrZXlTeXN0ZW1zVG9BdHRlbXB0KS50aGVuKGZ1bmN0aW9uIChfcmVmNSkge1xuICAgICAgICB2YXIga2V5U3lzdGVtID0gX3JlZjUua2V5U3lzdGVtLFxuICAgICAgICAgIG1lZGlhS2V5cyA9IF9yZWY1Lm1lZGlhS2V5cztcbiAgICAgICAgcmV0dXJuIF90aGlzNi5hdHRlbXB0U2V0TWVkaWFLZXlzKGtleVN5c3RlbSwgbWVkaWFLZXlzKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLnNlbGVjdEtleVN5c3RlbSA9IGZ1bmN0aW9uIHNlbGVjdEtleVN5c3RlbShrZXlTeXN0ZW1zVG9BdHRlbXB0KSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHJldHVybiBfdGhpczcuZ2V0S2V5U3lzdGVtU2VsZWN0aW9uUHJvbWlzZShrZXlTeXN0ZW1zVG9BdHRlbXB0KS50aGVuKGZ1bmN0aW9uIChfcmVmNikge1xuICAgICAgICAgIHZhciBrZXlTeXN0ZW0gPSBfcmVmNi5rZXlTeXN0ZW07XG4gICAgICAgICAgdmFyIGtleVN5c3RlbUZvcm1hdCA9IGtleVN5c3RlbURvbWFpblRvS2V5U3lzdGVtRm9ybWF0KGtleVN5c3RlbSk7XG4gICAgICAgICAgaWYgKGtleVN5c3RlbUZvcm1hdCkge1xuICAgICAgICAgICAgcmVzb2x2ZShrZXlTeXN0ZW1Gb3JtYXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiVW5hYmxlIHRvIGZpbmQgZm9ybWF0IGZvciBrZXktc3lzdGVtIFxcXCJcIiArIGtleVN5c3RlbSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8uc2VsZWN0S2V5U3lzdGVtRm9ybWF0ID0gZnVuY3Rpb24gc2VsZWN0S2V5U3lzdGVtRm9ybWF0KGZyYWcpIHtcbiAgICAgIHZhciBrZXlGb3JtYXRzID0gT2JqZWN0LmtleXMoZnJhZy5sZXZlbGtleXMgfHwge30pO1xuICAgICAgaWYgKCF0aGlzLmtleUZvcm1hdFByb21pc2UpIHtcbiAgICAgICAgdGhpcy5sb2coXCJTZWxlY3Rpbmcga2V5LXN5c3RlbSBmcm9tIGZyYWdtZW50IChzbjogXCIgKyBmcmFnLnNuICsgXCIgXCIgKyBmcmFnLnR5cGUgKyBcIjogXCIgKyBmcmFnLmxldmVsICsgXCIpIGtleSBmb3JtYXRzIFwiICsga2V5Rm9ybWF0cy5qb2luKCcsICcpKTtcbiAgICAgICAgdGhpcy5rZXlGb3JtYXRQcm9taXNlID0gdGhpcy5nZXRLZXlGb3JtYXRQcm9taXNlKGtleUZvcm1hdHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMua2V5Rm9ybWF0UHJvbWlzZTtcbiAgICB9O1xuICAgIF9wcm90by5nZXRLZXlGb3JtYXRQcm9taXNlID0gZnVuY3Rpb24gZ2V0S2V5Rm9ybWF0UHJvbWlzZShrZXlGb3JtYXRzKSB7XG4gICAgICB2YXIga2V5U3lzdGVtc0luQ29uZmlnID0gZ2V0S2V5U3lzdGVtc0ZvckNvbmZpZyh0aGlzLmNvbmZpZyk7XG4gICAgICB2YXIga2V5U3lzdGVtc1RvQXR0ZW1wdCA9IGtleUZvcm1hdHMubWFwKGtleVN5c3RlbUZvcm1hdFRvS2V5U3lzdGVtRG9tYWluKS5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhIXZhbHVlICYmIGtleVN5c3RlbXNJbkNvbmZpZy5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdEtleVN5c3RlbShrZXlTeXN0ZW1zVG9BdHRlbXB0KTtcbiAgICB9O1xuICAgIF9wcm90by5sb2FkS2V5ID0gZnVuY3Rpb24gbG9hZEtleShkYXRhKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcbiAgICAgIHZhciBkZWNyeXB0ZGF0YSA9IGRhdGEua2V5SW5mby5kZWNyeXB0ZGF0YTtcbiAgICAgIHZhciBrZXlJZCA9IHRoaXMuZ2V0S2V5SWRTdHJpbmcoZGVjcnlwdGRhdGEpO1xuICAgICAgdmFyIGtleURldGFpbHMgPSBcIihrZXlJZDogXCIgKyBrZXlJZCArIFwiIGZvcm1hdDogXFxcIlwiICsgZGVjcnlwdGRhdGEua2V5Rm9ybWF0ICsgXCJcXFwiIG1ldGhvZDogXCIgKyBkZWNyeXB0ZGF0YS5tZXRob2QgKyBcIiB1cmk6IFwiICsgZGVjcnlwdGRhdGEudXJpICsgXCIpXCI7XG4gICAgICB0aGlzLmxvZyhcIlN0YXJ0aW5nIHNlc3Npb24gZm9yIGtleSBcIiArIGtleURldGFpbHMpO1xuICAgICAgdmFyIGtleUNvbnRleHRQcm9taXNlID0gdGhpcy5rZXlJZFRvS2V5U2Vzc2lvblByb21pc2Vba2V5SWRdO1xuICAgICAgaWYgKCFrZXlDb250ZXh0UHJvbWlzZSkge1xuICAgICAgICBrZXlDb250ZXh0UHJvbWlzZSA9IHRoaXMuZ2V0S2V5U3lzdGVtRm9yS2V5UHJvbWlzZShkZWNyeXB0ZGF0YSkudGhlbihmdW5jdGlvbiAoX3JlZjcpIHtcbiAgICAgICAgICB2YXIga2V5U3lzdGVtID0gX3JlZjcua2V5U3lzdGVtLFxuICAgICAgICAgICAgbWVkaWFLZXlzID0gX3JlZjcubWVkaWFLZXlzO1xuICAgICAgICAgIF90aGlzOC50aHJvd0lmRGVzdHJveWVkKCk7XG4gICAgICAgICAgX3RoaXM4LmxvZyhcIkhhbmRsZSBlbmNyeXB0ZWQgbWVkaWEgc246IFwiICsgZGF0YS5mcmFnLnNuICsgXCIgXCIgKyBkYXRhLmZyYWcudHlwZSArIFwiOiBcIiArIGRhdGEuZnJhZy5sZXZlbCArIFwiIHVzaW5nIGtleSBcIiArIGtleURldGFpbHMpO1xuICAgICAgICAgIHJldHVybiBfdGhpczguYXR0ZW1wdFNldE1lZGlhS2V5cyhrZXlTeXN0ZW0sIG1lZGlhS2V5cykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczgudGhyb3dJZkRlc3Ryb3llZCgpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzOC5jcmVhdGVNZWRpYUtleVNlc3Npb25Db250ZXh0KHtcbiAgICAgICAgICAgICAga2V5U3lzdGVtOiBrZXlTeXN0ZW0sXG4gICAgICAgICAgICAgIG1lZGlhS2V5czogbWVkaWFLZXlzLFxuICAgICAgICAgICAgICBkZWNyeXB0ZGF0YTogZGVjcnlwdGRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGtleVNlc3Npb25Db250ZXh0UHJvbWlzZSA9IHRoaXMua2V5SWRUb0tleVNlc3Npb25Qcm9taXNlW2tleUlkXSA9IGtleUNvbnRleHRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGtleVNlc3Npb25Db250ZXh0KSB7XG4gICAgICAgICAgdmFyIHNjaGVtZSA9ICdjZW5jJztcbiAgICAgICAgICB2YXIgaW5pdERhdGEgPSBkZWNyeXB0ZGF0YS5wc3NoID8gZGVjcnlwdGRhdGEucHNzaC5idWZmZXIgOiBudWxsO1xuICAgICAgICAgIHJldHVybiBfdGhpczguZ2VuZXJhdGVSZXF1ZXN0V2l0aFByZWZlcnJlZEtleVNlc3Npb24oa2V5U2Vzc2lvbkNvbnRleHQsIHNjaGVtZSwgaW5pdERhdGEsICdwbGF5bGlzdC1rZXknKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGtleVNlc3Npb25Db250ZXh0UHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM4LmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ga2V5Q29udGV4dFByb21pc2U7XG4gICAgfTtcbiAgICBfcHJvdG8udGhyb3dJZkRlc3Ryb3llZCA9IGZ1bmN0aW9uIHRocm93SWZEZXN0cm95ZWQobWVzc2FnZSkge1xuICAgICAgaWYgKCF0aGlzLmhscykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc3RhdGUnKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5oYW5kbGVFcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yKSB7XG4gICAgICBpZiAoIXRoaXMuaGxzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFTUVLZXlFcnJvcikge1xuICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwgZXJyb3IuZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwge1xuICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuS0VZX1NZU1RFTV9FUlJPUixcbiAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuS0VZX1NZU1RFTV9OT19LRVlTLFxuICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5nZXRLZXlTeXN0ZW1Gb3JLZXlQcm9taXNlID0gZnVuY3Rpb24gZ2V0S2V5U3lzdGVtRm9yS2V5UHJvbWlzZShkZWNyeXB0ZGF0YSkge1xuICAgICAgdmFyIGtleUlkID0gdGhpcy5nZXRLZXlJZFN0cmluZyhkZWNyeXB0ZGF0YSk7XG4gICAgICB2YXIgbWVkaWFLZXlTZXNzaW9uQ29udGV4dCA9IHRoaXMua2V5SWRUb0tleVNlc3Npb25Qcm9taXNlW2tleUlkXTtcbiAgICAgIGlmICghbWVkaWFLZXlTZXNzaW9uQ29udGV4dCkge1xuICAgICAgICB2YXIga2V5U3lzdGVtID0ga2V5U3lzdGVtRm9ybWF0VG9LZXlTeXN0ZW1Eb21haW4oZGVjcnlwdGRhdGEua2V5Rm9ybWF0KTtcbiAgICAgICAgdmFyIGtleVN5c3RlbXNUb0F0dGVtcHQgPSBrZXlTeXN0ZW0gPyBba2V5U3lzdGVtXSA6IGdldEtleVN5c3RlbXNGb3JDb25maWcodGhpcy5jb25maWcpO1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRlbXB0S2V5U3lzdGVtQWNjZXNzKGtleVN5c3RlbXNUb0F0dGVtcHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQ7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0S2V5U3lzdGVtU2VsZWN0aW9uUHJvbWlzZSA9IGZ1bmN0aW9uIGdldEtleVN5c3RlbVNlbGVjdGlvblByb21pc2Uoa2V5U3lzdGVtc1RvQXR0ZW1wdCkge1xuICAgICAgaWYgKCFrZXlTeXN0ZW1zVG9BdHRlbXB0Lmxlbmd0aCkge1xuICAgICAgICBrZXlTeXN0ZW1zVG9BdHRlbXB0ID0gZ2V0S2V5U3lzdGVtc0ZvckNvbmZpZyh0aGlzLmNvbmZpZyk7XG4gICAgICB9XG4gICAgICBpZiAoa2V5U3lzdGVtc1RvQXR0ZW1wdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVNRUtleUVycm9yKHtcbiAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLktFWV9TWVNURU1fRVJST1IsXG4gICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLktFWV9TWVNURU1fTk9fQ09ORklHVVJFRF9MSUNFTlNFLFxuICAgICAgICAgIGZhdGFsOiB0cnVlXG4gICAgICAgIH0sIFwiTWlzc2luZyBrZXktc3lzdGVtIGxpY2Vuc2UgY29uZmlndXJhdGlvbiBvcHRpb25zIFwiICsgc3RyaW5naWZ5KHtcbiAgICAgICAgICBkcm1TeXN0ZW1zOiB0aGlzLmNvbmZpZy5kcm1TeXN0ZW1zXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmF0dGVtcHRLZXlTeXN0ZW1BY2Nlc3Moa2V5U3lzdGVtc1RvQXR0ZW1wdCk7XG4gICAgfTtcbiAgICBfcHJvdG8uYXR0ZW1wdFNldE1lZGlhS2V5cyA9IGZ1bmN0aW9uIGF0dGVtcHRTZXRNZWRpYUtleXMoa2V5U3lzdGVtLCBtZWRpYUtleXMpIHtcbiAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuICAgICAgaWYgKHRoaXMubWVkaWFLZXlzID09PSBtZWRpYUtleXMpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHF1ZXVlID0gdGhpcy5zZXRNZWRpYUtleXNRdWV1ZS5zbGljZSgpO1xuICAgICAgdGhpcy5sb2coXCJTZXR0aW5nIG1lZGlhLWtleXMgZm9yIFxcXCJcIiArIGtleVN5c3RlbSArIFwiXFxcIlwiKTtcbiAgICAgIC8vIE9ubHkgb25lIHNldE1lZGlhS2V5cygpIGNhbiBydW4gYXQgb25lIHRpbWUsIGFuZCBtdWx0aXBsZSBzZXRNZWRpYUtleXMoKSBvcGVyYXRpb25zXG4gICAgICAvLyBjYW4gYmUgcXVldWVkIGZvciBleGVjdXRpb24gZm9yIG11bHRpcGxlIGtleSBzZXNzaW9ucy5cbiAgICAgIHZhciBzZXRNZWRpYUtleXNQcm9taXNlID0gUHJvbWlzZS5hbGwocXVldWUpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzOS5tZWRpYSkge1xuICAgICAgICAgIF90aGlzOS5tZWRpYUtleXMgPSBudWxsO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIHNldCBtZWRpYUtleXMgd2l0aG91dCBtZWRpYSBlbGVtZW50IGF0dGFjaGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzOS5tZWRpYS5zZXRNZWRpYUtleXMobWVkaWFLZXlzKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tZWRpYUtleXMgPSBtZWRpYUtleXM7XG4gICAgICB0aGlzLnNldE1lZGlhS2V5c1F1ZXVlLnB1c2goc2V0TWVkaWFLZXlzUHJvbWlzZSk7XG4gICAgICByZXR1cm4gc2V0TWVkaWFLZXlzUHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM5LmxvZyhcIk1lZGlhLWtleXMgc2V0IGZvciBcXFwiXCIgKyBrZXlTeXN0ZW0gKyBcIlxcXCJcIik7XG4gICAgICAgIHF1ZXVlLnB1c2goc2V0TWVkaWFLZXlzUHJvbWlzZSk7XG4gICAgICAgIF90aGlzOS5zZXRNZWRpYUtleXNRdWV1ZSA9IF90aGlzOS5zZXRNZWRpYUtleXNRdWV1ZS5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICByZXR1cm4gcXVldWUuaW5kZXhPZihwKSA9PT0gLTE7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2VuZXJhdGVSZXF1ZXN0V2l0aFByZWZlcnJlZEtleVNlc3Npb24gPSBmdW5jdGlvbiBnZW5lcmF0ZVJlcXVlc3RXaXRoUHJlZmVycmVkS2V5U2Vzc2lvbihjb250ZXh0LCBpbml0RGF0YVR5cGUsIGluaXREYXRhLCByZWFzb24pIHtcbiAgICAgIHZhciBfdGhpcyRjb25maWckZHJtU3lzdGUsXG4gICAgICAgIF90aGlzJGNvbmZpZyRkcm1TeXN0ZTIsXG4gICAgICAgIF90aGlzMCA9IHRoaXM7XG4gICAgICB2YXIgZ2VuZXJhdGVSZXF1ZXN0RmlsdGVyID0gKF90aGlzJGNvbmZpZyRkcm1TeXN0ZSA9IHRoaXMuY29uZmlnLmRybVN5c3RlbXMpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoaXMkY29uZmlnJGRybVN5c3RlMiA9IF90aGlzJGNvbmZpZyRkcm1TeXN0ZVtjb250ZXh0LmtleVN5c3RlbV0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjb25maWckZHJtU3lzdGUyLmdlbmVyYXRlUmVxdWVzdDtcbiAgICAgIGlmIChnZW5lcmF0ZVJlcXVlc3RGaWx0ZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgbWFwcGVkSW5pdERhdGEgPSBnZW5lcmF0ZVJlcXVlc3RGaWx0ZXIuY2FsbCh0aGlzLmhscywgaW5pdERhdGFUeXBlLCBpbml0RGF0YSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKCFtYXBwZWRJbml0RGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlc3BvbnNlIGZyb20gY29uZmlndXJlZCBnZW5lcmF0ZVJlcXVlc3QgZmlsdGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGluaXREYXRhVHlwZSA9IG1hcHBlZEluaXREYXRhLmluaXREYXRhVHlwZTtcbiAgICAgICAgICBpbml0RGF0YSA9IG1hcHBlZEluaXREYXRhLmluaXREYXRhID8gbWFwcGVkSW5pdERhdGEuaW5pdERhdGEgOiBudWxsO1xuICAgICAgICAgIGNvbnRleHQuZGVjcnlwdGRhdGEucHNzaCA9IGluaXREYXRhID8gbmV3IFVpbnQ4QXJyYXkoaW5pdERhdGEpIDogbnVsbDtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkaGxzO1xuICAgICAgICAgIHRoaXMud2FybihlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICBpZiAoKF90aGlzJGhscyA9IHRoaXMuaGxzKSAhPSBudWxsICYmIF90aGlzJGhscy5jb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGluaXREYXRhID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMubG9nKFwiU2tpcHBpbmcga2V5LXNlc3Npb24gcmVxdWVzdCBmb3IgXFxcIlwiICsgcmVhc29uICsgXCJcXFwiIChubyBpbml0RGF0YSlcIik7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29udGV4dCk7XG4gICAgICB9XG4gICAgICB2YXIga2V5SWQgPSB0aGlzLmdldEtleUlkU3RyaW5nKGNvbnRleHQuZGVjcnlwdGRhdGEpO1xuICAgICAgdGhpcy5sb2coXCJHZW5lcmF0aW5nIGtleS1zZXNzaW9uIHJlcXVlc3QgZm9yIFxcXCJcIiArIHJlYXNvbiArIFwiXFxcIjogXCIgKyBrZXlJZCArIFwiIChpbml0IGRhdGEgdHlwZTogXCIgKyBpbml0RGF0YVR5cGUgKyBcIiBsZW5ndGg6IFwiICsgKGluaXREYXRhID8gaW5pdERhdGEuYnl0ZUxlbmd0aCA6IG51bGwpICsgXCIpXCIpO1xuICAgICAgdmFyIGxpY2Vuc2VTdGF0dXMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICB2YXIgb25tZXNzYWdlID0gY29udGV4dC5fb25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBrZXlTZXNzaW9uID0gY29udGV4dC5tZWRpYUtleXNTZXNzaW9uO1xuICAgICAgICBpZiAoIWtleVNlc3Npb24pIHtcbiAgICAgICAgICBsaWNlbnNlU3RhdHVzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdpbnZhbGlkIHN0YXRlJykpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWVzc2FnZVR5cGUgPSBldmVudC5tZXNzYWdlVHlwZSxcbiAgICAgICAgICBtZXNzYWdlID0gZXZlbnQubWVzc2FnZTtcbiAgICAgICAgX3RoaXMwLmxvZyhcIlxcXCJcIiArIG1lc3NhZ2VUeXBlICsgXCJcXFwiIG1lc3NhZ2UgZXZlbnQgZm9yIHNlc3Npb24gXFxcIlwiICsga2V5U2Vzc2lvbi5zZXNzaW9uSWQgKyBcIlxcXCIgbWVzc2FnZSBzaXplOiBcIiArIG1lc3NhZ2UuYnl0ZUxlbmd0aCk7XG4gICAgICAgIGlmIChtZXNzYWdlVHlwZSA9PT0gJ2xpY2Vuc2UtcmVxdWVzdCcgfHwgbWVzc2FnZVR5cGUgPT09ICdsaWNlbnNlLXJlbmV3YWwnKSB7XG4gICAgICAgICAgX3RoaXMwLnJlbmV3TGljZW5zZShjb250ZXh0LCBtZXNzYWdlKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChsaWNlbnNlU3RhdHVzLmV2ZW50TmFtZXMoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbGljZW5zZVN0YXR1cy5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF90aGlzMC5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZVR5cGUgPT09ICdsaWNlbnNlLXJlbGVhc2UnKSB7XG4gICAgICAgICAgaWYgKGNvbnRleHQua2V5U3lzdGVtID09PSBLZXlTeXN0ZW1zLkZBSVJQTEFZKSB7XG4gICAgICAgICAgICBfdGhpczAudXBkYXRlS2V5U2Vzc2lvbihjb250ZXh0LCBzdHJUb1V0ZjhhcnJheSgnYWNrbm93bGVkZ2VkJykpO1xuICAgICAgICAgICAgX3RoaXMwLnJlbW92ZVNlc3Npb24oY29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMC53YXJuKFwidW5oYW5kbGVkIG1lZGlhIGtleSBtZXNzYWdlIHR5cGUgXFxcIlwiICsgbWVzc2FnZVR5cGUgKyBcIlxcXCJcIik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgb25rZXlzdGF0dXNlc2NoYW5nZSA9IGNvbnRleHQuX29ua2V5c3RhdHVzZXNjaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGtleVNlc3Npb24gPSBjb250ZXh0Lm1lZGlhS2V5c1Nlc3Npb247XG4gICAgICAgIGlmICgha2V5U2Vzc2lvbikge1xuICAgICAgICAgIGxpY2Vuc2VTdGF0dXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ2ludmFsaWQgc3RhdGUnKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzMC5vbktleVN0YXR1c0NoYW5nZShjb250ZXh0KTtcbiAgICAgICAgdmFyIGtleVN0YXR1cyA9IGNvbnRleHQua2V5U3RhdHVzO1xuICAgICAgICBsaWNlbnNlU3RhdHVzLmVtaXQoJ2tleVN0YXR1cycsIGtleVN0YXR1cyk7XG4gICAgICAgIGlmIChrZXlTdGF0dXMgPT09ICdleHBpcmVkJykge1xuICAgICAgICAgIF90aGlzMC53YXJuKGNvbnRleHQua2V5U3lzdGVtICsgXCIgZXhwaXJlZCBmb3Iga2V5IFwiICsga2V5SWQpO1xuICAgICAgICAgIF90aGlzMC5yZW5ld0tleVNlc3Npb24oY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBhZGRFdmVudExpc3RlbmVyKGNvbnRleHQubWVkaWFLZXlzU2Vzc2lvbiwgJ21lc3NhZ2UnLCBvbm1lc3NhZ2UpO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihjb250ZXh0Lm1lZGlhS2V5c1Nlc3Npb24sICdrZXlzdGF0dXNlc2NoYW5nZScsIG9ua2V5c3RhdHVzZXNjaGFuZ2UpO1xuICAgICAgdmFyIGtleVVzYWJsZVByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGxpY2Vuc2VTdGF0dXMub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICAgICAgbGljZW5zZVN0YXR1cy5vbigna2V5U3RhdHVzJywgZnVuY3Rpb24gKGtleVN0YXR1cykge1xuICAgICAgICAgIGlmIChrZXlTdGF0dXMuc3RhcnRzV2l0aCgndXNhYmxlJykpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGtleVN0YXR1cyA9PT0gJ291dHB1dC1yZXN0cmljdGVkJykge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFTUVLZXlFcnJvcih7XG4gICAgICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuS0VZX1NZU1RFTV9FUlJPUixcbiAgICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLktFWV9TWVNURU1fU1RBVFVTX09VVFBVVF9SRVNUUklDVEVELFxuICAgICAgICAgICAgICBmYXRhbDogZmFsc2VcbiAgICAgICAgICAgIH0sICdIRENQIGxldmVsIG91dHB1dCByZXN0cmljdGVkJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoa2V5U3RhdHVzID09PSAnaW50ZXJuYWwtZXJyb3InKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVNRUtleUVycm9yKHtcbiAgICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5LRVlfU1lTVEVNX0VSUk9SLFxuICAgICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuS0VZX1NZU1RFTV9TVEFUVVNfSU5URVJOQUxfRVJST1IsXG4gICAgICAgICAgICAgIGZhdGFsOiB0cnVlXG4gICAgICAgICAgICB9LCBcImtleSBzdGF0dXMgY2hhbmdlZCB0byBcXFwiXCIgKyBrZXlTdGF0dXMgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoa2V5U3RhdHVzID09PSAnZXhwaXJlZCcpIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2tleSBleHBpcmVkIHdoaWxlIGdlbmVyYXRpbmcgcmVxdWVzdCcpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMwLndhcm4oXCJ1bmhhbmRsZWQga2V5IHN0YXR1cyBjaGFuZ2UgXFxcIlwiICsga2V5U3RhdHVzICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb250ZXh0Lm1lZGlhS2V5c1Nlc3Npb24uZ2VuZXJhdGVSZXF1ZXN0KGluaXREYXRhVHlwZSwgaW5pdERhdGEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2NvbnRleHQkbWVkaWFLZXlzU2VzO1xuICAgICAgICBfdGhpczAubG9nKFwiUmVxdWVzdCBnZW5lcmF0ZWQgZm9yIGtleS1zZXNzaW9uIFxcXCJcIiArICgoX2NvbnRleHQkbWVkaWFLZXlzU2VzID0gY29udGV4dC5tZWRpYUtleXNTZXNzaW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbnRleHQkbWVkaWFLZXlzU2VzLnNlc3Npb25JZCkgKyBcIlxcXCIga2V5SWQ6IFwiICsga2V5SWQpO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFTUVLZXlFcnJvcih7XG4gICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5LRVlfU1lTVEVNX0VSUk9SLFxuICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5LRVlfU1lTVEVNX05PX1NFU1NJT04sXG4gICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgIGZhdGFsOiBmYWxzZVxuICAgICAgICB9LCBcIkVycm9yIGdlbmVyYXRpbmcga2V5LXNlc3Npb24gcmVxdWVzdDogXCIgKyBlcnJvcik7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGtleVVzYWJsZVByb21pc2U7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgbGljZW5zZVN0YXR1cy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgX3RoaXMwLnJlbW92ZVNlc3Npb24oY29udGV4dCk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxpY2Vuc2VTdGF0dXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25LZXlTdGF0dXNDaGFuZ2UgPSBmdW5jdGlvbiBvbktleVN0YXR1c0NoYW5nZShtZWRpYUtleVNlc3Npb25Db250ZXh0KSB7XG4gICAgICB2YXIgX3RoaXMxID0gdGhpcztcbiAgICAgIG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQubWVkaWFLZXlzU2Vzc2lvbi5rZXlTdGF0dXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0dXMsIGtleUlkKSB7XG4gICAgICAgIC8vIGtleVN0YXR1c2VzLmZvckVhY2ggaXMgbm90IHN0YW5kYXJkIEFQSSBzbyB0aGUgY2FsbGJhY2sgdmFsdWUgbG9va3Mgd2VpcmQgb24geGJveG9uZVxuICAgICAgICAvLyB4Ym94b25lIGNhbGxiYWNrKGtleUlkLCBzdGF0dXMpIHNvIHdlIG5lZWQgdG8gZXhjaGFuZ2UgdGhlbVxuICAgICAgICBpZiAodHlwZW9mIGtleUlkID09PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc3RhdHVzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHZhciB0ZW1wID0ga2V5SWQ7XG4gICAgICAgICAga2V5SWQgPSBzdGF0dXM7XG4gICAgICAgICAgc3RhdHVzID0gdGVtcDtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczEubG9nKFwia2V5IHN0YXR1cyBjaGFuZ2UgXFxcIlwiICsgc3RhdHVzICsgXCJcXFwiIGZvciBrZXlTdGF0dXNlcyBrZXlJZDogXCIgKyBIZXguaGV4RHVtcCgnYnVmZmVyJyBpbiBrZXlJZCA/IG5ldyBVaW50OEFycmF5KGtleUlkLmJ1ZmZlciwga2V5SWQuYnl0ZU9mZnNldCwga2V5SWQuYnl0ZUxlbmd0aCkgOiBuZXcgVWludDhBcnJheShrZXlJZCkpICsgXCIgc2Vzc2lvbiBrZXlJZDogXCIgKyBIZXguaGV4RHVtcChuZXcgVWludDhBcnJheShtZWRpYUtleVNlc3Npb25Db250ZXh0LmRlY3J5cHRkYXRhLmtleUlkIHx8IFtdKSkgKyBcIiB1cmk6IFwiICsgbWVkaWFLZXlTZXNzaW9uQ29udGV4dC5kZWNyeXB0ZGF0YS51cmkpO1xuICAgICAgICBtZWRpYUtleVNlc3Npb25Db250ZXh0LmtleVN0YXR1cyA9IHN0YXR1cztcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLmZldGNoU2VydmVyQ2VydGlmaWNhdGUgPSBmdW5jdGlvbiBmZXRjaFNlcnZlckNlcnRpZmljYXRlKGtleVN5c3RlbSkge1xuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgICAgdmFyIExvYWRlciA9IGNvbmZpZy5sb2FkZXI7XG4gICAgICB2YXIgY2VydExvYWRlciA9IG5ldyBMb2FkZXIoY29uZmlnKTtcbiAgICAgIHZhciB1cmwgPSB0aGlzLmdldFNlcnZlckNlcnRpZmljYXRlVXJsKGtleVN5c3RlbSk7XG4gICAgICBpZiAoIXVybCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmxvZyhcIkZldGNoaW5nIHNlcnZlciBjZXJ0aWZpY2F0ZSBmb3IgXFxcIlwiICsga2V5U3lzdGVtICsgXCJcXFwiXCIpO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIGxvYWRlckNvbnRleHQgPSB7XG4gICAgICAgICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInLFxuICAgICAgICAgIHVybDogdXJsXG4gICAgICAgIH07XG4gICAgICAgIHZhciBsb2FkUG9saWN5ID0gY29uZmlnLmNlcnRMb2FkUG9saWN5LmRlZmF1bHQ7XG4gICAgICAgIHZhciBsb2FkZXJDb25maWcgPSB7XG4gICAgICAgICAgbG9hZFBvbGljeTogbG9hZFBvbGljeSxcbiAgICAgICAgICB0aW1lb3V0OiBsb2FkUG9saWN5Lm1heExvYWRUaW1lTXMsXG4gICAgICAgICAgbWF4UmV0cnk6IDAsXG4gICAgICAgICAgcmV0cnlEZWxheTogMCxcbiAgICAgICAgICBtYXhSZXRyeURlbGF5OiAwXG4gICAgICAgIH07XG4gICAgICAgIHZhciBsb2FkZXJDYWxsYmFja3MgPSB7XG4gICAgICAgICAgb25TdWNjZXNzOiBmdW5jdGlvbiBvblN1Y2Nlc3MocmVzcG9uc2UsIHN0YXRzLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscykge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IocmVzcG9uc2UsIGNvbnRleCwgbmV0d29ya0RldGFpbHMsIHN0YXRzKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVNRUtleUVycm9yKHtcbiAgICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5LRVlfU1lTVEVNX0VSUk9SLFxuICAgICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuS0VZX1NZU1RFTV9TRVJWRVJfQ0VSVElGSUNBVEVfUkVRVUVTVF9GQUlMRUQsXG4gICAgICAgICAgICAgIGZhdGFsOiB0cnVlLFxuICAgICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHMsXG4gICAgICAgICAgICAgIHJlc3BvbnNlOiBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgICAgICAgdXJsOiBsb2FkZXJDb250ZXh0LnVybCxcbiAgICAgICAgICAgICAgICBkYXRhOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgfSwgcmVzcG9uc2UpXG4gICAgICAgICAgICB9LCBcIlxcXCJcIiArIGtleVN5c3RlbSArIFwiXFxcIiBjZXJ0aWZpY2F0ZSByZXF1ZXN0IGZhaWxlZCAoXCIgKyB1cmwgKyBcIikuIFN0YXR1czogXCIgKyByZXNwb25zZS5jb2RlICsgXCIgKFwiICsgcmVzcG9uc2UudGV4dCArIFwiKVwiKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvblRpbWVvdXQ6IGZ1bmN0aW9uIG9uVGltZW91dChzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMpIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRU1FS2V5RXJyb3Ioe1xuICAgICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLktFWV9TWVNURU1fRVJST1IsXG4gICAgICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5LRVlfU1lTVEVNX1NFUlZFUl9DRVJUSUZJQ0FURV9SRVFVRVNUX0ZBSUxFRCxcbiAgICAgICAgICAgICAgZmF0YWw6IHRydWUsXG4gICAgICAgICAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlscyxcbiAgICAgICAgICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgICAgICAgICB1cmw6IGxvYWRlckNvbnRleHQudXJsLFxuICAgICAgICAgICAgICAgIGRhdGE6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBcIlxcXCJcIiArIGtleVN5c3RlbSArIFwiXFxcIiBjZXJ0aWZpY2F0ZSByZXF1ZXN0IHRpbWVkIG91dCAoXCIgKyB1cmwgKyBcIilcIikpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25BYm9ydDogZnVuY3Rpb24gb25BYm9ydChzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMpIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2Fib3J0ZWQnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjZXJ0TG9hZGVyLmxvYWQobG9hZGVyQ29udGV4dCwgbG9hZGVyQ29uZmlnLCBsb2FkZXJDYWxsYmFja3MpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8uc2V0TWVkaWFLZXlzU2VydmVyQ2VydGlmaWNhdGUgPSBmdW5jdGlvbiBzZXRNZWRpYUtleXNTZXJ2ZXJDZXJ0aWZpY2F0ZShtZWRpYUtleXMsIGtleVN5c3RlbSwgY2VydCkge1xuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbWVkaWFLZXlzLnNldFNlcnZlckNlcnRpZmljYXRlKGNlcnQpLnRoZW4oZnVuY3Rpb24gKHN1Y2Nlc3MpIHtcbiAgICAgICAgICBfdGhpczEwLmxvZyhcInNldFNlcnZlckNlcnRpZmljYXRlIFwiICsgKHN1Y2Nlc3MgPyAnc3VjY2VzcycgOiAnbm90IHN1cHBvcnRlZCBieSBDRE0nKSArIFwiIChcIiArIChjZXJ0ID09IG51bGwgPyB2b2lkIDAgOiBjZXJ0LmJ5dGVMZW5ndGgpICsgXCIpIG9uIFxcXCJcIiArIGtleVN5c3RlbSArIFwiXFxcIlwiKTtcbiAgICAgICAgICByZXNvbHZlKG1lZGlhS2V5cyk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChuZXcgRU1FS2V5RXJyb3Ioe1xuICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5LRVlfU1lTVEVNX0VSUk9SLFxuICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLktFWV9TWVNURU1fU0VSVkVSX0NFUlRJRklDQVRFX1VQREFURV9GQUlMRUQsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgICAgIH0sIGVycm9yLm1lc3NhZ2UpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5yZW5ld0xpY2Vuc2UgPSBmdW5jdGlvbiByZW5ld0xpY2Vuc2UoY29udGV4dCwga2V5TWVzc2FnZSkge1xuICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdExpY2Vuc2UoY29udGV4dCwgbmV3IFVpbnQ4QXJyYXkoa2V5TWVzc2FnZSkpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMTEudXBkYXRlS2V5U2Vzc2lvbihjb250ZXh0LCBuZXcgVWludDhBcnJheShkYXRhKSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVNRUtleUVycm9yKHtcbiAgICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuS0VZX1NZU1RFTV9FUlJPUixcbiAgICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5LRVlfU1lTVEVNX1NFU1NJT05fVVBEQVRFX0ZBSUxFRCxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIGZhdGFsOiB0cnVlXG4gICAgICAgICAgfSwgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8udW5wYWNrUGxheVJlYWR5S2V5TWVzc2FnZSA9IGZ1bmN0aW9uIHVucGFja1BsYXlSZWFkeUtleU1lc3NhZ2UoeGhyLCBsaWNlbnNlQ2hhbGxlbmdlKSB7XG4gICAgICAvLyBPbiBFZGdlLCB0aGUgcmF3IGxpY2Vuc2UgbWVzc2FnZSBpcyBVVEYtMTYtZW5jb2RlZCBYTUwuICBXZSBuZWVkXG4gICAgICAvLyB0byB1bnBhY2sgdGhlIENoYWxsZW5nZSBlbGVtZW50IChiYXNlNjQtZW5jb2RlZCBzdHJpbmcgY29udGFpbmluZyB0aGVcbiAgICAgIC8vIGFjdHVhbCBsaWNlbnNlIHJlcXVlc3QpIGFuZCBhbnkgSHR0cEhlYWRlciBlbGVtZW50cyAoc2VudCBhcyByZXF1ZXN0XG4gICAgICAvLyBoZWFkZXJzKS5cbiAgICAgIC8vIEZvciBQbGF5UmVhZHkgQ0RNcywgd2UgbmVlZCB0byBkaWcgdGhlIENoYWxsZW5nZSBvdXQgb2YgdGhlIFhNTC5cbiAgICAgIHZhciB4bWxTdHJpbmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50MTZBcnJheShsaWNlbnNlQ2hhbGxlbmdlLmJ1ZmZlcikpO1xuICAgICAgaWYgKCF4bWxTdHJpbmcuaW5jbHVkZXMoJ1BsYXlSZWFkeUtleU1lc3NhZ2UnKSkge1xuICAgICAgICAvLyBUaGlzIGRvZXMgbm90IGFwcGVhciB0byBiZSBhIHdyYXBwZWQgbWVzc2FnZSBhcyBvbiBFZGdlLiAgU29tZVxuICAgICAgICAvLyBjbGllbnRzIGRvIG5vdCBuZWVkIHRoaXMgdW53cmFwcGluZywgc28gd2Ugd2lsbCBhc3N1bWUgdGhpcyBpcyBvbmUgb2ZcbiAgICAgICAgLy8gdGhlbS4gIE5vdGUgdGhhdCBcInhtbFwiIGF0IHRoaXMgcG9pbnQgcHJvYmFibHkgbG9va3MgbGlrZSByYW5kb21cbiAgICAgICAgLy8gZ2FyYmFnZSwgc2luY2Ugd2UgaW50ZXJwcmV0ZWQgVVRGLTggYXMgVVRGLTE2LlxuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQveG1sOyBjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICAgIHJldHVybiBsaWNlbnNlQ2hhbGxlbmdlO1xuICAgICAgfVxuICAgICAgdmFyIGtleU1lc3NhZ2VYbWwgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHhtbFN0cmluZywgJ2FwcGxpY2F0aW9uL3htbCcpO1xuICAgICAgLy8gU2V0IHJlcXVlc3QgaGVhZGVycy5cbiAgICAgIHZhciBoZWFkZXJzID0ga2V5TWVzc2FnZVhtbC5xdWVyeVNlbGVjdG9yQWxsKCdIdHRwSGVhZGVyJyk7XG4gICAgICBpZiAoaGVhZGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBoZWFkZXI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBoZWFkZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgdmFyIF9oZWFkZXIkcXVlcnlTZWxlY3RvciwgX2hlYWRlciRxdWVyeVNlbGVjdG9yMjtcbiAgICAgICAgICBoZWFkZXIgPSBoZWFkZXJzW2ldO1xuICAgICAgICAgIHZhciBuYW1lID0gKF9oZWFkZXIkcXVlcnlTZWxlY3RvciA9IGhlYWRlci5xdWVyeVNlbGVjdG9yKCduYW1lJykpID09IG51bGwgPyB2b2lkIDAgOiBfaGVhZGVyJHF1ZXJ5U2VsZWN0b3IudGV4dENvbnRlbnQ7XG4gICAgICAgICAgdmFyIHZhbHVlID0gKF9oZWFkZXIkcXVlcnlTZWxlY3RvcjIgPSBoZWFkZXIucXVlcnlTZWxlY3RvcigndmFsdWUnKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9oZWFkZXIkcXVlcnlTZWxlY3RvcjIudGV4dENvbnRlbnQ7XG4gICAgICAgICAgaWYgKG5hbWUgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGFsbGVuZ2VFbGVtZW50ID0ga2V5TWVzc2FnZVhtbC5xdWVyeVNlbGVjdG9yKCdDaGFsbGVuZ2UnKTtcbiAgICAgIHZhciBjaGFsbGVuZ2VUZXh0ID0gY2hhbGxlbmdlRWxlbWVudCA9PSBudWxsID8gdm9pZCAwIDogY2hhbGxlbmdlRWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgIGlmICghY2hhbGxlbmdlVGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCA8Q2hhbGxlbmdlPiBpbiBrZXkgbWVzc2FnZVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJUb1V0ZjhhcnJheShhdG9iKGNoYWxsZW5nZVRleHQpKTtcbiAgICB9O1xuICAgIF9wcm90by5zZXR1cExpY2Vuc2VYSFIgPSBmdW5jdGlvbiBzZXR1cExpY2Vuc2VYSFIoeGhyLCB1cmwsIGtleXNMaXN0SXRlbSwgbGljZW5zZUNoYWxsZW5nZSkge1xuICAgICAgdmFyIF90aGlzMTIgPSB0aGlzO1xuICAgICAgdmFyIGxpY2Vuc2VYaHJTZXR1cCA9IHRoaXMuY29uZmlnLmxpY2Vuc2VYaHJTZXR1cDtcbiAgICAgIGlmICghbGljZW5zZVhoclNldHVwKSB7XG4gICAgICAgIHhoci5vcGVuKCdQT1NUJywgdXJsLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgeGhyOiB4aHIsXG4gICAgICAgICAgbGljZW5zZUNoYWxsZW5nZTogbGljZW5zZUNoYWxsZW5nZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFrZXlzTGlzdEl0ZW0uZGVjcnlwdGRhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0tleSByZW1vdmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpY2Vuc2VYaHJTZXR1cC5jYWxsKF90aGlzMTIuaGxzLCB4aHIsIHVybCwga2V5c0xpc3RJdGVtLCBsaWNlbnNlQ2hhbGxlbmdlKTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoIWtleXNMaXN0SXRlbS5kZWNyeXB0ZGF0YSkge1xuICAgICAgICAgIC8vIEtleSBzZXNzaW9uIHJlbW92ZWQuIENhbmNlbCBsaWNlbnNlIHJlcXVlc3QuXG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbGV0J3MgdHJ5IHRvIG9wZW4gYmVmb3JlIHJ1bm5pbmcgc2V0dXBcbiAgICAgICAgeGhyLm9wZW4oJ1BPU1QnLCB1cmwsIHRydWUpO1xuICAgICAgICByZXR1cm4gbGljZW5zZVhoclNldHVwLmNhbGwoX3RoaXMxMi5obHMsIHhociwgdXJsLCBrZXlzTGlzdEl0ZW0sIGxpY2Vuc2VDaGFsbGVuZ2UpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAobGljZW5zZVhoclNldHVwUmVzdWx0KSB7XG4gICAgICAgIC8vIGlmIGxpY2Vuc2VYaHJTZXR1cCBkaWQgbm90IHlldCBjYWxsIG9wZW4sIGxldCdzIGRvIGl0IG5vd1xuICAgICAgICBpZiAoIXhoci5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgeGhyLm9wZW4oJ1BPU1QnLCB1cmwsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmaW5hbExpY2Vuc2VDaGFsbGVuZ2UgPSBsaWNlbnNlWGhyU2V0dXBSZXN1bHQgPyBsaWNlbnNlWGhyU2V0dXBSZXN1bHQgOiBsaWNlbnNlQ2hhbGxlbmdlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHhocjogeGhyLFxuICAgICAgICAgIGxpY2Vuc2VDaGFsbGVuZ2U6IGZpbmFsTGljZW5zZUNoYWxsZW5nZVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVxdWVzdExpY2Vuc2UgPSBmdW5jdGlvbiByZXF1ZXN0TGljZW5zZShrZXlTZXNzaW9uQ29udGV4dCwgbGljZW5zZUNoYWxsZW5nZSkge1xuICAgICAgdmFyIF90aGlzMTMgPSB0aGlzO1xuICAgICAgdmFyIGtleUxvYWRQb2xpY3kgPSB0aGlzLmNvbmZpZy5rZXlMb2FkUG9saWN5LmRlZmF1bHQ7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgdXJsID0gX3RoaXMxMy5nZXRMaWNlbnNlU2VydmVyVXJsT3JUaHJvdyhrZXlTZXNzaW9uQ29udGV4dC5rZXlTeXN0ZW0pO1xuICAgICAgICBfdGhpczEzLmxvZyhcIlNlbmRpbmcgbGljZW5zZSByZXF1ZXN0IHRvIFVSTDogXCIgKyB1cmwpO1xuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghX3RoaXMxMy5obHMgfHwgIWtleVNlc3Npb25Db250ZXh0Lm1lZGlhS2V5c1Nlc3Npb24pIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdpbnZhbGlkIHN0YXRlJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgX3RoaXMxMy5fcmVxdWVzdExpY2Vuc2VGYWlsdXJlQ291bnQgPSAwO1xuICAgICAgICAgICAgICB2YXIgZGF0YSA9IHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgX3RoaXMxMy5sb2coXCJMaWNlbnNlIHJlY2VpdmVkIFwiICsgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IGRhdGEuYnl0ZUxlbmd0aCA6IGRhdGEpKTtcbiAgICAgICAgICAgICAgdmFyIGxpY2Vuc2VSZXNwb25zZUNhbGxiYWNrID0gX3RoaXMxMy5jb25maWcubGljZW5zZVJlc3BvbnNlQ2FsbGJhY2s7XG4gICAgICAgICAgICAgIGlmIChsaWNlbnNlUmVzcG9uc2VDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBkYXRhID0gbGljZW5zZVJlc3BvbnNlQ2FsbGJhY2suY2FsbChfdGhpczEzLmhscywgeGhyLCB1cmwsIGtleVNlc3Npb25Db250ZXh0KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgX3RoaXMxMy5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgcmV0cnlDb25maWcgPSBrZXlMb2FkUG9saWN5LmVycm9yUmV0cnk7XG4gICAgICAgICAgICAgIHZhciBtYXhOdW1SZXRyeSA9IHJldHJ5Q29uZmlnID8gcmV0cnlDb25maWcubWF4TnVtUmV0cnkgOiAwO1xuICAgICAgICAgICAgICBfdGhpczEzLl9yZXF1ZXN0TGljZW5zZUZhaWx1cmVDb3VudCsrO1xuICAgICAgICAgICAgICBpZiAoX3RoaXMxMy5fcmVxdWVzdExpY2Vuc2VGYWlsdXJlQ291bnQgPiBtYXhOdW1SZXRyeSB8fCB4aHIuc3RhdHVzID49IDQwMCAmJiB4aHIuc3RhdHVzIDwgNTAwKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFTUVLZXlFcnJvcih7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLktFWV9TWVNURU1fRVJST1IsXG4gICAgICAgICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuS0VZX1NZU1RFTV9MSUNFTlNFX1JFUVVFU1RfRkFJTEVELFxuICAgICAgICAgICAgICAgICAgZmF0YWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogeGhyLFxuICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogeGhyLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogeGhyLnN0YXR1c1RleHRcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBcIkxpY2Vuc2UgUmVxdWVzdCBYSFIgZmFpbGVkIChcIiArIHVybCArIFwiKS4gU3RhdHVzOiBcIiArIHhoci5zdGF0dXMgKyBcIiAoXCIgKyB4aHIuc3RhdHVzVGV4dCArIFwiKVwiKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dGVtcHRzTGVmdCA9IG1heE51bVJldHJ5IC0gX3RoaXMxMy5fcmVxdWVzdExpY2Vuc2VGYWlsdXJlQ291bnQgKyAxO1xuICAgICAgICAgICAgICAgIF90aGlzMTMud2FybihcIlJldHJ5aW5nIGxpY2Vuc2UgcmVxdWVzdCwgXCIgKyBhdHRlbXB0c0xlZnQgKyBcIiBhdHRlbXB0cyBsZWZ0XCIpO1xuICAgICAgICAgICAgICAgIF90aGlzMTMucmVxdWVzdExpY2Vuc2Uoa2V5U2Vzc2lvbkNvbnRleHQsIGxpY2Vuc2VDaGFsbGVuZ2UpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGtleVNlc3Npb25Db250ZXh0LmxpY2Vuc2VYaHIgJiYga2V5U2Vzc2lvbkNvbnRleHQubGljZW5zZVhoci5yZWFkeVN0YXRlICE9PSBYTUxIdHRwUmVxdWVzdC5ET05FKSB7XG4gICAgICAgICAga2V5U2Vzc2lvbkNvbnRleHQubGljZW5zZVhoci5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICAgIGtleVNlc3Npb25Db250ZXh0LmxpY2Vuc2VYaHIgPSB4aHI7XG4gICAgICAgIF90aGlzMTMuc2V0dXBMaWNlbnNlWEhSKHhociwgdXJsLCBrZXlTZXNzaW9uQ29udGV4dCwgbGljZW5zZUNoYWxsZW5nZSkudGhlbihmdW5jdGlvbiAoX3JlZjgpIHtcbiAgICAgICAgICB2YXIgeGhyID0gX3JlZjgueGhyLFxuICAgICAgICAgICAgbGljZW5zZUNoYWxsZW5nZSA9IF9yZWY4LmxpY2Vuc2VDaGFsbGVuZ2U7XG4gICAgICAgICAgaWYgKGtleVNlc3Npb25Db250ZXh0LmtleVN5c3RlbSA9PSBLZXlTeXN0ZW1zLlBMQVlSRUFEWSkge1xuICAgICAgICAgICAgbGljZW5zZUNoYWxsZW5nZSA9IF90aGlzMTMudW5wYWNrUGxheVJlYWR5S2V5TWVzc2FnZSh4aHIsIGxpY2Vuc2VDaGFsbGVuZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB4aHIuc2VuZChsaWNlbnNlQ2hhbGxlbmdlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5vbkRlc3Ryb3lpbmcgPSBmdW5jdGlvbiBvbkRlc3Ryb3lpbmcoKSB7XG4gICAgICB0aGlzLnVucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMuX2NsZWFyKCk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYUF0dGFjaGVkID0gZnVuY3Rpb24gb25NZWRpYUF0dGFjaGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICBpZiAoIXRoaXMuY29uZmlnLmVtZUVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG1lZGlhID0gZGF0YS5tZWRpYTtcblxuICAgICAgLy8ga2VlcCByZWZlcmVuY2Ugb2YgbWVkaWFcbiAgICAgIHRoaXMubWVkaWEgPSBtZWRpYTtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIobWVkaWEsICdlbmNyeXB0ZWQnLCB0aGlzLm9uTWVkaWFFbmNyeXB0ZWQpO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihtZWRpYSwgJ3dhaXRpbmdmb3JrZXknLCB0aGlzLm9uV2FpdGluZ0ZvcktleSk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYURldGFjaGVkID0gZnVuY3Rpb24gb25NZWRpYURldGFjaGVkKCkge1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKG1lZGlhLCAnZW5jcnlwdGVkJywgdGhpcy5vbk1lZGlhRW5jcnlwdGVkKTtcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihtZWRpYSwgJ3dhaXRpbmdmb3JrZXknLCB0aGlzLm9uV2FpdGluZ0ZvcktleSk7XG4gICAgICAgIHRoaXMubWVkaWEgPSBudWxsO1xuICAgICAgICB0aGlzLm1lZGlhS2V5cyA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uX2NsZWFyID0gZnVuY3Rpb24gX2NsZWFyKCkge1xuICAgICAgdmFyIF90aGlzMTQgPSB0aGlzLFxuICAgICAgICBfbWVkaWEkc2V0TWVkaWFLZXlzO1xuICAgICAgdGhpcy5fcmVxdWVzdExpY2Vuc2VGYWlsdXJlQ291bnQgPSAwO1xuICAgICAgdGhpcy5rZXlJZFRvS2V5U2Vzc2lvblByb21pc2UgPSB7fTtcbiAgICAgIGlmICghdGhpcy5tZWRpYUtleXMgJiYgIXRoaXMubWVkaWFLZXlTZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIHZhciBtZWRpYUtleXNMaXN0ID0gdGhpcy5tZWRpYUtleVNlc3Npb25zLnNsaWNlKCk7XG4gICAgICB0aGlzLm1lZGlhS2V5U2Vzc2lvbnMgPSBbXTtcbiAgICAgIHRoaXMubWVkaWFLZXlzID0gbnVsbDtcbiAgICAgIExldmVsS2V5LmNsZWFyS2V5VXJpVG9LZXlJZE1hcCgpO1xuXG4gICAgICAvLyBDbG9zZSBhbGwgc2Vzc2lvbnMgYW5kIHJlbW92ZSBtZWRpYSBrZXlzIGZyb20gdGhlIHZpZGVvIGVsZW1lbnQuXG4gICAgICB2YXIga2V5U2Vzc2lvbkNvdW50ID0gbWVkaWFLZXlzTGlzdC5sZW5ndGg7XG4gICAgICBFTUVDb250cm9sbGVyLkNETUNsZWFudXBQcm9taXNlID0gUHJvbWlzZS5hbGwobWVkaWFLZXlzTGlzdC5tYXAoZnVuY3Rpb24gKG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMTQucmVtb3ZlU2Vzc2lvbihtZWRpYUtleVNlc3Npb25Db250ZXh0KTtcbiAgICAgIH0pLmNvbmNhdChtZWRpYSA9PSBudWxsID8gdm9pZCAwIDogKF9tZWRpYSRzZXRNZWRpYUtleXMgPSBtZWRpYS5zZXRNZWRpYUtleXMobnVsbCkpID09IG51bGwgPyB2b2lkIDAgOiBfbWVkaWEkc2V0TWVkaWFLZXlzLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB2YXIgX3RoaXMxNCRobHM7XG4gICAgICAgIF90aGlzMTQubG9nKFwiQ291bGQgbm90IGNsZWFyIG1lZGlhIGtleXM6IFwiICsgZXJyb3IpO1xuICAgICAgICAoX3RoaXMxNCRobHMgPSBfdGhpczE0LmhscykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzMTQkaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5PVEhFUl9FUlJPUixcbiAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuS0VZX1NZU1RFTV9ERVNUUk9ZX01FRElBX0tFWVNfRVJST1IsXG4gICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiBuZXcgRXJyb3IoXCJDb3VsZCBub3QgY2xlYXIgbWVkaWEga2V5czogXCIgKyBlcnJvcilcbiAgICAgICAgfSk7XG4gICAgICB9KSkpLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB2YXIgX3RoaXMxNCRobHMyO1xuICAgICAgICBfdGhpczE0LmxvZyhcIkNvdWxkIG5vdCBjbG9zZSBzZXNzaW9ucyBhbmQgY2xlYXIgbWVkaWEga2V5czogXCIgKyBlcnJvcik7XG4gICAgICAgIChfdGhpczE0JGhsczIgPSBfdGhpczE0LmhscykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzMTQkaGxzMi50cmlnZ2VyKEV2ZW50cy5FUlJPUiwge1xuICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuT1RIRVJfRVJST1IsXG4gICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLktFWV9TWVNURU1fREVTVFJPWV9DTE9TRV9TRVNTSU9OX0VSUk9SLFxuICAgICAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjogbmV3IEVycm9yKFwiQ291bGQgbm90IGNsb3NlIHNlc3Npb25zIGFuZCBjbGVhciBtZWRpYSBrZXlzOiBcIiArIGVycm9yKVxuICAgICAgICB9KTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoa2V5U2Vzc2lvbkNvdW50KSB7XG4gICAgICAgICAgX3RoaXMxNC5sb2coJ2ZpbmlzaGVkIGNsb3Npbmcga2V5IHNlc3Npb25zIGFuZCBjbGVhcmluZyBtZWRpYSBrZXlzJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTWFuaWZlc3RMb2FkaW5nID0gZnVuY3Rpb24gb25NYW5pZmVzdExvYWRpbmcoKSB7XG4gICAgICB0aGlzLmtleUZvcm1hdFByb21pc2UgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTWFuaWZlc3RMb2FkZWQgPSBmdW5jdGlvbiBvbk1hbmlmZXN0TG9hZGVkKGV2ZW50LCBfcmVmOSkge1xuICAgICAgdmFyIHNlc3Npb25LZXlzID0gX3JlZjkuc2Vzc2lvbktleXM7XG4gICAgICBpZiAoIXNlc3Npb25LZXlzIHx8ICF0aGlzLmNvbmZpZy5lbWVFbmFibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5rZXlGb3JtYXRQcm9taXNlKSB7XG4gICAgICAgIHZhciBrZXlGb3JtYXRzID0gc2Vzc2lvbktleXMucmVkdWNlKGZ1bmN0aW9uIChmb3JtYXRzLCBzZXNzaW9uS2V5KSB7XG4gICAgICAgICAgaWYgKGZvcm1hdHMuaW5kZXhPZihzZXNzaW9uS2V5LmtleUZvcm1hdCkgPT09IC0xKSB7XG4gICAgICAgICAgICBmb3JtYXRzLnB1c2goc2Vzc2lvbktleS5rZXlGb3JtYXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZm9ybWF0cztcbiAgICAgICAgfSwgW10pO1xuICAgICAgICB0aGlzLmxvZyhcIlNlbGVjdGluZyBrZXktc3lzdGVtIGZyb20gc2Vzc2lvbi1rZXlzIFwiICsga2V5Rm9ybWF0cy5qb2luKCcsICcpKTtcbiAgICAgICAgdGhpcy5rZXlGb3JtYXRQcm9taXNlID0gdGhpcy5nZXRLZXlGb3JtYXRQcm9taXNlKGtleUZvcm1hdHMpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnJlbW92ZVNlc3Npb24gPSBmdW5jdGlvbiByZW1vdmVTZXNzaW9uKG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQpIHtcbiAgICAgIHZhciBfdGhpczE1ID0gdGhpcztcbiAgICAgIHZhciBtZWRpYUtleXNTZXNzaW9uID0gbWVkaWFLZXlTZXNzaW9uQ29udGV4dC5tZWRpYUtleXNTZXNzaW9uLFxuICAgICAgICBsaWNlbnNlWGhyID0gbWVkaWFLZXlTZXNzaW9uQ29udGV4dC5saWNlbnNlWGhyO1xuICAgICAgaWYgKG1lZGlhS2V5c1Nlc3Npb24pIHtcbiAgICAgICAgdGhpcy5sb2coXCJSZW1vdmUgbGljZW5zZXMgYW5kIGtleXMgYW5kIGNsb3NlIHNlc3Npb24gXCIgKyBtZWRpYUtleXNTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgIGlmIChtZWRpYUtleVNlc3Npb25Db250ZXh0Ll9vbm1lc3NhZ2UpIHtcbiAgICAgICAgICBtZWRpYUtleXNTZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBtZWRpYUtleVNlc3Npb25Db250ZXh0Ll9vbm1lc3NhZ2UpO1xuICAgICAgICAgIG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQuX29ubWVzc2FnZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVkaWFLZXlTZXNzaW9uQ29udGV4dC5fb25rZXlzdGF0dXNlc2NoYW5nZSkge1xuICAgICAgICAgIG1lZGlhS2V5c1Nlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5c3RhdHVzZXNjaGFuZ2UnLCBtZWRpYUtleVNlc3Npb25Db250ZXh0Ll9vbmtleXN0YXR1c2VzY2hhbmdlKTtcbiAgICAgICAgICBtZWRpYUtleVNlc3Npb25Db250ZXh0Ll9vbmtleXN0YXR1c2VzY2hhbmdlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaWNlbnNlWGhyICYmIGxpY2Vuc2VYaHIucmVhZHlTdGF0ZSAhPT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkge1xuICAgICAgICAgIGxpY2Vuc2VYaHIuYWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBtZWRpYUtleVNlc3Npb25Db250ZXh0Lm1lZGlhS2V5c1Nlc3Npb24gPSBtZWRpYUtleVNlc3Npb25Db250ZXh0LmRlY3J5cHRkYXRhID0gbWVkaWFLZXlTZXNzaW9uQ29udGV4dC5saWNlbnNlWGhyID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLm1lZGlhS2V5U2Vzc2lvbnMuaW5kZXhPZihtZWRpYUtleVNlc3Npb25Db250ZXh0KTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICB0aGlzLm1lZGlhS2V5U2Vzc2lvbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZHJtU3lzdGVtT3B0aW9ucyA9IHRoaXMuY29uZmlnLmRybVN5c3RlbU9wdGlvbnM7XG4gICAgICAgIHZhciByZW1vdmVQcm9taXNlID0gaXNQZXJzaXN0ZW50U2Vzc2lvblR5cGUoZHJtU3lzdGVtT3B0aW9ucykgPyBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTWVkaWFLZXlTZXNzaW9uLnJlbW92ZSgpIHRpbWVvdXRcIikpO1xuICAgICAgICAgIH0sIDgwMDApO1xuICAgICAgICAgIG1lZGlhS2V5c1Nlc3Npb24ucmVtb3ZlKCkudGhlbihyZXNvbHZlKTtcbiAgICAgICAgfSkgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgcmV0dXJuIHJlbW92ZVByb21pc2UuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgdmFyIF90aGlzMTUkaGxzO1xuICAgICAgICAgIF90aGlzMTUubG9nKFwiQ291bGQgbm90IHJlbW92ZSBzZXNzaW9uOiBcIiArIGVycm9yKTtcbiAgICAgICAgICAoX3RoaXMxNSRobHMgPSBfdGhpczE1LmhscykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzMTUkaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk9USEVSX0VSUk9SLFxuICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLktFWV9TWVNURU1fREVTVFJPWV9SRU1PVkVfU0VTU0lPTl9FUlJPUixcbiAgICAgICAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiBuZXcgRXJyb3IoXCJDb3VsZCBub3QgcmVtb3ZlIHNlc3Npb246IFwiICsgZXJyb3IpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBtZWRpYUtleXNTZXNzaW9uLmNsb3NlKCk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHZhciBfdGhpczE1JGhsczI7XG4gICAgICAgICAgX3RoaXMxNS5sb2coXCJDb3VsZCBub3QgY2xvc2Ugc2Vzc2lvbjogXCIgKyBlcnJvcik7XG4gICAgICAgICAgKF90aGlzMTUkaGxzMiA9IF90aGlzMTUuaGxzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMxNSRobHMyLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk9USEVSX0VSUk9SLFxuICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLktFWV9TWVNURU1fREVTVFJPWV9DTE9TRV9TRVNTSU9OX0VSUk9SLFxuICAgICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBjbG9zZSBzZXNzaW9uOiBcIiArIGVycm9yKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBFTUVDb250cm9sbGVyO1xuICB9KExvZ2dlcik7XG4gIEVNRUNvbnRyb2xsZXIuQ0RNQ2xlYW51cFByb21pc2UgPSB2b2lkIDA7XG4gIHZhciBFTUVLZXlFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Vycm9yKSB7XG4gICAgZnVuY3Rpb24gRU1FS2V5RXJyb3IoZGF0YSwgbWVzc2FnZSkge1xuICAgICAgdmFyIF90aGlzMTY7XG4gICAgICBfdGhpczE2ID0gX0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgIF90aGlzMTYuZGF0YSA9IHZvaWQgMDtcbiAgICAgIGRhdGEuZXJyb3IgfHwgKGRhdGEuZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSkpO1xuICAgICAgX3RoaXMxNi5kYXRhID0gZGF0YTtcbiAgICAgIGRhdGEuZXJyID0gZGF0YS5lcnJvcjtcbiAgICAgIHJldHVybiBfdGhpczE2O1xuICAgIH1cbiAgICBfaW5oZXJpdHNMb29zZShFTUVLZXlFcnJvciwgX0Vycm9yKTtcbiAgICByZXR1cm4gRU1FS2V5RXJyb3I7XG4gIH0oLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoRXJyb3IpKTtcblxuICB2YXIgRlBTQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRlBTQ29udHJvbGxlcihobHMpIHtcbiAgICAgIHRoaXMuaGxzID0gdm9pZCAwO1xuICAgICAgdGhpcy5pc1ZpZGVvUGxheWJhY2tRdWFsaXR5QXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICB0aGlzLnRpbWVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgICB0aGlzLmxhc3RUaW1lID0gdm9pZCAwO1xuICAgICAgdGhpcy5sYXN0RHJvcHBlZEZyYW1lcyA9IDA7XG4gICAgICB0aGlzLmxhc3REZWNvZGVkRnJhbWVzID0gMDtcbiAgICAgIC8vIHN0cmVhbSBjb250cm9sbGVyIG11c3QgYmUgcHJvdmlkZWQgYXMgYSBkZXBlbmRlbmN5IVxuICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5obHMgPSBobHM7XG4gICAgICB0aGlzLnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBGUFNDb250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8uc2V0U3RyZWFtQ29udHJvbGxlciA9IGZ1bmN0aW9uIHNldFN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtQ29udHJvbGxlcikge1xuICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyID0gc3RyZWFtQ29udHJvbGxlcjtcbiAgICB9O1xuICAgIF9wcm90by5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdGhpcy5obHMub24oRXZlbnRzLk1FRElBX0FUVEFDSElORywgdGhpcy5vbk1lZGlhQXR0YWNoaW5nLCB0aGlzKTtcbiAgICAgIHRoaXMuaGxzLm9uKEV2ZW50cy5NRURJQV9ERVRBQ0hJTkcsIHRoaXMub25NZWRpYURldGFjaGluZywgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8udW5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgICB0aGlzLmhscy5vZmYoRXZlbnRzLk1FRElBX0FUVEFDSElORywgdGhpcy5vbk1lZGlhQXR0YWNoaW5nLCB0aGlzKTtcbiAgICAgIHRoaXMuaGxzLm9mZihFdmVudHMuTUVESUFfREVUQUNISU5HLCB0aGlzLm9uTWVkaWFEZXRhY2hpbmcsIHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudW5yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgICAgdGhpcy5pc1ZpZGVvUGxheWJhY2tRdWFsaXR5QXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICB0aGlzLm1lZGlhID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5vbk1lZGlhQXR0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYUF0dGFjaGluZyhldmVudCwgZGF0YSkge1xuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuaGxzLmNvbmZpZztcbiAgICAgIGlmIChjb25maWcuY2FwTGV2ZWxPbkZQU0Ryb3ApIHtcbiAgICAgICAgdmFyIG1lZGlhID0gZGF0YS5tZWRpYSBpbnN0YW5jZW9mIHNlbGYuSFRNTFZpZGVvRWxlbWVudCA/IGRhdGEubWVkaWEgOiBudWxsO1xuICAgICAgICB0aGlzLm1lZGlhID0gbWVkaWE7XG4gICAgICAgIGlmIChtZWRpYSAmJiB0eXBlb2YgbWVkaWEuZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLmlzVmlkZW9QbGF5YmFja1F1YWxpdHlBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICAgICAgdGhpcy50aW1lciA9IHNlbGYuc2V0SW50ZXJ2YWwodGhpcy5jaGVja0ZQU0ludGVydmFsLmJpbmQodGhpcyksIGNvbmZpZy5mcHNEcm9wcGVkTW9uaXRvcmluZ1BlcmlvZCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYURldGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFEZXRhY2hpbmcoKSB7XG4gICAgICB0aGlzLm1lZGlhID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5jaGVja0ZQUyA9IGZ1bmN0aW9uIGNoZWNrRlBTKHZpZGVvLCBkZWNvZGVkRnJhbWVzLCBkcm9wcGVkRnJhbWVzKSB7XG4gICAgICB2YXIgY3VycmVudFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGlmIChkZWNvZGVkRnJhbWVzKSB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RUaW1lKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRQZXJpb2QgPSBjdXJyZW50VGltZSAtIHRoaXMubGFzdFRpbWU7XG4gICAgICAgICAgdmFyIGN1cnJlbnREcm9wcGVkID0gZHJvcHBlZEZyYW1lcyAtIHRoaXMubGFzdERyb3BwZWRGcmFtZXM7XG4gICAgICAgICAgdmFyIGN1cnJlbnREZWNvZGVkID0gZGVjb2RlZEZyYW1lcyAtIHRoaXMubGFzdERlY29kZWRGcmFtZXM7XG4gICAgICAgICAgdmFyIGRyb3BwZWRGUFMgPSAxMDAwICogY3VycmVudERyb3BwZWQgLyBjdXJyZW50UGVyaW9kO1xuICAgICAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuRlBTX0RST1AsIHtcbiAgICAgICAgICAgIGN1cnJlbnREcm9wcGVkOiBjdXJyZW50RHJvcHBlZCxcbiAgICAgICAgICAgIGN1cnJlbnREZWNvZGVkOiBjdXJyZW50RGVjb2RlZCxcbiAgICAgICAgICAgIHRvdGFsRHJvcHBlZEZyYW1lczogZHJvcHBlZEZyYW1lc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChkcm9wcGVkRlBTID4gMCkge1xuICAgICAgICAgICAgLy8gaGxzLmxvZ2dlci5sb2coJ2NoZWNrRlBTIDogZHJvcHBlZEZQUy9kZWNvZGVkRlBTOicgKyBkcm9wcGVkRlBTLygxMDAwICogY3VycmVudERlY29kZWQgLyBjdXJyZW50UGVyaW9kKSk7XG4gICAgICAgICAgICBpZiAoY3VycmVudERyb3BwZWQgPiBobHMuY29uZmlnLmZwc0Ryb3BwZWRNb25pdG9yaW5nVGhyZXNob2xkICogY3VycmVudERlY29kZWQpIHtcbiAgICAgICAgICAgICAgdmFyIGN1cnJlbnRMZXZlbCA9IGhscy5jdXJyZW50TGV2ZWw7XG4gICAgICAgICAgICAgIGhscy5sb2dnZXIud2FybignZHJvcCBGUFMgcmF0aW8gZ3JlYXRlciB0aGFuIG1heCBhbGxvd2VkIHZhbHVlIGZvciBjdXJyZW50TGV2ZWw6ICcgKyBjdXJyZW50TGV2ZWwpO1xuICAgICAgICAgICAgICBpZiAoY3VycmVudExldmVsID4gMCAmJiAoaGxzLmF1dG9MZXZlbENhcHBpbmcgPT09IC0xIHx8IGhscy5hdXRvTGV2ZWxDYXBwaW5nID49IGN1cnJlbnRMZXZlbCkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBjdXJyZW50TGV2ZWwgLSAxO1xuICAgICAgICAgICAgICAgIGhscy50cmlnZ2VyKEV2ZW50cy5GUFNfRFJPUF9MRVZFTF9DQVBQSU5HLCB7XG4gICAgICAgICAgICAgICAgICBsZXZlbDogY3VycmVudExldmVsLFxuICAgICAgICAgICAgICAgICAgZHJvcHBlZExldmVsOiBobHMuY3VycmVudExldmVsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaGxzLmF1dG9MZXZlbENhcHBpbmcgPSBjdXJyZW50TGV2ZWw7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyLm5leHRMZXZlbFN3aXRjaCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgdGhpcy5sYXN0RHJvcHBlZEZyYW1lcyA9IGRyb3BwZWRGcmFtZXM7XG4gICAgICAgIHRoaXMubGFzdERlY29kZWRGcmFtZXMgPSBkZWNvZGVkRnJhbWVzO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmNoZWNrRlBTSW50ZXJ2YWwgPSBmdW5jdGlvbiBjaGVja0ZQU0ludGVydmFsKCkge1xuICAgICAgdmFyIHZpZGVvID0gdGhpcy5tZWRpYTtcbiAgICAgIGlmICh2aWRlbykge1xuICAgICAgICBpZiAodGhpcy5pc1ZpZGVvUGxheWJhY2tRdWFsaXR5QXZhaWxhYmxlKSB7XG4gICAgICAgICAgdmFyIHZpZGVvUGxheWJhY2tRdWFsaXR5ID0gdmlkZW8uZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHkoKTtcbiAgICAgICAgICB0aGlzLmNoZWNrRlBTKHZpZGVvLCB2aWRlb1BsYXliYWNrUXVhbGl0eS50b3RhbFZpZGVvRnJhbWVzLCB2aWRlb1BsYXliYWNrUXVhbGl0eS5kcm9wcGVkVmlkZW9GcmFtZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEhUTUxWaWRlb0VsZW1lbnQgZG9lc24ndCBpbmNsdWRlIHRoZSB3ZWJraXQgdHlwZXNcbiAgICAgICAgICB0aGlzLmNoZWNrRlBTKHZpZGVvLCB2aWRlby53ZWJraXREZWNvZGVkRnJhbWVDb3VudCwgdmlkZW8ud2Via2l0RHJvcHBlZEZyYW1lQ291bnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRlBTQ29udHJvbGxlcjtcbiAgfSgpO1xuXG4gIC8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Rhcmtza3lhcHAvc3RyaW5nLWhhc2hcbiAgZnVuY3Rpb24gaGFzaCh0ZXh0KSB7XG4gICAgdmFyIGhhc2ggPSA1MzgxO1xuICAgIHZhciBpID0gdGV4dC5sZW5ndGg7XG4gICAgd2hpbGUgKGkpIHtcbiAgICAgIGhhc2ggPSBoYXNoICogMzMgXiB0ZXh0LmNoYXJDb2RlQXQoLS1pKTtcbiAgICB9XG4gICAgcmV0dXJuIChoYXNoID4+PiAwKS50b1N0cmluZygpO1xuICB9XG5cbiAgdmFyIEFMSUdORURfRU5EX1RIUkVTSE9MRF9TRUNPTkRTID0gMC4wMjU7XG4gIHZhciBUaW1lbGluZU9jY3VwYW5jeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoVGltZWxpbmVPY2N1cGFuY3kpIHtcbiAgICBUaW1lbGluZU9jY3VwYW5jeVtUaW1lbGluZU9jY3VwYW5jeVtcIlBvaW50XCJdID0gMF0gPSBcIlBvaW50XCI7XG4gICAgVGltZWxpbmVPY2N1cGFuY3lbVGltZWxpbmVPY2N1cGFuY3lbXCJSYW5nZVwiXSA9IDFdID0gXCJSYW5nZVwiO1xuICAgIHJldHVybiBUaW1lbGluZU9jY3VwYW5jeTtcbiAgfSh7fSk7XG4gIGZ1bmN0aW9uIGdlbmVyYXRlQXNzZXRJZGVudGlmaWVyKGludGVyc3RpdGlhbCwgdXJpLCBhc3NldExpc3RJbmRleCkge1xuICAgIHJldHVybiBpbnRlcnN0aXRpYWwuaWRlbnRpZmllciArIFwiLVwiICsgKGFzc2V0TGlzdEluZGV4ICsgMSkgKyBcIi1cIiArIGhhc2godXJpKTtcbiAgfVxuICB2YXIgSW50ZXJzdGl0aWFsRXZlbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEludGVyc3RpdGlhbEV2ZW50KGRhdGVSYW5nZSwgYmFzZSkge1xuICAgICAgdGhpcy5iYXNlID0gdm9pZCAwO1xuICAgICAgdGhpcy5fZHVyYXRpb24gPSBudWxsO1xuICAgICAgdGhpcy5fdGltZWxpbmVTdGFydCA9IG51bGw7XG4gICAgICB0aGlzLmFwcGVuZEluUGxhY2VEaXNhYmxlZCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuYXBwZW5kSW5QbGFjZVN0YXJ0ZWQgPSB2b2lkIDA7XG4gICAgICB0aGlzLmRhdGVSYW5nZSA9IHZvaWQgMDtcbiAgICAgIHRoaXMuaGFzUGxheWVkID0gZmFsc2U7XG4gICAgICB0aGlzLmN1bXVsYXRpdmVEdXJhdGlvbiA9IDA7XG4gICAgICB0aGlzLnJlc3VtZU9mZnNldCA9IE5hTjtcbiAgICAgIHRoaXMucGxheW91dExpbWl0ID0gTmFOO1xuICAgICAgdGhpcy5yZXN0cmljdGlvbnMgPSB7XG4gICAgICAgIHNraXA6IGZhbHNlLFxuICAgICAgICBqdW1wOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIHRoaXMuc25hcE9wdGlvbnMgPSB7XG4gICAgICAgIG91dDogZmFsc2UsXG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIHRoaXMuYXNzZXRMaXN0ID0gW107XG4gICAgICB0aGlzLmFzc2V0TGlzdExvYWRlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMuYXNzZXRMaXN0UmVzcG9uc2UgPSBudWxsO1xuICAgICAgdGhpcy5yZXN1bWVBbmNob3IgPSB2b2lkIDA7XG4gICAgICB0aGlzLmVycm9yID0gdm9pZCAwO1xuICAgICAgdGhpcy5yZXNldE9uUmVzdW1lID0gdm9pZCAwO1xuICAgICAgdGhpcy5iYXNlID0gYmFzZTtcbiAgICAgIHRoaXMuZGF0ZVJhbmdlID0gZGF0ZVJhbmdlO1xuICAgICAgdGhpcy5zZXREYXRlUmFuZ2UoZGF0ZVJhbmdlKTtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IEludGVyc3RpdGlhbEV2ZW50LnByb3RvdHlwZTtcbiAgICBfcHJvdG8uc2V0RGF0ZVJhbmdlID0gZnVuY3Rpb24gc2V0RGF0ZVJhbmdlKGRhdGVSYW5nZSkge1xuICAgICAgdGhpcy5kYXRlUmFuZ2UgPSBkYXRlUmFuZ2U7XG4gICAgICB0aGlzLnJlc3VtZU9mZnNldCA9IGRhdGVSYW5nZS5hdHRyLm9wdGlvbmFsRmxvYXQoJ1gtUkVTVU1FLU9GRlNFVCcsIHRoaXMucmVzdW1lT2Zmc2V0KTtcbiAgICAgIHRoaXMucGxheW91dExpbWl0ID0gZGF0ZVJhbmdlLmF0dHIub3B0aW9uYWxGbG9hdCgnWC1QTEFZT1VULUxJTUlUJywgdGhpcy5wbGF5b3V0TGltaXQpO1xuICAgICAgdGhpcy5yZXN0cmljdGlvbnMgPSBkYXRlUmFuZ2UuYXR0ci5lbnVtZXJhdGVkU3RyaW5nTGlzdCgnWC1SRVNUUklDVCcsIHRoaXMucmVzdHJpY3Rpb25zKTtcbiAgICAgIHRoaXMuc25hcE9wdGlvbnMgPSBkYXRlUmFuZ2UuYXR0ci5lbnVtZXJhdGVkU3RyaW5nTGlzdCgnWC1TTkFQJywgdGhpcy5zbmFwT3B0aW9ucyk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHZhciBfdGhpcyRhc3NldExpc3RMb2FkZXI7XG4gICAgICB0aGlzLmFwcGVuZEluUGxhY2VTdGFydGVkID0gZmFsc2U7XG4gICAgICAoX3RoaXMkYXNzZXRMaXN0TG9hZGVyID0gdGhpcy5hc3NldExpc3RMb2FkZXIpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRhc3NldExpc3RMb2FkZXIuZGVzdHJveSgpO1xuICAgICAgdGhpcy5hc3NldExpc3RMb2FkZXIgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAoIXRoaXMuc3VwcGxlbWVudHNQcmltYXJ5KSB7XG4gICAgICAgIHRoaXMuYXNzZXRMaXN0UmVzcG9uc2UgPSBudWxsO1xuICAgICAgICB0aGlzLmFzc2V0TGlzdCA9IFtdO1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IG51bGw7XG4gICAgICB9XG4gICAgICAvLyBgZXJyb3I/YCBpcyByZXNldCB3aGVuIHNlZWtpbmcgYmFjayBvdmVyIGludGVyc3RpdGlhbCBgc3RhcnRPZmZzZXRgXG4gICAgICAvLyAgdXNpbmcgYHNjaGVkdWxlLnJlc2V0RXJyb3JzSW5SYW5nZShzdGFydCwgZW5kKWAuXG4gICAgfTtcbiAgICBfcHJvdG8uaXNBc3NldFBhc3RQbGF5b3V0TGltaXQgPSBmdW5jdGlvbiBpc0Fzc2V0UGFzdFBsYXlvdXRMaW1pdChhc3NldEluZGV4KSB7XG4gICAgICB2YXIgX3RoaXMkYXNzZXRMaXN0JGFzc2V0O1xuICAgICAgaWYgKGFzc2V0SW5kZXggPiAwICYmIGFzc2V0SW5kZXggPj0gdGhpcy5hc3NldExpc3QubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIHBsYXlvdXRMaW1pdCA9IHRoaXMucGxheW91dExpbWl0O1xuICAgICAgaWYgKGFzc2V0SW5kZXggPD0gMCB8fCBpc05hTihwbGF5b3V0TGltaXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChwbGF5b3V0TGltaXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgYXNzZXRPZmZzZXQgPSAoKF90aGlzJGFzc2V0TGlzdCRhc3NldCA9IHRoaXMuYXNzZXRMaXN0W2Fzc2V0SW5kZXhdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkYXNzZXRMaXN0JGFzc2V0LnN0YXJ0T2Zmc2V0KSB8fCAwO1xuICAgICAgcmV0dXJuIGFzc2V0T2Zmc2V0ID4gcGxheW91dExpbWl0O1xuICAgIH07XG4gICAgX3Byb3RvLmZpbmRBc3NldEluZGV4ID0gZnVuY3Rpb24gZmluZEFzc2V0SW5kZXgoYXNzZXQpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuYXNzZXRMaXN0LmluZGV4T2YoYXNzZXQpO1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG4gICAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gZXZlbnRUb1N0cmluZyh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoSW50ZXJzdGl0aWFsRXZlbnQsIFt7XG4gICAgICBrZXk6IFwiaWRlbnRpZmllclwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGVSYW5nZS5pZDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RhcnREYXRlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZVJhbmdlLnN0YXJ0RGF0ZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RhcnRUaW1lXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgLy8gUHJpbWFyeSBtZWRpYSB0aW1lbGluZSBzdGFydCB0aW1lXG4gICAgICAgIHZhciBzdGFydFRpbWUgPSB0aGlzLmRhdGVSYW5nZS5zdGFydFRpbWU7XG4gICAgICAgIGlmICh0aGlzLnNuYXBPcHRpb25zLm91dCkge1xuICAgICAgICAgIHZhciBmcmFnID0gdGhpcy5kYXRlUmFuZ2UudGFnQW5jaG9yO1xuICAgICAgICAgIGlmIChmcmFnKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0U25hcFRvRnJhZ21lbnRUaW1lKHN0YXJ0VGltZSwgZnJhZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFydFRpbWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInN0YXJ0T2Zmc2V0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VlLnByZSA/IDAgOiB0aGlzLnN0YXJ0VGltZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RhcnRJc0FsaWduZWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5zdGFydFRpbWUgPT09IDAgfHwgdGhpcy5zbmFwT3B0aW9ucy5vdXQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnJhZyA9IHRoaXMuZGF0ZVJhbmdlLnRhZ0FuY2hvcjtcbiAgICAgICAgaWYgKGZyYWcpIHtcbiAgICAgICAgICB2YXIgc3RhcnRUaW1lID0gdGhpcy5kYXRlUmFuZ2Uuc3RhcnRUaW1lO1xuICAgICAgICAgIHZhciBzbmFwcGVkU3RhcnQgPSBnZXRTbmFwVG9GcmFnbWVudFRpbWUoc3RhcnRUaW1lLCBmcmFnKTtcbiAgICAgICAgICByZXR1cm4gc3RhcnRUaW1lIC0gc25hcHBlZFN0YXJ0IDwgMC4xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVzdW1wdGlvbk9mZnNldFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciByZXN1bWVPZmZzZXQgPSB0aGlzLnJlc3VtZU9mZnNldDtcbiAgICAgICAgdmFyIG9mZnNldCA9IGlzRmluaXRlTnVtYmVyKHJlc3VtZU9mZnNldCkgPyByZXN1bWVPZmZzZXQgOiB0aGlzLmR1cmF0aW9uO1xuICAgICAgICByZXR1cm4gdGhpcy5jdW11bGF0aXZlRHVyYXRpb24gKyBvZmZzZXQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlc3VtZVRpbWVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAvLyBQcmltYXJ5IG1lZGlhIHRpbWVsaW5lIHJlc3VtcHRpb24gdGltZVxuICAgICAgICB2YXIgcmVzdW1lVGltZSA9IHRoaXMuc3RhcnRPZmZzZXQgKyB0aGlzLnJlc3VtcHRpb25PZmZzZXQ7XG4gICAgICAgIGlmICh0aGlzLnNuYXBPcHRpb25zLmluKSB7XG4gICAgICAgICAgdmFyIGZyYWcgPSB0aGlzLnJlc3VtZUFuY2hvcjtcbiAgICAgICAgICBpZiAoZnJhZykge1xuICAgICAgICAgICAgcmV0dXJuIGdldFNuYXBUb0ZyYWdtZW50VGltZShyZXN1bWVUaW1lLCBmcmFnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VtZVRpbWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFwcGVuZEluUGxhY2VcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5hcHBlbmRJblBsYWNlU3RhcnRlZCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFwcGVuZEluUGxhY2VEaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuY3VlLm9uY2UgJiYgIXRoaXMuY3VlLnByZSAmJlxuICAgICAgICAvLyBwcmVyb2xsIHN0YXJ0cyBhdCBzdGFydFBvc2l0aW9uIGJlZm9yZSBzdGFydFBvc2l0aW9uIGlzIGtub3duIChsaXZlKVxuICAgICAgICB0aGlzLnN0YXJ0SXNBbGlnbmVkICYmIChpc05hTih0aGlzLnBsYXlvdXRMaW1pdCkgJiYgaXNOYU4odGhpcy5yZXN1bWVPZmZzZXQpIHx8IHRoaXMucmVzdW1lT2Zmc2V0ICYmIHRoaXMuZHVyYXRpb24gJiYgTWF0aC5hYnModGhpcy5yZXN1bWVPZmZzZXQgLSB0aGlzLmR1cmF0aW9uKSA8IEFMSUdORURfRU5EX1RIUkVTSE9MRF9TRUNPTkRTKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5hcHBlbmRJblBsYWNlU3RhcnRlZCkge1xuICAgICAgICAgIHRoaXMucmVzZXRPblJlc3VtZSA9ICF2YWx1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hcHBlbmRJblBsYWNlRGlzYWJsZWQgPSAhdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIC8vIEV4dGVuZGVkIHRpbWVsaW5lIHN0YXJ0IHRpbWVcbiAgICB9LCB7XG4gICAgICBrZXk6IFwidGltZWxpbmVTdGFydFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl90aW1lbGluZVN0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVsaW5lU3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRUaW1lO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3RpbWVsaW5lU3RhcnQgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHVyYXRpb25cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgcGxheW91dExpbWl0ID0gdGhpcy5wbGF5b3V0TGltaXQ7XG4gICAgICAgIHZhciBkdXJhdGlvbjtcbiAgICAgICAgaWYgKHRoaXMuX2R1cmF0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgZHVyYXRpb24gPSB0aGlzLl9kdXJhdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGVSYW5nZS5kdXJhdGlvbikge1xuICAgICAgICAgIGR1cmF0aW9uID0gdGhpcy5kYXRlUmFuZ2UuZHVyYXRpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHVyYXRpb24gPSB0aGlzLmRhdGVSYW5nZS5wbGFubmVkRHVyYXRpb24gfHwgMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTmFOKHBsYXlvdXRMaW1pdCkgJiYgcGxheW91dExpbWl0IDwgZHVyYXRpb24pIHtcbiAgICAgICAgICBkdXJhdGlvbiA9IHBsYXlvdXRMaW1pdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZHVyYXRpb247XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY3VlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZVJhbmdlLmN1ZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidGltZWxpbmVPY2N1cGFuY3lcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5kYXRlUmFuZ2UuYXR0clsnWC1USU1FTElORS1PQ0NVUElFUyddID09PSAnUkFOR0UnKSB7XG4gICAgICAgICAgcmV0dXJuIFRpbWVsaW5lT2NjdXBhbmN5LlJhbmdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBUaW1lbGluZU9jY3VwYW5jeS5Qb2ludDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3VwcGxlbWVudHNQcmltYXJ5XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZVJhbmdlLmF0dHJbJ1gtVElNRUxJTkUtU1RZTEUnXSA9PT0gJ1BSSU1BUlknO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjb250ZW50TWF5VmFyeVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGVSYW5nZS5hdHRyWydYLUNPTlRFTlQtTUFZLVZBUlknXSAhPT0gJ05PJztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYXNzZXRVcmxcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRlUmFuZ2UuYXR0clsnWC1BU1NFVC1VUkknXTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYXNzZXRMaXN0VXJsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZVJhbmdlLmF0dHJbJ1gtQVNTRVQtTElTVCddO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJiYXNlVXJsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZS51cmw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFzc2V0TGlzdExvYWRlZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzc2V0TGlzdC5sZW5ndGggPiAwIHx8IHRoaXMuYXNzZXRMaXN0UmVzcG9uc2UgIT09IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuICB9KCk7XG4gIGZ1bmN0aW9uIGdldFNuYXBUb0ZyYWdtZW50VGltZSh0aW1lLCBmcmFnKSB7XG4gICAgcmV0dXJuIHRpbWUgLSBmcmFnLnN0YXJ0IDwgZnJhZy5kdXJhdGlvbiAvIDIgJiYgIShNYXRoLmFicyh0aW1lIC0gKGZyYWcuc3RhcnQgKyBmcmFnLmR1cmF0aW9uKSkgPCBBTElHTkVEX0VORF9USFJFU0hPTERfU0VDT05EUykgPyBmcmFnLnN0YXJ0IDogZnJhZy5zdGFydCArIGZyYWcuZHVyYXRpb247XG4gIH1cbiAgZnVuY3Rpb24gZ2V0SW50ZXJzdGl0aWFsVXJsKHVyaSwgc2Vzc2lvbklkLCBiYXNlVXJsKSB7XG4gICAgdmFyIHVybCA9IG5ldyBzZWxmLlVSTCh1cmksIGJhc2VVcmwpO1xuICAgIGlmICh1cmwucHJvdG9jb2wgIT09ICdkYXRhOicpIHtcbiAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdfSExTX3ByaW1hcnlfaWQnLCBzZXNzaW9uSWQpO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIGZ1bmN0aW9uIGdldE5leHRBc3NldEluZGV4KGludGVyc3RpdGlhbCwgYXNzZXRMaXN0SW5kZXgpIHtcbiAgICB3aGlsZSAoKF9pbnRlcnN0aXRpYWwkYXNzZXRMaSA9IGludGVyc3RpdGlhbC5hc3NldExpc3RbKythc3NldExpc3RJbmRleF0pICE9IG51bGwgJiYgX2ludGVyc3RpdGlhbCRhc3NldExpLmVycm9yKSB7XG4gICAgICB2YXIgX2ludGVyc3RpdGlhbCRhc3NldExpO1xuICAgIH0gLyogbm8tb3AgKi9cbiAgICByZXR1cm4gYXNzZXRMaXN0SW5kZXg7XG4gIH1cbiAgZnVuY3Rpb24gZXZlbnRUb1N0cmluZyhpbnRlcnN0aXRpYWwpIHtcbiAgICByZXR1cm4gXCJbXFxcIlwiICsgaW50ZXJzdGl0aWFsLmlkZW50aWZpZXIgKyBcIlxcXCIgXCIgKyAoaW50ZXJzdGl0aWFsLmN1ZS5wcmUgPyAnPHByZT4nIDogaW50ZXJzdGl0aWFsLmN1ZS5wb3N0ID8gJzxwb3N0PicgOiAnJykgKyBpbnRlcnN0aXRpYWwudGltZWxpbmVTdGFydC50b0ZpeGVkKDIpICsgXCItXCIgKyBpbnRlcnN0aXRpYWwucmVzdW1lVGltZS50b0ZpeGVkKDIpICsgXCJdXCI7XG4gIH1cbiAgZnVuY3Rpb24gZXZlbnRBc3NldFRvU3RyaW5nKGFzc2V0KSB7XG4gICAgdmFyIHN0YXJ0ID0gYXNzZXQudGltZWxpbmVTdGFydDtcbiAgICB2YXIgZHVyYXRpb24gPSBhc3NldC5kdXJhdGlvbiB8fCAwO1xuICAgIHJldHVybiBcIltcXFwiXCIgKyBhc3NldC5pZGVudGlmaWVyICsgXCJcXFwiIFwiICsgc3RhcnQudG9GaXhlZCgyKSArIFwiLVwiICsgKHN0YXJ0ICsgZHVyYXRpb24pLnRvRml4ZWQoMikgKyBcIl1cIjtcbiAgfVxuXG4gIHZhciBIbHNBc3NldFBsYXllciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSGxzQXNzZXRQbGF5ZXIoSGxzUGxheWVyQ2xhc3MsIHVzZXJDb25maWcsIGludGVyc3RpdGlhbCwgYXNzZXRJdGVtKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5obHMgPSB2b2lkIDA7XG4gICAgICB0aGlzLmludGVyc3RpdGlhbCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuYXNzZXRJdGVtID0gdm9pZCAwO1xuICAgICAgdGhpcy50cmFja3MgPSBudWxsO1xuICAgICAgdGhpcy5oYXNEZXRhaWxzID0gZmFsc2U7XG4gICAgICB0aGlzLm1lZGlhQXR0YWNoZWQgPSBudWxsO1xuICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9idWZmZXJlZEVvc1RpbWUgPSB2b2lkIDA7XG4gICAgICB0aGlzLmNoZWNrUGxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLnJlYWNoZWRQbGF5b3V0KF90aGlzLmN1cnJlbnRUaW1lKSkge1xuICAgICAgICAgIF90aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5QTEFZT1VUX0xJTUlUX1JFQUNIRUQsIHt9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscyA9IG5ldyBIbHNQbGF5ZXJDbGFzcyh1c2VyQ29uZmlnKTtcbiAgICAgIHRoaXMuaW50ZXJzdGl0aWFsID0gaW50ZXJzdGl0aWFsO1xuICAgICAgdGhpcy5hc3NldEl0ZW0gPSBhc3NldEl0ZW07XG4gICAgICB2YXIgdXJpID0gYXNzZXRJdGVtLnVyaTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHVyaSA9IGdldEludGVyc3RpdGlhbFVybCh1cmksIHVzZXJDb25maWcucHJpbWFyeVNlc3Npb25JZCkuaHJlZjtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIElnbm9yZSBlcnJvciBwYXJzaW5nIEFTU0VUX1VSSSBvciBhZGRpbmcgX0hMU19wcmltYXJ5X2lkIHRvIGl0LiBUaGVcbiAgICAgICAgLy8gaXNzdWUgc2hvdWxkIHN1cmZhY2UgYXMgYW4gSU5URVJTVElUSUFMX0FTU0VUX0VSUk9SIGxvYWRpbmcgdGhlIGFzc2V0LlxuICAgICAgfVxuICAgICAgaGxzLmxvYWRTb3VyY2UodXJpKTtcbiAgICAgIHZhciBkZXRhaWxzTG9hZGVkID0gZnVuY3Rpb24gZGV0YWlsc0xvYWRlZCgpIHtcbiAgICAgICAgX3RoaXMuaGFzRGV0YWlscyA9IHRydWU7XG4gICAgICB9O1xuICAgICAgaGxzLm9uY2UoRXZlbnRzLkxFVkVMX0xPQURFRCwgZGV0YWlsc0xvYWRlZCk7XG4gICAgICBobHMub25jZShFdmVudHMuQVVESU9fVFJBQ0tfTE9BREVELCBkZXRhaWxzTG9hZGVkKTtcbiAgICAgIGhscy5vbmNlKEV2ZW50cy5TVUJUSVRMRV9UUkFDS19MT0FERUQsIGRldGFpbHNMb2FkZWQpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NRURJQV9BVFRBQ0hJTkcsIGZ1bmN0aW9uIChuYW1lLCBfcmVmKSB7XG4gICAgICAgIHZhciBtZWRpYSA9IF9yZWYubWVkaWE7XG4gICAgICAgIF90aGlzLnJlbW92ZU1lZGlhTGlzdGVuZXJzKCk7XG4gICAgICAgIF90aGlzLm1lZGlhQXR0YWNoZWQgPSBtZWRpYTtcbiAgICAgICAgdmFyIGV2ZW50ID0gX3RoaXMuaW50ZXJzdGl0aWFsO1xuICAgICAgICBpZiAoZXZlbnQucGxheW91dExpbWl0KSB7XG4gICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsIF90aGlzLmNoZWNrUGxheW91dCk7XG4gICAgICAgICAgaWYgKF90aGlzLmFwcGVuZEluUGxhY2UpIHtcbiAgICAgICAgICAgIGhscy5vbihFdmVudHMuQlVGRkVSX0FQUEVOREVELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBidWZmZXJlZEVuZCA9IF90aGlzLmJ1ZmZlcmVkRW5kO1xuICAgICAgICAgICAgICBpZiAoX3RoaXMucmVhY2hlZFBsYXlvdXQoYnVmZmVyZWRFbmQpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2J1ZmZlcmVkRW9zVGltZSA9IGJ1ZmZlcmVkRW5kO1xuICAgICAgICAgICAgICAgIGhscy50cmlnZ2VyKEV2ZW50cy5CVUZGRVJFRF9UT19FTkQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBIbHNBc3NldFBsYXllci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLmJ1ZmZlcmVkSW5QbGFjZVRvRW5kID0gZnVuY3Rpb24gYnVmZmVyZWRJblBsYWNlVG9FbmQobWVkaWEpIHtcbiAgICAgIHZhciBfdGhpcyRobHM7XG4gICAgICBpZiAoIXRoaXMuYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoKF90aGlzJGhscyA9IHRoaXMuaGxzKSAhPSBudWxsICYmIF90aGlzJGhscy5idWZmZXJlZFRvRW5kKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFtZWRpYSB8fCAhdGhpcy5fYnVmZmVyZWRFb3NUaW1lKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBzdGFydCA9IHRoaXMudGltZWxpbmVPZmZzZXQ7XG4gICAgICB2YXIgYnVmZmVySW5mbyA9IEJ1ZmZlckhlbHBlci5idWZmZXJJbmZvKG1lZGlhLCBzdGFydCwgMCk7XG4gICAgICB2YXIgYnVmZmVyZWRFbmQgPSB0aGlzLmdldEFzc2V0VGltZShidWZmZXJJbmZvLmVuZCk7XG4gICAgICByZXR1cm4gYnVmZmVyZWRFbmQgPj0gdGhpcy5fYnVmZmVyZWRFb3NUaW1lIC0gMC4wMjtcbiAgICB9O1xuICAgIF9wcm90by5yZWFjaGVkUGxheW91dCA9IGZ1bmN0aW9uIHJlYWNoZWRQbGF5b3V0KHRpbWUpIHtcbiAgICAgIHZhciBpbnRlcnN0aXRpYWwgPSB0aGlzLmludGVyc3RpdGlhbDtcbiAgICAgIHZhciBwbGF5b3V0TGltaXQgPSBpbnRlcnN0aXRpYWwucGxheW91dExpbWl0O1xuICAgICAgcmV0dXJuIHRoaXMuc3RhcnRPZmZzZXQgKyB0aW1lID49IHBsYXlvdXRMaW1pdDtcbiAgICB9O1xuICAgIF9wcm90by5nZXRBc3NldFRpbWUgPSBmdW5jdGlvbiBnZXRBc3NldFRpbWUodGltZSkge1xuICAgICAgdmFyIHRpbWVsaW5lT2Zmc2V0ID0gdGhpcy50aW1lbGluZU9mZnNldDtcbiAgICAgIHZhciBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb247XG4gICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgoMCwgdGltZSAtIHRpbWVsaW5lT2Zmc2V0KSwgZHVyYXRpb24pO1xuICAgIH07XG4gICAgX3Byb3RvLnJlbW92ZU1lZGlhTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlTWVkaWFMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhQXR0YWNoZWQ7XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSBtZWRpYS5jdXJyZW50VGltZTtcbiAgICAgICAgdGhpcy5idWZmZXJTbmFwU2hvdCgpO1xuICAgICAgICBtZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgdGhpcy5jaGVja1BsYXlvdXQpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmJ1ZmZlclNuYXBTaG90ID0gZnVuY3Rpb24gYnVmZmVyU25hcFNob3QoKSB7XG4gICAgICBpZiAodGhpcy5tZWRpYUF0dGFjaGVkKSB7XG4gICAgICAgIHZhciBfdGhpcyRobHMyO1xuICAgICAgICBpZiAoKF90aGlzJGhsczIgPSB0aGlzLmhscykgIT0gbnVsbCAmJiBfdGhpcyRobHMyLmJ1ZmZlcmVkVG9FbmQpIHtcbiAgICAgICAgICB0aGlzLl9idWZmZXJlZEVvc1RpbWUgPSB0aGlzLmJ1ZmZlcmVkRW5kO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLnJlbW92ZU1lZGlhTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLmhscy5kZXN0cm95KCk7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLmhscyA9IHRoaXMuaW50ZXJzdGl0aWFsID0gbnVsbDtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMudHJhY2tzID0gdGhpcy5tZWRpYUF0dGFjaGVkID0gdGhpcy5jaGVja1BsYXlvdXQgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLmF0dGFjaE1lZGlhID0gZnVuY3Rpb24gYXR0YWNoTWVkaWEoZGF0YSkge1xuICAgICAgdGhpcy5obHMuYXR0YWNoTWVkaWEoZGF0YSk7XG4gICAgfTtcbiAgICBfcHJvdG8uZGV0YWNoTWVkaWEgPSBmdW5jdGlvbiBkZXRhY2hNZWRpYSgpIHtcbiAgICAgIHRoaXMucmVtb3ZlTWVkaWFMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMubWVkaWFBdHRhY2hlZCA9IG51bGw7XG4gICAgICB0aGlzLmhscy5kZXRhY2hNZWRpYSgpO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc3VtZUJ1ZmZlcmluZyA9IGZ1bmN0aW9uIHJlc3VtZUJ1ZmZlcmluZygpIHtcbiAgICAgIHRoaXMuaGxzLnJlc3VtZUJ1ZmZlcmluZygpO1xuICAgIH07XG4gICAgX3Byb3RvLnBhdXNlQnVmZmVyaW5nID0gZnVuY3Rpb24gcGF1c2VCdWZmZXJpbmcoKSB7XG4gICAgICB0aGlzLmhscy5wYXVzZUJ1ZmZlcmluZygpO1xuICAgIH07XG4gICAgX3Byb3RvLnRyYW5zZmVyTWVkaWEgPSBmdW5jdGlvbiB0cmFuc2Zlck1lZGlhKCkge1xuICAgICAgdGhpcy5idWZmZXJTbmFwU2hvdCgpO1xuICAgICAgcmV0dXJuIHRoaXMuaGxzLnRyYW5zZmVyTWVkaWEoKTtcbiAgICB9O1xuICAgIF9wcm90by5yZXNldERldGFpbHMgPSBmdW5jdGlvbiByZXNldERldGFpbHMoKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICBpZiAodGhpcy5oYXNEZXRhaWxzKSB7XG4gICAgICAgIGhscy5zdG9wTG9hZCgpO1xuICAgICAgICB2YXIgZGVsZXRlRGV0YWlscyA9IGZ1bmN0aW9uIGRlbGV0ZURldGFpbHMob2JqKSB7XG4gICAgICAgICAgcmV0dXJuIGRlbGV0ZSBvYmouZGV0YWlscztcbiAgICAgICAgfTtcbiAgICAgICAgaGxzLmxldmVscy5mb3JFYWNoKGRlbGV0ZURldGFpbHMpO1xuICAgICAgICBobHMuYWxsQXVkaW9UcmFja3MuZm9yRWFjaChkZWxldGVEZXRhaWxzKTtcbiAgICAgICAgaGxzLmFsbFN1YnRpdGxlVHJhY2tzLmZvckVhY2goZGVsZXRlRGV0YWlscyk7XG4gICAgICAgIHRoaXMuaGFzRGV0YWlscyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGxpc3RlbmVyLCBjb250ZXh0KSB7XG4gICAgICB0aGlzLmhscy5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBsaXN0ZW5lciwgY29udGV4dCkge1xuICAgICAgdGhpcy5obHMub25jZShldmVudCwgbGlzdGVuZXIpO1xuICAgIH07XG4gICAgX3Byb3RvLm9mZiA9IGZ1bmN0aW9uIG9mZihldmVudCwgbGlzdGVuZXIsIGNvbnRleHQpIHtcbiAgICAgIHRoaXMuaGxzLm9mZihldmVudCwgbGlzdGVuZXIpO1xuICAgIH07XG4gICAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICB2YXIgX3RoaXMkaGxzMztcbiAgICAgIHJldHVybiBcIkhsc0Fzc2V0UGxheWVyOiBcIiArIGV2ZW50QXNzZXRUb1N0cmluZyh0aGlzLmFzc2V0SXRlbSkgKyBcIiBcIiArICgoX3RoaXMkaGxzMyA9IHRoaXMuaGxzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkaGxzMy5zZXNzaW9uSWQpICsgXCIgXCIgKyAodGhpcy5hcHBlbmRJblBsYWNlID8gJ2FwcGVuZC1pbi1wbGFjZScgOiAnJyk7XG4gICAgfTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKEhsc0Fzc2V0UGxheWVyLCBbe1xuICAgICAga2V5OiBcImFwcGVuZEluUGxhY2VcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMkaW50ZXJzdGl0aWFsO1xuICAgICAgICByZXR1cm4gKChfdGhpcyRpbnRlcnN0aXRpYWwgPSB0aGlzLmludGVyc3RpdGlhbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGludGVyc3RpdGlhbC5hcHBlbmRJblBsYWNlKSB8fCBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGVzdHJveWVkXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIF90aGlzJGhsczQ7XG4gICAgICAgIHJldHVybiAhKChfdGhpcyRobHM0ID0gdGhpcy5obHMpICE9IG51bGwgJiYgX3RoaXMkaGxzNC51c2VyQ29uZmlnKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYXNzZXRJZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzc2V0SXRlbS5pZGVudGlmaWVyO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpbnRlcnN0aXRpYWxJZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzc2V0SXRlbS5wYXJlbnRJZGVudGlmaWVyO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtZWRpYVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfdGhpcyRobHM1O1xuICAgICAgICByZXR1cm4gKChfdGhpcyRobHM1ID0gdGhpcy5obHMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRobHM1Lm1lZGlhKSB8fCBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJidWZmZXJlZEVuZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWEgfHwgdGhpcy5tZWRpYUF0dGFjaGVkO1xuICAgICAgICBpZiAoIW1lZGlhKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2J1ZmZlcmVkRW9zVGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlcmVkRW9zVGltZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ1ZmZlckluZm8gPSBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyhtZWRpYSwgbWVkaWEuY3VycmVudFRpbWUsIDAuMDAxKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXNzZXRUaW1lKGJ1ZmZlckluZm8uZW5kKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY3VycmVudFRpbWVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhIHx8IHRoaXMubWVkaWFBdHRhY2hlZDtcbiAgICAgICAgaWYgKCFtZWRpYSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50VGltZSB8fCAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFzc2V0VGltZShtZWRpYS5jdXJyZW50VGltZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImR1cmF0aW9uXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5hc3NldEl0ZW0uZHVyYXRpb247XG4gICAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZHVyYXRpb247XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbWFpbmluZ1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb247XG4gICAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgZHVyYXRpb24gLSB0aGlzLmN1cnJlbnRUaW1lKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RhcnRPZmZzZXRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3NldEl0ZW0uc3RhcnRPZmZzZXQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInRpbWVsaW5lT2Zmc2V0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIF90aGlzJGhsczY7XG4gICAgICAgIHJldHVybiAoKF90aGlzJGhsczYgPSB0aGlzLmhscykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGhsczYuY29uZmlnLnRpbWVsaW5lT2Zmc2V0KSB8fCAwO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHZhciB0aW1lbGluZU9mZnNldCA9IHRoaXMudGltZWxpbmVPZmZzZXQ7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdGltZWxpbmVPZmZzZXQpIHtcbiAgICAgICAgICB2YXIgZGlmZiA9IHZhbHVlIC0gdGltZWxpbmVPZmZzZXQ7XG4gICAgICAgICAgaWYgKE1hdGguYWJzKGRpZmYpID4gMSAvIDkwMDAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNEZXRhaWxzKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzZXQgdGltZWxpbmVPZmZzZXQgYWZ0ZXIgcGxheWxpc3RzIGFyZSBsb2FkZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhscy5jb25maWcudGltZWxpbmVPZmZzZXQgPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG4gIH0oKTtcblxuICB2YXIgQUJVVFRJTkdfVEhSRVNIT0xEX1NFQ09ORFMgPSAwLjAzMztcbiAgdmFyIEludGVyc3RpdGlhbHNTY2hlZHVsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0xvZ2dlcikge1xuICAgIGZ1bmN0aW9uIEludGVyc3RpdGlhbHNTY2hlZHVsZShvblNjaGVkdWxlVXBkYXRlLCBsb2dnZXIpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF90aGlzID0gX0xvZ2dlci5jYWxsKHRoaXMsICdpbnRlcnN0aXRpYWxzLXNjaGVkJywgbG9nZ2VyKSB8fCB0aGlzO1xuICAgICAgX3RoaXMub25TY2hlZHVsZVVwZGF0ZSA9IHZvaWQgMDtcbiAgICAgIF90aGlzLmV2ZW50TWFwID0ge307XG4gICAgICBfdGhpcy5ldmVudHMgPSBudWxsO1xuICAgICAgX3RoaXMuaXRlbXMgPSBudWxsO1xuICAgICAgX3RoaXMuZHVyYXRpb25zID0ge1xuICAgICAgICBwcmltYXJ5OiAwLFxuICAgICAgICBwbGF5b3V0OiAwLFxuICAgICAgICBpbnRlZ3JhdGVkOiAwXG4gICAgICB9O1xuICAgICAgX3RoaXMub25TY2hlZHVsZVVwZGF0ZSA9IG9uU2NoZWR1bGVVcGRhdGU7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIF9pbmhlcml0c0xvb3NlKEludGVyc3RpdGlhbHNTY2hlZHVsZSwgX0xvZ2dlcik7XG4gICAgdmFyIF9wcm90byA9IEludGVyc3RpdGlhbHNTY2hlZHVsZS5wcm90b3R5cGU7XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5vblNjaGVkdWxlVXBkYXRlID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5ldmVudE1hcCA9IHt9O1xuICAgICAgdGhpcy5zZXREdXJhdGlvbnMoMCwgMCwgMCk7XG4gICAgICBpZiAodGhpcy5ldmVudHMpIHtcbiAgICAgICAgdGhpcy5ldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJzdGl0aWFsKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyc3RpdGlhbC5yZXNldCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZXZlbnRzID0gdGhpcy5pdGVtcyA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXRFcnJvcnNJblJhbmdlID0gZnVuY3Rpb24gcmVzZXRFcnJvcnNJblJhbmdlKHN0YXJ0LCBlbmQpIHtcbiAgICAgIGlmICh0aGlzLmV2ZW50cykge1xuICAgICAgICByZXR1cm4gdGhpcy5ldmVudHMucmVkdWNlKGZ1bmN0aW9uIChjb3VudCwgaW50ZXJzdGl0aWFsKSB7XG4gICAgICAgICAgaWYgKHN0YXJ0IDw9IGludGVyc3RpdGlhbC5zdGFydE9mZnNldCAmJiBlbmQgPiBpbnRlcnN0aXRpYWwuc3RhcnRPZmZzZXQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBpbnRlcnN0aXRpYWwuZXJyb3I7XG4gICAgICAgICAgICByZXR1cm4gY291bnQgKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0RXZlbnQgPSBmdW5jdGlvbiBnZXRFdmVudChpZGVudGlmaWVyKSB7XG4gICAgICByZXR1cm4gaWRlbnRpZmllciA/IHRoaXMuZXZlbnRNYXBbaWRlbnRpZmllcl0gfHwgbnVsbCA6IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8uaGFzRXZlbnQgPSBmdW5jdGlvbiBoYXNFdmVudChpZGVudGlmaWVyKSB7XG4gICAgICByZXR1cm4gaWRlbnRpZmllciBpbiB0aGlzLmV2ZW50TWFwO1xuICAgIH07XG4gICAgX3Byb3RvLmZpbmRJdGVtSW5kZXggPSBmdW5jdGlvbiBmaW5kSXRlbUluZGV4KGl0ZW0sIHRpbWUpIHtcbiAgICAgIGlmIChpdGVtLmV2ZW50KSB7XG4gICAgICAgIC8vIEZpbmQgRXZlbnQgSXRlbVxuICAgICAgICByZXR1cm4gdGhpcy5maW5kRXZlbnRJbmRleChpdGVtLmV2ZW50LmlkZW50aWZpZXIpO1xuICAgICAgfVxuICAgICAgLy8gRmluZCBQcmltYXJ5IEl0ZW1cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaWYgKGl0ZW0ubmV4dEV2ZW50KSB7XG4gICAgICAgIGluZGV4ID0gdGhpcy5maW5kRXZlbnRJbmRleChpdGVtLm5leHRFdmVudC5pZGVudGlmaWVyKSAtIDE7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW0ucHJldmlvdXNFdmVudCkge1xuICAgICAgICBpbmRleCA9IHRoaXMuZmluZEV2ZW50SW5kZXgoaXRlbS5wcmV2aW91c0V2ZW50LmlkZW50aWZpZXIpICsgMTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICBpZiAoaXRlbXMpIHtcbiAgICAgICAgaWYgKCFpdGVtc1tpbmRleF0pIHtcbiAgICAgICAgICBpZiAodGltZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aW1lID0gaXRlbS5zdGFydDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5kZXggPSB0aGlzLmZpbmRJdGVtSW5kZXhBdFRpbWUodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT25seSByZXR1cm4gaW5kZXggb2YgYSBQcmltYXJ5IEl0ZW1cbiAgICAgICAgd2hpbGUgKGluZGV4ID49IDAgJiYgKF9pdGVtcyRpbmRleCA9IGl0ZW1zW2luZGV4XSkgIT0gbnVsbCAmJiBfaXRlbXMkaW5kZXguZXZlbnQpIHtcbiAgICAgICAgICB2YXIgX2l0ZW1zJGluZGV4O1xuICAgICAgICAgIC8vIElmIGluZGV4IGZvdW5kIGlzIGFuIGludGVyc3RpdGlhbCBpdCBpcyBub3QgYSB2YWxpZCByZXN1bHQgYXMgaXQgc2hvdWxkIGhhdmUgYmVlbiBtYXRjaGVkIHVwIHRvcFxuICAgICAgICAgIC8vIGRlY3JlbWVudCB1bnRpbCByZXN1bHQgaXMgbmVnYXRpdmUgKG5vdCBmb3VuZCkgb3IgYSBwcmltYXJ5IHNlZ21lbnRcbiAgICAgICAgICBpbmRleC0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcbiAgICBfcHJvdG8uZmluZEl0ZW1JbmRleEF0VGltZSA9IGZ1bmN0aW9uIGZpbmRJdGVtSW5kZXhBdFRpbWUodGltZWxpbmVQb3MsIHRpbWVsaW5lVHlwZSkge1xuICAgICAgdmFyIGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgIGlmIChpdGVtcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHRpbWVSYW5nZSA9IGl0ZW1zW2ldO1xuICAgICAgICAgIGlmICh0aW1lbGluZVR5cGUgJiYgdGltZWxpbmVUeXBlICE9PSAncHJpbWFyeScpIHtcbiAgICAgICAgICAgIHRpbWVSYW5nZSA9IHRpbWVSYW5nZVt0aW1lbGluZVR5cGVdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGltZWxpbmVQb3MgPT09IHRpbWVSYW5nZS5zdGFydCB8fCB0aW1lbGluZVBvcyA+IHRpbWVSYW5nZS5zdGFydCAmJiB0aW1lbGluZVBvcyA8IHRpbWVSYW5nZS5lbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgX3Byb3RvLmZpbmRKdW1wUmVzdHJpY3RlZEluZGV4ID0gZnVuY3Rpb24gZmluZEp1bXBSZXN0cmljdGVkSW5kZXgoc3RhcnRJbmRleCwgZW5kSW5kZXgpIHtcbiAgICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICBpZiAoaXRlbXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPD0gZW5kSW5kZXg7IGkrKykge1xuICAgICAgICAgIGlmICghaXRlbXNbaV0pIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZXZlbnQgPSBpdGVtc1tpXS5ldmVudDtcbiAgICAgICAgICBpZiAoZXZlbnQgIT0gbnVsbCAmJiBldmVudC5yZXN0cmljdGlvbnMuanVtcCAmJiAhZXZlbnQuYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICBfcHJvdG8uZmluZEV2ZW50SW5kZXggPSBmdW5jdGlvbiBmaW5kRXZlbnRJbmRleChpZGVudGlmaWVyKSB7XG4gICAgICB2YXIgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgICAgaWYgKGl0ZW1zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBpdGVtcy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICB2YXIgX2l0ZW1zJGkkZXZlbnQ7XG4gICAgICAgICAgaWYgKCgoX2l0ZW1zJGkkZXZlbnQgPSBpdGVtc1tpXS5ldmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9pdGVtcyRpJGV2ZW50LmlkZW50aWZpZXIpID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIF9wcm90by5maW5kQXNzZXRJbmRleCA9IGZ1bmN0aW9uIGZpbmRBc3NldEluZGV4KGV2ZW50LCB0aW1lbGluZVBvcykge1xuICAgICAgdmFyIGFzc2V0TGlzdCA9IGV2ZW50LmFzc2V0TGlzdDtcbiAgICAgIHZhciBsZW5ndGggPSBhc3NldExpc3QubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBhc3NldCA9IGFzc2V0TGlzdFtpXTtcbiAgICAgICAgICBpZiAoIWFzc2V0LmVycm9yKSB7XG4gICAgICAgICAgICB2YXIgdGltZWxpbmVTdGFydCA9IGFzc2V0LnRpbWVsaW5lU3RhcnQ7XG4gICAgICAgICAgICBpZiAodGltZWxpbmVQb3MgPT09IHRpbWVsaW5lU3RhcnQgfHwgdGltZWxpbmVQb3MgPiB0aW1lbGluZVN0YXJ0ICYmIHRpbWVsaW5lUG9zIDwgdGltZWxpbmVTdGFydCArIChhc3NldC5kdXJhdGlvbiB8fCAwKSkge1xuICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgX3Byb3RvLnBhcnNlSW50ZXJzdGl0aWFsRGF0ZVJhbmdlcyA9IGZ1bmN0aW9uIHBhcnNlSW50ZXJzdGl0aWFsRGF0ZVJhbmdlcyhtZWRpYVNlbGVjdGlvbiwgZW5hYmxlQXBwZW5kSW5QbGFjZSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICB2YXIgZGV0YWlscyA9IG1lZGlhU2VsZWN0aW9uLm1haW4uZGV0YWlscztcbiAgICAgIHZhciBkYXRlUmFuZ2VzID0gZGV0YWlscy5kYXRlUmFuZ2VzO1xuICAgICAgdmFyIHByZXZpb3VzSW50ZXJzdGl0aWFsRXZlbnRzID0gdGhpcy5ldmVudHM7XG4gICAgICB2YXIgaW50ZXJzdGl0aWFsRXZlbnRzID0gdGhpcy5wYXJzZURhdGVSYW5nZXMoZGF0ZVJhbmdlcywge1xuICAgICAgICB1cmw6IGRldGFpbHMudXJsXG4gICAgICB9LCBlbmFibGVBcHBlbmRJblBsYWNlKTtcbiAgICAgIHZhciBpZHMgPSBPYmplY3Qua2V5cyhkYXRlUmFuZ2VzKTtcbiAgICAgIHZhciByZW1vdmVkSW50ZXJzdGl0aWFscyA9IHByZXZpb3VzSW50ZXJzdGl0aWFsRXZlbnRzID8gcHJldmlvdXNJbnRlcnN0aXRpYWxFdmVudHMuZmlsdGVyKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gIWlkcy5pbmNsdWRlcyhldmVudC5pZGVudGlmaWVyKTtcbiAgICAgIH0pIDogW107XG4gICAgICBpZiAoaW50ZXJzdGl0aWFsRXZlbnRzLmxlbmd0aCkge1xuICAgICAgICAvLyBwcmUtcm9sbHMsIHBvc3Qtcm9sbHMsIGFuZCBldmVudHMgd2l0aCB0aGUgc2FtZSBzdGFydCB0aW1lIGFyZSBwbGF5ZWQgaW4gcGxheWxpc3QgdGFnIG9yZGVyXG4gICAgICAgIC8vIGFsbCBvdGhlciBldmVudHMgYXJlIG9yZGVyZWQgYnkgc3RhcnQgdGltZVxuICAgICAgICBpbnRlcnN0aXRpYWxFdmVudHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHZhciBhUHJlID0gYS5jdWUucHJlO1xuICAgICAgICAgIHZhciBhUG9zdCA9IGEuY3VlLnBvc3Q7XG4gICAgICAgICAgdmFyIGJQcmUgPSBiLmN1ZS5wcmU7XG4gICAgICAgICAgdmFyIGJQb3N0ID0gYi5jdWUucG9zdDtcbiAgICAgICAgICBpZiAoYVByZSAmJiAhYlByZSkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYlByZSAmJiAhYVByZSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhUG9zdCAmJiAhYlBvc3QpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYlBvc3QgJiYgIWFQb3N0KSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghYVByZSAmJiAhYlByZSAmJiAhYVBvc3QgJiYgIWJQb3N0KSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRBID0gYS5zdGFydFRpbWU7XG4gICAgICAgICAgICB2YXIgc3RhcnRCID0gYi5zdGFydFRpbWU7XG4gICAgICAgICAgICBpZiAoc3RhcnRBICE9PSBzdGFydEIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0QSAtIHN0YXJ0QjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGEuZGF0ZVJhbmdlLnRhZ09yZGVyIC0gYi5kYXRlUmFuZ2UudGFnT3JkZXI7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5ldmVudHMgPSBpbnRlcnN0aXRpYWxFdmVudHM7XG5cbiAgICAgIC8vIENsZWFyIHJlbW92ZWQgRGF0ZVJhbmdlcyBmcm9tIGJ1ZmZlcmVkIGxpc3QgKGtpbGxzIHBsYXliYWNrIG9mIGFjdGl2ZSBJbnRlcnN0aXRpYWxzKVxuICAgICAgcmVtb3ZlZEludGVyc3RpdGlhbHMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJzdGl0aWFsKSB7XG4gICAgICAgIF90aGlzMi5yZW1vdmVFdmVudChpbnRlcnN0aXRpYWwpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnVwZGF0ZVNjaGVkdWxlKG1lZGlhU2VsZWN0aW9uLCByZW1vdmVkSW50ZXJzdGl0aWFscyk7XG4gICAgfTtcbiAgICBfcHJvdG8udXBkYXRlU2NoZWR1bGUgPSBmdW5jdGlvbiB1cGRhdGVTY2hlZHVsZShtZWRpYVNlbGVjdGlvbiwgcmVtb3ZlZEludGVyc3RpdGlhbHMpIHtcbiAgICAgIGlmIChyZW1vdmVkSW50ZXJzdGl0aWFscyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJlbW92ZWRJbnRlcnN0aXRpYWxzID0gW107XG4gICAgICB9XG4gICAgICB2YXIgZXZlbnRzID0gdGhpcy5ldmVudHMgfHwgW107XG4gICAgICBpZiAoZXZlbnRzLmxlbmd0aCB8fCByZW1vdmVkSW50ZXJzdGl0aWFscy5sZW5ndGggfHwgdGhpcy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHZhciBjdXJyZW50SXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgICAgICB2YXIgdXBkYXRlZEl0ZW1zID0gdGhpcy5wYXJzZVNjaGVkdWxlKGV2ZW50cywgbWVkaWFTZWxlY3Rpb24pO1xuICAgICAgICB2YXIgdXBkYXRlZCA9IHJlbW92ZWRJbnRlcnN0aXRpYWxzLmxlbmd0aCB8fCAoY3VycmVudEl0ZW1zID09IG51bGwgPyB2b2lkIDAgOiBjdXJyZW50SXRlbXMubGVuZ3RoKSAhPT0gdXBkYXRlZEl0ZW1zLmxlbmd0aCB8fCB1cGRhdGVkSXRlbXMuc29tZShmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgIHJldHVybiBNYXRoLmFicyhpdGVtLnBsYXlvdXQuc3RhcnQgLSBjdXJyZW50SXRlbXNbaV0ucGxheW91dC5zdGFydCkgPiAwLjAwNSB8fCBNYXRoLmFicyhpdGVtLnBsYXlvdXQuZW5kIC0gY3VycmVudEl0ZW1zW2ldLnBsYXlvdXQuZW5kKSA+IDAuMDA1O1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHVwZGF0ZWQpIHtcbiAgICAgICAgICB0aGlzLml0ZW1zID0gdXBkYXRlZEl0ZW1zO1xuICAgICAgICAgIC8vIGNhbGwgaW50ZXJzdGl0aWFscy1jb250cm9sbGVyIG9uU2NoZWR1bGVVcGRhdGVkKClcbiAgICAgICAgICB0aGlzLm9uU2NoZWR1bGVVcGRhdGUocmVtb3ZlZEludGVyc3RpdGlhbHMsIGN1cnJlbnRJdGVtcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5wYXJzZURhdGVSYW5nZXMgPSBmdW5jdGlvbiBwYXJzZURhdGVSYW5nZXMoZGF0ZVJhbmdlcywgYmFzZURhdGEsIGVuYWJsZUFwcGVuZEluUGxhY2UpIHtcbiAgICAgIHZhciBpbnRlcnN0aXRpYWxFdmVudHMgPSBbXTtcbiAgICAgIHZhciBpZHMgPSBPYmplY3Qua2V5cyhkYXRlUmFuZ2VzKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBpZCA9IGlkc1tpXTtcbiAgICAgICAgdmFyIGRhdGVSYW5nZSA9IGRhdGVSYW5nZXNbaWRdO1xuICAgICAgICBpZiAoZGF0ZVJhbmdlLmlzSW50ZXJzdGl0aWFsKSB7XG4gICAgICAgICAgdmFyIGludGVyc3RpdGlhbCA9IHRoaXMuZXZlbnRNYXBbaWRdO1xuICAgICAgICAgIGlmIChpbnRlcnN0aXRpYWwpIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBJbnRlcnN0aXRpYWxFdmVudCBhbHJlYWR5IHBhcnNlZCBhbmQgbWFwcGVkXG4gICAgICAgICAgICAvLyBUaGlzIHJldGFpbnMgYWxyZWFkeSBsb2FkZWQgZHVyYXRpb24gYW5kIGxvYWRlZCBhc3NldCBsaXN0IGluZm9cbiAgICAgICAgICAgIGludGVyc3RpdGlhbC5zZXREYXRlUmFuZ2UoZGF0ZVJhbmdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW50ZXJzdGl0aWFsID0gbmV3IEludGVyc3RpdGlhbEV2ZW50KGRhdGVSYW5nZSwgYmFzZURhdGEpO1xuICAgICAgICAgICAgdGhpcy5ldmVudE1hcFtpZF0gPSBpbnRlcnN0aXRpYWw7XG4gICAgICAgICAgICBpZiAoZW5hYmxlQXBwZW5kSW5QbGFjZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgaW50ZXJzdGl0aWFsLmFwcGVuZEluUGxhY2UgPSBlbmFibGVBcHBlbmRJblBsYWNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpbnRlcnN0aXRpYWxFdmVudHMucHVzaChpbnRlcnN0aXRpYWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaW50ZXJzdGl0aWFsRXZlbnRzO1xuICAgIH07XG4gICAgX3Byb3RvLnBhcnNlU2NoZWR1bGUgPSBmdW5jdGlvbiBwYXJzZVNjaGVkdWxlKGludGVyc3RpdGlhbEV2ZW50cywgbWVkaWFTZWxlY3Rpb24pIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IFtdO1xuICAgICAgdmFyIGRldGFpbHMgPSBtZWRpYVNlbGVjdGlvbi5tYWluLmRldGFpbHM7XG4gICAgICB2YXIgcHJpbWFyeUR1cmF0aW9uID0gZGV0YWlscy5saXZlID8gSW5maW5pdHkgOiBkZXRhaWxzLmVkZ2U7XG4gICAgICB2YXIgcGxheW91dER1cmF0aW9uID0gMDtcblxuICAgICAgLy8gRmlsdGVyIGV2ZW50cyB0aGF0IGhhdmUgZXJyb3JlZCBmcm9tIHRoZSBzY2hlZHVsZSAoUHJpbWFyeSBmYWxsYmFjaylcbiAgICAgIGludGVyc3RpdGlhbEV2ZW50cyA9IGludGVyc3RpdGlhbEV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiAhZXZlbnQuZXJyb3IgJiYgIShldmVudC5jdWUub25jZSAmJiBldmVudC5oYXNQbGF5ZWQpO1xuICAgICAgfSk7XG4gICAgICBpZiAoaW50ZXJzdGl0aWFsRXZlbnRzLmxlbmd0aCkge1xuICAgICAgICAvLyBVcGRhdGUgU2NoZWR1bGVcbiAgICAgICAgdGhpcy5yZXNvbHZlT2Zmc2V0cyhpbnRlcnN0aXRpYWxFdmVudHMsIG1lZGlhU2VsZWN0aW9uKTtcblxuICAgICAgICAvLyBQb3B1bGF0ZSBTY2hlZHVsZSB3aXRoIEludGVyc3RpdGlhbCBFdmVudCBhbmQgUHJpbWFyeSBTZWdtZW50IEl0ZW1zXG4gICAgICAgIHZhciBwcmltYXJ5UG9zaXRpb24gPSAwO1xuICAgICAgICB2YXIgaW50ZWdyYXRlZFRpbWUgPSAwO1xuICAgICAgICBpbnRlcnN0aXRpYWxFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJzdGl0aWFsLCBpKSB7XG4gICAgICAgICAgdmFyIHByZXJvbGwgPSBpbnRlcnN0aXRpYWwuY3VlLnByZTtcbiAgICAgICAgICB2YXIgcG9zdHJvbGwgPSBpbnRlcnN0aXRpYWwuY3VlLnBvc3Q7XG4gICAgICAgICAgdmFyIHByZXZpb3VzRXZlbnQgPSBpbnRlcnN0aXRpYWxFdmVudHNbaSAtIDFdIHx8IG51bGw7XG4gICAgICAgICAgdmFyIGFwcGVuZEluUGxhY2UgPSBpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZTtcbiAgICAgICAgICB2YXIgZXZlbnRTdGFydCA9IHBvc3Ryb2xsID8gcHJpbWFyeUR1cmF0aW9uIDogaW50ZXJzdGl0aWFsLnN0YXJ0T2Zmc2V0O1xuICAgICAgICAgIHZhciBpbnRlcnN0aXRpYWxEdXJhdGlvbiA9IGludGVyc3RpdGlhbC5kdXJhdGlvbjtcbiAgICAgICAgICB2YXIgdGltZWxpbmVEdXJhdGlvbiA9IGludGVyc3RpdGlhbC50aW1lbGluZU9jY3VwYW5jeSA9PT0gVGltZWxpbmVPY2N1cGFuY3kuUmFuZ2UgPyBpbnRlcnN0aXRpYWxEdXJhdGlvbiA6IDA7XG4gICAgICAgICAgdmFyIHJlc3VtcHRpb25PZmZzZXQgPSBpbnRlcnN0aXRpYWwucmVzdW1wdGlvbk9mZnNldDtcbiAgICAgICAgICB2YXIgaW5TYW1lU3RhcnRUaW1lU2VxdWVuY2UgPSAocHJldmlvdXNFdmVudCA9PSBudWxsID8gdm9pZCAwIDogcHJldmlvdXNFdmVudC5zdGFydFRpbWUpID09PSBldmVudFN0YXJ0O1xuICAgICAgICAgIHZhciBzdGFydCA9IGV2ZW50U3RhcnQgKyBpbnRlcnN0aXRpYWwuY3VtdWxhdGl2ZUR1cmF0aW9uO1xuICAgICAgICAgIHZhciBlbmQgPSBhcHBlbmRJblBsYWNlID8gc3RhcnQgKyBpbnRlcnN0aXRpYWxEdXJhdGlvbiA6IGV2ZW50U3RhcnQgKyByZXN1bXB0aW9uT2Zmc2V0O1xuICAgICAgICAgIGlmIChwcmVyb2xsIHx8ICFwb3N0cm9sbCAmJiBldmVudFN0YXJ0IDw9IDApIHtcbiAgICAgICAgICAgIC8vIHByZXJvbGwgb3IgaW4tcHJvZ3Jlc3MgbWlkcm9sbFxuICAgICAgICAgICAgdmFyIGludGVncmF0ZWRTdGFydCA9IGludGVncmF0ZWRUaW1lO1xuICAgICAgICAgICAgaW50ZWdyYXRlZFRpbWUgKz0gdGltZWxpbmVEdXJhdGlvbjtcbiAgICAgICAgICAgIGludGVyc3RpdGlhbC50aW1lbGluZVN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICB2YXIgcGxheW91dFN0YXJ0ID0gcGxheW91dER1cmF0aW9uO1xuICAgICAgICAgICAgcGxheW91dER1cmF0aW9uICs9IGludGVyc3RpdGlhbER1cmF0aW9uO1xuICAgICAgICAgICAgc2NoZWR1bGUucHVzaCh7XG4gICAgICAgICAgICAgIGV2ZW50OiBpbnRlcnN0aXRpYWwsXG4gICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgICAgZW5kOiBlbmQsXG4gICAgICAgICAgICAgIHBsYXlvdXQ6IHtcbiAgICAgICAgICAgICAgICBzdGFydDogcGxheW91dFN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDogcGxheW91dER1cmF0aW9uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGludGVncmF0ZWQ6IHtcbiAgICAgICAgICAgICAgICBzdGFydDogaW50ZWdyYXRlZFN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDogaW50ZWdyYXRlZFRpbWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChldmVudFN0YXJ0IDw9IHByaW1hcnlEdXJhdGlvbikge1xuICAgICAgICAgICAgaWYgKCFpblNhbWVTdGFydFRpbWVTZXF1ZW5jZSkge1xuICAgICAgICAgICAgICB2YXIgc2VnbWVudER1cmF0aW9uID0gZXZlbnRTdGFydCAtIHByaW1hcnlQb3NpdGlvbjtcbiAgICAgICAgICAgICAgLy8gRG8gbm90IHNjaGVkdWxlIGEgcHJpbWFyeSBzZWdtZW50IGlmIGludGVyc3RpdGlhbHMgYXJlIGFidXR0aW5nIGJ5IGxlc3MgdGhhbiBBQlVUVElOR19USFJFU0hPTERfU0VDT05EU1xuICAgICAgICAgICAgICBpZiAoc2VnbWVudER1cmF0aW9uID4gQUJVVFRJTkdfVEhSRVNIT0xEX1NFQ09ORFMpIHtcbiAgICAgICAgICAgICAgICAvLyBwcmltYXJ5IHNlZ21lbnRcbiAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVTdGFydCA9IHByaW1hcnlQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgX2ludGVncmF0ZWRTdGFydCA9IGludGVncmF0ZWRUaW1lO1xuICAgICAgICAgICAgICAgIGludGVncmF0ZWRUaW1lICs9IHNlZ21lbnREdXJhdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgX3BsYXlvdXRTdGFydCA9IHBsYXlvdXREdXJhdGlvbjtcbiAgICAgICAgICAgICAgICBwbGF5b3V0RHVyYXRpb24gKz0gc2VnbWVudER1cmF0aW9uO1xuICAgICAgICAgICAgICAgIHZhciBwcmltYXJ5U2VnbWVudCA9IHtcbiAgICAgICAgICAgICAgICAgIHByZXZpb3VzRXZlbnQ6IGludGVyc3RpdGlhbEV2ZW50c1tpIC0gMV0gfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgIG5leHRFdmVudDogaW50ZXJzdGl0aWFsLFxuICAgICAgICAgICAgICAgICAgc3RhcnQ6IHRpbWVsaW5lU3RhcnQsXG4gICAgICAgICAgICAgICAgICBlbmQ6IHRpbWVsaW5lU3RhcnQgKyBzZWdtZW50RHVyYXRpb24sXG4gICAgICAgICAgICAgICAgICBwbGF5b3V0OiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBfcGxheW91dFN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IHBsYXlvdXREdXJhdGlvblxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGludGVncmF0ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IF9pbnRlZ3JhdGVkU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogaW50ZWdyYXRlZFRpbWVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlLnB1c2gocHJpbWFyeVNlZ21lbnQpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlZ21lbnREdXJhdGlvbiA+IDAgJiYgcHJldmlvdXNFdmVudCkge1xuICAgICAgICAgICAgICAgIC8vIEFkZCBwcmV2aW91cyBldmVudCBgcmVzdW1lVGltZWAgKGJhc2VkIG9uIGR1cmF0aW9uIG9yIHJlc3VtZU9mZnNldCkgc28gdGhhdCBpdCBlbmRzIGFsaWduZWQgd2l0aCB0aGlzIG9uZVxuICAgICAgICAgICAgICAgIHByZXZpb3VzRXZlbnQuY3VtdWxhdGl2ZUR1cmF0aW9uICs9IHNlZ21lbnREdXJhdGlvbjtcbiAgICAgICAgICAgICAgICBzY2hlZHVsZVtzY2hlZHVsZS5sZW5ndGggLSAxXS5lbmQgPSBldmVudFN0YXJ0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBtaWRyb2xsIC8gcG9zdHJvbGxcbiAgICAgICAgICAgIGlmIChwb3N0cm9sbCkge1xuICAgICAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGludGVyc3RpdGlhbC50aW1lbGluZVN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICB2YXIgX2ludGVncmF0ZWRTdGFydDIgPSBpbnRlZ3JhdGVkVGltZTtcbiAgICAgICAgICAgIGludGVncmF0ZWRUaW1lICs9IHRpbWVsaW5lRHVyYXRpb247XG4gICAgICAgICAgICB2YXIgX3BsYXlvdXRTdGFydDIgPSBwbGF5b3V0RHVyYXRpb247XG4gICAgICAgICAgICBwbGF5b3V0RHVyYXRpb24gKz0gaW50ZXJzdGl0aWFsRHVyYXRpb247XG4gICAgICAgICAgICBzY2hlZHVsZS5wdXNoKHtcbiAgICAgICAgICAgICAgZXZlbnQ6IGludGVyc3RpdGlhbCxcbiAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgICBlbmQ6IGVuZCxcbiAgICAgICAgICAgICAgcGxheW91dDoge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBfcGxheW91dFN0YXJ0MixcbiAgICAgICAgICAgICAgICBlbmQ6IHBsYXlvdXREdXJhdGlvblxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBpbnRlZ3JhdGVkOiB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IF9pbnRlZ3JhdGVkU3RhcnQyLFxuICAgICAgICAgICAgICAgIGVuZDogaW50ZWdyYXRlZFRpbWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEludGVyc3RpdGlhbCBzdGFydHMgYWZ0ZXIgZW5kIG9mIHByaW1hcnkgVk9EIC0gbm90IGluY2x1ZGVkIGluIHNjaGVkdWxlXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXN1bWVUaW1lID0gaW50ZXJzdGl0aWFsLnJlc3VtZVRpbWU7XG4gICAgICAgICAgaWYgKHBvc3Ryb2xsIHx8IHJlc3VtZVRpbWUgPiBwcmltYXJ5RHVyYXRpb24pIHtcbiAgICAgICAgICAgIHByaW1hcnlQb3NpdGlvbiA9IHByaW1hcnlEdXJhdGlvbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJpbWFyeVBvc2l0aW9uID0gcmVzdW1lVGltZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocHJpbWFyeVBvc2l0aW9uIDwgcHJpbWFyeUR1cmF0aW9uKSB7XG4gICAgICAgICAgdmFyIF9zY2hlZHVsZTtcbiAgICAgICAgICAvLyBsYXN0IHByaW1hcnkgc2VnbWVudFxuICAgICAgICAgIHZhciB0aW1lbGluZVN0YXJ0ID0gcHJpbWFyeVBvc2l0aW9uO1xuICAgICAgICAgIHZhciBpbnRlZ3JhdGVkU3RhcnQgPSBpbnRlZ3JhdGVkVGltZTtcbiAgICAgICAgICB2YXIgc2VnbWVudER1cmF0aW9uID0gcHJpbWFyeUR1cmF0aW9uIC0gcHJpbWFyeVBvc2l0aW9uO1xuICAgICAgICAgIGludGVncmF0ZWRUaW1lICs9IHNlZ21lbnREdXJhdGlvbjtcbiAgICAgICAgICB2YXIgcGxheW91dFN0YXJ0ID0gcGxheW91dER1cmF0aW9uO1xuICAgICAgICAgIHBsYXlvdXREdXJhdGlvbiArPSBzZWdtZW50RHVyYXRpb247XG4gICAgICAgICAgc2NoZWR1bGUucHVzaCh7XG4gICAgICAgICAgICBwcmV2aW91c0V2ZW50OiAoKF9zY2hlZHVsZSA9IHNjaGVkdWxlW3NjaGVkdWxlLmxlbmd0aCAtIDFdKSA9PSBudWxsID8gdm9pZCAwIDogX3NjaGVkdWxlLmV2ZW50KSB8fCBudWxsLFxuICAgICAgICAgICAgbmV4dEV2ZW50OiBudWxsLFxuICAgICAgICAgICAgc3RhcnQ6IHByaW1hcnlQb3NpdGlvbixcbiAgICAgICAgICAgIGVuZDogdGltZWxpbmVTdGFydCArIHNlZ21lbnREdXJhdGlvbixcbiAgICAgICAgICAgIHBsYXlvdXQ6IHtcbiAgICAgICAgICAgICAgc3RhcnQ6IHBsYXlvdXRTdGFydCxcbiAgICAgICAgICAgICAgZW5kOiBwbGF5b3V0RHVyYXRpb25cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnRlZ3JhdGVkOiB7XG4gICAgICAgICAgICAgIHN0YXJ0OiBpbnRlZ3JhdGVkU3RhcnQsXG4gICAgICAgICAgICAgIGVuZDogaW50ZWdyYXRlZFRpbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldER1cmF0aW9ucyhwcmltYXJ5RHVyYXRpb24sIHBsYXlvdXREdXJhdGlvbiwgaW50ZWdyYXRlZFRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm8gaW50ZXJzdGlhbHMgLSBzY2hlZHVsZSBpcyBvbmUgcHJpbWFyeSBzZWdtZW50XG4gICAgICAgIHZhciBzdGFydCA9IDA7XG4gICAgICAgIHNjaGVkdWxlLnB1c2goe1xuICAgICAgICAgIHByZXZpb3VzRXZlbnQ6IG51bGwsXG4gICAgICAgICAgbmV4dEV2ZW50OiBudWxsLFxuICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICBlbmQ6IHByaW1hcnlEdXJhdGlvbixcbiAgICAgICAgICBwbGF5b3V0OiB7XG4gICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IHByaW1hcnlEdXJhdGlvblxuICAgICAgICAgIH0sXG4gICAgICAgICAgaW50ZWdyYXRlZDoge1xuICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBwcmltYXJ5RHVyYXRpb25cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldER1cmF0aW9ucyhwcmltYXJ5RHVyYXRpb24sIHByaW1hcnlEdXJhdGlvbiwgcHJpbWFyeUR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzY2hlZHVsZTtcbiAgICB9O1xuICAgIF9wcm90by5zZXREdXJhdGlvbnMgPSBmdW5jdGlvbiBzZXREdXJhdGlvbnMocHJpbWFyeSwgcGxheW91dCwgaW50ZWdyYXRlZCkge1xuICAgICAgdGhpcy5kdXJhdGlvbnMgPSB7XG4gICAgICAgIHByaW1hcnk6IHByaW1hcnksXG4gICAgICAgIHBsYXlvdXQ6IHBsYXlvdXQsXG4gICAgICAgIGludGVncmF0ZWQ6IGludGVncmF0ZWRcbiAgICAgIH07XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzb2x2ZU9mZnNldHMgPSBmdW5jdGlvbiByZXNvbHZlT2Zmc2V0cyhpbnRlcnN0aXRpYWxFdmVudHMsIG1lZGlhU2VsZWN0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIHZhciBkZXRhaWxzID0gbWVkaWFTZWxlY3Rpb24ubWFpbi5kZXRhaWxzO1xuICAgICAgdmFyIHByaW1hcnlEdXJhdGlvbiA9IGRldGFpbHMubGl2ZSA/IEluZmluaXR5IDogZGV0YWlscy5lZGdlO1xuXG4gICAgICAvLyBGaXJzdCByZXNvbHZlIGN1bXVsYXRpdmUgcmVzdW1wdGlvbiBvZmZzZXRzIGZvciBJbnRlcnN0aXRpYWxzIHRoYXQgc3RhcnQgYXQgdGhlIHNhbWUgRGF0ZVRpbWVcbiAgICAgIHZhciBjdW11bGF0aXZlRHVyYXRpb24gPSAwO1xuICAgICAgdmFyIGxhc3RTY2hlZHVsZWRTdGFydCA9IC0xO1xuICAgICAgaW50ZXJzdGl0aWFsRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGludGVyc3RpdGlhbCwgaSkge1xuICAgICAgICB2YXIgcHJlcm9sbCA9IGludGVyc3RpdGlhbC5jdWUucHJlO1xuICAgICAgICB2YXIgcG9zdHJvbGwgPSBpbnRlcnN0aXRpYWwuY3VlLnBvc3Q7XG4gICAgICAgIHZhciBldmVudFN0YXJ0ID0gcHJlcm9sbCA/IDAgOiBwb3N0cm9sbCA/IHByaW1hcnlEdXJhdGlvbiA6IGludGVyc3RpdGlhbC5zdGFydFRpbWU7XG4gICAgICAgIF90aGlzMy51cGRhdGVBc3NldER1cmF0aW9ucyhpbnRlcnN0aXRpYWwpO1xuXG4gICAgICAgIC8vIFgtUkVTVU1FLU9GRlNFVCB2YWx1ZXMgb2YgaW50ZXJzdGl0aWFscyBzY2hlZHVsZWQgYXQgdGhlIHNhbWUgdGltZSBhcmUgY3VtdWxhdGl2ZVxuICAgICAgICB2YXIgaW5TYW1lU3RhcnRUaW1lU2VxdWVuY2UgPSBsYXN0U2NoZWR1bGVkU3RhcnQgPT09IGV2ZW50U3RhcnQ7XG4gICAgICAgIGlmIChpblNhbWVTdGFydFRpbWVTZXF1ZW5jZSkge1xuICAgICAgICAgIGludGVyc3RpdGlhbC5jdW11bGF0aXZlRHVyYXRpb24gPSBjdW11bGF0aXZlRHVyYXRpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VtdWxhdGl2ZUR1cmF0aW9uID0gMDtcbiAgICAgICAgICBsYXN0U2NoZWR1bGVkU3RhcnQgPSBldmVudFN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghcG9zdHJvbGwgJiYgaW50ZXJzdGl0aWFsLnNuYXBPcHRpb25zLmluKSB7XG4gICAgICAgICAgLy8gRklYTUU6IEluY2x1ZGUgYXVkaW8gcGxheWxpc3QgaW4gc25hcHBpbmdcbiAgICAgICAgICBpbnRlcnN0aXRpYWwucmVzdW1lQW5jaG9yID0gZmluZEZyYWdtZW50QnlQVFMobnVsbCwgZGV0YWlscy5mcmFnbWVudHMsIGludGVyc3RpdGlhbC5zdGFydE9mZnNldCArIGludGVyc3RpdGlhbC5yZXN1bXB0aW9uT2Zmc2V0LCAwLCAwKSB8fCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgaWYgcHJpbWFyeSBmcmFnbWVudHMgYWxpZ24gd2l0aCByZXN1bXB0aW9uIG9mZnNldCBhbmQgZGlzYWJsZSBhcHBlbmRJblBsYWNlIGlmIHRoZXkgZG8gbm90XG4gICAgICAgIGlmIChpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZSAmJiAhaW50ZXJzdGl0aWFsLmFwcGVuZEluUGxhY2VTdGFydGVkKSB7XG4gICAgICAgICAgdmFyIGFsaWduZWRTZWdtZW50U3RhcnQgPSBfdGhpczMucHJpbWFyeUNhblJlc3VtZUluUGxhY2VBdChpbnRlcnN0aXRpYWwsIG1lZGlhU2VsZWN0aW9uKTtcbiAgICAgICAgICBpZiAoIWFsaWduZWRTZWdtZW50U3RhcnQpIHtcbiAgICAgICAgICAgIGludGVyc3RpdGlhbC5hcHBlbmRJblBsYWNlID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaW50ZXJzdGl0aWFsLmFwcGVuZEluUGxhY2UgJiYgaSArIDEgPCBpbnRlcnN0aXRpYWxFdmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gYWJ1dHRpbmcgSW50ZXJzdGl0aWFscyBtdXN0IHVzZSB0aGUgc2FtZSBNZWRpYVNvdXJjZSBzdHJhdGVneSwgdGhpcyBhcHBsaWVzIHRvIGFsbCB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBiYWNrIHRvIGJhY2s6XG4gICAgICAgICAgdmFyIHRpbWVCZXR3ZWVuID0gaW50ZXJzdGl0aWFsRXZlbnRzW2kgKyAxXS5zdGFydFRpbWUgLSBpbnRlcnN0aXRpYWxFdmVudHNbaV0ucmVzdW1lVGltZTtcbiAgICAgICAgICBpZiAodGltZUJldHdlZW4gPCBBQlVUVElOR19USFJFU0hPTERfU0VDT05EUykge1xuICAgICAgICAgICAgaW50ZXJzdGl0aWFsRXZlbnRzW2kgKyAxXS5hcHBlbmRJblBsYWNlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoaW50ZXJzdGl0aWFsRXZlbnRzW2kgKyAxXS5hcHBlbmRJblBsYWNlKSB7XG4gICAgICAgICAgICAgIF90aGlzMy53YXJuKFwiQ291bGQgbm90IGNoYW5nZSBhcHBlbmQgc3RyYXRlZ3kgZm9yIGFidXR0aW5nIGV2ZW50IFwiICsgaW50ZXJzdGl0aWFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIGN1bXVsYXRpdmVEdXJhdGlvbiBmb3IgbmV4dCBhYnV0dGluZyBpbnRlcnN0aXRpYWwgd2l0aCB0aGUgc2FtZSBzdGFydCBkYXRlXG4gICAgICAgIHZhciByZXN1bWVPZmZzZXQgPSBpc0Zpbml0ZU51bWJlcihpbnRlcnN0aXRpYWwucmVzdW1lT2Zmc2V0KSA/IGludGVyc3RpdGlhbC5yZXN1bWVPZmZzZXQgOiBpbnRlcnN0aXRpYWwuZHVyYXRpb247XG4gICAgICAgIGN1bXVsYXRpdmVEdXJhdGlvbiArPSByZXN1bWVPZmZzZXQ7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5wcmltYXJ5Q2FuUmVzdW1lSW5QbGFjZUF0ID0gZnVuY3Rpb24gcHJpbWFyeUNhblJlc3VtZUluUGxhY2VBdChpbnRlcnN0aXRpYWwsIG1lZGlhU2VsZWN0aW9uKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcbiAgICAgIHZhciByZXN1bWVUaW1lID0gaW50ZXJzdGl0aWFsLnJlc3VtZVRpbWU7XG4gICAgICB2YXIgcmVzdW1lc0luUGxhY2VBdCA9IGludGVyc3RpdGlhbC5zdGFydFRpbWUgKyBpbnRlcnN0aXRpYWwucmVzdW1wdGlvbk9mZnNldDtcbiAgICAgIGlmIChNYXRoLmFicyhyZXN1bWVUaW1lIC0gcmVzdW1lc0luUGxhY2VBdCkgPiBBTElHTkVEX0VORF9USFJFU0hPTERfU0VDT05EUykge1xuICAgICAgICB0aGlzLmxvZyhcIlxcXCJcIiArIGludGVyc3RpdGlhbC5pZGVudGlmaWVyICsgXCJcXFwiIHJlc3VtcHRpb24gXCIgKyByZXN1bWVUaW1lICsgXCIgbm90IGFsaWduZWQgd2l0aCBlc3RpbWF0ZWQgdGltZWxpbmUgZW5kIFwiICsgcmVzdW1lc0luUGxhY2VBdCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghbWVkaWFTZWxlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5sb2coXCJcXFwiXCIgKyBpbnRlcnN0aXRpYWwuaWRlbnRpZmllciArIFwiXFxcIiByZXN1bXB0aW9uIFwiICsgcmVzdW1lVGltZSArIFwiIGNhbiBub3QgYmUgYWxpZ25lZCB3aXRoIG1lZGlhIChub25lIHNlbGVjdGVkKVwiKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBsYXlsaXN0cyA9IE9iamVjdC5rZXlzKG1lZGlhU2VsZWN0aW9uKTtcbiAgICAgIHJldHVybiAhcGxheWxpc3RzLnNvbWUoZnVuY3Rpb24gKHBsYXlsaXN0VHlwZSkge1xuICAgICAgICB2YXIgZGV0YWlscyA9IG1lZGlhU2VsZWN0aW9uW3BsYXlsaXN0VHlwZV0uZGV0YWlscztcbiAgICAgICAgdmFyIHBsYXlsaXN0RW5kID0gZGV0YWlscy5lZGdlO1xuICAgICAgICBpZiAocmVzdW1lVGltZSA+PSBwbGF5bGlzdEVuZCkge1xuICAgICAgICAgIC8vIExpdmUgcGxheWJhY2sgLSByZXN1bXB0aW9uIHNlZ21lbnRzIGFyZSBub3QgeWV0IGF2YWlsYWJsZVxuICAgICAgICAgIF90aGlzNC5sb2coXCJcXFwiXCIgKyBpbnRlcnN0aXRpYWwuaWRlbnRpZmllciArIFwiXFxcIiByZXN1bXB0aW9uIFwiICsgcmVzdW1lVGltZSArIFwiIHBhc3QgXCIgKyBwbGF5bGlzdFR5cGUgKyBcIiBwbGF5bGlzdCBlbmQgXCIgKyBwbGF5bGlzdEVuZCk7XG4gICAgICAgICAgLy8gQXNzdW1lIGFsaWdubWVudCBpcyBwb3NzaWJsZSAob3IgcmVzZXQgY2FuIHRha2UgcGxhY2UpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGFydEZyYWdtZW50ID0gZmluZEZyYWdtZW50QnlQVFMobnVsbCwgZGV0YWlscy5mcmFnbWVudHMsIHJlc3VtZVRpbWUpO1xuICAgICAgICBpZiAoIXN0YXJ0RnJhZ21lbnQpIHtcbiAgICAgICAgICBfdGhpczQubG9nKFwiXFxcIlwiICsgaW50ZXJzdGl0aWFsLmlkZW50aWZpZXIgKyBcIlxcXCIgcmVzdW1wdGlvbiBcIiArIHJlc3VtZVRpbWUgKyBcIiBkb2VzIG5vdCBhbGlnbiB3aXRoIGFueSBmcmFnbWVudHMgaW4gXCIgKyBwbGF5bGlzdFR5cGUgKyBcIiBwbGF5bGlzdCAoXCIgKyBkZXRhaWxzLmZyYWdTdGFydCArIFwiLVwiICsgZGV0YWlscy5mcmFnbWVudEVuZCArIFwiKVwiKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWxsb3dhbmNlID0gcGxheWxpc3RUeXBlID09PSAnYXVkaW8nID8gMC4xNzUgOiAwO1xuICAgICAgICB2YXIgYWxpZ25lZFdpdGhTZWdtZW50ID0gTWF0aC5hYnMoc3RhcnRGcmFnbWVudC5zdGFydCAtIHJlc3VtZVRpbWUpIDwgQUxJR05FRF9FTkRfVEhSRVNIT0xEX1NFQ09ORFMgKyBhbGxvd2FuY2UgfHwgTWF0aC5hYnMoc3RhcnRGcmFnbWVudC5lbmQgLSByZXN1bWVUaW1lKSA8IEFMSUdORURfRU5EX1RIUkVTSE9MRF9TRUNPTkRTICsgYWxsb3dhbmNlO1xuICAgICAgICBpZiAoIWFsaWduZWRXaXRoU2VnbWVudCkge1xuICAgICAgICAgIF90aGlzNC5sb2coXCJcXFwiXCIgKyBpbnRlcnN0aXRpYWwuaWRlbnRpZmllciArIFwiXFxcIiByZXN1bXB0aW9uIFwiICsgcmVzdW1lVGltZSArIFwiIG5vdCBhbGlnbmVkIHdpdGggXCIgKyBwbGF5bGlzdFR5cGUgKyBcIiBmcmFnbWVudCBib3VuZHMgKFwiICsgc3RhcnRGcmFnbWVudC5zdGFydCArIFwiLVwiICsgc3RhcnRGcmFnbWVudC5lbmQgKyBcIiBzbjogXCIgKyBzdGFydEZyYWdtZW50LnNuICsgXCIgY2M6IFwiICsgc3RhcnRGcmFnbWVudC5jYyArIFwiKVwiKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by51cGRhdGVBc3NldER1cmF0aW9ucyA9IGZ1bmN0aW9uIHVwZGF0ZUFzc2V0RHVyYXRpb25zKGludGVyc3RpdGlhbCkge1xuICAgICAgaWYgKCFpbnRlcnN0aXRpYWwuYXNzZXRMaXN0TG9hZGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBldmVudFN0YXJ0ID0gaW50ZXJzdGl0aWFsLnRpbWVsaW5lU3RhcnQ7XG4gICAgICB2YXIgc3VtRHVyYXRpb24gPSAwO1xuICAgICAgdmFyIGhhc1Vua25vd25EdXJhdGlvbiA9IGZhbHNlO1xuICAgICAgdmFyIGhhc0Vycm9ycyA9IGZhbHNlO1xuICAgICAgaW50ZXJzdGl0aWFsLmFzc2V0TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhc3NldCwgaSkge1xuICAgICAgICB2YXIgdGltZWxpbmVTdGFydCA9IGV2ZW50U3RhcnQgKyBzdW1EdXJhdGlvbjtcbiAgICAgICAgYXNzZXQuc3RhcnRPZmZzZXQgPSBzdW1EdXJhdGlvbjtcbiAgICAgICAgYXNzZXQudGltZWxpbmVTdGFydCA9IHRpbWVsaW5lU3RhcnQ7XG4gICAgICAgIGhhc1Vua25vd25EdXJhdGlvbiB8fCAoaGFzVW5rbm93bkR1cmF0aW9uID0gYXNzZXQuZHVyYXRpb24gPT09IG51bGwpO1xuICAgICAgICBoYXNFcnJvcnMgfHwgKGhhc0Vycm9ycyA9ICEhYXNzZXQuZXJyb3IpO1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBhc3NldC5lcnJvciA/IDAgOiBhc3NldC5kdXJhdGlvbiB8fCAwO1xuICAgICAgICBzdW1EdXJhdGlvbiArPSBkdXJhdGlvbjtcbiAgICAgIH0pO1xuICAgICAgLy8gVXNlIHRoZSBzdW0gb2Yga25vd24gZHVyYXRpb25zIHdoZW4gaXQgaXMgZ3JlYXRlciB0aGFuIHRoZSBzdGF0ZWQgZHVyYXRpb25cbiAgICAgIGlmIChoYXNVbmtub3duRHVyYXRpb24gJiYgIWhhc0Vycm9ycykge1xuICAgICAgICBpbnRlcnN0aXRpYWwuZHVyYXRpb24gPSBNYXRoLm1heChzdW1EdXJhdGlvbiwgaW50ZXJzdGl0aWFsLmR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludGVyc3RpdGlhbC5kdXJhdGlvbiA9IHN1bUR1cmF0aW9uO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnQoaW50ZXJzdGl0aWFsKSB7XG4gICAgICBpbnRlcnN0aXRpYWwucmVzZXQoKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmV2ZW50TWFwW2ludGVyc3RpdGlhbC5pZGVudGlmaWVyXTtcbiAgICB9O1xuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoSW50ZXJzdGl0aWFsc1NjaGVkdWxlLCBbe1xuICAgICAga2V5OiBcImR1cmF0aW9uXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgICAgcmV0dXJuIGl0ZW1zID8gaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0uZW5kIDogMDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibGVuZ3RoXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMgPyB0aGlzLml0ZW1zLmxlbmd0aCA6IDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFzc2V0SWRBdEVuZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfdGhpcyRpdGVtcywgX3RoaXMkaXRlbXMyO1xuICAgICAgICB2YXIgaW50ZXJzdGl0aWFsQXRFbmQgPSAoX3RoaXMkaXRlbXMgPSB0aGlzLml0ZW1zKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGlzJGl0ZW1zMiA9IF90aGlzJGl0ZW1zW3RoaXMubGVuZ3RoIC0gMV0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRpdGVtczIuZXZlbnQ7XG4gICAgICAgIGlmIChpbnRlcnN0aXRpYWxBdEVuZCkge1xuICAgICAgICAgIHZhciBhc3NldExpc3QgPSBpbnRlcnN0aXRpYWxBdEVuZC5hc3NldExpc3Q7XG4gICAgICAgICAgdmFyIGFzc2V0QXRFbmQgPSBhc3NldExpc3RbYXNzZXRMaXN0Lmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChhc3NldEF0RW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gYXNzZXRBdEVuZC5pZGVudGlmaWVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG4gIH0oTG9nZ2VyKTtcbiAgZnVuY3Rpb24gc2VnbWVudFRvU3RyaW5nKHNlZ21lbnQpIHtcbiAgICByZXR1cm4gXCJbXCIgKyAoc2VnbWVudC5ldmVudCA/ICdcIicgKyBzZWdtZW50LmV2ZW50LmlkZW50aWZpZXIgKyAnXCInIDogJ3ByaW1hcnknKSArIFwiOiBcIiArIHNlZ21lbnQuc3RhcnQudG9GaXhlZCgyKSArIFwiLVwiICsgc2VnbWVudC5lbmQudG9GaXhlZCgyKSArIFwiXVwiO1xuICB9XG5cbiAgdmFyIEFzc2V0TGlzdExvYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXNzZXRMaXN0TG9hZGVyKGhscykge1xuICAgICAgdGhpcy5obHMgPSB2b2lkIDA7XG4gICAgICB0aGlzLmhscyA9IGhscztcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IEFzc2V0TGlzdExvYWRlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5obHMgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLmxvYWRBc3NldExpc3QgPSBmdW5jdGlvbiBsb2FkQXNzZXRMaXN0KGludGVyc3RpdGlhbCwgaGxzU3RhcnRPZmZzZXQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgYXNzZXRMaXN0VXJsID0gaW50ZXJzdGl0aWFsLmFzc2V0TGlzdFVybDtcbiAgICAgIHZhciB1cmw7XG4gICAgICB0cnkge1xuICAgICAgICB1cmwgPSBnZXRJbnRlcnN0aXRpYWxVcmwoYXNzZXRMaXN0VXJsLCB0aGlzLmhscy5zZXNzaW9uSWQsIGludGVyc3RpdGlhbC5iYXNlVXJsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvckRhdGEgPSB0aGlzLmFzc2lnbkFzc2V0TGlzdEVycm9yKGludGVyc3RpdGlhbCwgRXJyb3JEZXRhaWxzLkFTU0VUX0xJU1RfTE9BRF9FUlJPUiwgZXJyb3IsIGFzc2V0TGlzdFVybCk7XG4gICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCBlcnJvckRhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaGxzU3RhcnRPZmZzZXQgJiYgdXJsLnByb3RvY29sICE9PSAnZGF0YTonKSB7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdfSExTX3N0YXJ0X29mZnNldCcsICcnICsgaGxzU3RhcnRPZmZzZXQpO1xuICAgICAgfVxuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuaGxzLmNvbmZpZztcbiAgICAgIHZhciBMb2FkZXIgPSBjb25maWcubG9hZGVyO1xuICAgICAgdmFyIGxvYWRlciA9IG5ldyBMb2FkZXIoY29uZmlnKTtcbiAgICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICAgICAgdXJsOiB1cmwuaHJlZlxuICAgICAgfTtcbiAgICAgIHZhciBsb2FkUG9saWN5ID0gY29uZmlnLmludGVyc3RpdGlhbEFzc2V0TGlzdExvYWRQb2xpY3kuZGVmYXVsdDtcbiAgICAgIHZhciBsb2FkZXJDb25maWcgPSB7XG4gICAgICAgIGxvYWRQb2xpY3k6IGxvYWRQb2xpY3ksXG4gICAgICAgIHRpbWVvdXQ6IGxvYWRQb2xpY3kubWF4TG9hZFRpbWVNcyxcbiAgICAgICAgbWF4UmV0cnk6IDAsXG4gICAgICAgIHJldHJ5RGVsYXk6IDAsXG4gICAgICAgIG1heFJldHJ5RGVsYXk6IDBcbiAgICAgIH07XG4gICAgICB2YXIgY2FsbGJhY2tzID0ge1xuICAgICAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uIG9uU3VjY2VzcyhyZXNwb25zZSwgc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgICAgICAgdmFyIGFzc2V0TGlzdFJlc3BvbnNlID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICB2YXIgYXNzZXRzID0gYXNzZXRMaXN0UmVzcG9uc2UgPT0gbnVsbCA/IHZvaWQgMCA6IGFzc2V0TGlzdFJlc3BvbnNlLkFTU0VUUztcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXNzZXRzKSkge1xuICAgICAgICAgICAgdmFyIF9lcnJvckRhdGEgPSBfdGhpcy5hc3NpZ25Bc3NldExpc3RFcnJvcihpbnRlcnN0aXRpYWwsIEVycm9yRGV0YWlscy5BU1NFVF9MSVNUX1BBUlNJTkdfRVJST1IsIG5ldyBFcnJvcihcIkludmFsaWQgaW50ZXJzdGl0aWFsIGFzc2V0IGxpc3RcIiksIGNvbnRleHQudXJsLCBzdGF0cywgbmV0d29ya0RldGFpbHMpO1xuICAgICAgICAgICAgX3RoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCBfZXJyb3JEYXRhKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW50ZXJzdGl0aWFsLmFzc2V0TGlzdFJlc3BvbnNlID0gYXNzZXRMaXN0UmVzcG9uc2U7XG4gICAgICAgICAgX3RoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkFTU0VUX0xJU1RfTE9BREVELCB7XG4gICAgICAgICAgICBldmVudDogaW50ZXJzdGl0aWFsLFxuICAgICAgICAgICAgYXNzZXRMaXN0UmVzcG9uc2U6IGFzc2V0TGlzdFJlc3BvbnNlLFxuICAgICAgICAgICAgbmV0d29ya0RldGFpbHM6IG5ldHdvcmtEZXRhaWxzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzLCBzdGF0cykge1xuICAgICAgICAgIHZhciBlcnJvckRhdGEgPSBfdGhpcy5hc3NpZ25Bc3NldExpc3RFcnJvcihpbnRlcnN0aXRpYWwsIEVycm9yRGV0YWlscy5BU1NFVF9MSVNUX0xPQURfRVJST1IsIG5ldyBFcnJvcihcIkVycm9yIGxvYWRpbmcgWC1BU1NFVC1MSVNUOiBIVFRQIHN0YXR1cyBcIiArIGVycm9yLmNvZGUgKyBcIiBcIiArIGVycm9yLnRleHQgKyBcIiAoXCIgKyBjb250ZXh0LnVybCArIFwiKVwiKSwgY29udGV4dC51cmwsIHN0YXRzLCBuZXR3b3JrRGV0YWlscyk7XG4gICAgICAgICAgX3RoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCBlcnJvckRhdGEpO1xuICAgICAgICB9LFxuICAgICAgICBvblRpbWVvdXQ6IGZ1bmN0aW9uIG9uVGltZW91dChzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMpIHtcbiAgICAgICAgICB2YXIgZXJyb3JEYXRhID0gX3RoaXMuYXNzaWduQXNzZXRMaXN0RXJyb3IoaW50ZXJzdGl0aWFsLCBFcnJvckRldGFpbHMuQVNTRVRfTElTVF9MT0FEX1RJTUVPVVQsIG5ldyBFcnJvcihcIlRpbWVvdXQgbG9hZGluZyBYLUFTU0VULUxJU1QgKFwiICsgY29udGV4dC51cmwgKyBcIilcIiksIGNvbnRleHQudXJsLCBzdGF0cywgbmV0d29ya0RldGFpbHMpO1xuICAgICAgICAgIF90aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwgZXJyb3JEYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGxvYWRlci5sb2FkKGNvbnRleHQsIGxvYWRlckNvbmZpZywgY2FsbGJhY2tzKTtcbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkFTU0VUX0xJU1RfTE9BRElORywge1xuICAgICAgICBldmVudDogaW50ZXJzdGl0aWFsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBsb2FkZXI7XG4gICAgfTtcbiAgICBfcHJvdG8uYXNzaWduQXNzZXRMaXN0RXJyb3IgPSBmdW5jdGlvbiBhc3NpZ25Bc3NldExpc3RFcnJvcihpbnRlcnN0aXRpYWwsIGRldGFpbHMsIGVycm9yLCB1cmwsIHN0YXRzLCBuZXR3b3JrRGV0YWlscykge1xuICAgICAgaW50ZXJzdGl0aWFsLmVycm9yID0gZXJyb3I7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk5FVFdPUktfRVJST1IsXG4gICAgICAgIGRldGFpbHM6IGRldGFpbHMsXG4gICAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgICAgaW50ZXJzdGl0aWFsOiBpbnRlcnN0aXRpYWwsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlscyxcbiAgICAgICAgc3RhdHM6IHN0YXRzXG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIEFzc2V0TGlzdExvYWRlcjtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIHBsYXlXaXRoQ2F0Y2gobWVkaWEpIHtcbiAgICBtZWRpYSA9PSBudWxsID8gdm9pZCAwIDogbWVkaWEucGxheSgpLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qIG5vLW9wICovXG4gICAgfSk7XG4gIH1cbiAgdmFyIEludGVyc3RpdGlhbHNDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTG9nZ2VyKSB7XG4gICAgZnVuY3Rpb24gSW50ZXJzdGl0aWFsc0NvbnRyb2xsZXIoaGxzLCBIbHNQbGF5ZXJDbGFzcykge1xuICAgICAgdmFyIF90aGlzO1xuICAgICAgX3RoaXMgPSBfTG9nZ2VyLmNhbGwodGhpcywgJ2ludGVyc3RpdGlhbHMnLCBobHMubG9nZ2VyKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuSGxzUGxheWVyQ2xhc3MgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5obHMgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5hc3NldExpc3RMb2FkZXIgPSB2b2lkIDA7XG4gICAgICAvLyBMYXN0IHVwZGF0ZWQgTGV2ZWxEZXRhaWxzXG4gICAgICBfdGhpcy5tZWRpYVNlbGVjdGlvbiA9IG51bGw7XG4gICAgICBfdGhpcy5hbHRTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgLy8gTWVkaWEgYW5kIE1lZGlhU291cmNlL1NvdXJjZUJ1ZmZlcnNcbiAgICAgIF90aGlzLm1lZGlhID0gbnVsbDtcbiAgICAgIF90aGlzLmRldGFjaGVkRGF0YSA9IG51bGw7XG4gICAgICBfdGhpcy5yZXF1aXJlZFRyYWNrcyA9IG51bGw7XG4gICAgICAvLyBQdWJsaWMgSW50ZXJmYWNlIGZvciBJbnRlcnN0aXRpYWwgcGxheWJhY2sgc3RhdGUgYW5kIGNvbnRyb2xcbiAgICAgIF90aGlzLm1hbmFnZXIgPSBudWxsO1xuICAgICAgLy8gSW50ZXJzdGl0aWFsIEFzc2V0IFBsYXllcnNcbiAgICAgIF90aGlzLnBsYXllclF1ZXVlID0gW107XG4gICAgICAvLyBUaW1lbGluZSBwb3NpdGlvbiB0cmFja2luZ1xuICAgICAgX3RoaXMuYnVmZmVyZWRQb3MgPSAtMTtcbiAgICAgIF90aGlzLnRpbWVsaW5lUG9zID0gLTE7XG4gICAgICAvLyBTY2hlZHVsZVxuICAgICAgX3RoaXMuc2NoZWR1bGUgPSB2b2lkIDA7XG4gICAgICAvLyBTY2hlZHVsZSBwbGF5YmFjayBhbmQgYnVmZmVyaW5nIHN0YXRlXG4gICAgICBfdGhpcy5wbGF5aW5nSXRlbSA9IG51bGw7XG4gICAgICBfdGhpcy5idWZmZXJpbmdJdGVtID0gbnVsbDtcbiAgICAgIF90aGlzLndhaXRpbmdJdGVtID0gbnVsbDtcbiAgICAgIF90aGlzLmVuZGVkSXRlbSA9IG51bGw7XG4gICAgICBfdGhpcy5wbGF5aW5nQXNzZXQgPSBudWxsO1xuICAgICAgX3RoaXMuZW5kZWRBc3NldCA9IG51bGw7XG4gICAgICBfdGhpcy5idWZmZXJpbmdBc3NldCA9IG51bGw7XG4gICAgICBfdGhpcy5zaG91bGRQbGF5ID0gZmFsc2U7XG4gICAgICBfdGhpcy5vblBsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnNob3VsZFBsYXkgPSB0cnVlO1xuICAgICAgfTtcbiAgICAgIF90aGlzLm9uUGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnNob3VsZFBsYXkgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgICBfdGhpcy5vblNlZWtpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50VGltZSA9IF90aGlzLmN1cnJlbnRUaW1lO1xuICAgICAgICBpZiAoY3VycmVudFRpbWUgPT09IHVuZGVmaW5lZCB8fCBfdGhpcy5wbGF5YmFja0Rpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaWZmID0gY3VycmVudFRpbWUgLSBfdGhpcy50aW1lbGluZVBvcztcbiAgICAgICAgdmFyIHJvdW5kaW5nRXJyb3IgPSBNYXRoLmFicyhkaWZmKSA8IDEgLyA3MDU2MDAwMDA7IC8vIG9uZSBmbGlja1xuICAgICAgICBpZiAocm91bmRpbmdFcnJvcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmFja3dhcmRTZWVrID0gZGlmZiA8PSAtMC4wMTtcbiAgICAgICAgX3RoaXMudGltZWxpbmVQb3MgPSBjdXJyZW50VGltZTtcbiAgICAgICAgX3RoaXMuYnVmZmVyZWRQb3MgPSBjdXJyZW50VGltZTtcblxuICAgICAgICAvLyBDaGVjayBpZiBzZWVraW5nIG91dCBvZiBhbiBpdGVtXG4gICAgICAgIHZhciBwbGF5aW5nSXRlbSA9IF90aGlzLnBsYXlpbmdJdGVtO1xuICAgICAgICBpZiAoIXBsYXlpbmdJdGVtKSB7XG4gICAgICAgICAgX3RoaXMuY2hlY2tCdWZmZXIoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJhY2t3YXJkU2Vlaykge1xuICAgICAgICAgIHZhciByZXNldENvdW50ID0gX3RoaXMuc2NoZWR1bGUucmVzZXRFcnJvcnNJblJhbmdlKGN1cnJlbnRUaW1lLCBjdXJyZW50VGltZSAtIGRpZmYpO1xuICAgICAgICAgIGlmIChyZXNldENvdW50KSB7XG4gICAgICAgICAgICBfdGhpcy51cGRhdGVTY2hlZHVsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5jaGVja0J1ZmZlcigpO1xuICAgICAgICBpZiAoYmFja3dhcmRTZWVrICYmIGN1cnJlbnRUaW1lIDwgcGxheWluZ0l0ZW0uc3RhcnQgfHwgY3VycmVudFRpbWUgPj0gcGxheWluZ0l0ZW0uZW5kKSB7XG4gICAgICAgICAgdmFyIF90aGlzJG1lZGlhO1xuICAgICAgICAgIHZhciBzY2hlZHVsZUluZGV4ID0gX3RoaXMuc2NoZWR1bGUuZmluZEl0ZW1JbmRleEF0VGltZShfdGhpcy50aW1lbGluZVBvcyk7XG4gICAgICAgICAgaWYgKCFfdGhpcy5pc0ludGVyc3RpdGlhbChwbGF5aW5nSXRlbSkgJiYgKF90aGlzJG1lZGlhID0gX3RoaXMubWVkaWEpICE9IG51bGwgJiYgX3RoaXMkbWVkaWEucGF1c2VkKSB7XG4gICAgICAgICAgICBfdGhpcy5zaG91bGRQbGF5ID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghYmFja3dhcmRTZWVrKSB7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiBhbiBJbnRlcnN0aXRpYWwgYmV0d2VlbiB0aGUgY3VycmVudCBpdGVtIGFuZCB0YXJnZXQgaXRlbSBoYXMgYW4gWC1SRVNUUklDVCBKVU1QIHJlc3RyaWN0aW9uXG4gICAgICAgICAgICB2YXIgcGxheWluZ0luZGV4ID0gX3RoaXMuZmluZEl0ZW1JbmRleChwbGF5aW5nSXRlbSk7XG4gICAgICAgICAgICBpZiAoc2NoZWR1bGVJbmRleCA+IHBsYXlpbmdJbmRleCkge1xuICAgICAgICAgICAgICB2YXIganVtcEluZGV4ID0gX3RoaXMuc2NoZWR1bGUuZmluZEp1bXBSZXN0cmljdGVkSW5kZXgocGxheWluZ0luZGV4ICsgMSwgc2NoZWR1bGVJbmRleCk7XG4gICAgICAgICAgICAgIGlmIChqdW1wSW5kZXggPiBwbGF5aW5nSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTY2hlZHVsZVBvc2l0aW9uKGp1bXBJbmRleCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzLnNldFNjaGVkdWxlUG9zaXRpb24oc2NoZWR1bGVJbmRleCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIHNlZWtpbmcgb3V0IG9mIGFuIGFzc2V0IChhc3N1bWVzIHNhbWUgaXRlbSBmb2xsb3dpbmcgYWJvdmUgY2hlY2spXG4gICAgICAgIHZhciBwbGF5aW5nQXNzZXQgPSBfdGhpcy5wbGF5aW5nQXNzZXQ7XG4gICAgICAgIGlmICghcGxheWluZ0Fzc2V0KSB7XG4gICAgICAgICAgLy8gcmVzdGFydCBJbnRlcnN0aXRpYWwgYXQgZW5kXG4gICAgICAgICAgaWYgKF90aGlzLnBsYXlpbmdMYXN0SXRlbSAmJiBfdGhpcy5pc0ludGVyc3RpdGlhbChwbGF5aW5nSXRlbSkpIHtcbiAgICAgICAgICAgIHZhciByZXN0YXJ0QXNzZXQgPSBwbGF5aW5nSXRlbS5ldmVudC5hc3NldExpc3RbMF07XG4gICAgICAgICAgICBpZiAocmVzdGFydEFzc2V0KSB7XG4gICAgICAgICAgICAgIF90aGlzLmVuZGVkSXRlbSA9IF90aGlzLnBsYXlpbmdJdGVtO1xuICAgICAgICAgICAgICBfdGhpcy5wbGF5aW5nSXRlbSA9IG51bGw7XG4gICAgICAgICAgICAgIF90aGlzLnNldFNjaGVkdWxlVG9Bc3NldEF0VGltZShjdXJyZW50VGltZSwgcmVzdGFydEFzc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGFydCA9IHBsYXlpbmdBc3NldC50aW1lbGluZVN0YXJ0O1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBwbGF5aW5nQXNzZXQuZHVyYXRpb24gfHwgMDtcbiAgICAgICAgaWYgKGJhY2t3YXJkU2VlayAmJiBjdXJyZW50VGltZSA8IHN0YXJ0IHx8IGN1cnJlbnRUaW1lID49IHN0YXJ0ICsgZHVyYXRpb24pIHtcbiAgICAgICAgICBfdGhpcy5zZXRTY2hlZHVsZVRvQXNzZXRBdFRpbWUoY3VycmVudFRpbWUsIHBsYXlpbmdBc3NldCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBfdGhpcy5vblRpbWV1cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50VGltZSA9IF90aGlzLmN1cnJlbnRUaW1lO1xuICAgICAgICBpZiAoY3VycmVudFRpbWUgPT09IHVuZGVmaW5lZCB8fCBfdGhpcy5wbGF5YmFja0Rpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT25seSBhbGxvdyB0aW1ldXBkYXRlIHRvIGFkdmFuY2UgcHJpbWFyeSBwb3NpdGlvbiwgc2Vla2luZyBpcyB1c2VkIGZvciBqdW1waW5nIGJhY2tcbiAgICAgICAgLy8gdGhpcyBwcmV2ZW50cyBwcmltYXJ5UG9zIGZyb20gYmVpbmcgcmVzZXQgdG8gMCBhZnRlciByZS1hdHRhY2hcbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lID4gX3RoaXMudGltZWxpbmVQb3MpIHtcbiAgICAgICAgICBfdGhpcy50aW1lbGluZVBvcyA9IGN1cnJlbnRUaW1lO1xuICAgICAgICAgIGlmIChjdXJyZW50VGltZSA+IF90aGlzLmJ1ZmZlcmVkUG9zKSB7XG4gICAgICAgICAgICBfdGhpcy5jaGVja0J1ZmZlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiBwbGF5YmFjayBoYXMgZW50ZXJlZCB0aGUgbmV4dCBpdGVtXG4gICAgICAgIHZhciBwbGF5aW5nSXRlbSA9IF90aGlzLnBsYXlpbmdJdGVtO1xuICAgICAgICBpZiAoIXBsYXlpbmdJdGVtIHx8IF90aGlzLnBsYXlpbmdMYXN0SXRlbSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFRpbWUgPj0gcGxheWluZ0l0ZW0uZW5kKSB7XG4gICAgICAgICAgX3RoaXMudGltZWxpbmVQb3MgPSBwbGF5aW5nSXRlbS5lbmQ7XG4gICAgICAgICAgdmFyIHBsYXlpbmdJbmRleCA9IF90aGlzLmZpbmRJdGVtSW5kZXgocGxheWluZ0l0ZW0pO1xuICAgICAgICAgIF90aGlzLnNldFNjaGVkdWxlUG9zaXRpb24ocGxheWluZ0luZGV4ICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgaWYgcGxheWJhY2sgaGFzIGVudGVyZWQgdGhlIG5leHQgYXNzZXRcbiAgICAgICAgdmFyIHBsYXlpbmdBc3NldCA9IF90aGlzLnBsYXlpbmdBc3NldDtcbiAgICAgICAgaWYgKCFwbGF5aW5nQXNzZXQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVuZCA9IHBsYXlpbmdBc3NldC50aW1lbGluZVN0YXJ0ICsgKHBsYXlpbmdBc3NldC5kdXJhdGlvbiB8fCAwKTtcbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lID49IGVuZCkge1xuICAgICAgICAgIF90aGlzLnNldFNjaGVkdWxlVG9Bc3NldEF0VGltZShjdXJyZW50VGltZSwgcGxheWluZ0Fzc2V0KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIC8vIFNjaGVkdWxlIHVwZGF0ZSBjYWxsYmFja1xuICAgICAgX3RoaXMub25TY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uIChyZW1vdmVkSW50ZXJzdGl0aWFscywgcHJldmlvdXNJdGVtcykge1xuICAgICAgICB2YXIgc2NoZWR1bGUgPSBfdGhpcy5zY2hlZHVsZTtcbiAgICAgICAgdmFyIHBsYXlpbmdJdGVtID0gX3RoaXMucGxheWluZ0l0ZW07XG4gICAgICAgIHZhciBpbnRlcnN0aXRpYWxFdmVudHMgPSBzY2hlZHVsZS5ldmVudHMgfHwgW107XG4gICAgICAgIHZhciBzY2hlZHVsZUl0ZW1zID0gc2NoZWR1bGUuaXRlbXMgfHwgW107XG4gICAgICAgIHZhciBkdXJhdGlvbnMgPSBzY2hlZHVsZS5kdXJhdGlvbnM7XG4gICAgICAgIHZhciByZW1vdmVkSWRzID0gcmVtb3ZlZEludGVyc3RpdGlhbHMubWFwKGZ1bmN0aW9uIChpbnRlcnN0aXRpYWwpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJzdGl0aWFsLmlkZW50aWZpZXI7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaW50ZXJzdGl0aWFsc1VwZGF0ZWQgPSAhIShpbnRlcnN0aXRpYWxFdmVudHMubGVuZ3RoIHx8IHJlbW92ZWRJZHMubGVuZ3RoKTtcbiAgICAgICAgaWYgKGludGVyc3RpdGlhbHNVcGRhdGVkIHx8IHByZXZpb3VzSXRlbXMpIHtcbiAgICAgICAgICBfdGhpcy5sb2coXCJJTlRFUlNUSVRJQUxTX1VQREFURUQgKFwiICsgaW50ZXJzdGl0aWFsRXZlbnRzLmxlbmd0aCArIFwiKTogXCIgKyBpbnRlcnN0aXRpYWxFdmVudHMgKyBcIlxcblNjaGVkdWxlOiBcIiArIHNjaGVkdWxlSXRlbXMubWFwKGZ1bmN0aW9uIChzZWcpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWdtZW50VG9TdHJpbmcoc2VnKTtcbiAgICAgICAgICB9KSArIFwiIHBvczogXCIgKyBfdGhpcy50aW1lbGluZVBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbW92ZWRJZHMubGVuZ3RoKSB7XG4gICAgICAgICAgX3RoaXMubG9nKFwiUmVtb3ZlZCBldmVudHMgXCIgKyByZW1vdmVkSWRzKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5wbGF5ZXJRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICBpZiAocGxheWVyLmludGVyc3RpdGlhbC5hcHBlbmRJblBsYWNlKSB7XG4gICAgICAgICAgICB2YXIgdGltZWxpbmVTdGFydCA9IHBsYXllci5hc3NldEl0ZW0udGltZWxpbmVTdGFydDtcbiAgICAgICAgICAgIHZhciBkaWZmID0gcGxheWVyLnRpbWVsaW5lT2Zmc2V0IC0gdGltZWxpbmVTdGFydDtcbiAgICAgICAgICAgIGlmIChkaWZmKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnRpbWVsaW5lT2Zmc2V0ID0gdGltZWxpbmVTdGFydDtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IEFMSUdORURfRU5EX1RIUkVTSE9MRF9TRUNPTkRTKSB7XG4gICAgICAgICAgICAgICAgICBfdGhpcy53YXJuKGUgKyBcIiAoXFxcIlwiICsgcGxheWVyLmFzc2V0SWQgKyBcIlxcXCIgXCIgKyBwbGF5ZXIudGltZWxpbmVPZmZzZXQgKyBcIi0+XCIgKyB0aW1lbGluZVN0YXJ0ICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHNjaGVkdWxlIGl0ZW0gcmVmZXJlbmNlc1xuICAgICAgICAvLyBEbyBub3QgcmVwbGFjZSBJbnRlcnN0aXRpYWwgcGxheWluZ0l0ZW0gd2l0aG91dCBhIG1hdGNoIC0gdXNlZCBmb3IgSU5URVJTVElUSUFMX0FTU0VUX0VOREVEIGFuZCBJTlRFUlNUSVRJQUxfRU5ERURcbiAgICAgICAgdmFyIHRyaW1JblBsYWNlRm9yUGxheW91dCA9IG51bGw7XG4gICAgICAgIGlmIChwbGF5aW5nSXRlbSkge1xuICAgICAgICAgIHZhciB1cGRhdGVkUGxheWluZ0l0ZW0gPSBfdGhpcy51cGRhdGVJdGVtKHBsYXlpbmdJdGVtLCBfdGhpcy50aW1lbGluZVBvcyk7XG4gICAgICAgICAgaWYgKF90aGlzLml0ZW1zTWF0Y2gocGxheWluZ0l0ZW0sIHVwZGF0ZWRQbGF5aW5nSXRlbSkpIHtcbiAgICAgICAgICAgIF90aGlzLnBsYXlpbmdJdGVtID0gdXBkYXRlZFBsYXlpbmdJdGVtO1xuICAgICAgICAgICAgX3RoaXMud2FpdGluZ0l0ZW0gPSBfdGhpcy5lbmRlZEl0ZW0gPSBudWxsO1xuICAgICAgICAgICAgdHJpbUluUGxhY2VGb3JQbGF5b3V0ID0gZnVuY3Rpb24gdHJpbUluUGxhY2VGb3JQbGF5b3V0KCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudHJpbUluUGxhY2UodXBkYXRlZFBsYXlpbmdJdGVtLCBwbGF5aW5nSXRlbSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBDbGVhciB3YWl0aW5nSXRlbSBpZiBpdCBoYXMgYmVlbiByZW1vdmVkIGZyb20gdGhlIHNjaGVkdWxlXG4gICAgICAgICAgX3RoaXMud2FpdGluZ0l0ZW0gPSBfdGhpcy51cGRhdGVJdGVtKF90aGlzLndhaXRpbmdJdGVtKTtcbiAgICAgICAgICBfdGhpcy5lbmRlZEl0ZW0gPSBfdGhpcy51cGRhdGVJdGVtKF90aGlzLmVuZGVkSXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRG8gbm90IHJlcGxhY2UgSW50ZXJzdGl0aWFsIGJ1ZmZlcmluZ0l0ZW0gd2l0aG91dCBhIG1hdGNoIC0gdXNlZCBmb3IgdHJhbnNmZXJpbmcgbWVkaWEgZWxlbWVudCBvciBzb3VyY2VcbiAgICAgICAgdmFyIGJ1ZmZlcmluZ0l0ZW0gPSBfdGhpcy5idWZmZXJpbmdJdGVtO1xuICAgICAgICBpZiAoYnVmZmVyaW5nSXRlbSkge1xuICAgICAgICAgIHZhciB1cGRhdGVkQnVmZmVyaW5nSXRlbSA9IF90aGlzLnVwZGF0ZUl0ZW0oYnVmZmVyaW5nSXRlbSwgX3RoaXMuYnVmZmVyZWRQb3MpO1xuICAgICAgICAgIGlmIChfdGhpcy5pdGVtc01hdGNoKGJ1ZmZlcmluZ0l0ZW0sIHVwZGF0ZWRCdWZmZXJpbmdJdGVtKSkge1xuICAgICAgICAgICAgX3RoaXMuYnVmZmVyaW5nSXRlbSA9IHVwZGF0ZWRCdWZmZXJpbmdJdGVtO1xuICAgICAgICAgICAgdHJpbUluUGxhY2VGb3JQbGF5b3V0IHx8ICh0cmltSW5QbGFjZUZvclBsYXlvdXQgPSBmdW5jdGlvbiB0cmltSW5QbGFjZUZvclBsYXlvdXQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy50cmltSW5QbGFjZSh1cGRhdGVkQnVmZmVyaW5nSXRlbSwgYnVmZmVyaW5nSXRlbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlcmluZ0l0ZW0uZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIEludGVyc3RpdGlhbCByZW1vdmVkIGZyb20gc2NoZWR1bGUgKExpdmUgLT4gVk9EIG9yIG90aGVyIHNjZW5hcmlvIHdoZXJlIFN0YXJ0IERhdGUgaXMgb3V0c2lkZSB0aGUgcmFuZ2Ugb2YgVk9EIFBsYXlsaXN0KVxuICAgICAgICAgICAgX3RoaXMuYnVmZmVyaW5nSXRlbSA9IF90aGlzLnBsYXlpbmdJdGVtO1xuICAgICAgICAgICAgX3RoaXMuY2xlYXJJbnRlcnN0aXRpYWwoYnVmZmVyaW5nSXRlbS5ldmVudCwgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbW92ZWRJbnRlcnN0aXRpYWxzLmZvckVhY2goZnVuY3Rpb24gKGludGVyc3RpdGlhbCkge1xuICAgICAgICAgIGludGVyc3RpdGlhbC5hc3NldExpc3QuZm9yRWFjaChmdW5jdGlvbiAoYXNzZXQpIHtcbiAgICAgICAgICAgIF90aGlzLmNsZWFyQXNzZXRQbGF5ZXIoYXNzZXQuaWRlbnRpZmllciwgbnVsbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaW50ZXJzdGl0aWFsc1VwZGF0ZWQgfHwgcHJldmlvdXNJdGVtcykge1xuICAgICAgICAgIF90aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5JTlRFUlNUSVRJQUxTX1VQREFURUQsIHtcbiAgICAgICAgICAgIGV2ZW50czogaW50ZXJzdGl0aWFsRXZlbnRzLnNsaWNlKDApLFxuICAgICAgICAgICAgc2NoZWR1bGU6IHNjaGVkdWxlSXRlbXMuc2xpY2UoMCksXG4gICAgICAgICAgICBkdXJhdGlvbnM6IGR1cmF0aW9ucyxcbiAgICAgICAgICAgIHJlbW92ZWRJZHM6IHJlbW92ZWRJZHNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoX3RoaXMuaXNJbnRlcnN0aXRpYWwocGxheWluZ0l0ZW0pICYmIHJlbW92ZWRJZHMuaW5jbHVkZXMocGxheWluZ0l0ZW0uZXZlbnQuaWRlbnRpZmllcikpIHtcbiAgICAgICAgICAgIF90aGlzLndhcm4oXCJJbnRlcnN0aXRpYWwgXFxcIlwiICsgcGxheWluZ0l0ZW0uZXZlbnQuaWRlbnRpZmllciArIFwiXFxcIiByZW1vdmVkIHdoaWxlIHBsYXlpbmdcIik7XG4gICAgICAgICAgICBfdGhpcy5wcmltYXJ5RmFsbGJhY2socGxheWluZ0l0ZW0uZXZlbnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHJpbUluUGxhY2VGb3JQbGF5b3V0KSB7XG4gICAgICAgICAgICB0cmltSW5QbGFjZUZvclBsYXlvdXQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDaGVjayBpcyBidWZmZXJlZCB0byBuZXcgSW50ZXJzdGl0aWFsIGV2ZW50IGJvdW5kYXJ5XG4gICAgICAgICAgLy8gKExpdmUgdXBkYXRlIHB1Ymxpc2hlcyBJbnRlcnN0aXRpYWwgd2l0aCBuZXcgc2VnbWVudClcbiAgICAgICAgICBfdGhpcy5jaGVja0J1ZmZlcigpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgX3RoaXMuaGxzID0gaGxzO1xuICAgICAgX3RoaXMuSGxzUGxheWVyQ2xhc3MgPSBIbHNQbGF5ZXJDbGFzcztcbiAgICAgIF90aGlzLmFzc2V0TGlzdExvYWRlciA9IG5ldyBBc3NldExpc3RMb2FkZXIoaGxzKTtcbiAgICAgIF90aGlzLnNjaGVkdWxlID0gbmV3IEludGVyc3RpdGlhbHNTY2hlZHVsZShfdGhpcy5vblNjaGVkdWxlVXBkYXRlLCBobHMubG9nZ2VyKTtcbiAgICAgIF90aGlzLnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIF9pbmhlcml0c0xvb3NlKEludGVyc3RpdGlhbHNDb250cm9sbGVyLCBfTG9nZ2VyKTtcbiAgICB2YXIgX3Byb3RvID0gSW50ZXJzdGl0aWFsc0NvbnRyb2xsZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NRURJQV9BVFRBQ0hJTkcsIHRoaXMub25NZWRpYUF0dGFjaGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLk1FRElBX0FUVEFDSEVELCB0aGlzLm9uTWVkaWFBdHRhY2hlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLk1FRElBX0RFVEFDSElORywgdGhpcy5vbk1lZGlhRGV0YWNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUFOSUZFU1RfTE9BRElORywgdGhpcy5vbk1hbmlmZXN0TG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkxFVkVMX1VQREFURUQsIHRoaXMub25MZXZlbFVwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5BVURJT19UUkFDS19TV0lUQ0hJTkcsIHRoaXMub25BdWRpb1RyYWNrU3dpdGNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuQVVESU9fVFJBQ0tfVVBEQVRFRCwgdGhpcy5vbkF1ZGlvVHJhY2tVcGRhdGVkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuU1VCVElUTEVfVFJBQ0tfU1dJVENILCB0aGlzLm9uU3VidGl0bGVUcmFja1N3aXRjaCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLlNVQlRJVExFX1RSQUNLX1VQREFURUQsIHRoaXMub25TdWJ0aXRsZVRyYWNrVXBkYXRlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkVWRU5UX0NVRV9FTlRFUiwgdGhpcy5vbkludGVyc3RpdGlhbEN1ZUVudGVyLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuQVNTRVRfTElTVF9MT0FERUQsIHRoaXMub25Bc3NldExpc3RMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5CVUZGRVJfQVBQRU5ERUQsIHRoaXMub25CdWZmZXJBcHBlbmRlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkJVRkZFUl9GTFVTSEVELCB0aGlzLm9uQnVmZmVyRmx1c2hlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkJVRkZFUkVEX1RPX0VORCwgdGhpcy5vbkJ1ZmZlcmVkVG9FbmQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NRURJQV9FTkRFRCwgdGhpcy5vbk1lZGlhRW5kZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5FUlJPUiwgdGhpcy5vbkVycm9yLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuREVTVFJPWUlORywgdGhpcy5vbkRlc3Ryb3lpbmcsIHRoaXMpO1xuICAgIH07XG4gICAgX3Byb3RvLnVucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaWYgKCFobHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaGxzLm9mZihFdmVudHMuTUVESUFfQVRUQUNISU5HLCB0aGlzLm9uTWVkaWFBdHRhY2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUVESUFfQVRUQUNIRUQsIHRoaXMub25NZWRpYUF0dGFjaGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1FRElBX0RFVEFDSElORywgdGhpcy5vbk1lZGlhRGV0YWNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1BTklGRVNUX0xPQURJTkcsIHRoaXMub25NYW5pZmVzdExvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTEVWRUxfVVBEQVRFRCwgdGhpcy5vbkxldmVsVXBkYXRlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5BVURJT19UUkFDS19TV0lUQ0hJTkcsIHRoaXMub25BdWRpb1RyYWNrU3dpdGNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkFVRElPX1RSQUNLX1VQREFURUQsIHRoaXMub25BdWRpb1RyYWNrVXBkYXRlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5TVUJUSVRMRV9UUkFDS19TV0lUQ0gsIHRoaXMub25TdWJ0aXRsZVRyYWNrU3dpdGNoLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLlNVQlRJVExFX1RSQUNLX1VQREFURUQsIHRoaXMub25TdWJ0aXRsZVRyYWNrVXBkYXRlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5FVkVOVF9DVUVfRU5URVIsIHRoaXMub25JbnRlcnN0aXRpYWxDdWVFbnRlciwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5BU1NFVF9MSVNUX0xPQURFRCwgdGhpcy5vbkFzc2V0TGlzdExvYWRlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5CVUZGRVJfQ09ERUNTLCB0aGlzLm9uQnVmZmVyQ29kZWNzLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkJVRkZFUl9BUFBFTkRFRCwgdGhpcy5vbkJ1ZmZlckFwcGVuZGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkJVRkZFUl9GTFVTSEVELCB0aGlzLm9uQnVmZmVyRmx1c2hlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5CVUZGRVJFRF9UT19FTkQsIHRoaXMub25CdWZmZXJlZFRvRW5kLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1FRElBX0VOREVELCB0aGlzLm9uTWVkaWFFbmRlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5FUlJPUiwgdGhpcy5vbkVycm9yLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkRFU1RST1lJTkcsIHRoaXMub25EZXN0cm95aW5nLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by5zdGFydExvYWQgPSBmdW5jdGlvbiBzdGFydExvYWQoKSB7XG4gICAgICAvLyBUT0RPOiBzdGFydExvYWQgLSBjaGVjayBmb3Igd2FpdGluZ0l0ZW0gYW5kIHJldHJ5IGJ5IHJlc2V0dGluZyBzY2hlZHVsZVxuICAgICAgdGhpcy5yZXN1bWVCdWZmZXJpbmcoKTtcbiAgICB9O1xuICAgIF9wcm90by5zdG9wTG9hZCA9IGZ1bmN0aW9uIHN0b3BMb2FkKCkge1xuICAgICAgLy8gVE9ETzogc3RvcExvYWQgLSBzdG9wIGFsbCBzY2hldWxlLmV2ZW50c1tdLmFzc2V0TGlzdExvYWRlcj8uYWJvcnQoKSB0aGVuIGRlbGV0ZSB0aGUgbG9hZGVyc1xuICAgICAgdGhpcy5wYXVzZUJ1ZmZlcmluZygpO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc3VtZUJ1ZmZlcmluZyA9IGZ1bmN0aW9uIHJlc3VtZUJ1ZmZlcmluZygpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRCdWZmZXJpbmdQbGE7XG4gICAgICAoX3RoaXMkZ2V0QnVmZmVyaW5nUGxhID0gdGhpcy5nZXRCdWZmZXJpbmdQbGF5ZXIoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGdldEJ1ZmZlcmluZ1BsYS5yZXN1bWVCdWZmZXJpbmcoKTtcbiAgICB9O1xuICAgIF9wcm90by5wYXVzZUJ1ZmZlcmluZyA9IGZ1bmN0aW9uIHBhdXNlQnVmZmVyaW5nKCkge1xuICAgICAgdmFyIF90aGlzJGdldEJ1ZmZlcmluZ1BsYTI7XG4gICAgICAoX3RoaXMkZ2V0QnVmZmVyaW5nUGxhMiA9IHRoaXMuZ2V0QnVmZmVyaW5nUGxheWVyKCkpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRnZXRCdWZmZXJpbmdQbGEyLnBhdXNlQnVmZmVyaW5nKCk7XG4gICAgfTtcbiAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLnVucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMuc3RvcExvYWQoKTtcbiAgICAgIGlmICh0aGlzLmFzc2V0TGlzdExvYWRlcikge1xuICAgICAgICB0aGlzLmFzc2V0TGlzdExvYWRlci5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICB0aGlzLmVtcHR5UGxheWVyUXVldWUoKTtcbiAgICAgIHRoaXMuY2xlYXJTY2hlZHVsZVN0YXRlKCk7XG4gICAgICBpZiAodGhpcy5zY2hlZHVsZSkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubWVkaWEgPSB0aGlzLmRldGFjaGVkRGF0YSA9IHRoaXMubWVkaWFTZWxlY3Rpb24gPSB0aGlzLnJlcXVpcmVkVHJhY2tzID0gdGhpcy5hbHRTZWxlY3Rpb24gPSB0aGlzLm1hbmFnZXIgPSBudWxsO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5obHMgPSB0aGlzLkhsc1BsYXllckNsYXNzID0gdGhpcy5zY2hlZHVsZSA9IHRoaXMubG9nID0gbnVsbDtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMuYXNzZXRMaXN0TG9hZGVyID0gbnVsbDtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMub25QbGF5ID0gdGhpcy5vblBhdXNlID0gdGhpcy5vblNlZWtpbmcgPSB0aGlzLm9uVGltZXVwZGF0ZSA9IG51bGw7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLm9uU2NoZWR1bGVVcGRhdGUgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLm9uRGVzdHJveWluZyA9IGZ1bmN0aW9uIG9uRGVzdHJveWluZygpIHtcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMucHJpbWFyeU1lZGlhIHx8IHRoaXMubWVkaWE7XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVNZWRpYUxpc3RlbmVycyhtZWRpYSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ucmVtb3ZlTWVkaWFMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVNZWRpYUxpc3RlbmVycyhtZWRpYSkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihtZWRpYSwgJ3BsYXknLCB0aGlzLm9uUGxheSk7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKG1lZGlhLCAncGF1c2UnLCB0aGlzLm9uUGF1c2UpO1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihtZWRpYSwgJ3NlZWtpbmcnLCB0aGlzLm9uU2Vla2luZyk7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKG1lZGlhLCAndGltZXVwZGF0ZScsIHRoaXMub25UaW1ldXBkYXRlKTtcbiAgICB9O1xuICAgIF9wcm90by5vbk1lZGlhQXR0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYUF0dGFjaGluZyhldmVudCwgZGF0YSkge1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYSA9IGRhdGEubWVkaWE7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKG1lZGlhLCAnc2Vla2luZycsIHRoaXMub25TZWVraW5nKTtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIobWVkaWEsICd0aW1ldXBkYXRlJywgdGhpcy5vblRpbWV1cGRhdGUpO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihtZWRpYSwgJ3BsYXknLCB0aGlzLm9uUGxheSk7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKG1lZGlhLCAncGF1c2UnLCB0aGlzLm9uUGF1c2UpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTWVkaWFBdHRhY2hlZCA9IGZ1bmN0aW9uIG9uTWVkaWFBdHRhY2hlZChldmVudCwgZGF0YSkge1xuICAgICAgdmFyIHBsYXlpbmdJdGVtID0gdGhpcy5lZmZlY3RpdmVQbGF5aW5nSXRlbTtcbiAgICAgIHZhciBkZXRhY2hlZE1lZGlhID0gdGhpcy5kZXRhY2hlZERhdGE7XG4gICAgICB0aGlzLmRldGFjaGVkRGF0YSA9IG51bGw7XG4gICAgICBpZiAocGxheWluZ0l0ZW0gPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jaGVja1N0YXJ0KCk7XG4gICAgICB9IGVsc2UgaWYgKCFkZXRhY2hlZE1lZGlhKSB7XG4gICAgICAgIC8vIFJlc3VtZSBzY2hlZHVsZSBhZnRlciBkZXRhY2hlZCBleHRlcm5hbGx5XG4gICAgICAgIHRoaXMuY2xlYXJTY2hlZHVsZVN0YXRlKCk7XG4gICAgICAgIHZhciBwbGF5aW5nSW5kZXggPSB0aGlzLmZpbmRJdGVtSW5kZXgocGxheWluZ0l0ZW0pO1xuICAgICAgICB0aGlzLnNldFNjaGVkdWxlUG9zaXRpb24ocGxheWluZ0luZGV4KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5jbGVhclNjaGVkdWxlU3RhdGUgPSBmdW5jdGlvbiBjbGVhclNjaGVkdWxlU3RhdGUoKSB7XG4gICAgICB0aGlzLnBsYXlpbmdJdGVtID0gdGhpcy5idWZmZXJpbmdJdGVtID0gdGhpcy53YWl0aW5nSXRlbSA9IHRoaXMuZW5kZWRJdGVtID0gdGhpcy5wbGF5aW5nQXNzZXQgPSB0aGlzLmVuZGVkQXNzZXQgPSB0aGlzLmJ1ZmZlcmluZ0Fzc2V0ID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5vbk1lZGlhRGV0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYURldGFjaGluZyhldmVudCwgZGF0YSkge1xuICAgICAgdmFyIHRyYW5zZmVycmluZ01lZGlhID0gISFkYXRhLnRyYW5zZmVyTWVkaWE7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgICAgdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgICBpZiAodHJhbnNmZXJyaW5nTWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTWVkaWFMaXN0ZW5lcnMobWVkaWEpO1xuICAgICAgfVxuICAgICAgLy8gSWYgZGV0YWNoTWVkaWEgaXMgY2FsbGVkIHdoaWxlIGluIGFuIEludGVyc3RpdGlhbCwgZGV0YWNoIHRoZSBhc3NldCBwbGF5ZXIgYXMgd2VsbCBhbmQgcmVzZXQgdGhlIHNjaGVkdWxlIHBvc2l0aW9uXG4gICAgICBpZiAodGhpcy5kZXRhY2hlZERhdGEpIHtcbiAgICAgICAgdmFyIHBsYXllciA9IHRoaXMuZ2V0QnVmZmVyaW5nUGxheWVyKCk7XG4gICAgICAgIGlmIChwbGF5ZXIpIHtcbiAgICAgICAgICB0aGlzLnBsYXlpbmdBc3NldCA9IHRoaXMuZW5kZWRBc3NldCA9IHRoaXMuYnVmZmVyaW5nQXNzZXQgPSB0aGlzLmJ1ZmZlcmluZ0l0ZW0gPSB0aGlzLndhaXRpbmdJdGVtID0gdGhpcy5kZXRhY2hlZERhdGEgPSBudWxsO1xuICAgICAgICAgIHBsYXllci5kZXRhY2hNZWRpYSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2hvdWxkUGxheSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmlzSW50ZXJzdGl0aWFsID0gZnVuY3Rpb24gaXNJbnRlcnN0aXRpYWwoaXRlbSkge1xuICAgICAgcmV0dXJuICEhKGl0ZW0gIT0gbnVsbCAmJiBpdGVtLmV2ZW50KTtcbiAgICB9O1xuICAgIF9wcm90by5yZXRyZWl2ZU1lZGlhU291cmNlID0gZnVuY3Rpb24gcmV0cmVpdmVNZWRpYVNvdXJjZShhc3NldElkLCB0b1NlZ21lbnQpIHtcbiAgICAgIHZhciBwbGF5ZXIgPSB0aGlzLmdldEFzc2V0UGxheWVyKGFzc2V0SWQpO1xuICAgICAgaWYgKHBsYXllcikge1xuICAgICAgICB0aGlzLnRyYW5zZmVyTWVkaWFGcm9tUGxheWVyKHBsYXllciwgdG9TZWdtZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by50cmFuc2Zlck1lZGlhRnJvbVBsYXllciA9IGZ1bmN0aW9uIHRyYW5zZmVyTWVkaWFGcm9tUGxheWVyKHBsYXllciwgdG9TZWdtZW50KSB7XG4gICAgICB2YXIgYXBwZW5kSW5QbGFjZSA9IHBsYXllci5pbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZTtcbiAgICAgIHZhciBwbGF5ZXJNZWRpYSA9IHBsYXllci5tZWRpYTtcbiAgICAgIGlmIChhcHBlbmRJblBsYWNlICYmIHBsYXllck1lZGlhID09PSB0aGlzLnByaW1hcnlNZWRpYSkge1xuICAgICAgICB0aGlzLmJ1ZmZlcmluZ0Fzc2V0ID0gbnVsbDtcbiAgICAgICAgaWYgKCF0b1NlZ21lbnQgfHwgdGhpcy5pc0ludGVyc3RpdGlhbCh0b1NlZ21lbnQpICYmICF0b1NlZ21lbnQuZXZlbnQuYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICAgIC8vIE1lZGlhU291cmNlIGNhbm5vdCBiZSB0cmFuc2ZlcmVkIGJhY2sgdG8gYW4gSW50ZXJzdGl0aWFsIHRoYXQgcmVxdWlyZXMgYSBzb3VyY2UgcmVzZXRcbiAgICAgICAgICAvLyBuby1vcCB3aGVuIHRvU2VnbWVudCBpcyB1bmRlZmluZWRcbiAgICAgICAgICBpZiAodG9TZWdtZW50ICYmIHBsYXllck1lZGlhKSB7XG4gICAgICAgICAgICB0aGlzLmRldGFjaGVkRGF0YSA9IHtcbiAgICAgICAgICAgICAgbWVkaWE6IHBsYXllck1lZGlhXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgYXR0YWNoTWVkaWFTb3VyY2VEYXRhID0gcGxheWVyLnRyYW5zZmVyTWVkaWEoKTtcbiAgICAgICAgdGhpcy5sb2coXCJ0cmFuc2ZlciBNZWRpYVNvdXJjZSBmcm9tIFwiICsgcGxheWVyICsgXCIgXCIgKyBzdHJpbmdpZnkoYXR0YWNoTWVkaWFTb3VyY2VEYXRhKSk7XG4gICAgICAgIHRoaXMuZGV0YWNoZWREYXRhID0gYXR0YWNoTWVkaWFTb3VyY2VEYXRhO1xuICAgICAgfSBlbHNlIGlmICh0b1NlZ21lbnQgJiYgcGxheWVyTWVkaWEpIHtcbiAgICAgICAgdGhpcy5zaG91bGRQbGF5IHx8ICh0aGlzLnNob3VsZFBsYXkgPSAhcGxheWVyTWVkaWEucGF1c2VkKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by50cmFuc2Zlck1lZGlhVG8gPSBmdW5jdGlvbiB0cmFuc2Zlck1lZGlhVG8ocGxheWVyLCBtZWRpYSkge1xuICAgICAgdmFyIF90aGlzJGRldGFjaGVkRGF0YSxcbiAgICAgICAgX3RoaXMyID0gdGhpcyxcbiAgICAgICAgX2F0dGFjaE1lZGlhU291cmNlRGF0O1xuICAgICAgaWYgKHBsYXllci5tZWRpYSA9PT0gbWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGF0dGFjaE1lZGlhU291cmNlRGF0YSA9IG51bGw7XG4gICAgICB2YXIgcHJpbWFyeVBsYXllciA9IHRoaXMuaGxzO1xuICAgICAgdmFyIGlzQXNzZXRQbGF5ZXIgPSBwbGF5ZXIgIT09IHByaW1hcnlQbGF5ZXI7XG4gICAgICB2YXIgYXBwZW5kSW5QbGFjZSA9IGlzQXNzZXRQbGF5ZXIgJiYgcGxheWVyLmludGVyc3RpdGlhbC5hcHBlbmRJblBsYWNlO1xuICAgICAgdmFyIGRldGFjaGVkTWVkaWFTb3VyY2UgPSAoX3RoaXMkZGV0YWNoZWREYXRhID0gdGhpcy5kZXRhY2hlZERhdGEpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRkZXRhY2hlZERhdGEubWVkaWFTb3VyY2U7XG4gICAgICB2YXIgbG9nRnJvbVNvdXJjZTtcbiAgICAgIGlmIChwcmltYXJ5UGxheWVyLm1lZGlhKSB7XG4gICAgICAgIGlmIChhcHBlbmRJblBsYWNlKSB7XG4gICAgICAgICAgYXR0YWNoTWVkaWFTb3VyY2VEYXRhID0gcHJpbWFyeVBsYXllci50cmFuc2Zlck1lZGlhKCk7XG4gICAgICAgICAgdGhpcy5kZXRhY2hlZERhdGEgPSBhdHRhY2hNZWRpYVNvdXJjZURhdGE7XG4gICAgICAgIH1cbiAgICAgICAgbG9nRnJvbVNvdXJjZSA9IFwiUHJpbWFyeVwiO1xuICAgICAgfSBlbHNlIGlmIChkZXRhY2hlZE1lZGlhU291cmNlKSB7XG4gICAgICAgIHZhciBidWZmZXJpbmdQbGF5ZXIgPSB0aGlzLmdldEJ1ZmZlcmluZ1BsYXllcigpO1xuICAgICAgICBpZiAoYnVmZmVyaW5nUGxheWVyKSB7XG4gICAgICAgICAgYXR0YWNoTWVkaWFTb3VyY2VEYXRhID0gYnVmZmVyaW5nUGxheWVyLnRyYW5zZmVyTWVkaWEoKTtcbiAgICAgICAgICBsb2dGcm9tU291cmNlID0gXCJcIiArIGJ1ZmZlcmluZ1BsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2dGcm9tU291cmNlID0gXCJkZXRhY2hlZCBNZWRpYVNvdXJjZVwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dGcm9tU291cmNlID0gXCJkZXRhY2hlZCBtZWRpYVwiO1xuICAgICAgfVxuICAgICAgaWYgKCFhdHRhY2hNZWRpYVNvdXJjZURhdGEpIHtcbiAgICAgICAgaWYgKGRldGFjaGVkTWVkaWFTb3VyY2UpIHtcbiAgICAgICAgICBhdHRhY2hNZWRpYVNvdXJjZURhdGEgPSB0aGlzLmRldGFjaGVkRGF0YTtcbiAgICAgICAgICB0aGlzLmxvZyhcInVzaW5nIGRldGFjaGVkRGF0YTogTWVkaWFTb3VyY2UgXCIgKyBzdHJpbmdpZnkoYXR0YWNoTWVkaWFTb3VyY2VEYXRhKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuZGV0YWNoZWREYXRhIHx8IHByaW1hcnlQbGF5ZXIubWVkaWEgPT09IG1lZGlhKSB7XG4gICAgICAgICAgLy8gS2VlcCBpbnRlcnN0aXRpYWwgbWVkaWEgdHJhbnNpdGlvbiBjb25zaXN0ZW50XG4gICAgICAgICAgdmFyIHBsYXllclF1ZXVlID0gdGhpcy5wbGF5ZXJRdWV1ZTtcbiAgICAgICAgICBpZiAocGxheWVyUXVldWUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcGxheWVyUXVldWUuZm9yRWFjaChmdW5jdGlvbiAocXVldWVkUGxheWVyKSB7XG4gICAgICAgICAgICAgIGlmIChpc0Fzc2V0UGxheWVyICYmIHF1ZXVlZFBsYXllci5pbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZSAhPT0gYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnN0aXRpYWwgPSBxdWV1ZWRQbGF5ZXIuaW50ZXJzdGl0aWFsO1xuICAgICAgICAgICAgICAgIF90aGlzMi5jbGVhckludGVyc3RpdGlhbChxdWV1ZWRQbGF5ZXIuaW50ZXJzdGl0aWFsLCBudWxsKTtcbiAgICAgICAgICAgICAgICBpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMyLndhcm4oXCJDb3VsZCBub3QgY2hhbmdlIGFwcGVuZCBzdHJhdGVneSBmb3IgcXVldWVkIGFzc2V0cyBcIiArIGludGVyc3RpdGlhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5obHMuZGV0YWNoTWVkaWEoKTtcbiAgICAgICAgICB0aGlzLmRldGFjaGVkRGF0YSA9IHtcbiAgICAgICAgICAgIG1lZGlhOiBtZWRpYVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciB0cmFuc2ZlcnJpbmcgPSBhdHRhY2hNZWRpYVNvdXJjZURhdGEgJiYgJ21lZGlhU291cmNlJyBpbiBhdHRhY2hNZWRpYVNvdXJjZURhdGEgJiYgKChfYXR0YWNoTWVkaWFTb3VyY2VEYXQgPSBhdHRhY2hNZWRpYVNvdXJjZURhdGEubWVkaWFTb3VyY2UpID09IG51bGwgPyB2b2lkIDAgOiBfYXR0YWNoTWVkaWFTb3VyY2VEYXQucmVhZHlTdGF0ZSkgIT09ICdjbG9zZWQnO1xuICAgICAgdmFyIGRhdGFUb0F0dGFjaCA9IHRyYW5zZmVycmluZyAmJiBhdHRhY2hNZWRpYVNvdXJjZURhdGEgPyBhdHRhY2hNZWRpYVNvdXJjZURhdGEgOiBtZWRpYTtcbiAgICAgIHRoaXMubG9nKCh0cmFuc2ZlcnJpbmcgPyAndHJhbnNmZXJpbmcgTWVkaWFTb3VyY2UnIDogJ2F0dGFjaGluZyBtZWRpYScpICsgXCIgdG8gXCIgKyAoaXNBc3NldFBsYXllciA/IHBsYXllciA6ICdQcmltYXJ5JykgKyBcIiBmcm9tIFwiICsgbG9nRnJvbVNvdXJjZSk7XG4gICAgICBpZiAoZGF0YVRvQXR0YWNoID09PSBhdHRhY2hNZWRpYVNvdXJjZURhdGEpIHtcbiAgICAgICAgdmFyIGlzQXNzZXRBdEVuZE9mU2NoZWR1bGUgPSBpc0Fzc2V0UGxheWVyICYmIHBsYXllci5hc3NldElkID09PSB0aGlzLnNjaGVkdWxlLmFzc2V0SWRBdEVuZDtcbiAgICAgICAgLy8gUHJldmVudCBhc3NldCBwbGF5ZXJzIGZyb20gbWFya2luZyBFb1Mgb24gdHJhbnNmZXJyZWQgTWVkaWFTb3VyY2VcbiAgICAgICAgZGF0YVRvQXR0YWNoLm92ZXJyaWRlcyA9IHtcbiAgICAgICAgICBkdXJhdGlvbjogdGhpcy5zY2hlZHVsZS5kdXJhdGlvbixcbiAgICAgICAgICBlbmRPZlN0cmVhbTogIWlzQXNzZXRQbGF5ZXIgfHwgaXNBc3NldEF0RW5kT2ZTY2hlZHVsZSxcbiAgICAgICAgICBjdWVSZW1vdmFsOiAhaXNBc3NldFBsYXllclxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcGxheWVyLmF0dGFjaE1lZGlhKGRhdGFUb0F0dGFjaCk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25JbnRlcnN0aXRpYWxDdWVFbnRlciA9IGZ1bmN0aW9uIG9uSW50ZXJzdGl0aWFsQ3VlRW50ZXIoKSB7XG4gICAgICB0aGlzLm9uVGltZXVwZGF0ZSgpO1xuICAgIH07XG4gICAgLy8gU2NoZWR1bGluZyBtZXRob2RzXG4gICAgX3Byb3RvLmNoZWNrU3RhcnQgPSBmdW5jdGlvbiBjaGVja1N0YXJ0KCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gdGhpcy5zY2hlZHVsZTtcbiAgICAgIHZhciBpbnRlcnN0aXRpYWxFdmVudHMgPSBzY2hlZHVsZS5ldmVudHM7XG4gICAgICBpZiAoIWludGVyc3RpdGlhbEV2ZW50cyB8fCB0aGlzLnBsYXliYWNrRGlzYWJsZWQgfHwgIXRoaXMubWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgYnVmZmVyZWQgdG8gcHJlLXJvbGxcbiAgICAgIGlmICh0aGlzLmJ1ZmZlcmVkUG9zID09PSAtMSkge1xuICAgICAgICB0aGlzLmJ1ZmZlcmVkUG9zID0gMDtcbiAgICAgIH1cbiAgICAgIC8vIFN0YXJ0IHN0ZXBwaW5nIHRocm91Z2ggc2NoZWR1bGUgd2hlbiBwbGF5YmFjayBiZWdpbnMgZm9yIHRoZSBmaXJzdCB0aW1lIGFuZCB3ZSBoYXZlIGEgcHJlLXJvbGxcbiAgICAgIHZhciB0aW1lbGluZVBvcyA9IHRoaXMudGltZWxpbmVQb3M7XG4gICAgICB2YXIgZWZmZWN0aXZlUGxheWluZ0l0ZW0gPSB0aGlzLmVmZmVjdGl2ZVBsYXlpbmdJdGVtO1xuICAgICAgaWYgKHRpbWVsaW5lUG9zID09PSAtMSkge1xuICAgICAgICB2YXIgc3RhcnRQb3NpdGlvbiA9IHRoaXMuaGxzLnN0YXJ0UG9zaXRpb247XG4gICAgICAgIHRoaXMudGltZWxpbmVQb3MgPSBzdGFydFBvc2l0aW9uO1xuICAgICAgICBpZiAoaW50ZXJzdGl0aWFsRXZlbnRzLmxlbmd0aCAmJiBpbnRlcnN0aXRpYWxFdmVudHNbMF0uY3VlLnByZSkge1xuICAgICAgICAgIHZhciBpbmRleCA9IHNjaGVkdWxlLmZpbmRFdmVudEluZGV4KGludGVyc3RpdGlhbEV2ZW50c1swXS5pZGVudGlmaWVyKTtcbiAgICAgICAgICB0aGlzLnNldFNjaGVkdWxlUG9zaXRpb24oaW5kZXgpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0UG9zaXRpb24gPj0gMCB8fCAhdGhpcy5wcmltYXJ5TGl2ZSkge1xuICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMudGltZWxpbmVQb3MgPSBzdGFydFBvc2l0aW9uID4gMCA/IHN0YXJ0UG9zaXRpb24gOiAwO1xuICAgICAgICAgIHZhciBfaW5kZXggPSBzY2hlZHVsZS5maW5kSXRlbUluZGV4QXRUaW1lKHN0YXJ0KTtcbiAgICAgICAgICB0aGlzLnNldFNjaGVkdWxlUG9zaXRpb24oX2luZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlZmZlY3RpdmVQbGF5aW5nSXRlbSAmJiAhdGhpcy5wbGF5aW5nSXRlbSkge1xuICAgICAgICB2YXIgX2luZGV4MiA9IHNjaGVkdWxlLmZpbmRJdGVtSW5kZXgoZWZmZWN0aXZlUGxheWluZ0l0ZW0pO1xuICAgICAgICB0aGlzLnNldFNjaGVkdWxlUG9zaXRpb24oX2luZGV4Mik7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uYWR2YW5jZUFmdGVyQXNzZXRFbmRlZCA9IGZ1bmN0aW9uIGFkdmFuY2VBZnRlckFzc2V0RW5kZWQoaW50ZXJzdGl0aWFsLCBpbmRleCwgYXNzZXRMaXN0SW5kZXgpIHtcbiAgICAgIHZhciBuZXh0QXNzZXRJbmRleCA9IGdldE5leHRBc3NldEluZGV4KGludGVyc3RpdGlhbCwgYXNzZXRMaXN0SW5kZXgpO1xuICAgICAgaWYgKCFpbnRlcnN0aXRpYWwuaXNBc3NldFBhc3RQbGF5b3V0TGltaXQobmV4dEFzc2V0SW5kZXgpKSB7XG4gICAgICAgIC8vIEFkdmFuY2UgdG8gbmV4dCBhc3NldCBsaXN0IGl0ZW1cbiAgICAgICAgdGhpcy5zZXRTY2hlZHVsZVBvc2l0aW9uKGluZGV4LCBuZXh0QXNzZXRJbmRleCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBZHZhbmNlIHRvIG5leHQgc2NoZWR1bGUgc2VnbWVudFxuICAgICAgICAvLyBjaGVjayBpZiB3ZSd2ZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIHByb2dyYW1cbiAgICAgICAgdmFyIHNjaGVkdWxlSXRlbXMgPSB0aGlzLnNjaGVkdWxlLml0ZW1zO1xuICAgICAgICBpZiAoc2NoZWR1bGVJdGVtcykge1xuICAgICAgICAgIHZhciBuZXh0SW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgICAgdmFyIHNjaGVkdWxlTGVuZ3RoID0gc2NoZWR1bGVJdGVtcy5sZW5ndGg7XG4gICAgICAgICAgaWYgKG5leHRJbmRleCA+PSBzY2hlZHVsZUxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTY2hlZHVsZVBvc2l0aW9uKC0xKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlc3VtcHRpb25UaW1lID0gaW50ZXJzdGl0aWFsLnJlc3VtZVRpbWU7XG4gICAgICAgICAgaWYgKHRoaXMudGltZWxpbmVQb3MgPCByZXN1bXB0aW9uVGltZSkge1xuICAgICAgICAgICAgdGhpcy50aW1lbGluZVBvcyA9IHJlc3VtcHRpb25UaW1lO1xuICAgICAgICAgICAgdGhpcy5jaGVja0J1ZmZlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldFNjaGVkdWxlUG9zaXRpb24obmV4dEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnNldFNjaGVkdWxlVG9Bc3NldEF0VGltZSA9IGZ1bmN0aW9uIHNldFNjaGVkdWxlVG9Bc3NldEF0VGltZSh0aW1lLCBwbGF5aW5nQXNzZXQpIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IHRoaXMuc2NoZWR1bGU7XG4gICAgICB2YXIgcGFyZW50SWRlbnRpZmllciA9IHBsYXlpbmdBc3NldC5wYXJlbnRJZGVudGlmaWVyO1xuICAgICAgdmFyIGludGVyc3RpdGlhbCA9IHNjaGVkdWxlLmdldEV2ZW50KHBhcmVudElkZW50aWZpZXIpO1xuICAgICAgaWYgKGludGVyc3RpdGlhbCkge1xuICAgICAgICB2YXIgaXRlbUluZGV4ID0gc2NoZWR1bGUuZmluZEV2ZW50SW5kZXgocGFyZW50SWRlbnRpZmllcik7XG4gICAgICAgIHZhciBhc3NldExpc3RJbmRleCA9IHNjaGVkdWxlLmZpbmRBc3NldEluZGV4KGludGVyc3RpdGlhbCwgdGltZSk7XG4gICAgICAgIHRoaXMuYWR2YW5jZUFmdGVyQXNzZXRFbmRlZChpbnRlcnN0aXRpYWwsIGl0ZW1JbmRleCwgYXNzZXRMaXN0SW5kZXggLSAxKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5zZXRTY2hlZHVsZVBvc2l0aW9uID0gZnVuY3Rpb24gc2V0U2NoZWR1bGVQb3NpdGlvbihpbmRleCwgYXNzZXRMaXN0SW5kZXgpIHtcbiAgICAgIHZhciBzY2hlZHVsZUl0ZW1zID0gdGhpcy5zY2hlZHVsZS5pdGVtcztcbiAgICAgIGlmICghc2NoZWR1bGVJdGVtcyB8fCB0aGlzLnBsYXliYWNrRGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2coXCJzZXRTY2hlZHVsZVBvc2l0aW9uIFwiICsgaW5kZXggKyBcIiwgXCIgKyBhc3NldExpc3RJbmRleCk7XG4gICAgICB2YXIgc2NoZWR1bGVkSXRlbSA9IGluZGV4ID49IDAgPyBzY2hlZHVsZUl0ZW1zW2luZGV4XSA6IG51bGw7XG4gICAgICAvLyBDbGVhbnVwIGN1cnJlbnQgaXRlbSAvIGFzc2V0XG4gICAgICB2YXIgY3VycmVudEl0ZW0gPSB0aGlzLnBsYXlpbmdJdGVtO1xuICAgICAgdmFyIHBsYXlpbmdMYXN0SXRlbSA9IHRoaXMucGxheWluZ0xhc3RJdGVtO1xuICAgICAgaWYgKHRoaXMuaXNJbnRlcnN0aXRpYWwoY3VycmVudEl0ZW0pKSB7XG4gICAgICAgIHZhciBfaW50ZXJzdGl0aWFsJGFzc2V0TGk7XG4gICAgICAgIHZhciBpbnRlcnN0aXRpYWwgPSBjdXJyZW50SXRlbS5ldmVudDtcbiAgICAgICAgdmFyIHBsYXlpbmdBc3NldCA9IHRoaXMucGxheWluZ0Fzc2V0O1xuICAgICAgICB2YXIgYXNzZXRJZCA9IHBsYXlpbmdBc3NldCA9PSBudWxsID8gdm9pZCAwIDogcGxheWluZ0Fzc2V0LmlkZW50aWZpZXI7XG4gICAgICAgIHZhciBwbGF5ZXIgPSBhc3NldElkID8gdGhpcy5nZXRBc3NldFBsYXllcihhc3NldElkKSA6IG51bGw7XG4gICAgICAgIGlmIChwbGF5ZXIgJiYgYXNzZXRJZCAmJiAoIXRoaXMuZXZlbnRJdGVtc01hdGNoKGN1cnJlbnRJdGVtLCBzY2hlZHVsZWRJdGVtKSB8fCBhc3NldExpc3RJbmRleCAhPT0gdW5kZWZpbmVkICYmIGFzc2V0SWQgIT09ICgoX2ludGVyc3RpdGlhbCRhc3NldExpID0gaW50ZXJzdGl0aWFsLmFzc2V0TGlzdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9pbnRlcnN0aXRpYWwkYXNzZXRMaVthc3NldExpc3RJbmRleF0uaWRlbnRpZmllcikpKSB7XG4gICAgICAgICAgdmFyIF90aGlzJGRldGFjaGVkRGF0YTI7XG4gICAgICAgICAgdmFyIHBsYXlpbmdBc3NldExpc3RJbmRleCA9IGludGVyc3RpdGlhbC5maW5kQXNzZXRJbmRleChwbGF5aW5nQXNzZXQpO1xuICAgICAgICAgIHRoaXMubG9nKFwiSU5URVJTVElUSUFMX0FTU0VUX0VOREVEIFwiICsgKHBsYXlpbmdBc3NldExpc3RJbmRleCArIDEpICsgXCIvXCIgKyBpbnRlcnN0aXRpYWwuYXNzZXRMaXN0Lmxlbmd0aCArIFwiIFwiICsgZXZlbnRBc3NldFRvU3RyaW5nKHBsYXlpbmdBc3NldCkpO1xuICAgICAgICAgIHRoaXMuZW5kZWRBc3NldCA9IHBsYXlpbmdBc3NldDtcbiAgICAgICAgICB0aGlzLnBsYXlpbmdBc3NldCA9IG51bGw7XG4gICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuSU5URVJTVElUSUFMX0FTU0VUX0VOREVELCB7XG4gICAgICAgICAgICBhc3NldDogcGxheWluZ0Fzc2V0LFxuICAgICAgICAgICAgYXNzZXRMaXN0SW5kZXg6IHBsYXlpbmdBc3NldExpc3RJbmRleCxcbiAgICAgICAgICAgIGV2ZW50OiBpbnRlcnN0aXRpYWwsXG4gICAgICAgICAgICBzY2hlZHVsZTogc2NoZWR1bGVJdGVtcy5zbGljZSgwKSxcbiAgICAgICAgICAgIHNjaGVkdWxlSW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLnJldHJlaXZlTWVkaWFTb3VyY2UoYXNzZXRJZCwgc2NoZWR1bGVkSXRlbSk7XG4gICAgICAgICAgaWYgKHBsYXllci5tZWRpYSAmJiAhKChfdGhpcyRkZXRhY2hlZERhdGEyID0gdGhpcy5kZXRhY2hlZERhdGEpICE9IG51bGwgJiYgX3RoaXMkZGV0YWNoZWREYXRhMi5tZWRpYVNvdXJjZSkpIHtcbiAgICAgICAgICAgIHBsYXllci5kZXRhY2hNZWRpYSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuZXZlbnRJdGVtc01hdGNoKGN1cnJlbnRJdGVtLCBzY2hlZHVsZWRJdGVtKSkge1xuICAgICAgICAgIHRoaXMuZW5kZWRJdGVtID0gY3VycmVudEl0ZW07XG4gICAgICAgICAgdGhpcy5wbGF5aW5nSXRlbSA9IG51bGw7XG4gICAgICAgICAgdGhpcy5sb2coXCJJTlRFUlNUSVRJQUxfRU5ERUQgXCIgKyBpbnRlcnN0aXRpYWwgKyBcIiBcIiArIHNlZ21lbnRUb1N0cmluZyhjdXJyZW50SXRlbSkpO1xuICAgICAgICAgIGludGVyc3RpdGlhbC5oYXNQbGF5ZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLklOVEVSU1RJVElBTF9FTkRFRCwge1xuICAgICAgICAgICAgZXZlbnQ6IGludGVyc3RpdGlhbCxcbiAgICAgICAgICAgIHNjaGVkdWxlOiBzY2hlZHVsZUl0ZW1zLnNsaWNlKDApLFxuICAgICAgICAgICAgc2NoZWR1bGVJbmRleDogaW5kZXhcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBFeGl0aW5nIGFuIEludGVyc3RpdGlhbFxuICAgICAgICAgIGlmIChpbnRlcnN0aXRpYWwuY3VlLm9uY2UpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBpbnRlcnN0aXRpYWwgd2l0aCBDVUUgYXR0cmlidXRlIHZhbHVlIG9mIE9OQ0UgYWZ0ZXIgaXQgaGFzIHBsYXllZFxuICAgICAgICAgICAgdGhpcy51cGRhdGVTY2hlZHVsZSgpO1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5zY2hlZHVsZS5pdGVtcztcbiAgICAgICAgICAgIGlmIChzY2hlZHVsZWRJdGVtICYmIGl0ZW1zKSB7XG4gICAgICAgICAgICAgIHZhciB1cGRhdGVkSW5kZXggPSB0aGlzLnNjaGVkdWxlLmZpbmRJdGVtSW5kZXgoc2NoZWR1bGVkSXRlbSk7XG4gICAgICAgICAgICAgIHRoaXMuYWR2YW5jZVNjaGVkdWxlKHVwZGF0ZWRJbmRleCwgaXRlbXMsIGFzc2V0TGlzdEluZGV4LCBjdXJyZW50SXRlbSwgcGxheWluZ0xhc3RJdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuYWR2YW5jZVNjaGVkdWxlKGluZGV4LCBzY2hlZHVsZUl0ZW1zLCBhc3NldExpc3RJbmRleCwgY3VycmVudEl0ZW0sIHBsYXlpbmdMYXN0SXRlbSk7XG4gICAgfTtcbiAgICBfcHJvdG8uYWR2YW5jZVNjaGVkdWxlID0gZnVuY3Rpb24gYWR2YW5jZVNjaGVkdWxlKGluZGV4LCBzY2hlZHVsZUl0ZW1zLCBhc3NldExpc3RJbmRleCwgY3VycmVudEl0ZW0sIHBsYXllZExhc3RJdGVtKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIHZhciBzY2hlZHVsZWRJdGVtID0gaW5kZXggPj0gMCA/IHNjaGVkdWxlSXRlbXNbaW5kZXhdIDogbnVsbDtcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMucHJpbWFyeU1lZGlhO1xuICAgICAgLy8gQ2xlYW51cCBvdXQgb2YgcmFuZ2UgSW50ZXJzdGl0aWFsc1xuICAgICAgdmFyIHBsYXllclF1ZXVlID0gdGhpcy5wbGF5ZXJRdWV1ZTtcbiAgICAgIGlmIChwbGF5ZXJRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcGxheWVyUXVldWUuZm9yRWFjaChmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgdmFyIGludGVyc3RpdGlhbCA9IHBsYXllci5pbnRlcnN0aXRpYWw7XG4gICAgICAgICAgdmFyIHF1ZXVlZEluZGV4ID0gX3RoaXMzLnNjaGVkdWxlLmZpbmRFdmVudEluZGV4KGludGVyc3RpdGlhbC5pZGVudGlmaWVyKTtcbiAgICAgICAgICBpZiAocXVldWVkSW5kZXggPCBpbmRleCB8fCBxdWV1ZWRJbmRleCA+IGluZGV4ICsgMSkge1xuICAgICAgICAgICAgX3RoaXMzLmNsZWFySW50ZXJzdGl0aWFsKGludGVyc3RpdGlhbCwgc2NoZWR1bGVkSXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIFNldHVwIHNjaGVkdWxlZCBpdGVtXG4gICAgICBpZiAodGhpcy5pc0ludGVyc3RpdGlhbChzY2hlZHVsZWRJdGVtKSkge1xuICAgICAgICB0aGlzLnRpbWVsaW5lUG9zID0gTWF0aC5taW4oTWF0aC5tYXgodGhpcy50aW1lbGluZVBvcywgc2NoZWR1bGVkSXRlbS5zdGFydCksIHNjaGVkdWxlZEl0ZW0uZW5kKTtcbiAgICAgICAgLy8gSGFuZGxlIEludGVyc3RpdGlhbFxuICAgICAgICB2YXIgaW50ZXJzdGl0aWFsID0gc2NoZWR1bGVkSXRlbS5ldmVudDtcbiAgICAgICAgLy8gZmluZCBhc3NldCBpbmRleFxuICAgICAgICBpZiAoYXNzZXRMaXN0SW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGFzc2V0TGlzdEluZGV4ID0gdGhpcy5zY2hlZHVsZS5maW5kQXNzZXRJbmRleChpbnRlcnN0aXRpYWwsIHRoaXMudGltZWxpbmVQb3MpO1xuICAgICAgICAgIHZhciBhc3NldEluZGV4Q2FuZGlkYXRlID0gZ2V0TmV4dEFzc2V0SW5kZXgoaW50ZXJzdGl0aWFsLCBhc3NldExpc3RJbmRleCAtIDEpO1xuICAgICAgICAgIGlmIChpbnRlcnN0aXRpYWwuaXNBc3NldFBhc3RQbGF5b3V0TGltaXQoYXNzZXRJbmRleENhbmRpZGF0ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuYWR2YW5jZUFmdGVyQXNzZXRFbmRlZChpbnRlcnN0aXRpYWwsIGluZGV4LCBhc3NldExpc3RJbmRleCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2V0TGlzdEluZGV4ID0gYXNzZXRJbmRleENhbmRpZGF0ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgSW50ZXJzdGl0aWFsIGlzIGVucXVldWVkXG4gICAgICAgIHZhciB3YWl0aW5nSXRlbSA9IHRoaXMud2FpdGluZ0l0ZW07XG4gICAgICAgIGlmICghdGhpcy5hc3NldHNCdWZmZXJlZChzY2hlZHVsZWRJdGVtLCBtZWRpYSkpIHtcbiAgICAgICAgICB0aGlzLnNldEJ1ZmZlcmluZ0l0ZW0oc2NoZWR1bGVkSXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBsYXllciA9IHRoaXMucHJlbG9hZEFzc2V0cyhpbnRlcnN0aXRpYWwsIGFzc2V0TGlzdEluZGV4KTtcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50SXRlbXNNYXRjaChzY2hlZHVsZWRJdGVtLCB3YWl0aW5nSXRlbSB8fCBjdXJyZW50SXRlbSkpIHtcbiAgICAgICAgICB0aGlzLndhaXRpbmdJdGVtID0gc2NoZWR1bGVkSXRlbTtcbiAgICAgICAgICB0aGlzLmxvZyhcIklOVEVSU1RJVElBTF9TVEFSVEVEIFwiICsgc2VnbWVudFRvU3RyaW5nKHNjaGVkdWxlZEl0ZW0pICsgXCIgXCIgKyAoaW50ZXJzdGl0aWFsLmFwcGVuZEluUGxhY2UgPyAnYXBwZW5kIGluIHBsYWNlJyA6ICcnKSk7XG4gICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuSU5URVJTVElUSUFMX1NUQVJURUQsIHtcbiAgICAgICAgICAgIGV2ZW50OiBpbnRlcnN0aXRpYWwsXG4gICAgICAgICAgICBzY2hlZHVsZTogc2NoZWR1bGVJdGVtcy5zbGljZSgwKSxcbiAgICAgICAgICAgIHNjaGVkdWxlSW5kZXg6IGluZGV4XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbnRlcnN0aXRpYWwuYXNzZXRMaXN0TG9hZGVkKSB7XG4gICAgICAgICAgLy8gV2FpdGluZyBhdCBlbmQgb2YgcHJpbWFyeSBjb250ZW50IHNlZ21lbnRcbiAgICAgICAgICAvLyBFeHBlY3Qgc2V0U2NoZWR1bGVQb3NpdGlvbiB0byBiZSBjYWxsZWQgYWdhaW4gb25jZSBBU1NFVC1MSVNUIGlzIGxvYWRlZFxuICAgICAgICAgIHRoaXMubG9nKFwiV2FpdGluZyBmb3IgQVNTRVQtTElTVCB0byBjb21wbGV0ZSBsb2FkaW5nIFwiICsgaW50ZXJzdGl0aWFsKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVyc3RpdGlhbC5hc3NldExpc3RMb2FkZXIpIHtcbiAgICAgICAgICBpbnRlcnN0aXRpYWwuYXNzZXRMaXN0TG9hZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICBpbnRlcnN0aXRpYWwuYXNzZXRMaXN0TG9hZGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWVkaWEpIHtcbiAgICAgICAgICB0aGlzLmxvZyhcIldhaXRpbmcgZm9yIGF0dGFjaE1lZGlhIHRvIHN0YXJ0IEludGVyc3RpdGlhbCBcIiArIGludGVyc3RpdGlhbCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVwZGF0ZSBzY2hlZHVsZSBhbmQgYXNzZXQgbGlzdCBwb3NpdGlvbiBub3cgdGhhdCBpdCBjYW4gc3RhcnRcbiAgICAgICAgdGhpcy53YWl0aW5nSXRlbSA9IHRoaXMuZW5kZWRJdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5wbGF5aW5nSXRlbSA9IHNjaGVkdWxlZEl0ZW07XG5cbiAgICAgICAgLy8gSWYgYXNzZXQtbGlzdCBpcyBlbXB0eSBvciBtaXNzaW5nIGFzc2V0IGluZGV4LCBhZHZhbmNlIHRvIG5leHQgaXRlbVxuICAgICAgICB2YXIgYXNzZXRJdGVtID0gaW50ZXJzdGl0aWFsLmFzc2V0TGlzdFthc3NldExpc3RJbmRleF07XG4gICAgICAgIGlmICghYXNzZXRJdGVtKSB7XG4gICAgICAgICAgdmFyIG5leHRJdGVtID0gc2NoZWR1bGVJdGVtc1tpbmRleCArIDFdO1xuICAgICAgICAgIHZhciBfbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgICAgICAgIGlmIChuZXh0SXRlbSAmJiBfbWVkaWEgJiYgIXRoaXMuaXNJbnRlcnN0aXRpYWwobmV4dEl0ZW0pICYmIF9tZWRpYS5jdXJyZW50VGltZSA8IG5leHRJdGVtLnN0YXJ0KSB7XG4gICAgICAgICAgICBfbWVkaWEuY3VycmVudFRpbWUgPSB0aGlzLnRpbWVsaW5lUG9zID0gbmV4dEl0ZW0uc3RhcnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYWR2YW5jZUFmdGVyQXNzZXRFbmRlZChpbnRlcnN0aXRpYWwsIGluZGV4LCBhc3NldExpc3RJbmRleCB8fCAwKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGFydCBJbnRlcnN0aXRpYWwgUGxheWJhY2tcbiAgICAgICAgaWYgKCFwbGF5ZXIpIHtcbiAgICAgICAgICBwbGF5ZXIgPSB0aGlzLmdldEFzc2V0UGxheWVyKGFzc2V0SXRlbS5pZGVudGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGxheWVyID09PSBudWxsIHx8IHBsYXllci5kZXN0cm95ZWQpIHtcbiAgICAgICAgICB2YXIgYXNzZXRMaXN0TGVuZ3RoID0gaW50ZXJzdGl0aWFsLmFzc2V0TGlzdC5sZW5ndGg7XG4gICAgICAgICAgdGhpcy53YXJuKFwiYXNzZXQgXCIgKyAoYXNzZXRMaXN0SW5kZXggKyAxKSArIFwiL1wiICsgYXNzZXRMaXN0TGVuZ3RoICsgXCIgcGxheWVyIGRlc3Ryb3llZCBcIiArIGludGVyc3RpdGlhbCk7XG4gICAgICAgICAgcGxheWVyID0gdGhpcy5jcmVhdGVBc3NldFBsYXllcihpbnRlcnN0aXRpYWwsIGFzc2V0SXRlbSwgYXNzZXRMaXN0SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5ldmVudEl0ZW1zTWF0Y2goc2NoZWR1bGVkSXRlbSwgdGhpcy5idWZmZXJpbmdJdGVtKSkge1xuICAgICAgICAgIGlmIChpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZSAmJiB0aGlzLmlzQXNzZXRCdWZmZXJlZChhc3NldEl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhcnRBc3NldFBsYXllcihwbGF5ZXIsIGFzc2V0TGlzdEluZGV4LCBzY2hlZHVsZUl0ZW1zLCBpbmRleCwgbWVkaWEpO1xuICAgICAgICBpZiAodGhpcy5zaG91bGRQbGF5KSB7XG4gICAgICAgICAgcGxheVdpdGhDYXRjaChwbGF5ZXIubWVkaWEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNjaGVkdWxlZEl0ZW0gIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5yZXN1bWVQcmltYXJ5KHNjaGVkdWxlZEl0ZW0sIGluZGV4LCBjdXJyZW50SXRlbSk7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFBsYXkpIHtcbiAgICAgICAgICBwbGF5V2l0aENhdGNoKHRoaXMuaGxzLm1lZGlhKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwbGF5ZWRMYXN0SXRlbSAmJiB0aGlzLmlzSW50ZXJzdGl0aWFsKGN1cnJlbnRJdGVtKSkge1xuICAgICAgICAvLyBNYWludGFpbiBwbGF5aW5nSXRlbSBzdGF0ZSBhdCBlbmQgb2Ygc2NoZWR1bGUgKHNldFNjaGVkdWxlUG9zaXRpb24oLTEpIGNhbGxlZCB0byBlbmQgcHJvZ3JhbSlcbiAgICAgICAgLy8gdGhpcyBhbGxvd3Mgb25TZWVraW5nIGhhbmRsZXIgdG8gdXBkYXRlIHNjaGVkdWxlIHBvc2l0aW9uXG4gICAgICAgIHRoaXMuZW5kZWRJdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5wbGF5aW5nSXRlbSA9IGN1cnJlbnRJdGVtO1xuICAgICAgICBpZiAoIWN1cnJlbnRJdGVtLmV2ZW50LmFwcGVuZEluUGxhY2UpIHtcbiAgICAgICAgICAvLyBNZWRpYSBtdXN0IGJlIHJlLWF0dGFjaGVkIHRvIHJlc3VtZSBwcmltYXJ5IHNjaGVkdWxlIGlmIG5vdCBzaGFyaW5nIHNvdXJjZVxuICAgICAgICAgIHRoaXMuYXR0YWNoUHJpbWFyeSh0aGlzLnNjaGVkdWxlLmR1cmF0aW9ucy5wcmltYXJ5LCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnJlc3VtZVByaW1hcnkgPSBmdW5jdGlvbiByZXN1bWVQcmltYXJ5KHNjaGVkdWxlZEl0ZW0sIGluZGV4LCBmcm9tSXRlbSkge1xuICAgICAgdmFyIF90aGlzJGRldGFjaGVkRGF0YTM7XG4gICAgICB0aGlzLnBsYXlpbmdJdGVtID0gc2NoZWR1bGVkSXRlbTtcbiAgICAgIHRoaXMucGxheWluZ0Fzc2V0ID0gdGhpcy5lbmRlZEFzc2V0ID0gbnVsbDtcbiAgICAgIHRoaXMud2FpdGluZ0l0ZW0gPSB0aGlzLmVuZGVkSXRlbSA9IG51bGw7XG4gICAgICB0aGlzLmJ1ZmZlcmVkVG9JdGVtKHNjaGVkdWxlZEl0ZW0pO1xuICAgICAgdGhpcy5sb2coXCJyZXN1bWluZyBcIiArIHNlZ21lbnRUb1N0cmluZyhzY2hlZHVsZWRJdGVtKSk7XG4gICAgICBpZiAoISgoX3RoaXMkZGV0YWNoZWREYXRhMyA9IHRoaXMuZGV0YWNoZWREYXRhKSAhPSBudWxsICYmIF90aGlzJGRldGFjaGVkRGF0YTMubWVkaWFTb3VyY2UpKSB7XG4gICAgICAgIHZhciB0aW1lbGluZVBvcyA9IHRoaXMudGltZWxpbmVQb3M7XG4gICAgICAgIGlmICh0aW1lbGluZVBvcyA8IHNjaGVkdWxlZEl0ZW0uc3RhcnQgfHwgdGltZWxpbmVQb3MgPj0gc2NoZWR1bGVkSXRlbS5lbmQpIHtcbiAgICAgICAgICB0aW1lbGluZVBvcyA9IHRoaXMuZ2V0UHJpbWFyeVJlc3VtcHRpb24oc2NoZWR1bGVkSXRlbSwgaW5kZXgpO1xuICAgICAgICAgIHRoaXMudGltZWxpbmVQb3MgPSB0aW1lbGluZVBvcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dGFjaFByaW1hcnkodGltZWxpbmVQb3MsIHNjaGVkdWxlZEl0ZW0pO1xuICAgICAgfVxuICAgICAgaWYgKCFmcm9tSXRlbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc2NoZWR1bGVJdGVtcyA9IHRoaXMuc2NoZWR1bGUuaXRlbXM7XG4gICAgICBpZiAoIXNjaGVkdWxlSXRlbXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2coXCJJTlRFUlNUSVRJQUxTX1BSSU1BUllfUkVTVU1FRCBcIiArIHNlZ21lbnRUb1N0cmluZyhzY2hlZHVsZWRJdGVtKSk7XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5JTlRFUlNUSVRJQUxTX1BSSU1BUllfUkVTVU1FRCwge1xuICAgICAgICBzY2hlZHVsZTogc2NoZWR1bGVJdGVtcy5zbGljZSgwKSxcbiAgICAgICAgc2NoZWR1bGVJbmRleDogaW5kZXhcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jaGVja0J1ZmZlcigpO1xuICAgIH07XG4gICAgX3Byb3RvLmdldFByaW1hcnlSZXN1bXB0aW9uID0gZnVuY3Rpb24gZ2V0UHJpbWFyeVJlc3VtcHRpb24oc2NoZWR1bGVkSXRlbSwgaW5kZXgpIHtcbiAgICAgIHZhciBpdGVtU3RhcnQgPSBzY2hlZHVsZWRJdGVtLnN0YXJ0O1xuICAgICAgaWYgKHRoaXMucHJpbWFyeUxpdmUpIHtcbiAgICAgICAgdmFyIGRldGFpbHMgPSB0aGlzLnByaW1hcnlEZXRhaWxzO1xuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5obHMuc3RhcnRQb3NpdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmIChkZXRhaWxzICYmIChpdGVtU3RhcnQgPCBkZXRhaWxzLmZyYWdtZW50U3RhcnQgfHwgaXRlbVN0YXJ0ID4gZGV0YWlscy5lZGdlKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmhscy5saXZlU3luY1Bvc2l0aW9uIHx8IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlbVN0YXJ0O1xuICAgIH07XG4gICAgX3Byb3RvLmlzQXNzZXRCdWZmZXJlZCA9IGZ1bmN0aW9uIGlzQXNzZXRCdWZmZXJlZChhc3NldCkge1xuICAgICAgdmFyIHBsYXllciA9IHRoaXMuZ2V0QXNzZXRQbGF5ZXIoYXNzZXQuaWRlbnRpZmllcik7XG4gICAgICBpZiAocGxheWVyICE9IG51bGwgJiYgcGxheWVyLmhscykge1xuICAgICAgICByZXR1cm4gcGxheWVyLmhscy5idWZmZXJlZFRvRW5kO1xuICAgICAgfVxuICAgICAgdmFyIGJ1ZmZlckluZm8gPSBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyh0aGlzLnByaW1hcnlNZWRpYSwgdGhpcy50aW1lbGluZVBvcywgMCk7XG4gICAgICByZXR1cm4gYnVmZmVySW5mby5lbmQgKyAxID49IGFzc2V0LnRpbWVsaW5lU3RhcnQgKyAoYXNzZXQuZHVyYXRpb24gfHwgMCk7XG4gICAgfTtcbiAgICBfcHJvdG8uYXR0YWNoUHJpbWFyeSA9IGZ1bmN0aW9uIGF0dGFjaFByaW1hcnkodGltZWxpbmVQb3MsIGl0ZW0sIHNraXBTZWVrVG9TdGFydFBvc2l0aW9uKSB7XG4gICAgICBpZiAoaXRlbSkge1xuICAgICAgICB0aGlzLnNldEJ1ZmZlcmluZ0l0ZW0oaXRlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJ1ZmZlcmluZ0l0ZW0gPSB0aGlzLnBsYXlpbmdJdGVtO1xuICAgICAgfVxuICAgICAgdGhpcy5idWZmZXJpbmdBc3NldCA9IG51bGw7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLnByaW1hcnlNZWRpYTtcbiAgICAgIGlmICghbWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaWYgKGhscy5tZWRpYSkge1xuICAgICAgICB0aGlzLmNoZWNrQnVmZmVyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRyYW5zZmVyTWVkaWFUbyhobHMsIG1lZGlhKTtcbiAgICAgICAgaWYgKHNraXBTZWVrVG9TdGFydFBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy5zdGFydExvYWRpbmdQcmltYXJ5QXQodGltZWxpbmVQb3MsIHNraXBTZWVrVG9TdGFydFBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFza2lwU2Vla1RvU3RhcnRQb3NpdGlvbikge1xuICAgICAgICAvLyBTZXQgcHJpbWFyeSBwb3NpdGlvbiB0byByZXN1bWUgdGltZVxuICAgICAgICB0aGlzLnRpbWVsaW5lUG9zID0gdGltZWxpbmVQb3M7XG4gICAgICAgIHRoaXMuc3RhcnRMb2FkaW5nUHJpbWFyeUF0KHRpbWVsaW5lUG9zLCBza2lwU2Vla1RvU3RhcnRQb3NpdGlvbik7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uc3RhcnRMb2FkaW5nUHJpbWFyeUF0ID0gZnVuY3Rpb24gc3RhcnRMb2FkaW5nUHJpbWFyeUF0KHRpbWVsaW5lUG9zLCBza2lwU2Vla1RvU3RhcnRQb3NpdGlvbikge1xuICAgICAgdmFyIF9obHMkbWFpbkZvcndhcmRCdWZmZTtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGlmICghaGxzLmxvYWRpbmdFbmFibGVkIHx8ICFobHMubWVkaWEgfHwgTWF0aC5hYnMoKCgoX2hscyRtYWluRm9yd2FyZEJ1ZmZlID0gaGxzLm1haW5Gb3J3YXJkQnVmZmVySW5mbykgPT0gbnVsbCA/IHZvaWQgMCA6IF9obHMkbWFpbkZvcndhcmRCdWZmZS5zdGFydCkgfHwgaGxzLm1lZGlhLmN1cnJlbnRUaW1lKSAtIHRpbWVsaW5lUG9zKSA+IDAuNSkge1xuICAgICAgICBobHMuc3RhcnRMb2FkKHRpbWVsaW5lUG9zLCBza2lwU2Vla1RvU3RhcnRQb3NpdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKCFobHMuYnVmZmVyaW5nRW5hYmxlZCkge1xuICAgICAgICBobHMucmVzdW1lQnVmZmVyaW5nKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSExTLmpzIGV2ZW50IGNhbGxiYWNrc1xuICAgIDtcbiAgICBfcHJvdG8ub25NYW5pZmVzdExvYWRpbmcgPSBmdW5jdGlvbiBvbk1hbmlmZXN0TG9hZGluZygpIHtcbiAgICAgIHRoaXMuc3RvcExvYWQoKTtcbiAgICAgIHRoaXMuc2NoZWR1bGUucmVzZXQoKTtcbiAgICAgIHRoaXMuZW1wdHlQbGF5ZXJRdWV1ZSgpO1xuICAgICAgdGhpcy5jbGVhclNjaGVkdWxlU3RhdGUoKTtcbiAgICAgIHRoaXMuc2hvdWxkUGxheSA9IGZhbHNlO1xuICAgICAgdGhpcy5idWZmZXJlZFBvcyA9IHRoaXMudGltZWxpbmVQb3MgPSAtMTtcbiAgICAgIHRoaXMubWVkaWFTZWxlY3Rpb24gPSB0aGlzLmFsdFNlbGVjdGlvbiA9IHRoaXMubWFuYWdlciA9IHRoaXMucmVxdWlyZWRUcmFja3MgPSBudWxsO1xuICAgICAgLy8gQlVGRkVSX0NPREVDUyBsaXN0ZW5lciBhZGRlZCBoZXJlIGZvciBidWZmZXItY29udHJvbGxlciB0byBoYW5kbGUgaXQgZmlyc3Qgd2hlcmUgaXQgYWRkcyB0cmFja3NcbiAgICAgIHRoaXMuaGxzLm9mZihFdmVudHMuQlVGRkVSX0NPREVDUywgdGhpcy5vbkJ1ZmZlckNvZGVjcywgdGhpcyk7XG4gICAgICB0aGlzLmhscy5vbihFdmVudHMuQlVGRkVSX0NPREVDUywgdGhpcy5vbkJ1ZmZlckNvZGVjcywgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25MZXZlbFVwZGF0ZWQgPSBmdW5jdGlvbiBvbkxldmVsVXBkYXRlZChldmVudCwgZGF0YSkge1xuICAgICAgaWYgKGRhdGEubGV2ZWwgPT09IC0xKSB7XG4gICAgICAgIC8vIGxldmVsIHdhcyByZW1vdmVkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBtYWluID0gdGhpcy5obHMubGV2ZWxzW2RhdGEubGV2ZWxdO1xuICAgICAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgdGhpcy5tZWRpYVNlbGVjdGlvbiB8fCB0aGlzLmFsdFNlbGVjdGlvbiksIHt9LCB7XG4gICAgICAgIG1haW46IG1haW5cbiAgICAgIH0pO1xuICAgICAgdGhpcy5tZWRpYVNlbGVjdGlvbiA9IGN1cnJlbnRTZWxlY3Rpb247XG4gICAgICB0aGlzLnNjaGVkdWxlLnBhcnNlSW50ZXJzdGl0aWFsRGF0ZVJhbmdlcyhjdXJyZW50U2VsZWN0aW9uLCB0aGlzLmhscy5jb25maWcuaW50ZXJzdGl0aWFsQXBwZW5kSW5QbGFjZSk7XG4gICAgICBpZiAoIXRoaXMuZWZmZWN0aXZlUGxheWluZ0l0ZW0gJiYgdGhpcy5zY2hlZHVsZS5pdGVtcykge1xuICAgICAgICB0aGlzLmNoZWNrU3RhcnQoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkF1ZGlvVHJhY2tVcGRhdGVkID0gZnVuY3Rpb24gb25BdWRpb1RyYWNrVXBkYXRlZChldmVudCwgZGF0YSkge1xuICAgICAgdmFyIGF1ZGlvID0gdGhpcy5obHMuYXVkaW9UcmFja3NbZGF0YS5pZF07XG4gICAgICB2YXIgcHJldmlvdXNTZWxlY3Rpb24gPSB0aGlzLm1lZGlhU2VsZWN0aW9uO1xuICAgICAgaWYgKCFwcmV2aW91c1NlbGVjdGlvbikge1xuICAgICAgICB0aGlzLmFsdFNlbGVjdGlvbiA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCB0aGlzLmFsdFNlbGVjdGlvbiksIHt9LCB7XG4gICAgICAgICAgYXVkaW86IGF1ZGlvXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBwcmV2aW91c1NlbGVjdGlvbiksIHt9LCB7XG4gICAgICAgIGF1ZGlvOiBhdWRpb1xuICAgICAgfSk7XG4gICAgICB0aGlzLm1lZGlhU2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbjtcbiAgICB9O1xuICAgIF9wcm90by5vblN1YnRpdGxlVHJhY2tVcGRhdGVkID0gZnVuY3Rpb24gb25TdWJ0aXRsZVRyYWNrVXBkYXRlZChldmVudCwgZGF0YSkge1xuICAgICAgdmFyIHN1YnRpdGxlcyA9IHRoaXMuaGxzLnN1YnRpdGxlVHJhY2tzW2RhdGEuaWRdO1xuICAgICAgdmFyIHByZXZpb3VzU2VsZWN0aW9uID0gdGhpcy5tZWRpYVNlbGVjdGlvbjtcbiAgICAgIGlmICghcHJldmlvdXNTZWxlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5hbHRTZWxlY3Rpb24gPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgdGhpcy5hbHRTZWxlY3Rpb24pLCB7fSwge1xuICAgICAgICAgIHN1YnRpdGxlczogc3VidGl0bGVzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBwcmV2aW91c1NlbGVjdGlvbiksIHt9LCB7XG4gICAgICAgIHN1YnRpdGxlczogc3VidGl0bGVzXG4gICAgICB9KTtcbiAgICAgIHRoaXMubWVkaWFTZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9uO1xuICAgIH07XG4gICAgX3Byb3RvLm9uQXVkaW9UcmFja1N3aXRjaGluZyA9IGZ1bmN0aW9uIG9uQXVkaW9UcmFja1N3aXRjaGluZyhldmVudCwgZGF0YSkge1xuICAgICAgdmFyIGF1ZGlvT3B0aW9uID0gZ2V0QmFzaWNTZWxlY3Rpb25PcHRpb24oZGF0YSk7XG4gICAgICB0aGlzLnBsYXllclF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICByZXR1cm4gcGxheWVyLmhscy5zZXRBdWRpb09wdGlvbihkYXRhKSB8fCBwbGF5ZXIuaGxzLnNldEF1ZGlvT3B0aW9uKGF1ZGlvT3B0aW9uKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLm9uU3VidGl0bGVUcmFja1N3aXRjaCA9IGZ1bmN0aW9uIG9uU3VidGl0bGVUcmFja1N3aXRjaChldmVudCwgZGF0YSkge1xuICAgICAgdmFyIHN1YnRpdGxlT3B0aW9uID0gZ2V0QmFzaWNTZWxlY3Rpb25PcHRpb24oZGF0YSk7XG4gICAgICB0aGlzLnBsYXllclF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICByZXR1cm4gcGxheWVyLmhscy5zZXRTdWJ0aXRsZU9wdGlvbihkYXRhKSB8fCBkYXRhLmlkICE9PSAtMSAmJiBwbGF5ZXIuaGxzLnNldFN1YnRpdGxlT3B0aW9uKHN1YnRpdGxlT3B0aW9uKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLm9uQnVmZmVyQ29kZWNzID0gZnVuY3Rpb24gb25CdWZmZXJDb2RlY3MoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciByZXF1aXJlZFRyYWNrcyA9IGRhdGEudHJhY2tzO1xuICAgICAgaWYgKHJlcXVpcmVkVHJhY2tzKSB7XG4gICAgICAgIHRoaXMucmVxdWlyZWRUcmFja3MgPSByZXF1aXJlZFRyYWNrcztcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkJ1ZmZlckFwcGVuZGVkID0gZnVuY3Rpb24gb25CdWZmZXJBcHBlbmRlZChldmVudCwgZGF0YSkge1xuICAgICAgdGhpcy5jaGVja0J1ZmZlcigpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uQnVmZmVyRmx1c2hlZCA9IGZ1bmN0aW9uIG9uQnVmZmVyRmx1c2hlZChldmVudCwgZGF0YSkge1xuICAgICAgdmFyIHBsYXlpbmdJdGVtID0gdGhpcy5wbGF5aW5nSXRlbTtcbiAgICAgIGlmIChwbGF5aW5nSXRlbSAmJiAhdGhpcy5pdGVtc01hdGNoKHBsYXlpbmdJdGVtLCB0aGlzLmJ1ZmZlcmluZ0l0ZW0pICYmICF0aGlzLmlzSW50ZXJzdGl0aWFsKHBsYXlpbmdJdGVtKSkge1xuICAgICAgICB2YXIgdGltZWxpbmVQb3MgPSB0aGlzLnRpbWVsaW5lUG9zO1xuICAgICAgICB0aGlzLmJ1ZmZlcmVkUG9zID0gdGltZWxpbmVQb3M7XG4gICAgICAgIHRoaXMuY2hlY2tCdWZmZXIoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkJ1ZmZlcmVkVG9FbmQgPSBmdW5jdGlvbiBvbkJ1ZmZlcmVkVG9FbmQoZXZlbnQpIHtcbiAgICAgIC8vIEJ1ZmZlcmVkIHRvIHBvc3Qtcm9sbFxuICAgICAgdmFyIGludGVyc3RpdGlhbEV2ZW50cyA9IHRoaXMuc2NoZWR1bGUuZXZlbnRzO1xuICAgICAgaWYgKHRoaXMuYnVmZmVyZWRQb3MgPCBOdW1iZXIuTUFYX1ZBTFVFICYmIGludGVyc3RpdGlhbEV2ZW50cykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGludGVyc3RpdGlhbEV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBpbnRlcnN0aXRpYWwgPSBpbnRlcnN0aXRpYWxFdmVudHNbaV07XG4gICAgICAgICAgaWYgKGludGVyc3RpdGlhbC5jdWUucG9zdCkge1xuICAgICAgICAgICAgdmFyIF90aGlzJHNjaGVkdWxlJGl0ZW1zO1xuICAgICAgICAgICAgdmFyIHNjaGVkdWxlSW5kZXggPSB0aGlzLnNjaGVkdWxlLmZpbmRFdmVudEluZGV4KGludGVyc3RpdGlhbC5pZGVudGlmaWVyKTtcbiAgICAgICAgICAgIHZhciBpdGVtID0gKF90aGlzJHNjaGVkdWxlJGl0ZW1zID0gdGhpcy5zY2hlZHVsZS5pdGVtcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHNjaGVkdWxlJGl0ZW1zW3NjaGVkdWxlSW5kZXhdO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNJbnRlcnN0aXRpYWwoaXRlbSkgJiYgdGhpcy5ldmVudEl0ZW1zTWF0Y2goaXRlbSwgdGhpcy5idWZmZXJpbmdJdGVtKSkge1xuICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcmVkVG9JdGVtKGl0ZW0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyZWRQb3MgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uTWVkaWFFbmRlZCA9IGZ1bmN0aW9uIG9uTWVkaWFFbmRlZChldmVudCkge1xuICAgICAgdmFyIHBsYXlpbmdJdGVtID0gdGhpcy5wbGF5aW5nSXRlbTtcbiAgICAgIGlmICghdGhpcy5wbGF5aW5nTGFzdEl0ZW0gJiYgcGxheWluZ0l0ZW0pIHtcbiAgICAgICAgdmFyIHBsYXlpbmdJbmRleCA9IHRoaXMuZmluZEl0ZW1JbmRleChwbGF5aW5nSXRlbSk7XG4gICAgICAgIHRoaXMuc2V0U2NoZWR1bGVQb3NpdGlvbihwbGF5aW5nSW5kZXggKyAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvdWxkUGxheSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnVwZGF0ZUl0ZW0gPSBmdW5jdGlvbiB1cGRhdGVJdGVtKHByZXZpb3VzSXRlbSwgdGltZSkge1xuICAgICAgLy8gZmluZCBpdGVtIGluIHRoaXMuc2NoZWR1bGUuaXRlbXM7XG4gICAgICB2YXIgaXRlbXMgPSB0aGlzLnNjaGVkdWxlLml0ZW1zO1xuICAgICAgaWYgKHByZXZpb3VzSXRlbSAmJiBpdGVtcykge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmZpbmRJdGVtSW5kZXgocHJldmlvdXNJdGVtLCB0aW1lKTtcbiAgICAgICAgcmV0dXJuIGl0ZW1zW2luZGV4XSB8fCBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8udHJpbUluUGxhY2UgPSBmdW5jdGlvbiB0cmltSW5QbGFjZSh1cGRhdGVkSXRlbSwgaXRlbUJlZm9yZVVwZGF0ZSkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG4gICAgICBpZiAodGhpcy5pc0ludGVyc3RpdGlhbCh1cGRhdGVkSXRlbSkgJiYgdXBkYXRlZEl0ZW0uZXZlbnQuYXBwZW5kSW5QbGFjZSAmJiBpdGVtQmVmb3JlVXBkYXRlLmVuZCAtIHVwZGF0ZWRJdGVtLmVuZCA+IDAuMjUpIHtcbiAgICAgICAgdXBkYXRlZEl0ZW0uZXZlbnQuYXNzZXRMaXN0LmZvckVhY2goZnVuY3Rpb24gKGFzc2V0LCBpbmRleCkge1xuICAgICAgICAgIGlmICh1cGRhdGVkSXRlbS5ldmVudC5pc0Fzc2V0UGFzdFBsYXlvdXRMaW1pdChpbmRleCkpIHtcbiAgICAgICAgICAgIF90aGlzNC5jbGVhckFzc2V0UGxheWVyKGFzc2V0LmlkZW50aWZpZXIsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBmbHVzaFN0YXJ0ID0gdXBkYXRlZEl0ZW0uZW5kICsgMC4yNTtcbiAgICAgICAgdmFyIGJ1ZmZlckluZm8gPSBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyh0aGlzLnByaW1hcnlNZWRpYSwgZmx1c2hTdGFydCwgMCk7XG4gICAgICAgIGlmIChidWZmZXJJbmZvLmVuZCA+IGZsdXNoU3RhcnQgfHwgKGJ1ZmZlckluZm8ubmV4dFN0YXJ0IHx8IDApID4gZmx1c2hTdGFydCkge1xuICAgICAgICAgIHRoaXMuYXR0YWNoUHJpbWFyeShmbHVzaFN0YXJ0LCBudWxsKTtcbiAgICAgICAgICB0aGlzLmZsdXNoRnJvbnRCdWZmZXIoZmx1c2hTdGFydCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5pdGVtc01hdGNoID0gZnVuY3Rpb24gaXRlbXNNYXRjaChhLCBiKSB7XG4gICAgICByZXR1cm4gISFiICYmIChhID09PSBiIHx8IGEuZXZlbnQgJiYgYi5ldmVudCAmJiB0aGlzLmV2ZW50SXRlbXNNYXRjaChhLCBiKSB8fCAhYS5ldmVudCAmJiAhYi5ldmVudCAmJiB0aGlzLmZpbmRJdGVtSW5kZXgoYSkgPT09IHRoaXMuZmluZEl0ZW1JbmRleChiKSk7XG4gICAgfTtcbiAgICBfcHJvdG8uZXZlbnRJdGVtc01hdGNoID0gZnVuY3Rpb24gZXZlbnRJdGVtc01hdGNoKGEsIGIpIHtcbiAgICAgIHZhciBfYiRldmVudDtcbiAgICAgIHJldHVybiAhIWIgJiYgKGEgPT09IGIgfHwgYS5ldmVudC5pZGVudGlmaWVyID09PSAoKF9iJGV2ZW50ID0gYi5ldmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iJGV2ZW50LmlkZW50aWZpZXIpKTtcbiAgICB9O1xuICAgIF9wcm90by5maW5kSXRlbUluZGV4ID0gZnVuY3Rpb24gZmluZEl0ZW1JbmRleChpdGVtLCB0aW1lKSB7XG4gICAgICByZXR1cm4gaXRlbSA/IHRoaXMuc2NoZWR1bGUuZmluZEl0ZW1JbmRleChpdGVtLCB0aW1lKSA6IC0xO1xuICAgIH07XG4gICAgX3Byb3RvLnVwZGF0ZVNjaGVkdWxlID0gZnVuY3Rpb24gdXBkYXRlU2NoZWR1bGUoKSB7XG4gICAgICB2YXIgbWVkaWFTZWxlY3Rpb24gPSB0aGlzLm1lZGlhU2VsZWN0aW9uO1xuICAgICAgaWYgKCFtZWRpYVNlbGVjdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnNjaGVkdWxlLnVwZGF0ZVNjaGVkdWxlKG1lZGlhU2VsZWN0aW9uLCBbXSk7XG4gICAgfVxuXG4gICAgLy8gU2NoZWR1bGUgYnVmZmVyIGNvbnRyb2xcbiAgICA7XG4gICAgX3Byb3RvLmNoZWNrQnVmZmVyID0gZnVuY3Rpb24gY2hlY2tCdWZmZXIoc3RhcnZlZCkge1xuICAgICAgdmFyIGl0ZW1zID0gdGhpcy5zY2hlZHVsZS5pdGVtcztcbiAgICAgIGlmICghaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gRmluZCB3aGVuIGNvbWJpbmVkIGZvcndhcmQgYnVmZmVyIGNoYW5nZSByZWFjaGVzIG5leHQgc2NoZWR1bGUgc2VnbWVudFxuICAgICAgdmFyIGJ1ZmZlckluZm8gPSBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyh0aGlzLnByaW1hcnlNZWRpYSwgdGhpcy50aW1lbGluZVBvcywgMCk7XG4gICAgICBpZiAoc3RhcnZlZCkge1xuICAgICAgICB0aGlzLmJ1ZmZlcmVkUG9zID0gdGhpcy50aW1lbGluZVBvcztcbiAgICAgIH1cbiAgICAgIHN0YXJ2ZWQgfHwgKHN0YXJ2ZWQgPSBidWZmZXJJbmZvLmxlbiA8IDEpO1xuICAgICAgdGhpcy51cGRhdGVCdWZmZXJlZFBvcyhidWZmZXJJbmZvLmVuZCwgaXRlbXMsIHN0YXJ2ZWQpO1xuICAgIH07XG4gICAgX3Byb3RvLnVwZGF0ZUJ1ZmZlcmVkUG9zID0gZnVuY3Rpb24gdXBkYXRlQnVmZmVyZWRQb3MoYnVmZmVyRW5kLCBpdGVtcywgYnVmZmVySXNFbXB0eSkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gdGhpcy5zY2hlZHVsZTtcbiAgICAgIHZhciBidWZmZXJpbmdJdGVtID0gdGhpcy5idWZmZXJpbmdJdGVtO1xuICAgICAgaWYgKHRoaXMuYnVmZmVyZWRQb3MgPiBidWZmZXJFbmQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMSAmJiB0aGlzLml0ZW1zTWF0Y2goaXRlbXNbMF0sIGJ1ZmZlcmluZ0l0ZW0pKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyZWRQb3MgPSBidWZmZXJFbmQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBwbGF5aW5nSXRlbSA9IHRoaXMucGxheWluZ0l0ZW07XG4gICAgICB2YXIgcGxheWluZ0luZGV4ID0gdGhpcy5maW5kSXRlbUluZGV4KHBsYXlpbmdJdGVtKTtcbiAgICAgIHZhciBidWZmZXJFbmRJbmRleCA9IHNjaGVkdWxlLmZpbmRJdGVtSW5kZXhBdFRpbWUoYnVmZmVyRW5kKTtcbiAgICAgIGlmICh0aGlzLmJ1ZmZlcmVkUG9zIDwgYnVmZmVyRW5kKSB7XG4gICAgICAgIHZhciBfbmV4dEl0ZW1Ub0J1ZmZlciRldmUsIF9idWZmZXJpbmdJdGVtJGV2ZW50O1xuICAgICAgICB2YXIgYnVmZmVyaW5nSW5kZXggPSB0aGlzLmZpbmRJdGVtSW5kZXgoYnVmZmVyaW5nSXRlbSk7XG4gICAgICAgIHZhciBuZXh0VG9CdWZmZXJJbmRleCA9IE1hdGgubWluKGJ1ZmZlcmluZ0luZGV4ICsgMSwgaXRlbXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHZhciBuZXh0SXRlbVRvQnVmZmVyID0gaXRlbXNbbmV4dFRvQnVmZmVySW5kZXhdO1xuICAgICAgICBpZiAoYnVmZmVyRW5kSW5kZXggPT09IC0xICYmIGJ1ZmZlcmluZ0l0ZW0gJiYgYnVmZmVyRW5kID49IGJ1ZmZlcmluZ0l0ZW0uZW5kIHx8IChfbmV4dEl0ZW1Ub0J1ZmZlciRldmUgPSBuZXh0SXRlbVRvQnVmZmVyLmV2ZW50KSAhPSBudWxsICYmIF9uZXh0SXRlbVRvQnVmZmVyJGV2ZS5hcHBlbmRJblBsYWNlICYmIGJ1ZmZlckVuZCArIDAuMDEgPj0gbmV4dEl0ZW1Ub0J1ZmZlci5zdGFydCkge1xuICAgICAgICAgIGJ1ZmZlckVuZEluZGV4ID0gbmV4dFRvQnVmZmVySW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRUb0J1ZmZlckluZGV4IC0gcGxheWluZ0luZGV4ID4gMSAmJiAoYnVmZmVyaW5nSXRlbSA9PSBudWxsID8gdm9pZCAwIDogKF9idWZmZXJpbmdJdGVtJGV2ZW50ID0gYnVmZmVyaW5nSXRlbS5ldmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9idWZmZXJpbmdJdGVtJGV2ZW50LmFwcGVuZEluUGxhY2UpID09PSBmYWxzZSkge1xuICAgICAgICAgIC8vIGRvIG5vdCBhZHZhbmNlIGJ1ZmZlcmluZyBpdGVtIHBhc3QgSW50ZXJzdGl0aWFsIHRoYXQgcmVxdWlyZXMgc291cmNlIHJlc2V0XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyZWRQb3MgPSBidWZmZXJFbmQ7XG4gICAgICAgIGlmIChidWZmZXJFbmRJbmRleCA+IGJ1ZmZlcmluZ0luZGV4ICYmIGJ1ZmZlckVuZEluZGV4ID4gcGxheWluZ0luZGV4KSB7XG4gICAgICAgICAgdGhpcy5idWZmZXJlZFRvSXRlbShuZXh0SXRlbVRvQnVmZmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBhbGxvdyBtb3JlIHRpbWUgdGhhbiBkaXN0YW5jZSBmcm9tIGVkZ2UgZm9yIGFzc2V0cyB0byBsb2FkXG4gICAgICAgICAgdmFyIGRldGFpbHMgPSB0aGlzLnByaW1hcnlEZXRhaWxzO1xuICAgICAgICAgIGlmICh0aGlzLnByaW1hcnlMaXZlICYmIGRldGFpbHMgJiYgYnVmZmVyRW5kID4gZGV0YWlscy5lZGdlIC0gZGV0YWlscy50YXJnZXRkdXJhdGlvbiAmJiBuZXh0SXRlbVRvQnVmZmVyLnN0YXJ0IDwgZGV0YWlscy5lZGdlICsgdGhpcy5obHMuY29uZmlnLmludGVyc3RpdGlhbExpdmVMb29rQWhlYWQgJiYgdGhpcy5pc0ludGVyc3RpdGlhbChuZXh0SXRlbVRvQnVmZmVyKSkge1xuICAgICAgICAgICAgdGhpcy5wcmVsb2FkQXNzZXRzKG5leHRJdGVtVG9CdWZmZXIuZXZlbnQsIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChidWZmZXJJc0VtcHR5ICYmIHBsYXlpbmdJdGVtICYmICF0aGlzLml0ZW1zTWF0Y2gocGxheWluZ0l0ZW0sIGJ1ZmZlcmluZ0l0ZW0pKSB7XG4gICAgICAgIGlmIChidWZmZXJFbmRJbmRleCA9PT0gcGxheWluZ0luZGV4KSB7XG4gICAgICAgICAgdGhpcy5idWZmZXJlZFRvSXRlbShwbGF5aW5nSXRlbSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnVmZmVyRW5kSW5kZXggPT09IHBsYXlpbmdJbmRleCArIDEpIHtcbiAgICAgICAgICB0aGlzLmJ1ZmZlcmVkVG9JdGVtKGl0ZW1zW2J1ZmZlckVuZEluZGV4XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5hc3NldHNCdWZmZXJlZCA9IGZ1bmN0aW9uIGFzc2V0c0J1ZmZlcmVkKGl0ZW0sIG1lZGlhKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcbiAgICAgIHZhciBhc3NldExpc3QgPSBpdGVtLmV2ZW50LmFzc2V0TGlzdDtcbiAgICAgIGlmIChhc3NldExpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhaXRlbS5ldmVudC5hc3NldExpc3Quc29tZShmdW5jdGlvbiAoYXNzZXQpIHtcbiAgICAgICAgdmFyIHBsYXllciA9IF90aGlzNS5nZXRBc3NldFBsYXllcihhc3NldC5pZGVudGlmaWVyKTtcbiAgICAgICAgcmV0dXJuICEocGxheWVyICE9IG51bGwgJiYgcGxheWVyLmJ1ZmZlcmVkSW5QbGFjZVRvRW5kKG1lZGlhKSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5zZXRCdWZmZXJpbmdJdGVtID0gZnVuY3Rpb24gc2V0QnVmZmVyaW5nSXRlbShpdGVtKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcbiAgICAgIHZhciBidWZmZXJpbmdMYXN0ID0gdGhpcy5idWZmZXJpbmdJdGVtO1xuICAgICAgdmFyIHNjaGVkdWxlID0gdGhpcy5zY2hlZHVsZTtcbiAgICAgIGlmICghdGhpcy5pdGVtc01hdGNoKGl0ZW0sIGJ1ZmZlcmluZ0xhc3QpKSB7XG4gICAgICAgIHZhciBpdGVtcyA9IHNjaGVkdWxlLml0ZW1zLFxuICAgICAgICAgIGV2ZW50cyA9IHNjaGVkdWxlLmV2ZW50cztcbiAgICAgICAgaWYgKCFpdGVtcyB8fCAhZXZlbnRzKSB7XG4gICAgICAgICAgcmV0dXJuIGJ1ZmZlcmluZ0xhc3Q7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlzSW50ZXJzdGl0aWFsID0gdGhpcy5pc0ludGVyc3RpdGlhbChpdGVtKTtcbiAgICAgICAgdmFyIGJ1ZmZlcmluZ1BsYXllciA9IHRoaXMuZ2V0QnVmZmVyaW5nUGxheWVyKCk7XG4gICAgICAgIHRoaXMuYnVmZmVyaW5nSXRlbSA9IGl0ZW07XG4gICAgICAgIHRoaXMuYnVmZmVyZWRQb3MgPSBNYXRoLm1heChpdGVtLnN0YXJ0LCBNYXRoLm1pbihpdGVtLmVuZCwgdGhpcy50aW1lbGluZVBvcykpO1xuICAgICAgICB2YXIgdGltZVJlbWFpbmluZyA9IGJ1ZmZlcmluZ1BsYXllciA/IGJ1ZmZlcmluZ1BsYXllci5yZW1haW5pbmcgOiBidWZmZXJpbmdMYXN0ID8gYnVmZmVyaW5nTGFzdC5lbmQgLSB0aGlzLnRpbWVsaW5lUG9zIDogMDtcbiAgICAgICAgdGhpcy5sb2coXCJJTlRFUlNUSVRJQUxTX0JVRkZFUkVEX1RPX0JPVU5EQVJZIFwiICsgc2VnbWVudFRvU3RyaW5nKGl0ZW0pICsgKGJ1ZmZlcmluZ0xhc3QgPyBcIiAoXCIgKyB0aW1lUmVtYWluaW5nLnRvRml4ZWQoMikgKyBcIiByZW1haW5pbmcpXCIgOiAnJykpO1xuICAgICAgICBpZiAoIXRoaXMucGxheWJhY2tEaXNhYmxlZCkge1xuICAgICAgICAgIGlmIChpc0ludGVyc3RpdGlhbCkge1xuICAgICAgICAgICAgLy8gcHJpbWFyeSBmcmFnbWVudCBsb2FkaW5nIHdpbGwgZXhpdCBlYXJseSBpbiBiYXNlLXN0cmVhbS1jb250cm9sbGVyIHdoaWxlIGBidWZmZXJpbmdJdGVtYCBpcyBzZXQgdG8gYW4gSW50ZXJzdGl0aWFsIGJsb2NrXG4gICAgICAgICAgICBpdGVtLmV2ZW50LmFzc2V0TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhc3NldCkge1xuICAgICAgICAgICAgICB2YXIgcGxheWVyID0gX3RoaXM2LmdldEFzc2V0UGxheWVyKGFzc2V0LmlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICBpZiAocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnJlc3VtZUJ1ZmZlcmluZygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5obHMucmVzdW1lQnVmZmVyaW5nKCk7XG4gICAgICAgICAgICB0aGlzLnBsYXllclF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgICAgICByZXR1cm4gcGxheWVyLnBhdXNlQnVmZmVyaW5nKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuSU5URVJTVElUSUFMU19CVUZGRVJFRF9UT19CT1VOREFSWSwge1xuICAgICAgICAgIGV2ZW50czogZXZlbnRzLnNsaWNlKDApLFxuICAgICAgICAgIHNjaGVkdWxlOiBpdGVtcy5zbGljZSgwKSxcbiAgICAgICAgICBidWZmZXJpbmdJbmRleDogdGhpcy5maW5kSXRlbUluZGV4KGl0ZW0pLFxuICAgICAgICAgIHBsYXlpbmdJbmRleDogdGhpcy5maW5kSXRlbUluZGV4KHRoaXMucGxheWluZ0l0ZW0pXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmJ1ZmZlcmluZ0l0ZW0gIT09IGl0ZW0pIHtcbiAgICAgICAgdGhpcy5idWZmZXJpbmdJdGVtID0gaXRlbTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWZmZXJpbmdMYXN0O1xuICAgIH07XG4gICAgX3Byb3RvLmJ1ZmZlcmVkVG9JdGVtID0gZnVuY3Rpb24gYnVmZmVyZWRUb0l0ZW0oaXRlbSwgYXNzZXRMaXN0SW5kZXgpIHtcbiAgICAgIGlmIChhc3NldExpc3RJbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGFzc2V0TGlzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciBidWZmZXJpbmdMYXN0ID0gdGhpcy5zZXRCdWZmZXJpbmdJdGVtKGl0ZW0pO1xuICAgICAgaWYgKHRoaXMucGxheWJhY2tEaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc0ludGVyc3RpdGlhbChpdGVtKSkge1xuICAgICAgICAvLyBFbnN1cmUgYXNzZXQgbGlzdCBpcyBsb2FkZWRcbiAgICAgICAgdGhpcy5idWZmZXJlZFRvRXZlbnQoaXRlbSwgYXNzZXRMaXN0SW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChidWZmZXJpbmdMYXN0ICE9PSBudWxsKSB7XG4gICAgICAgIC8vIElmIHByaW1hcnkgcGxheWVyIGlzIGRldGFjaGVkLCBpdCBpcyBhbHNvIHN0b3BwZWQsIHJlc3RhcnQgbG9hZGluZyBhdCBwcmltYXJ5IHBvc2l0aW9uXG4gICAgICAgIHRoaXMuYnVmZmVyaW5nQXNzZXQgPSBudWxsO1xuICAgICAgICB2YXIgZGV0YWNoZWREYXRhID0gdGhpcy5kZXRhY2hlZERhdGE7XG4gICAgICAgIGlmIChkZXRhY2hlZERhdGEpIHtcbiAgICAgICAgICBpZiAoZGV0YWNoZWREYXRhLm1lZGlhU291cmNlKSB7XG4gICAgICAgICAgICB2YXIgc2tpcFNlZWtUb1N0YXJ0UG9zaXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hQcmltYXJ5KGl0ZW0uc3RhcnQsIGl0ZW0sIHNraXBTZWVrVG9TdGFydFBvc2l0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcmVsb2FkUHJpbWFyeShpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgbm90IGRldGFjaGVkIHNlZWsgdG8gcmVzdW1wdGlvbiBwb2ludFxuICAgICAgICAgIHRoaXMucHJlbG9hZFByaW1hcnkoaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5wcmVsb2FkUHJpbWFyeSA9IGZ1bmN0aW9uIHByZWxvYWRQcmltYXJ5KGl0ZW0pIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuZmluZEl0ZW1JbmRleChpdGVtKTtcbiAgICAgIHZhciB0aW1lbGluZVBvcyA9IHRoaXMuZ2V0UHJpbWFyeVJlc3VtcHRpb24oaXRlbSwgaW5kZXgpO1xuICAgICAgdGhpcy5zdGFydExvYWRpbmdQcmltYXJ5QXQodGltZWxpbmVQb3MpO1xuICAgIH07XG4gICAgX3Byb3RvLmJ1ZmZlcmVkVG9FdmVudCA9IGZ1bmN0aW9uIGJ1ZmZlcmVkVG9FdmVudChpdGVtLCBhc3NldExpc3RJbmRleCkge1xuICAgICAgdmFyIGludGVyc3RpdGlhbCA9IGl0ZW0uZXZlbnQ7XG4gICAgICB2YXIgbmV2ZXJMb2FkZWQgPSBpbnRlcnN0aXRpYWwuYXNzZXRMaXN0Lmxlbmd0aCA9PT0gMCAmJiAhaW50ZXJzdGl0aWFsLmFzc2V0TGlzdExvYWRlcjtcbiAgICAgIHZhciBwbGF5T25jZSA9IGludGVyc3RpdGlhbC5jdWUub25jZTtcbiAgICAgIGlmIChuZXZlckxvYWRlZCB8fCAhcGxheU9uY2UpIHtcbiAgICAgICAgLy8gQnVmZmVyZWQgdG8gSW50ZXJzdGl0aWFsIGJvdW5kYXJ5XG4gICAgICAgIHZhciBwbGF5ZXIgPSB0aGlzLnByZWxvYWRBc3NldHMoaW50ZXJzdGl0aWFsLCBhc3NldExpc3RJbmRleCk7XG4gICAgICAgIGlmIChwbGF5ZXIgIT0gbnVsbCAmJiBwbGF5ZXIuaW50ZXJzdGl0aWFsLmFwcGVuZEluUGxhY2UpIHtcbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgcGxheWVyIGFuZCBhc3NldCBsaXN0IGluZm8sIHN0YXJ0IGJ1ZmZlcmluZ1xuICAgICAgICAgIHZhciBhc3NldEl0ZW0gPSBpbnRlcnN0aXRpYWwuYXNzZXRMaXN0W2Fzc2V0TGlzdEluZGV4XTtcbiAgICAgICAgICB2YXIgbWVkaWEgPSB0aGlzLnByaW1hcnlNZWRpYTtcbiAgICAgICAgICBpZiAoYXNzZXRJdGVtICYmIG1lZGlhKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlckFzc2V0UGxheWVyKHBsYXllciwgbWVkaWEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnByZWxvYWRBc3NldHMgPSBmdW5jdGlvbiBwcmVsb2FkQXNzZXRzKGludGVyc3RpdGlhbCwgYXNzZXRMaXN0SW5kZXgpIHtcbiAgICAgIHZhciB1cmkgPSBpbnRlcnN0aXRpYWwuYXNzZXRVcmw7XG4gICAgICB2YXIgYXNzZXRMaXN0TGVuZ3RoID0gaW50ZXJzdGl0aWFsLmFzc2V0TGlzdC5sZW5ndGg7XG4gICAgICB2YXIgbmV2ZXJMb2FkZWQgPSBhc3NldExpc3RMZW5ndGggPT09IDAgJiYgIWludGVyc3RpdGlhbC5hc3NldExpc3RMb2FkZXI7XG4gICAgICB2YXIgcGxheU9uY2UgPSBpbnRlcnN0aXRpYWwuY3VlLm9uY2U7XG4gICAgICBpZiAobmV2ZXJMb2FkZWQpIHtcbiAgICAgICAgdmFyIHRpbWVsaW5lU3RhcnQgPSBpbnRlcnN0aXRpYWwudGltZWxpbmVTdGFydDtcbiAgICAgICAgaWYgKGludGVyc3RpdGlhbC5hcHBlbmRJblBsYWNlKSB7XG4gICAgICAgICAgdmFyIF9wbGF5aW5nSXRlbSRuZXh0RXZlbjtcbiAgICAgICAgICB2YXIgcGxheWluZ0l0ZW0gPSB0aGlzLnBsYXlpbmdJdGVtO1xuICAgICAgICAgIGlmICghdGhpcy5pc0ludGVyc3RpdGlhbChwbGF5aW5nSXRlbSkgJiYgKHBsYXlpbmdJdGVtID09IG51bGwgPyB2b2lkIDAgOiAoX3BsYXlpbmdJdGVtJG5leHRFdmVuID0gcGxheWluZ0l0ZW0ubmV4dEV2ZW50KSA9PSBudWxsID8gdm9pZCAwIDogX3BsYXlpbmdJdGVtJG5leHRFdmVuLmlkZW50aWZpZXIpID09PSBpbnRlcnN0aXRpYWwuaWRlbnRpZmllcikge1xuICAgICAgICAgICAgdGhpcy5mbHVzaEZyb250QnVmZmVyKHRpbWVsaW5lU3RhcnQgKyAwLjI1KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhsc1N0YXJ0T2Zmc2V0O1xuICAgICAgICB2YXIgbGl2ZVN0YXJ0UG9zaXRpb24gPSAwO1xuICAgICAgICBpZiAoIXRoaXMucGxheWluZ0l0ZW0gJiYgdGhpcy5wcmltYXJ5TGl2ZSkge1xuICAgICAgICAgIGxpdmVTdGFydFBvc2l0aW9uID0gdGhpcy5obHMuc3RhcnRQb3NpdGlvbjtcbiAgICAgICAgICBpZiAobGl2ZVN0YXJ0UG9zaXRpb24gPT09IC0xKSB7XG4gICAgICAgICAgICBsaXZlU3RhcnRQb3NpdGlvbiA9IHRoaXMuaGxzLmxpdmVTeW5jUG9zaXRpb24gfHwgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpdmVTdGFydFBvc2l0aW9uICYmICEoaW50ZXJzdGl0aWFsLmN1ZS5wcmUgfHwgaW50ZXJzdGl0aWFsLmN1ZS5wb3N0KSkge1xuICAgICAgICAgIHZhciBzdGFydE9mZnNldCA9IGxpdmVTdGFydFBvc2l0aW9uIC0gdGltZWxpbmVTdGFydDtcbiAgICAgICAgICBpZiAoc3RhcnRPZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICBobHNTdGFydE9mZnNldCA9IE1hdGgucm91bmQoc3RhcnRPZmZzZXQgKiAxMDAwKSAvIDEwMDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nKFwiTG9hZCBpbnRlcnN0aXRpYWwgYXNzZXQgXCIgKyAoYXNzZXRMaXN0SW5kZXggKyAxKSArIFwiL1wiICsgKHVyaSA/IDEgOiBhc3NldExpc3RMZW5ndGgpICsgXCIgXCIgKyBpbnRlcnN0aXRpYWwgKyAoaGxzU3RhcnRPZmZzZXQgPyBcIiBsaXZlLXN0YXJ0OiBcIiArIGxpdmVTdGFydFBvc2l0aW9uICsgXCIgc3RhcnQtb2Zmc2V0OiBcIiArIGhsc1N0YXJ0T2Zmc2V0IDogJycpKTtcbiAgICAgICAgaWYgKHVyaSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUFzc2V0KGludGVyc3RpdGlhbCwgMCwgMCwgdGltZWxpbmVTdGFydCwgaW50ZXJzdGl0aWFsLmR1cmF0aW9uLCB1cmkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhc3NldExpc3RMb2FkZXIgPSB0aGlzLmFzc2V0TGlzdExvYWRlci5sb2FkQXNzZXRMaXN0KGludGVyc3RpdGlhbCwgaGxzU3RhcnRPZmZzZXQpO1xuICAgICAgICBpZiAoYXNzZXRMaXN0TG9hZGVyKSB7XG4gICAgICAgICAgaW50ZXJzdGl0aWFsLmFzc2V0TGlzdExvYWRlciA9IGFzc2V0TGlzdExvYWRlcjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghcGxheU9uY2UgJiYgYXNzZXRMaXN0TGVuZ3RoKSB7XG4gICAgICAgIC8vIFJlLWJ1ZmZlcmVkIHRvIEludGVyc3RpdGlhbCBib3VuZGFyeSwgcmUtY3JlYXRlIGFzc2V0IHBsYXllcihzKVxuICAgICAgICBmb3IgKHZhciBpID0gYXNzZXRMaXN0SW5kZXg7IGkgPCBhc3NldExpc3RMZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBhc3NldCA9IGludGVyc3RpdGlhbC5hc3NldExpc3RbaV07XG4gICAgICAgICAgdmFyIHBsYXllckluZGV4ID0gdGhpcy5nZXRBc3NldFBsYXllclF1ZXVlSW5kZXgoYXNzZXQuaWRlbnRpZmllcik7XG4gICAgICAgICAgaWYgKChwbGF5ZXJJbmRleCA9PT0gLTEgfHwgdGhpcy5wbGF5ZXJRdWV1ZVtwbGF5ZXJJbmRleF0uZGVzdHJveWVkKSAmJiAhYXNzZXQuZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQXNzZXRQbGF5ZXIoaW50ZXJzdGl0aWFsLCBhc3NldCwgaSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFzc2V0UGxheWVyKGludGVyc3RpdGlhbC5hc3NldExpc3RbYXNzZXRMaXN0SW5kZXhdLmlkZW50aWZpZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8uZmx1c2hGcm9udEJ1ZmZlciA9IGZ1bmN0aW9uIGZsdXNoRnJvbnRCdWZmZXIoc3RhcnRPZmZzZXQpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuICAgICAgLy8gRm9yY2UgcXVldWVkIGZsdXNoaW5nIG9mIGFsbCBidWZmZXJzXG4gICAgICB2YXIgcmVxdWlyZWRUcmFja3MgPSB0aGlzLnJlcXVpcmVkVHJhY2tzO1xuICAgICAgaWYgKCFyZXF1aXJlZFRyYWNrcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmxvZyhcIlJlbW92aW5nIGZyb250IGJ1ZmZlciBzdGFydGluZyBhdCBcIiArIHN0YXJ0T2Zmc2V0KTtcbiAgICAgIHZhciBzb3VyY2VCdWZmZXJOYW1lcyA9IE9iamVjdC5rZXlzKHJlcXVpcmVkVHJhY2tzKTtcbiAgICAgIHNvdXJjZUJ1ZmZlck5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgX3RoaXM3Lmhscy50cmlnZ2VyKEV2ZW50cy5CVUZGRVJfRkxVU0hJTkcsIHtcbiAgICAgICAgICBzdGFydE9mZnNldDogc3RhcnRPZmZzZXQsXG4gICAgICAgICAgZW5kT2Zmc2V0OiBJbmZpbml0eSxcbiAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSW50ZXJzdGl0aWFsIEFzc2V0IFBsYXllciBjb250cm9sXG4gICAgO1xuICAgIF9wcm90by5nZXRBc3NldFBsYXllclF1ZXVlSW5kZXggPSBmdW5jdGlvbiBnZXRBc3NldFBsYXllclF1ZXVlSW5kZXgoYXNzZXRJZCkge1xuICAgICAgdmFyIHBsYXllclF1ZXVlID0gdGhpcy5wbGF5ZXJRdWV1ZTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGxheWVyUXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFzc2V0SWQgPT09IHBsYXllclF1ZXVlW2ldLmFzc2V0SWQpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgX3Byb3RvLmdldEFzc2V0UGxheWVyID0gZnVuY3Rpb24gZ2V0QXNzZXRQbGF5ZXIoYXNzZXRJZCkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5nZXRBc3NldFBsYXllclF1ZXVlSW5kZXgoYXNzZXRJZCk7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5ZXJRdWV1ZVtpbmRleF0gfHwgbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5nZXRCdWZmZXJpbmdQbGF5ZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXJpbmdQbGF5ZXIoKSB7XG4gICAgICB2YXIgcGxheWVyUXVldWUgPSB0aGlzLnBsYXllclF1ZXVlLFxuICAgICAgICBwcmltYXJ5TWVkaWEgPSB0aGlzLnByaW1hcnlNZWRpYTtcbiAgICAgIGlmIChwcmltYXJ5TWVkaWEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGF5ZXJRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChwbGF5ZXJRdWV1ZVtpXS5tZWRpYSA9PT0gcHJpbWFyeU1lZGlhKSB7XG4gICAgICAgICAgICByZXR1cm4gcGxheWVyUXVldWVbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5jcmVhdGVBc3NldCA9IGZ1bmN0aW9uIGNyZWF0ZUFzc2V0KGludGVyc3RpdGlhbCwgYXNzZXRMaXN0SW5kZXgsIHN0YXJ0T2Zmc2V0LCB0aW1lbGluZVN0YXJ0LCBkdXJhdGlvbiwgdXJpKSB7XG4gICAgICB2YXIgYXNzZXRJdGVtID0ge1xuICAgICAgICBwYXJlbnRJZGVudGlmaWVyOiBpbnRlcnN0aXRpYWwuaWRlbnRpZmllcixcbiAgICAgICAgaWRlbnRpZmllcjogZ2VuZXJhdGVBc3NldElkZW50aWZpZXIoaW50ZXJzdGl0aWFsLCB1cmksIGFzc2V0TGlzdEluZGV4KSxcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBzdGFydE9mZnNldDogc3RhcnRPZmZzZXQsXG4gICAgICAgIHRpbWVsaW5lU3RhcnQ6IHRpbWVsaW5lU3RhcnQsXG4gICAgICAgIHVyaTogdXJpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQXNzZXRQbGF5ZXIoaW50ZXJzdGl0aWFsLCBhc3NldEl0ZW0sIGFzc2V0TGlzdEluZGV4KTtcbiAgICB9O1xuICAgIF9wcm90by5jcmVhdGVBc3NldFBsYXllciA9IGZ1bmN0aW9uIGNyZWF0ZUFzc2V0UGxheWVyKGludGVyc3RpdGlhbCwgYXNzZXRJdGVtLCBhc3NldExpc3RJbmRleCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG4gICAgICB2YXIgcHJpbWFyeSA9IHRoaXMuaGxzO1xuICAgICAgdmFyIHVzZXJDb25maWcgPSBwcmltYXJ5LnVzZXJDb25maWc7XG4gICAgICB2YXIgdmlkZW9QcmVmZXJlbmNlID0gdXNlckNvbmZpZy52aWRlb1ByZWZlcmVuY2U7XG4gICAgICB2YXIgY3VycmVudExldmVsID0gcHJpbWFyeS5sb2FkTGV2ZWxPYmogfHwgcHJpbWFyeS5sZXZlbHNbcHJpbWFyeS5jdXJyZW50TGV2ZWxdO1xuICAgICAgaWYgKHZpZGVvUHJlZmVyZW5jZSB8fCBjdXJyZW50TGV2ZWwpIHtcbiAgICAgICAgdmlkZW9QcmVmZXJlbmNlID0gX2V4dGVuZHMoe30sIHZpZGVvUHJlZmVyZW5jZSk7XG4gICAgICAgIGlmIChjdXJyZW50TGV2ZWwudmlkZW9Db2RlYykge1xuICAgICAgICAgIHZpZGVvUHJlZmVyZW5jZS52aWRlb0NvZGVjID0gY3VycmVudExldmVsLnZpZGVvQ29kZWM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRMZXZlbC52aWRlb1JhbmdlKSB7XG4gICAgICAgICAgdmlkZW9QcmVmZXJlbmNlLmFsbG93ZWRWaWRlb1JhbmdlcyA9IFtjdXJyZW50TGV2ZWwudmlkZW9SYW5nZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBzZWxlY3RlZEF1ZGlvID0gcHJpbWFyeS5hdWRpb1RyYWNrc1twcmltYXJ5LmF1ZGlvVHJhY2tdO1xuICAgICAgdmFyIHNlbGVjdGVkU3VidGl0bGUgPSBwcmltYXJ5LnN1YnRpdGxlVHJhY2tzW3ByaW1hcnkuc3VidGl0bGVUcmFja107XG4gICAgICB2YXIgc3RhcnRQb3NpdGlvbiA9IDA7XG4gICAgICBpZiAodGhpcy5wcmltYXJ5TGl2ZSB8fCBpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICB2YXIgdGltZVBhc3RTdGFydCA9IHRoaXMudGltZWxpbmVQb3MgLSBhc3NldEl0ZW0udGltZWxpbmVTdGFydDtcbiAgICAgICAgaWYgKHRpbWVQYXN0U3RhcnQgPiAxKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gYXNzZXRJdGVtLmR1cmF0aW9uO1xuICAgICAgICAgIGlmIChkdXJhdGlvbiAmJiB0aW1lUGFzdFN0YXJ0IDwgZHVyYXRpb24pIHtcbiAgICAgICAgICAgIHN0YXJ0UG9zaXRpb24gPSB0aW1lUGFzdFN0YXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGFzc2V0SWQgPSBhc3NldEl0ZW0uaWRlbnRpZmllcjtcbiAgICAgIHZhciBwbGF5ZXJDb25maWcgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgdXNlckNvbmZpZyksIHt9LCB7XG4gICAgICAgIGF1dG9TdGFydExvYWQ6IHRydWUsXG4gICAgICAgIHN0YXJ0RnJhZ1ByZWZldGNoOiB0cnVlLFxuICAgICAgICBwcmltYXJ5U2Vzc2lvbklkOiBwcmltYXJ5LnNlc3Npb25JZCxcbiAgICAgICAgYXNzZXRQbGF5ZXJJZDogYXNzZXRJZCxcbiAgICAgICAgYWJyRXdtYURlZmF1bHRFc3RpbWF0ZTogcHJpbWFyeS5iYW5kd2lkdGhFc3RpbWF0ZSxcbiAgICAgICAgaW50ZXJzdGl0aWFsc0NvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRQb3NpdGlvbjogc3RhcnRQb3NpdGlvbixcbiAgICAgICAgbGl2ZUR1cmF0aW9uSW5maW5pdHk6IGZhbHNlLFxuICAgICAgICB0ZXN0QmFuZHdpZHRoOiBmYWxzZSxcbiAgICAgICAgdmlkZW9QcmVmZXJlbmNlOiB2aWRlb1ByZWZlcmVuY2UsXG4gICAgICAgIGF1ZGlvUHJlZmVyZW5jZTogc2VsZWN0ZWRBdWRpbyB8fCB1c2VyQ29uZmlnLmF1ZGlvUHJlZmVyZW5jZSxcbiAgICAgICAgc3VidGl0bGVQcmVmZXJlbmNlOiBzZWxlY3RlZFN1YnRpdGxlIHx8IHVzZXJDb25maWcuc3VidGl0bGVQcmVmZXJlbmNlXG4gICAgICB9KTtcbiAgICAgIGlmIChpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICBpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZVN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoYXNzZXRJdGVtLnRpbWVsaW5lU3RhcnQpIHtcbiAgICAgICAgICBwbGF5ZXJDb25maWcudGltZWxpbmVPZmZzZXQgPSBhc3NldEl0ZW0udGltZWxpbmVTdGFydDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGNtY2QgPSBwbGF5ZXJDb25maWcuY21jZDtcbiAgICAgIGlmIChjbWNkICE9IG51bGwgJiYgY21jZC5zZXNzaW9uSWQgJiYgY21jZC5jb250ZW50SWQpIHtcbiAgICAgICAgcGxheWVyQ29uZmlnLmNtY2QgPSBfZXh0ZW5kcyh7fSwgY21jZCwge1xuICAgICAgICAgIGNvbnRlbnRJZDogaGFzaChhc3NldEl0ZW0udXJpKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmdldEFzc2V0UGxheWVyKGFzc2V0SWQpKSB7XG4gICAgICAgIHRoaXMud2FybihcIkR1cGxpY2F0ZSBkYXRlIHJhbmdlIGlkZW50aWZpZXIgXCIgKyBpbnRlcnN0aXRpYWwgKyBcIiBhbmQgYXNzZXQgXCIgKyBhc3NldElkKTtcbiAgICAgIH1cbiAgICAgIHZhciBwbGF5ZXIgPSBuZXcgSGxzQXNzZXRQbGF5ZXIodGhpcy5IbHNQbGF5ZXJDbGFzcywgcGxheWVyQ29uZmlnLCBpbnRlcnN0aXRpYWwsIGFzc2V0SXRlbSk7XG4gICAgICB0aGlzLnBsYXllclF1ZXVlLnB1c2gocGxheWVyKTtcbiAgICAgIGludGVyc3RpdGlhbC5hc3NldExpc3RbYXNzZXRMaXN0SW5kZXhdID0gYXNzZXRJdGVtO1xuICAgICAgLy8gTGlzdGVuIGZvciBMZXZlbERldGFpbHMgYW5kIFBUUyBjaGFuZ2UgdG8gdXBkYXRlIGR1cmF0aW9uXG4gICAgICB2YXIgdXBkYXRlQXNzZXRQbGF5ZXJEZXRhaWxzID0gZnVuY3Rpb24gdXBkYXRlQXNzZXRQbGF5ZXJEZXRhaWxzKGRldGFpbHMpIHtcbiAgICAgICAgaWYgKGRldGFpbHMubGl2ZSkge1xuICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIkludGVyc3RpdGlhbHMgTVVTVCBiZSBWT0QgYXNzZXRzIFwiICsgaW50ZXJzdGl0aWFsKTtcbiAgICAgICAgICB2YXIgZXJyb3JEYXRhID0ge1xuICAgICAgICAgICAgZmF0YWw6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk9USEVSX0VSUk9SLFxuICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLklOVEVSU1RJVElBTF9BU1NFVF9JVEVNX0VSUk9SLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgfTtcbiAgICAgICAgICBfdGhpczguaGFuZGxlQXNzZXRJdGVtRXJyb3IoZXJyb3JEYXRhLCBpbnRlcnN0aXRpYWwsIF90aGlzOC5zY2hlZHVsZS5maW5kRXZlbnRJbmRleChpbnRlcnN0aXRpYWwuaWRlbnRpZmllciksIGFzc2V0TGlzdEluZGV4LCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHRpbWUgYXQgZW5kIG9mIGxhc3QgZnJhZ21lbnRcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gZGV0YWlscy5lZGdlIC0gZGV0YWlscy5mcmFnbWVudFN0YXJ0O1xuICAgICAgICB2YXIgY3VycmVudEFzc2V0RHVyYXRpb24gPSBhc3NldEl0ZW0uZHVyYXRpb247XG4gICAgICAgIGlmIChjdXJyZW50QXNzZXREdXJhdGlvbiA9PT0gbnVsbCB8fCBkdXJhdGlvbiA+IGN1cnJlbnRBc3NldER1cmF0aW9uKSB7XG4gICAgICAgICAgX3RoaXM4LmxvZyhcIkludGVyc3RpdGlhbCBhc3NldCBcXFwiXCIgKyBhc3NldElkICsgXCJcXFwiIGR1cmF0aW9uIGNoYW5nZSBcIiArIGN1cnJlbnRBc3NldER1cmF0aW9uICsgXCIgPiBcIiArIGR1cmF0aW9uKTtcbiAgICAgICAgICBhc3NldEl0ZW0uZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgICAvLyBVcGRhdGUgc2NoZWR1bGUgd2l0aCBuZXcgZXZlbnQgYW5kIGFzc2V0IGR1cmF0aW9uXG4gICAgICAgICAgX3RoaXM4LnVwZGF0ZVNjaGVkdWxlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBwbGF5ZXIub24oRXZlbnRzLkxFVkVMX1VQREFURUQsIGZ1bmN0aW9uIChldmVudCwgX3JlZikge1xuICAgICAgICB2YXIgZGV0YWlscyA9IF9yZWYuZGV0YWlscztcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUFzc2V0UGxheWVyRGV0YWlscyhkZXRhaWxzKTtcbiAgICAgIH0pO1xuICAgICAgcGxheWVyLm9uKEV2ZW50cy5MRVZFTF9QVFNfVVBEQVRFRCwgZnVuY3Rpb24gKGV2ZW50LCBfcmVmMikge1xuICAgICAgICB2YXIgZGV0YWlscyA9IF9yZWYyLmRldGFpbHM7XG4gICAgICAgIHJldHVybiB1cGRhdGVBc3NldFBsYXllckRldGFpbHMoZGV0YWlscyk7XG4gICAgICB9KTtcbiAgICAgIHZhciBfb25CdWZmZXJDb2RlY3MgPSBmdW5jdGlvbiBvbkJ1ZmZlckNvZGVjcyhldmVudCwgZGF0YSkge1xuICAgICAgICB2YXIgaW5RdWV1UGxheWVyID0gX3RoaXM4LmdldEFzc2V0UGxheWVyKGFzc2V0SWQpO1xuICAgICAgICBpZiAoaW5RdWV1UGxheWVyICYmIGRhdGEudHJhY2tzKSB7XG4gICAgICAgICAgaW5RdWV1UGxheWVyLm9mZihFdmVudHMuQlVGRkVSX0NPREVDUywgX29uQnVmZmVyQ29kZWNzKTtcbiAgICAgICAgICBpblF1ZXVQbGF5ZXIudHJhY2tzID0gZGF0YS50cmFja3M7XG4gICAgICAgICAgdmFyIG1lZGlhID0gX3RoaXM4LnByaW1hcnlNZWRpYTtcbiAgICAgICAgICBpZiAoX3RoaXM4LmJ1ZmZlcmluZ0Fzc2V0ID09PSBpblF1ZXVQbGF5ZXIuYXNzZXRJdGVtICYmIG1lZGlhICYmICFpblF1ZXVQbGF5ZXIubWVkaWEpIHtcbiAgICAgICAgICAgIF90aGlzOC5idWZmZXJBc3NldFBsYXllcihpblF1ZXVQbGF5ZXIsIG1lZGlhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBwbGF5ZXIub24oRXZlbnRzLkJVRkZFUl9DT0RFQ1MsIF9vbkJ1ZmZlckNvZGVjcyk7XG4gICAgICB2YXIgYnVmZmVyZWRUb0VuZCA9IGZ1bmN0aW9uIGJ1ZmZlcmVkVG9FbmQoKSB7XG4gICAgICAgIHZhciBfdGhpczgkc2NoZWR1bGUkaXRlbXM7XG4gICAgICAgIHZhciBpblF1ZXVQbGF5ZXIgPSBfdGhpczguZ2V0QXNzZXRQbGF5ZXIoYXNzZXRJZCk7XG4gICAgICAgIF90aGlzOC5sb2coXCJidWZmZXJlZCB0byBlbmQgb2YgYXNzZXQgXCIgKyBpblF1ZXVQbGF5ZXIpO1xuICAgICAgICBpZiAoIWluUXVldVBsYXllcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmVsb2FkIGF0IGVuZCBvZiBhc3NldFxuICAgICAgICB2YXIgc2NoZWR1bGVJbmRleCA9IF90aGlzOC5zY2hlZHVsZS5maW5kRXZlbnRJbmRleChpbnRlcnN0aXRpYWwuaWRlbnRpZmllcik7XG4gICAgICAgIHZhciBpdGVtID0gKF90aGlzOCRzY2hlZHVsZSRpdGVtcyA9IF90aGlzOC5zY2hlZHVsZS5pdGVtcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzOCRzY2hlZHVsZSRpdGVtc1tzY2hlZHVsZUluZGV4XTtcbiAgICAgICAgaWYgKF90aGlzOC5pc0ludGVyc3RpdGlhbChpdGVtKSkge1xuICAgICAgICAgIHZhciBfYXNzZXRMaXN0SW5kZXggPSBpbnRlcnN0aXRpYWwuZmluZEFzc2V0SW5kZXgoYXNzZXRJdGVtKTtcbiAgICAgICAgICB2YXIgbmV4dEFzc2V0SW5kZXggPSBnZXROZXh0QXNzZXRJbmRleChpbnRlcnN0aXRpYWwsIF9hc3NldExpc3RJbmRleCk7XG4gICAgICAgICAgaWYgKCFpbnRlcnN0aXRpYWwuaXNBc3NldFBhc3RQbGF5b3V0TGltaXQobmV4dEFzc2V0SW5kZXgpKSB7XG4gICAgICAgICAgICBfdGhpczguYnVmZmVyZWRUb0l0ZW0oaXRlbSwgbmV4dEFzc2V0SW5kZXgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM4JHNjaGVkdWxlJGl0ZW1zMjtcbiAgICAgICAgICAgIHZhciBuZXh0SXRlbSA9IChfdGhpczgkc2NoZWR1bGUkaXRlbXMyID0gX3RoaXM4LnNjaGVkdWxlLml0ZW1zKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXM4JHNjaGVkdWxlJGl0ZW1zMltzY2hlZHVsZUluZGV4ICsgMV07XG4gICAgICAgICAgICBpZiAobmV4dEl0ZW0pIHtcbiAgICAgICAgICAgICAgX3RoaXM4LmJ1ZmZlcmVkVG9JdGVtKG5leHRJdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBwbGF5ZXIub24oRXZlbnRzLkJVRkZFUkVEX1RPX0VORCwgYnVmZmVyZWRUb0VuZCk7XG4gICAgICB2YXIgZW5kZWRXaXRoQXNzZXRJbmRleCA9IGZ1bmN0aW9uIGVuZGVkV2l0aEFzc2V0SW5kZXgoYXNzZXRJbmRleCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBpblF1ZXVQbGF5ZXIgPSBfdGhpczguZ2V0QXNzZXRQbGF5ZXIoYXNzZXRJZCk7XG4gICAgICAgICAgaWYgKCFpblF1ZXVQbGF5ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXM4LnNob3VsZFBsYXkgPSB0cnVlO1xuICAgICAgICAgIHZhciBzY2hlZHVsZUluZGV4ID0gX3RoaXM4LnNjaGVkdWxlLmZpbmRFdmVudEluZGV4KGludGVyc3RpdGlhbC5pZGVudGlmaWVyKTtcbiAgICAgICAgICBfdGhpczguYWR2YW5jZUFmdGVyQXNzZXRFbmRlZChpbnRlcnN0aXRpYWwsIHNjaGVkdWxlSW5kZXgsIGFzc2V0SW5kZXgpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIHBsYXllci5vbmNlKEV2ZW50cy5NRURJQV9FTkRFRCwgZW5kZWRXaXRoQXNzZXRJbmRleChhc3NldExpc3RJbmRleCkpO1xuICAgICAgcGxheWVyLm9uY2UoRXZlbnRzLlBMQVlPVVRfTElNSVRfUkVBQ0hFRCwgZW5kZWRXaXRoQXNzZXRJbmRleChJbmZpbml0eSkpO1xuICAgICAgcGxheWVyLm9uKEV2ZW50cy5FUlJPUiwgZnVuY3Rpb24gKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgIHZhciBpblF1ZXVQbGF5ZXIgPSBfdGhpczguZ2V0QXNzZXRQbGF5ZXIoYXNzZXRJZCk7XG4gICAgICAgIGlmIChkYXRhLmRldGFpbHMgPT09IEVycm9yRGV0YWlscy5CVUZGRVJfU1RBTExFRF9FUlJPUikge1xuICAgICAgICAgIGlmIChpblF1ZXVQbGF5ZXIgIT0gbnVsbCAmJiBpblF1ZXVQbGF5ZXIubWVkaWEpIHtcbiAgICAgICAgICAgIHZhciBhc3NldEN1cnJlbnRUaW1lID0gaW5RdWV1UGxheWVyLmN1cnJlbnRUaW1lO1xuICAgICAgICAgICAgdmFyIGRpc3RhbmNlRnJvbUVuZCA9IGluUXVldVBsYXllci5kdXJhdGlvbiAtIGFzc2V0Q3VycmVudFRpbWU7XG4gICAgICAgICAgICBpZiAoYXNzZXRDdXJyZW50VGltZSAmJiBpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZSAmJiBkaXN0YW5jZUZyb21FbmQgLyBpblF1ZXVQbGF5ZXIubWVkaWEucGxheWJhY2tSYXRlIDwgMC41KSB7XG4gICAgICAgICAgICAgIF90aGlzOC5sb2coXCJBZHZhbmNpbmcgYnVmZmVyIHBhc3QgZW5kIG9mIGFzc2V0IFwiICsgYXNzZXRJZCArIFwiIFwiICsgaW50ZXJzdGl0aWFsICsgXCIgYXQgXCIgKyBpblF1ZXVQbGF5ZXIubWVkaWEuY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICBidWZmZXJlZFRvRW5kKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpczgud2FybihcIlN0YWxsZWQgYXQgXCIgKyBhc3NldEN1cnJlbnRUaW1lICsgXCIgb2YgXCIgKyAoYXNzZXRDdXJyZW50VGltZSArIGRpc3RhbmNlRnJvbUVuZCkgKyBcIiBpbiBhc3NldCBcIiArIGFzc2V0SWQgKyBcIiBcIiArIGludGVyc3RpdGlhbCk7XG4gICAgICAgICAgICAgIF90aGlzOC5vblRpbWV1cGRhdGUoKTtcbiAgICAgICAgICAgICAgX3RoaXM4LmNoZWNrQnVmZmVyKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXM4LmhhbmRsZUFzc2V0SXRlbUVycm9yKGRhdGEsIGludGVyc3RpdGlhbCwgX3RoaXM4LnNjaGVkdWxlLmZpbmRFdmVudEluZGV4KGludGVyc3RpdGlhbC5pZGVudGlmaWVyKSwgYXNzZXRMaXN0SW5kZXgsIFwiQXNzZXQgcGxheWVyIGVycm9yIFwiICsgZGF0YS5lcnJvciArIFwiIFwiICsgaW50ZXJzdGl0aWFsKTtcbiAgICAgIH0pO1xuICAgICAgcGxheWVyLm9uKEV2ZW50cy5ERVNUUk9ZSU5HLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpblF1ZXVQbGF5ZXIgPSBfdGhpczguZ2V0QXNzZXRQbGF5ZXIoYXNzZXRJZCk7XG4gICAgICAgIGlmICghaW5RdWV1UGxheWVyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIkFzc2V0IHBsYXllciBkZXN0cm95ZWQgdW5leHBlY3RlZGx5IFwiICsgYXNzZXRJZCk7XG4gICAgICAgIHZhciBlcnJvckRhdGEgPSB7XG4gICAgICAgICAgZmF0YWw6IHRydWUsXG4gICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5PVEhFUl9FUlJPUixcbiAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuSU5URVJTVElUSUFMX0FTU0VUX0lURU1fRVJST1IsXG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzOC5oYW5kbGVBc3NldEl0ZW1FcnJvcihlcnJvckRhdGEsIGludGVyc3RpdGlhbCwgX3RoaXM4LnNjaGVkdWxlLmZpbmRFdmVudEluZGV4KGludGVyc3RpdGlhbC5pZGVudGlmaWVyKSwgYXNzZXRMaXN0SW5kZXgsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmxvZyhcIklOVEVSU1RJVElBTF9BU1NFVF9QTEFZRVJfQ1JFQVRFRCBcIiArIGV2ZW50QXNzZXRUb1N0cmluZyhhc3NldEl0ZW0pKTtcbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLklOVEVSU1RJVElBTF9BU1NFVF9QTEFZRVJfQ1JFQVRFRCwge1xuICAgICAgICBhc3NldDogYXNzZXRJdGVtLFxuICAgICAgICBhc3NldExpc3RJbmRleDogYXNzZXRMaXN0SW5kZXgsXG4gICAgICAgIGV2ZW50OiBpbnRlcnN0aXRpYWwsXG4gICAgICAgIHBsYXllcjogcGxheWVyXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwbGF5ZXI7XG4gICAgfTtcbiAgICBfcHJvdG8uY2xlYXJJbnRlcnN0aXRpYWwgPSBmdW5jdGlvbiBjbGVhckludGVyc3RpdGlhbChpbnRlcnN0aXRpYWwsIHRvU2VnbWVudCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG4gICAgICBpbnRlcnN0aXRpYWwuYXNzZXRMaXN0LmZvckVhY2goZnVuY3Rpb24gKGFzc2V0KSB7XG4gICAgICAgIF90aGlzOS5jbGVhckFzc2V0UGxheWVyKGFzc2V0LmlkZW50aWZpZXIsIHRvU2VnbWVudCk7XG4gICAgICB9KTtcbiAgICAgIC8vIFJlbW92ZSBhc3NldCBsaXN0IGFuZCByZXNvbHZlZCBkdXJhdGlvblxuICAgICAgaW50ZXJzdGl0aWFsLnJlc2V0KCk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVzZXRBc3NldFBsYXllciA9IGZ1bmN0aW9uIHJlc2V0QXNzZXRQbGF5ZXIoYXNzZXRJZCkge1xuICAgICAgLy8gUmVzZXQgYXNzZXQgcGxheWVyIHNvIHRoYXQgaXQncyB0aW1lbGluZSBjYW4gYmUgYWRqdXN0ZWQgd2l0aG91dCByZWxvYWRpbmcgdGhlIE1WUFxuICAgICAgdmFyIHBsYXllckluZGV4ID0gdGhpcy5nZXRBc3NldFBsYXllclF1ZXVlSW5kZXgoYXNzZXRJZCk7XG4gICAgICBpZiAocGxheWVySW5kZXggIT09IC0xKSB7XG4gICAgICAgIHRoaXMubG9nKFwicmVzZXQgYXNzZXQgcGxheWVyIFxcXCJcIiArIGFzc2V0SWQgKyBcIlxcXCIgYWZ0ZXIgZXJyb3JcIik7XG4gICAgICAgIHZhciBwbGF5ZXIgPSB0aGlzLnBsYXllclF1ZXVlW3BsYXllckluZGV4XTtcbiAgICAgICAgdGhpcy50cmFuc2Zlck1lZGlhRnJvbVBsYXllcihwbGF5ZXIsIG51bGwpO1xuICAgICAgICBwbGF5ZXIucmVzZXREZXRhaWxzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uY2xlYXJBc3NldFBsYXllciA9IGZ1bmN0aW9uIGNsZWFyQXNzZXRQbGF5ZXIoYXNzZXRJZCwgdG9TZWdtZW50KSB7XG4gICAgICB2YXIgcGxheWVySW5kZXggPSB0aGlzLmdldEFzc2V0UGxheWVyUXVldWVJbmRleChhc3NldElkKTtcbiAgICAgIGlmIChwbGF5ZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5sb2coXCJjbGVhciBhc3NldCBwbGF5ZXIgXFxcIlwiICsgYXNzZXRJZCArIFwiXFxcIiB0b1NlZ21lbnQ6IFwiICsgKHRvU2VnbWVudCA/IHNlZ21lbnRUb1N0cmluZyh0b1NlZ21lbnQpIDogdG9TZWdtZW50KSk7XG4gICAgICAgIHZhciBwbGF5ZXIgPSB0aGlzLnBsYXllclF1ZXVlW3BsYXllckluZGV4XTtcbiAgICAgICAgdGhpcy50cmFuc2Zlck1lZGlhRnJvbVBsYXllcihwbGF5ZXIsIHRvU2VnbWVudCk7XG4gICAgICAgIHRoaXMucGxheWVyUXVldWUuc3BsaWNlKHBsYXllckluZGV4LCAxKTtcbiAgICAgICAgcGxheWVyLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5lbXB0eVBsYXllclF1ZXVlID0gZnVuY3Rpb24gZW1wdHlQbGF5ZXJRdWV1ZSgpIHtcbiAgICAgIHZhciBwbGF5ZXI7XG4gICAgICB3aGlsZSAocGxheWVyID0gdGhpcy5wbGF5ZXJRdWV1ZS5wb3AoKSkge1xuICAgICAgICBwbGF5ZXIuZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5wbGF5ZXJRdWV1ZSA9IFtdO1xuICAgIH07XG4gICAgX3Byb3RvLnN0YXJ0QXNzZXRQbGF5ZXIgPSBmdW5jdGlvbiBzdGFydEFzc2V0UGxheWVyKHBsYXllciwgYXNzZXRMaXN0SW5kZXgsIHNjaGVkdWxlSXRlbXMsIHNjaGVkdWxlSW5kZXgsIG1lZGlhKSB7XG4gICAgICB2YXIgaW50ZXJzdGl0aWFsID0gcGxheWVyLmludGVyc3RpdGlhbCxcbiAgICAgICAgYXNzZXRJdGVtID0gcGxheWVyLmFzc2V0SXRlbSxcbiAgICAgICAgYXNzZXRJZCA9IHBsYXllci5hc3NldElkO1xuICAgICAgdmFyIGFzc2V0TGlzdExlbmd0aCA9IGludGVyc3RpdGlhbC5hc3NldExpc3QubGVuZ3RoO1xuICAgICAgdmFyIHBsYXlpbmdBc3NldCA9IHRoaXMucGxheWluZ0Fzc2V0O1xuICAgICAgdGhpcy5lbmRlZEFzc2V0ID0gbnVsbDtcbiAgICAgIHRoaXMucGxheWluZ0Fzc2V0ID0gYXNzZXRJdGVtO1xuICAgICAgaWYgKCFwbGF5aW5nQXNzZXQgfHwgcGxheWluZ0Fzc2V0LmlkZW50aWZpZXIgIT09IGFzc2V0SWQpIHtcbiAgICAgICAgaWYgKHBsYXlpbmdBc3NldCkge1xuICAgICAgICAgIC8vIEV4aXRpbmcgYW5vdGhlciBJbnRlcnN0aXRpYWwgYXNzZXRcbiAgICAgICAgICB0aGlzLmNsZWFyQXNzZXRQbGF5ZXIocGxheWluZ0Fzc2V0LmlkZW50aWZpZXIsIHNjaGVkdWxlSXRlbXNbc2NoZWR1bGVJbmRleF0pO1xuICAgICAgICAgIGRlbGV0ZSBwbGF5aW5nQXNzZXQuZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2coXCJJTlRFUlNUSVRJQUxfQVNTRVRfU1RBUlRFRCBcIiArIChhc3NldExpc3RJbmRleCArIDEpICsgXCIvXCIgKyBhc3NldExpc3RMZW5ndGggKyBcIiBcIiArIGV2ZW50QXNzZXRUb1N0cmluZyhhc3NldEl0ZW0pKTtcbiAgICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuSU5URVJTVElUSUFMX0FTU0VUX1NUQVJURUQsIHtcbiAgICAgICAgICBhc3NldDogYXNzZXRJdGVtLFxuICAgICAgICAgIGFzc2V0TGlzdEluZGV4OiBhc3NldExpc3RJbmRleCxcbiAgICAgICAgICBldmVudDogaW50ZXJzdGl0aWFsLFxuICAgICAgICAgIHNjaGVkdWxlOiBzY2hlZHVsZUl0ZW1zLnNsaWNlKDApLFxuICAgICAgICAgIHNjaGVkdWxlSW5kZXg6IHNjaGVkdWxlSW5kZXgsXG4gICAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGRldGFjaCBtZWRpYSBhbmQgYXR0YWNoIHRvIGludGVyc3RpdGlhbCBwbGF5ZXIgaWYgaXQgZG9lcyBub3QgaGF2ZSBhbm90aGVyIGVsZW1lbnQgYXR0YWNoZWRcbiAgICAgIHRoaXMuYnVmZmVyQXNzZXRQbGF5ZXIocGxheWVyLCBtZWRpYSk7XG4gICAgfTtcbiAgICBfcHJvdG8uYnVmZmVyQXNzZXRQbGF5ZXIgPSBmdW5jdGlvbiBidWZmZXJBc3NldFBsYXllcihwbGF5ZXIsIG1lZGlhKSB7XG4gICAgICB2YXIgX3RoaXMkc2NoZWR1bGUkaXRlbXMyLCBfdGhpcyRkZXRhY2hlZERhdGE0O1xuICAgICAgdmFyIGludGVyc3RpdGlhbCA9IHBsYXllci5pbnRlcnN0aXRpYWwsXG4gICAgICAgIGFzc2V0SXRlbSA9IHBsYXllci5hc3NldEl0ZW07XG4gICAgICB2YXIgc2NoZWR1bGVJbmRleCA9IHRoaXMuc2NoZWR1bGUuZmluZEV2ZW50SW5kZXgoaW50ZXJzdGl0aWFsLmlkZW50aWZpZXIpO1xuICAgICAgdmFyIGl0ZW0gPSAoX3RoaXMkc2NoZWR1bGUkaXRlbXMyID0gdGhpcy5zY2hlZHVsZS5pdGVtcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHNjaGVkdWxlJGl0ZW1zMltzY2hlZHVsZUluZGV4XTtcbiAgICAgIGlmICghaXRlbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnNldEJ1ZmZlcmluZ0l0ZW0oaXRlbSk7XG4gICAgICB0aGlzLmJ1ZmZlcmluZ0Fzc2V0ID0gYXNzZXRJdGVtO1xuICAgICAgdmFyIGJ1ZmZlcmluZ1BsYXllciA9IHRoaXMuZ2V0QnVmZmVyaW5nUGxheWVyKCk7XG4gICAgICBpZiAoYnVmZmVyaW5nUGxheWVyID09PSBwbGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGFwcGVuZEluUGxhY2VOZXh0ID0gaW50ZXJzdGl0aWFsLmFwcGVuZEluUGxhY2U7XG4gICAgICBpZiAoYXBwZW5kSW5QbGFjZU5leHQgJiYgKGJ1ZmZlcmluZ1BsYXllciA9PSBudWxsID8gdm9pZCAwIDogYnVmZmVyaW5nUGxheWVyLmludGVyc3RpdGlhbC5hcHBlbmRJblBsYWNlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgLy8gTWVkaWEgaXMgZGV0YWNoZWQgYW5kIG5vdCBhdmFpbGFibGUgdG8gYXBwZW5kIGluIHBsYWNlXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBhY3RpdmVUcmFja3MgPSAoYnVmZmVyaW5nUGxheWVyID09IG51bGwgPyB2b2lkIDAgOiBidWZmZXJpbmdQbGF5ZXIudHJhY2tzKSB8fCAoKF90aGlzJGRldGFjaGVkRGF0YTQgPSB0aGlzLmRldGFjaGVkRGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGRldGFjaGVkRGF0YTQudHJhY2tzKSB8fCB0aGlzLnJlcXVpcmVkVHJhY2tzO1xuICAgICAgaWYgKGFwcGVuZEluUGxhY2VOZXh0ICYmIGFzc2V0SXRlbSAhPT0gdGhpcy5wbGF5aW5nQXNzZXQpIHtcbiAgICAgICAgLy8gRG8gbm90IGJ1ZmZlciBhbm90aGVyIGl0ZW0gaWYgdHJhY2tzIGFyZSB1bmtub3duIG9yIGluY29tcGF0aWJsZVxuICAgICAgICBpZiAoIXBsYXllci50cmFja3MpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGl2ZVRyYWNrcyAmJiAhaXNDb21wYXRpYmxlVHJhY2tDaGFuZ2UoYWN0aXZlVHJhY2tzLCBwbGF5ZXIudHJhY2tzKSkge1xuICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIkFzc2V0IFwiICsgZXZlbnRBc3NldFRvU3RyaW5nKGFzc2V0SXRlbSkgKyBcIiBTb3VyY2VCdWZmZXIgdHJhY2tzICgnXCIgKyBPYmplY3Qua2V5cyhwbGF5ZXIudHJhY2tzKSArIFwiJykgYXJlIG5vdCBjb21wYXRpYmxlIHdpdGggcHJpbWFyeSBjb250ZW50IHRyYWNrcyAoJ1wiICsgT2JqZWN0LmtleXMoYWN0aXZlVHJhY2tzKSArIFwiJylcIik7XG4gICAgICAgICAgdmFyIGVycm9yRGF0YSA9IHtcbiAgICAgICAgICAgIGZhdGFsOiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5PVEhFUl9FUlJPUixcbiAgICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5JTlRFUlNUSVRJQUxfQVNTRVRfSVRFTV9FUlJPUixcbiAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIGFzc2V0TGlzdEluZGV4ID0gaW50ZXJzdGl0aWFsLmZpbmRBc3NldEluZGV4KGFzc2V0SXRlbSk7XG4gICAgICAgICAgdGhpcy5oYW5kbGVBc3NldEl0ZW1FcnJvcihlcnJvckRhdGEsIGludGVyc3RpdGlhbCwgc2NoZWR1bGVJbmRleCwgYXNzZXRMaXN0SW5kZXgsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy50cmFuc2Zlck1lZGlhVG8ocGxheWVyLCBtZWRpYSk7XG4gICAgfTtcbiAgICBfcHJvdG8uaGFuZGxlQXNzZXRJdGVtRXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVBc3NldEl0ZW1FcnJvcihkYXRhLCBpbnRlcnN0aXRpYWwsIHNjaGVkdWxlSW5kZXgsIGFzc2V0TGlzdEluZGV4LCBlcnJvck1lc3NhZ2UpIHtcbiAgICAgIGlmIChkYXRhLmRldGFpbHMgPT09IEVycm9yRGV0YWlscy5CVUZGRVJfU1RBTExFRF9FUlJPUikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgYXNzZXRJdGVtID0gaW50ZXJzdGl0aWFsLmFzc2V0TGlzdFthc3NldExpc3RJbmRleF07XG4gICAgICB0aGlzLndhcm4oXCJJTlRFUlNUSVRJQUxfQVNTRVRfRVJST1IgXCIgKyAoYXNzZXRJdGVtID8gZXZlbnRBc3NldFRvU3RyaW5nKGFzc2V0SXRlbSkgOiBhc3NldEl0ZW0pICsgXCIgXCIgKyBkYXRhLmVycm9yKTtcbiAgICAgIHZhciBhc3NldElkID0gYXNzZXRJdGVtID09IG51bGwgPyB2b2lkIDAgOiBhc3NldEl0ZW0uaWRlbnRpZmllcjtcbiAgICAgIHZhciBwbGF5ZXJJbmRleCA9IHRoaXMuZ2V0QXNzZXRQbGF5ZXJRdWV1ZUluZGV4KGFzc2V0SWQpO1xuICAgICAgdmFyIHBsYXllciA9IHRoaXMucGxheWVyUXVldWVbcGxheWVySW5kZXhdIHx8IG51bGw7XG4gICAgICB2YXIgaXRlbXMgPSB0aGlzLnNjaGVkdWxlLml0ZW1zO1xuICAgICAgdmFyIGludGVyc3RpdGlhbEFzc2V0RXJyb3IgPSBfZXh0ZW5kcyh7fSwgZGF0YSwge1xuICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgIGVycm9yQWN0aW9uOiBjcmVhdGVEb05vdGhpbmdFcnJvckFjdGlvbih0cnVlKSxcbiAgICAgICAgYXNzZXQ6IGFzc2V0SXRlbSxcbiAgICAgICAgYXNzZXRMaXN0SW5kZXg6IGFzc2V0TGlzdEluZGV4LFxuICAgICAgICBldmVudDogaW50ZXJzdGl0aWFsLFxuICAgICAgICBzY2hlZHVsZTogaXRlbXMsXG4gICAgICAgIHNjaGVkdWxlSW5kZXg6IHNjaGVkdWxlSW5kZXgsXG4gICAgICAgIHBsYXllcjogcGxheWVyXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLklOVEVSU1RJVElBTF9BU1NFVF9FUlJPUiwgaW50ZXJzdGl0aWFsQXNzZXRFcnJvcik7XG4gICAgICBpZiAoIWRhdGEuZmF0YWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHBsYXlpbmdBc3NldCA9IHRoaXMucGxheWluZ0Fzc2V0O1xuICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICBpZiAoYXNzZXRJdGVtKSB7XG4gICAgICAgIHRoaXMuY2xlYXJBc3NldFBsYXllcihhc3NldElkLCBudWxsKTtcbiAgICAgICAgYXNzZXRJdGVtLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGFsbCBhc3NldHMgaW4gaW50ZXJzdGl0aWFsIGZhaWwsIG1hcmsgdGhlIGludGVyc3RpdGlhbCB3aXRoIGFuIGVycm9yXG4gICAgICBpZiAoIWludGVyc3RpdGlhbC5hc3NldExpc3Quc29tZShmdW5jdGlvbiAoYXNzZXQpIHtcbiAgICAgICAgcmV0dXJuICFhc3NldC5lcnJvcjtcbiAgICAgIH0pKSB7XG4gICAgICAgIGludGVyc3RpdGlhbC5lcnJvciA9IGVycm9yO1xuICAgICAgfSBlbHNlIGlmIChpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICAvLyBSZXNldCBsZXZlbCBkZXRhaWxzIGFuZCByZWxvYWQvcGFyc2UgbWVkaWEgcGxheWxpc3RzIHRvIGFsaWduIHdpdGggdXBkYXRlZCBzY2hlZHVsZVxuICAgICAgICBmb3IgKHZhciBpID0gYXNzZXRMaXN0SW5kZXg7IGkgPCBpbnRlcnN0aXRpYWwuYXNzZXRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5yZXNldEFzc2V0UGxheWVyKGludGVyc3RpdGlhbC5hc3NldExpc3RbaV0uaWRlbnRpZmllcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVTY2hlZHVsZSgpO1xuICAgICAgfVxuICAgICAgaWYgKGludGVyc3RpdGlhbC5lcnJvcikge1xuICAgICAgICB0aGlzLnByaW1hcnlGYWxsYmFjayhpbnRlcnN0aXRpYWwpO1xuICAgICAgfSBlbHNlIGlmIChwbGF5aW5nQXNzZXQgJiYgcGxheWluZ0Fzc2V0LmlkZW50aWZpZXIgPT09IGFzc2V0SWQpIHtcbiAgICAgICAgdGhpcy5hZHZhbmNlQWZ0ZXJBc3NldEVuZGVkKGludGVyc3RpdGlhbCwgc2NoZWR1bGVJbmRleCwgYXNzZXRMaXN0SW5kZXgpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnByaW1hcnlGYWxsYmFjayA9IGZ1bmN0aW9uIHByaW1hcnlGYWxsYmFjayhpbnRlcnN0aXRpYWwpIHtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIFByaW1hcnkgYnkgb24gY3VycmVudCBvciBmdXR1cmUgZXZlbnRzIGJ5IHVwZGF0aW5nIHNjaGVkdWxlIHRvIHNraXAgZXJyb3JlZCBpbnRlcnN0aXRpYWxzL2Fzc2V0c1xuICAgICAgdmFyIGZsdXNoU3RhcnQgPSBpbnRlcnN0aXRpYWwudGltZWxpbmVTdGFydDtcbiAgICAgIHZhciBwbGF5aW5nSXRlbSA9IHRoaXMuZWZmZWN0aXZlUGxheWluZ0l0ZW07XG4gICAgICAvLyBVcGRhdGUgc2NoZWR1bGUgbm93IHRoYXQgaW50ZXJzdGl0aWFsL2Fzc2V0cyBhcmUgZmxhZ2dlZCB3aXRoIGBlcnJvcmAgZm9yIGZhbGxiYWNrXG4gICAgICB0aGlzLnVwZGF0ZVNjaGVkdWxlKCk7XG4gICAgICBpZiAocGxheWluZ0l0ZW0pIHtcbiAgICAgICAgdGhpcy5sb2coXCJGYWxsYmFjayB0byBwcmltYXJ5IGZyb20gZXZlbnQgXFxcIlwiICsgaW50ZXJzdGl0aWFsLmlkZW50aWZpZXIgKyBcIlxcXCIgc3RhcnQ6IFwiICsgZmx1c2hTdGFydCArIFwiIHBvczogXCIgKyB0aGlzLnRpbWVsaW5lUG9zICsgXCIgcGxheWluZzogXCIgKyAocGxheWluZ0l0ZW0gPyBzZWdtZW50VG9TdHJpbmcocGxheWluZ0l0ZW0pIDogJzxub25lPicpICsgXCIgZXJyb3I6IFwiICsgaW50ZXJzdGl0aWFsLmVycm9yKTtcbiAgICAgICAgdmFyIHRpbWVsaW5lUG9zID0gdGhpcy50aW1lbGluZVBvcztcbiAgICAgICAgaWYgKHRpbWVsaW5lUG9zID09PSAtMSkge1xuICAgICAgICAgIHRpbWVsaW5lUG9zID0gdGhpcy5obHMuc3RhcnRQb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV3UGxheWluZ0l0ZW0gPSB0aGlzLnVwZGF0ZUl0ZW0ocGxheWluZ0l0ZW0sIHRpbWVsaW5lUG9zKTtcbiAgICAgICAgaWYgKHRoaXMuaXRlbXNNYXRjaChwbGF5aW5nSXRlbSwgbmV3UGxheWluZ0l0ZW0pKSB7XG4gICAgICAgICAgdGhpcy5jbGVhckludGVyc3RpdGlhbChpbnRlcnN0aXRpYWwsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnN0aXRpYWwuYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICAgIHRoaXMuYXR0YWNoUHJpbWFyeShmbHVzaFN0YXJ0LCBudWxsKTtcbiAgICAgICAgICB0aGlzLmZsdXNoRnJvbnRCdWZmZXIoZmx1c2hTdGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjaGVkdWxlSW5kZXggPSB0aGlzLnNjaGVkdWxlLmZpbmRJdGVtSW5kZXhBdFRpbWUodGltZWxpbmVQb3MpO1xuICAgICAgICB0aGlzLnNldFNjaGVkdWxlUG9zaXRpb24oc2NoZWR1bGVJbmRleCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNoZWNrU3RhcnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBc3NldCBMaXN0IGxvYWRpbmdcbiAgICA7XG4gICAgX3Byb3RvLm9uQXNzZXRMaXN0TG9hZGVkID0gZnVuY3Rpb24gb25Bc3NldExpc3RMb2FkZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfdGhpczAgPSB0aGlzLFxuICAgICAgICBfdGhpcyRidWZmZXJpbmdJdGVtO1xuICAgICAgdmFyIGludGVyc3RpdGlhbCA9IGRhdGEuZXZlbnQ7XG4gICAgICB2YXIgaW50ZXJzdGl0aWFsSWQgPSBpbnRlcnN0aXRpYWwuaWRlbnRpZmllcjtcbiAgICAgIHZhciBhc3NldHMgPSBkYXRhLmFzc2V0TGlzdFJlc3BvbnNlLkFTU0VUUztcbiAgICAgIGlmICghdGhpcy5zY2hlZHVsZS5oYXNFdmVudChpbnRlcnN0aXRpYWxJZCkpIHtcbiAgICAgICAgLy8gSW50ZXJzdGl0aWFsIHdpdGggaWQgd2FzIHJlbW92ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGV2ZW50U3RhcnQgPSBpbnRlcnN0aXRpYWwudGltZWxpbmVTdGFydDtcbiAgICAgIHZhciBwcmV2aW91c0R1cmF0aW9uID0gaW50ZXJzdGl0aWFsLmR1cmF0aW9uO1xuICAgICAgdmFyIHN1bUR1cmF0aW9uID0gMDtcbiAgICAgIGFzc2V0cy5mb3JFYWNoKGZ1bmN0aW9uIChhc3NldCwgYXNzZXRMaXN0SW5kZXgpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gcGFyc2VGbG9hdChhc3NldC5EVVJBVElPTik7XG4gICAgICAgIF90aGlzMC5jcmVhdGVBc3NldChpbnRlcnN0aXRpYWwsIGFzc2V0TGlzdEluZGV4LCBzdW1EdXJhdGlvbiwgZXZlbnRTdGFydCArIHN1bUR1cmF0aW9uLCBkdXJhdGlvbiwgYXNzZXQuVVJJKTtcbiAgICAgICAgc3VtRHVyYXRpb24gKz0gZHVyYXRpb247XG4gICAgICB9KTtcbiAgICAgIGludGVyc3RpdGlhbC5kdXJhdGlvbiA9IHN1bUR1cmF0aW9uO1xuICAgICAgdGhpcy5sb2coXCJMb2FkZWQgYXNzZXQtbGlzdCB3aXRoIGR1cmF0aW9uOiBcIiArIHN1bUR1cmF0aW9uICsgXCIgKHdhczogXCIgKyBwcmV2aW91c0R1cmF0aW9uICsgXCIpIFwiICsgaW50ZXJzdGl0aWFsKTtcbiAgICAgIHZhciB3YWl0aW5nSXRlbSA9IHRoaXMud2FpdGluZ0l0ZW07XG4gICAgICB2YXIgd2FpdGluZ0Zvckl0ZW0gPSAod2FpdGluZ0l0ZW0gPT0gbnVsbCA/IHZvaWQgMCA6IHdhaXRpbmdJdGVtLmV2ZW50LmlkZW50aWZpZXIpID09PSBpbnRlcnN0aXRpYWxJZDtcblxuICAgICAgLy8gVXBkYXRlIHNjaGVkdWxlIG5vdyB0aGF0IGFzc2V0LkRVUkFUSU9OKHMpIGFyZSBwYXJzZWRcbiAgICAgIHRoaXMudXBkYXRlU2NoZWR1bGUoKTtcbiAgICAgIHZhciBidWZmZXJpbmdFdmVudCA9IChfdGhpcyRidWZmZXJpbmdJdGVtID0gdGhpcy5idWZmZXJpbmdJdGVtKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkYnVmZmVyaW5nSXRlbS5ldmVudDtcblxuICAgICAgLy8gSWYgYnVmZmVyIHJlYWNoZWQgSW50ZXJzdGl0aWFsLCBzdGFydCBidWZmZXJpbmcgZmlyc3QgYXNzZXRcbiAgICAgIGlmICh3YWl0aW5nRm9ySXRlbSkge1xuICAgICAgICB2YXIgX3RoaXMkc2NoZWR1bGUkaXRlbXMzO1xuICAgICAgICAvLyBBZHZhbmNlIHNjaGVkdWxlIHdoZW4gd2FpdGluZyBmb3IgYXNzZXQgbGlzdCBkYXRhIHRvIHBsYXlcbiAgICAgICAgdmFyIHNjaGVkdWxlSW5kZXggPSB0aGlzLnNjaGVkdWxlLmZpbmRFdmVudEluZGV4KGludGVyc3RpdGlhbElkKTtcbiAgICAgICAgdmFyIGl0ZW0gPSAoX3RoaXMkc2NoZWR1bGUkaXRlbXMzID0gdGhpcy5zY2hlZHVsZS5pdGVtcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHNjaGVkdWxlJGl0ZW1zM1tzY2hlZHVsZUluZGV4XTtcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICBpZiAoIXRoaXMucGxheWluZ0l0ZW0gJiYgdGhpcy50aW1lbGluZVBvcyA+IGl0ZW0uZW5kKSB7XG4gICAgICAgICAgICAvLyBBYmFuZG9uIGlmIG5ldyBkdXJhdGlvbiBpcyByZWR1Y2VkIGVub3VnaCB0byBsYW5kIHBsYXliYWNrIGluIHByaW1hcnkgc3RhcnRcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuc2NoZWR1bGUuZmluZEl0ZW1JbmRleEF0VGltZSh0aGlzLnRpbWVsaW5lUG9zKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gc2NoZWR1bGVJbmRleCkge1xuICAgICAgICAgICAgICBpbnRlcnN0aXRpYWwuZXJyb3IgPSBuZXcgRXJyb3IoXCJJbnRlcnN0aXRpYWwgbm8gbG9uZ2VyIHdpdGhpbiBwbGF5YmFjayByYW5nZSBcIiArIHRoaXMudGltZWxpbmVQb3MgKyBcIiBcIiArIGludGVyc3RpdGlhbCk7XG4gICAgICAgICAgICAgIHRoaXMucHJpbWFyeUZhbGxiYWNrKGludGVyc3RpdGlhbCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zZXRCdWZmZXJpbmdJdGVtKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U2NoZWR1bGVQb3NpdGlvbihzY2hlZHVsZUluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJ1ZmZlcmluZ0V2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBidWZmZXJpbmdFdmVudC5pZGVudGlmaWVyKSA9PT0gaW50ZXJzdGl0aWFsSWQgJiYgYnVmZmVyaW5nRXZlbnQuYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICAvLyBJZiBidWZmZXJpbmcgKGJ1dCBub3QgcGxheWJhY2spIGhhcyByZWFjaGVkIHRoaXMgaXRlbSB0cmFuc2ZlciBtZWRpYS1zb3VyY2VcbiAgICAgICAgdmFyIGFzc2V0SXRlbSA9IGludGVyc3RpdGlhbC5hc3NldExpc3RbMF07XG4gICAgICAgIHZhciBwbGF5ZXIgPSB0aGlzLmdldEFzc2V0UGxheWVyKGFzc2V0SXRlbS5pZGVudGlmaWVyKTtcbiAgICAgICAgdmFyIG1lZGlhID0gdGhpcy5wcmltYXJ5TWVkaWE7XG4gICAgICAgIGlmIChhc3NldEl0ZW0gJiYgcGxheWVyICYmIG1lZGlhKSB7XG4gICAgICAgICAgdGhpcy5idWZmZXJBc3NldFBsYXllcihwbGF5ZXIsIG1lZGlhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKGV2ZW50LCBkYXRhKSB7XG4gICAgICBzd2l0Y2ggKGRhdGEuZGV0YWlscykge1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5BU1NFVF9MSVNUX1BBUlNJTkdfRVJST1I6XG4gICAgICAgIGNhc2UgRXJyb3JEZXRhaWxzLkFTU0VUX0xJU1RfTE9BRF9FUlJPUjpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuQVNTRVRfTElTVF9MT0FEX1RJTUVPVVQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIGludGVyc3RpdGlhbCA9IGRhdGEuaW50ZXJzdGl0aWFsO1xuICAgICAgICAgICAgaWYgKGludGVyc3RpdGlhbCkge1xuICAgICAgICAgICAgICB0aGlzLnByaW1hcnlGYWxsYmFjayhpbnRlcnN0aXRpYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5CVUZGRVJfU1RBTExFRF9FUlJPUjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLm9uVGltZXVwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5jaGVja0J1ZmZlcih0cnVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoSW50ZXJzdGl0aWFsc0NvbnRyb2xsZXIsIFt7XG4gICAgICBrZXk6IFwiaW50ZXJzdGl0aWFsc01hbmFnZXJcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAoIXRoaXMubWFuYWdlcikge1xuICAgICAgICAgIGlmICghdGhpcy5obHMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgYyA9IHRoaXM7XG4gICAgICAgICAgdmFyIGVmZmVjdGl2ZUJ1ZmZlcmluZ0l0ZW0gPSBmdW5jdGlvbiBlZmZlY3RpdmVCdWZmZXJpbmdJdGVtKCkge1xuICAgICAgICAgICAgcmV0dXJuIGMuYnVmZmVyaW5nSXRlbSB8fCBjLndhaXRpbmdJdGVtO1xuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIGdldEFzc2V0UGxheWVyID0gZnVuY3Rpb24gZ2V0QXNzZXRQbGF5ZXIoYXNzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBhc3NldCA/IGMuZ2V0QXNzZXRQbGF5ZXIoYXNzZXQuaWRlbnRpZmllcikgOiBhc3NldDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciBnZXRNYXBwZWRUaW1lID0gZnVuY3Rpb24gZ2V0TWFwcGVkVGltZShpdGVtLCB0aW1lbGluZVR5cGUsIGFzc2V0LCBjb250cm9sbGVyRmllbGQsIGFzc2V0UGxheWVyRmllbGQpIHtcbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgIHZhciB0aW1lID0gaXRlbVt0aW1lbGluZVR5cGVdLnN0YXJ0O1xuICAgICAgICAgICAgICB2YXIgaW50ZXJzdGl0aWFsID0gaXRlbS5ldmVudDtcbiAgICAgICAgICAgICAgaWYgKGludGVyc3RpdGlhbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aW1lbGluZVR5cGUgPT09ICdwbGF5b3V0JyB8fCBpbnRlcnN0aXRpYWwudGltZWxpbmVPY2N1cGFuY3kgIT09IFRpbWVsaW5lT2NjdXBhbmN5LlBvaW50KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYXNzZXRQbGF5ZXIgPSBnZXRBc3NldFBsYXllcihhc3NldCk7XG4gICAgICAgICAgICAgICAgICBpZiAoKGFzc2V0UGxheWVyID09IG51bGwgPyB2b2lkIDAgOiBhc3NldFBsYXllci5pbnRlcnN0aXRpYWwpID09PSBpbnRlcnN0aXRpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGltZSArPSBhc3NldFBsYXllci5hc3NldEl0ZW0uc3RhcnRPZmZzZXQgKyBhc3NldFBsYXllclthc3NldFBsYXllckZpZWxkXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gY29udHJvbGxlckZpZWxkID09PSAnYnVmZmVyZWRQb3MnID8gZ2V0QnVmZmVyZWRFbmQoKSA6IGNbY29udHJvbGxlckZpZWxkXTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IHZhbHVlIC0gaXRlbS5zdGFydDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gdGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIGZpbmRNYXBwZWRUaW1lID0gZnVuY3Rpb24gZmluZE1hcHBlZFRpbWUocHJpbWFyeVRpbWUsIHRpbWVsaW5lVHlwZSkge1xuICAgICAgICAgICAgaWYgKHByaW1hcnlUaW1lICE9PSAwICYmIHRpbWVsaW5lVHlwZSAhPT0gJ3ByaW1hcnknICYmIGMuc2NoZWR1bGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHZhciBfYyRzY2hlZHVsZSRpdGVtcztcbiAgICAgICAgICAgICAgdmFyIGluZGV4ID0gYy5zY2hlZHVsZS5maW5kSXRlbUluZGV4QXRUaW1lKHByaW1hcnlUaW1lKTtcbiAgICAgICAgICAgICAgdmFyIGl0ZW0gPSAoX2Mkc2NoZWR1bGUkaXRlbXMgPSBjLnNjaGVkdWxlLml0ZW1zKSA9PSBudWxsID8gdm9pZCAwIDogX2Mkc2NoZWR1bGUkaXRlbXNbaW5kZXhdO1xuICAgICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHZhciBkaWZmID0gaXRlbVt0aW1lbGluZVR5cGVdLnN0YXJ0IC0gaXRlbS5zdGFydDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJpbWFyeVRpbWUgKyBkaWZmO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJpbWFyeVRpbWU7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgZ2V0QnVmZmVyZWRFbmQgPSBmdW5jdGlvbiBnZXRCdWZmZXJlZEVuZCgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGMuYnVmZmVyZWRQb3M7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdldE1hcHBlZER1cmF0aW9uKCdwcmltYXJ5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgodmFsdWUsIDApO1xuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIGdldE1hcHBlZER1cmF0aW9uID0gZnVuY3Rpb24gZ2V0TWFwcGVkRHVyYXRpb24odGltZWxpbmVUeXBlKSB7XG4gICAgICAgICAgICB2YXIgX2MkcHJpbWFyeURldGFpbHM7XG4gICAgICAgICAgICBpZiAoKF9jJHByaW1hcnlEZXRhaWxzID0gYy5wcmltYXJ5RGV0YWlscykgIT0gbnVsbCAmJiBfYyRwcmltYXJ5RGV0YWlscy5saXZlKSB7XG4gICAgICAgICAgICAgIC8vIHJldHVybiBlbmQgb2YgbGFzdCBldmVudCBpdGVtIG9yIHBsYXlsaXN0XG4gICAgICAgICAgICAgIHJldHVybiBjLnByaW1hcnlEZXRhaWxzLmVkZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYy5zY2hlZHVsZS5kdXJhdGlvbnNbdGltZWxpbmVUeXBlXTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciBzZWVrVG8gPSBmdW5jdGlvbiBzZWVrVG8odGltZSwgdGltZWxpbmVUeXBlKSB7XG4gICAgICAgICAgICB2YXIgX2l0ZW0kZXZlbnQsIF9jJHNjaGVkdWxlJGl0ZW1zMjtcbiAgICAgICAgICAgIHZhciBpdGVtID0gYy5lZmZlY3RpdmVQbGF5aW5nSXRlbTtcbiAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgKF9pdGVtJGV2ZW50ID0gaXRlbS5ldmVudCkgIT0gbnVsbCAmJiBfaXRlbSRldmVudC5yZXN0cmljdGlvbnMuc2tpcCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjLmxvZyhcInNlZWsgdG8gXCIgKyB0aW1lICsgXCIgXFxcIlwiICsgdGltZWxpbmVUeXBlICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgdmFyIHBsYXlpbmdJdGVtID0gYy5lZmZlY3RpdmVQbGF5aW5nSXRlbTtcbiAgICAgICAgICAgIHZhciB0YXJnZXRJbmRleCA9IGMuc2NoZWR1bGUuZmluZEl0ZW1JbmRleEF0VGltZSh0aW1lLCB0aW1lbGluZVR5cGUpO1xuICAgICAgICAgICAgdmFyIHRhcmdldEl0ZW0gPSAoX2Mkc2NoZWR1bGUkaXRlbXMyID0gYy5zY2hlZHVsZS5pdGVtcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jJHNjaGVkdWxlJGl0ZW1zMlt0YXJnZXRJbmRleF07XG4gICAgICAgICAgICB2YXIgYnVmZmVyaW5nUGxheWVyID0gYy5nZXRCdWZmZXJpbmdQbGF5ZXIoKTtcbiAgICAgICAgICAgIHZhciBidWZmZXJpbmdJbnRlcnN0aXRpYWwgPSBidWZmZXJpbmdQbGF5ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGJ1ZmZlcmluZ1BsYXllci5pbnRlcnN0aXRpYWw7XG4gICAgICAgICAgICB2YXIgYXBwZW5kSW5QbGFjZSA9IGJ1ZmZlcmluZ0ludGVyc3RpdGlhbCA9PSBudWxsID8gdm9pZCAwIDogYnVmZmVyaW5nSW50ZXJzdGl0aWFsLmFwcGVuZEluUGxhY2U7XG4gICAgICAgICAgICB2YXIgc2Vla0luSXRlbSA9IHBsYXlpbmdJdGVtICYmIGMuaXRlbXNNYXRjaChwbGF5aW5nSXRlbSwgdGFyZ2V0SXRlbSk7XG4gICAgICAgICAgICBpZiAocGxheWluZ0l0ZW0gJiYgKGFwcGVuZEluUGxhY2UgfHwgc2Vla0luSXRlbSkpIHtcbiAgICAgICAgICAgICAgLy8gc2VlayBpbiBhc3NldCBwbGF5ZXIgb3IgcHJpbWFyeSBtZWRpYSAoYXBwZW5kSW5QbGFjZSlcbiAgICAgICAgICAgICAgdmFyIGFzc2V0UGxheWVyID0gZ2V0QXNzZXRQbGF5ZXIoYy5wbGF5aW5nQXNzZXQpO1xuICAgICAgICAgICAgICB2YXIgbWVkaWEgPSAoYXNzZXRQbGF5ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGFzc2V0UGxheWVyLm1lZGlhKSB8fCBjLnByaW1hcnlNZWRpYTtcbiAgICAgICAgICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdGltZWxpbmVUeXBlID09PSAncHJpbWFyeScgPyBtZWRpYS5jdXJyZW50VGltZSA6IGdldE1hcHBlZFRpbWUocGxheWluZ0l0ZW0sIHRpbWVsaW5lVHlwZSwgYy5wbGF5aW5nQXNzZXQsICd0aW1lbGluZVBvcycsICdjdXJyZW50VGltZScpO1xuICAgICAgICAgICAgICAgIHZhciBkaWZmID0gdGltZSAtIGN1cnJlbnRUaW1lO1xuICAgICAgICAgICAgICAgIHZhciBzZWVrVG9UaW1lID0gKGFwcGVuZEluUGxhY2UgPyBjdXJyZW50VGltZSA6IG1lZGlhLmN1cnJlbnRUaW1lKSArIGRpZmY7XG4gICAgICAgICAgICAgICAgaWYgKHNlZWtUb1RpbWUgPj0gMCAmJiAoIWFzc2V0UGxheWVyIHx8IGFwcGVuZEluUGxhY2UgfHwgc2Vla1RvVGltZSA8PSBhc3NldFBsYXllci5kdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgIG1lZGlhLmN1cnJlbnRUaW1lID0gc2Vla1RvVGltZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNlZWsgb3V0IG9mIGl0ZW0gb3IgYXNzZXRcbiAgICAgICAgICAgIGlmICh0YXJnZXRJdGVtKSB7XG4gICAgICAgICAgICAgIHZhciBfc2Vla1RvVGltZSA9IHRpbWU7XG4gICAgICAgICAgICAgIGlmICh0aW1lbGluZVR5cGUgIT09ICdwcmltYXJ5Jykge1xuICAgICAgICAgICAgICAgIHZhciBwcmltYXJ5U2VnbWVudFN0YXJ0ID0gdGFyZ2V0SXRlbVt0aW1lbGluZVR5cGVdLnN0YXJ0O1xuICAgICAgICAgICAgICAgIHZhciBfZGlmZiA9IHRpbWUgLSBwcmltYXJ5U2VnbWVudFN0YXJ0O1xuICAgICAgICAgICAgICAgIF9zZWVrVG9UaW1lID0gdGFyZ2V0SXRlbS5zdGFydCArIF9kaWZmO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciB0YXJnZXRJc1ByaW1hcnkgPSAhYy5pc0ludGVyc3RpdGlhbCh0YXJnZXRJdGVtKTtcbiAgICAgICAgICAgICAgaWYgKCghYy5pc0ludGVyc3RpdGlhbChwbGF5aW5nSXRlbSkgfHwgcGxheWluZ0l0ZW0uZXZlbnQuYXBwZW5kSW5QbGFjZSkgJiYgKHRhcmdldElzUHJpbWFyeSB8fCB0YXJnZXRJdGVtLmV2ZW50LmFwcGVuZEluUGxhY2UpKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9tZWRpYTIgPSBjLm1lZGlhIHx8IChhcHBlbmRJblBsYWNlID8gYnVmZmVyaW5nUGxheWVyID09IG51bGwgPyB2b2lkIDAgOiBidWZmZXJpbmdQbGF5ZXIubWVkaWEgOiBudWxsKTtcbiAgICAgICAgICAgICAgICBpZiAoX21lZGlhMikge1xuICAgICAgICAgICAgICAgICAgX21lZGlhMi5jdXJyZW50VGltZSA9IF9zZWVrVG9UaW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwbGF5aW5nSXRlbSkge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFuIEludGVyc3RpdGlhbCBiZXR3ZWVuIHRoZSBjdXJyZW50IGl0ZW0gYW5kIHRhcmdldCBpdGVtIGhhcyBhbiBYLVJFU1RSSUNUIEpVTVAgcmVzdHJpY3Rpb25cbiAgICAgICAgICAgICAgICB2YXIgcGxheWluZ0luZGV4ID0gYy5maW5kSXRlbUluZGV4KHBsYXlpbmdJdGVtKTtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0SW5kZXggPiBwbGF5aW5nSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBqdW1wSW5kZXggPSBjLnNjaGVkdWxlLmZpbmRKdW1wUmVzdHJpY3RlZEluZGV4KHBsYXlpbmdJbmRleCArIDEsIHRhcmdldEluZGV4KTtcbiAgICAgICAgICAgICAgICAgIGlmIChqdW1wSW5kZXggPiBwbGF5aW5nSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgYy5zZXRTY2hlZHVsZVBvc2l0aW9uKGp1bXBJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGFzc2V0SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRJc1ByaW1hcnkpIHtcbiAgICAgICAgICAgICAgICAgIGMudGltZWxpbmVQb3MgPSBfc2Vla1RvVGltZTtcbiAgICAgICAgICAgICAgICAgIGMuY2hlY2tCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIF90YXJnZXRJdGVtJGV2ZW50O1xuICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0TGlzdCA9IHRhcmdldEl0ZW0gPT0gbnVsbCA/IHZvaWQgMCA6IChfdGFyZ2V0SXRlbSRldmVudCA9IHRhcmdldEl0ZW0uZXZlbnQpID09IG51bGwgPyB2b2lkIDAgOiBfdGFyZ2V0SXRlbSRldmVudC5hc3NldExpc3Q7XG4gICAgICAgICAgICAgICAgICBpZiAoYXNzZXRMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudFRpbWUgPSB0aW1lIC0gKHRhcmdldEl0ZW1bdGltZWxpbmVUeXBlXSB8fCB0YXJnZXRJdGVtKS5zdGFydDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGFzc2V0TGlzdC5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZXQgPSBhc3NldExpc3RbaV07XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2V0LmR1cmF0aW9uICYmIGV2ZW50VGltZSA+PSBhc3NldC5zdGFydE9mZnNldCAmJiBldmVudFRpbWUgPCBhc3NldC5zdGFydE9mZnNldCArIGFzc2V0LmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NldEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjLnNldFNjaGVkdWxlUG9zaXRpb24odGFyZ2V0SW5kZXgsIGFzc2V0SW5kZXgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgZ2V0QWN0aXZlSW50ZXJzdGl0aWFsID0gZnVuY3Rpb24gZ2V0QWN0aXZlSW50ZXJzdGl0aWFsKCkge1xuICAgICAgICAgICAgdmFyIHBsYXlpbmdJdGVtID0gYy5lZmZlY3RpdmVQbGF5aW5nSXRlbTtcbiAgICAgICAgICAgIGlmIChjLmlzSW50ZXJzdGl0aWFsKHBsYXlpbmdJdGVtKSkge1xuICAgICAgICAgICAgICByZXR1cm4gcGxheWluZ0l0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYnVmZmVyaW5nSXRlbSA9IGVmZmVjdGl2ZUJ1ZmZlcmluZ0l0ZW0oKTtcbiAgICAgICAgICAgIGlmIChjLmlzSW50ZXJzdGl0aWFsKGJ1ZmZlcmluZ0l0ZW0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBidWZmZXJpbmdJdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgaW50ZXJzdGl0aWFsUGxheWVyID0ge1xuICAgICAgICAgICAgZ2V0IGN1cnJlbnRUaW1lKCkge1xuICAgICAgICAgICAgICB2YXIgaW50ZXJzdGl0aWFsSXRlbSA9IGdldEFjdGl2ZUludGVyc3RpdGlhbCgpO1xuICAgICAgICAgICAgICB2YXIgcGxheWluZ0l0ZW0gPSBjLmVmZmVjdGl2ZVBsYXlpbmdJdGVtO1xuICAgICAgICAgICAgICBpZiAocGxheWluZ0l0ZW0gJiYgcGxheWluZ0l0ZW0gPT09IGludGVyc3RpdGlhbEl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFwcGVkVGltZShwbGF5aW5nSXRlbSwgJ3BsYXlvdXQnLCBjLmVmZmVjdGl2ZVBsYXlpbmdBc3NldCwgJ3RpbWVsaW5lUG9zJywgJ2N1cnJlbnRUaW1lJykgLSBwbGF5aW5nSXRlbS5wbGF5b3V0LnN0YXJ0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCBjdXJyZW50VGltZSh0aW1lKSB7XG4gICAgICAgICAgICAgIHZhciBpbnRlcnN0aXRpYWxJdGVtID0gZ2V0QWN0aXZlSW50ZXJzdGl0aWFsKCk7XG4gICAgICAgICAgICAgIHZhciBwbGF5aW5nSXRlbSA9IGMuZWZmZWN0aXZlUGxheWluZ0l0ZW07XG4gICAgICAgICAgICAgIGlmIChwbGF5aW5nSXRlbSAmJiBwbGF5aW5nSXRlbSA9PT0gaW50ZXJzdGl0aWFsSXRlbSkge1xuICAgICAgICAgICAgICAgIHNlZWtUbyh0aW1lICsgcGxheWluZ0l0ZW0ucGxheW91dC5zdGFydCwgJ3BsYXlvdXQnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBkdXJhdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIGludGVyc3RpdGlhbEl0ZW0gPSBnZXRBY3RpdmVJbnRlcnN0aXRpYWwoKTtcbiAgICAgICAgICAgICAgaWYgKGludGVyc3RpdGlhbEl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW50ZXJzdGl0aWFsSXRlbS5wbGF5b3V0LmVuZCAtIGludGVyc3RpdGlhbEl0ZW0ucGxheW91dC5zdGFydDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgYXNzZXRQbGF5ZXJzKCkge1xuICAgICAgICAgICAgICB2YXIgX2dldEFjdGl2ZUludGVyc3RpdGlhO1xuICAgICAgICAgICAgICB2YXIgYXNzZXRMaXN0ID0gKF9nZXRBY3RpdmVJbnRlcnN0aXRpYSA9IGdldEFjdGl2ZUludGVyc3RpdGlhbCgpKSA9PSBudWxsID8gdm9pZCAwIDogX2dldEFjdGl2ZUludGVyc3RpdGlhLmV2ZW50LmFzc2V0TGlzdDtcbiAgICAgICAgICAgICAgaWYgKGFzc2V0TGlzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhc3NldExpc3QubWFwKGZ1bmN0aW9uIChhc3NldCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuZ2V0QXNzZXRQbGF5ZXIoYXNzZXQuaWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBwbGF5aW5nSW5kZXgoKSB7XG4gICAgICAgICAgICAgIHZhciBfZ2V0QWN0aXZlSW50ZXJzdGl0aWEyO1xuICAgICAgICAgICAgICB2YXIgaW50ZXJzdGl0aWFsID0gKF9nZXRBY3RpdmVJbnRlcnN0aXRpYTIgPSBnZXRBY3RpdmVJbnRlcnN0aXRpYWwoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9nZXRBY3RpdmVJbnRlcnN0aXRpYTIuZXZlbnQ7XG4gICAgICAgICAgICAgIGlmIChpbnRlcnN0aXRpYWwgJiYgYy5lZmZlY3RpdmVQbGF5aW5nQXNzZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW50ZXJzdGl0aWFsLmZpbmRBc3NldEluZGV4KGMuZWZmZWN0aXZlUGxheWluZ0Fzc2V0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IHNjaGVkdWxlSXRlbSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdldEFjdGl2ZUludGVyc3RpdGlhbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy5tYW5hZ2VyID0ge1xuICAgICAgICAgICAgZ2V0IGV2ZW50cygpIHtcbiAgICAgICAgICAgICAgdmFyIF9jJHNjaGVkdWxlLCBfYyRzY2hlZHVsZSRldmVudHM7XG4gICAgICAgICAgICAgIHJldHVybiAoKF9jJHNjaGVkdWxlID0gYy5zY2hlZHVsZSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfYyRzY2hlZHVsZSRldmVudHMgPSBfYyRzY2hlZHVsZS5ldmVudHMpID09IG51bGwgPyB2b2lkIDAgOiBfYyRzY2hlZHVsZSRldmVudHMuc2xpY2UoMCkpIHx8IFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBzY2hlZHVsZSgpIHtcbiAgICAgICAgICAgICAgdmFyIF9jJHNjaGVkdWxlMiwgX2Mkc2NoZWR1bGUyJGl0ZW1zO1xuICAgICAgICAgICAgICByZXR1cm4gKChfYyRzY2hlZHVsZTIgPSBjLnNjaGVkdWxlKSA9PSBudWxsID8gdm9pZCAwIDogKF9jJHNjaGVkdWxlMiRpdGVtcyA9IF9jJHNjaGVkdWxlMi5pdGVtcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jJHNjaGVkdWxlMiRpdGVtcy5zbGljZSgwKSkgfHwgW107XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IGludGVyc3RpdGlhbFBsYXllcigpIHtcbiAgICAgICAgICAgICAgaWYgKGdldEFjdGl2ZUludGVyc3RpdGlhbCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGludGVyc3RpdGlhbFBsYXllcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgcGxheWVyUXVldWUoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjLnBsYXllclF1ZXVlLnNsaWNlKDApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBidWZmZXJpbmdBc3NldCgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGMuYnVmZmVyaW5nQXNzZXQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IGJ1ZmZlcmluZ0l0ZW0oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlZmZlY3RpdmVCdWZmZXJpbmdJdGVtKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IGJ1ZmZlcmluZ0luZGV4KCkge1xuICAgICAgICAgICAgICB2YXIgaXRlbSA9IGVmZmVjdGl2ZUJ1ZmZlcmluZ0l0ZW0oKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGMuZmluZEl0ZW1JbmRleChpdGVtKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgcGxheWluZ0Fzc2V0KCkge1xuICAgICAgICAgICAgICByZXR1cm4gYy5lZmZlY3RpdmVQbGF5aW5nQXNzZXQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IHBsYXlpbmdJdGVtKCkge1xuICAgICAgICAgICAgICByZXR1cm4gYy5lZmZlY3RpdmVQbGF5aW5nSXRlbTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgcGxheWluZ0luZGV4KCkge1xuICAgICAgICAgICAgICB2YXIgaXRlbSA9IGMuZWZmZWN0aXZlUGxheWluZ0l0ZW07XG4gICAgICAgICAgICAgIHJldHVybiBjLmZpbmRJdGVtSW5kZXgoaXRlbSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJpbWFyeToge1xuICAgICAgICAgICAgICBnZXQgYnVmZmVyZWRFbmQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1ZmZlcmVkRW5kKCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGdldCBjdXJyZW50VGltZSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVQb3MgPSBjLnRpbWVsaW5lUG9zO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aW1lbGluZVBvcyA+IDAgPyB0aW1lbGluZVBvcyA6IDA7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHNldCBjdXJyZW50VGltZSh0aW1lKSB7XG4gICAgICAgICAgICAgICAgc2Vla1RvKHRpbWUsICdwcmltYXJ5Jyk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGdldCBkdXJhdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFwcGVkRHVyYXRpb24oJ3ByaW1hcnknKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZ2V0IHNlZWthYmxlU3RhcnQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9jJHByaW1hcnlEZXRhaWxzMjtcbiAgICAgICAgICAgICAgICByZXR1cm4gKChfYyRwcmltYXJ5RGV0YWlsczIgPSBjLnByaW1hcnlEZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX2MkcHJpbWFyeURldGFpbHMyLmZyYWdtZW50U3RhcnQpIHx8IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnRlZ3JhdGVkOiB7XG4gICAgICAgICAgICAgIGdldCBidWZmZXJlZEVuZCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFwcGVkVGltZShlZmZlY3RpdmVCdWZmZXJpbmdJdGVtKCksICdpbnRlZ3JhdGVkJywgYy5idWZmZXJpbmdBc3NldCwgJ2J1ZmZlcmVkUG9zJywgJ2J1ZmZlcmVkRW5kJyk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGdldCBjdXJyZW50VGltZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFwcGVkVGltZShjLmVmZmVjdGl2ZVBsYXlpbmdJdGVtLCAnaW50ZWdyYXRlZCcsIGMuZWZmZWN0aXZlUGxheWluZ0Fzc2V0LCAndGltZWxpbmVQb3MnLCAnY3VycmVudFRpbWUnKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc2V0IGN1cnJlbnRUaW1lKHRpbWUpIHtcbiAgICAgICAgICAgICAgICBzZWVrVG8odGltZSwgJ2ludGVncmF0ZWQnKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZ2V0IGR1cmF0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRNYXBwZWREdXJhdGlvbignaW50ZWdyYXRlZCcpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBnZXQgc2Vla2FibGVTdGFydCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2MkcHJpbWFyeURldGFpbHMzO1xuICAgICAgICAgICAgICAgIHJldHVybiBmaW5kTWFwcGVkVGltZSgoKF9jJHByaW1hcnlEZXRhaWxzMyA9IGMucHJpbWFyeURldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfYyRwcmltYXJ5RGV0YWlsczMuZnJhZ21lbnRTdGFydCkgfHwgMCwgJ2ludGVncmF0ZWQnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNraXA6IGZ1bmN0aW9uIHNraXAoKSB7XG4gICAgICAgICAgICAgIHZhciBpdGVtID0gYy5lZmZlY3RpdmVQbGF5aW5nSXRlbTtcbiAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gaXRlbSA9PSBudWxsID8gdm9pZCAwIDogaXRlbS5ldmVudDtcbiAgICAgICAgICAgICAgaWYgKGV2ZW50ICYmICFldmVudC5yZXN0cmljdGlvbnMuc2tpcCkge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGMuZmluZEl0ZW1JbmRleChpdGVtKTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBpdGVtLnBsYXlvdXQuc3RhcnQgKyBpdGVtLmV2ZW50LmR1cmF0aW9uO1xuICAgICAgICAgICAgICAgICAgc2Vla1RvKHRpbWUgKyAwLjAwMSwgJ3BsYXlvdXQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgYy5hZHZhbmNlQWZ0ZXJBc3NldEVuZGVkKGV2ZW50LCBpbmRleCwgSW5maW5pdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlcjtcbiAgICAgIH1cblxuICAgICAgLy8gU2NoZWR1bGUgZ2V0dGVyc1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJlZmZlY3RpdmVQbGF5aW5nSXRlbVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndhaXRpbmdJdGVtIHx8IHRoaXMucGxheWluZ0l0ZW0gfHwgdGhpcy5lbmRlZEl0ZW07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVmZmVjdGl2ZVBsYXlpbmdBc3NldFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYXlpbmdBc3NldCB8fCB0aGlzLmVuZGVkQXNzZXQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBsYXlpbmdMYXN0SXRlbVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfdGhpcyRzY2hlZHVsZTtcbiAgICAgICAgdmFyIHBsYXlpbmdJdGVtID0gdGhpcy5wbGF5aW5nSXRlbTtcbiAgICAgICAgdmFyIGl0ZW1zID0gKF90aGlzJHNjaGVkdWxlID0gdGhpcy5zY2hlZHVsZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHNjaGVkdWxlLml0ZW1zO1xuICAgICAgICBpZiAoIXRoaXMucGxheWJhY2tTdGFydGVkIHx8ICFwbGF5aW5nSXRlbSB8fCAhaXRlbXMpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmluZEl0ZW1JbmRleChwbGF5aW5nSXRlbSkgPT09IGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBsYXliYWNrU3RhcnRlZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVmZmVjdGl2ZVBsYXlpbmdJdGVtICE9PSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBNZWRpYSBnZXR0ZXJzIGFuZCBldmVudCBjYWxsYmFja3NcbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY3VycmVudFRpbWVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMkYnVmZmVyaW5nSXRlbTIsIF90aGlzJGJ1ZmZlcmluZ0l0ZW0yJCwgX21lZGlhMztcbiAgICAgICAgaWYgKHRoaXMubWVkaWFTZWxlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBEbyBub3QgYWR2YW5jZSBiZWZvcmUgc2NoZWR1bGUgaXMga25vd25cbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIElnbm9yZSBjdXJyZW50VGltZSB3aGVuIGRldGFjaGVkIGZvciBJbnRlcnN0aXRpYWwgcGxheWJhY2sgd2l0aCBzb3VyY2UgcmVzZXRcbiAgICAgICAgdmFyIHF1ZXVlZEZvclBsYXliYWNrID0gdGhpcy53YWl0aW5nSXRlbSB8fCB0aGlzLnBsYXlpbmdJdGVtO1xuICAgICAgICBpZiAodGhpcy5pc0ludGVyc3RpdGlhbChxdWV1ZWRGb3JQbGF5YmFjaykgJiYgIXF1ZXVlZEZvclBsYXliYWNrLmV2ZW50LmFwcGVuZEluUGxhY2UpIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgICAgIGlmICghbWVkaWEgJiYgKF90aGlzJGJ1ZmZlcmluZ0l0ZW0yID0gdGhpcy5idWZmZXJpbmdJdGVtKSAhPSBudWxsICYmIChfdGhpcyRidWZmZXJpbmdJdGVtMiQgPSBfdGhpcyRidWZmZXJpbmdJdGVtMi5ldmVudCkgIT0gbnVsbCAmJiBfdGhpcyRidWZmZXJpbmdJdGVtMiQuYXBwZW5kSW5QbGFjZSkge1xuICAgICAgICAgIC8vIE9ic2VydmUgZGV0YWNoZWQgbWVkaWEgY3VycmVudFRpbWUgd2hlbiBhcHBlbmRpbmcgaW4gcGxhY2VcbiAgICAgICAgICBtZWRpYSA9IHRoaXMucHJpbWFyeU1lZGlhO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJyZW50VGltZSA9IChfbWVkaWEzID0gbWVkaWEpID09IG51bGwgPyB2b2lkIDAgOiBfbWVkaWEzLmN1cnJlbnRUaW1lO1xuICAgICAgICBpZiAoY3VycmVudFRpbWUgPT09IHVuZGVmaW5lZCB8fCAhaXNGaW5pdGVOdW1iZXIoY3VycmVudFRpbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudFRpbWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInByaW1hcnlNZWRpYVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfdGhpcyRkZXRhY2hlZERhdGE1O1xuICAgICAgICByZXR1cm4gdGhpcy5tZWRpYSB8fCAoKF90aGlzJGRldGFjaGVkRGF0YTUgPSB0aGlzLmRldGFjaGVkRGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGRldGFjaGVkRGF0YTUubWVkaWEpIHx8IG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBsYXliYWNrRGlzYWJsZWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5obHMuY29uZmlnLmVuYWJsZUludGVyc3RpdGlhbFBsYXliYWNrID09PSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicHJpbWFyeURldGFpbHNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMkbWVkaWFTZWxlY3Rpb24sIF90aGlzJG1lZGlhU2VsZWN0aW9uJDtcbiAgICAgICAgcmV0dXJuIChfdGhpcyRtZWRpYVNlbGVjdGlvbiA9IHRoaXMubWVkaWFTZWxlY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiAoX3RoaXMkbWVkaWFTZWxlY3Rpb24kID0gX3RoaXMkbWVkaWFTZWxlY3Rpb24ubWFpbikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG1lZGlhU2VsZWN0aW9uJC5kZXRhaWxzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwcmltYXJ5TGl2ZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcmltYXJ5RGV0YWlscztcbiAgICAgICAgcmV0dXJuICEhKChfdGhpcyRwcmltYXJ5RGV0YWlscyA9IHRoaXMucHJpbWFyeURldGFpbHMpICE9IG51bGwgJiYgX3RoaXMkcHJpbWFyeURldGFpbHMubGl2ZSk7XG4gICAgICB9XG4gICAgfV0pO1xuICB9KExvZ2dlcik7XG5cbiAgdmFyIFRJQ0tfSU5URVJWQUwkMiA9IDUwMDsgLy8gaG93IG9mdGVuIHRvIHRpY2sgaW4gbXNcblxuICB2YXIgU3VidGl0bGVTdHJlYW1Db250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVN0cmVhbUNvbnRyb2xsZXIpIHtcbiAgICBmdW5jdGlvbiBTdWJ0aXRsZVN0cmVhbUNvbnRyb2xsZXIoaGxzLCBmcmFnbWVudFRyYWNrZXIsIGtleUxvYWRlcikge1xuICAgICAgdmFyIF90aGlzO1xuICAgICAgX3RoaXMgPSBfQmFzZVN0cmVhbUNvbnRyb2xsZXIuY2FsbCh0aGlzLCBobHMsIGZyYWdtZW50VHJhY2tlciwga2V5TG9hZGVyLCAnc3VidGl0bGUtc3RyZWFtLWNvbnRyb2xsZXInLCBQbGF5bGlzdExldmVsVHlwZS5TVUJUSVRMRSkgfHwgdGhpcztcbiAgICAgIF90aGlzLmN1cnJlbnRUcmFja0lkID0gLTE7XG4gICAgICBfdGhpcy50cmFja3NCdWZmZXJlZCA9IFtdO1xuICAgICAgX3RoaXMubWFpbkRldGFpbHMgPSBudWxsO1xuICAgICAgX3RoaXMucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgX2luaGVyaXRzTG9vc2UoU3VidGl0bGVTdHJlYW1Db250cm9sbGVyLCBfQmFzZVN0cmVhbUNvbnRyb2xsZXIpO1xuICAgIHZhciBfcHJvdG8gPSBTdWJ0aXRsZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5vbkhhbmRsZXJEZXN0cm95aW5nID0gZnVuY3Rpb24gb25IYW5kbGVyRGVzdHJveWluZygpIHtcbiAgICAgIHRoaXMudW5yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgICAgX0Jhc2VTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5vbkhhbmRsZXJEZXN0cm95aW5nLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLm1haW5EZXRhaWxzID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgX0Jhc2VTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5yZWdpc3Rlckxpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9uKEV2ZW50cy5MRVZFTF9MT0FERUQsIHRoaXMub25MZXZlbExvYWRlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLlNVQlRJVExFX1RSQUNLU19VUERBVEVELCB0aGlzLm9uU3VidGl0bGVUcmFja3NVcGRhdGVkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuU1VCVElUTEVfVFJBQ0tfU1dJVENILCB0aGlzLm9uU3VidGl0bGVUcmFja1N3aXRjaCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLlNVQlRJVExFX1RSQUNLX0xPQURFRCwgdGhpcy5vblN1YnRpdGxlVHJhY2tMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5TVUJUSVRMRV9GUkFHX1BST0NFU1NFRCwgdGhpcy5vblN1YnRpdGxlRnJhZ1Byb2Nlc3NlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkJVRkZFUl9GTFVTSElORywgdGhpcy5vbkJ1ZmZlckZsdXNoaW5nLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by51bnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUudW5yZWdpc3Rlckxpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9mZihFdmVudHMuTEVWRUxfTE9BREVELCB0aGlzLm9uTGV2ZWxMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuU1VCVElUTEVfVFJBQ0tTX1VQREFURUQsIHRoaXMub25TdWJ0aXRsZVRyYWNrc1VwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuU1VCVElUTEVfVFJBQ0tfU1dJVENILCB0aGlzLm9uU3VidGl0bGVUcmFja1N3aXRjaCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5TVUJUSVRMRV9UUkFDS19MT0FERUQsIHRoaXMub25TdWJ0aXRsZVRyYWNrTG9hZGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLlNVQlRJVExFX0ZSQUdfUFJPQ0VTU0VELCB0aGlzLm9uU3VidGl0bGVGcmFnUHJvY2Vzc2VkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkJVRkZFUl9GTFVTSElORywgdGhpcy5vbkJ1ZmZlckZsdXNoaW5nLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by5zdGFydExvYWQgPSBmdW5jdGlvbiBzdGFydExvYWQoc3RhcnRQb3NpdGlvbiwgc2tpcFNlZWtUb1N0YXJ0UG9zaXRpb24pIHtcbiAgICAgIHRoaXMuc3RvcExvYWQoKTtcbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgdGhpcy5zZXRJbnRlcnZhbChUSUNLX0lOVEVSVkFMJDIpO1xuICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gdGhpcy5sYXN0Q3VycmVudFRpbWUgPSBzdGFydFBvc2l0aW9uICsgdGhpcy50aW1lbGluZU9mZnNldDtcbiAgICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IHNraXBTZWVrVG9TdGFydFBvc2l0aW9uID8gLTEgOiBzdGFydFBvc2l0aW9uO1xuICAgICAgdGhpcy50aWNrKCk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NYW5pZmVzdExvYWRpbmcgPSBmdW5jdGlvbiBvbk1hbmlmZXN0TG9hZGluZygpIHtcbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUub25NYW5pZmVzdExvYWRpbmcuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMubWFpbkRldGFpbHMgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTWVkaWFEZXRhY2hpbmcgPSBmdW5jdGlvbiBvbk1lZGlhRGV0YWNoaW5nKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLnRyYWNrc0J1ZmZlcmVkID0gW107XG4gICAgICBfQmFzZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLm9uTWVkaWFEZXRhY2hpbmcuY2FsbCh0aGlzLCBldmVudCwgZGF0YSk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25MZXZlbExvYWRlZCA9IGZ1bmN0aW9uIG9uTGV2ZWxMb2FkZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMubWFpbkRldGFpbHMgPSBkYXRhLmRldGFpbHM7XG4gICAgfTtcbiAgICBfcHJvdG8ub25TdWJ0aXRsZUZyYWdQcm9jZXNzZWQgPSBmdW5jdGlvbiBvblN1YnRpdGxlRnJhZ1Byb2Nlc3NlZChldmVudCwgZGF0YSkge1xuICAgICAgdmFyIGZyYWcgPSBkYXRhLmZyYWcsXG4gICAgICAgIHN1Y2Nlc3MgPSBkYXRhLnN1Y2Nlc3M7XG4gICAgICBpZiAoaXNNZWRpYUZyYWdtZW50KGZyYWcpKSB7XG4gICAgICAgIHRoaXMuZnJhZ1ByZXZpb3VzID0gZnJhZztcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBidWZmZXJlZCA9IHRoaXMudHJhY2tzQnVmZmVyZWRbdGhpcy5jdXJyZW50VHJhY2tJZF07XG4gICAgICBpZiAoIWJ1ZmZlcmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlL3VwZGF0ZSBhIGJ1ZmZlcmVkIGFycmF5IG1hdGNoaW5nIHRoZSBpbnRlcmZhY2UgdXNlZCBieSBCdWZmZXJIZWxwZXIuYnVmZmVyZWRJbmZvXG4gICAgICAvLyBzbyB3ZSBjYW4gcmUtdXNlIHRoZSBsb2dpYyB1c2VkIHRvIGRldGVjdCBob3cgbXVjaCBoYXMgYmVlbiBidWZmZXJlZFxuICAgICAgdmFyIHRpbWVSYW5nZTtcbiAgICAgIHZhciBmcmFnU3RhcnQgPSBmcmFnLnN0YXJ0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZnJhZ1N0YXJ0ID49IGJ1ZmZlcmVkW2ldLnN0YXJ0ICYmIGZyYWdTdGFydCA8PSBidWZmZXJlZFtpXS5lbmQpIHtcbiAgICAgICAgICB0aW1lUmFuZ2UgPSBidWZmZXJlZFtpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGZyYWdFbmQgPSBmcmFnLnN0YXJ0ICsgZnJhZy5kdXJhdGlvbjtcbiAgICAgIGlmICh0aW1lUmFuZ2UpIHtcbiAgICAgICAgdGltZVJhbmdlLmVuZCA9IGZyYWdFbmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lUmFuZ2UgPSB7XG4gICAgICAgICAgc3RhcnQ6IGZyYWdTdGFydCxcbiAgICAgICAgICBlbmQ6IGZyYWdFbmRcbiAgICAgICAgfTtcbiAgICAgICAgYnVmZmVyZWQucHVzaCh0aW1lUmFuZ2UpO1xuICAgICAgfVxuICAgICAgdGhpcy5mcmFnbWVudFRyYWNrZXIuZnJhZ0J1ZmZlcmVkKGZyYWcpO1xuICAgICAgdGhpcy5mcmFnQnVmZmVyZWRDb21wbGV0ZShmcmFnLCBudWxsKTtcbiAgICAgIGlmICh0aGlzLm1lZGlhKSB7XG4gICAgICAgIHRoaXMudGljaygpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uQnVmZmVyRmx1c2hpbmcgPSBmdW5jdGlvbiBvbkJ1ZmZlckZsdXNoaW5nKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgc3RhcnRPZmZzZXQgPSBkYXRhLnN0YXJ0T2Zmc2V0LFxuICAgICAgICBlbmRPZmZzZXQgPSBkYXRhLmVuZE9mZnNldDtcbiAgICAgIGlmIChzdGFydE9mZnNldCA9PT0gMCAmJiBlbmRPZmZzZXQgIT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkge1xuICAgICAgICB2YXIgZW5kT2Zmc2V0U3VidGl0bGVzID0gZW5kT2Zmc2V0IC0gMTtcbiAgICAgICAgaWYgKGVuZE9mZnNldFN1YnRpdGxlcyA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuZW5kT2Zmc2V0U3VidGl0bGVzID0gTWF0aC5tYXgoMCwgZW5kT2Zmc2V0U3VidGl0bGVzKTtcbiAgICAgICAgdGhpcy50cmFja3NCdWZmZXJlZC5mb3JFYWNoKGZ1bmN0aW9uIChidWZmZXJlZCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyZWQubGVuZ3RoOykge1xuICAgICAgICAgICAgaWYgKGJ1ZmZlcmVkW2ldLmVuZCA8PSBlbmRPZmZzZXRTdWJ0aXRsZXMpIHtcbiAgICAgICAgICAgICAgYnVmZmVyZWQuc2hpZnQoKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlcmVkW2ldLnN0YXJ0IDwgZW5kT2Zmc2V0U3VidGl0bGVzKSB7XG4gICAgICAgICAgICAgIGJ1ZmZlcmVkW2ldLnN0YXJ0ID0gZW5kT2Zmc2V0U3VidGl0bGVzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5mcmFnbWVudFRyYWNrZXIucmVtb3ZlRnJhZ21lbnRzSW5SYW5nZShzdGFydE9mZnNldCwgZW5kT2Zmc2V0U3VidGl0bGVzLCBQbGF5bGlzdExldmVsVHlwZS5TVUJUSVRMRSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgc29tZXRoaW5nIGdvZXMgd3JvbmcsIHByb2NlZWQgdG8gbmV4dCBmcmFnLCBpZiB3ZSB3ZXJlIHByb2Nlc3Npbmcgb25lLlxuICAgIDtcbiAgICBfcHJvdG8ub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnO1xuICAgICAgaWYgKChmcmFnID09IG51bGwgPyB2b2lkIDAgOiBmcmFnLnR5cGUpID09PSBQbGF5bGlzdExldmVsVHlwZS5TVUJUSVRMRSkge1xuICAgICAgICBpZiAoZGF0YS5kZXRhaWxzID09PSBFcnJvckRldGFpbHMuRlJBR19HQVApIHtcbiAgICAgICAgICB0aGlzLmZyYWdtZW50VHJhY2tlci5mcmFnQnVmZmVyZWQoZnJhZywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZnJhZ0N1cnJlbnQpIHtcbiAgICAgICAgICB0aGlzLmZyYWdDdXJyZW50LmFib3J0UmVxdWVzdHMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU3RhdGUuU1RPUFBFRCkge1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gR290IGFsbCBuZXcgc3VidGl0bGUgbGV2ZWxzLlxuICAgIDtcbiAgICBfcHJvdG8ub25TdWJ0aXRsZVRyYWNrc1VwZGF0ZWQgPSBmdW5jdGlvbiBvblN1YnRpdGxlVHJhY2tzVXBkYXRlZChldmVudCwgX3JlZikge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICB2YXIgc3VidGl0bGVUcmFja3MgPSBfcmVmLnN1YnRpdGxlVHJhY2tzO1xuICAgICAgaWYgKHRoaXMubGV2ZWxzICYmIHN1YnRpdGxlT3B0aW9uc0lkZW50aWNhbCh0aGlzLmxldmVscywgc3VidGl0bGVUcmFja3MpKSB7XG4gICAgICAgIHRoaXMubGV2ZWxzID0gc3VidGl0bGVUcmFja3MubWFwKGZ1bmN0aW9uIChtZWRpYVBsYXlsaXN0KSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMZXZlbChtZWRpYVBsYXlsaXN0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMudHJhY2tzQnVmZmVyZWQgPSBbXTtcbiAgICAgIHRoaXMubGV2ZWxzID0gc3VidGl0bGVUcmFja3MubWFwKGZ1bmN0aW9uIChtZWRpYVBsYXlsaXN0KSB7XG4gICAgICAgIHZhciBsZXZlbCA9IG5ldyBMZXZlbChtZWRpYVBsYXlsaXN0KTtcbiAgICAgICAgX3RoaXMyLnRyYWNrc0J1ZmZlcmVkW2xldmVsLmlkXSA9IFtdO1xuICAgICAgICByZXR1cm4gbGV2ZWw7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLnJlbW92ZUZyYWdtZW50c0luUmFuZ2UoMCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBQbGF5bGlzdExldmVsVHlwZS5TVUJUSVRMRSk7XG4gICAgICB0aGlzLmZyYWdQcmV2aW91cyA9IG51bGw7XG4gICAgICB0aGlzLm1lZGlhQnVmZmVyID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5vblN1YnRpdGxlVHJhY2tTd2l0Y2ggPSBmdW5jdGlvbiBvblN1YnRpdGxlVHJhY2tTd2l0Y2goZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfdGhpcyRsZXZlbHM7XG4gICAgICB0aGlzLmN1cnJlbnRUcmFja0lkID0gZGF0YS5pZDtcbiAgICAgIGlmICghKChfdGhpcyRsZXZlbHMgPSB0aGlzLmxldmVscykgIT0gbnVsbCAmJiBfdGhpcyRsZXZlbHMubGVuZ3RoKSB8fCB0aGlzLmN1cnJlbnRUcmFja0lkID09PSAtMSkge1xuICAgICAgICB0aGlzLmNsZWFySW50ZXJ2YWwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiB0cmFjayBoYXMgdGhlIG5lY2Vzc2FyeSBkZXRhaWxzIHRvIGxvYWQgZnJhZ21lbnRzXG4gICAgICB2YXIgY3VycmVudFRyYWNrID0gdGhpcy5sZXZlbHNbdGhpcy5jdXJyZW50VHJhY2tJZF07XG4gICAgICBpZiAoY3VycmVudFRyYWNrICE9IG51bGwgJiYgY3VycmVudFRyYWNrLmRldGFpbHMpIHtcbiAgICAgICAgdGhpcy5tZWRpYUJ1ZmZlciA9IHRoaXMubWVkaWFCdWZmZXJUaW1lUmFuZ2VzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tZWRpYUJ1ZmZlciA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFRyYWNrICYmIHRoaXMuc3RhdGUgIT09IFN0YXRlLlNUT1BQRUQpIHtcbiAgICAgICAgdGhpcy5zZXRJbnRlcnZhbChUSUNLX0lOVEVSVkFMJDIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdvdCBhIG5ldyBzZXQgb2Ygc3VidGl0bGUgZnJhZ21lbnRzLlxuICAgIDtcbiAgICBfcHJvdG8ub25TdWJ0aXRsZVRyYWNrTG9hZGVkID0gZnVuY3Rpb24gb25TdWJ0aXRsZVRyYWNrTG9hZGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgX3RyYWNrJGRldGFpbHM7XG4gICAgICB2YXIgY3VycmVudFRyYWNrSWQgPSB0aGlzLmN1cnJlbnRUcmFja0lkLFxuICAgICAgICBsZXZlbHMgPSB0aGlzLmxldmVscztcbiAgICAgIHZhciBuZXdEZXRhaWxzID0gZGF0YS5kZXRhaWxzLFxuICAgICAgICB0cmFja0lkID0gZGF0YS5pZDtcbiAgICAgIGlmICghbGV2ZWxzKSB7XG4gICAgICAgIHRoaXMud2FybihcIlN1YnRpdGxlIHRyYWNrcyB3ZXJlIHJlc2V0IHdoaWxlIGxvYWRpbmcgbGV2ZWwgXCIgKyB0cmFja0lkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHRyYWNrID0gbGV2ZWxzW3RyYWNrSWRdO1xuICAgICAgaWYgKHRyYWNrSWQgPj0gbGV2ZWxzLmxlbmd0aCB8fCAhdHJhY2spIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2coXCJTdWJ0aXRsZSB0cmFjayBcIiArIHRyYWNrSWQgKyBcIiBsb2FkZWQgW1wiICsgbmV3RGV0YWlscy5zdGFydFNOICsgXCIsXCIgKyBuZXdEZXRhaWxzLmVuZFNOICsgXCJdXCIgKyAobmV3RGV0YWlscy5sYXN0UGFydFNuID8gXCJbcGFydC1cIiArIG5ld0RldGFpbHMubGFzdFBhcnRTbiArIFwiLVwiICsgbmV3RGV0YWlscy5sYXN0UGFydEluZGV4ICsgXCJdXCIgOiAnJykgKyBcIixkdXJhdGlvbjpcIiArIG5ld0RldGFpbHMudG90YWxkdXJhdGlvbik7XG4gICAgICB0aGlzLm1lZGlhQnVmZmVyID0gdGhpcy5tZWRpYUJ1ZmZlclRpbWVSYW5nZXM7XG4gICAgICB2YXIgc2xpZGluZyA9IDA7XG4gICAgICBpZiAobmV3RGV0YWlscy5saXZlIHx8IChfdHJhY2skZGV0YWlscyA9IHRyYWNrLmRldGFpbHMpICE9IG51bGwgJiYgX3RyYWNrJGRldGFpbHMubGl2ZSkge1xuICAgICAgICB2YXIgbWFpbkRldGFpbHMgPSB0aGlzLm1haW5EZXRhaWxzO1xuICAgICAgICBpZiAobmV3RGV0YWlscy5kZWx0YVVwZGF0ZUZhaWxlZCB8fCAhbWFpbkRldGFpbHMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1haW5TbGlkaW5nU3RhcnRGcmFnbWVudCA9IG1haW5EZXRhaWxzLmZyYWdtZW50c1swXTtcbiAgICAgICAgaWYgKCF0cmFjay5kZXRhaWxzKSB7XG4gICAgICAgICAgaWYgKG5ld0RldGFpbHMuaGFzUHJvZ3JhbURhdGVUaW1lICYmIG1haW5EZXRhaWxzLmhhc1Byb2dyYW1EYXRlVGltZSkge1xuICAgICAgICAgICAgYWxpZ25NZWRpYVBsYXlsaXN0QnlQRFQobmV3RGV0YWlscywgbWFpbkRldGFpbHMpO1xuICAgICAgICAgICAgc2xpZGluZyA9IG5ld0RldGFpbHMuZnJhZ21lbnRTdGFydDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1haW5TbGlkaW5nU3RhcnRGcmFnbWVudCkge1xuICAgICAgICAgICAgLy8gbGluZSB1cCBsaXZlIHBsYXlsaXN0IHdpdGggbWFpbiBzbyB0aGF0IGZyYWdtZW50cyBpbiByYW5nZSBhcmUgbG9hZGVkXG4gICAgICAgICAgICBzbGlkaW5nID0gbWFpblNsaWRpbmdTdGFydEZyYWdtZW50LnN0YXJ0O1xuICAgICAgICAgICAgYWRkU2xpZGluZyhuZXdEZXRhaWxzLCBzbGlkaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF90aGlzJGxldmVsTGFzdExvYWRlZDtcbiAgICAgICAgICBzbGlkaW5nID0gdGhpcy5hbGlnblBsYXlsaXN0cyhuZXdEZXRhaWxzLCB0cmFjay5kZXRhaWxzLCAoX3RoaXMkbGV2ZWxMYXN0TG9hZGVkID0gdGhpcy5sZXZlbExhc3RMb2FkZWQpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRsZXZlbExhc3RMb2FkZWQuZGV0YWlscyk7XG4gICAgICAgICAgaWYgKHNsaWRpbmcgPT09IDAgJiYgbWFpblNsaWRpbmdTdGFydEZyYWdtZW50KSB7XG4gICAgICAgICAgICAvLyByZWFsaWduIHdpdGggbWFpbiB3aGVuIHRoZXJlIGlzIG5vIG92ZXJsYXAgd2l0aCBsYXN0IHJlZnJlc2hcbiAgICAgICAgICAgIHNsaWRpbmcgPSBtYWluU2xpZGluZ1N0YXJ0RnJhZ21lbnQuc3RhcnQ7XG4gICAgICAgICAgICBhZGRTbGlkaW5nKG5ld0RldGFpbHMsIHNsaWRpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdHJhY2suZGV0YWlscyA9IG5ld0RldGFpbHM7XG4gICAgICB0aGlzLmxldmVsTGFzdExvYWRlZCA9IHRyYWNrO1xuICAgICAgaWYgKHRyYWNrSWQgIT09IGN1cnJlbnRUcmFja0lkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLlNVQlRJVExFX1RSQUNLX1VQREFURUQsIHtcbiAgICAgICAgZGV0YWlsczogbmV3RGV0YWlscyxcbiAgICAgICAgaWQ6IHRyYWNrSWQsXG4gICAgICAgIGdyb3VwSWQ6IGRhdGEuZ3JvdXBJZFxuICAgICAgfSk7XG5cbiAgICAgIC8vIHRyaWdnZXIgaGFuZGxlciByaWdodCBub3dcbiAgICAgIHRoaXMudGljaygpO1xuXG4gICAgICAvLyBJZiBwbGF5bGlzdCBpcyBtaXNhbGlnbmVkIGJlY2F1c2Ugb2YgYmFkIFBEVCBvciBkcmlmdCwgZGVsZXRlIGRldGFpbHMgdG8gcmVzeW5jIHdpdGggbWFpbiBvbiByZWxvYWRcbiAgICAgIGlmIChuZXdEZXRhaWxzLmxpdmUgJiYgIXRoaXMuZnJhZ0N1cnJlbnQgJiYgdGhpcy5tZWRpYSAmJiB0aGlzLnN0YXRlID09PSBTdGF0ZS5JRExFKSB7XG4gICAgICAgIHZhciBmb3VuZEZyYWcgPSBmaW5kRnJhZ21lbnRCeVBUUyhudWxsLCBuZXdEZXRhaWxzLmZyYWdtZW50cywgdGhpcy5tZWRpYS5jdXJyZW50VGltZSwgMCk7XG4gICAgICAgIGlmICghZm91bmRGcmFnKSB7XG4gICAgICAgICAgdGhpcy53YXJuKCdTdWJ0aXRsZSBwbGF5bGlzdCBub3QgYWxpZ25lZCB3aXRoIHBsYXliYWNrJyk7XG4gICAgICAgICAgdHJhY2suZGV0YWlscyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLl9oYW5kbGVGcmFnbWVudExvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uIF9oYW5kbGVGcmFnbWVudExvYWRDb21wbGV0ZShmcmFnTG9hZGVkRGF0YSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG4gICAgICB2YXIgZnJhZyA9IGZyYWdMb2FkZWREYXRhLmZyYWcsXG4gICAgICAgIHBheWxvYWQgPSBmcmFnTG9hZGVkRGF0YS5wYXlsb2FkO1xuICAgICAgdmFyIGRlY3J5cHREYXRhID0gZnJhZy5kZWNyeXB0ZGF0YTtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGlmICh0aGlzLmZyYWdDb250ZXh0Q2hhbmdlZChmcmFnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBjaGVjayB0byBzZWUgaWYgdGhlIHBheWxvYWQgbmVlZHMgdG8gYmUgZGVjcnlwdGVkXG4gICAgICBpZiAocGF5bG9hZCAmJiBwYXlsb2FkLmJ5dGVMZW5ndGggPiAwICYmIGRlY3J5cHREYXRhICE9IG51bGwgJiYgZGVjcnlwdERhdGEua2V5ICYmIGRlY3J5cHREYXRhLml2ICYmIGlzRnVsbFNlZ21lbnRFbmNyeXB0aW9uKGRlY3J5cHREYXRhLm1ldGhvZCkpIHtcbiAgICAgICAgdmFyIHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAvLyBkZWNyeXB0IHRoZSBzdWJ0aXRsZXNcbiAgICAgICAgdGhpcy5kZWNyeXB0ZXIuZGVjcnlwdChuZXcgVWludDhBcnJheShwYXlsb2FkKSwgZGVjcnlwdERhdGEua2V5LmJ1ZmZlciwgZGVjcnlwdERhdGEuaXYuYnVmZmVyLCBnZXRBZXNNb2RlRnJvbUZ1bGxTZWdtZW50TWV0aG9kKGRlY3J5cHREYXRhLm1ldGhvZCkpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuRVJST1IsIHtcbiAgICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTUVESUFfRVJST1IsXG4gICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuRlJBR19ERUNSWVBUX0VSUk9SLFxuICAgICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgICAgIHJlYXNvbjogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICBmcmFnOiBmcmFnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkZWNyeXB0ZWREYXRhKSB7XG4gICAgICAgICAgdmFyIGVuZFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuRlJBR19ERUNSWVBURUQsIHtcbiAgICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgICBwYXlsb2FkOiBkZWNyeXB0ZWREYXRhLFxuICAgICAgICAgICAgc3RhdHM6IHtcbiAgICAgICAgICAgICAgdHN0YXJ0OiBzdGFydFRpbWUsXG4gICAgICAgICAgICAgIHRkZWNyeXB0OiBlbmRUaW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBfdGhpczMud2FybihlcnIubmFtZSArIFwiOiBcIiArIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICBfdGhpczMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5kb1RpY2sgPSBmdW5jdGlvbiBkb1RpY2soKSB7XG4gICAgICBpZiAoIXRoaXMubWVkaWEpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5JRExFKSB7XG4gICAgICAgIHZhciBjdXJyZW50VHJhY2tJZCA9IHRoaXMuY3VycmVudFRyYWNrSWQsXG4gICAgICAgICAgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG4gICAgICAgIHZhciB0cmFjayA9IGxldmVscyA9PSBudWxsID8gdm9pZCAwIDogbGV2ZWxzW2N1cnJlbnRUcmFja0lkXTtcbiAgICAgICAgaWYgKCF0cmFjayB8fCAhbGV2ZWxzLmxlbmd0aCB8fCAhdHJhY2suZGV0YWlscykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy53YWl0Rm9yTGl2ZSh0cmFjaykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgICAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLmdldExvYWRQb3NpdGlvbigpO1xuICAgICAgICB2YXIgYnVmZmVyZWRJbmZvID0gQnVmZmVySGVscGVyLmJ1ZmZlcmVkSW5mbyh0aGlzLnRyYWNrc0J1ZmZlcmVkW3RoaXMuY3VycmVudFRyYWNrSWRdIHx8IFtdLCBjdXJyZW50VGltZSwgY29uZmlnLm1heEJ1ZmZlckhvbGUpO1xuICAgICAgICB2YXIgdGFyZ2V0QnVmZmVyVGltZSA9IGJ1ZmZlcmVkSW5mby5lbmQsXG4gICAgICAgICAgYnVmZmVyTGVuID0gYnVmZmVyZWRJbmZvLmxlbjtcbiAgICAgICAgdmFyIHRyYWNrRGV0YWlscyA9IHRyYWNrLmRldGFpbHM7XG4gICAgICAgIHZhciBtYXhCdWZMZW4gPSB0aGlzLmhscy5tYXhCdWZmZXJMZW5ndGggKyB0cmFja0RldGFpbHMubGV2ZWxUYXJnZXREdXJhdGlvbjtcbiAgICAgICAgaWYgKGJ1ZmZlckxlbiA+IG1heEJ1Zkxlbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnJhZ21lbnRzID0gdHJhY2tEZXRhaWxzLmZyYWdtZW50cztcbiAgICAgICAgdmFyIGZyYWdMZW4gPSBmcmFnbWVudHMubGVuZ3RoO1xuICAgICAgICB2YXIgZW5kID0gdHJhY2tEZXRhaWxzLmVkZ2U7XG4gICAgICAgIHZhciBmb3VuZEZyYWcgPSBudWxsO1xuICAgICAgICB2YXIgZnJhZ1ByZXZpb3VzID0gdGhpcy5mcmFnUHJldmlvdXM7XG4gICAgICAgIGlmICh0YXJnZXRCdWZmZXJUaW1lIDwgZW5kKSB7XG4gICAgICAgICAgdmFyIHRvbGVyYW5jZSA9IGNvbmZpZy5tYXhGcmFnTG9va1VwVG9sZXJhbmNlO1xuICAgICAgICAgIHZhciBsb29rdXBUb2xlcmFuY2UgPSB0YXJnZXRCdWZmZXJUaW1lID4gZW5kIC0gdG9sZXJhbmNlID8gMCA6IHRvbGVyYW5jZTtcbiAgICAgICAgICBmb3VuZEZyYWcgPSBmaW5kRnJhZ21lbnRCeVBUUyhmcmFnUHJldmlvdXMsIGZyYWdtZW50cywgTWF0aC5tYXgoZnJhZ21lbnRzWzBdLnN0YXJ0LCB0YXJnZXRCdWZmZXJUaW1lKSwgbG9va3VwVG9sZXJhbmNlKTtcbiAgICAgICAgICBpZiAoIWZvdW5kRnJhZyAmJiBmcmFnUHJldmlvdXMgJiYgZnJhZ1ByZXZpb3VzLnN0YXJ0IDwgZnJhZ21lbnRzWzBdLnN0YXJ0KSB7XG4gICAgICAgICAgICBmb3VuZEZyYWcgPSBmcmFnbWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvdW5kRnJhZyA9IGZyYWdtZW50c1tmcmFnTGVuIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgZm91bmRGcmFnID0gdGhpcy5maWx0ZXJSZXBsYWNlZFByaW1hcnkoZm91bmRGcmFnLCB0cmFjay5kZXRhaWxzKTtcbiAgICAgICAgaWYgKCFmb3VuZEZyYWcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gTG9hZCBlYXJsaWVyIGZyYWdtZW50IGluIHNhbWUgZGlzY29udGludWl0eSB0byBtYWtlIHVwIGZvciBtaXNhbGlnbmVkIHBsYXlsaXN0cyBhbmQgY3VlcyB0aGF0IGV4dGVuZCBiZXlvbmQgZW5kIG9mIHNlZ21lbnRcbiAgICAgICAgdmFyIGN1clNOSWR4ID0gZm91bmRGcmFnLnNuIC0gdHJhY2tEZXRhaWxzLnN0YXJ0U047XG4gICAgICAgIHZhciBwcmV2RnJhZyA9IGZyYWdtZW50c1tjdXJTTklkeCAtIDFdO1xuICAgICAgICBpZiAocHJldkZyYWcgJiYgcHJldkZyYWcuY2MgPT09IGZvdW5kRnJhZy5jYyAmJiB0aGlzLmZyYWdtZW50VHJhY2tlci5nZXRTdGF0ZShwcmV2RnJhZykgPT09IEZyYWdtZW50U3RhdGUuTk9UX0xPQURFRCkge1xuICAgICAgICAgIGZvdW5kRnJhZyA9IHByZXZGcmFnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmZyYWdtZW50VHJhY2tlci5nZXRTdGF0ZShmb3VuZEZyYWcpID09PSBGcmFnbWVudFN0YXRlLk5PVF9MT0FERUQpIHtcbiAgICAgICAgICAvLyBvbmx5IGxvYWQgaWYgZnJhZ21lbnQgaXMgbm90IGxvYWRlZFxuICAgICAgICAgIHZhciBmcmFnVG9Mb2FkID0gdGhpcy5tYXBUb0luaXRGcmFnV2hlblJlcXVpcmVkKGZvdW5kRnJhZyk7XG4gICAgICAgICAgaWYgKGZyYWdUb0xvYWQpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZEZyYWdtZW50KGZyYWdUb0xvYWQsIHRyYWNrLCB0YXJnZXRCdWZmZXJUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5sb2FkRnJhZ21lbnQgPSBmdW5jdGlvbiBsb2FkRnJhZ21lbnQoZnJhZywgbGV2ZWwsIHRhcmdldEJ1ZmZlclRpbWUpIHtcbiAgICAgIGlmICghaXNNZWRpYUZyYWdtZW50KGZyYWcpKSB7XG4gICAgICAgIHRoaXMuX2xvYWRJbml0U2VnbWVudChmcmFnLCBsZXZlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfQmFzZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLmxvYWRGcmFnbWVudC5jYWxsKHRoaXMsIGZyYWcsIGxldmVsLCB0YXJnZXRCdWZmZXJUaW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoU3VidGl0bGVTdHJlYW1Db250cm9sbGVyLCBbe1xuICAgICAga2V5OiBcIm1lZGlhQnVmZmVyVGltZVJhbmdlc1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQnVmZmVyYWJsZUluc3RhbmNlKHRoaXMudHJhY2tzQnVmZmVyZWRbdGhpcy5jdXJyZW50VHJhY2tJZF0gfHwgW10pO1xuICAgICAgfVxuICAgIH1dKTtcbiAgfShCYXNlU3RyZWFtQ29udHJvbGxlcik7XG4gIHZhciBCdWZmZXJhYmxlSW5zdGFuY2UgPSBmdW5jdGlvbiBCdWZmZXJhYmxlSW5zdGFuY2UodGltZXJhbmdlcykge1xuICAgIHRoaXMuYnVmZmVyZWQgPSB2b2lkIDA7XG4gICAgdmFyIGdldFJhbmdlID0gZnVuY3Rpb24gZ2V0UmFuZ2UobmFtZSwgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgaW5kZXggPSBpbmRleCA+Pj4gMDtcbiAgICAgIGlmIChpbmRleCA+IGxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIkZhaWxlZCB0byBleGVjdXRlICdcIiArIG5hbWUgKyBcIicgb24gJ1RpbWVSYW5nZXMnOiBUaGUgaW5kZXggcHJvdmlkZWQgKFwiICsgaW5kZXggKyBcIikgaXMgZ3JlYXRlciB0aGFuIHRoZSBtYXhpbXVtIGJvdW5kIChcIiArIGxlbmd0aCArIFwiKVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aW1lcmFuZ2VzW2luZGV4XVtuYW1lXTtcbiAgICB9O1xuICAgIHRoaXMuYnVmZmVyZWQgPSB7XG4gICAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJhbmdlcy5sZW5ndGg7XG4gICAgICB9LFxuICAgICAgZW5kOiBmdW5jdGlvbiBlbmQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGdldFJhbmdlKCdlbmQnLCBpbmRleCwgdGltZXJhbmdlcy5sZW5ndGgpO1xuICAgICAgfSxcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChpbmRleCkge1xuICAgICAgICByZXR1cm4gZ2V0UmFuZ2UoJ3N0YXJ0JywgaW5kZXgsIHRpbWVyYW5nZXMubGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNlbmRBZGRUcmFja0V2ZW50KHRyYWNrLCB2aWRlb0VsKSB7XG4gICAgdmFyIGV2ZW50O1xuICAgIHRyeSB7XG4gICAgICBldmVudCA9IG5ldyBFdmVudCgnYWRkdHJhY2snKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGZvciBJRTExXG4gICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgZXZlbnQuaW5pdEV2ZW50KCdhZGR0cmFjaycsIGZhbHNlLCBmYWxzZSk7XG4gICAgfVxuICAgIGV2ZW50LnRyYWNrID0gdHJhY2s7XG4gICAgdmlkZW9FbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRDdWVUb1RyYWNrKHRyYWNrLCBjdWUpIHtcbiAgICAvLyBTb21ldGltZXMgdGhlcmUgYXJlIGN1ZSBvdmVybGFwcyBvbiBzZWdtZW50ZWQgdnR0cyBzbyB0aGUgc2FtZVxuICAgIC8vIGN1ZSBjYW4gYXBwZWFyIG1vcmUgdGhhbiBvbmNlIGluIGRpZmZlcmVudCB2dHQgZmlsZXMuXG4gICAgLy8gVGhpcyBhdm9pZCBzaG93aW5nIGR1cGxpY2F0ZWQgY3VlcyB3aXRoIHNhbWUgdGltZWNvZGUgYW5kIHRleHQuXG4gICAgdmFyIG1vZGUgPSB0cmFjay5tb2RlO1xuICAgIGlmIChtb2RlID09PSAnZGlzYWJsZWQnKSB7XG4gICAgICB0cmFjay5tb2RlID0gJ2hpZGRlbic7XG4gICAgfVxuICAgIGlmICh0cmFjay5jdWVzICYmICF0cmFjay5jdWVzLmdldEN1ZUJ5SWQoY3VlLmlkKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdHJhY2suYWRkQ3VlKGN1ZSk7XG4gICAgICAgIGlmICghdHJhY2suY3Vlcy5nZXRDdWVCeUlkKGN1ZS5pZCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhZGRDdWUgaXMgZmFpbGVkIGZvcjogXCIgKyBjdWUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiW3RleHR0cmFjay11dGlsc106IFwiICsgZXJyKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgdGV4dFRyYWNrQ3VlID0gbmV3IHNlbGYuVGV4dFRyYWNrQ3VlKGN1ZS5zdGFydFRpbWUsIGN1ZS5lbmRUaW1lLCBjdWUudGV4dCk7XG4gICAgICAgICAgdGV4dFRyYWNrQ3VlLmlkID0gY3VlLmlkO1xuICAgICAgICAgIHRyYWNrLmFkZEN1ZSh0ZXh0VHJhY2tDdWUpO1xuICAgICAgICB9IGNhdGNoIChlcnIyKSB7XG4gICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiW3RleHR0cmFjay11dGlsc106IExlZ2FjeSBUZXh0VHJhY2tDdWUgZmFsbGJhY2sgZmFpbGVkOiBcIiArIGVycjIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtb2RlID09PSAnZGlzYWJsZWQnKSB7XG4gICAgICB0cmFjay5tb2RlID0gbW9kZTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2xlYXJDdXJyZW50Q3Vlcyh0cmFjaywgZW50ZXJIYW5kbGVyKSB7XG4gICAgLy8gV2hlbiB0cmFjay5tb2RlIGlzIGRpc2FibGVkLCB0cmFjay5jdWVzIHdpbGwgYmUgbnVsbC5cbiAgICAvLyBUbyBndWFyYW50ZWUgdGhlIHJlbW92YWwgb2YgY3Vlcywgd2UgbmVlZCB0byB0ZW1wb3JhcmlseVxuICAgIC8vIGNoYW5nZSB0aGUgbW9kZSB0byBoaWRkZW5cbiAgICB2YXIgbW9kZSA9IHRyYWNrLm1vZGU7XG4gICAgaWYgKG1vZGUgPT09ICdkaXNhYmxlZCcpIHtcbiAgICAgIHRyYWNrLm1vZGUgPSAnaGlkZGVuJztcbiAgICB9XG4gICAgaWYgKHRyYWNrLmN1ZXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0cmFjay5jdWVzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICBpZiAoZW50ZXJIYW5kbGVyKSB7XG4gICAgICAgICAgdHJhY2suY3Vlc1tpXS5yZW1vdmVFdmVudExpc3RlbmVyKCdlbnRlcicsIGVudGVySGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2sucmVtb3ZlQ3VlKHRyYWNrLmN1ZXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobW9kZSA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgdHJhY2subW9kZSA9IG1vZGU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZUN1ZXNJblJhbmdlKHRyYWNrLCBzdGFydCwgZW5kLCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgbW9kZSA9IHRyYWNrLm1vZGU7XG4gICAgaWYgKG1vZGUgPT09ICdkaXNhYmxlZCcpIHtcbiAgICAgIHRyYWNrLm1vZGUgPSAnaGlkZGVuJztcbiAgICB9XG4gICAgaWYgKHRyYWNrLmN1ZXMgJiYgdHJhY2suY3Vlcy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgY3VlcyA9IGdldEN1ZXNJblJhbmdlKHRyYWNrLmN1ZXMsIHN0YXJ0LCBlbmQpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShjdWVzW2ldKSkge1xuICAgICAgICAgIHRyYWNrLnJlbW92ZUN1ZShjdWVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobW9kZSA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgdHJhY2subW9kZSA9IG1vZGU7XG4gICAgfVxuICB9XG5cbiAgLy8gRmluZCBmaXJzdCBjdWUgc3RhcnRpbmcgYXQgb3IgYWZ0ZXIgZ2l2ZW4gdGltZS5cbiAgLy8gTW9kaWZpZWQgdmVyc2lvbiBvZiBiaW5hcnkgc2VhcmNoIE8obG9nKG4pKS5cbiAgZnVuY3Rpb24gZ2V0Rmlyc3RDdWVJbmRleEZyb21UaW1lKGN1ZXMsIHRpbWUpIHtcbiAgICAvLyBJZiBmaXJzdCBjdWUgc3RhcnRzIGF0IG9yIGFmdGVyIHRpbWUsIHN0YXJ0IHRoZXJlXG4gICAgaWYgKHRpbWUgPD0gY3Vlc1swXS5zdGFydFRpbWUpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgbGFzdCBjdWUgZW5kcyBiZWZvcmUgdGltZSB0aGVyZSBpcyBubyBvdmVybGFwXG4gICAgdmFyIGxlbiA9IGN1ZXMubGVuZ3RoIC0gMTtcbiAgICBpZiAodGltZSA+IGN1ZXNbbGVuXS5lbmRUaW1lKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHZhciBsZWZ0ID0gMDtcbiAgICB2YXIgcmlnaHQgPSBsZW47XG4gICAgdmFyIG1pZDtcbiAgICB3aGlsZSAobGVmdCA8PSByaWdodCkge1xuICAgICAgbWlkID0gTWF0aC5mbG9vcigocmlnaHQgKyBsZWZ0KSAvIDIpO1xuICAgICAgaWYgKHRpbWUgPCBjdWVzW21pZF0uc3RhcnRUaW1lKSB7XG4gICAgICAgIHJpZ2h0ID0gbWlkIC0gMTtcbiAgICAgIH0gZWxzZSBpZiAodGltZSA+IGN1ZXNbbWlkXS5zdGFydFRpbWUgJiYgbGVmdCA8IGxlbikge1xuICAgICAgICBsZWZ0ID0gbWlkICsgMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIGl0J3Mgbm90IGxvd2VyIG9yIGhpZ2hlciwgaXQgbXVzdCBiZSBlcXVhbC5cbiAgICAgICAgcmV0dXJuIG1pZDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQXQgdGhpcyBwb2ludCwgbGVmdCBhbmQgcmlnaHQgaGF2ZSBzd2FwcGVkLlxuICAgIC8vIE5vIGRpcmVjdCBtYXRjaCB3YXMgZm91bmQsIGxlZnQgb3IgcmlnaHQgZWxlbWVudCBtdXN0IGJlIHRoZSBjbG9zZXN0LiBDaGVjayB3aGljaCBvbmUgaGFzIHRoZSBzbWFsbGVzdCBkaWZmLlxuICAgIHJldHVybiBjdWVzW2xlZnRdLnN0YXJ0VGltZSAtIHRpbWUgPCB0aW1lIC0gY3Vlc1tyaWdodF0uc3RhcnRUaW1lID8gbGVmdCA6IHJpZ2h0O1xuICB9XG4gIGZ1bmN0aW9uIGdldEN1ZXNJblJhbmdlKGN1ZXMsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgY3Vlc0ZvdW5kID0gW107XG4gICAgdmFyIGZpcnN0Q3VlSW5SYW5nZSA9IGdldEZpcnN0Q3VlSW5kZXhGcm9tVGltZShjdWVzLCBzdGFydCk7XG4gICAgaWYgKGZpcnN0Q3VlSW5SYW5nZSA+IC0xKSB7XG4gICAgICBmb3IgKHZhciBpID0gZmlyc3RDdWVJblJhbmdlLCBsZW4gPSBjdWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBjdWUgPSBjdWVzW2ldO1xuICAgICAgICBpZiAoY3VlLnN0YXJ0VGltZSA+PSBzdGFydCAmJiBjdWUuZW5kVGltZSA8PSBlbmQpIHtcbiAgICAgICAgICBjdWVzRm91bmQucHVzaChjdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGN1ZS5zdGFydFRpbWUgPiBlbmQpIHtcbiAgICAgICAgICByZXR1cm4gY3Vlc0ZvdW5kO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdWVzRm91bmQ7XG4gIH1cbiAgZnVuY3Rpb24gZmlsdGVyU3VidGl0bGVUcmFja3ModGV4dFRyYWNrTGlzdCkge1xuICAgIHZhciB0cmFja3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHRUcmFja0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0cmFjayA9IHRleHRUcmFja0xpc3RbaV07XG4gICAgICAvLyBFZGdlIGFkZHMgYSB0cmFjayB3aXRob3V0IGEgbGFiZWw7IHdlIGRvbid0IHdhbnQgdG8gdXNlIGl0XG4gICAgICBpZiAoKHRyYWNrLmtpbmQgPT09ICdzdWJ0aXRsZXMnIHx8IHRyYWNrLmtpbmQgPT09ICdjYXB0aW9ucycpICYmIHRyYWNrLmxhYmVsKSB7XG4gICAgICAgIHRyYWNrcy5wdXNoKHRleHRUcmFja0xpc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJhY2tzO1xuICB9XG5cbiAgdmFyIFN1YnRpdGxlVHJhY2tDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVBsYXlsaXN0Q29udHJvbGwpIHtcbiAgICBmdW5jdGlvbiBTdWJ0aXRsZVRyYWNrQ29udHJvbGxlcihobHMpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF90aGlzID0gX0Jhc2VQbGF5bGlzdENvbnRyb2xsLmNhbGwodGhpcywgaGxzLCAnc3VidGl0bGUtdHJhY2stY29udHJvbGxlcicpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgICBfdGhpcy50cmFja3MgPSBbXTtcbiAgICAgIF90aGlzLmdyb3VwSWRzID0gbnVsbDtcbiAgICAgIF90aGlzLnRyYWNrc0luR3JvdXAgPSBbXTtcbiAgICAgIF90aGlzLnRyYWNrSWQgPSAtMTtcbiAgICAgIF90aGlzLmN1cnJlbnRUcmFjayA9IG51bGw7XG4gICAgICBfdGhpcy5zZWxlY3REZWZhdWx0VHJhY2sgPSB0cnVlO1xuICAgICAgX3RoaXMucXVldWVkRGVmYXVsdFRyYWNrID0gLTE7XG4gICAgICBfdGhpcy51c2VUZXh0VHJhY2tQb2xsaW5nID0gZmFsc2U7XG4gICAgICBfdGhpcy5zdWJ0aXRsZVBvbGxpbmdJbnRlcnZhbCA9IC0xO1xuICAgICAgX3RoaXMuX3N1YnRpdGxlRGlzcGxheSA9IHRydWU7XG4gICAgICBfdGhpcy5hc3luY1BvbGxUcmFja0NoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnBvbGxUcmFja0NoYW5nZSgwKTtcbiAgICAgIH07XG4gICAgICBfdGhpcy5vblRleHRUcmFja3NDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLnVzZVRleHRUcmFja1BvbGxpbmcpIHtcbiAgICAgICAgICBzZWxmLmNsZWFySW50ZXJ2YWwoX3RoaXMuc3VidGl0bGVQb2xsaW5nSW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1lZGlhIGlzIHVuZGVmaW5lZCB3aGVuIHN3aXRjaGluZyBzdHJlYW1zIHZpYSBsb2FkU291cmNlKClcbiAgICAgICAgaWYgKCFfdGhpcy5tZWRpYSB8fCAhX3RoaXMuaGxzLmNvbmZpZy5yZW5kZXJUZXh0VHJhY2tzTmF0aXZlbHkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRleHRUcmFjayA9IG51bGw7XG4gICAgICAgIHZhciB0cmFja3MgPSBmaWx0ZXJTdWJ0aXRsZVRyYWNrcyhfdGhpcy5tZWRpYS50ZXh0VHJhY2tzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodHJhY2tzW2ldLm1vZGUgPT09ICdoaWRkZW4nKSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgYnJlYWsgaW4gY2FzZSB0aGVyZSBpcyBhIGZvbGxvd2luZyB0cmFjayB3aXRoIHNob3dpbmcuXG4gICAgICAgICAgICB0ZXh0VHJhY2sgPSB0cmFja3NbaV07XG4gICAgICAgICAgfSBlbHNlIGlmICh0cmFja3NbaV0ubW9kZSA9PT0gJ3Nob3dpbmcnKSB7XG4gICAgICAgICAgICB0ZXh0VHJhY2sgPSB0cmFja3NbaV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIGludGVybmFsIHRyYWNrIGluZGV4IGZvciBUZXh0VHJhY2tcbiAgICAgICAgdmFyIHRyYWNrSWQgPSBfdGhpcy5maW5kVHJhY2tGb3JUZXh0VHJhY2sodGV4dFRyYWNrKTtcbiAgICAgICAgaWYgKF90aGlzLnN1YnRpdGxlVHJhY2sgIT09IHRyYWNrSWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdWJ0aXRsZVRyYWNrKHRyYWNrSWQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgX3RoaXMucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgX2luaGVyaXRzTG9vc2UoU3VidGl0bGVUcmFja0NvbnRyb2xsZXIsIF9CYXNlUGxheWxpc3RDb250cm9sbCk7XG4gICAgdmFyIF9wcm90byA9IFN1YnRpdGxlVHJhY2tDb250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLnVucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMudHJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLnRyYWNrc0luR3JvdXAubGVuZ3RoID0gMDtcbiAgICAgIHRoaXMuY3VycmVudFRyYWNrID0gbnVsbDtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMub25UZXh0VHJhY2tzQ2hhbmdlZCA9IHRoaXMuYXN5bmNQb2xsVHJhY2tDaGFuZ2UgPSBudWxsO1xuICAgICAgX0Jhc2VQbGF5bGlzdENvbnRyb2xsLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8ucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGhscy5vbihFdmVudHMuTUVESUFfQVRUQUNIRUQsIHRoaXMub25NZWRpYUF0dGFjaGVkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUVESUFfREVUQUNISU5HLCB0aGlzLm9uTWVkaWFEZXRhY2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUFOSUZFU1RfUEFSU0VELCB0aGlzLm9uTWFuaWZlc3RQYXJzZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5MRVZFTF9MT0FESU5HLCB0aGlzLm9uTGV2ZWxMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTEVWRUxfU1dJVENISU5HLCB0aGlzLm9uTGV2ZWxTd2l0Y2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5TVUJUSVRMRV9UUkFDS19MT0FERUQsIHRoaXMub25TdWJ0aXRsZVRyYWNrTG9hZGVkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuRVJST1IsIHRoaXMub25FcnJvciwgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8udW5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NRURJQV9BVFRBQ0hFRCwgdGhpcy5vbk1lZGlhQXR0YWNoZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUVESUFfREVUQUNISU5HLCB0aGlzLm9uTWVkaWFEZXRhY2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUFOSUZFU1RfTE9BRElORywgdGhpcy5vbk1hbmlmZXN0TG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NQU5JRkVTVF9QQVJTRUQsIHRoaXMub25NYW5pZmVzdFBhcnNlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5MRVZFTF9MT0FESU5HLCB0aGlzLm9uTGV2ZWxMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkxFVkVMX1NXSVRDSElORywgdGhpcy5vbkxldmVsU3dpdGNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLlNVQlRJVExFX1RSQUNLX0xPQURFRCwgdGhpcy5vblN1YnRpdGxlVHJhY2tMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRVJST1IsIHRoaXMub25FcnJvciwgdGhpcyk7XG4gICAgfVxuXG4gICAgLy8gTGlzdGVuIGZvciBzdWJ0aXRsZSB0cmFjayBjaGFuZ2UsIHRoZW4gZXh0cmFjdCB0aGUgY3VycmVudCB0cmFjayBJRC5cbiAgICA7XG4gICAgX3Byb3RvLm9uTWVkaWFBdHRhY2hlZCA9IGZ1bmN0aW9uIG9uTWVkaWFBdHRhY2hlZChldmVudCwgZGF0YSkge1xuICAgICAgdGhpcy5tZWRpYSA9IGRhdGEubWVkaWE7XG4gICAgICBpZiAoIXRoaXMubWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucXVldWVkRGVmYXVsdFRyYWNrID4gLTEpIHtcbiAgICAgICAgdGhpcy5zdWJ0aXRsZVRyYWNrID0gdGhpcy5xdWV1ZWREZWZhdWx0VHJhY2s7XG4gICAgICAgIHRoaXMucXVldWVkRGVmYXVsdFRyYWNrID0gLTE7XG4gICAgICB9XG4gICAgICB0aGlzLnVzZVRleHRUcmFja1BvbGxpbmcgPSAhKHRoaXMubWVkaWEudGV4dFRyYWNrcyAmJiAnb25jaGFuZ2UnIGluIHRoaXMubWVkaWEudGV4dFRyYWNrcyk7XG4gICAgICBpZiAodGhpcy51c2VUZXh0VHJhY2tQb2xsaW5nKSB7XG4gICAgICAgIHRoaXMucG9sbFRyYWNrQ2hhbmdlKDUwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1lZGlhLnRleHRUcmFja3MuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5hc3luY1BvbGxUcmFja0NoYW5nZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ucG9sbFRyYWNrQ2hhbmdlID0gZnVuY3Rpb24gcG9sbFRyYWNrQ2hhbmdlKHRpbWVvdXQpIHtcbiAgICAgIHNlbGYuY2xlYXJJbnRlcnZhbCh0aGlzLnN1YnRpdGxlUG9sbGluZ0ludGVydmFsKTtcbiAgICAgIHRoaXMuc3VidGl0bGVQb2xsaW5nSW50ZXJ2YWwgPSBzZWxmLnNldEludGVydmFsKHRoaXMub25UZXh0VHJhY2tzQ2hhbmdlZCwgdGltZW91dCk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYURldGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFEZXRhY2hpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgICBpZiAoIW1lZGlhKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0cmFuc2ZlcnJpbmdNZWRpYSA9ICEhZGF0YS50cmFuc2Zlck1lZGlhO1xuICAgICAgc2VsZi5jbGVhckludGVydmFsKHRoaXMuc3VidGl0bGVQb2xsaW5nSW50ZXJ2YWwpO1xuICAgICAgaWYgKCF0aGlzLnVzZVRleHRUcmFja1BvbGxpbmcpIHtcbiAgICAgICAgbWVkaWEudGV4dFRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmFzeW5jUG9sbFRyYWNrQ2hhbmdlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnRyYWNrSWQgPiAtMSkge1xuICAgICAgICB0aGlzLnF1ZXVlZERlZmF1bHRUcmFjayA9IHRoaXMudHJhY2tJZDtcbiAgICAgIH1cblxuICAgICAgLy8gRGlzYWJsZSBhbGwgc3VidGl0bGUgdHJhY2tzIGJlZm9yZSBkZXRhY2htZW50IHNvIHdoZW4gcmVhdHRhY2hlZCBvbmx5IHRyYWNrcyBpbiB0aGF0IGNvbnRlbnQgYXJlIGVuYWJsZWQuXG4gICAgICB0aGlzLnN1YnRpdGxlVHJhY2sgPSAtMTtcbiAgICAgIHRoaXMubWVkaWEgPSBudWxsO1xuICAgICAgaWYgKHRyYW5zZmVycmluZ01lZGlhKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXh0VHJhY2tzID0gZmlsdGVyU3VidGl0bGVUcmFja3MobWVkaWEudGV4dFRyYWNrcyk7XG4gICAgICAvLyBDbGVhciBsb2FkZWQgY3VlcyBvbiBtZWRpYSBkZXRhY2htZW50IGZyb20gdHJhY2tzXG4gICAgICB0ZXh0VHJhY2tzLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICAgIGNsZWFyQ3VycmVudEN1ZXModHJhY2spO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NYW5pZmVzdExvYWRpbmcgPSBmdW5jdGlvbiBvbk1hbmlmZXN0TG9hZGluZygpIHtcbiAgICAgIHRoaXMudHJhY2tzID0gW107XG4gICAgICB0aGlzLmdyb3VwSWRzID0gbnVsbDtcbiAgICAgIHRoaXMudHJhY2tzSW5Hcm91cCA9IFtdO1xuICAgICAgdGhpcy50cmFja0lkID0gLTE7XG4gICAgICB0aGlzLmN1cnJlbnRUcmFjayA9IG51bGw7XG4gICAgICB0aGlzLnNlbGVjdERlZmF1bHRUcmFjayA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gRmlyZWQgd2hlbmV2ZXIgYSBuZXcgbWFuaWZlc3QgaXMgbG9hZGVkLlxuICAgIDtcbiAgICBfcHJvdG8ub25NYW5pZmVzdFBhcnNlZCA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RQYXJzZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMudHJhY2tzID0gZGF0YS5zdWJ0aXRsZVRyYWNrcztcbiAgICB9O1xuICAgIF9wcm90by5vblN1YnRpdGxlVHJhY2tMb2FkZWQgPSBmdW5jdGlvbiBvblN1YnRpdGxlVHJhY2tMb2FkZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBpZCA9IGRhdGEuaWQsXG4gICAgICAgIGdyb3VwSWQgPSBkYXRhLmdyb3VwSWQsXG4gICAgICAgIGRldGFpbHMgPSBkYXRhLmRldGFpbHM7XG4gICAgICB2YXIgdHJhY2tJbkFjdGl2ZUdyb3VwID0gdGhpcy50cmFja3NJbkdyb3VwW2lkXTtcbiAgICAgIGlmICghdHJhY2tJbkFjdGl2ZUdyb3VwIHx8IHRyYWNrSW5BY3RpdmVHcm91cC5ncm91cElkICE9PSBncm91cElkKSB7XG4gICAgICAgIHRoaXMud2FybihcIlN1YnRpdGxlIHRyYWNrIHdpdGggaWQ6XCIgKyBpZCArIFwiIGFuZCBncm91cDpcIiArIGdyb3VwSWQgKyBcIiBub3QgZm91bmQgaW4gYWN0aXZlIGdyb3VwIFwiICsgKHRyYWNrSW5BY3RpdmVHcm91cCA9PSBudWxsID8gdm9pZCAwIDogdHJhY2tJbkFjdGl2ZUdyb3VwLmdyb3VwSWQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGN1ckRldGFpbHMgPSB0cmFja0luQWN0aXZlR3JvdXAuZGV0YWlscztcbiAgICAgIHRyYWNrSW5BY3RpdmVHcm91cC5kZXRhaWxzID0gZGF0YS5kZXRhaWxzO1xuICAgICAgdGhpcy5sb2coXCJTdWJ0aXRsZSB0cmFjayBcIiArIGlkICsgXCIgXFxcIlwiICsgdHJhY2tJbkFjdGl2ZUdyb3VwLm5hbWUgKyBcIlxcXCIgbGFuZzpcIiArIHRyYWNrSW5BY3RpdmVHcm91cC5sYW5nICsgXCIgZ3JvdXA6XCIgKyBncm91cElkICsgXCIgbG9hZGVkIFtcIiArIGRldGFpbHMuc3RhcnRTTiArIFwiLVwiICsgZGV0YWlscy5lbmRTTiArIFwiXVwiKTtcbiAgICAgIGlmIChpZCA9PT0gdGhpcy50cmFja0lkKSB7XG4gICAgICAgIHRoaXMucGxheWxpc3RMb2FkZWQoaWQsIGRhdGEsIGN1ckRldGFpbHMpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uTGV2ZWxMb2FkaW5nID0gZnVuY3Rpb24gb25MZXZlbExvYWRpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMuc3dpdGNoTGV2ZWwoZGF0YS5sZXZlbCk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25MZXZlbFN3aXRjaGluZyA9IGZ1bmN0aW9uIG9uTGV2ZWxTd2l0Y2hpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMuc3dpdGNoTGV2ZWwoZGF0YS5sZXZlbCk7XG4gICAgfTtcbiAgICBfcHJvdG8uc3dpdGNoTGV2ZWwgPSBmdW5jdGlvbiBzd2l0Y2hMZXZlbChsZXZlbEluZGV4KSB7XG4gICAgICB2YXIgbGV2ZWxJbmZvID0gdGhpcy5obHMubGV2ZWxzW2xldmVsSW5kZXhdO1xuICAgICAgaWYgKCFsZXZlbEluZm8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHN1YnRpdGxlR3JvdXBzID0gbGV2ZWxJbmZvLnN1YnRpdGxlR3JvdXBzIHx8IG51bGw7XG4gICAgICB2YXIgY3VycmVudEdyb3VwcyA9IHRoaXMuZ3JvdXBJZHM7XG4gICAgICB2YXIgY3VycmVudFRyYWNrID0gdGhpcy5jdXJyZW50VHJhY2s7XG4gICAgICBpZiAoIXN1YnRpdGxlR3JvdXBzIHx8IChjdXJyZW50R3JvdXBzID09IG51bGwgPyB2b2lkIDAgOiBjdXJyZW50R3JvdXBzLmxlbmd0aCkgIT09IChzdWJ0aXRsZUdyb3VwcyA9PSBudWxsID8gdm9pZCAwIDogc3VidGl0bGVHcm91cHMubGVuZ3RoKSB8fCBzdWJ0aXRsZUdyb3VwcyAhPSBudWxsICYmIHN1YnRpdGxlR3JvdXBzLnNvbWUoZnVuY3Rpb24gKGdyb3VwSWQpIHtcbiAgICAgICAgcmV0dXJuIChjdXJyZW50R3JvdXBzID09IG51bGwgPyB2b2lkIDAgOiBjdXJyZW50R3JvdXBzLmluZGV4T2YoZ3JvdXBJZCkpID09PSAtMTtcbiAgICAgIH0pKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBJZHMgPSBzdWJ0aXRsZUdyb3VwcztcbiAgICAgICAgdGhpcy50cmFja0lkID0gLTE7XG4gICAgICAgIHRoaXMuY3VycmVudFRyYWNrID0gbnVsbDtcbiAgICAgICAgdmFyIHN1YnRpdGxlVHJhY2tzID0gdGhpcy50cmFja3MuZmlsdGVyKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgICAgIHJldHVybiAhc3VidGl0bGVHcm91cHMgfHwgc3VidGl0bGVHcm91cHMuaW5kZXhPZih0cmFjay5ncm91cElkKSAhPT0gLTE7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3VidGl0bGVUcmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gRGlzYWJsZSBzZWxlY3REZWZhdWx0VHJhY2sgaWYgdGhlcmUgYXJlIG5vIGRlZmF1bHQgdHJhY2tzXG4gICAgICAgICAgaWYgKHRoaXMuc2VsZWN0RGVmYXVsdFRyYWNrICYmICFzdWJ0aXRsZVRyYWNrcy5zb21lKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIHRyYWNrLmRlZmF1bHQ7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0RGVmYXVsdFRyYWNrID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHRyYWNrLmlkIHNob3VsZCBtYXRjaCBobHMuYXVkaW9UcmFja3MgaW5kZXhcbiAgICAgICAgICBzdWJ0aXRsZVRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaywgaSkge1xuICAgICAgICAgICAgdHJhY2suaWQgPSBpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKCFjdXJyZW50VHJhY2sgJiYgIXRoaXMudHJhY2tzSW5Hcm91cC5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBEbyBub3QgZGlzcGF0Y2ggU1VCVElUTEVfVFJBQ0tTX1VQREFURUQgd2hlbiB0aGVyZSB3ZXJlIGFuZCBhcmUgbm8gdHJhY2tzXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhY2tzSW5Hcm91cCA9IHN1YnRpdGxlVHJhY2tzO1xuXG4gICAgICAgIC8vIEZpbmQgcHJlZmVycmVkIHRyYWNrXG4gICAgICAgIHZhciBzdWJ0aXRsZVByZWZlcmVuY2UgPSB0aGlzLmhscy5jb25maWcuc3VidGl0bGVQcmVmZXJlbmNlO1xuICAgICAgICBpZiAoIWN1cnJlbnRUcmFjayAmJiBzdWJ0aXRsZVByZWZlcmVuY2UpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdERlZmF1bHRUcmFjayA9IGZhbHNlO1xuICAgICAgICAgIHZhciBncm91cEluZGV4ID0gZmluZE1hdGNoaW5nT3B0aW9uKHN1YnRpdGxlUHJlZmVyZW5jZSwgc3VidGl0bGVUcmFja3MpO1xuICAgICAgICAgIGlmIChncm91cEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIGN1cnJlbnRUcmFjayA9IHN1YnRpdGxlVHJhY2tzW2dyb3VwSW5kZXhdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYWxsSW5kZXggPSBmaW5kTWF0Y2hpbmdPcHRpb24oc3VidGl0bGVQcmVmZXJlbmNlLCB0aGlzLnRyYWNrcyk7XG4gICAgICAgICAgICBjdXJyZW50VHJhY2sgPSB0aGlzLnRyYWNrc1thbGxJbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VsZWN0IGluaXRpYWwgdHJhY2tcbiAgICAgICAgdmFyIHRyYWNrSWQgPSB0aGlzLmZpbmRUcmFja0lkKGN1cnJlbnRUcmFjayk7XG4gICAgICAgIGlmICh0cmFja0lkID09PSAtMSAmJiBjdXJyZW50VHJhY2spIHtcbiAgICAgICAgICB0cmFja0lkID0gdGhpcy5maW5kVHJhY2tJZChudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc3BhdGNoIGV2ZW50cyBhbmQgbG9hZCB0cmFjayBpZiBuZWVkZWRcbiAgICAgICAgdmFyIHN1YnRpdGxlVHJhY2tzVXBkYXRlZCA9IHtcbiAgICAgICAgICBzdWJ0aXRsZVRyYWNrczogc3VidGl0bGVUcmFja3NcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5sb2coXCJVcGRhdGluZyBzdWJ0aXRsZSB0cmFja3MsIFwiICsgc3VidGl0bGVUcmFja3MubGVuZ3RoICsgXCIgdHJhY2socykgZm91bmQgaW4gXFxcIlwiICsgKHN1YnRpdGxlR3JvdXBzID09IG51bGwgPyB2b2lkIDAgOiBzdWJ0aXRsZUdyb3Vwcy5qb2luKCcsJykpICsgXCJcXFwiIGdyb3VwLWlkXCIpO1xuICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5TVUJUSVRMRV9UUkFDS1NfVVBEQVRFRCwgc3VidGl0bGVUcmFja3NVcGRhdGVkKTtcbiAgICAgICAgaWYgKHRyYWNrSWQgIT09IC0xICYmIHRoaXMudHJhY2tJZCA9PT0gLTEpIHtcbiAgICAgICAgICB0aGlzLnNldFN1YnRpdGxlVHJhY2sodHJhY2tJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5maW5kVHJhY2tJZCA9IGZ1bmN0aW9uIGZpbmRUcmFja0lkKGN1cnJlbnRUcmFjaykge1xuICAgICAgdmFyIHRyYWNrcyA9IHRoaXMudHJhY2tzSW5Hcm91cDtcbiAgICAgIHZhciBzZWxlY3REZWZhdWx0ID0gdGhpcy5zZWxlY3REZWZhdWx0VHJhY2s7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07XG4gICAgICAgIGlmIChzZWxlY3REZWZhdWx0ICYmICF0cmFjay5kZWZhdWx0IHx8ICFzZWxlY3REZWZhdWx0ICYmICFjdXJyZW50VHJhY2spIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWN1cnJlbnRUcmFjayB8fCBtYXRjaGVzT3B0aW9uKHRyYWNrLCBjdXJyZW50VHJhY2spKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VHJhY2spIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRyYWNrcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICB2YXIgX3RyYWNrID0gdHJhY2tzW19pXTtcbiAgICAgICAgICBpZiAobWVkaWFBdHRyaWJ1dGVzSWRlbnRpY2FsKGN1cnJlbnRUcmFjay5hdHRycywgX3RyYWNrLmF0dHJzLCBbJ0xBTkdVQUdFJywgJ0FTU09DLUxBTkdVQUdFJywgJ0NIQVJBQ1RFUklTVElDUyddKSkge1xuICAgICAgICAgICAgcmV0dXJuIF9pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB0cmFja3MubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgIHZhciBfdHJhY2syID0gdHJhY2tzW19pMl07XG4gICAgICAgICAgaWYgKG1lZGlhQXR0cmlidXRlc0lkZW50aWNhbChjdXJyZW50VHJhY2suYXR0cnMsIF90cmFjazIuYXR0cnMsIFsnTEFOR1VBR0UnXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBfaTI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICBfcHJvdG8uZmluZFRyYWNrRm9yVGV4dFRyYWNrID0gZnVuY3Rpb24gZmluZFRyYWNrRm9yVGV4dFRyYWNrKHRleHRUcmFjaykge1xuICAgICAgaWYgKHRleHRUcmFjaykge1xuICAgICAgICB2YXIgdHJhY2tzID0gdGhpcy50cmFja3NJbkdyb3VwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciB0cmFjayA9IHRyYWNrc1tpXTtcbiAgICAgICAgICBpZiAoc3VidGl0bGVUcmFja01hdGNoZXNUZXh0VHJhY2sodHJhY2ssIHRleHRUcmFjaykpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgX3Byb3RvLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKGV2ZW50LCBkYXRhKSB7XG4gICAgICBpZiAoZGF0YS5mYXRhbCB8fCAhZGF0YS5jb250ZXh0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLmNvbnRleHQudHlwZSA9PT0gUGxheWxpc3RDb250ZXh0VHlwZS5TVUJUSVRMRV9UUkFDSyAmJiBkYXRhLmNvbnRleHQuaWQgPT09IHRoaXMudHJhY2tJZCAmJiAoIXRoaXMuZ3JvdXBJZHMgfHwgdGhpcy5ncm91cElkcy5pbmRleE9mKGRhdGEuY29udGV4dC5ncm91cElkKSAhPT0gLTEpKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXRyeShkYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5zZXRTdWJ0aXRsZU9wdGlvbiA9IGZ1bmN0aW9uIHNldFN1YnRpdGxlT3B0aW9uKHN1YnRpdGxlT3B0aW9uKSB7XG4gICAgICB0aGlzLmhscy5jb25maWcuc3VidGl0bGVQcmVmZXJlbmNlID0gc3VidGl0bGVPcHRpb247XG4gICAgICBpZiAoc3VidGl0bGVPcHRpb24pIHtcbiAgICAgICAgaWYgKHN1YnRpdGxlT3B0aW9uLmlkID09PSAtMSkge1xuICAgICAgICAgIHRoaXMuc2V0U3VidGl0bGVUcmFjaygtMSk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFsbFN1YnRpdGxlVHJhY2tzID0gdGhpcy5hbGxTdWJ0aXRsZVRyYWNrcztcbiAgICAgICAgdGhpcy5zZWxlY3REZWZhdWx0VHJhY2sgPSBmYWxzZTtcbiAgICAgICAgaWYgKGFsbFN1YnRpdGxlVHJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgIC8vIEZpcnN0IHNlZSBpZiBjdXJyZW50IG9wdGlvbiBtYXRjaGVzIChubyBzd2l0Y2ggb3ApXG4gICAgICAgICAgdmFyIGN1cnJlbnRUcmFjayA9IHRoaXMuY3VycmVudFRyYWNrO1xuICAgICAgICAgIGlmIChjdXJyZW50VHJhY2sgJiYgbWF0Y2hlc09wdGlvbihzdWJ0aXRsZU9wdGlvbiwgY3VycmVudFRyYWNrKSkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRUcmFjaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRmluZCBvcHRpb24gaW4gY3VycmVudCBncm91cFxuICAgICAgICAgIHZhciBncm91cEluZGV4ID0gZmluZE1hdGNoaW5nT3B0aW9uKHN1YnRpdGxlT3B0aW9uLCB0aGlzLnRyYWNrc0luR3JvdXApO1xuICAgICAgICAgIGlmIChncm91cEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHZhciB0cmFjayA9IHRoaXMudHJhY2tzSW5Hcm91cFtncm91cEluZGV4XTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3VidGl0bGVUcmFjayhncm91cEluZGV4KTtcbiAgICAgICAgICAgIHJldHVybiB0cmFjaztcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRUcmFjaykge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBub3QgdGhlIGluaXRpYWwgc2VsZWN0aW9uIHJldHVybiBudWxsXG4gICAgICAgICAgICAvLyBvcHRpb24gc2hvdWxkIGhhdmUgbWF0Y2hlZCBvbmUgaW4gYWN0aXZlIGdyb3VwXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgb3B0aW9uIGluIGFsbCB0cmFja3MgZm9yIGluaXRpYWwgc2VsZWN0aW9uXG4gICAgICAgICAgICB2YXIgYWxsSW5kZXggPSBmaW5kTWF0Y2hpbmdPcHRpb24oc3VidGl0bGVPcHRpb24sIGFsbFN1YnRpdGxlVHJhY2tzKTtcbiAgICAgICAgICAgIGlmIChhbGxJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhbGxTdWJ0aXRsZVRyYWNrc1thbGxJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5sb2FkUGxheWxpc3QgPSBmdW5jdGlvbiBsb2FkUGxheWxpc3QoaGxzVXJsUGFyYW1ldGVycykge1xuICAgICAgX0Jhc2VQbGF5bGlzdENvbnRyb2xsLnByb3RvdHlwZS5sb2FkUGxheWxpc3QuY2FsbCh0aGlzKTtcbiAgICAgIGlmICh0aGlzLnNob3VsZExvYWRQbGF5bGlzdCh0aGlzLmN1cnJlbnRUcmFjaykpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZUxvYWRpbmcodGhpcy5jdXJyZW50VHJhY2ssIGhsc1VybFBhcmFtZXRlcnMpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmxvYWRpbmdQbGF5bGlzdCA9IGZ1bmN0aW9uIGxvYWRpbmdQbGF5bGlzdChjdXJyZW50VHJhY2ssIGhsc1VybFBhcmFtZXRlcnMpIHtcbiAgICAgIF9CYXNlUGxheWxpc3RDb250cm9sbC5wcm90b3R5cGUubG9hZGluZ1BsYXlsaXN0LmNhbGwodGhpcywgY3VycmVudFRyYWNrLCBobHNVcmxQYXJhbWV0ZXJzKTtcbiAgICAgIHZhciBpZCA9IGN1cnJlbnRUcmFjay5pZDtcbiAgICAgIHZhciBncm91cElkID0gY3VycmVudFRyYWNrLmdyb3VwSWQ7XG4gICAgICB2YXIgdXJsID0gdGhpcy5nZXRVcmxXaXRoRGlyZWN0aXZlcyhjdXJyZW50VHJhY2sudXJsLCBobHNVcmxQYXJhbWV0ZXJzKTtcbiAgICAgIHZhciBkZXRhaWxzID0gY3VycmVudFRyYWNrLmRldGFpbHM7XG4gICAgICB2YXIgYWdlID0gZGV0YWlscyA9PSBudWxsID8gdm9pZCAwIDogZGV0YWlscy5hZ2U7XG4gICAgICB0aGlzLmxvZyhcIkxvYWRpbmcgc3VidGl0bGUgXCIgKyBpZCArIFwiIFxcXCJcIiArIGN1cnJlbnRUcmFjay5uYW1lICsgXCJcXFwiIGxhbmc6XCIgKyBjdXJyZW50VHJhY2subGFuZyArIFwiIGdyb3VwOlwiICsgZ3JvdXBJZCArICgoaGxzVXJsUGFyYW1ldGVycyA9PSBudWxsID8gdm9pZCAwIDogaGxzVXJsUGFyYW1ldGVycy5tc24pICE9PSB1bmRlZmluZWQgPyAnIGF0IHNuICcgKyBobHNVcmxQYXJhbWV0ZXJzLm1zbiArICcgcGFydCAnICsgaGxzVXJsUGFyYW1ldGVycy5wYXJ0IDogJycpICsgKGFnZSAmJiBkZXRhaWxzLmxpdmUgPyAnIGFnZSAnICsgYWdlLnRvRml4ZWQoMSkgKyAoZGV0YWlscy50eXBlID8gJyAnICsgZGV0YWlscy50eXBlIHx8ICcnIDogJycpIDogJycpICsgXCIgXCIgKyB1cmwpO1xuICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuU1VCVElUTEVfVFJBQ0tfTE9BRElORywge1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBncm91cElkOiBncm91cElkLFxuICAgICAgICBkZWxpdmVyeURpcmVjdGl2ZXM6IGhsc1VybFBhcmFtZXRlcnMgfHwgbnVsbCxcbiAgICAgICAgdHJhY2s6IGN1cnJlbnRUcmFja1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZXMgdGhlIG9sZCBzdWJ0aXRsZVRyYWNrIGFuZCBzZXRzIGN1cnJlbnQgbW9kZSBvbiB0aGUgbmV4dCBzdWJ0aXRsZVRyYWNrLlxuICAgICAqIFRoaXMgb3BlcmF0ZXMgb24gdGhlIERPTSB0ZXh0VHJhY2tzLlxuICAgICAqIEEgdmFsdWUgb2YgLTEgd2lsbCBkaXNhYmxlIGFsbCBzdWJ0aXRsZSB0cmFja3MuXG4gICAgICovO1xuICAgIF9wcm90by50b2dnbGVUcmFja01vZGVzID0gZnVuY3Rpb24gdG9nZ2xlVHJhY2tNb2RlcygpIHtcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgICBpZiAoIW1lZGlhKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXh0VHJhY2tzID0gZmlsdGVyU3VidGl0bGVUcmFja3MobWVkaWEudGV4dFRyYWNrcyk7XG4gICAgICB2YXIgY3VycmVudFRyYWNrID0gdGhpcy5jdXJyZW50VHJhY2s7XG4gICAgICB2YXIgbmV4dFRyYWNrO1xuICAgICAgaWYgKGN1cnJlbnRUcmFjaykge1xuICAgICAgICBuZXh0VHJhY2sgPSB0ZXh0VHJhY2tzLmZpbHRlcihmdW5jdGlvbiAodGV4dFRyYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIHN1YnRpdGxlVHJhY2tNYXRjaGVzVGV4dFRyYWNrKGN1cnJlbnRUcmFjaywgdGV4dFRyYWNrKTtcbiAgICAgICAgfSlbMF07XG4gICAgICAgIGlmICghbmV4dFRyYWNrKSB7XG4gICAgICAgICAgdGhpcy53YXJuKFwiVW5hYmxlIHRvIGZpbmQgc3VidGl0bGUgVGV4dFRyYWNrIHdpdGggbmFtZSBcXFwiXCIgKyBjdXJyZW50VHJhY2submFtZSArIFwiXFxcIiBhbmQgbGFuZ3VhZ2UgXFxcIlwiICsgY3VycmVudFRyYWNrLmxhbmcgKyBcIlxcXCJcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFtdLnNsaWNlLmNhbGwodGV4dFRyYWNrcykuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcbiAgICAgICAgaWYgKHRyYWNrLm1vZGUgIT09ICdkaXNhYmxlZCcgJiYgdHJhY2sgIT09IG5leHRUcmFjaykge1xuICAgICAgICAgIHRyYWNrLm1vZGUgPSAnZGlzYWJsZWQnO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChuZXh0VHJhY2spIHtcbiAgICAgICAgdmFyIG1vZGUgPSB0aGlzLnN1YnRpdGxlRGlzcGxheSA/ICdzaG93aW5nJyA6ICdoaWRkZW4nO1xuICAgICAgICBpZiAobmV4dFRyYWNrLm1vZGUgIT09IG1vZGUpIHtcbiAgICAgICAgICBuZXh0VHJhY2subW9kZSA9IG1vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3IgdmFsaWRhdGluZyB0aGUgc3VidGl0bGUgaW5kZXggYW5kIHBlcmlvZGljYWxseSByZWxvYWRpbmcgaWYgbGl2ZS5cbiAgICAgKiBEaXNwYXRjaGVzIHRoZSBTVUJUSVRMRV9UUkFDS19TV0lUQ0ggZXZlbnQsIHdoaWNoIGluc3RydWN0cyB0aGUgc3VidGl0bGUtc3RyZWFtLWNvbnRyb2xsZXIgdG8gbG9hZCB0aGUgc2VsZWN0ZWQgdHJhY2suXG4gICAgICovO1xuICAgIF9wcm90by5zZXRTdWJ0aXRsZVRyYWNrID0gZnVuY3Rpb24gc2V0U3VidGl0bGVUcmFjayhuZXdJZCkge1xuICAgICAgdmFyIHRyYWNrcyA9IHRoaXMudHJhY2tzSW5Hcm91cDtcblxuICAgICAgLy8gc2V0dGluZyB0aGlzLnN1YnRpdGxlVHJhY2sgd2lsbCB0cmlnZ2VyIGludGVybmFsIGxvZ2ljXG4gICAgICAvLyBpZiBtZWRpYSBoYXMgbm90IGJlZW4gYXR0YWNoZWQgeWV0LCBpdCB3aWxsIGZhaWxcbiAgICAgIC8vIHdlIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGRlZmF1bHQgdHJhY2sgaWRcbiAgICAgIC8vIGFuZCB3ZSdsbCBzZXQgc3VidGl0bGVUcmFjayB3aGVuIG9uTWVkaWFBdHRhY2hlZCBpcyB0cmlnZ2VyZWRcbiAgICAgIGlmICghdGhpcy5tZWRpYSkge1xuICAgICAgICB0aGlzLnF1ZXVlZERlZmF1bHRUcmFjayA9IG5ld0lkO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGV4aXQgaWYgdHJhY2sgaWQgYXMgYWxyZWFkeSBzZXQgb3IgaW52YWxpZFxuICAgICAgaWYgKG5ld0lkIDwgLTEgfHwgbmV3SWQgPj0gdHJhY2tzLmxlbmd0aCB8fCAhaXNGaW5pdGVOdW1iZXIobmV3SWQpKSB7XG4gICAgICAgIHRoaXMud2FybihcIkludmFsaWQgc3VidGl0bGUgdHJhY2sgaWQ6IFwiICsgbmV3SWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnNlbGVjdERlZmF1bHRUcmFjayA9IGZhbHNlO1xuICAgICAgdmFyIGxhc3RUcmFjayA9IHRoaXMuY3VycmVudFRyYWNrO1xuICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW25ld0lkXSB8fCBudWxsO1xuICAgICAgdGhpcy50cmFja0lkID0gbmV3SWQ7XG4gICAgICB0aGlzLmN1cnJlbnRUcmFjayA9IHRyYWNrO1xuICAgICAgdGhpcy50b2dnbGVUcmFja01vZGVzKCk7XG4gICAgICBpZiAoIXRyYWNrKSB7XG4gICAgICAgIC8vIHN3aXRjaCB0byAtMVxuICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5TVUJUSVRMRV9UUkFDS19TV0lUQ0gsIHtcbiAgICAgICAgICBpZDogbmV3SWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0cmFja0xvYWRlZCA9ICEhdHJhY2suZGV0YWlscyAmJiAhdHJhY2suZGV0YWlscy5saXZlO1xuICAgICAgaWYgKG5ld0lkID09PSB0aGlzLnRyYWNrSWQgJiYgdHJhY2sgPT09IGxhc3RUcmFjayAmJiB0cmFja0xvYWRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmxvZyhcIlN3aXRjaGluZyB0byBzdWJ0aXRsZS10cmFjayBcIiArIG5ld0lkICsgKHRyYWNrID8gXCIgXFxcIlwiICsgdHJhY2submFtZSArIFwiXFxcIiBsYW5nOlwiICsgdHJhY2subGFuZyArIFwiIGdyb3VwOlwiICsgdHJhY2suZ3JvdXBJZCA6ICcnKSk7XG4gICAgICB2YXIgaWQgPSB0cmFjay5pZCxcbiAgICAgICAgX3RyYWNrJGdyb3VwSWQgPSB0cmFjay5ncm91cElkLFxuICAgICAgICBncm91cElkID0gX3RyYWNrJGdyb3VwSWQgPT09IHZvaWQgMCA/ICcnIDogX3RyYWNrJGdyb3VwSWQsXG4gICAgICAgIG5hbWUgPSB0cmFjay5uYW1lLFxuICAgICAgICB0eXBlID0gdHJhY2sudHlwZSxcbiAgICAgICAgdXJsID0gdHJhY2sudXJsO1xuICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuU1VCVElUTEVfVFJBQ0tfU1dJVENILCB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgZ3JvdXBJZDogZ3JvdXBJZCxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgdXJsOiB1cmxcbiAgICAgIH0pO1xuICAgICAgdmFyIGhsc1VybFBhcmFtZXRlcnMgPSB0aGlzLnN3aXRjaFBhcmFtcyh0cmFjay51cmwsIGxhc3RUcmFjayA9PSBudWxsID8gdm9pZCAwIDogbGFzdFRyYWNrLmRldGFpbHMsIHRyYWNrLmRldGFpbHMpO1xuICAgICAgdGhpcy5sb2FkUGxheWxpc3QoaGxzVXJsUGFyYW1ldGVycyk7XG4gICAgfTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKFN1YnRpdGxlVHJhY2tDb250cm9sbGVyLCBbe1xuICAgICAga2V5OiBcInN1YnRpdGxlRGlzcGxheVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJ0aXRsZURpc3BsYXk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc3VidGl0bGVEaXNwbGF5ID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLnRyYWNrSWQgPiAtMSkge1xuICAgICAgICAgIHRoaXMudG9nZ2xlVHJhY2tNb2RlcygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFsbFN1YnRpdGxlVHJhY2tzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhY2tzO1xuICAgICAgfVxuXG4gICAgICAvKiogZ2V0IGFsdGVybmF0ZSBzdWJ0aXRsZSB0cmFja3MgbGlzdCBmcm9tIHBsYXlsaXN0ICoqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJzdWJ0aXRsZVRyYWNrc1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYWNrc0luR3JvdXA7XG4gICAgICB9XG5cbiAgICAgIC8qKiBnZXQvc2V0IGluZGV4IG9mIHRoZSBzZWxlY3RlZCBzdWJ0aXRsZSB0cmFjayAoYmFzZWQgb24gaW5kZXggaW4gc3VidGl0bGUgdHJhY2sgbGlzdHMpICoqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJzdWJ0aXRsZVRyYWNrXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhY2tJZDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdJZCkge1xuICAgICAgICB0aGlzLnNlbGVjdERlZmF1bHRUcmFjayA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNldFN1YnRpdGxlVHJhY2sobmV3SWQpO1xuICAgICAgfVxuICAgIH1dKTtcbiAgfShCYXNlUGxheWxpc3RDb250cm9sbGVyKTtcblxuICAvKipcbiAgICpcbiAgICogVGhpcyBjb2RlIHdhcyBwb3J0ZWQgZnJvbSB0aGUgZGFzaC5qcyBwcm9qZWN0IGF0OlxuICAgKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXNoLUluZHVzdHJ5LUZvcnVtL2Rhc2guanMvYmxvYi9kZXZlbG9wbWVudC9leHRlcm5hbHMvY2VhNjA4LXBhcnNlci5qc1xuICAgKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXNoLUluZHVzdHJ5LUZvcnVtL2Rhc2guanMvY29tbWl0LzgyNjliMjZhNzYxZTA4NTNiYjIxZDc4NzgwZWQ5NDUxNDRlY2RkNGQjZGlmZi03MWJjMjk1YTJkNmI2YjcwOTNhMWQzMjkwZDUzYTRiMlxuICAgKlxuICAgKiBUaGUgb3JpZ2luYWwgY29weXJpZ2h0IGFwcGVhcnMgYmVsb3c6XG4gICAqXG4gICAqIFRoZSBjb3B5cmlnaHQgaW4gdGhpcyBzb2Z0d2FyZSBpcyBiZWluZyBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgQlNEIExpY2Vuc2UsXG4gICAqIGluY2x1ZGVkIGJlbG93LiBUaGlzIHNvZnR3YXJlIG1heSBiZSBzdWJqZWN0IHRvIG90aGVyIHRoaXJkIHBhcnR5IGFuZCBjb250cmlidXRvclxuICAgKiByaWdodHMsIGluY2x1ZGluZyBwYXRlbnQgcmlnaHRzLCBhbmQgbm8gc3VjaCByaWdodHMgYXJlIGdyYW50ZWQgdW5kZXIgdGhpcyBsaWNlbnNlLlxuICAgKlxuICAgKiBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxNiwgREFTSCBJbmR1c3RyeSBGb3J1bS5cbiAgICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgICpcbiAgICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbixcbiAgICogYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICAgKiAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gICAqICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAgICogICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICAgKiAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3JcbiAgICogIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gICAqICAyLiBOZWl0aGVyIHRoZSBuYW1lIG9mIERhc2ggSW5kdXN0cnkgRm9ydW0gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAgICogIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiAgICogIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICAgKlxuICAgKiAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBBUyBJUyBBTkQgQU5ZXG4gICAqICBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gICAqICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuXG4gICAqICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULFxuICAgKiAgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVFxuICAgKiAgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICAgKiAgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksXG4gICAqICBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4gICAqICBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuICAgKiAgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gICAqL1xuICAvKipcbiAgICogIEV4Y2VwdGlvbnMgZnJvbSByZWd1bGFyIEFTQ0lJLiBDb2RlUG9pbnRzIGFyZSBtYXBwZWQgdG8gVVRGLTE2IGNvZGVzXG4gICAqL1xuXG4gIHZhciBzcGVjaWFsQ2VhNjA4Q2hhcnNDb2RlcyA9IHtcbiAgICAweDJhOiAweGUxLFxuICAgIC8vIGxvd2VyY2FzZSBhLCBhY3V0ZSBhY2NlbnRcbiAgICAweDVjOiAweGU5LFxuICAgIC8vIGxvd2VyY2FzZSBlLCBhY3V0ZSBhY2NlbnRcbiAgICAweDVlOiAweGVkLFxuICAgIC8vIGxvd2VyY2FzZSBpLCBhY3V0ZSBhY2NlbnRcbiAgICAweDVmOiAweGYzLFxuICAgIC8vIGxvd2VyY2FzZSBvLCBhY3V0ZSBhY2NlbnRcbiAgICAweDYwOiAweGZhLFxuICAgIC8vIGxvd2VyY2FzZSB1LCBhY3V0ZSBhY2NlbnRcbiAgICAweDdiOiAweGU3LFxuICAgIC8vIGxvd2VyY2FzZSBjIHdpdGggY2VkaWxsYVxuICAgIDB4N2M6IDB4ZjcsXG4gICAgLy8gZGl2aXNpb24gc3ltYm9sXG4gICAgMHg3ZDogMHhkMSxcbiAgICAvLyB1cHBlcmNhc2UgTiB0aWxkZVxuICAgIDB4N2U6IDB4ZjEsXG4gICAgLy8gbG93ZXJjYXNlIG4gdGlsZGVcbiAgICAweDdmOiAweDI1ODgsXG4gICAgLy8gRnVsbCBibG9ja1xuICAgIC8vIFRISVMgQkxPQ0sgSU5DTFVERVMgVEhFIDE2IEVYVEVOREVEIChUV08tQllURSkgTElORSAyMSBDSEFSQUNURVJTXG4gICAgLy8gVEhBVCBDT01FIEZST00gSEkgQllURT0weDExIEFORCBMT1cgQkVUV0VFTiAweDMwIEFORCAweDNGXG4gICAgLy8gVEhJUyBNRUFOUyBUSEFUIFxceDUwIE1VU1QgQkUgQURERUQgVE8gVEhFIFZBTFVFU1xuICAgIDB4ODA6IDB4YWUsXG4gICAgLy8gUmVnaXN0ZXJlZCBzeW1ib2wgKFIpXG4gICAgMHg4MTogMHhiMCxcbiAgICAvLyBkZWdyZWUgc2lnblxuICAgIDB4ODI6IDB4YmQsXG4gICAgLy8gMS8yIHN5bWJvbFxuICAgIDB4ODM6IDB4YmYsXG4gICAgLy8gSW52ZXJ0ZWQgKG9wZW4pIHF1ZXN0aW9uIG1hcmtcbiAgICAweDg0OiAweDIxMjIsXG4gICAgLy8gVHJhZGVtYXJrIHN5bWJvbCAoVE0pXG4gICAgMHg4NTogMHhhMixcbiAgICAvLyBDZW50cyBzeW1ib2xcbiAgICAweDg2OiAweGEzLFxuICAgIC8vIFBvdW5kcyBzdGVybGluZ1xuICAgIDB4ODc6IDB4MjY2YSxcbiAgICAvLyBNdXNpYyA4J3RoIG5vdGVcbiAgICAweDg4OiAweGUwLFxuICAgIC8vIGxvd2VyY2FzZSBhLCBncmF2ZSBhY2NlbnRcbiAgICAweDg5OiAweDIwLFxuICAgIC8vIHRyYW5zcGFyZW50IHNwYWNlIChyZWd1bGFyKVxuICAgIDB4OGE6IDB4ZTgsXG4gICAgLy8gbG93ZXJjYXNlIGUsIGdyYXZlIGFjY2VudFxuICAgIDB4OGI6IDB4ZTIsXG4gICAgLy8gbG93ZXJjYXNlIGEsIGNpcmN1bWZsZXggYWNjZW50XG4gICAgMHg4YzogMHhlYSxcbiAgICAvLyBsb3dlcmNhc2UgZSwgY2lyY3VtZmxleCBhY2NlbnRcbiAgICAweDhkOiAweGVlLFxuICAgIC8vIGxvd2VyY2FzZSBpLCBjaXJjdW1mbGV4IGFjY2VudFxuICAgIDB4OGU6IDB4ZjQsXG4gICAgLy8gbG93ZXJjYXNlIG8sIGNpcmN1bWZsZXggYWNjZW50XG4gICAgMHg4ZjogMHhmYixcbiAgICAvLyBsb3dlcmNhc2UgdSwgY2lyY3VtZmxleCBhY2NlbnRcbiAgICAvLyBUSElTIEJMT0NLIElOQ0xVREVTIFRIRSAzMiBFWFRFTkRFRCAoVFdPLUJZVEUpIExJTkUgMjEgQ0hBUkFDVEVSU1xuICAgIC8vIFRIQVQgQ09NRSBGUk9NIEhJIEJZVEU9MHgxMiBBTkQgTE9XIEJFVFdFRU4gMHgyMCBBTkQgMHgzRlxuICAgIDB4OTA6IDB4YzEsXG4gICAgLy8gY2FwaXRhbCBsZXR0ZXIgQSB3aXRoIGFjdXRlXG4gICAgMHg5MTogMHhjOSxcbiAgICAvLyBjYXBpdGFsIGxldHRlciBFIHdpdGggYWN1dGVcbiAgICAweDkyOiAweGQzLFxuICAgIC8vIGNhcGl0YWwgbGV0dGVyIE8gd2l0aCBhY3V0ZVxuICAgIDB4OTM6IDB4ZGEsXG4gICAgLy8gY2FwaXRhbCBsZXR0ZXIgVSB3aXRoIGFjdXRlXG4gICAgMHg5NDogMHhkYyxcbiAgICAvLyBjYXBpdGFsIGxldHRlciBVIHdpdGggZGlhcmVzaXNcbiAgICAweDk1OiAweGZjLFxuICAgIC8vIGxvd2VyY2FzZSBsZXR0ZXIgVSB3aXRoIGRpYWVyZXNpc1xuICAgIDB4OTY6IDB4MjAxOCxcbiAgICAvLyBvcGVuaW5nIHNpbmdsZSBxdW90ZVxuICAgIDB4OTc6IDB4YTEsXG4gICAgLy8gaW52ZXJ0ZWQgZXhjbGFtYXRpb24gbWFya1xuICAgIDB4OTg6IDB4MmEsXG4gICAgLy8gYXN0ZXJpc2tcbiAgICAweDk5OiAweDIwMTksXG4gICAgLy8gY2xvc2luZyBzaW5nbGUgcXVvdGVcbiAgICAweDlhOiAweDI1MDEsXG4gICAgLy8gYm94IGRyYXdpbmdzIGhlYXZ5IGhvcml6b250YWxcbiAgICAweDliOiAweGE5LFxuICAgIC8vIGNvcHlyaWdodCBzaWduXG4gICAgMHg5YzogMHgyMTIwLFxuICAgIC8vIFNlcnZpY2UgbWFya1xuICAgIDB4OWQ6IDB4MjAyMixcbiAgICAvLyAocm91bmQpIGJ1bGxldFxuICAgIDB4OWU6IDB4MjAxYyxcbiAgICAvLyBMZWZ0IGRvdWJsZSBxdW90YXRpb24gbWFya1xuICAgIDB4OWY6IDB4MjAxZCxcbiAgICAvLyBSaWdodCBkb3VibGUgcXVvdGF0aW9uIG1hcmtcbiAgICAweGEwOiAweGMwLFxuICAgIC8vIHVwcGVyY2FzZSBBLCBncmF2ZSBhY2NlbnRcbiAgICAweGExOiAweGMyLFxuICAgIC8vIHVwcGVyY2FzZSBBLCBjaXJjdW1mbGV4XG4gICAgMHhhMjogMHhjNyxcbiAgICAvLyB1cHBlcmNhc2UgQyB3aXRoIGNlZGlsbGFcbiAgICAweGEzOiAweGM4LFxuICAgIC8vIHVwcGVyY2FzZSBFLCBncmF2ZSBhY2NlbnRcbiAgICAweGE0OiAweGNhLFxuICAgIC8vIHVwcGVyY2FzZSBFLCBjaXJjdW1mbGV4XG4gICAgMHhhNTogMHhjYixcbiAgICAvLyBjYXBpdGFsIGxldHRlciBFIHdpdGggZGlhcmVzaXNcbiAgICAweGE2OiAweGViLFxuICAgIC8vIGxvd2VyY2FzZSBsZXR0ZXIgZSB3aXRoIGRpYXJlc2lzXG4gICAgMHhhNzogMHhjZSxcbiAgICAvLyB1cHBlcmNhc2UgSSwgY2lyY3VtZmxleFxuICAgIDB4YTg6IDB4Y2YsXG4gICAgLy8gdXBwZXJjYXNlIEksIHdpdGggZGlhcmVzaXNcbiAgICAweGE5OiAweGVmLFxuICAgIC8vIGxvd2VyY2FzZSBpLCB3aXRoIGRpYXJlc2lzXG4gICAgMHhhYTogMHhkNCxcbiAgICAvLyB1cHBlcmNhc2UgTywgY2lyY3VtZmxleFxuICAgIDB4YWI6IDB4ZDksXG4gICAgLy8gdXBwZXJjYXNlIFUsIGdyYXZlIGFjY2VudFxuICAgIDB4YWM6IDB4ZjksXG4gICAgLy8gbG93ZXJjYXNlIHUsIGdyYXZlIGFjY2VudFxuICAgIDB4YWQ6IDB4ZGIsXG4gICAgLy8gdXBwZXJjYXNlIFUsIGNpcmN1bWZsZXhcbiAgICAweGFlOiAweGFiLFxuICAgIC8vIGxlZnQtcG9pbnRpbmcgZG91YmxlIGFuZ2xlIHF1b3RhdGlvbiBtYXJrXG4gICAgMHhhZjogMHhiYixcbiAgICAvLyByaWdodC1wb2ludGluZyBkb3VibGUgYW5nbGUgcXVvdGF0aW9uIG1hcmtcbiAgICAvLyBUSElTIEJMT0NLIElOQ0xVREVTIFRIRSAzMiBFWFRFTkRFRCAoVFdPLUJZVEUpIExJTkUgMjEgQ0hBUkFDVEVSU1xuICAgIC8vIFRIQVQgQ09NRSBGUk9NIEhJIEJZVEU9MHgxMyBBTkQgTE9XIEJFVFdFRU4gMHgyMCBBTkQgMHgzRlxuICAgIDB4YjA6IDB4YzMsXG4gICAgLy8gVXBwZXJjYXNlIEEsIHRpbGRlXG4gICAgMHhiMTogMHhlMyxcbiAgICAvLyBMb3dlcmNhc2UgYSwgdGlsZGVcbiAgICAweGIyOiAweGNkLFxuICAgIC8vIFVwcGVyY2FzZSBJLCBhY3V0ZSBhY2NlbnRcbiAgICAweGIzOiAweGNjLFxuICAgIC8vIFVwcGVyY2FzZSBJLCBncmF2ZSBhY2NlbnRcbiAgICAweGI0OiAweGVjLFxuICAgIC8vIExvd2VyY2FzZSBpLCBncmF2ZSBhY2NlbnRcbiAgICAweGI1OiAweGQyLFxuICAgIC8vIFVwcGVyY2FzZSBPLCBncmF2ZSBhY2NlbnRcbiAgICAweGI2OiAweGYyLFxuICAgIC8vIExvd2VyY2FzZSBvLCBncmF2ZSBhY2NlbnRcbiAgICAweGI3OiAweGQ1LFxuICAgIC8vIFVwcGVyY2FzZSBPLCB0aWxkZVxuICAgIDB4Yjg6IDB4ZjUsXG4gICAgLy8gTG93ZXJjYXNlIG8sIHRpbGRlXG4gICAgMHhiOTogMHg3YixcbiAgICAvLyBPcGVuIGN1cmx5IGJyYWNlXG4gICAgMHhiYTogMHg3ZCxcbiAgICAvLyBDbG9zaW5nIGN1cmx5IGJyYWNlXG4gICAgMHhiYjogMHg1YyxcbiAgICAvLyBCYWNrc2xhc2hcbiAgICAweGJjOiAweDVlLFxuICAgIC8vIENhcmV0XG4gICAgMHhiZDogMHg1ZixcbiAgICAvLyBVbmRlcnNjb3JlXG4gICAgMHhiZTogMHg3YyxcbiAgICAvLyBQaXBlICh2ZXJ0aWNhbCBsaW5lKVxuICAgIDB4YmY6IDB4MjIzYyxcbiAgICAvLyBUaWxkZSBvcGVyYXRvclxuICAgIDB4YzA6IDB4YzQsXG4gICAgLy8gVXBwZXJjYXNlIEEsIHVtbGF1dFxuICAgIDB4YzE6IDB4ZTQsXG4gICAgLy8gTG93ZXJjYXNlIEEsIHVtbGF1dFxuICAgIDB4YzI6IDB4ZDYsXG4gICAgLy8gVXBwZXJjYXNlIE8sIHVtbGF1dFxuICAgIDB4YzM6IDB4ZjYsXG4gICAgLy8gTG93ZXJjYXNlIG8sIHVtbGF1dFxuICAgIDB4YzQ6IDB4ZGYsXG4gICAgLy8gRXNzemV0dCAoc2hhcnAgUylcbiAgICAweGM1OiAweGE1LFxuICAgIC8vIFllbiBzeW1ib2xcbiAgICAweGM2OiAweGE0LFxuICAgIC8vIEdlbmVyaWMgY3VycmVuY3kgc2lnblxuICAgIDB4Yzc6IDB4MjUwMyxcbiAgICAvLyBCb3ggZHJhd2luZ3MgaGVhdnkgdmVydGljYWxcbiAgICAweGM4OiAweGM1LFxuICAgIC8vIFVwcGVyY2FzZSBBLCByaW5nXG4gICAgMHhjOTogMHhlNSxcbiAgICAvLyBMb3dlcmNhc2UgQSwgcmluZ1xuICAgIDB4Y2E6IDB4ZDgsXG4gICAgLy8gVXBwZXJjYXNlIE8sIHN0cm9rZVxuICAgIDB4Y2I6IDB4ZjgsXG4gICAgLy8gTG93ZXJjYXNlIG8sIHN0cm9rXG4gICAgMHhjYzogMHgyNTBmLFxuICAgIC8vIEJveCBkcmF3aW5ncyBoZWF2eSBkb3duIGFuZCByaWdodFxuICAgIDB4Y2Q6IDB4MjUxMyxcbiAgICAvLyBCb3ggZHJhd2luZ3MgaGVhdnkgZG93biBhbmQgbGVmdFxuICAgIDB4Y2U6IDB4MjUxNyxcbiAgICAvLyBCb3ggZHJhd2luZ3MgaGVhdnkgdXAgYW5kIHJpZ2h0XG4gICAgMHhjZjogMHgyNTFiIC8vIEJveCBkcmF3aW5ncyBoZWF2eSB1cCBhbmQgbGVmdFxuICB9O1xuXG4gIC8qKlxuICAgKiBVdGlsc1xuICAgKi9cbiAgdmFyIGdldENoYXJGb3JCeXRlID0gZnVuY3Rpb24gZ2V0Q2hhckZvckJ5dGUoX2J5dGUpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShzcGVjaWFsQ2VhNjA4Q2hhcnNDb2Rlc1tfYnl0ZV0gfHwgX2J5dGUpO1xuICB9O1xuICB2YXIgTlJfUk9XUyA9IDE1O1xuICB2YXIgTlJfQ09MUyA9IDEwMDtcbiAgLy8gVGFibGVzIHRvIGxvb2sgdXAgcm93IGZyb20gUEFDIGRhdGFcbiAgdmFyIHJvd3NMb3dDaDEgPSB7XG4gICAgMHgxMTogMSxcbiAgICAweDEyOiAzLFxuICAgIDB4MTU6IDUsXG4gICAgMHgxNjogNyxcbiAgICAweDE3OiA5LFxuICAgIDB4MTA6IDExLFxuICAgIDB4MTM6IDEyLFxuICAgIDB4MTQ6IDE0XG4gIH07XG4gIHZhciByb3dzSGlnaENoMSA9IHtcbiAgICAweDExOiAyLFxuICAgIDB4MTI6IDQsXG4gICAgMHgxNTogNixcbiAgICAweDE2OiA4LFxuICAgIDB4MTc6IDEwLFxuICAgIDB4MTM6IDEzLFxuICAgIDB4MTQ6IDE1XG4gIH07XG4gIHZhciByb3dzTG93Q2gyID0ge1xuICAgIDB4MTk6IDEsXG4gICAgMHgxYTogMyxcbiAgICAweDFkOiA1LFxuICAgIDB4MWU6IDcsXG4gICAgMHgxZjogOSxcbiAgICAweDE4OiAxMSxcbiAgICAweDFiOiAxMixcbiAgICAweDFjOiAxNFxuICB9O1xuICB2YXIgcm93c0hpZ2hDaDIgPSB7XG4gICAgMHgxOTogMixcbiAgICAweDFhOiA0LFxuICAgIDB4MWQ6IDYsXG4gICAgMHgxZTogOCxcbiAgICAweDFmOiAxMCxcbiAgICAweDFiOiAxMyxcbiAgICAweDFjOiAxNVxuICB9O1xuICB2YXIgYmFja2dyb3VuZENvbG9ycyA9IFsnd2hpdGUnLCAnZ3JlZW4nLCAnYmx1ZScsICdjeWFuJywgJ3JlZCcsICd5ZWxsb3cnLCAnbWFnZW50YScsICdibGFjaycsICd0cmFuc3BhcmVudCddO1xuICB2YXIgQ2FwdGlvbnNMb2dnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhcHRpb25zTG9nZ2VyKCkge1xuICAgICAgdGhpcy50aW1lID0gbnVsbDtcbiAgICAgIHRoaXMudmVyYm9zZUxldmVsID0gMDtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IENhcHRpb25zTG9nZ2VyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ubG9nID0gZnVuY3Rpb24gbG9nKHNldmVyaXR5LCBtc2cpIHtcbiAgICAgIGlmICh0aGlzLnZlcmJvc2VMZXZlbCA+PSBzZXZlcml0eSkge1xuICAgICAgICB2YXIgbSA9IHR5cGVvZiBtc2cgPT09ICdmdW5jdGlvbicgPyBtc2coKSA6IG1zZztcbiAgICAgICAgbG9nZ2VyLmxvZyh0aGlzLnRpbWUgKyBcIiBbXCIgKyBzZXZlcml0eSArIFwiXSBcIiArIG0pO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENhcHRpb25zTG9nZ2VyO1xuICB9KCk7XG4gIHZhciBudW1BcnJheVRvSGV4QXJyYXkgPSBmdW5jdGlvbiBudW1BcnJheVRvSGV4QXJyYXkobnVtQXJyYXkpIHtcbiAgICB2YXIgaGV4QXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG51bUFycmF5Lmxlbmd0aDsgaisrKSB7XG4gICAgICBoZXhBcnJheS5wdXNoKG51bUFycmF5W2pdLnRvU3RyaW5nKDE2KSk7XG4gICAgfVxuICAgIHJldHVybiBoZXhBcnJheTtcbiAgfTtcbiAgdmFyIFBlblN0YXRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQZW5TdGF0ZSgpIHtcbiAgICAgIHRoaXMuZm9yZWdyb3VuZCA9ICd3aGl0ZSc7XG4gICAgICB0aGlzLnVuZGVybGluZSA9IGZhbHNlO1xuICAgICAgdGhpcy5pdGFsaWNzID0gZmFsc2U7XG4gICAgICB0aGlzLmJhY2tncm91bmQgPSAnYmxhY2snO1xuICAgICAgdGhpcy5mbGFzaCA9IGZhbHNlO1xuICAgIH1cbiAgICB2YXIgX3Byb3RvMiA9IFBlblN0YXRlLnByb3RvdHlwZTtcbiAgICBfcHJvdG8yLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICB0aGlzLmZvcmVncm91bmQgPSAnd2hpdGUnO1xuICAgICAgdGhpcy51bmRlcmxpbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuaXRhbGljcyA9IGZhbHNlO1xuICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gJ2JsYWNrJztcbiAgICAgIHRoaXMuZmxhc2ggPSBmYWxzZTtcbiAgICB9O1xuICAgIF9wcm90bzIuc2V0U3R5bGVzID0gZnVuY3Rpb24gc2V0U3R5bGVzKHN0eWxlcykge1xuICAgICAgdmFyIGF0dHJpYnMgPSBbJ2ZvcmVncm91bmQnLCAndW5kZXJsaW5lJywgJ2l0YWxpY3MnLCAnYmFja2dyb3VuZCcsICdmbGFzaCddO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IGF0dHJpYnNbaV07XG4gICAgICAgIGlmIChzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGUpKSB7XG4gICAgICAgICAgdGhpc1tzdHlsZV0gPSBzdHlsZXNbc3R5bGVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8yLmlzRGVmYXVsdCA9IGZ1bmN0aW9uIGlzRGVmYXVsdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmZvcmVncm91bmQgPT09ICd3aGl0ZScgJiYgIXRoaXMudW5kZXJsaW5lICYmICF0aGlzLml0YWxpY3MgJiYgdGhpcy5iYWNrZ3JvdW5kID09PSAnYmxhY2snICYmICF0aGlzLmZsYXNoO1xuICAgIH07XG4gICAgX3Byb3RvMi5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMob3RoZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmZvcmVncm91bmQgPT09IG90aGVyLmZvcmVncm91bmQgJiYgdGhpcy51bmRlcmxpbmUgPT09IG90aGVyLnVuZGVybGluZSAmJiB0aGlzLml0YWxpY3MgPT09IG90aGVyLml0YWxpY3MgJiYgdGhpcy5iYWNrZ3JvdW5kID09PSBvdGhlci5iYWNrZ3JvdW5kICYmIHRoaXMuZmxhc2ggPT09IG90aGVyLmZsYXNoO1xuICAgIH07XG4gICAgX3Byb3RvMi5jb3B5ID0gZnVuY3Rpb24gY29weShuZXdQZW5TdGF0ZSkge1xuICAgICAgdGhpcy5mb3JlZ3JvdW5kID0gbmV3UGVuU3RhdGUuZm9yZWdyb3VuZDtcbiAgICAgIHRoaXMudW5kZXJsaW5lID0gbmV3UGVuU3RhdGUudW5kZXJsaW5lO1xuICAgICAgdGhpcy5pdGFsaWNzID0gbmV3UGVuU3RhdGUuaXRhbGljcztcbiAgICAgIHRoaXMuYmFja2dyb3VuZCA9IG5ld1BlblN0YXRlLmJhY2tncm91bmQ7XG4gICAgICB0aGlzLmZsYXNoID0gbmV3UGVuU3RhdGUuZmxhc2g7XG4gICAgfTtcbiAgICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJ2NvbG9yPScgKyB0aGlzLmZvcmVncm91bmQgKyAnLCB1bmRlcmxpbmU9JyArIHRoaXMudW5kZXJsaW5lICsgJywgaXRhbGljcz0nICsgdGhpcy5pdGFsaWNzICsgJywgYmFja2dyb3VuZD0nICsgdGhpcy5iYWNrZ3JvdW5kICsgJywgZmxhc2g9JyArIHRoaXMuZmxhc2g7XG4gICAgfTtcbiAgICByZXR1cm4gUGVuU3RhdGU7XG4gIH0oKTtcbiAgLyoqXG4gICAqIFVuaWNvZGUgY2hhcmFjdGVyIHdpdGggc3R5bGluZyBhbmQgYmFja2dyb3VuZC5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB2YXIgU3R5bGVkVW5pY29kZUNoYXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0eWxlZFVuaWNvZGVDaGFyKCkge1xuICAgICAgdGhpcy51Y2hhciA9ICcgJztcbiAgICAgIHRoaXMucGVuU3RhdGUgPSBuZXcgUGVuU3RhdGUoKTtcbiAgICB9XG4gICAgdmFyIF9wcm90bzMgPSBTdHlsZWRVbmljb2RlQ2hhci5wcm90b3R5cGU7XG4gICAgX3Byb3RvMy5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy51Y2hhciA9ICcgJztcbiAgICAgIHRoaXMucGVuU3RhdGUucmVzZXQoKTtcbiAgICB9O1xuICAgIF9wcm90bzMuc2V0Q2hhciA9IGZ1bmN0aW9uIHNldENoYXIodWNoYXIsIG5ld1BlblN0YXRlKSB7XG4gICAgICB0aGlzLnVjaGFyID0gdWNoYXI7XG4gICAgICB0aGlzLnBlblN0YXRlLmNvcHkobmV3UGVuU3RhdGUpO1xuICAgIH07XG4gICAgX3Byb3RvMy5zZXRQZW5TdGF0ZSA9IGZ1bmN0aW9uIHNldFBlblN0YXRlKG5ld1BlblN0YXRlKSB7XG4gICAgICB0aGlzLnBlblN0YXRlLmNvcHkobmV3UGVuU3RhdGUpO1xuICAgIH07XG4gICAgX3Byb3RvMy5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMob3RoZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnVjaGFyID09PSBvdGhlci51Y2hhciAmJiB0aGlzLnBlblN0YXRlLmVxdWFscyhvdGhlci5wZW5TdGF0ZSk7XG4gICAgfTtcbiAgICBfcHJvdG8zLmNvcHkgPSBmdW5jdGlvbiBjb3B5KG5ld0NoYXIpIHtcbiAgICAgIHRoaXMudWNoYXIgPSBuZXdDaGFyLnVjaGFyO1xuICAgICAgdGhpcy5wZW5TdGF0ZS5jb3B5KG5ld0NoYXIucGVuU3RhdGUpO1xuICAgIH07XG4gICAgX3Byb3RvMy5pc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnVjaGFyID09PSAnICcgJiYgdGhpcy5wZW5TdGF0ZS5pc0RlZmF1bHQoKTtcbiAgICB9O1xuICAgIHJldHVybiBTdHlsZWRVbmljb2RlQ2hhcjtcbiAgfSgpO1xuICAvKipcbiAgICogQ0VBLTYwOCByb3cgY29uc2lzdGluZyBvZiBOUl9DT0xTIGluc3RhbmNlcyBvZiBTdHlsZWRVbmljb2RlQ2hhci5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB2YXIgUm93ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSb3cobG9nZ2VyKSB7XG4gICAgICB0aGlzLmNoYXJzID0gW107XG4gICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICB0aGlzLmN1cnJQZW5TdGF0ZSA9IG5ldyBQZW5TdGF0ZSgpO1xuICAgICAgdGhpcy5jdWVTdGFydFRpbWUgPSBudWxsO1xuICAgICAgdGhpcy5sb2dnZXIgPSB2b2lkIDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IE5SX0NPTFM7IGkrKykge1xuICAgICAgICB0aGlzLmNoYXJzLnB1c2gobmV3IFN0eWxlZFVuaWNvZGVDaGFyKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgfVxuICAgIHZhciBfcHJvdG80ID0gUm93LnByb3RvdHlwZTtcbiAgICBfcHJvdG80LmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOUl9DT0xTOyBpKyspIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoYXJzW2ldLmVxdWFscyhvdGhlci5jaGFyc1tpXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgX3Byb3RvNC5jb3B5ID0gZnVuY3Rpb24gY29weShvdGhlcikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOUl9DT0xTOyBpKyspIHtcbiAgICAgICAgdGhpcy5jaGFyc1tpXS5jb3B5KG90aGVyLmNoYXJzW2ldKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90bzQuaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gICAgICB2YXIgZW1wdHkgPSB0cnVlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOUl9DT0xTOyBpKyspIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoYXJzW2ldLmlzRW1wdHkoKSkge1xuICAgICAgICAgIGVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgU2V0IHRoZSBjdXJzb3IgdG8gYSB2YWxpZCBjb2x1bW4uXG4gICAgICovO1xuICAgIF9wcm90bzQuc2V0Q3Vyc29yID0gZnVuY3Rpb24gc2V0Q3Vyc29yKGFic1Bvcykge1xuICAgICAgaWYgKHRoaXMucG9zICE9PSBhYnNQb3MpIHtcbiAgICAgICAgdGhpcy5wb3MgPSBhYnNQb3M7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wb3MgPCAwKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygzLCAnTmVnYXRpdmUgY3Vyc29yIHBvc2l0aW9uICcgKyB0aGlzLnBvcyk7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wb3MgPiBOUl9DT0xTKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygzLCAnVG9vIGxhcmdlIGN1cnNvciBwb3NpdGlvbiAnICsgdGhpcy5wb3MpO1xuICAgICAgICB0aGlzLnBvcyA9IE5SX0NPTFM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTW92ZSB0aGUgY3Vyc29yIHJlbGF0aXZlIHRvIGN1cnJlbnQgcG9zaXRpb24uXG4gICAgICovO1xuICAgIF9wcm90bzQubW92ZUN1cnNvciA9IGZ1bmN0aW9uIG1vdmVDdXJzb3IocmVsUG9zKSB7XG4gICAgICB2YXIgbmV3UG9zID0gdGhpcy5wb3MgKyByZWxQb3M7XG4gICAgICBpZiAocmVsUG9zID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5wb3MgKyAxOyBpIDwgbmV3UG9zICsgMTsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5jaGFyc1tpXS5zZXRQZW5TdGF0ZSh0aGlzLmN1cnJQZW5TdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0Q3Vyc29yKG5ld1Bvcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmFja3NwYWNlLCBtb3ZlIG9uZSBzdGVwIGJhY2sgYW5kIGNsZWFyIGNoYXJhY3Rlci5cbiAgICAgKi87XG4gICAgX3Byb3RvNC5iYWNrU3BhY2UgPSBmdW5jdGlvbiBiYWNrU3BhY2UoKSB7XG4gICAgICB0aGlzLm1vdmVDdXJzb3IoLTEpO1xuICAgICAgdGhpcy5jaGFyc1t0aGlzLnBvc10uc2V0Q2hhcignICcsIHRoaXMuY3VyclBlblN0YXRlKTtcbiAgICB9O1xuICAgIF9wcm90bzQuaW5zZXJ0Q2hhciA9IGZ1bmN0aW9uIGluc2VydENoYXIoX2J5dGUyKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgaWYgKF9ieXRlMiA+PSAweDkwKSB7XG4gICAgICAgIC8vIEV4dGVuZGVkIGNoYXJcbiAgICAgICAgdGhpcy5iYWNrU3BhY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBfY2hhciA9IGdldENoYXJGb3JCeXRlKF9ieXRlMik7XG4gICAgICBpZiAodGhpcy5wb3MgPj0gTlJfQ09MUykge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAnQ2Fubm90IGluc2VydCAnICsgX2J5dGUyLnRvU3RyaW5nKDE2KSArICcgKCcgKyBfY2hhciArICcpIGF0IHBvc2l0aW9uICcgKyBfdGhpcy5wb3MgKyAnLiBTa2lwcGluZyBpdCEnO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGFyc1t0aGlzLnBvc10uc2V0Q2hhcihfY2hhciwgdGhpcy5jdXJyUGVuU3RhdGUpO1xuICAgICAgdGhpcy5tb3ZlQ3Vyc29yKDEpO1xuICAgIH07XG4gICAgX3Byb3RvNC5jbGVhckZyb21Qb3MgPSBmdW5jdGlvbiBjbGVhckZyb21Qb3Moc3RhcnRQb3MpIHtcbiAgICAgIHZhciBpO1xuICAgICAgZm9yIChpID0gc3RhcnRQb3M7IGkgPCBOUl9DT0xTOyBpKyspIHtcbiAgICAgICAgdGhpcy5jaGFyc1tpXS5yZXNldCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvNC5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5jbGVhckZyb21Qb3MoMCk7XG4gICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICB0aGlzLmN1cnJQZW5TdGF0ZS5yZXNldCgpO1xuICAgIH07XG4gICAgX3Byb3RvNC5jbGVhclRvRW5kT2ZSb3cgPSBmdW5jdGlvbiBjbGVhclRvRW5kT2ZSb3coKSB7XG4gICAgICB0aGlzLmNsZWFyRnJvbVBvcyh0aGlzLnBvcyk7XG4gICAgfTtcbiAgICBfcHJvdG80LmdldFRleHRTdHJpbmcgPSBmdW5jdGlvbiBnZXRUZXh0U3RyaW5nKCkge1xuICAgICAgdmFyIGNoYXJzID0gW107XG4gICAgICB2YXIgZW1wdHkgPSB0cnVlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOUl9DT0xTOyBpKyspIHtcbiAgICAgICAgdmFyIF9jaGFyMiA9IHRoaXMuY2hhcnNbaV0udWNoYXI7XG4gICAgICAgIGlmIChfY2hhcjIgIT09ICcgJykge1xuICAgICAgICAgIGVtcHR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY2hhcnMucHVzaChfY2hhcjIpO1xuICAgICAgfVxuICAgICAgaWYgKGVtcHR5KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaGFycy5qb2luKCcnKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90bzQuc2V0UGVuU3R5bGVzID0gZnVuY3Rpb24gc2V0UGVuU3R5bGVzKHN0eWxlcykge1xuICAgICAgdGhpcy5jdXJyUGVuU3RhdGUuc2V0U3R5bGVzKHN0eWxlcyk7XG4gICAgICB2YXIgY3VyckNoYXIgPSB0aGlzLmNoYXJzW3RoaXMucG9zXTtcbiAgICAgIGN1cnJDaGFyLnNldFBlblN0YXRlKHRoaXMuY3VyclBlblN0YXRlKTtcbiAgICB9O1xuICAgIHJldHVybiBSb3c7XG4gIH0oKTtcblxuICAvKipcbiAgICogS2VlcCBhIENFQS02MDggc2NyZWVuIG9mIDMyeDE1IHN0eWxlZCBjaGFyYWN0ZXJzXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdmFyIENhcHRpb25TY3JlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhcHRpb25TY3JlZW4obG9nZ2VyKSB7XG4gICAgICB0aGlzLnJvd3MgPSBbXTtcbiAgICAgIHRoaXMuY3VyclJvdyA9IE5SX1JPV1MgLSAxO1xuICAgICAgdGhpcy5uclJvbGxVcFJvd3MgPSBudWxsO1xuICAgICAgdGhpcy5sYXN0T3V0cHV0U2NyZWVuID0gbnVsbDtcbiAgICAgIHRoaXMubG9nZ2VyID0gdm9pZCAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOUl9ST1dTOyBpKyspIHtcbiAgICAgICAgdGhpcy5yb3dzLnB1c2gobmV3IFJvdyhsb2dnZXIpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICAgIH1cbiAgICB2YXIgX3Byb3RvNSA9IENhcHRpb25TY3JlZW4ucHJvdG90eXBlO1xuICAgIF9wcm90bzUucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTlJfUk9XUzsgaSsrKSB7XG4gICAgICAgIHRoaXMucm93c1tpXS5jbGVhcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5jdXJyUm93ID0gTlJfUk9XUyAtIDE7XG4gICAgfTtcbiAgICBfcHJvdG81LmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICAgICAgdmFyIGVxdWFsID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTlJfUk9XUzsgaSsrKSB7XG4gICAgICAgIGlmICghdGhpcy5yb3dzW2ldLmVxdWFscyhvdGhlci5yb3dzW2ldKSkge1xuICAgICAgICAgIGVxdWFsID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBlcXVhbDtcbiAgICB9O1xuICAgIF9wcm90bzUuY29weSA9IGZ1bmN0aW9uIGNvcHkob3RoZXIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTlJfUk9XUzsgaSsrKSB7XG4gICAgICAgIHRoaXMucm93c1tpXS5jb3B5KG90aGVyLnJvd3NbaV0pO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvNS5pc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICAgIHZhciBlbXB0eSA9IHRydWU7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IE5SX1JPV1M7IGkrKykge1xuICAgICAgICBpZiAoIXRoaXMucm93c1tpXS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICBlbXB0eSA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHk7XG4gICAgfTtcbiAgICBfcHJvdG81LmJhY2tTcGFjZSA9IGZ1bmN0aW9uIGJhY2tTcGFjZSgpIHtcbiAgICAgIHZhciByb3cgPSB0aGlzLnJvd3NbdGhpcy5jdXJyUm93XTtcbiAgICAgIHJvdy5iYWNrU3BhY2UoKTtcbiAgICB9O1xuICAgIF9wcm90bzUuY2xlYXJUb0VuZE9mUm93ID0gZnVuY3Rpb24gY2xlYXJUb0VuZE9mUm93KCkge1xuICAgICAgdmFyIHJvdyA9IHRoaXMucm93c1t0aGlzLmN1cnJSb3ddO1xuICAgICAgcm93LmNsZWFyVG9FbmRPZlJvdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydCBhIGNoYXJhY3RlciAod2l0aG91dCBzdHlsaW5nKSBpbiB0aGUgY3VycmVudCByb3cuXG4gICAgICovO1xuICAgIF9wcm90bzUuaW5zZXJ0Q2hhciA9IGZ1bmN0aW9uIGluc2VydENoYXIoX2NoYXIzKSB7XG4gICAgICB2YXIgcm93ID0gdGhpcy5yb3dzW3RoaXMuY3VyclJvd107XG4gICAgICByb3cuaW5zZXJ0Q2hhcihfY2hhcjMpO1xuICAgIH07XG4gICAgX3Byb3RvNS5zZXRQZW4gPSBmdW5jdGlvbiBzZXRQZW4oc3R5bGVzKSB7XG4gICAgICB2YXIgcm93ID0gdGhpcy5yb3dzW3RoaXMuY3VyclJvd107XG4gICAgICByb3cuc2V0UGVuU3R5bGVzKHN0eWxlcyk7XG4gICAgfTtcbiAgICBfcHJvdG81Lm1vdmVDdXJzb3IgPSBmdW5jdGlvbiBtb3ZlQ3Vyc29yKHJlbFBvcykge1xuICAgICAgdmFyIHJvdyA9IHRoaXMucm93c1t0aGlzLmN1cnJSb3ddO1xuICAgICAgcm93Lm1vdmVDdXJzb3IocmVsUG9zKTtcbiAgICB9O1xuICAgIF9wcm90bzUuc2V0Q3Vyc29yID0gZnVuY3Rpb24gc2V0Q3Vyc29yKGFic1Bvcykge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKDIsICdzZXRDdXJzb3I6ICcgKyBhYnNQb3MpO1xuICAgICAgdmFyIHJvdyA9IHRoaXMucm93c1t0aGlzLmN1cnJSb3ddO1xuICAgICAgcm93LnNldEN1cnNvcihhYnNQb3MpO1xuICAgIH07XG4gICAgX3Byb3RvNS5zZXRQQUMgPSBmdW5jdGlvbiBzZXRQQUMocGFjRGF0YSkge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKDIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICdwYWNEYXRhID0gJyArIHN0cmluZ2lmeShwYWNEYXRhKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIG5ld1JvdyA9IHBhY0RhdGEucm93IC0gMTtcbiAgICAgIGlmICh0aGlzLm5yUm9sbFVwUm93cyAmJiBuZXdSb3cgPCB0aGlzLm5yUm9sbFVwUm93cyAtIDEpIHtcbiAgICAgICAgbmV3Um93ID0gdGhpcy5uclJvbGxVcFJvd3MgLSAxO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHN1cmUgdGhpcyBvbmx5IGFmZmVjdHMgUm9sbC11cCBDYXB0aW9ucyBieSBjaGVja2luZyB0aGlzLm5yUm9sbFVwUm93c1xuICAgICAgaWYgKHRoaXMubnJSb2xsVXBSb3dzICYmIHRoaXMuY3VyclJvdyAhPT0gbmV3Um93KSB7XG4gICAgICAgIC8vIGNsZWFyIGFsbCByb3dzIGZpcnN0XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTlJfUk9XUzsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5yb3dzW2ldLmNsZWFyKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb3B5IHRoaXMubnJSb2xsVXBSb3dzIHJvd3MgZnJvbSBsYXN0T3V0cHV0U2NyZWVuIGFuZCBwbGFjZSBpdCBpbiB0aGUgbmV3Um93IGxvY2F0aW9uXG4gICAgICAgIC8vIHRvcFJvd0luZGV4IC0gdGhlIHN0YXJ0IG9mIHJvd3MgdG8gY29weSAoaW5jbHVzaXZlIGluZGV4KVxuICAgICAgICB2YXIgdG9wUm93SW5kZXggPSB0aGlzLmN1cnJSb3cgKyAxIC0gdGhpcy5uclJvbGxVcFJvd3M7XG4gICAgICAgIC8vIFdlIG9ubHkgY29weSBpZiB0aGUgbGFzdCBwb3NpdGlvbiB3YXMgYWxyZWFkeSBzaG93bi5cbiAgICAgICAgLy8gV2UgdXNlIHRoZSBjdWVTdGFydFRpbWUgdmFsdWUgdG8gY2hlY2sgdGhpcy5cbiAgICAgICAgdmFyIGxhc3RPdXRwdXRTY3JlZW4gPSB0aGlzLmxhc3RPdXRwdXRTY3JlZW47XG4gICAgICAgIGlmIChsYXN0T3V0cHV0U2NyZWVuKSB7XG4gICAgICAgICAgdmFyIHByZXZMaW5lVGltZSA9IGxhc3RPdXRwdXRTY3JlZW4ucm93c1t0b3BSb3dJbmRleF0uY3VlU3RhcnRUaW1lO1xuICAgICAgICAgIHZhciB0aW1lID0gdGhpcy5sb2dnZXIudGltZTtcbiAgICAgICAgICBpZiAocHJldkxpbmVUaW1lICE9PSBudWxsICYmIHRpbWUgIT09IG51bGwgJiYgcHJldkxpbmVUaW1lIDwgdGltZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMubnJSb2xsVXBSb3dzOyBfaSsrKSB7XG4gICAgICAgICAgICAgIHRoaXMucm93c1tuZXdSb3cgLSB0aGlzLm5yUm9sbFVwUm93cyArIF9pICsgMV0uY29weShsYXN0T3V0cHV0U2NyZWVuLnJvd3NbdG9wUm93SW5kZXggKyBfaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jdXJyUm93ID0gbmV3Um93O1xuICAgICAgdmFyIHJvdyA9IHRoaXMucm93c1t0aGlzLmN1cnJSb3ddO1xuICAgICAgaWYgKHBhY0RhdGEuaW5kZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBpbmRlbnQgPSBwYWNEYXRhLmluZGVudDtcbiAgICAgICAgdmFyIHByZXZQb3MgPSBNYXRoLm1heChpbmRlbnQgLSAxLCAwKTtcbiAgICAgICAgcm93LnNldEN1cnNvcihwYWNEYXRhLmluZGVudCk7XG4gICAgICAgIHBhY0RhdGEuY29sb3IgPSByb3cuY2hhcnNbcHJldlBvc10ucGVuU3RhdGUuZm9yZWdyb3VuZDtcbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICAgIGZvcmVncm91bmQ6IHBhY0RhdGEuY29sb3IsXG4gICAgICAgIHVuZGVybGluZTogcGFjRGF0YS51bmRlcmxpbmUsXG4gICAgICAgIGl0YWxpY3M6IHBhY0RhdGEuaXRhbGljcyxcbiAgICAgICAgYmFja2dyb3VuZDogJ2JsYWNrJyxcbiAgICAgICAgZmxhc2g6IGZhbHNlXG4gICAgICB9O1xuICAgICAgdGhpcy5zZXRQZW4oc3R5bGVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgYmFja2dyb3VuZC9leHRyYSBmb3JlZ3JvdW5kLCBidXQgZmlyc3QgZG8gYmFja19zcGFjZSwgYW5kIHRoZW4gaW5zZXJ0IHNwYWNlIChiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSkuXG4gICAgICovO1xuICAgIF9wcm90bzUuc2V0QmtnRGF0YSA9IGZ1bmN0aW9uIHNldEJrZ0RhdGEoYmtnRGF0YSkge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKDIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICdia2dEYXRhID0gJyArIHN0cmluZ2lmeShia2dEYXRhKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5iYWNrU3BhY2UoKTtcbiAgICAgIHRoaXMuc2V0UGVuKGJrZ0RhdGEpO1xuICAgICAgdGhpcy5pbnNlcnRDaGFyKDB4MjApOyAvLyBTcGFjZVxuICAgIH07XG4gICAgX3Byb3RvNS5zZXRSb2xsVXBSb3dzID0gZnVuY3Rpb24gc2V0Um9sbFVwUm93cyhuclJvd3MpIHtcbiAgICAgIHRoaXMubnJSb2xsVXBSb3dzID0gbnJSb3dzO1xuICAgIH07XG4gICAgX3Byb3RvNS5yb2xsVXAgPSBmdW5jdGlvbiByb2xsVXAoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIGlmICh0aGlzLm5yUm9sbFVwUm93cyA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coMywgJ3JvbGxfdXAgYnV0IG5yUm9sbFVwUm93cyBub3Qgc2V0IHlldCcpO1xuICAgICAgICByZXR1cm47IC8vIE5vdCBwcm9wZXJseSBzZXR1cFxuICAgICAgfVxuICAgICAgdGhpcy5sb2dnZXIubG9nKDEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5nZXREaXNwbGF5VGV4dCgpO1xuICAgICAgfSk7XG4gICAgICB2YXIgdG9wUm93SW5kZXggPSB0aGlzLmN1cnJSb3cgKyAxIC0gdGhpcy5uclJvbGxVcFJvd3M7XG4gICAgICB2YXIgdG9wUm93ID0gdGhpcy5yb3dzLnNwbGljZSh0b3BSb3dJbmRleCwgMSlbMF07XG4gICAgICB0b3BSb3cuY2xlYXIoKTtcbiAgICAgIHRoaXMucm93cy5zcGxpY2UodGhpcy5jdXJyUm93LCAwLCB0b3BSb3cpO1xuICAgICAgdGhpcy5sb2dnZXIubG9nKDIsICdSb2xsaW5nIHVwJyk7XG4gICAgICAvLyB0aGlzLmxvZ2dlci5sb2coVmVyYm9zZUxldmVsLlRFWFQsIHRoaXMuZ2V0X2Rpc3BsYXlfdGV4dCgpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgbm9uLWVtcHR5IHJvd3Mgd2l0aCBhcyB1bmljb2RlIHRleHQuXG4gICAgICovO1xuICAgIF9wcm90bzUuZ2V0RGlzcGxheVRleHQgPSBmdW5jdGlvbiBnZXREaXNwbGF5VGV4dChhc09uZVJvdykge1xuICAgICAgYXNPbmVSb3cgPSBhc09uZVJvdyB8fCBmYWxzZTtcbiAgICAgIHZhciBkaXNwbGF5VGV4dCA9IFtdO1xuICAgICAgdmFyIHRleHQgPSAnJztcbiAgICAgIHZhciByb3dOciA9IC0xO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOUl9ST1dTOyBpKyspIHtcbiAgICAgICAgdmFyIHJvd1RleHQgPSB0aGlzLnJvd3NbaV0uZ2V0VGV4dFN0cmluZygpO1xuICAgICAgICBpZiAocm93VGV4dCkge1xuICAgICAgICAgIHJvd05yID0gaSArIDE7XG4gICAgICAgICAgaWYgKGFzT25lUm93KSB7XG4gICAgICAgICAgICBkaXNwbGF5VGV4dC5wdXNoKCdSb3cgJyArIHJvd05yICsgXCI6ICdcIiArIHJvd1RleHQgKyBcIidcIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpc3BsYXlUZXh0LnB1c2gocm93VGV4dC50cmltKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRpc3BsYXlUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGFzT25lUm93KSB7XG4gICAgICAgICAgdGV4dCA9ICdbJyArIGRpc3BsYXlUZXh0LmpvaW4oJyB8ICcpICsgJ10nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHQgPSBkaXNwbGF5VGV4dC5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfTtcbiAgICBfcHJvdG81LmdldFRleHRBbmRGb3JtYXQgPSBmdW5jdGlvbiBnZXRUZXh0QW5kRm9ybWF0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucm93cztcbiAgICB9O1xuICAgIHJldHVybiBDYXB0aW9uU2NyZWVuO1xuICB9KCk7XG5cbiAgLy8gdmFyIG1vZGVzID0gWydNT0RFX1JPTEwtVVAnLCAnTU9ERV9QT1AtT04nLCAnTU9ERV9QQUlOVC1PTicsICdNT0RFX1RFWFQnXTtcbiAgdmFyIENlYTYwOENoYW5uZWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENlYTYwOENoYW5uZWwoY2hhbm5lbE51bWJlciwgb3V0cHV0RmlsdGVyLCBsb2dnZXIpIHtcbiAgICAgIHRoaXMuY2hOciA9IHZvaWQgMDtcbiAgICAgIHRoaXMub3V0cHV0RmlsdGVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5tb2RlID0gdm9pZCAwO1xuICAgICAgdGhpcy52ZXJib3NlID0gdm9pZCAwO1xuICAgICAgdGhpcy5kaXNwbGF5ZWRNZW1vcnkgPSB2b2lkIDA7XG4gICAgICB0aGlzLm5vbkRpc3BsYXllZE1lbW9yeSA9IHZvaWQgMDtcbiAgICAgIHRoaXMubGFzdE91dHB1dFNjcmVlbiA9IHZvaWQgMDtcbiAgICAgIHRoaXMuY3VyclJvbGxVcFJvdyA9IHZvaWQgMDtcbiAgICAgIHRoaXMud3JpdGVTY3JlZW4gPSB2b2lkIDA7XG4gICAgICB0aGlzLmN1ZVN0YXJ0VGltZSA9IHZvaWQgMDtcbiAgICAgIHRoaXMubG9nZ2VyID0gdm9pZCAwO1xuICAgICAgdGhpcy5jaE5yID0gY2hhbm5lbE51bWJlcjtcbiAgICAgIHRoaXMub3V0cHV0RmlsdGVyID0gb3V0cHV0RmlsdGVyO1xuICAgICAgdGhpcy5tb2RlID0gbnVsbDtcbiAgICAgIHRoaXMudmVyYm9zZSA9IDA7XG4gICAgICB0aGlzLmRpc3BsYXllZE1lbW9yeSA9IG5ldyBDYXB0aW9uU2NyZWVuKGxvZ2dlcik7XG4gICAgICB0aGlzLm5vbkRpc3BsYXllZE1lbW9yeSA9IG5ldyBDYXB0aW9uU2NyZWVuKGxvZ2dlcik7XG4gICAgICB0aGlzLmxhc3RPdXRwdXRTY3JlZW4gPSBuZXcgQ2FwdGlvblNjcmVlbihsb2dnZXIpO1xuICAgICAgdGhpcy5jdXJyUm9sbFVwUm93ID0gdGhpcy5kaXNwbGF5ZWRNZW1vcnkucm93c1tOUl9ST1dTIC0gMV07XG4gICAgICB0aGlzLndyaXRlU2NyZWVuID0gdGhpcy5kaXNwbGF5ZWRNZW1vcnk7XG4gICAgICB0aGlzLm1vZGUgPSBudWxsO1xuICAgICAgdGhpcy5jdWVTdGFydFRpbWUgPSBudWxsOyAvLyBLZWVwcyB0cmFjayBvZiB3aGVyZSBhIGN1ZSBzdGFydGVkLlxuICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgfVxuICAgIHZhciBfcHJvdG82ID0gQ2VhNjA4Q2hhbm5lbC5wcm90b3R5cGU7XG4gICAgX3Byb3RvNi5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5tb2RlID0gbnVsbDtcbiAgICAgIHRoaXMuZGlzcGxheWVkTWVtb3J5LnJlc2V0KCk7XG4gICAgICB0aGlzLm5vbkRpc3BsYXllZE1lbW9yeS5yZXNldCgpO1xuICAgICAgdGhpcy5sYXN0T3V0cHV0U2NyZWVuLnJlc2V0KCk7XG4gICAgICB0aGlzLm91dHB1dEZpbHRlci5yZXNldCgpO1xuICAgICAgdGhpcy5jdXJyUm9sbFVwUm93ID0gdGhpcy5kaXNwbGF5ZWRNZW1vcnkucm93c1tOUl9ST1dTIC0gMV07XG4gICAgICB0aGlzLndyaXRlU2NyZWVuID0gdGhpcy5kaXNwbGF5ZWRNZW1vcnk7XG4gICAgICB0aGlzLm1vZGUgPSBudWxsO1xuICAgICAgdGhpcy5jdWVTdGFydFRpbWUgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvNi5nZXRIYW5kbGVyID0gZnVuY3Rpb24gZ2V0SGFuZGxlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLm91dHB1dEZpbHRlcjtcbiAgICB9O1xuICAgIF9wcm90bzYuc2V0SGFuZGxlciA9IGZ1bmN0aW9uIHNldEhhbmRsZXIobmV3SGFuZGxlcikge1xuICAgICAgdGhpcy5vdXRwdXRGaWx0ZXIgPSBuZXdIYW5kbGVyO1xuICAgIH07XG4gICAgX3Byb3RvNi5zZXRQQUMgPSBmdW5jdGlvbiBzZXRQQUMocGFjRGF0YSkge1xuICAgICAgdGhpcy53cml0ZVNjcmVlbi5zZXRQQUMocGFjRGF0YSk7XG4gICAgfTtcbiAgICBfcHJvdG82LnNldEJrZ0RhdGEgPSBmdW5jdGlvbiBzZXRCa2dEYXRhKGJrZ0RhdGEpIHtcbiAgICAgIHRoaXMud3JpdGVTY3JlZW4uc2V0QmtnRGF0YShia2dEYXRhKTtcbiAgICB9O1xuICAgIF9wcm90bzYuc2V0TW9kZSA9IGZ1bmN0aW9uIHNldE1vZGUobmV3TW9kZSkge1xuICAgICAgaWYgKG5ld01vZGUgPT09IHRoaXMubW9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLm1vZGUgPSBuZXdNb2RlO1xuICAgICAgdGhpcy5sb2dnZXIubG9nKDIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICdNT0RFPScgKyBuZXdNb2RlO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5tb2RlID09PSAnTU9ERV9QT1AtT04nKSB7XG4gICAgICAgIHRoaXMud3JpdGVTY3JlZW4gPSB0aGlzLm5vbkRpc3BsYXllZE1lbW9yeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud3JpdGVTY3JlZW4gPSB0aGlzLmRpc3BsYXllZE1lbW9yeTtcbiAgICAgICAgdGhpcy53cml0ZVNjcmVlbi5yZXNldCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubW9kZSAhPT0gJ01PREVfUk9MTC1VUCcpIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5ZWRNZW1vcnkubnJSb2xsVXBSb3dzID0gbnVsbDtcbiAgICAgICAgdGhpcy5ub25EaXNwbGF5ZWRNZW1vcnkubnJSb2xsVXBSb3dzID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMubW9kZSA9IG5ld01vZGU7XG4gICAgfTtcbiAgICBfcHJvdG82Lmluc2VydENoYXJzID0gZnVuY3Rpb24gaW5zZXJ0Q2hhcnMoY2hhcnMpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndyaXRlU2NyZWVuLmluc2VydENoYXIoY2hhcnNbaV0pO1xuICAgICAgfVxuICAgICAgdmFyIHNjcmVlbiA9IHRoaXMud3JpdGVTY3JlZW4gPT09IHRoaXMuZGlzcGxheWVkTWVtb3J5ID8gJ0RJU1AnIDogJ05PTl9ESVNQJztcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzY3JlZW4gKyAnOiAnICsgX3RoaXMzLndyaXRlU2NyZWVuLmdldERpc3BsYXlUZXh0KHRydWUpO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5tb2RlID09PSAnTU9ERV9QQUlOVC1PTicgfHwgdGhpcy5tb2RlID09PSAnTU9ERV9ST0xMLVVQJykge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coMSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAnRElTUExBWUVEOiAnICsgX3RoaXMzLmRpc3BsYXllZE1lbW9yeS5nZXREaXNwbGF5VGV4dCh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub3V0cHV0RGF0YVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvNi5jY1JDTCA9IGZ1bmN0aW9uIGNjUkNMKCkge1xuICAgICAgLy8gUmVzdW1lIENhcHRpb24gTG9hZGluZyAoc3dpdGNoIG1vZGUgdG8gUG9wIE9uKVxuICAgICAgdGhpcy5sb2dnZXIubG9nKDIsICdSQ0wgLSBSZXN1bWUgQ2FwdGlvbiBMb2FkaW5nJyk7XG4gICAgICB0aGlzLnNldE1vZGUoJ01PREVfUE9QLU9OJyk7XG4gICAgfTtcbiAgICBfcHJvdG82LmNjQlMgPSBmdW5jdGlvbiBjY0JTKCkge1xuICAgICAgLy8gQmFja1NwYWNlXG4gICAgICB0aGlzLmxvZ2dlci5sb2coMiwgJ0JTIC0gQmFja1NwYWNlJyk7XG4gICAgICBpZiAodGhpcy5tb2RlID09PSAnTU9ERV9URVhUJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLndyaXRlU2NyZWVuLmJhY2tTcGFjZSgpO1xuICAgICAgaWYgKHRoaXMud3JpdGVTY3JlZW4gPT09IHRoaXMuZGlzcGxheWVkTWVtb3J5KSB7XG4gICAgICAgIHRoaXMub3V0cHV0RGF0YVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvNi5jY0FPRiA9IGZ1bmN0aW9uIGNjQU9GKCkge1xuICAgICAgLy8gUmVzZXJ2ZWQgKGZvcm1lcmx5IEFsYXJtIE9mZilcbiAgICB9O1xuICAgIF9wcm90bzYuY2NBT04gPSBmdW5jdGlvbiBjY0FPTigpIHtcbiAgICAgIC8vIFJlc2VydmVkIChmb3JtZXJseSBBbGFybSBPbilcbiAgICB9O1xuICAgIF9wcm90bzYuY2NERVIgPSBmdW5jdGlvbiBjY0RFUigpIHtcbiAgICAgIC8vIERlbGV0ZSB0byBFbmQgb2YgUm93XG4gICAgICB0aGlzLmxvZ2dlci5sb2coMiwgJ0RFUi0gRGVsZXRlIHRvIEVuZCBvZiBSb3cnKTtcbiAgICAgIHRoaXMud3JpdGVTY3JlZW4uY2xlYXJUb0VuZE9mUm93KCk7XG4gICAgICB0aGlzLm91dHB1dERhdGFVcGRhdGUoKTtcbiAgICB9O1xuICAgIF9wcm90bzYuY2NSVSA9IGZ1bmN0aW9uIGNjUlUobnJSb3dzKSB7XG4gICAgICAvLyBSb2xsLVVwIENhcHRpb25zLTIsMyxvciA0IFJvd3NcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygyLCAnUlUoJyArIG5yUm93cyArICcpIC0gUm9sbCBVcCcpO1xuICAgICAgdGhpcy53cml0ZVNjcmVlbiA9IHRoaXMuZGlzcGxheWVkTWVtb3J5O1xuICAgICAgdGhpcy5zZXRNb2RlKCdNT0RFX1JPTEwtVVAnKTtcbiAgICAgIHRoaXMud3JpdGVTY3JlZW4uc2V0Um9sbFVwUm93cyhuclJvd3MpO1xuICAgIH07XG4gICAgX3Byb3RvNi5jY0ZPTiA9IGZ1bmN0aW9uIGNjRk9OKCkge1xuICAgICAgLy8gRmxhc2ggT25cbiAgICAgIHRoaXMubG9nZ2VyLmxvZygyLCAnRk9OIC0gRmxhc2ggT24nKTtcbiAgICAgIHRoaXMud3JpdGVTY3JlZW4uc2V0UGVuKHtcbiAgICAgICAgZmxhc2g6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvNi5jY1JEQyA9IGZ1bmN0aW9uIGNjUkRDKCkge1xuICAgICAgLy8gUmVzdW1lIERpcmVjdCBDYXB0aW9uaW5nIChzd2l0Y2ggbW9kZSB0byBQYWludE9uKVxuICAgICAgdGhpcy5sb2dnZXIubG9nKDIsICdSREMgLSBSZXN1bWUgRGlyZWN0IENhcHRpb25pbmcnKTtcbiAgICAgIHRoaXMuc2V0TW9kZSgnTU9ERV9QQUlOVC1PTicpO1xuICAgIH07XG4gICAgX3Byb3RvNi5jY1RSID0gZnVuY3Rpb24gY2NUUigpIHtcbiAgICAgIC8vIFRleHQgUmVzdGFydCBpbiB0ZXh0IG1vZGUgKG5vdCBzdXBwb3J0ZWQsIGhvd2V2ZXIpXG4gICAgICB0aGlzLmxvZ2dlci5sb2coMiwgJ1RSJyk7XG4gICAgICB0aGlzLnNldE1vZGUoJ01PREVfVEVYVCcpO1xuICAgIH07XG4gICAgX3Byb3RvNi5jY1JURCA9IGZ1bmN0aW9uIGNjUlREKCkge1xuICAgICAgLy8gUmVzdW1lIFRleHQgRGlzcGxheSBpbiBUZXh0IG1vZGUgKG5vdCBzdXBwb3J0ZWQsIGhvd2V2ZXIpXG4gICAgICB0aGlzLmxvZ2dlci5sb2coMiwgJ1JURCcpO1xuICAgICAgdGhpcy5zZXRNb2RlKCdNT0RFX1RFWFQnKTtcbiAgICB9O1xuICAgIF9wcm90bzYuY2NFRE0gPSBmdW5jdGlvbiBjY0VETSgpIHtcbiAgICAgIC8vIEVyYXNlIERpc3BsYXllZCBNZW1vcnlcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygyLCAnRURNIC0gRXJhc2UgRGlzcGxheWVkIE1lbW9yeScpO1xuICAgICAgdGhpcy5kaXNwbGF5ZWRNZW1vcnkucmVzZXQoKTtcbiAgICAgIHRoaXMub3V0cHV0RGF0YVVwZGF0ZSh0cnVlKTtcbiAgICB9O1xuICAgIF9wcm90bzYuY2NDUiA9IGZ1bmN0aW9uIGNjQ1IoKSB7XG4gICAgICAvLyBDYXJyaWFnZSBSZXR1cm5cbiAgICAgIHRoaXMubG9nZ2VyLmxvZygyLCAnQ1IgLSBDYXJyaWFnZSBSZXR1cm4nKTtcbiAgICAgIHRoaXMud3JpdGVTY3JlZW4ucm9sbFVwKCk7XG4gICAgICB0aGlzLm91dHB1dERhdGFVcGRhdGUodHJ1ZSk7XG4gICAgfTtcbiAgICBfcHJvdG82LmNjRU5NID0gZnVuY3Rpb24gY2NFTk0oKSB7XG4gICAgICAvLyBFcmFzZSBOb24tRGlzcGxheWVkIE1lbW9yeVxuICAgICAgdGhpcy5sb2dnZXIubG9nKDIsICdFTk0gLSBFcmFzZSBOb24tZGlzcGxheWVkIE1lbW9yeScpO1xuICAgICAgdGhpcy5ub25EaXNwbGF5ZWRNZW1vcnkucmVzZXQoKTtcbiAgICB9O1xuICAgIF9wcm90bzYuY2NFT0MgPSBmdW5jdGlvbiBjY0VPQygpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuICAgICAgLy8gRW5kIG9mIENhcHRpb24gKEZsaXAgTWVtb3JpZXMpXG4gICAgICB0aGlzLmxvZ2dlci5sb2coMiwgJ0VPQyAtIEVuZCBPZiBDYXB0aW9uJyk7XG4gICAgICBpZiAodGhpcy5tb2RlID09PSAnTU9ERV9QT1AtT04nKSB7XG4gICAgICAgIHZhciB0bXAgPSB0aGlzLmRpc3BsYXllZE1lbW9yeTtcbiAgICAgICAgdGhpcy5kaXNwbGF5ZWRNZW1vcnkgPSB0aGlzLm5vbkRpc3BsYXllZE1lbW9yeTtcbiAgICAgICAgdGhpcy5ub25EaXNwbGF5ZWRNZW1vcnkgPSB0bXA7XG4gICAgICAgIHRoaXMud3JpdGVTY3JlZW4gPSB0aGlzLm5vbkRpc3BsYXllZE1lbW9yeTtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKDEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gJ0RJU1A6ICcgKyBfdGhpczQuZGlzcGxheWVkTWVtb3J5LmdldERpc3BsYXlUZXh0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5vdXRwdXREYXRhVXBkYXRlKHRydWUpO1xuICAgIH07XG4gICAgX3Byb3RvNi5jY1RPID0gZnVuY3Rpb24gY2NUTyhuckNvbHMpIHtcbiAgICAgIC8vIFRhYiBPZmZzZXQgMSwyLCBvciAzIGNvbHVtbnNcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygyLCAnVE8oJyArIG5yQ29scyArICcpIC0gVGFiIE9mZnNldCcpO1xuICAgICAgdGhpcy53cml0ZVNjcmVlbi5tb3ZlQ3Vyc29yKG5yQ29scyk7XG4gICAgfTtcbiAgICBfcHJvdG82LmNjTUlEUk9XID0gZnVuY3Rpb24gY2NNSURST1coc2Vjb25kQnl0ZSkge1xuICAgICAgLy8gUGFyc2UgTUlEUk9XIGNvbW1hbmRcbiAgICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICAgIGZsYXNoOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIHN0eWxlcy51bmRlcmxpbmUgPSBzZWNvbmRCeXRlICUgMiA9PT0gMTtcbiAgICAgIHN0eWxlcy5pdGFsaWNzID0gc2Vjb25kQnl0ZSA+PSAweDJlO1xuICAgICAgaWYgKCFzdHlsZXMuaXRhbGljcykge1xuICAgICAgICB2YXIgY29sb3JJbmRleCA9IE1hdGguZmxvb3Ioc2Vjb25kQnl0ZSAvIDIpIC0gMHgxMDtcbiAgICAgICAgdmFyIGNvbG9ycyA9IFsnd2hpdGUnLCAnZ3JlZW4nLCAnYmx1ZScsICdjeWFuJywgJ3JlZCcsICd5ZWxsb3cnLCAnbWFnZW50YSddO1xuICAgICAgICBzdHlsZXMuZm9yZWdyb3VuZCA9IGNvbG9yc1tjb2xvckluZGV4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlcy5mb3JlZ3JvdW5kID0gJ3doaXRlJztcbiAgICAgIH1cbiAgICAgIHRoaXMubG9nZ2VyLmxvZygyLCAnTUlEUk9XOiAnICsgc3RyaW5naWZ5KHN0eWxlcykpO1xuICAgICAgdGhpcy53cml0ZVNjcmVlbi5zZXRQZW4oc3R5bGVzKTtcbiAgICB9O1xuICAgIF9wcm90bzYub3V0cHV0RGF0YVVwZGF0ZSA9IGZ1bmN0aW9uIG91dHB1dERhdGFVcGRhdGUoZGlzcGF0Y2gpIHtcbiAgICAgIGlmIChkaXNwYXRjaCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGRpc3BhdGNoID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGltZSA9IHRoaXMubG9nZ2VyLnRpbWU7XG4gICAgICBpZiAodGltZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vdXRwdXRGaWx0ZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VlU3RhcnRUaW1lID09PSBudWxsICYmICF0aGlzLmRpc3BsYXllZE1lbW9yeS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAvLyBTdGFydCBvZiBhIG5ldyBjdWVcbiAgICAgICAgICB0aGlzLmN1ZVN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmRpc3BsYXllZE1lbW9yeS5lcXVhbHModGhpcy5sYXN0T3V0cHV0U2NyZWVuKSkge1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRGaWx0ZXIubmV3Q3VlKHRoaXMuY3VlU3RhcnRUaW1lLCB0aW1lLCB0aGlzLmxhc3RPdXRwdXRTY3JlZW4pO1xuICAgICAgICAgICAgaWYgKGRpc3BhdGNoICYmIHRoaXMub3V0cHV0RmlsdGVyLmRpc3BhdGNoQ3VlKSB7XG4gICAgICAgICAgICAgIHRoaXMub3V0cHV0RmlsdGVyLmRpc3BhdGNoQ3VlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN1ZVN0YXJ0VGltZSA9IHRoaXMuZGlzcGxheWVkTWVtb3J5LmlzRW1wdHkoKSA/IG51bGwgOiB0aW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhc3RPdXRwdXRTY3JlZW4uY29weSh0aGlzLmRpc3BsYXllZE1lbW9yeSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG82LmN1ZVNwbGl0QXRUaW1lID0gZnVuY3Rpb24gY3VlU3BsaXRBdFRpbWUodCkge1xuICAgICAgaWYgKHRoaXMub3V0cHV0RmlsdGVyKSB7XG4gICAgICAgIGlmICghdGhpcy5kaXNwbGF5ZWRNZW1vcnkuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgaWYgKHRoaXMub3V0cHV0RmlsdGVyLm5ld0N1ZSkge1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRGaWx0ZXIubmV3Q3VlKHRoaXMuY3VlU3RhcnRUaW1lLCB0LCB0aGlzLmRpc3BsYXllZE1lbW9yeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuY3VlU3RhcnRUaW1lID0gdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENlYTYwOENoYW5uZWw7XG4gIH0oKTsgLy8gV2lsbCBiZSAxIG9yIDIgd2hlbiBwYXJzaW5nIGNhcHRpb25zXG4gIHZhciBDZWE2MDhQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENlYTYwOFBhcnNlcihmaWVsZCwgb3V0MSwgb3V0Mikge1xuICAgICAgdGhpcy5jaGFubmVscyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuY3VycmVudENoYW5uZWwgPSAwO1xuICAgICAgdGhpcy5jbWRIaXN0b3J5ID0gY3JlYXRlQ21kSGlzdG9yeSgpO1xuICAgICAgdGhpcy5sb2dnZXIgPSB2b2lkIDA7XG4gICAgICB2YXIgbG9nZ2VyID0gdGhpcy5sb2dnZXIgPSBuZXcgQ2FwdGlvbnNMb2dnZXIoKTtcbiAgICAgIHRoaXMuY2hhbm5lbHMgPSBbbnVsbCwgbmV3IENlYTYwOENoYW5uZWwoZmllbGQsIG91dDEsIGxvZ2dlciksIG5ldyBDZWE2MDhDaGFubmVsKGZpZWxkICsgMSwgb3V0MiwgbG9nZ2VyKV07XG4gICAgfVxuICAgIHZhciBfcHJvdG83ID0gQ2VhNjA4UGFyc2VyLnByb3RvdHlwZTtcbiAgICBfcHJvdG83LmdldEhhbmRsZXIgPSBmdW5jdGlvbiBnZXRIYW5kbGVyKGNoYW5uZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmNoYW5uZWxzW2NoYW5uZWxdLmdldEhhbmRsZXIoKTtcbiAgICB9O1xuICAgIF9wcm90bzcuc2V0SGFuZGxlciA9IGZ1bmN0aW9uIHNldEhhbmRsZXIoY2hhbm5lbCwgbmV3SGFuZGxlcikge1xuICAgICAgdGhpcy5jaGFubmVsc1tjaGFubmVsXS5zZXRIYW5kbGVyKG5ld0hhbmRsZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBkYXRhIGZvciB0aW1lIHQgaW4gZm9ybXMgb2YgbGlzdCBvZiBieXRlcyAodW5zaWduZWQgaW50cykuIFRoZSBieXRlcyBhcmUgdHJlYXRlZCBhcyBwYWlycy5cbiAgICAgKi87XG4gICAgX3Byb3RvNy5hZGREYXRhID0gZnVuY3Rpb24gYWRkRGF0YSh0aW1lLCBieXRlTGlzdCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG4gICAgICB0aGlzLmxvZ2dlci50aW1lID0gdGltZTtcbiAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcbiAgICAgICAgICB2YXIgYSA9IGJ5dGVMaXN0W2ldICYgMHg3ZjtcbiAgICAgICAgICB2YXIgYiA9IGJ5dGVMaXN0W2kgKyAxXSAmIDB4N2Y7XG4gICAgICAgICAgdmFyIGNtZEZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgdmFyIGNoYXJzRm91bmQgPSBudWxsO1xuICAgICAgICAgIGlmIChhID09PSAwICYmIGIgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwOyAvLyBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczUubG9nZ2VyLmxvZygzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnWycgKyBudW1BcnJheVRvSGV4QXJyYXkoW2J5dGVMaXN0W2ldLCBieXRlTGlzdFtpICsgMV1dKSArICddIC0+ICgnICsgbnVtQXJyYXlUb0hleEFycmF5KFthLCBiXSkgKyAnKSc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNtZEhpc3RvcnkgPSBfdGhpczUuY21kSGlzdG9yeTtcbiAgICAgICAgICB2YXIgaXNDb250cm9sQ29kZSA9IGEgPj0gMHgxMCAmJiBhIDw9IDB4MWY7XG4gICAgICAgICAgaWYgKGlzQ29udHJvbENvZGUpIHtcbiAgICAgICAgICAgIC8vIFNraXAgcmVkdW5kYW50IGNvbnRyb2wgY29kZXNcbiAgICAgICAgICAgIGlmIChoYXNDbWRSZXBlYXRlZChhLCBiLCBjbWRIaXN0b3J5KSkge1xuICAgICAgICAgICAgICBzZXRMYXN0Q21kKG51bGwsIG51bGwsIGNtZEhpc3RvcnkpO1xuICAgICAgICAgICAgICBfdGhpczUubG9nZ2VyLmxvZygzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdSZXBlYXRlZCBjb21tYW5kICgnICsgbnVtQXJyYXlUb0hleEFycmF5KFthLCBiXSkgKyAnKSBpcyBkcm9wcGVkJztcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiAwOyAvLyBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0TGFzdENtZChhLCBiLCBfdGhpczUuY21kSGlzdG9yeSk7XG4gICAgICAgICAgICBjbWRGb3VuZCA9IF90aGlzNS5wYXJzZUNtZChhLCBiKTtcbiAgICAgICAgICAgIGlmICghY21kRm91bmQpIHtcbiAgICAgICAgICAgICAgY21kRm91bmQgPSBfdGhpczUucGFyc2VNaWRyb3coYSwgYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNtZEZvdW5kKSB7XG4gICAgICAgICAgICAgIGNtZEZvdW5kID0gX3RoaXM1LnBhcnNlUEFDKGEsIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjbWRGb3VuZCkge1xuICAgICAgICAgICAgICBjbWRGb3VuZCA9IF90aGlzNS5wYXJzZUJhY2tncm91bmRBdHRyaWJ1dGVzKGEsIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRMYXN0Q21kKG51bGwsIG51bGwsIGNtZEhpc3RvcnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWNtZEZvdW5kKSB7XG4gICAgICAgICAgICBjaGFyc0ZvdW5kID0gX3RoaXM1LnBhcnNlQ2hhcnMoYSwgYik7XG4gICAgICAgICAgICBpZiAoY2hhcnNGb3VuZCkge1xuICAgICAgICAgICAgICB2YXIgY3VyckNoTnIgPSBfdGhpczUuY3VycmVudENoYW5uZWw7XG4gICAgICAgICAgICAgIGlmIChjdXJyQ2hOciAmJiBjdXJyQ2hOciA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hhbm5lbCA9IF90aGlzNS5jaGFubmVsc1tjdXJyQ2hOcl07XG4gICAgICAgICAgICAgICAgY2hhbm5lbC5pbnNlcnRDaGFycyhjaGFyc0ZvdW5kKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpczUubG9nZ2VyLmxvZygyLCAnTm8gY2hhbm5lbCBmb3VuZCB5ZXQuIFRFWFQtTU9ERT8nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWNtZEZvdW5kICYmICFjaGFyc0ZvdW5kKSB7XG4gICAgICAgICAgICBfdGhpczUubG9nZ2VyLmxvZygyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcIkNvdWxkbid0IHBhcnNlIGNsZWFuZWQgZGF0YSBcIiArIG51bUFycmF5VG9IZXhBcnJheShbYSwgYl0pICsgJyBvcmlnOiAnICsgbnVtQXJyYXlUb0hleEFycmF5KFtieXRlTGlzdFtpXSwgYnl0ZUxpc3RbaSArIDFdXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9yZXQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVMaXN0Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIF9yZXQgPSBfbG9vcChpKTtcbiAgICAgICAgaWYgKF9yZXQgPT09IDApIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlIENvbW1hbmQuXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiBhIGNvbW1hbmQgd2FzIGZvdW5kXG4gICAgICovO1xuICAgIF9wcm90bzcucGFyc2VDbWQgPSBmdW5jdGlvbiBwYXJzZUNtZChhLCBiKSB7XG4gICAgICB2YXIgY29uZDEgPSAoYSA9PT0gMHgxNCB8fCBhID09PSAweDFjIHx8IGEgPT09IDB4MTUgfHwgYSA9PT0gMHgxZCkgJiYgYiA+PSAweDIwICYmIGIgPD0gMHgyZjtcbiAgICAgIHZhciBjb25kMiA9IChhID09PSAweDE3IHx8IGEgPT09IDB4MWYpICYmIGIgPj0gMHgyMSAmJiBiIDw9IDB4MjM7XG4gICAgICBpZiAoIShjb25kMSB8fCBjb25kMikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGNoTnIgPSBhID09PSAweDE0IHx8IGEgPT09IDB4MTUgfHwgYSA9PT0gMHgxNyA/IDEgOiAyO1xuICAgICAgdmFyIGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzW2NoTnJdO1xuICAgICAgaWYgKGEgPT09IDB4MTQgfHwgYSA9PT0gMHgxNSB8fCBhID09PSAweDFjIHx8IGEgPT09IDB4MWQpIHtcbiAgICAgICAgaWYgKGIgPT09IDB4MjApIHtcbiAgICAgICAgICBjaGFubmVsLmNjUkNMKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMHgyMSkge1xuICAgICAgICAgIGNoYW5uZWwuY2NCUygpO1xuICAgICAgICB9IGVsc2UgaWYgKGIgPT09IDB4MjIpIHtcbiAgICAgICAgICBjaGFubmVsLmNjQU9GKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMHgyMykge1xuICAgICAgICAgIGNoYW5uZWwuY2NBT04oKTtcbiAgICAgICAgfSBlbHNlIGlmIChiID09PSAweDI0KSB7XG4gICAgICAgICAgY2hhbm5lbC5jY0RFUigpO1xuICAgICAgICB9IGVsc2UgaWYgKGIgPT09IDB4MjUpIHtcbiAgICAgICAgICBjaGFubmVsLmNjUlUoMik7XG4gICAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMHgyNikge1xuICAgICAgICAgIGNoYW5uZWwuY2NSVSgzKTtcbiAgICAgICAgfSBlbHNlIGlmIChiID09PSAweDI3KSB7XG4gICAgICAgICAgY2hhbm5lbC5jY1JVKDQpO1xuICAgICAgICB9IGVsc2UgaWYgKGIgPT09IDB4MjgpIHtcbiAgICAgICAgICBjaGFubmVsLmNjRk9OKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMHgyOSkge1xuICAgICAgICAgIGNoYW5uZWwuY2NSREMoKTtcbiAgICAgICAgfSBlbHNlIGlmIChiID09PSAweDJhKSB7XG4gICAgICAgICAgY2hhbm5lbC5jY1RSKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMHgyYikge1xuICAgICAgICAgIGNoYW5uZWwuY2NSVEQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChiID09PSAweDJjKSB7XG4gICAgICAgICAgY2hhbm5lbC5jY0VETSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGIgPT09IDB4MmQpIHtcbiAgICAgICAgICBjaGFubmVsLmNjQ1IoKTtcbiAgICAgICAgfSBlbHNlIGlmIChiID09PSAweDJlKSB7XG4gICAgICAgICAgY2hhbm5lbC5jY0VOTSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGIgPT09IDB4MmYpIHtcbiAgICAgICAgICBjaGFubmVsLmNjRU9DKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGEgPT0gMHgxNyB8fCBhID09IDB4MUZcbiAgICAgICAgY2hhbm5lbC5jY1RPKGIgLSAweDIwKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY3VycmVudENoYW5uZWwgPSBjaE5yO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2UgbWlkcm93IHN0eWxpbmcgY29tbWFuZFxuICAgICAqLztcbiAgICBfcHJvdG83LnBhcnNlTWlkcm93ID0gZnVuY3Rpb24gcGFyc2VNaWRyb3coYSwgYikge1xuICAgICAgdmFyIGNoTnIgPSAwO1xuICAgICAgaWYgKChhID09PSAweDExIHx8IGEgPT09IDB4MTkpICYmIGIgPj0gMHgyMCAmJiBiIDw9IDB4MmYpIHtcbiAgICAgICAgaWYgKGEgPT09IDB4MTEpIHtcbiAgICAgICAgICBjaE5yID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaE5yID0gMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hOciAhPT0gdGhpcy5jdXJyZW50Q2hhbm5lbCkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZygwLCAnTWlzbWF0Y2ggY2hhbm5lbCBpbiBtaWRyb3cgcGFyc2luZycpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHNbY2hOcl07XG4gICAgICAgIGlmICghY2hhbm5lbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjaGFubmVsLmNjTUlEUk9XKGIpO1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coMywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAnTUlEUk9XICgnICsgbnVtQXJyYXlUb0hleEFycmF5KFthLCBiXSkgKyAnKSc7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSBQcmVhYmxlIEFjY2VzcyBDb2RlcyAoVGFibGUgNTMpLlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUZWxscyBpZiBQQUMgZm91bmRcbiAgICAgKi87XG4gICAgX3Byb3RvNy5wYXJzZVBBQyA9IGZ1bmN0aW9uIHBhcnNlUEFDKGEsIGIpIHtcbiAgICAgIHZhciByb3c7XG4gICAgICB2YXIgY2FzZTEgPSAoYSA+PSAweDExICYmIGEgPD0gMHgxNyB8fCBhID49IDB4MTkgJiYgYSA8PSAweDFmKSAmJiBiID49IDB4NDAgJiYgYiA8PSAweDdmO1xuICAgICAgdmFyIGNhc2UyID0gKGEgPT09IDB4MTAgfHwgYSA9PT0gMHgxOCkgJiYgYiA+PSAweDQwICYmIGIgPD0gMHg1ZjtcbiAgICAgIGlmICghKGNhc2UxIHx8IGNhc2UyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgY2hOciA9IGEgPD0gMHgxNyA/IDEgOiAyO1xuICAgICAgaWYgKGIgPj0gMHg0MCAmJiBiIDw9IDB4NWYpIHtcbiAgICAgICAgcm93ID0gY2hOciA9PT0gMSA/IHJvd3NMb3dDaDFbYV0gOiByb3dzTG93Q2gyW2FdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gMHg2MCA8PSBiIDw9IDB4N0ZcbiAgICAgICAgcm93ID0gY2hOciA9PT0gMSA/IHJvd3NIaWdoQ2gxW2FdIDogcm93c0hpZ2hDaDJbYV07XG4gICAgICB9XG4gICAgICB2YXIgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHNbY2hOcl07XG4gICAgICBpZiAoIWNoYW5uZWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY2hhbm5lbC5zZXRQQUModGhpcy5pbnRlcnByZXRQQUMocm93LCBiKSk7XG4gICAgICB0aGlzLmN1cnJlbnRDaGFubmVsID0gY2hOcjtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVycHJldCB0aGUgc2Vjb25kIGJ5dGUgb2YgdGhlIHBhYywgYW5kIHJldHVybiB0aGUgaW5mb3JtYXRpb24uXG4gICAgICogQHJldHVybnMgcGFjRGF0YSB3aXRoIHN0eWxlIHBhcmFtZXRlcnNcbiAgICAgKi87XG4gICAgX3Byb3RvNy5pbnRlcnByZXRQQUMgPSBmdW5jdGlvbiBpbnRlcnByZXRQQUMocm93LCBfYnl0ZTMpIHtcbiAgICAgIHZhciBwYWNJbmRleDtcbiAgICAgIHZhciBwYWNEYXRhID0ge1xuICAgICAgICBjb2xvcjogbnVsbCxcbiAgICAgICAgaXRhbGljczogZmFsc2UsXG4gICAgICAgIGluZGVudDogbnVsbCxcbiAgICAgICAgdW5kZXJsaW5lOiBmYWxzZSxcbiAgICAgICAgcm93OiByb3dcbiAgICAgIH07XG4gICAgICBpZiAoX2J5dGUzID4gMHg1Zikge1xuICAgICAgICBwYWNJbmRleCA9IF9ieXRlMyAtIDB4NjA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWNJbmRleCA9IF9ieXRlMyAtIDB4NDA7XG4gICAgICB9XG4gICAgICBwYWNEYXRhLnVuZGVybGluZSA9IChwYWNJbmRleCAmIDEpID09PSAxO1xuICAgICAgaWYgKHBhY0luZGV4IDw9IDB4ZCkge1xuICAgICAgICBwYWNEYXRhLmNvbG9yID0gWyd3aGl0ZScsICdncmVlbicsICdibHVlJywgJ2N5YW4nLCAncmVkJywgJ3llbGxvdycsICdtYWdlbnRhJywgJ3doaXRlJ11bTWF0aC5mbG9vcihwYWNJbmRleCAvIDIpXTtcbiAgICAgIH0gZWxzZSBpZiAocGFjSW5kZXggPD0gMHhmKSB7XG4gICAgICAgIHBhY0RhdGEuaXRhbGljcyA9IHRydWU7XG4gICAgICAgIHBhY0RhdGEuY29sb3IgPSAnd2hpdGUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFjRGF0YS5pbmRlbnQgPSBNYXRoLmZsb29yKChwYWNJbmRleCAtIDB4MTApIC8gMikgKiA0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhY0RhdGE7IC8vIE5vdGUgdGhhdCByb3cgaGFzIHplcm8gb2Zmc2V0LiBUaGUgc3BlYyB1c2VzIDEuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2UgY2hhcmFjdGVycy5cbiAgICAgKiBAcmV0dXJucyBBbiBhcnJheSB3aXRoIDEgdG8gMiBjb2RlcyBjb3JyZXNwb25kaW5nIHRvIGNoYXJzLCBpZiBmb3VuZC4gbnVsbCBvdGhlcndpc2UuXG4gICAgICovO1xuICAgIF9wcm90bzcucGFyc2VDaGFycyA9IGZ1bmN0aW9uIHBhcnNlQ2hhcnMoYSwgYikge1xuICAgICAgdmFyIGNoYW5uZWxOcjtcbiAgICAgIHZhciBjaGFyQ29kZXMgPSBudWxsO1xuICAgICAgdmFyIGNoYXJDb2RlMSA9IG51bGw7XG4gICAgICBpZiAoYSA+PSAweDE5KSB7XG4gICAgICAgIGNoYW5uZWxOciA9IDI7XG4gICAgICAgIGNoYXJDb2RlMSA9IGEgLSA4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hhbm5lbE5yID0gMTtcbiAgICAgICAgY2hhckNvZGUxID0gYTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGFyQ29kZTEgPj0gMHgxMSAmJiBjaGFyQ29kZTEgPD0gMHgxMykge1xuICAgICAgICAvLyBTcGVjaWFsIGNoYXJhY3RlclxuICAgICAgICB2YXIgb25lQ29kZTtcbiAgICAgICAgaWYgKGNoYXJDb2RlMSA9PT0gMHgxMSkge1xuICAgICAgICAgIG9uZUNvZGUgPSBiICsgMHg1MDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZTEgPT09IDB4MTIpIHtcbiAgICAgICAgICBvbmVDb2RlID0gYiArIDB4NzA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25lQ29kZSA9IGIgKyAweDkwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFwiU3BlY2lhbCBjaGFyICdcIiArIGdldENoYXJGb3JCeXRlKG9uZUNvZGUpICsgXCInIGluIGNoYW5uZWwgXCIgKyBjaGFubmVsTnI7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGFyQ29kZXMgPSBbb25lQ29kZV07XG4gICAgICB9IGVsc2UgaWYgKGEgPj0gMHgyMCAmJiBhIDw9IDB4N2YpIHtcbiAgICAgICAgY2hhckNvZGVzID0gYiA9PT0gMCA/IFthXSA6IFthLCBiXTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGFyQ29kZXMpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKDMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gJ0NoYXIgY29kZXMgPSAgJyArIG51bUFycmF5VG9IZXhBcnJheShjaGFyQ29kZXMpLmpvaW4oJywnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hhckNvZGVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlIGV4dGVuZGVkIGJhY2tncm91bmQgYXR0cmlidXRlcyBhcyB3ZWxsIGFzIG5ldyBmb3JlZ3JvdW5kIGNvbG9yIGJsYWNrLlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgYmFja2dyb3VuZCBhdHRyaWJ1dGVzIGFyZSBmb3VuZFxuICAgICAqLztcbiAgICBfcHJvdG83LnBhcnNlQmFja2dyb3VuZEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiBwYXJzZUJhY2tncm91bmRBdHRyaWJ1dGVzKGEsIGIpIHtcbiAgICAgIHZhciBjYXNlMSA9IChhID09PSAweDEwIHx8IGEgPT09IDB4MTgpICYmIGIgPj0gMHgyMCAmJiBiIDw9IDB4MmY7XG4gICAgICB2YXIgY2FzZTIgPSAoYSA9PT0gMHgxNyB8fCBhID09PSAweDFmKSAmJiBiID49IDB4MmQgJiYgYiA8PSAweDJmO1xuICAgICAgaWYgKCEoY2FzZTEgfHwgY2FzZTIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleDtcbiAgICAgIHZhciBia2dEYXRhID0ge307XG4gICAgICBpZiAoYSA9PT0gMHgxMCB8fCBhID09PSAweDE4KSB7XG4gICAgICAgIGluZGV4ID0gTWF0aC5mbG9vcigoYiAtIDB4MjApIC8gMik7XG4gICAgICAgIGJrZ0RhdGEuYmFja2dyb3VuZCA9IGJhY2tncm91bmRDb2xvcnNbaW5kZXhdO1xuICAgICAgICBpZiAoYiAlIDIgPT09IDEpIHtcbiAgICAgICAgICBia2dEYXRhLmJhY2tncm91bmQgPSBia2dEYXRhLmJhY2tncm91bmQgKyAnX3NlbWknO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGIgPT09IDB4MmQpIHtcbiAgICAgICAgYmtnRGF0YS5iYWNrZ3JvdW5kID0gJ3RyYW5zcGFyZW50JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJrZ0RhdGEuZm9yZWdyb3VuZCA9ICdibGFjayc7XG4gICAgICAgIGlmIChiID09PSAweDJmKSB7XG4gICAgICAgICAgYmtnRGF0YS51bmRlcmxpbmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgY2hOciA9IGEgPD0gMHgxNyA/IDEgOiAyO1xuICAgICAgdmFyIGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzW2NoTnJdO1xuICAgICAgY2hhbm5lbC5zZXRCa2dEYXRhKGJrZ0RhdGEpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXQgc3RhdGUgb2YgcGFyc2VyIGFuZCBpdHMgY2hhbm5lbHMuXG4gICAgICovO1xuICAgIF9wcm90bzcucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgT2JqZWN0LmtleXModGhpcy5jaGFubmVscykubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzW2ldO1xuICAgICAgICBpZiAoY2hhbm5lbCkge1xuICAgICAgICAgIGNoYW5uZWwucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0TGFzdENtZChudWxsLCBudWxsLCB0aGlzLmNtZEhpc3RvcnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIGdlbmVyYXRpb24gb2YgYSBjdWUsIGFuZCB0aGUgc3RhcnQgb2YgYSBuZXcgb25lIGlmIGRpc3BsYXlTY3JlZW5zIGFyZSBub3QgZW1wdHkuXG4gICAgICovO1xuICAgIF9wcm90bzcuY3VlU3BsaXRBdFRpbWUgPSBmdW5jdGlvbiBjdWVTcGxpdEF0VGltZSh0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hhbm5lbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzW2ldO1xuICAgICAgICBpZiAoY2hhbm5lbCkge1xuICAgICAgICAgIGNoYW5uZWwuY3VlU3BsaXRBdFRpbWUodCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDZWE2MDhQYXJzZXI7XG4gIH0oKTtcbiAgZnVuY3Rpb24gc2V0TGFzdENtZChhLCBiLCBjbWRIaXN0b3J5KSB7XG4gICAgY21kSGlzdG9yeS5hID0gYTtcbiAgICBjbWRIaXN0b3J5LmIgPSBiO1xuICB9XG4gIGZ1bmN0aW9uIGhhc0NtZFJlcGVhdGVkKGEsIGIsIGNtZEhpc3RvcnkpIHtcbiAgICByZXR1cm4gY21kSGlzdG9yeS5hID09PSBhICYmIGNtZEhpc3RvcnkuYiA9PT0gYjtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVDbWRIaXN0b3J5KCkge1xuICAgIHJldHVybiB7XG4gICAgICBhOiBudWxsLFxuICAgICAgYjogbnVsbFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ29weXJpZ2h0IDIwMTMgdnR0LmpzIENvbnRyaWJ1dG9yc1xuICAgKlxuICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICpcbiAgICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICpcbiAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICovXG5cbiAgdmFyIFZUVEN1ZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG9wdGlvbmFsU2VsZiAhPSBudWxsICYmIG9wdGlvbmFsU2VsZi5WVFRDdWUpIHtcbiAgICAgIHJldHVybiBzZWxmLlZUVEN1ZTtcbiAgICB9XG4gICAgdmFyIEFsbG93ZWREaXJlY3Rpb25zID0gWycnLCAnbHInLCAncmwnXTtcbiAgICB2YXIgQWxsb3dlZEFsaWdubWVudHMgPSBbJ3N0YXJ0JywgJ21pZGRsZScsICdlbmQnLCAnbGVmdCcsICdyaWdodCddO1xuICAgIGZ1bmN0aW9uIGlzQWxsb3dlZFZhbHVlKGFsbG93ZWQsIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBuZWNlc3NhcnkgZm9yIGFzc3VyaW5nIHRoZSBnZW5lcmljIGNvbmZvcm1zIHRvIHRoZSBBcnJheSBpbnRlcmZhY2VcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShhbGxvd2VkKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyByZXNldCB0aGUgdHlwZSBzbyB0aGF0IHRoZSBuZXh0IG5hcnJvd2luZyB3b3JrcyB3ZWxsXG4gICAgICB2YXIgbGNWYWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAvLyB1c2UgdGhlIGFsbG93IGxpc3QgdG8gbmFycm93IHRoZSB0eXBlIHRvIGEgc3BlY2lmaWMgc3Vic2V0IG9mIHN0cmluZ3NcbiAgICAgIGlmICh+YWxsb3dlZC5pbmRleE9mKGxjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBsY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmaW5kRGlyZWN0aW9uU2V0dGluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQWxsb3dlZFZhbHVlKEFsbG93ZWREaXJlY3Rpb25zLCB2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRBbGlnblNldHRpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FsbG93ZWRWYWx1ZShBbGxvd2VkQWxpZ25tZW50cywgdmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBleHRlbmQob2JqKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIHJlc3RbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgdmFyIGkgPSAxO1xuICAgICAgZm9yICg7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvYmogPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGZvciAodmFyIHAgaW4gY29iaikge1xuICAgICAgICAgIG9ialtwXSA9IGNvYmpbcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGZ1bmN0aW9uIFZUVEN1ZShzdGFydFRpbWUsIGVuZFRpbWUsIHRleHQpIHtcbiAgICAgIHZhciBjdWUgPSB0aGlzO1xuICAgICAgdmFyIGJhc2VPYmogPSB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIFNoaW0gaW1wbGVtZW50YXRpb24gc3BlY2lmaWMgcHJvcGVydGllcy4gVGhlc2UgcHJvcGVydGllcyBhcmUgbm90IGluXG4gICAgICAgKiB0aGUgc3BlYy5cbiAgICAgICAqL1xuXG4gICAgICAvLyBMZXRzIHVzIGtub3cgd2hlbiB0aGUgVlRUQ3VlJ3MgZGF0YSBoYXMgY2hhbmdlZCBpbiBzdWNoIGEgd2F5IHRoYXQgd2UgbmVlZFxuICAgICAgLy8gdG8gcmVjb21wdXRlIGl0cyBkaXNwbGF5IHN0YXRlLiBUaGlzIGxldHMgdXMgY29tcHV0ZSBpdHMgZGlzcGxheSBzdGF0ZVxuICAgICAgLy8gbGF6aWx5LlxuICAgICAgY3VlLmhhc0JlZW5SZXNldCA9IGZhbHNlO1xuXG4gICAgICAvKipcbiAgICAgICAqIFZUVEN1ZSBhbmQgVGV4dFRyYWNrQ3VlIHByb3BlcnRpZXNcbiAgICAgICAqIGh0dHA6Ly9kZXYudzMub3JnL2h0bWw1L3dlYnZ0dC8jdnR0Y3VlLWludGVyZmFjZVxuICAgICAgICovXG5cbiAgICAgIHZhciBfaWQgPSAnJztcbiAgICAgIHZhciBfcGF1c2VPbkV4aXQgPSBmYWxzZTtcbiAgICAgIHZhciBfc3RhcnRUaW1lID0gc3RhcnRUaW1lO1xuICAgICAgdmFyIF9lbmRUaW1lID0gZW5kVGltZTtcbiAgICAgIHZhciBfdGV4dCA9IHRleHQ7XG4gICAgICB2YXIgX3JlZ2lvbiA9IG51bGw7XG4gICAgICB2YXIgX3ZlcnRpY2FsID0gJyc7XG4gICAgICB2YXIgX3NuYXBUb0xpbmVzID0gdHJ1ZTtcbiAgICAgIHZhciBfbGluZSA9ICdhdXRvJztcbiAgICAgIHZhciBfbGluZUFsaWduID0gJ3N0YXJ0JztcbiAgICAgIHZhciBfcG9zaXRpb24gPSA1MDtcbiAgICAgIHZhciBfcG9zaXRpb25BbGlnbiA9ICdtaWRkbGUnO1xuICAgICAgdmFyIF9zaXplID0gNTA7XG4gICAgICB2YXIgX2FsaWduID0gJ21pZGRsZSc7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VlLCAnaWQnLCBleHRlbmQoe30sIGJhc2VPYmosIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF9pZDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICBfaWQgPSAnJyArIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VlLCAncGF1c2VPbkV4aXQnLCBleHRlbmQoe30sIGJhc2VPYmosIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF9wYXVzZU9uRXhpdDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICBfcGF1c2VPbkV4aXQgPSAhIXZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VlLCAnc3RhcnRUaW1lJywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfc3RhcnRUaW1lO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdGFydCB0aW1lIG11c3QgYmUgc2V0IHRvIGEgbnVtYmVyLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfc3RhcnRUaW1lID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VlLCAnZW5kVGltZScsIGV4dGVuZCh7fSwgYmFzZU9iaiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX2VuZFRpbWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuZCB0aW1lIG11c3QgYmUgc2V0IHRvIGEgbnVtYmVyLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfZW5kVGltZSA9IHZhbHVlO1xuICAgICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1ZSwgJ3RleHQnLCBleHRlbmQoe30sIGJhc2VPYmosIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF90ZXh0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgIF90ZXh0ID0gJycgKyB2YWx1ZTtcbiAgICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgICAgLy8gdG9kbzogaW1wbGVtZW50IFZUVFJlZ2lvbiBwb2x5ZmlsbD9cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdWUsICdyZWdpb24nLCBleHRlbmQoe30sIGJhc2VPYmosIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF9yZWdpb247XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgX3JlZ2lvbiA9IHZhbHVlO1xuICAgICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1ZSwgJ3ZlcnRpY2FsJywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfdmVydGljYWw7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHNldHRpbmcgPSBmaW5kRGlyZWN0aW9uU2V0dGluZyh2YWx1ZSk7XG4gICAgICAgICAgLy8gSGF2ZSB0byBjaGVjayBmb3IgZmFsc2UgYmVjYXVzZSB0aGUgc2V0dGluZyBhbiBiZSBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICAgICAgaWYgKHNldHRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0FuIGludmFsaWQgb3IgaWxsZWdhbCBzdHJpbmcgd2FzIHNwZWNpZmllZC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3ZlcnRpY2FsID0gc2V0dGluZztcbiAgICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdWUsICdzbmFwVG9MaW5lcycsIGV4dGVuZCh7fSwgYmFzZU9iaiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX3NuYXBUb0xpbmVzO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgIF9zbmFwVG9MaW5lcyA9ICEhdmFsdWU7XG4gICAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VlLCAnbGluZScsIGV4dGVuZCh7fSwgYmFzZU9iaiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX2xpbmU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgJiYgdmFsdWUgIT09ICdhdXRvJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdBbiBpbnZhbGlkIG51bWJlciBvciBpbGxlZ2FsIHN0cmluZyB3YXMgc3BlY2lmaWVkLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfbGluZSA9IHZhbHVlO1xuICAgICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1ZSwgJ2xpbmVBbGlnbicsIGV4dGVuZCh7fSwgYmFzZU9iaiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX2xpbmVBbGlnbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICB2YXIgc2V0dGluZyA9IGZpbmRBbGlnblNldHRpbmcodmFsdWUpO1xuICAgICAgICAgIGlmICghc2V0dGluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIF9saW5lQWxpZ24gPSBzZXR0aW5nO1xuICAgICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1ZSwgJ3Bvc2l0aW9uJywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfcG9zaXRpb247XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+IDEwMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb3NpdGlvbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTAwLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfcG9zaXRpb24gPSB2YWx1ZTtcbiAgICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdWUsICdwb3NpdGlvbkFsaWduJywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfcG9zaXRpb25BbGlnbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICB2YXIgc2V0dGluZyA9IGZpbmRBbGlnblNldHRpbmcodmFsdWUpO1xuICAgICAgICAgIGlmICghc2V0dGluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIF9wb3NpdGlvbkFsaWduID0gc2V0dGluZztcbiAgICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdWUsICdzaXplJywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfc2l6ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPCAwIHx8IHZhbHVlID4gMTAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NpemUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3NpemUgPSB2YWx1ZTtcbiAgICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdWUsICdhbGlnbicsIGV4dGVuZCh7fSwgYmFzZU9iaiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX2FsaWduO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgIHZhciBzZXR0aW5nID0gZmluZEFsaWduU2V0dGluZyh2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFzZXR0aW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0FuIGludmFsaWQgb3IgaWxsZWdhbCBzdHJpbmcgd2FzIHNwZWNpZmllZC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX2FsaWduID0gc2V0dGluZztcbiAgICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBPdGhlciA8dHJhY2s+IHNwZWMgZGVmaW5lZCBwcm9wZXJ0aWVzXG4gICAgICAgKi9cblxuICAgICAgLy8gaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdGhlLXZpZGVvLWVsZW1lbnQuaHRtbCN0ZXh0LXRyYWNrLWN1ZS1kaXNwbGF5LXN0YXRlXG4gICAgICBjdWUuZGlzcGxheVN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZUVEN1ZSBtZXRob2RzXG4gICAgICovXG5cbiAgICBWVFRDdWUucHJvdG90eXBlLmdldEN1ZUFzSFRNTCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEFzc3VtZSBXZWJWVFQuY29udmVydEN1ZVRvRE9NVHJlZSBpcyBvbiB0aGUgZ2xvYmFsLlxuICAgICAgdmFyIFdlYlZUVCA9IHNlbGYuV2ViVlRUO1xuICAgICAgcmV0dXJuIFdlYlZUVC5jb252ZXJ0Q3VlVG9ET01UcmVlKHNlbGYsIHRoaXMudGV4dCk7XG4gICAgfTtcbiAgICAvLyB0aGlzIGlzIGEgcG9seWZpbGwgaGFja1xuICAgIHJldHVybiBWVFRDdWU7XG4gIH0pKCk7XG5cbiAgLypcbiAgICogU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS92dHQuanMvYmxvYi9tYXN0ZXIvZGlzdC92dHQuanNcbiAgICovXG5cbiAgdmFyIFN0cmluZ0RlY29kZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoKSB7fVxuICAgIHZhciBfcHJvdG8gPSBTdHJpbmdEZWNvZGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8uZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgLSBleHBlY3RlZCBzdHJpbmcgZGF0YS4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlVVJJQ29tcG9uZW50KGRhdGEpKTtcbiAgICB9O1xuICAgIHJldHVybiBTdHJpbmdEZWNvZGVyO1xuICB9KCk7IC8vIFRyeSB0byBwYXJzZSBpbnB1dCBhcyBhIHRpbWUgc3RhbXAuXG4gIGZ1bmN0aW9uIHBhcnNlVGltZVN0YW1wKGlucHV0KSB7XG4gICAgZnVuY3Rpb24gY29tcHV0ZVNlY29uZHMoaCwgbSwgcywgZikge1xuICAgICAgcmV0dXJuIChoIHwgMCkgKiAzNjAwICsgKG0gfCAwKSAqIDYwICsgKHMgfCAwKSArIHBhcnNlRmxvYXQoZiB8fCAwKTtcbiAgICB9XG4gICAgdmFyIG0gPSBpbnB1dC5tYXRjaCgvXig/OihcXGQrKTopPyhcXGR7Mn0pOihcXGR7Mn0pKFxcLlxcZCspPy8pO1xuICAgIGlmICghbSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChwYXJzZUZsb2F0KG1bMl0pID4gNTkpIHtcbiAgICAgIC8vIFRpbWVzdGFtcCB0YWtlcyB0aGUgZm9ybSBvZiBbaG91cnNdOlttaW51dGVzXS5bbWlsbGlzZWNvbmRzXVxuICAgICAgLy8gRmlyc3QgcG9zaXRpb24gaXMgaG91cnMgYXMgaXQncyBvdmVyIDU5LlxuICAgICAgcmV0dXJuIGNvbXB1dGVTZWNvbmRzKG1bMl0sIG1bM10sIDAsIG1bNF0pO1xuICAgIH1cbiAgICAvLyBUaW1lc3RhbXAgdGFrZXMgdGhlIGZvcm0gb2YgW2hvdXJzIChvcHRpb25hbCldOlttaW51dGVzXTpbc2Vjb25kc10uW21pbGxpc2Vjb25kc11cbiAgICByZXR1cm4gY29tcHV0ZVNlY29uZHMobVsxXSwgbVsyXSwgbVszXSwgbVs0XSk7XG4gIH1cblxuICAvLyBBIHNldHRpbmdzIG9iamVjdCBob2xkcyBrZXkvdmFsdWUgcGFpcnMgYW5kIHdpbGwgaWdub3JlIGFueXRoaW5nIGJ1dCB0aGUgZmlyc3RcbiAgLy8gYXNzaWdubWVudCB0byBhIHNwZWNpZmljIGtleS5cbiAgdmFyIFNldHRpbmdzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXR0aW5ncygpIHtcbiAgICAgIHRoaXMudmFsdWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgdmFyIF9wcm90bzIgPSBTZXR0aW5ncy5wcm90b3R5cGU7XG4gICAgLy8gT25seSBhY2NlcHQgdGhlIGZpcnN0IGFzc2lnbm1lbnQgdG8gYW55IGtleS5cbiAgICBfcHJvdG8yLnNldCA9IGZ1bmN0aW9uIHNldChrLCB2KSB7XG4gICAgICBpZiAoIXRoaXMuZ2V0KGspICYmIHYgIT09ICcnKSB7XG4gICAgICAgIHRoaXMudmFsdWVzW2tdID0gdjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUmV0dXJuIHRoZSB2YWx1ZSBmb3IgYSBrZXksIG9yIGEgZGVmYXVsdCB2YWx1ZS5cbiAgICAvLyBJZiAnZGVmYXVsdEtleScgaXMgcGFzc2VkIHRoZW4gJ2RmbHQnIGlzIGFzc3VtZWQgdG8gYmUgYW4gb2JqZWN0IHdpdGhcbiAgICAvLyBhIG51bWJlciBvZiBwb3NzaWJsZSBkZWZhdWx0IHZhbHVlcyBhcyBwcm9wZXJ0aWVzIHdoZXJlICdkZWZhdWx0S2V5JyBpc1xuICAgIC8vIHRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRoYXQgd2lsbCBiZSBjaG9zZW47IG90aGVyd2lzZSBpdCdzIGFzc3VtZWQgdG8gYmVcbiAgICAvLyBhIHNpbmdsZSB2YWx1ZS5cbiAgICA7XG4gICAgX3Byb3RvMi5nZXQgPSBmdW5jdGlvbiBnZXQoaywgZGZsdCwgZGVmYXVsdEtleSkge1xuICAgICAgaWYgKGRlZmF1bHRLZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzKGspID8gdGhpcy52YWx1ZXNba10gOiBkZmx0W2RlZmF1bHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuaGFzKGspID8gdGhpcy52YWx1ZXNba10gOiBkZmx0O1xuICAgIH1cbiAgICAvLyBDaGVjayB3aGV0aGVyIHdlIGhhdmUgYSB2YWx1ZSBmb3IgYSBrZXkuXG4gICAgO1xuICAgIF9wcm90bzIuaGFzID0gZnVuY3Rpb24gaGFzKGspIHtcbiAgICAgIHJldHVybiBrIGluIHRoaXMudmFsdWVzO1xuICAgIH1cbiAgICAvLyBBY2NlcHQgYSBzZXR0aW5nIGlmIGl0cyBvbmUgb2YgdGhlIGdpdmVuIGFsdGVybmF0aXZlcy5cbiAgICA7XG4gICAgX3Byb3RvMi5hbHQgPSBmdW5jdGlvbiBhbHQoaywgdiwgYSkge1xuICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBhLmxlbmd0aDsgKytuKSB7XG4gICAgICAgIGlmICh2ID09PSBhW25dKSB7XG4gICAgICAgICAgdGhpcy5zZXQoaywgdik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQWNjZXB0IGEgc2V0dGluZyBpZiBpdHMgYSB2YWxpZCAoc2lnbmVkKSBpbnRlZ2VyLlxuICAgIDtcbiAgICBfcHJvdG8yLmludGVnZXIgPSBmdW5jdGlvbiBpbnRlZ2VyKGssIHYpIHtcbiAgICAgIGlmICgvXi0/XFxkKyQvLnRlc3QodikpIHtcbiAgICAgICAgLy8gaW50ZWdlclxuICAgICAgICB0aGlzLnNldChrLCBwYXJzZUludCh2LCAxMCkpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBBY2NlcHQgYSBzZXR0aW5nIGlmIGl0cyBhIHZhbGlkIHBlcmNlbnRhZ2UuXG4gICAgO1xuICAgIF9wcm90bzIucGVyY2VudCA9IGZ1bmN0aW9uIHBlcmNlbnQoaywgdikge1xuICAgICAgaWYgKC9eKFtcXGRdezEsM30pKFxcLltcXGRdKik/JSQvLnRlc3QodikpIHtcbiAgICAgICAgdmFyIF9wZXJjZW50ID0gcGFyc2VGbG9hdCh2KTtcbiAgICAgICAgaWYgKF9wZXJjZW50ID49IDAgJiYgX3BlcmNlbnQgPD0gMTAwKSB7XG4gICAgICAgICAgdGhpcy5zZXQoaywgX3BlcmNlbnQpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gU2V0dGluZ3M7XG4gIH0oKTsgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHBhcnNlIGlucHV0IGludG8gZ3JvdXBzIHNlcGFyYXRlZCBieSAnZ3JvdXBEZWxpbScsIGFuZFxuICAvLyBpbnRlcnByZXQgZWFjaCBncm91cCBhcyBhIGtleS92YWx1ZSBwYWlyIHNlcGFyYXRlZCBieSAna2V5VmFsdWVEZWxpbScuXG4gIGZ1bmN0aW9uIHBhcnNlT3B0aW9ucyhpbnB1dCwgY2FsbGJhY2ssIGtleVZhbHVlRGVsaW0sIGdyb3VwRGVsaW0pIHtcbiAgICB2YXIgZ3JvdXBzID0gZ3JvdXBEZWxpbSA/IGlucHV0LnNwbGl0KGdyb3VwRGVsaW0pIDogW2lucHV0XTtcbiAgICBmb3IgKHZhciBpIGluIGdyb3Vwcykge1xuICAgICAgaWYgKHR5cGVvZiBncm91cHNbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIGt2ID0gZ3JvdXBzW2ldLnNwbGl0KGtleVZhbHVlRGVsaW0pO1xuICAgICAgaWYgKGt2Lmxlbmd0aCAhPT0gMikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBrID0ga3ZbMF07XG4gICAgICB2YXIgdiA9IGt2WzFdO1xuICAgICAgY2FsbGJhY2soaywgdik7XG4gICAgfVxuICB9XG4gIHZhciBkZWZhdWx0cyA9IG5ldyBWVFRDdWUoMCwgMCwgJycpO1xuICAvLyAnbWlkZGxlJyB3YXMgY2hhbmdlZCB0byAnY2VudGVyJyBpbiB0aGUgc3BlYzogaHR0cHM6Ly9naXRodWIuY29tL3czYy93ZWJ2dHQvcHVsbC8yNDRcbiAgLy8gIFNhZmFyaSBkb2Vzbid0IHlldCBzdXBwb3J0IHRoaXMgY2hhbmdlLCBidXQgRkYgYW5kIENocm9tZSBkby5cbiAgdmFyIGNlbnRlciA9IGRlZmF1bHRzLmFsaWduID09PSAnbWlkZGxlJyA/ICdtaWRkbGUnIDogJ2NlbnRlcic7XG4gIGZ1bmN0aW9uIHBhcnNlQ3VlKGlucHV0LCBjdWUsIHJlZ2lvbkxpc3QpIHtcbiAgICAvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgaW5wdXQgaWYgd2UgbmVlZCB0byB0aHJvdyBhbiBlcnJvci5cbiAgICB2YXIgb0lucHV0ID0gaW5wdXQ7XG4gICAgLy8gNC4xIFdlYlZUVCB0aW1lc3RhbXBcbiAgICBmdW5jdGlvbiBjb25zdW1lVGltZVN0YW1wKCkge1xuICAgICAgdmFyIHRzID0gcGFyc2VUaW1lU3RhbXAoaW5wdXQpO1xuICAgICAgaWYgKHRzID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIHRpbWVzdGFtcDogJyArIG9JbnB1dCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSB0aW1lIHN0YW1wIGZyb20gaW5wdXQuXG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL15bXlxcc2EtekEtWi1dKy8sICcnKTtcbiAgICAgIHJldHVybiB0cztcbiAgICB9XG5cbiAgICAvLyA0LjQuMiBXZWJWVFQgY3VlIHNldHRpbmdzXG4gICAgZnVuY3Rpb24gY29uc3VtZUN1ZVNldHRpbmdzKGlucHV0LCBjdWUpIHtcbiAgICAgIHZhciBzZXR0aW5ncyA9IG5ldyBTZXR0aW5ncygpO1xuICAgICAgcGFyc2VPcHRpb25zKGlucHV0LCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgICB2YXIgdmFscztcbiAgICAgICAgc3dpdGNoIChrKSB7XG4gICAgICAgICAgY2FzZSAncmVnaW9uJzpcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGxhc3QgcmVnaW9uIHdlIHBhcnNlZCB3aXRoIHRoZSBzYW1lIHJlZ2lvbiBpZC5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSByZWdpb25MaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgIGlmIChyZWdpb25MaXN0W2ldLmlkID09PSB2KSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3Muc2V0KGssIHJlZ2lvbkxpc3RbaV0ucmVnaW9uKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndmVydGljYWwnOlxuICAgICAgICAgICAgc2V0dGluZ3MuYWx0KGssIHYsIFsncmwnLCAnbHInXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdsaW5lJzpcbiAgICAgICAgICAgIHZhbHMgPSB2LnNwbGl0KCcsJyk7XG4gICAgICAgICAgICBzZXR0aW5ncy5pbnRlZ2VyKGssIHZhbHNbMF0pO1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLnBlcmNlbnQoaywgdmFsc1swXSkpIHtcbiAgICAgICAgICAgICAgc2V0dGluZ3Muc2V0KCdzbmFwVG9MaW5lcycsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldHRpbmdzLmFsdChrLCB2YWxzWzBdLCBbJ2F1dG8nXSk7XG4gICAgICAgICAgICBpZiAodmFscy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgc2V0dGluZ3MuYWx0KCdsaW5lQWxpZ24nLCB2YWxzWzFdLCBbJ3N0YXJ0JywgY2VudGVyLCAnZW5kJ10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncG9zaXRpb24nOlxuICAgICAgICAgICAgdmFscyA9IHYuc3BsaXQoJywnKTtcbiAgICAgICAgICAgIHNldHRpbmdzLnBlcmNlbnQoaywgdmFsc1swXSk7XG4gICAgICAgICAgICBpZiAodmFscy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgc2V0dGluZ3MuYWx0KCdwb3NpdGlvbkFsaWduJywgdmFsc1sxXSwgWydzdGFydCcsIGNlbnRlciwgJ2VuZCcsICdsaW5lLWxlZnQnLCAnbGluZS1yaWdodCcsICdhdXRvJ10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnc2l6ZSc6XG4gICAgICAgICAgICBzZXR0aW5ncy5wZXJjZW50KGssIHYpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYWxpZ24nOlxuICAgICAgICAgICAgc2V0dGluZ3MuYWx0KGssIHYsIFsnc3RhcnQnLCBjZW50ZXIsICdlbmQnLCAnbGVmdCcsICdyaWdodCddKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9LCAvOi8sIC9cXHMvKTtcblxuICAgICAgLy8gQXBwbHkgZGVmYXVsdCB2YWx1ZXMgZm9yIGFueSBtaXNzaW5nIGZpZWxkcy5cbiAgICAgIGN1ZS5yZWdpb24gPSBzZXR0aW5ncy5nZXQoJ3JlZ2lvbicsIG51bGwpO1xuICAgICAgY3VlLnZlcnRpY2FsID0gc2V0dGluZ3MuZ2V0KCd2ZXJ0aWNhbCcsICcnKTtcbiAgICAgIHZhciBsaW5lID0gc2V0dGluZ3MuZ2V0KCdsaW5lJywgJ2F1dG8nKTtcbiAgICAgIGlmIChsaW5lID09PSAnYXV0bycgJiYgZGVmYXVsdHMubGluZSA9PT0gLTEpIHtcbiAgICAgICAgLy8gc2V0IG51bWVyaWMgbGluZSBudW1iZXIgZm9yIFNhZmFyaVxuICAgICAgICBsaW5lID0gLTE7XG4gICAgICB9XG4gICAgICBjdWUubGluZSA9IGxpbmU7XG4gICAgICBjdWUubGluZUFsaWduID0gc2V0dGluZ3MuZ2V0KCdsaW5lQWxpZ24nLCAnc3RhcnQnKTtcbiAgICAgIGN1ZS5zbmFwVG9MaW5lcyA9IHNldHRpbmdzLmdldCgnc25hcFRvTGluZXMnLCB0cnVlKTtcbiAgICAgIGN1ZS5zaXplID0gc2V0dGluZ3MuZ2V0KCdzaXplJywgMTAwKTtcbiAgICAgIGN1ZS5hbGlnbiA9IHNldHRpbmdzLmdldCgnYWxpZ24nLCBjZW50ZXIpO1xuICAgICAgdmFyIHBvc2l0aW9uID0gc2V0dGluZ3MuZ2V0KCdwb3NpdGlvbicsICdhdXRvJyk7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdhdXRvJyAmJiBkZWZhdWx0cy5wb3NpdGlvbiA9PT0gNTApIHtcbiAgICAgICAgLy8gc2V0IG51bWVyaWMgcG9zaXRpb24gZm9yIFNhZmFyaVxuICAgICAgICBwb3NpdGlvbiA9IGN1ZS5hbGlnbiA9PT0gJ3N0YXJ0JyB8fCBjdWUuYWxpZ24gPT09ICdsZWZ0JyA/IDAgOiBjdWUuYWxpZ24gPT09ICdlbmQnIHx8IGN1ZS5hbGlnbiA9PT0gJ3JpZ2h0JyA/IDEwMCA6IDUwO1xuICAgICAgfVxuICAgICAgY3VlLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNraXBXaGl0ZXNwYWNlKCkge1xuICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9eXFxzKy8sICcnKTtcbiAgICB9XG5cbiAgICAvLyA0LjEgV2ViVlRUIGN1ZSB0aW1pbmdzLlxuICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgY3VlLnN0YXJ0VGltZSA9IGNvbnN1bWVUaW1lU3RhbXAoKTsgLy8gKDEpIGNvbGxlY3QgY3VlIHN0YXJ0IHRpbWVcbiAgICBza2lwV2hpdGVzcGFjZSgpO1xuICAgIGlmIChpbnB1dC5zbGljZSgwLCAzKSAhPT0gJy0tPicpIHtcbiAgICAgIC8vICgzKSBuZXh0IGNoYXJhY3RlcnMgbXVzdCBtYXRjaCAnLS0+J1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIHRpbWUgc3RhbXAgKHRpbWUgc3RhbXBzIG11c3QgYmUgc2VwYXJhdGVkIGJ5ICctLT4nKTogXCIgKyBvSW5wdXQpO1xuICAgIH1cbiAgICBpbnB1dCA9IGlucHV0LnNsaWNlKDMpO1xuICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgY3VlLmVuZFRpbWUgPSBjb25zdW1lVGltZVN0YW1wKCk7IC8vICg1KSBjb2xsZWN0IGN1ZSBlbmQgdGltZVxuXG4gICAgLy8gNC4xIFdlYlZUVCBjdWUgc2V0dGluZ3MgbGlzdC5cbiAgICBza2lwV2hpdGVzcGFjZSgpO1xuICAgIGNvbnN1bWVDdWVTZXR0aW5ncyhpbnB1dCwgY3VlKTtcbiAgfVxuICBmdW5jdGlvbiBmaXhMaW5lQnJlYWtzKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLzxicig/OiBcXC8pPz4vZ2ksICdcXG4nKTtcbiAgfVxuICB2YXIgVlRUUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWVFRQYXJzZXIoKSB7XG4gICAgICB0aGlzLnN0YXRlID0gJ0lOSVRJQUwnO1xuICAgICAgdGhpcy5idWZmZXIgPSAnJztcbiAgICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKCk7XG4gICAgICB0aGlzLnJlZ2lvbkxpc3QgPSBbXTtcbiAgICAgIHRoaXMuY3VlID0gbnVsbDtcbiAgICAgIHRoaXMub25jdWUgPSB2b2lkIDA7XG4gICAgICB0aGlzLm9ucGFyc2luZ2Vycm9yID0gdm9pZCAwO1xuICAgICAgdGhpcy5vbmZsdXNoID0gdm9pZCAwO1xuICAgIH1cbiAgICB2YXIgX3Byb3RvMyA9IFZUVFBhcnNlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvMy5wYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKGRhdGEpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGRhdGEgdGhlbiB3ZSB3b24ndCBkZWNvZGUgaXQsIGJ1dCB3aWxsIGp1c3QgdHJ5IHRvIHBhcnNlXG4gICAgICAvLyB3aGF0ZXZlciBpcyBpbiBidWZmZXIgYWxyZWFkeS4gVGhpcyBtYXkgb2NjdXIgaW4gY2lyY3Vtc3RhbmNlcywgZm9yXG4gICAgICAvLyBleGFtcGxlIHdoZW4gZmx1c2goKSBpcyBjYWxsZWQuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICAvLyBUcnkgdG8gZGVjb2RlIHRoZSBkYXRhIHRoYXQgd2UgcmVjZWl2ZWQuXG4gICAgICAgIF90aGlzLmJ1ZmZlciArPSBfdGhpcy5kZWNvZGVyLmRlY29kZShkYXRhLCB7XG4gICAgICAgICAgc3RyZWFtOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gY29sbGVjdE5leHRMaW5lKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gX3RoaXMuYnVmZmVyO1xuICAgICAgICB2YXIgcG9zID0gMDtcbiAgICAgICAgYnVmZmVyID0gZml4TGluZUJyZWFrcyhidWZmZXIpO1xuICAgICAgICB3aGlsZSAocG9zIDwgYnVmZmVyLmxlbmd0aCAmJiBidWZmZXJbcG9zXSAhPT0gJ1xccicgJiYgYnVmZmVyW3Bvc10gIT09ICdcXG4nKSB7XG4gICAgICAgICAgKytwb3M7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmUgPSBidWZmZXIuc2xpY2UoMCwgcG9zKTtcbiAgICAgICAgLy8gQWR2YW5jZSB0aGUgYnVmZmVyIGVhcmx5IGluIGNhc2Ugd2UgZmFpbCBiZWxvdy5cbiAgICAgICAgaWYgKGJ1ZmZlcltwb3NdID09PSAnXFxyJykge1xuICAgICAgICAgICsrcG9zO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidWZmZXJbcG9zXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICArK3BvcztcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5idWZmZXIgPSBidWZmZXIuc2xpY2UocG9zKTtcbiAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICB9XG5cbiAgICAgIC8vIDMuMiBXZWJWVFQgbWV0YWRhdGEgaGVhZGVyIHN5bnRheFxuICAgICAgZnVuY3Rpb24gcGFyc2VIZWFkZXIoaW5wdXQpIHtcbiAgICAgICAgcGFyc2VPcHRpb25zKGlucHV0LCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgICAgIC8vIHN3aXRjaCAoaykge1xuICAgICAgICAgIC8vIGNhc2UgJ3JlZ2lvbic6XG4gICAgICAgICAgLy8gMy4zIFdlYlZUVCByZWdpb24gbWV0YWRhdGEgaGVhZGVyIHN5bnRheFxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdwYXJzZSByZWdpb24nLCB2KTtcbiAgICAgICAgICAvLyBwYXJzZVJlZ2lvbih2KTtcbiAgICAgICAgICAvLyBicmVhaztcbiAgICAgICAgICAvLyB9XG4gICAgICAgIH0sIC86Lyk7XG4gICAgICB9XG5cbiAgICAgIC8vIDUuMSBXZWJWVFQgZmlsZSBwYXJzaW5nLlxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGxpbmUgPSAnJztcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlID09PSAnSU5JVElBTCcpIHtcbiAgICAgICAgICAvLyBXZSBjYW4ndCBzdGFydCBwYXJzaW5nIHVudGlsIHdlIGhhdmUgdGhlIGZpcnN0IGxpbmUuXG4gICAgICAgICAgaWYgKCEvXFxyXFxufFxcbi8udGVzdChfdGhpcy5idWZmZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG4gICAgICAgICAgbGluZSA9IGNvbGxlY3ROZXh0TGluZSgpO1xuICAgICAgICAgIC8vIHN0cmlwIG9mIFVURi04IEJPTSBpZiBhbnlcbiAgICAgICAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CeXRlX29yZGVyX21hcmsjVVRGLThcbiAgICAgICAgICB2YXIgbSA9IGxpbmUubWF0Y2goL14ow6/Cu8K/KT9XRUJWVFQoWyBcXHRdLiopPyQvKTtcbiAgICAgICAgICBpZiAoIShtICE9IG51bGwgJiYgbVswXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIFdlYlZUVCBzaWduYXR1cmUuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzLnN0YXRlID0gJ0hFQURFUic7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFscmVhZHlDb2xsZWN0ZWRMaW5lID0gZmFsc2U7XG4gICAgICAgIHdoaWxlIChfdGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAvLyBXZSBjYW4ndCBwYXJzZSBhIGxpbmUgdW50aWwgd2UgaGF2ZSB0aGUgZnVsbCBsaW5lLlxuICAgICAgICAgIGlmICghL1xcclxcbnxcXG4vLnRlc3QoX3RoaXMuYnVmZmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghYWxyZWFkeUNvbGxlY3RlZExpbmUpIHtcbiAgICAgICAgICAgIGxpbmUgPSBjb2xsZWN0TmV4dExpbmUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWxyZWFkeUNvbGxlY3RlZExpbmUgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpdGNoIChfdGhpcy5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnSEVBREVSJzpcbiAgICAgICAgICAgICAgLy8gMTMtMTggLSBBbGxvdyBhIGhlYWRlciAobWV0YWRhdGEpIHVuZGVyIHRoZSBXRUJWVFQgbGluZS5cbiAgICAgICAgICAgICAgaWYgKC86Ly50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VIZWFkZXIobGluZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWxpbmUpIHtcbiAgICAgICAgICAgICAgICAvLyBBbiBlbXB0eSBsaW5lIHRlcm1pbmF0ZXMgdGhlIGhlYWRlciBhbmQgc3RhcnRzIHRoZSBib2R5IChjdWVzKS5cbiAgICAgICAgICAgICAgICBfdGhpcy5zdGF0ZSA9ICdJRCc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlICdOT1RFJzpcbiAgICAgICAgICAgICAgLy8gSWdub3JlIE5PVEUgYmxvY2tzLlxuICAgICAgICAgICAgICBpZiAoIWxpbmUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zdGF0ZSA9ICdJRCc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlICdJRCc6XG4gICAgICAgICAgICAgIC8vIENoZWNrIGZvciB0aGUgc3RhcnQgb2YgTk9URSBibG9ja3MuXG4gICAgICAgICAgICAgIGlmICgvXk5PVEUoJHxbIFxcdF0pLy50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc3RhdGUgPSAnTk9URSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gMTktMjkgLSBBbGxvdyBhbnkgbnVtYmVyIG9mIGxpbmUgdGVybWluYXRvcnMsIHRoZW4gaW5pdGlhbGl6ZSBuZXcgY3VlIHZhbHVlcy5cbiAgICAgICAgICAgICAgaWYgKCFsaW5lKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX3RoaXMuY3VlID0gbmV3IFZUVEN1ZSgwLCAwLCAnJyk7XG4gICAgICAgICAgICAgIF90aGlzLnN0YXRlID0gJ0NVRSc7XG4gICAgICAgICAgICAgIC8vIDMwLTM5IC0gQ2hlY2sgaWYgc2VsZiBsaW5lIGNvbnRhaW5zIGFuIG9wdGlvbmFsIGlkZW50aWZpZXIgb3IgdGltaW5nIGRhdGEuXG4gICAgICAgICAgICAgIGlmIChsaW5lLmluZGV4T2YoJy0tPicpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmN1ZS5pZCA9IGxpbmU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByb2Nlc3MgbGluZSBhcyBzdGFydCBvZiBhIGN1ZS5cbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgICAgIGNhc2UgJ0NVRSc6XG4gICAgICAgICAgICAgIC8vIDQwIC0gQ29sbGVjdCBjdWUgdGltaW5ncyBhbmQgc2V0dGluZ3MuXG4gICAgICAgICAgICAgIGlmICghX3RoaXMuY3VlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc3RhdGUgPSAnQkFEQ1VFJztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnNlQ3VlKGxpbmUsIF90aGlzLmN1ZSwgX3RoaXMucmVnaW9uTGlzdCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBjYXNlIG9mIGFuIGVycm9yIGlnbm9yZSByZXN0IG9mIHRoZSBjdWUuXG4gICAgICAgICAgICAgICAgX3RoaXMuY3VlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfdGhpcy5zdGF0ZSA9ICdCQURDVUUnO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF90aGlzLnN0YXRlID0gJ0NVRVRFWFQnO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgJ0NVRVRFWFQnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIGhhc1N1YnN0cmluZyA9IGxpbmUuaW5kZXhPZignLS0+JykgIT09IC0xO1xuICAgICAgICAgICAgICAgIC8vIDM0IC0gSWYgd2UgaGF2ZSBhbiBlbXB0eSBsaW5lIHRoZW4gcmVwb3J0IHRoZSBjdWUuXG4gICAgICAgICAgICAgICAgLy8gMzUgLSBJZiB3ZSBoYXZlIHRoZSBzcGVjaWFsIHN1YnN0cmluZyAnLS0+JyB0aGVuIHJlcG9ydCB0aGUgY3VlLFxuICAgICAgICAgICAgICAgIC8vIGJ1dCBkbyBub3QgY29sbGVjdCB0aGUgbGluZSBhcyB3ZSBuZWVkIHRvIHByb2Nlc3MgdGhlIGN1cnJlbnRcbiAgICAgICAgICAgICAgICAvLyBvbmUgYXMgYSBuZXcgY3VlLlxuICAgICAgICAgICAgICAgIGlmICghbGluZSB8fCBoYXNTdWJzdHJpbmcgJiYgKGFscmVhZHlDb2xsZWN0ZWRMaW5lID0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBkb25lIHBhcnNpbmcgc2VsZiBjdWUuXG4gICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub25jdWUgJiYgX3RoaXMuY3VlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9uY3VlKF90aGlzLmN1ZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBfdGhpcy5jdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgX3RoaXMuc3RhdGUgPSAnSUQnO1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY3VlLnRleHQpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzLmN1ZS50ZXh0ICs9ICdcXG4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5jdWUudGV4dCArPSBsaW5lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSAnQkFEQ1VFJzpcbiAgICAgICAgICAgICAgLy8gNTQtNjIgLSBDb2xsZWN0IGFuZCBkaXNjYXJkIHRoZSByZW1haW5pbmcgY3VlLlxuICAgICAgICAgICAgICBpZiAoIWxpbmUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zdGF0ZSA9ICdJRCc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBwYXJzaW5nIGEgY3VlLCByZXBvcnQgd2hhdCB3ZSBoYXZlLlxuICAgICAgICBpZiAoX3RoaXMuc3RhdGUgPT09ICdDVUVURVhUJyAmJiBfdGhpcy5jdWUgJiYgX3RoaXMub25jdWUpIHtcbiAgICAgICAgICBfdGhpcy5vbmN1ZShfdGhpcy5jdWUpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmN1ZSA9IG51bGw7XG4gICAgICAgIC8vIEVudGVyIEJBRFdFQlZUVCBzdGF0ZSBpZiBoZWFkZXIgd2FzIG5vdCBwYXJzZWQgY29ycmVjdGx5IG90aGVyd2lzZVxuICAgICAgICAvLyBhbm90aGVyIGV4Y2VwdGlvbiBvY2N1cnJlZCBzbyBlbnRlciBCQURDVUUgc3RhdGUuXG4gICAgICAgIF90aGlzLnN0YXRlID0gX3RoaXMuc3RhdGUgPT09ICdJTklUSUFMJyA/ICdCQURXRUJWVFQnIDogJ0JBRENVRSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIF9wcm90bzMuZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBGaW5pc2ggZGVjb2RpbmcgdGhlIHN0cmVhbS5cbiAgICAgICAgLy8gX3RoaXMuYnVmZmVyICs9IF90aGlzLmRlY29kZXIuZGVjb2RlKCk7XG4gICAgICAgIC8vIFN5bnRoZXNpemUgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBjdWUgb3IgcmVnaW9uLlxuICAgICAgICBpZiAoX3RoaXMuY3VlIHx8IF90aGlzLnN0YXRlID09PSAnSEVBREVSJykge1xuICAgICAgICAgIF90aGlzLmJ1ZmZlciArPSAnXFxuXFxuJztcbiAgICAgICAgICBfdGhpcy5wYXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlJ3ZlIGZsdXNoZWQsIHBhcnNlZCwgYW5kIHdlJ3JlIHN0aWxsIG9uIHRoZSBJTklUSUFMIHN0YXRlIHRoZW5cbiAgICAgICAgLy8gdGhhdCBtZWFucyB3ZSBkb24ndCBoYXZlIGVub3VnaCBvZiB0aGUgc3RyZWFtIHRvIHBhcnNlIHRoZSBmaXJzdFxuICAgICAgICAvLyBsaW5lLlxuICAgICAgICBpZiAoX3RoaXMuc3RhdGUgPT09ICdJTklUSUFMJyB8fCBfdGhpcy5zdGF0ZSA9PT0gJ0JBRFdFQlZUVCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hbGZvcm1lZCBXZWJWVFQgc2lnbmF0dXJlLicpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChfdGhpcy5vbnBhcnNpbmdlcnJvcikge1xuICAgICAgICAgIF90aGlzLm9ucGFyc2luZ2Vycm9yKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMub25mbHVzaCkge1xuICAgICAgICBfdGhpcy5vbmZsdXNoKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBWVFRQYXJzZXI7XG4gIH0oKTtcblxuICB2YXIgTElORUJSRUFLUyA9IC9cXHJcXG58XFxuXFxyfFxcbnxcXHIvZztcblxuICAvLyBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGggaXMgbm90IHN1cHBvcnRlZCBpbiBJRTExXG4gIHZhciBzdGFydHNXaXRoID0gZnVuY3Rpb24gc3RhcnRzV2l0aChpbnB1dFN0cmluZywgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikge1xuICAgIGlmIChwb3NpdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBwb3NpdGlvbiA9IDA7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dFN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyBzZWFyY2hTdHJpbmcubGVuZ3RoKSA9PT0gc2VhcmNoU3RyaW5nO1xuICB9O1xuICB2YXIgY3VlU3RyaW5nMm1pbGxpcyA9IGZ1bmN0aW9uIGN1ZVN0cmluZzJtaWxsaXModGltZVN0cmluZykge1xuICAgIHZhciB0cyA9IHBhcnNlSW50KHRpbWVTdHJpbmcuc2xpY2UoLTMpKTtcbiAgICB2YXIgc2VjcyA9IHBhcnNlSW50KHRpbWVTdHJpbmcuc2xpY2UoLTYsIC00KSk7XG4gICAgdmFyIG1pbnMgPSBwYXJzZUludCh0aW1lU3RyaW5nLnNsaWNlKC05LCAtNykpO1xuICAgIHZhciBob3VycyA9IHRpbWVTdHJpbmcubGVuZ3RoID4gOSA/IHBhcnNlSW50KHRpbWVTdHJpbmcuc3Vic3RyaW5nKDAsIHRpbWVTdHJpbmcuaW5kZXhPZignOicpKSkgOiAwO1xuICAgIGlmICghaXNGaW5pdGVOdW1iZXIodHMpIHx8ICFpc0Zpbml0ZU51bWJlcihzZWNzKSB8fCAhaXNGaW5pdGVOdW1iZXIobWlucykgfHwgIWlzRmluaXRlTnVtYmVyKGhvdXJzKSkge1xuICAgICAgdGhyb3cgRXJyb3IoXCJNYWxmb3JtZWQgWC1USU1FU1RBTVAtTUFQOiBMb2NhbDpcIiArIHRpbWVTdHJpbmcpO1xuICAgIH1cbiAgICB0cyArPSAxMDAwICogc2VjcztcbiAgICB0cyArPSA2MCAqIDEwMDAgKiBtaW5zO1xuICAgIHRzICs9IDYwICogNjAgKiAxMDAwICogaG91cnM7XG4gICAgcmV0dXJuIHRzO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIHVuaXF1ZSBoYXNoIGlkIGZvciBhIGN1ZSBiYXNlZCBvbiBzdGFydC9lbmQgdGltZXMgYW5kIHRleHQuXG4gIC8vIFRoaXMgaGVscHMgdGltZWxpbmUtY29udHJvbGxlciB0byBhdm9pZCBzaG93aW5nIHJlcGVhdGVkIGNhcHRpb25zLlxuICBmdW5jdGlvbiBnZW5lcmF0ZUN1ZUlkKHN0YXJ0VGltZSwgZW5kVGltZSwgdGV4dCkge1xuICAgIHJldHVybiBoYXNoKHN0YXJ0VGltZS50b1N0cmluZygpKSArIGhhc2goZW5kVGltZS50b1N0cmluZygpKSArIGhhc2godGV4dCk7XG4gIH1cbiAgdmFyIGNhbGN1bGF0ZU9mZnNldCA9IGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldCh2dHRDQ3MsIGNjLCBwcmVzZW50YXRpb25UaW1lKSB7XG4gICAgdmFyIGN1cnJDQyA9IHZ0dENDc1tjY107XG4gICAgdmFyIHByZXZDQyA9IHZ0dENDc1tjdXJyQ0MucHJldkNDXTtcblxuICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IGRpc2NvbnRpbnVpdHkgb3IgY3VlcyBoYXZlIGJlZW4gcHJvY2Vzc2VkIHNpbmNlIHRoZSBsYXN0IGRpc2NvbnRpbnVpdHlcbiAgICAvLyBPZmZzZXQgPSBjdXJyZW50IGRpc2NvbnRpbnVpdHkgdGltZVxuICAgIGlmICghcHJldkNDIHx8ICFwcmV2Q0MubmV3ICYmIGN1cnJDQy5uZXcpIHtcbiAgICAgIHZ0dENDcy5jY09mZnNldCA9IHZ0dENDcy5wcmVzZW50YXRpb25PZmZzZXQgPSBjdXJyQ0Muc3RhcnQ7XG4gICAgICBjdXJyQ0MubmV3ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVGhlcmUgaGF2ZSBiZWVuIGRpc2NvbnRpbnVpdGllcyBzaW5jZSBjdWVzIHdlcmUgbGFzdCBwYXJzZWQuXG4gICAgLy8gT2Zmc2V0ID0gdGltZSBlbGFwc2VkXG4gICAgd2hpbGUgKChfcHJldkNDID0gcHJldkNDKSAhPSBudWxsICYmIF9wcmV2Q0MubmV3KSB7XG4gICAgICB2YXIgX3ByZXZDQztcbiAgICAgIHZ0dENDcy5jY09mZnNldCArPSBjdXJyQ0Muc3RhcnQgLSBwcmV2Q0Muc3RhcnQ7XG4gICAgICBjdXJyQ0MubmV3ID0gZmFsc2U7XG4gICAgICBjdXJyQ0MgPSBwcmV2Q0M7XG4gICAgICBwcmV2Q0MgPSB2dHRDQ3NbY3VyckNDLnByZXZDQ107XG4gICAgfVxuICAgIHZ0dENDcy5wcmVzZW50YXRpb25PZmZzZXQgPSBwcmVzZW50YXRpb25UaW1lO1xuICB9O1xuICBmdW5jdGlvbiBwYXJzZVdlYlZUVCh2dHRCeXRlQXJyYXksIGluaXRQVFMsIHZ0dENDcywgY2MsIHRpbWVPZmZzZXQsIGNhbGxCYWNrLCBlcnJvckNhbGxCYWNrKSB7XG4gICAgdmFyIHBhcnNlciA9IG5ldyBWVFRQYXJzZXIoKTtcbiAgICAvLyBDb252ZXJ0IGJ5dGVBcnJheSBpbnRvIHN0cmluZywgcmVwbGFjaW5nIGFueSBzb21ld2hhdCBleG90aWMgbGluZWZlZWRzIHdpdGggXCJcXG5cIiwgdGhlbiBzcGxpdCBvbiB0aGF0IGNoYXJhY3Rlci5cbiAgICAvLyBVaW50OEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgaXMgbm90IGltcGxlbWVudGVkIGluIElFMTFcbiAgICB2YXIgdnR0TGluZXMgPSB1dGY4QXJyYXlUb1N0cihuZXcgVWludDhBcnJheSh2dHRCeXRlQXJyYXkpKS50cmltKCkucmVwbGFjZShMSU5FQlJFQUtTLCAnXFxuJykuc3BsaXQoJ1xcbicpO1xuICAgIHZhciBjdWVzID0gW107XG4gICAgdmFyIGluaXQ5MGtIeiA9IGluaXRQVFMgPyB0b01wZWdUc0Nsb2NrRnJvbVRpbWVzY2FsZShpbml0UFRTLmJhc2VUaW1lLCBpbml0UFRTLnRpbWVzY2FsZSkgOiAwO1xuICAgIHZhciBjdWVUaW1lID0gJzAwOjAwLjAwMCc7XG4gICAgdmFyIHRpbWVzdGFtcE1hcE1QRUdUUyA9IDA7XG4gICAgdmFyIHRpbWVzdGFtcE1hcExPQ0FMID0gMDtcbiAgICB2YXIgcGFyc2luZ0Vycm9yO1xuICAgIHZhciBpbkhlYWRlciA9IHRydWU7XG4gICAgcGFyc2VyLm9uY3VlID0gZnVuY3Rpb24gKGN1ZSkge1xuICAgICAgLy8gQWRqdXN0IGN1ZSB0aW1pbmc7IGNsYW1wIGN1ZXMgdG8gc3RhcnQgbm8gZWFybGllciB0aGFuIC0gYW5kIGRyb3AgY3VlcyB0aGF0IGRvbid0IGVuZCBhZnRlciAtIDAgb24gdGltZWxpbmUuXG4gICAgICB2YXIgY3VyckNDID0gdnR0Q0NzW2NjXTtcbiAgICAgIHZhciBjdWVPZmZzZXQgPSB2dHRDQ3MuY2NPZmZzZXQ7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBzdWJ0aXRsZSBQVFMgb2Zmc2V0XG4gICAgICB2YXIgd2ViVnR0TXBlZ1RzTWFwT2Zmc2V0ID0gKHRpbWVzdGFtcE1hcE1QRUdUUyAtIGluaXQ5MGtIeikgLyA5MDAwMDtcblxuICAgICAgLy8gVXBkYXRlIG9mZnNldHMgZm9yIG5ldyBkaXNjb250aW51aXRpZXNcbiAgICAgIGlmIChjdXJyQ0MgIT0gbnVsbCAmJiBjdXJyQ0MubmV3KSB7XG4gICAgICAgIGlmICh0aW1lc3RhbXBNYXBMT0NBTCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBsb2NhbCB0aW1lIGlzIHByb3ZpZGVkLCBvZmZzZXQgPSBkaXNjb250aW51aXR5IHN0YXJ0IHRpbWUgLSBsb2NhbCB0aW1lXG4gICAgICAgICAgY3VlT2Zmc2V0ID0gdnR0Q0NzLmNjT2Zmc2V0ID0gY3VyckNDLnN0YXJ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGN1bGF0ZU9mZnNldCh2dHRDQ3MsIGNjLCB3ZWJWdHRNcGVnVHNNYXBPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAod2ViVnR0TXBlZ1RzTWFwT2Zmc2V0KSB7XG4gICAgICAgIGlmICghaW5pdFBUUykge1xuICAgICAgICAgIHBhcnNpbmdFcnJvciA9IG5ldyBFcnJvcignTWlzc2luZyBpbml0UFRTIGZvciBWVFQgTVBFR1RTJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGhhdmUgTVBFR1RTLCBvZmZzZXQgPSBwcmVzZW50YXRpb24gdGltZSArIGRpc2NvbnRpbnVpdHkgb2Zmc2V0XG4gICAgICAgIGN1ZU9mZnNldCA9IHdlYlZ0dE1wZWdUc01hcE9mZnNldCAtIHZ0dENDcy5wcmVzZW50YXRpb25PZmZzZXQ7XG4gICAgICB9XG4gICAgICB2YXIgZHVyYXRpb24gPSBjdWUuZW5kVGltZSAtIGN1ZS5zdGFydFRpbWU7XG4gICAgICB2YXIgc3RhcnRUaW1lID0gbm9ybWFsaXplUHRzKChjdWUuc3RhcnRUaW1lICsgY3VlT2Zmc2V0IC0gdGltZXN0YW1wTWFwTE9DQUwpICogOTAwMDAsIHRpbWVPZmZzZXQgKiA5MDAwMCkgLyA5MDAwMDtcbiAgICAgIGN1ZS5zdGFydFRpbWUgPSBNYXRoLm1heChzdGFydFRpbWUsIDApO1xuICAgICAgY3VlLmVuZFRpbWUgPSBNYXRoLm1heChzdGFydFRpbWUgKyBkdXJhdGlvbiwgMCk7XG5cbiAgICAgIC8vdHJpbSB0cmFpbGluZyB3ZWJ2dHQgYmxvY2sgd2hpdGVzcGFjZXNcbiAgICAgIHZhciB0ZXh0ID0gY3VlLnRleHQudHJpbSgpO1xuXG4gICAgICAvLyBGaXggZW5jb2Rpbmcgb2Ygc3BlY2lhbCBjaGFyYWN0ZXJzXG4gICAgICBjdWUudGV4dCA9IGRlY29kZVVSSUNvbXBvbmVudChlbmNvZGVVUklDb21wb25lbnQodGV4dCkpO1xuXG4gICAgICAvLyBJZiB0aGUgY3VlIHdhcyBub3QgYXNzaWduZWQgYW4gaWQgZnJvbSB0aGUgVlRUIGZpbGUgKGxpbmUgYWJvdmUgdGhlIGNvbnRlbnQpLCBjcmVhdGUgb25lLlxuICAgICAgaWYgKCFjdWUuaWQpIHtcbiAgICAgICAgY3VlLmlkID0gZ2VuZXJhdGVDdWVJZChjdWUuc3RhcnRUaW1lLCBjdWUuZW5kVGltZSwgdGV4dCk7XG4gICAgICB9XG4gICAgICBpZiAoY3VlLmVuZFRpbWUgPiAwKSB7XG4gICAgICAgIGN1ZXMucHVzaChjdWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgcGFyc2VyLm9ucGFyc2luZ2Vycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBwYXJzaW5nRXJyb3IgPSBlcnJvcjtcbiAgICB9O1xuICAgIHBhcnNlci5vbmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHBhcnNpbmdFcnJvcikge1xuICAgICAgICBlcnJvckNhbGxCYWNrKHBhcnNpbmdFcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNhbGxCYWNrKGN1ZXMpO1xuICAgIH07XG5cbiAgICAvLyBHbyB0aHJvdWdoIGNvbnRlbnRzIGxpbmUgYnkgbGluZS5cbiAgICB2dHRMaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICBpZiAoaW5IZWFkZXIpIHtcbiAgICAgICAgLy8gTG9vayBmb3IgWC1USU1FU1RBTVAtTUFQIGluIGhlYWRlci5cbiAgICAgICAgaWYgKHN0YXJ0c1dpdGgobGluZSwgJ1gtVElNRVNUQU1QLU1BUD0nKSkge1xuICAgICAgICAgIC8vIE9uY2UgZm91bmQsIG5vIG1vcmUgYXJlIGFsbG93ZWQgYW55d2F5LCBzbyBzdG9wIHNlYXJjaGluZy5cbiAgICAgICAgICBpbkhlYWRlciA9IGZhbHNlO1xuICAgICAgICAgIC8vIEV4dHJhY3QgTE9DQUwgYW5kIE1QRUdUUy5cbiAgICAgICAgICBsaW5lLnNsaWNlKDE2KS5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0c1dpdGgodGltZXN0YW1wLCAnTE9DQUw6JykpIHtcbiAgICAgICAgICAgICAgY3VlVGltZSA9IHRpbWVzdGFtcC5zbGljZSg2KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnRzV2l0aCh0aW1lc3RhbXAsICdNUEVHVFM6JykpIHtcbiAgICAgICAgICAgICAgdGltZXN0YW1wTWFwTVBFR1RTID0gcGFyc2VJbnQodGltZXN0YW1wLnNsaWNlKDcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQ29udmVydCBjdWUgdGltZSB0byBzZWNvbmRzXG4gICAgICAgICAgICB0aW1lc3RhbXBNYXBMT0NBTCA9IGN1ZVN0cmluZzJtaWxsaXMoY3VlVGltZSkgLyAxMDAwO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBwYXJzaW5nRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmV0dXJuIHdpdGhvdXQgcGFyc2luZyBYLVRJTUVTVEFNUC1NQVAgbGluZS5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAobGluZSA9PT0gJycpIHtcbiAgICAgICAgICBpbkhlYWRlciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBQYXJzZSBsaW5lIGJ5IGRlZmF1bHQuXG4gICAgICBwYXJzZXIucGFyc2UobGluZSArICdcXG4nKTtcbiAgICB9KTtcbiAgICBwYXJzZXIuZmx1c2goKTtcbiAgfVxuXG4gIHZhciBJTVNDMV9DT0RFQyA9ICdzdHBwLnR0bWwuaW0xdCc7XG5cbiAgLy8gVGltZSBmb3JtYXQ6IGg6bTpzOmZyYW1lcyguc3ViZnJhbWVzKVxuICB2YXIgSE1TRl9SRUdFWCA9IC9eKFxcZHsyLH0pOihcXGR7Mn0pOihcXGR7Mn0pOihcXGR7Mn0pXFwuPyhcXGQrKT8kLztcblxuICAvLyBUaW1lIGZvcm1hdDogaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcywgZnJhbWVzLCB0aWNrc1xuICB2YXIgVElNRV9VTklUX1JFR0VYID0gL14oXFxkKig/OlxcLlxcZCopPykoaHxtfHN8bXN8Znx0KSQvO1xuICB2YXIgdGV4dEFsaWduVG9MaW5lQWxpZ24gPSB7XG4gICAgbGVmdDogJ3N0YXJ0JyxcbiAgICBjZW50ZXI6ICdjZW50ZXInLFxuICAgIHJpZ2h0OiAnZW5kJyxcbiAgICBzdGFydDogJ3N0YXJ0JyxcbiAgICBlbmQ6ICdlbmQnXG4gIH07XG4gIGZ1bmN0aW9uIHBhcnNlSU1TQzEocGF5bG9hZCwgaW5pdFBUUywgY2FsbEJhY2ssIGVycm9yQ2FsbEJhY2spIHtcbiAgICB2YXIgcmVzdWx0cyA9IGZpbmRCb3gobmV3IFVpbnQ4QXJyYXkocGF5bG9hZCksIFsnbWRhdCddKTtcbiAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIGVycm9yQ2FsbEJhY2sobmV3IEVycm9yKCdDb3VsZCBub3QgcGFyc2UgSU1TQzEgbWRhdCcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHR0bWxMaXN0ID0gcmVzdWx0cy5tYXAoZnVuY3Rpb24gKG1kYXQpIHtcbiAgICAgIHJldHVybiB1dGY4QXJyYXlUb1N0cihtZGF0KTtcbiAgICB9KTtcbiAgICB2YXIgc3luY1RpbWUgPSB0b1RpbWVzY2FsZUZyb21TY2FsZShpbml0UFRTLmJhc2VUaW1lLCAxLCBpbml0UFRTLnRpbWVzY2FsZSk7XG4gICAgdHJ5IHtcbiAgICAgIHR0bWxMaXN0LmZvckVhY2goZnVuY3Rpb24gKHR0bWwpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxCYWNrKHBhcnNlVFRNTCh0dG1sLCBzeW5jVGltZSkpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGVycm9yQ2FsbEJhY2soZXJyb3IpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwYXJzZVRUTUwodHRtbCwgc3luY1RpbWUpIHtcbiAgICB2YXIgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgIHZhciB4bWxEb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHR0bWwsICd0ZXh0L3htbCcpO1xuICAgIHZhciB0dCA9IHhtbERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgndHQnKVswXTtcbiAgICBpZiAoIXR0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdHRtbCcpO1xuICAgIH1cbiAgICB2YXIgZGVmYXVsdFJhdGVJbmZvID0ge1xuICAgICAgZnJhbWVSYXRlOiAzMCxcbiAgICAgIHN1YkZyYW1lUmF0ZTogMSxcbiAgICAgIGZyYW1lUmF0ZU11bHRpcGxpZXI6IDAsXG4gICAgICB0aWNrUmF0ZTogMFxuICAgIH07XG4gICAgdmFyIHJhdGVJbmZvID0gT2JqZWN0LmtleXMoZGVmYXVsdFJhdGVJbmZvKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5KSB7XG4gICAgICByZXN1bHRba2V5XSA9IHR0LmdldEF0dHJpYnV0ZShcInR0cDpcIiArIGtleSkgfHwgZGVmYXVsdFJhdGVJbmZvW2tleV07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIHt9KTtcbiAgICB2YXIgdHJpbSA9IHR0LmdldEF0dHJpYnV0ZSgneG1sOnNwYWNlJykgIT09ICdwcmVzZXJ2ZSc7XG4gICAgdmFyIHN0eWxlRWxlbWVudHMgPSBjb2xsZWN0aW9uVG9EaWN0aW9uYXJ5KGdldEVsZW1lbnRDb2xsZWN0aW9uKHR0LCAnc3R5bGluZycsICdzdHlsZScpKTtcbiAgICB2YXIgcmVnaW9uRWxlbWVudHMgPSBjb2xsZWN0aW9uVG9EaWN0aW9uYXJ5KGdldEVsZW1lbnRDb2xsZWN0aW9uKHR0LCAnbGF5b3V0JywgJ3JlZ2lvbicpKTtcbiAgICB2YXIgY3VlRWxlbWVudHMgPSBnZXRFbGVtZW50Q29sbGVjdGlvbih0dCwgJ2JvZHknLCAnW2JlZ2luXScpO1xuICAgIHJldHVybiBbXS5tYXAuY2FsbChjdWVFbGVtZW50cywgZnVuY3Rpb24gKGN1ZUVsZW1lbnQpIHtcbiAgICAgIHZhciBjdWVUZXh0ID0gZ2V0VGV4dENvbnRlbnQoY3VlRWxlbWVudCwgdHJpbSk7XG4gICAgICBpZiAoIWN1ZVRleHQgfHwgIWN1ZUVsZW1lbnQuaGFzQXR0cmlidXRlKCdiZWdpbicpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHN0YXJ0VGltZSA9IHBhcnNlVHRtbFRpbWUoY3VlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2JlZ2luJyksIHJhdGVJbmZvKTtcbiAgICAgIHZhciBkdXJhdGlvbiA9IHBhcnNlVHRtbFRpbWUoY3VlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2R1cicpLCByYXRlSW5mbyk7XG4gICAgICB2YXIgZW5kVGltZSA9IHBhcnNlVHRtbFRpbWUoY3VlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2VuZCcpLCByYXRlSW5mbyk7XG4gICAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IHRpbWVzdGFtcFBhcnNpbmdFcnJvcihjdWVFbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmRUaW1lID09PSBudWxsKSB7XG4gICAgICAgIGlmIChkdXJhdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IHRpbWVzdGFtcFBhcnNpbmdFcnJvcihjdWVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbmRUaW1lID0gc3RhcnRUaW1lICsgZHVyYXRpb247XG4gICAgICB9XG4gICAgICB2YXIgY3VlID0gbmV3IFZUVEN1ZShzdGFydFRpbWUgLSBzeW5jVGltZSwgZW5kVGltZSAtIHN5bmNUaW1lLCBjdWVUZXh0KTtcbiAgICAgIGN1ZS5pZCA9IGdlbmVyYXRlQ3VlSWQoY3VlLnN0YXJ0VGltZSwgY3VlLmVuZFRpbWUsIGN1ZS50ZXh0KTtcbiAgICAgIHZhciByZWdpb24gPSByZWdpb25FbGVtZW50c1tjdWVFbGVtZW50LmdldEF0dHJpYnV0ZSgncmVnaW9uJyldO1xuICAgICAgdmFyIHN0eWxlID0gc3R5bGVFbGVtZW50c1tjdWVFbGVtZW50LmdldEF0dHJpYnV0ZSgnc3R5bGUnKV07XG5cbiAgICAgIC8vIEFwcGx5IHN0eWxlcyB0byBjdWVcbiAgICAgIHZhciBzdHlsZXMgPSBnZXRUdG1sU3R5bGVzKHJlZ2lvbiwgc3R5bGUsIHN0eWxlRWxlbWVudHMpO1xuICAgICAgdmFyIHRleHRBbGlnbiA9IHN0eWxlcy50ZXh0QWxpZ247XG4gICAgICBpZiAodGV4dEFsaWduKSB7XG4gICAgICAgIC8vIGN1ZS5wb3NpdGlvbkFsaWduIG5vdCBzZXR0YWJsZSBpbiBGRn4yMDE2XG4gICAgICAgIHZhciBsaW5lQWxpZ24gPSB0ZXh0QWxpZ25Ub0xpbmVBbGlnblt0ZXh0QWxpZ25dO1xuICAgICAgICBpZiAobGluZUFsaWduKSB7XG4gICAgICAgICAgY3VlLmxpbmVBbGlnbiA9IGxpbmVBbGlnbjtcbiAgICAgICAgfVxuICAgICAgICBjdWUuYWxpZ24gPSB0ZXh0QWxpZ247XG4gICAgICB9XG4gICAgICBfZXh0ZW5kcyhjdWUsIHN0eWxlcyk7XG4gICAgICByZXR1cm4gY3VlO1xuICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoY3VlKSB7XG4gICAgICByZXR1cm4gY3VlICE9PSBudWxsO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGdldEVsZW1lbnRDb2xsZWN0aW9uKGZyb21FbGVtZW50LCBwYXJlbnROYW1lLCBjaGlsZE5hbWUpIHtcbiAgICB2YXIgcGFyZW50ID0gZnJvbUVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocGFyZW50TmFtZSlbMF07XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY2hpbGROYW1lKSk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuICBmdW5jdGlvbiBjb2xsZWN0aW9uVG9EaWN0aW9uYXJ5KGVsZW1lbnRzV2l0aElkKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRzV2l0aElkLnJlZHVjZShmdW5jdGlvbiAoZGljdCwgZWxlbWVudCkge1xuICAgICAgdmFyIGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3htbDppZCcpO1xuICAgICAgaWYgKGlkKSB7XG4gICAgICAgIGRpY3RbaWRdID0gZWxlbWVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkaWN0O1xuICAgIH0sIHt9KTtcbiAgfVxuICBmdW5jdGlvbiBnZXRUZXh0Q29udGVudChlbGVtZW50LCB0cmltKSB7XG4gICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwoZWxlbWVudC5jaGlsZE5vZGVzKS5yZWR1Y2UoZnVuY3Rpb24gKHN0ciwgbm9kZSwgaSkge1xuICAgICAgdmFyIF9ub2RlJGNoaWxkTm9kZXM7XG4gICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gJ2JyJyAmJiBpKSB7XG4gICAgICAgIHJldHVybiBzdHIgKyAnXFxuJztcbiAgICAgIH1cbiAgICAgIGlmICgoX25vZGUkY2hpbGROb2RlcyA9IG5vZGUuY2hpbGROb2RlcykgIT0gbnVsbCAmJiBfbm9kZSRjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZ2V0VGV4dENvbnRlbnQobm9kZSwgdHJpbSk7XG4gICAgICB9IGVsc2UgaWYgKHRyaW0pIHtcbiAgICAgICAgcmV0dXJuIHN0ciArIG5vZGUudGV4dENvbnRlbnQudHJpbSgpLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHIgKyBub2RlLnRleHRDb250ZW50O1xuICAgIH0sICcnKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRUdG1sU3R5bGVzKHJlZ2lvbiwgc3R5bGUsIHN0eWxlRWxlbWVudHMpIHtcbiAgICB2YXIgdHRzTnMgPSAnaHR0cDovL3d3dy53My5vcmcvbnMvdHRtbCNzdHlsaW5nJztcbiAgICB2YXIgcmVnaW9uU3R5bGUgPSBudWxsO1xuICAgIHZhciBzdHlsZUF0dHJpYnV0ZXMgPSBbJ2Rpc3BsYXlBbGlnbicsICd0ZXh0QWxpZ24nLCAnY29sb3InLCAnYmFja2dyb3VuZENvbG9yJywgJ2ZvbnRTaXplJywgJ2ZvbnRGYW1pbHknXG4gICAgLy8gJ2ZvbnRXZWlnaHQnLFxuICAgIC8vICdsaW5lSGVpZ2h0JyxcbiAgICAvLyAnd3JhcE9wdGlvbicsXG4gICAgLy8gJ2ZvbnRTdHlsZScsXG4gICAgLy8gJ2RpcmVjdGlvbicsXG4gICAgLy8gJ3dyaXRpbmdNb2RlJ1xuICAgIF07XG4gICAgdmFyIHJlZ2lvblN0eWxlTmFtZSA9IHJlZ2lvbiAhPSBudWxsICYmIHJlZ2lvbi5oYXNBdHRyaWJ1dGUoJ3N0eWxlJykgPyByZWdpb24uZ2V0QXR0cmlidXRlKCdzdHlsZScpIDogbnVsbDtcbiAgICBpZiAocmVnaW9uU3R5bGVOYW1lICYmIHN0eWxlRWxlbWVudHMuaGFzT3duUHJvcGVydHkocmVnaW9uU3R5bGVOYW1lKSkge1xuICAgICAgcmVnaW9uU3R5bGUgPSBzdHlsZUVsZW1lbnRzW3JlZ2lvblN0eWxlTmFtZV07XG4gICAgfVxuICAgIHJldHVybiBzdHlsZUF0dHJpYnV0ZXMucmVkdWNlKGZ1bmN0aW9uIChzdHlsZXMsIG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldEF0dHJpYnV0ZU5TKHN0eWxlLCB0dHNOcywgbmFtZSkgfHwgZ2V0QXR0cmlidXRlTlMocmVnaW9uLCB0dHNOcywgbmFtZSkgfHwgZ2V0QXR0cmlidXRlTlMocmVnaW9uU3R5bGUsIHR0c05zLCBuYW1lKTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBzdHlsZXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgfSwge30pO1xuICB9XG4gIGZ1bmN0aW9uIGdldEF0dHJpYnV0ZU5TKGVsZW1lbnQsIG5zLCBuYW1lKSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQuaGFzQXR0cmlidXRlTlMobnMsIG5hbWUpID8gZWxlbWVudC5nZXRBdHRyaWJ1dGVOUyhucywgbmFtZSkgOiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIHRpbWVzdGFtcFBhcnNpbmdFcnJvcihub2RlKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcIkNvdWxkIG5vdCBwYXJzZSB0dG1sIHRpbWVzdGFtcCBcIiArIG5vZGUpO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlVHRtbFRpbWUodGltZUF0dHJpYnV0ZVZhbHVlLCByYXRlSW5mbykge1xuICAgIGlmICghdGltZUF0dHJpYnV0ZVZhbHVlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHNlY29uZHMgPSBwYXJzZVRpbWVTdGFtcCh0aW1lQXR0cmlidXRlVmFsdWUpO1xuICAgIGlmIChzZWNvbmRzID09PSBudWxsKSB7XG4gICAgICBpZiAoSE1TRl9SRUdFWC50ZXN0KHRpbWVBdHRyaWJ1dGVWYWx1ZSkpIHtcbiAgICAgICAgc2Vjb25kcyA9IHBhcnNlSG91cnNNaW51dGVzU2Vjb25kc0ZyYW1lcyh0aW1lQXR0cmlidXRlVmFsdWUsIHJhdGVJbmZvKTtcbiAgICAgIH0gZWxzZSBpZiAoVElNRV9VTklUX1JFR0VYLnRlc3QodGltZUF0dHJpYnV0ZVZhbHVlKSkge1xuICAgICAgICBzZWNvbmRzID0gcGFyc2VUaW1lVW5pdHModGltZUF0dHJpYnV0ZVZhbHVlLCByYXRlSW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZWNvbmRzO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlSG91cnNNaW51dGVzU2Vjb25kc0ZyYW1lcyh0aW1lQXR0cmlidXRlVmFsdWUsIHJhdGVJbmZvKSB7XG4gICAgdmFyIG0gPSBITVNGX1JFR0VYLmV4ZWModGltZUF0dHJpYnV0ZVZhbHVlKTtcbiAgICB2YXIgZnJhbWVzID0gKG1bNF0gfCAwKSArIChtWzVdIHwgMCkgLyByYXRlSW5mby5zdWJGcmFtZVJhdGU7XG4gICAgcmV0dXJuIChtWzFdIHwgMCkgKiAzNjAwICsgKG1bMl0gfCAwKSAqIDYwICsgKG1bM10gfCAwKSArIGZyYW1lcyAvIHJhdGVJbmZvLmZyYW1lUmF0ZTtcbiAgfVxuICBmdW5jdGlvbiBwYXJzZVRpbWVVbml0cyh0aW1lQXR0cmlidXRlVmFsdWUsIHJhdGVJbmZvKSB7XG4gICAgdmFyIG0gPSBUSU1FX1VOSVRfUkVHRVguZXhlYyh0aW1lQXR0cmlidXRlVmFsdWUpO1xuICAgIHZhciB2YWx1ZSA9IE51bWJlcihtWzFdKTtcbiAgICB2YXIgdW5pdCA9IG1bMl07XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICdoJzpcbiAgICAgICAgcmV0dXJuIHZhbHVlICogMzYwMDtcbiAgICAgIGNhc2UgJ20nOlxuICAgICAgICByZXR1cm4gdmFsdWUgKiA2MDtcbiAgICAgIGNhc2UgJ21zJzpcbiAgICAgICAgcmV0dXJuIHZhbHVlICogMTAwMDtcbiAgICAgIGNhc2UgJ2YnOlxuICAgICAgICByZXR1cm4gdmFsdWUgLyByYXRlSW5mby5mcmFtZVJhdGU7XG4gICAgICBjYXNlICd0JzpcbiAgICAgICAgcmV0dXJuIHZhbHVlIC8gcmF0ZUluZm8udGlja1JhdGU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHZhciBPdXRwdXRGaWx0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE91dHB1dEZpbHRlcih0aW1lbGluZUNvbnRyb2xsZXIsIHRyYWNrTmFtZSkge1xuICAgICAgdGhpcy50aW1lbGluZUNvbnRyb2xsZXIgPSB2b2lkIDA7XG4gICAgICB0aGlzLmN1ZVJhbmdlcyA9IFtdO1xuICAgICAgdGhpcy50cmFja05hbWUgPSB2b2lkIDA7XG4gICAgICB0aGlzLnN0YXJ0VGltZSA9IG51bGw7XG4gICAgICB0aGlzLmVuZFRpbWUgPSBudWxsO1xuICAgICAgdGhpcy5zY3JlZW4gPSBudWxsO1xuICAgICAgdGhpcy50aW1lbGluZUNvbnRyb2xsZXIgPSB0aW1lbGluZUNvbnRyb2xsZXI7XG4gICAgICB0aGlzLnRyYWNrTmFtZSA9IHRyYWNrTmFtZTtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IE91dHB1dEZpbHRlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLmRpc3BhdGNoQ3VlID0gZnVuY3Rpb24gZGlzcGF0Y2hDdWUoKSB7XG4gICAgICBpZiAodGhpcy5zdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy50aW1lbGluZUNvbnRyb2xsZXIuYWRkQ3Vlcyh0aGlzLnRyYWNrTmFtZSwgdGhpcy5zdGFydFRpbWUsIHRoaXMuZW5kVGltZSwgdGhpcy5zY3JlZW4sIHRoaXMuY3VlUmFuZ2VzKTtcbiAgICAgIHRoaXMuc3RhcnRUaW1lID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5uZXdDdWUgPSBmdW5jdGlvbiBuZXdDdWUoc3RhcnRUaW1lLCBlbmRUaW1lLCBzY3JlZW4pIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0VGltZSA9PT0gbnVsbCB8fCB0aGlzLnN0YXJ0VGltZSA+IHN0YXJ0VGltZSkge1xuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHN0YXJ0VGltZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZW5kVGltZSA9IGVuZFRpbWU7XG4gICAgICB0aGlzLnNjcmVlbiA9IHNjcmVlbjtcbiAgICAgIHRoaXMudGltZWxpbmVDb250cm9sbGVyLmNyZWF0ZUNhcHRpb25zVHJhY2sodGhpcy50cmFja05hbWUpO1xuICAgIH07XG4gICAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICB0aGlzLmN1ZVJhbmdlcyA9IFtdO1xuICAgICAgdGhpcy5zdGFydFRpbWUgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIE91dHB1dEZpbHRlcjtcbiAgfSgpO1xuXG4gIHZhciBUaW1lbGluZUNvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lQ29udHJvbGxlcihobHMpIHtcbiAgICAgIHRoaXMuaGxzID0gdm9pZCAwO1xuICAgICAgdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgICB0aGlzLmNvbmZpZyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgICB0aGlzLkN1ZXMgPSB2b2lkIDA7XG4gICAgICB0aGlzLnRleHRUcmFja3MgPSBbXTtcbiAgICAgIHRoaXMudHJhY2tzID0gW107XG4gICAgICB0aGlzLmluaXRQVFMgPSBbXTtcbiAgICAgIHRoaXMudW5wYXJzZWRWdHRGcmFncyA9IFtdO1xuICAgICAgdGhpcy5jYXB0aW9uc1RyYWNrcyA9IHt9O1xuICAgICAgdGhpcy5ub25OYXRpdmVDYXB0aW9uc1RyYWNrcyA9IHt9O1xuICAgICAgdGhpcy5jZWE2MDhQYXJzZXIxID0gdm9pZCAwO1xuICAgICAgdGhpcy5jZWE2MDhQYXJzZXIyID0gdm9pZCAwO1xuICAgICAgdGhpcy5sYXN0Q2MgPSAtMTtcbiAgICAgIC8vIExhc3QgdmlkZW8gKENFQS02MDgpIGZyYWdtZW50IENDXG4gICAgICB0aGlzLmxhc3RTbiA9IC0xO1xuICAgICAgLy8gTGFzdCB2aWRlbyAoQ0VBLTYwOCkgZnJhZ21lbnQgTVNOXG4gICAgICB0aGlzLmxhc3RQYXJ0SW5kZXggPSAtMTtcbiAgICAgIC8vIExhc3QgdmlkZW8gKENFQS02MDgpIGZyYWdtZW50IFBhcnQgSW5kZXhcbiAgICAgIHRoaXMucHJldkNDID0gLTE7XG4gICAgICAvLyBMYXN0IHN1YnRpdGxlIGZyYWdtZW50IENDXG4gICAgICB0aGlzLnZ0dENDcyA9IG5ld1ZUVENDcygpO1xuICAgICAgdGhpcy5jYXB0aW9uc1Byb3BlcnRpZXMgPSB2b2lkIDA7XG4gICAgICB0aGlzLmhscyA9IGhscztcbiAgICAgIHRoaXMuY29uZmlnID0gaGxzLmNvbmZpZztcbiAgICAgIHRoaXMuQ3VlcyA9IGhscy5jb25maWcuY3VlSGFuZGxlcjtcbiAgICAgIHRoaXMuY2FwdGlvbnNQcm9wZXJ0aWVzID0ge1xuICAgICAgICB0ZXh0VHJhY2sxOiB7XG4gICAgICAgICAgbGFiZWw6IHRoaXMuY29uZmlnLmNhcHRpb25zVGV4dFRyYWNrMUxhYmVsLFxuICAgICAgICAgIGxhbmd1YWdlQ29kZTogdGhpcy5jb25maWcuY2FwdGlvbnNUZXh0VHJhY2sxTGFuZ3VhZ2VDb2RlXG4gICAgICAgIH0sXG4gICAgICAgIHRleHRUcmFjazI6IHtcbiAgICAgICAgICBsYWJlbDogdGhpcy5jb25maWcuY2FwdGlvbnNUZXh0VHJhY2syTGFiZWwsXG4gICAgICAgICAgbGFuZ3VhZ2VDb2RlOiB0aGlzLmNvbmZpZy5jYXB0aW9uc1RleHRUcmFjazJMYW5ndWFnZUNvZGVcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dFRyYWNrMzoge1xuICAgICAgICAgIGxhYmVsOiB0aGlzLmNvbmZpZy5jYXB0aW9uc1RleHRUcmFjazNMYWJlbCxcbiAgICAgICAgICBsYW5ndWFnZUNvZGU6IHRoaXMuY29uZmlnLmNhcHRpb25zVGV4dFRyYWNrM0xhbmd1YWdlQ29kZVxuICAgICAgICB9LFxuICAgICAgICB0ZXh0VHJhY2s0OiB7XG4gICAgICAgICAgbGFiZWw6IHRoaXMuY29uZmlnLmNhcHRpb25zVGV4dFRyYWNrNExhYmVsLFxuICAgICAgICAgIGxhbmd1YWdlQ29kZTogdGhpcy5jb25maWcuY2FwdGlvbnNUZXh0VHJhY2s0TGFuZ3VhZ2VDb2RlXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBobHMub24oRXZlbnRzLk1FRElBX0FUVEFDSElORywgdGhpcy5vbk1lZGlhQXR0YWNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUVESUFfREVUQUNISU5HLCB0aGlzLm9uTWVkaWFEZXRhY2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUFOSUZFU1RfTE9BREVELCB0aGlzLm9uTWFuaWZlc3RMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5TVUJUSVRMRV9UUkFDS1NfVVBEQVRFRCwgdGhpcy5vblN1YnRpdGxlVHJhY2tzVXBkYXRlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkZSQUdfTE9BRElORywgdGhpcy5vbkZyYWdMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuRlJBR19MT0FERUQsIHRoaXMub25GcmFnTG9hZGVkLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuRlJBR19QQVJTSU5HX1VTRVJEQVRBLCB0aGlzLm9uRnJhZ1BhcnNpbmdVc2VyZGF0YSwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkZSQUdfREVDUllQVEVELCB0aGlzLm9uRnJhZ0RlY3J5cHRlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLklOSVRfUFRTX0ZPVU5ELCB0aGlzLm9uSW5pdFB0c0ZvdW5kLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuU1VCVElUTEVfVFJBQ0tTX0NMRUFSRUQsIHRoaXMub25TdWJ0aXRsZVRyYWNrc0NsZWFyZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5CVUZGRVJfRkxVU0hJTkcsIHRoaXMub25CdWZmZXJGbHVzaGluZywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBUaW1lbGluZUNvbnRyb2xsZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1FRElBX0FUVEFDSElORywgdGhpcy5vbk1lZGlhQXR0YWNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1FRElBX0RFVEFDSElORywgdGhpcy5vbk1lZGlhRGV0YWNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1BTklGRVNUX0xPQURJTkcsIHRoaXMub25NYW5pZmVzdExvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUFOSUZFU1RfTE9BREVELCB0aGlzLm9uTWFuaWZlc3RMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuU1VCVElUTEVfVFJBQ0tTX1VQREFURUQsIHRoaXMub25TdWJ0aXRsZVRyYWNrc1VwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRlJBR19MT0FESU5HLCB0aGlzLm9uRnJhZ0xvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRlJBR19MT0FERUQsIHRoaXMub25GcmFnTG9hZGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkZSQUdfUEFSU0lOR19VU0VSREFUQSwgdGhpcy5vbkZyYWdQYXJzaW5nVXNlcmRhdGEsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRlJBR19ERUNSWVBURUQsIHRoaXMub25GcmFnRGVjcnlwdGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLklOSVRfUFRTX0ZPVU5ELCB0aGlzLm9uSW5pdFB0c0ZvdW5kLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLlNVQlRJVExFX1RSQUNLU19DTEVBUkVELCB0aGlzLm9uU3VidGl0bGVUcmFja3NDbGVhcmVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkJVRkZFUl9GTFVTSElORywgdGhpcy5vbkJ1ZmZlckZsdXNoaW5nLCB0aGlzKTtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMuaGxzID0gdGhpcy5jb25maWcgPSB0aGlzLm1lZGlhID0gbnVsbDtcbiAgICAgIHRoaXMuY2VhNjA4UGFyc2VyMSA9IHRoaXMuY2VhNjA4UGFyc2VyMiA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIF9wcm90by5pbml0Q2VhNjA4UGFyc2VycyA9IGZ1bmN0aW9uIGluaXRDZWE2MDhQYXJzZXJzKCkge1xuICAgICAgdmFyIGNoYW5uZWwxID0gbmV3IE91dHB1dEZpbHRlcih0aGlzLCAndGV4dFRyYWNrMScpO1xuICAgICAgdmFyIGNoYW5uZWwyID0gbmV3IE91dHB1dEZpbHRlcih0aGlzLCAndGV4dFRyYWNrMicpO1xuICAgICAgdmFyIGNoYW5uZWwzID0gbmV3IE91dHB1dEZpbHRlcih0aGlzLCAndGV4dFRyYWNrMycpO1xuICAgICAgdmFyIGNoYW5uZWw0ID0gbmV3IE91dHB1dEZpbHRlcih0aGlzLCAndGV4dFRyYWNrNCcpO1xuICAgICAgdGhpcy5jZWE2MDhQYXJzZXIxID0gbmV3IENlYTYwOFBhcnNlcigxLCBjaGFubmVsMSwgY2hhbm5lbDIpO1xuICAgICAgdGhpcy5jZWE2MDhQYXJzZXIyID0gbmV3IENlYTYwOFBhcnNlcigzLCBjaGFubmVsMywgY2hhbm5lbDQpO1xuICAgIH07XG4gICAgX3Byb3RvLmFkZEN1ZXMgPSBmdW5jdGlvbiBhZGRDdWVzKHRyYWNrTmFtZSwgc3RhcnRUaW1lLCBlbmRUaW1lLCBzY3JlZW4sIGN1ZVJhbmdlcykge1xuICAgICAgLy8gc2tpcCBjdWVzIHdoaWNoIG92ZXJsYXAgbW9yZSB0aGFuIDUwJSB3aXRoIHByZXZpb3VzbHkgcGFyc2VkIHRpbWUgcmFuZ2VzXG4gICAgICB2YXIgbWVyZ2VkID0gZmFsc2U7XG4gICAgICBmb3IgKHZhciBpID0gY3VlUmFuZ2VzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICB2YXIgY3VlUmFuZ2UgPSBjdWVSYW5nZXNbaV07XG4gICAgICAgIHZhciBvdmVybGFwID0gaW50ZXJzZWN0aW9uKGN1ZVJhbmdlWzBdLCBjdWVSYW5nZVsxXSwgc3RhcnRUaW1lLCBlbmRUaW1lKTtcbiAgICAgICAgaWYgKG92ZXJsYXAgPj0gMCkge1xuICAgICAgICAgIGN1ZVJhbmdlWzBdID0gTWF0aC5taW4oY3VlUmFuZ2VbMF0sIHN0YXJ0VGltZSk7XG4gICAgICAgICAgY3VlUmFuZ2VbMV0gPSBNYXRoLm1heChjdWVSYW5nZVsxXSwgZW5kVGltZSk7XG4gICAgICAgICAgbWVyZ2VkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAob3ZlcmxhcCAvIChlbmRUaW1lIC0gc3RhcnRUaW1lKSA+IDAuNSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFtZXJnZWQpIHtcbiAgICAgICAgY3VlUmFuZ2VzLnB1c2goW3N0YXJ0VGltZSwgZW5kVGltZV0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY29uZmlnLnJlbmRlclRleHRUcmFja3NOYXRpdmVseSkge1xuICAgICAgICB2YXIgdHJhY2sgPSB0aGlzLmNhcHRpb25zVHJhY2tzW3RyYWNrTmFtZV07XG4gICAgICAgIHRoaXMuQ3Vlcy5uZXdDdWUodHJhY2ssIHN0YXJ0VGltZSwgZW5kVGltZSwgc2NyZWVuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjdWVzID0gdGhpcy5DdWVzLm5ld0N1ZShudWxsLCBzdGFydFRpbWUsIGVuZFRpbWUsIHNjcmVlbik7XG4gICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkNVRVNfUEFSU0VELCB7XG4gICAgICAgICAgdHlwZTogJ2NhcHRpb25zJyxcbiAgICAgICAgICBjdWVzOiBjdWVzLFxuICAgICAgICAgIHRyYWNrOiB0cmFja05hbWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVHJpZ2dlcmVkIHdoZW4gYW4gaW5pdGlhbCBQVFMgaXMgZm91bmQ7IHVzZWQgZm9yIHN5bmNocm9uaXNhdGlvbiBvZiBXZWJWVFQuXG4gICAgO1xuICAgIF9wcm90by5vbkluaXRQdHNGb3VuZCA9IGZ1bmN0aW9uIG9uSW5pdFB0c0ZvdW5kKGV2ZW50LCBfcmVmKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIGZyYWcgPSBfcmVmLmZyYWcsXG4gICAgICAgIGlkID0gX3JlZi5pZCxcbiAgICAgICAgaW5pdFBUUyA9IF9yZWYuaW5pdFBUUyxcbiAgICAgICAgdGltZXNjYWxlID0gX3JlZi50aW1lc2NhbGU7XG4gICAgICB2YXIgdW5wYXJzZWRWdHRGcmFncyA9IHRoaXMudW5wYXJzZWRWdHRGcmFncztcbiAgICAgIGlmIChpZCA9PT0gUGxheWxpc3RMZXZlbFR5cGUuTUFJTikge1xuICAgICAgICB0aGlzLmluaXRQVFNbZnJhZy5jY10gPSB7XG4gICAgICAgICAgYmFzZVRpbWU6IGluaXRQVFMsXG4gICAgICAgICAgdGltZXNjYWxlOiB0aW1lc2NhbGVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gRHVlIHRvIGFzeW5jaHJvbm91cyBwcm9jZXNzaW5nLCBpbml0aWFsIFBUUyBtYXkgYXJyaXZlIGxhdGVyIHRoYW4gdGhlIGZpcnN0IFZUVCBmcmFnbWVudHMgYXJlIGxvYWRlZC5cbiAgICAgIC8vIFBhcnNlIGFueSB1bnBhcnNlZCBmcmFnbWVudHMgdXBvbiByZWNlaXZpbmcgdGhlIGluaXRpYWwgUFRTLlxuICAgICAgaWYgKHVucGFyc2VkVnR0RnJhZ3MubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMudW5wYXJzZWRWdHRGcmFncyA9IFtdO1xuICAgICAgICB1bnBhcnNlZFZ0dEZyYWdzLmZvckVhY2goZnVuY3Rpb24gKGZyYWcpIHtcbiAgICAgICAgICBfdGhpcy5vbkZyYWdMb2FkZWQoRXZlbnRzLkZSQUdfTE9BREVELCBmcmFnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0RXhpc3RpbmdUcmFjayA9IGZ1bmN0aW9uIGdldEV4aXN0aW5nVHJhY2sobGFiZWwsIGxhbmd1YWdlKSB7XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVkaWEudGV4dFRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciB0ZXh0VHJhY2sgPSBtZWRpYS50ZXh0VHJhY2tzW2ldO1xuICAgICAgICAgIGlmIChjYW5SZXVzZVZ0dFRleHRUcmFjayh0ZXh0VHJhY2ssIHtcbiAgICAgICAgICAgIG5hbWU6IGxhYmVsLFxuICAgICAgICAgICAgbGFuZzogbGFuZ3VhZ2UsXG4gICAgICAgICAgICBjaGFyYWN0ZXJpc3RpY3M6ICd0cmFuc2NyaWJlcy1zcG9rZW4tZGlhbG9nLGRlc2NyaWJlcy1tdXNpYy1hbmQtc291bmQnfSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0VHJhY2s7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5jcmVhdGVDYXB0aW9uc1RyYWNrID0gZnVuY3Rpb24gY3JlYXRlQ2FwdGlvbnNUcmFjayh0cmFja05hbWUpIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5yZW5kZXJUZXh0VHJhY2tzTmF0aXZlbHkpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVUcmFjayh0cmFja05hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jcmVhdGVOb25OYXRpdmVUcmFjayh0cmFja05hbWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmNyZWF0ZU5hdGl2ZVRyYWNrID0gZnVuY3Rpb24gY3JlYXRlTmF0aXZlVHJhY2sodHJhY2tOYW1lKSB7XG4gICAgICBpZiAodGhpcy5jYXB0aW9uc1RyYWNrc1t0cmFja05hbWVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBjYXB0aW9uc1Byb3BlcnRpZXMgPSB0aGlzLmNhcHRpb25zUHJvcGVydGllcyxcbiAgICAgICAgY2FwdGlvbnNUcmFja3MgPSB0aGlzLmNhcHRpb25zVHJhY2tzLFxuICAgICAgICBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgICB2YXIgX2NhcHRpb25zUHJvcGVydGllcyR0ID0gY2FwdGlvbnNQcm9wZXJ0aWVzW3RyYWNrTmFtZV0sXG4gICAgICAgIGxhYmVsID0gX2NhcHRpb25zUHJvcGVydGllcyR0LmxhYmVsLFxuICAgICAgICBsYW5ndWFnZUNvZGUgPSBfY2FwdGlvbnNQcm9wZXJ0aWVzJHQubGFuZ3VhZ2VDb2RlO1xuICAgICAgLy8gRW5hYmxlIHJldXNlIG9mIGV4aXN0aW5nIHRleHQgdHJhY2suXG4gICAgICB2YXIgZXhpc3RpbmdUcmFjayA9IHRoaXMuZ2V0RXhpc3RpbmdUcmFjayhsYWJlbCwgbGFuZ3VhZ2VDb2RlKTtcbiAgICAgIGlmICghZXhpc3RpbmdUcmFjaykge1xuICAgICAgICB2YXIgdGV4dFRyYWNrID0gdGhpcy5jcmVhdGVUZXh0VHJhY2soJ2NhcHRpb25zJywgbGFiZWwsIGxhbmd1YWdlQ29kZSk7XG4gICAgICAgIGlmICh0ZXh0VHJhY2spIHtcbiAgICAgICAgICAvLyBTZXQgYSBzcGVjaWFsIHByb3BlcnR5IG9uIHRoZSB0cmFjayBzbyB3ZSBrbm93IGl0J3MgbWFuYWdlZCBieSBIbHMuanNcbiAgICAgICAgICB0ZXh0VHJhY2tbdHJhY2tOYW1lXSA9IHRydWU7XG4gICAgICAgICAgY2FwdGlvbnNUcmFja3NbdHJhY2tOYW1lXSA9IHRleHRUcmFjaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdGlvbnNUcmFja3NbdHJhY2tOYW1lXSA9IGV4aXN0aW5nVHJhY2s7XG4gICAgICAgIGNsZWFyQ3VycmVudEN1ZXMoY2FwdGlvbnNUcmFja3NbdHJhY2tOYW1lXSk7XG4gICAgICAgIHNlbmRBZGRUcmFja0V2ZW50KGNhcHRpb25zVHJhY2tzW3RyYWNrTmFtZV0sIG1lZGlhKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5jcmVhdGVOb25OYXRpdmVUcmFjayA9IGZ1bmN0aW9uIGNyZWF0ZU5vbk5hdGl2ZVRyYWNrKHRyYWNrTmFtZSkge1xuICAgICAgaWYgKHRoaXMubm9uTmF0aXZlQ2FwdGlvbnNUcmFja3NbdHJhY2tOYW1lXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBDcmVhdGUgYSBsaXN0IG9mIGEgc2luZ2xlIHRyYWNrIGZvciB0aGUgcHJvdmlkZXIgdG8gY29uc3VtZVxuICAgICAgdmFyIHRyYWNrUHJvcGVydGllcyA9IHRoaXMuY2FwdGlvbnNQcm9wZXJ0aWVzW3RyYWNrTmFtZV07XG4gICAgICBpZiAoIXRyYWNrUHJvcGVydGllcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbGFiZWwgPSB0cmFja1Byb3BlcnRpZXMubGFiZWw7XG4gICAgICB2YXIgdHJhY2sgPSB7XG4gICAgICAgIF9pZDogdHJhY2tOYW1lLFxuICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgIGtpbmQ6ICdjYXB0aW9ucycsXG4gICAgICAgIGRlZmF1bHQ6IHRyYWNrUHJvcGVydGllcy5tZWRpYSA/ICEhdHJhY2tQcm9wZXJ0aWVzLm1lZGlhLmRlZmF1bHQgOiBmYWxzZSxcbiAgICAgICAgY2xvc2VkQ2FwdGlvbnM6IHRyYWNrUHJvcGVydGllcy5tZWRpYVxuICAgICAgfTtcbiAgICAgIHRoaXMubm9uTmF0aXZlQ2FwdGlvbnNUcmFja3NbdHJhY2tOYW1lXSA9IHRyYWNrO1xuICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuTk9OX05BVElWRV9URVhUX1RSQUNLU19GT1VORCwge1xuICAgICAgICB0cmFja3M6IFt0cmFja11cbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLmNyZWF0ZVRleHRUcmFjayA9IGZ1bmN0aW9uIGNyZWF0ZVRleHRUcmFjayhraW5kLCBsYWJlbCwgbGFuZykge1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIGlmICghbWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lZGlhLmFkZFRleHRUcmFjayhraW5kLCBsYWJlbCwgbGFuZyk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYUF0dGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFBdHRhY2hpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMubWVkaWEgPSBkYXRhLm1lZGlhO1xuICAgICAgaWYgKCFkYXRhLm1lZGlhU291cmNlKSB7XG4gICAgICAgIHRoaXMuX2NsZWFuVHJhY2tzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYURldGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFEZXRhY2hpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciB0cmFuc2ZlcnJpbmdNZWRpYSA9ICEhZGF0YS50cmFuc2Zlck1lZGlhO1xuICAgICAgdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgICBpZiAodHJhbnNmZXJyaW5nTWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNhcHRpb25zVHJhY2tzID0gdGhpcy5jYXB0aW9uc1RyYWNrcztcbiAgICAgIE9iamVjdC5rZXlzKGNhcHRpb25zVHJhY2tzKS5mb3JFYWNoKGZ1bmN0aW9uICh0cmFja05hbWUpIHtcbiAgICAgICAgY2xlYXJDdXJyZW50Q3VlcyhjYXB0aW9uc1RyYWNrc1t0cmFja05hbWVdKTtcbiAgICAgICAgZGVsZXRlIGNhcHRpb25zVHJhY2tzW3RyYWNrTmFtZV07XG4gICAgICB9KTtcbiAgICAgIHRoaXMubm9uTmF0aXZlQ2FwdGlvbnNUcmFja3MgPSB7fTtcbiAgICB9O1xuICAgIF9wcm90by5vbk1hbmlmZXN0TG9hZGluZyA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkaW5nKCkge1xuICAgICAgLy8gRGV0ZWN0IGRpc2NvbnRpbnVpdHkgaW4gdmlkZW8gZnJhZ21lbnQgKENFQS02MDgpIHBhcnNpbmdcbiAgICAgIHRoaXMubGFzdENjID0gLTE7XG4gICAgICB0aGlzLmxhc3RTbiA9IC0xO1xuICAgICAgdGhpcy5sYXN0UGFydEluZGV4ID0gLTE7XG4gICAgICAvLyBEZXRlY3QgZGlzY29udGludWl0eSBpbiBzdWJ0aXRsZSBtYW5pZmVzdHNcbiAgICAgIHRoaXMucHJldkNDID0gLTE7XG4gICAgICB0aGlzLnZ0dENDcyA9IG5ld1ZUVENDcygpO1xuICAgICAgLy8gUmVzZXQgdHJhY2tzXG4gICAgICB0aGlzLl9jbGVhblRyYWNrcygpO1xuICAgICAgdGhpcy50cmFja3MgPSBbXTtcbiAgICAgIHRoaXMuY2FwdGlvbnNUcmFja3MgPSB7fTtcbiAgICAgIHRoaXMubm9uTmF0aXZlQ2FwdGlvbnNUcmFja3MgPSB7fTtcbiAgICAgIHRoaXMudGV4dFRyYWNrcyA9IFtdO1xuICAgICAgdGhpcy51bnBhcnNlZFZ0dEZyYWdzID0gW107XG4gICAgICB0aGlzLmluaXRQVFMgPSBbXTtcbiAgICAgIGlmICh0aGlzLmNlYTYwOFBhcnNlcjEgJiYgdGhpcy5jZWE2MDhQYXJzZXIyKSB7XG4gICAgICAgIHRoaXMuY2VhNjA4UGFyc2VyMS5yZXNldCgpO1xuICAgICAgICB0aGlzLmNlYTYwOFBhcnNlcjIucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5fY2xlYW5UcmFja3MgPSBmdW5jdGlvbiBfY2xlYW5UcmFja3MoKSB7XG4gICAgICAvLyBjbGVhciBvdXRkYXRlZCBzdWJ0aXRsZXNcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgICBpZiAoIW1lZGlhKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXh0VHJhY2tzID0gbWVkaWEudGV4dFRyYWNrcztcbiAgICAgIGlmICh0ZXh0VHJhY2tzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dFRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNsZWFyQ3VycmVudEN1ZXModGV4dFRyYWNrc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vblN1YnRpdGxlVHJhY2tzVXBkYXRlZCA9IGZ1bmN0aW9uIG9uU3VidGl0bGVUcmFja3NVcGRhdGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIHZhciB0cmFja3MgPSBkYXRhLnN1YnRpdGxlVHJhY2tzIHx8IFtdO1xuICAgICAgdmFyIGhhc0lNU0MxID0gdHJhY2tzLnNvbWUoZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICAgIHJldHVybiB0cmFjay50ZXh0Q29kZWMgPT09IElNU0MxX0NPREVDO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlV2ViVlRUIHx8IGhhc0lNU0MxICYmIHRoaXMuY29uZmlnLmVuYWJsZUlNU0MxKSB7XG4gICAgICAgIHZhciBsaXN0SXNJZGVudGljYWwgPSBzdWJ0aXRsZU9wdGlvbnNJZGVudGljYWwodGhpcy50cmFja3MsIHRyYWNrcyk7XG4gICAgICAgIGlmIChsaXN0SXNJZGVudGljYWwpIHtcbiAgICAgICAgICB0aGlzLnRyYWNrcyA9IHRyYWNrcztcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ZXh0VHJhY2tzID0gW107XG4gICAgICAgIHRoaXMudHJhY2tzID0gdHJhY2tzO1xuICAgICAgICBpZiAodGhpcy5jb25maWcucmVuZGVyVGV4dFRyYWNrc05hdGl2ZWx5KSB7XG4gICAgICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgICAgICB2YXIgaW5Vc2VUcmFja3MgPSBtZWRpYSA/IGZpbHRlclN1YnRpdGxlVHJhY2tzKG1lZGlhLnRleHRUcmFja3MpIDogbnVsbDtcbiAgICAgICAgICB0aGlzLnRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaywgaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIFJldXNlIHRyYWNrcyB3aXRoIHRoZSBzYW1lIGxhYmVsIGFuZCBsYW5nLCBidXQgZG8gbm90IHJldXNlIDYwOC83MDggdHJhY2tzXG4gICAgICAgICAgICB2YXIgdGV4dFRyYWNrO1xuICAgICAgICAgICAgaWYgKGluVXNlVHJhY2tzKSB7XG4gICAgICAgICAgICAgIHZhciBpblVzZVRyYWNrID0gbnVsbDtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpblVzZVRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpblVzZVRyYWNrc1tpXSAmJiBjYW5SZXVzZVZ0dFRleHRUcmFjayhpblVzZVRyYWNrc1tpXSwgdHJhY2spKSB7XG4gICAgICAgICAgICAgICAgICBpblVzZVRyYWNrID0gaW5Vc2VUcmFja3NbaV07XG4gICAgICAgICAgICAgICAgICBpblVzZVRyYWNrc1tpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGluVXNlVHJhY2spIHtcbiAgICAgICAgICAgICAgICB0ZXh0VHJhY2sgPSBpblVzZVRyYWNrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGV4dFRyYWNrKSB7XG4gICAgICAgICAgICAgIGNsZWFyQ3VycmVudEN1ZXModGV4dFRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciB0ZXh0VHJhY2tLaW5kID0gY2FwdGlvbnNPclN1YnRpdGxlc0Zyb21DaGFyYWN0ZXJpc3RpY3ModHJhY2spO1xuICAgICAgICAgICAgICB0ZXh0VHJhY2sgPSBfdGhpczIuY3JlYXRlVGV4dFRyYWNrKHRleHRUcmFja0tpbmQsIHRyYWNrLm5hbWUsIHRyYWNrLmxhbmcpO1xuICAgICAgICAgICAgICBpZiAodGV4dFRyYWNrKSB7XG4gICAgICAgICAgICAgICAgdGV4dFRyYWNrLm1vZGUgPSAnZGlzYWJsZWQnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGV4dFRyYWNrKSB7XG4gICAgICAgICAgICAgIF90aGlzMi50ZXh0VHJhY2tzLnB1c2godGV4dFRyYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBXYXJuIHdoZW4gdmlkZW8gZWxlbWVudCBoYXMgY2FwdGlvbnMgb3Igc3VidGl0bGUgVGV4dFRyYWNrcyBjYXJyaWVkIG92ZXIgZnJvbSBhbm90aGVyIHNvdXJjZVxuICAgICAgICAgIGlmIChpblVzZVRyYWNrcyAhPSBudWxsICYmIGluVXNlVHJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHVudXNlZFRleHRUcmFja3MgPSBpblVzZVRyYWNrcy5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgIT09IG51bGw7XG4gICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQubGFiZWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh1bnVzZWRUZXh0VHJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgICB0aGlzLmhscy5sb2dnZXIud2FybihcIk1lZGlhIGVsZW1lbnQgY29udGFpbnMgdW51c2VkIHN1YnRpdGxlIHRyYWNrczogXCIgKyB1bnVzZWRUZXh0VHJhY2tzLmpvaW4oJywgJykgKyBcIi4gUmVwbGFjZSBtZWRpYSBlbGVtZW50IGZvciBlYWNoIHNvdXJjZSB0byBjbGVhciBUZXh0VHJhY2tzIGFuZCBjYXB0aW9ucyBtZW51LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gQ3JlYXRlIGEgbGlzdCBvZiB0cmFja3MgZm9yIHRoZSBwcm92aWRlciB0byBjb25zdW1lXG4gICAgICAgICAgdmFyIHRyYWNrc0xpc3QgPSB0aGlzLnRyYWNrcy5tYXAoZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBsYWJlbDogdHJhY2submFtZSxcbiAgICAgICAgICAgICAga2luZDogdHJhY2sudHlwZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICBkZWZhdWx0OiB0cmFjay5kZWZhdWx0LFxuICAgICAgICAgICAgICBzdWJ0aXRsZVRyYWNrOiB0cmFja1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5OT05fTkFUSVZFX1RFWFRfVFJBQ0tTX0ZPVU5ELCB7XG4gICAgICAgICAgICB0cmFja3M6IHRyYWNrc0xpc3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uTWFuaWZlc3RMb2FkZWQgPSBmdW5jdGlvbiBvbk1hbmlmZXN0TG9hZGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVDRUE3MDhDYXB0aW9ucyAmJiBkYXRhLmNhcHRpb25zKSB7XG4gICAgICAgIGRhdGEuY2FwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoY2FwdGlvbnNUcmFjaykge1xuICAgICAgICAgIHZhciBpbnN0cmVhbUlkTWF0Y2ggPSAvKD86Q0N8U0VSVklDRSkoWzEtNF0pLy5leGVjKGNhcHRpb25zVHJhY2suaW5zdHJlYW1JZCk7XG4gICAgICAgICAgaWYgKCFpbnN0cmVhbUlkTWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHRyYWNrTmFtZSA9IFwidGV4dFRyYWNrXCIgKyBpbnN0cmVhbUlkTWF0Y2hbMV07XG4gICAgICAgICAgdmFyIHRyYWNrUHJvcGVydGllcyA9IF90aGlzMy5jYXB0aW9uc1Byb3BlcnRpZXNbdHJhY2tOYW1lXTtcbiAgICAgICAgICBpZiAoIXRyYWNrUHJvcGVydGllcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cmFja1Byb3BlcnRpZXMubGFiZWwgPSBjYXB0aW9uc1RyYWNrLm5hbWU7XG4gICAgICAgICAgaWYgKGNhcHRpb25zVHJhY2subGFuZykge1xuICAgICAgICAgICAgLy8gb3B0aW9uYWwgYXR0cmlidXRlXG4gICAgICAgICAgICB0cmFja1Byb3BlcnRpZXMubGFuZ3VhZ2VDb2RlID0gY2FwdGlvbnNUcmFjay5sYW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cmFja1Byb3BlcnRpZXMubWVkaWEgPSBjYXB0aW9uc1RyYWNrO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5jbG9zZWRDYXB0aW9uc0ZvckxldmVsID0gZnVuY3Rpb24gY2xvc2VkQ2FwdGlvbnNGb3JMZXZlbChmcmFnKSB7XG4gICAgICB2YXIgbGV2ZWwgPSB0aGlzLmhscy5sZXZlbHNbZnJhZy5sZXZlbF07XG4gICAgICByZXR1cm4gbGV2ZWwgPT0gbnVsbCA/IHZvaWQgMCA6IGxldmVsLmF0dHJzWydDTE9TRUQtQ0FQVElPTlMnXTtcbiAgICB9O1xuICAgIF9wcm90by5vbkZyYWdMb2FkaW5nID0gZnVuY3Rpb24gb25GcmFnTG9hZGluZyhldmVudCwgZGF0YSkge1xuICAgICAgLy8gaWYgdGhpcyBmcmFnIGlzbid0IGNvbnRpZ3VvdXMsIGNsZWFyIHRoZSBwYXJzZXIgc28gY3VlcyB3aXRoIGJhZCBzdGFydC9lbmQgdGltZXMgYXJlbid0IGFkZGVkIHRvIHRoZSB0ZXh0VHJhY2tcbiAgICAgIGlmICh0aGlzLmVuYWJsZWQgJiYgZGF0YS5mcmFnLnR5cGUgPT09IFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU4pIHtcbiAgICAgICAgdmFyIF9kYXRhJHBhcnQkaW5kZXgsIF9kYXRhJHBhcnQ7XG4gICAgICAgIHZhciBjZWE2MDhQYXJzZXIxID0gdGhpcy5jZWE2MDhQYXJzZXIxLFxuICAgICAgICAgIGNlYTYwOFBhcnNlcjIgPSB0aGlzLmNlYTYwOFBhcnNlcjIsXG4gICAgICAgICAgbGFzdFNuID0gdGhpcy5sYXN0U247XG4gICAgICAgIHZhciBfZGF0YSRmcmFnID0gZGF0YS5mcmFnLFxuICAgICAgICAgIGNjID0gX2RhdGEkZnJhZy5jYyxcbiAgICAgICAgICBzbiA9IF9kYXRhJGZyYWcuc247XG4gICAgICAgIHZhciBwYXJ0SW5kZXggPSAoX2RhdGEkcGFydCRpbmRleCA9IChfZGF0YSRwYXJ0ID0gZGF0YS5wYXJ0KSA9PSBudWxsID8gdm9pZCAwIDogX2RhdGEkcGFydC5pbmRleCkgIT0gbnVsbCA/IF9kYXRhJHBhcnQkaW5kZXggOiAtMTtcbiAgICAgICAgaWYgKGNlYTYwOFBhcnNlcjEgJiYgY2VhNjA4UGFyc2VyMikge1xuICAgICAgICAgIGlmIChzbiAhPT0gbGFzdFNuICsgMSB8fCBzbiA9PT0gbGFzdFNuICYmIHBhcnRJbmRleCAhPT0gdGhpcy5sYXN0UGFydEluZGV4ICsgMSB8fCBjYyAhPT0gdGhpcy5sYXN0Q2MpIHtcbiAgICAgICAgICAgIGNlYTYwOFBhcnNlcjEucmVzZXQoKTtcbiAgICAgICAgICAgIGNlYTYwOFBhcnNlcjIucmVzZXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0Q2MgPSBjYztcbiAgICAgICAgdGhpcy5sYXN0U24gPSBzbjtcbiAgICAgICAgdGhpcy5sYXN0UGFydEluZGV4ID0gcGFydEluZGV4O1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uRnJhZ0xvYWRlZCA9IGZ1bmN0aW9uIG9uRnJhZ0xvYWRlZChldmVudCwgZGF0YSkge1xuICAgICAgdmFyIGZyYWcgPSBkYXRhLmZyYWcsXG4gICAgICAgIHBheWxvYWQgPSBkYXRhLnBheWxvYWQ7XG4gICAgICBpZiAoZnJhZy50eXBlID09PSBQbGF5bGlzdExldmVsVHlwZS5TVUJUSVRMRSkge1xuICAgICAgICAvLyBJZiBmcmFnbWVudCBpcyBzdWJ0aXRsZSB0eXBlLCBwYXJzZSBhcyBXZWJWVFQuXG4gICAgICAgIGlmIChwYXlsb2FkLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGVjcnlwdERhdGEgPSBmcmFnLmRlY3J5cHRkYXRhO1xuICAgICAgICAgIC8vIGZyYWdtZW50IGFmdGVyIGRlY3J5cHRpb24gaGFzIGEgc3RhdHMgb2JqZWN0XG4gICAgICAgICAgdmFyIGRlY3J5cHRlZCA9ICdzdGF0cycgaW4gZGF0YTtcbiAgICAgICAgICAvLyBJZiB0aGUgc3VidGl0bGVzIGFyZSBub3QgZW5jcnlwdGVkLCBwYXJzZSBWVFRzIG5vdy4gT3RoZXJ3aXNlLCB3ZSBuZWVkIHRvIHdhaXQuXG4gICAgICAgICAgaWYgKGRlY3J5cHREYXRhID09IG51bGwgfHwgIWRlY3J5cHREYXRhLmVuY3J5cHRlZCB8fCBkZWNyeXB0ZWQpIHtcbiAgICAgICAgICAgIHZhciB0cmFja1BsYXlsaXN0TWVkaWEgPSB0aGlzLnRyYWNrc1tmcmFnLmxldmVsXTtcbiAgICAgICAgICAgIHZhciB2dHRDQ3MgPSB0aGlzLnZ0dENDcztcbiAgICAgICAgICAgIGlmICghdnR0Q0NzW2ZyYWcuY2NdKSB7XG4gICAgICAgICAgICAgIHZ0dENDc1tmcmFnLmNjXSA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogZnJhZy5zdGFydCxcbiAgICAgICAgICAgICAgICBwcmV2Q0M6IHRoaXMucHJldkNDLFxuICAgICAgICAgICAgICAgIG5ldzogdHJ1ZVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB0aGlzLnByZXZDQyA9IGZyYWcuY2M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHJhY2tQbGF5bGlzdE1lZGlhICYmIHRyYWNrUGxheWxpc3RNZWRpYS50ZXh0Q29kZWMgPT09IElNU0MxX0NPREVDKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3BhcnNlSU1TQzEoZnJhZywgcGF5bG9hZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9wYXJzZVZUVHMoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEluIGNhc2UgdGhlcmUgaXMgbm8gcGF5bG9hZCwgZmluaXNoIHVuc3VjY2Vzc2Z1bGx5LlxuICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLlNVQlRJVExFX0ZSQUdfUFJPQ0VTU0VELCB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgICBlcnJvcjogbmV3IEVycm9yKCdFbXB0eSBzdWJ0aXRsZSBwYXlsb2FkJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLl9wYXJzZUlNU0MxID0gZnVuY3Rpb24gX3BhcnNlSU1TQzEoZnJhZywgcGF5bG9hZCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICBwYXJzZUlNU0MxKHBheWxvYWQsIHRoaXMuaW5pdFBUU1tmcmFnLmNjXSwgZnVuY3Rpb24gKGN1ZXMpIHtcbiAgICAgICAgX3RoaXM0Ll9hcHBlbmRDdWVzKGN1ZXMsIGZyYWcubGV2ZWwpO1xuICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuU1VCVElUTEVfRlJBR19QUk9DRVNTRUQsIHtcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgIGZyYWc6IGZyYWdcbiAgICAgICAgfSk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgaGxzLmxvZ2dlci5sb2coXCJGYWlsZWQgdG8gcGFyc2UgSU1TQzE6IFwiICsgZXJyb3IpO1xuICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuU1VCVElUTEVfRlJBR19QUk9DRVNTRUQsIHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLl9wYXJzZVZUVHMgPSBmdW5jdGlvbiBfcGFyc2VWVFRzKGRhdGEpIHtcbiAgICAgIHZhciBfZnJhZyRpbml0U2VnbWVudCxcbiAgICAgICAgX3RoaXM1ID0gdGhpcztcbiAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnLFxuICAgICAgICBwYXlsb2FkID0gZGF0YS5wYXlsb2FkO1xuICAgICAgLy8gV2UgbmVlZCBhbiBpbml0aWFsIHN5bmNocm9uaXNhdGlvbiBQVFMuIFN0b3JlIGZyYWdtZW50cyBhcyBsb25nIGFzIG5vbmUgaGFzIGFycml2ZWRcbiAgICAgIHZhciBpbml0UFRTID0gdGhpcy5pbml0UFRTLFxuICAgICAgICB1bnBhcnNlZFZ0dEZyYWdzID0gdGhpcy51bnBhcnNlZFZ0dEZyYWdzO1xuICAgICAgdmFyIG1heEF2Q0MgPSBpbml0UFRTLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoIWluaXRQVFNbZnJhZy5jY10gJiYgbWF4QXZDQyA9PT0gLTEpIHtcbiAgICAgICAgdW5wYXJzZWRWdHRGcmFncy5wdXNoKGRhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICAvLyBQYXJzZSB0aGUgV2ViVlRUIGZpbGUgY29udGVudHMuXG4gICAgICB2YXIgcGF5bG9hZFdlYlZUVCA9IChfZnJhZyRpbml0U2VnbWVudCA9IGZyYWcuaW5pdFNlZ21lbnQpICE9IG51bGwgJiYgX2ZyYWckaW5pdFNlZ21lbnQuZGF0YSA/IGFwcGVuZFVpbnQ4QXJyYXkoZnJhZy5pbml0U2VnbWVudC5kYXRhLCBuZXcgVWludDhBcnJheShwYXlsb2FkKSkuYnVmZmVyIDogcGF5bG9hZDtcbiAgICAgIHBhcnNlV2ViVlRUKHBheWxvYWRXZWJWVFQsIHRoaXMuaW5pdFBUU1tmcmFnLmNjXSwgdGhpcy52dHRDQ3MsIGZyYWcuY2MsIGZyYWcuc3RhcnQsIGZ1bmN0aW9uIChjdWVzKSB7XG4gICAgICAgIF90aGlzNS5fYXBwZW5kQ3VlcyhjdWVzLCBmcmFnLmxldmVsKTtcbiAgICAgICAgaGxzLnRyaWdnZXIoRXZlbnRzLlNVQlRJVExFX0ZSQUdfUFJPQ0VTU0VELCB7XG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICBmcmFnOiBmcmFnXG4gICAgICAgIH0pO1xuICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHZhciBtaXNzaW5nSW5pdFBUUyA9IGVycm9yLm1lc3NhZ2UgPT09ICdNaXNzaW5nIGluaXRQVFMgZm9yIFZUVCBNUEVHVFMnO1xuICAgICAgICBpZiAobWlzc2luZ0luaXRQVFMpIHtcbiAgICAgICAgICB1bnBhcnNlZFZ0dEZyYWdzLnB1c2goZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXM1Ll9mYWxsYmFja1RvSU1TQzEoZnJhZywgcGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgcGFyc2luZy4gVHJpZ2dlciBldmVudCB3aXRoIHN1Y2Nlc3MgZmFsc2UuXG4gICAgICAgIGhscy5sb2dnZXIubG9nKFwiRmFpbGVkIHRvIHBhcnNlIFZUVCBjdWU6IFwiICsgZXJyb3IpO1xuICAgICAgICBpZiAobWlzc2luZ0luaXRQVFMgJiYgbWF4QXZDQyA+IGZyYWcuY2MpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaGxzLnRyaWdnZXIoRXZlbnRzLlNVQlRJVExFX0ZSQUdfUFJPQ0VTU0VELCB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5fZmFsbGJhY2tUb0lNU0MxID0gZnVuY3Rpb24gX2ZhbGxiYWNrVG9JTVNDMShmcmFnLCBwYXlsb2FkKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcbiAgICAgIC8vIElmIHRleHRDb2RlYyBpcyB1bmtub3duLCB0cnkgcGFyc2luZyBhcyBJTVNDMS4gU2V0IHRleHRDb2RlYyBiYXNlZCBvbiB0aGUgcmVzdWx0XG4gICAgICB2YXIgdHJhY2tQbGF5bGlzdE1lZGlhID0gdGhpcy50cmFja3NbZnJhZy5sZXZlbF07XG4gICAgICBpZiAoIXRyYWNrUGxheWxpc3RNZWRpYS50ZXh0Q29kZWMpIHtcbiAgICAgICAgcGFyc2VJTVNDMShwYXlsb2FkLCB0aGlzLmluaXRQVFNbZnJhZy5jY10sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0cmFja1BsYXlsaXN0TWVkaWEudGV4dENvZGVjID0gSU1TQzFfQ09ERUM7XG4gICAgICAgICAgX3RoaXM2Ll9wYXJzZUlNU0MxKGZyYWcsIHBheWxvYWQpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdHJhY2tQbGF5bGlzdE1lZGlhLnRleHRDb2RlYyA9ICd3dnR0JztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uX2FwcGVuZEN1ZXMgPSBmdW5jdGlvbiBfYXBwZW5kQ3VlcyhjdWVzLCBmcmFnTGV2ZWwpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5yZW5kZXJUZXh0VHJhY2tzTmF0aXZlbHkpIHtcbiAgICAgICAgdmFyIHRleHRUcmFjayA9IHRoaXMudGV4dFRyYWNrc1tmcmFnTGV2ZWxdO1xuICAgICAgICAvLyBXZWJWVFRQYXJzZXIucGFyc2UgaXMgYW4gYXN5bmMgbWV0aG9kIGFuZCBpZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHRleHQgdHJhY2sgbW9kZSBpcyBzZXQgdG8gXCJkaXNhYmxlZFwiXG4gICAgICAgIC8vIGJlZm9yZSBwYXJzaW5nIGlzIGRvbmUgdGhlbiBkb24ndCB0cnkgdG8gYWNjZXNzIGN1cnJlbnRUcmFjay5jdWVzLmdldEN1ZUJ5SWQgYXMgY3VlcyB3aWxsIGJlIG51bGxcbiAgICAgICAgLy8gYW5kIHRyeWluZyB0byBhY2Nlc3MgZ2V0Q3VlQnlJZCBtZXRob2Qgb2YgY3VlcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvblxuICAgICAgICAvLyBCZWNhdXNlIHdlIGNoZWNrIGlmIHRoZSBtb2RlIGlzIGRpc2FibGVkLCB3ZSBjYW4gZm9yY2UgY2hlY2sgYGN1ZXNgIGJlbG93LiBUaGV5IGNhbid0IGJlIG51bGwuXG4gICAgICAgIGlmICghdGV4dFRyYWNrIHx8IHRleHRUcmFjay5tb2RlID09PSAnZGlzYWJsZWQnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN1ZXMuZm9yRWFjaChmdW5jdGlvbiAoY3VlKSB7XG4gICAgICAgICAgcmV0dXJuIGFkZEN1ZVRvVHJhY2sodGV4dFRyYWNrLCBjdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjdXJyZW50VHJhY2sgPSB0aGlzLnRyYWNrc1tmcmFnTGV2ZWxdO1xuICAgICAgICBpZiAoIWN1cnJlbnRUcmFjaykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHJhY2sgPSBjdXJyZW50VHJhY2suZGVmYXVsdCA/ICdkZWZhdWx0JyA6ICdzdWJ0aXRsZXMnICsgZnJhZ0xldmVsO1xuICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuQ1VFU19QQVJTRUQsIHtcbiAgICAgICAgICB0eXBlOiAnc3VidGl0bGVzJyxcbiAgICAgICAgICBjdWVzOiBjdWVzLFxuICAgICAgICAgIHRyYWNrOiB0cmFja1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkZyYWdEZWNyeXB0ZWQgPSBmdW5jdGlvbiBvbkZyYWdEZWNyeXB0ZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnO1xuICAgICAgaWYgKGZyYWcudHlwZSA9PT0gUGxheWxpc3RMZXZlbFR5cGUuU1VCVElUTEUpIHtcbiAgICAgICAgdGhpcy5vbkZyYWdMb2FkZWQoRXZlbnRzLkZSQUdfTE9BREVELCBkYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vblN1YnRpdGxlVHJhY2tzQ2xlYXJlZCA9IGZ1bmN0aW9uIG9uU3VidGl0bGVUcmFja3NDbGVhcmVkKCkge1xuICAgICAgdGhpcy50cmFja3MgPSBbXTtcbiAgICAgIHRoaXMuY2FwdGlvbnNUcmFja3MgPSB7fTtcbiAgICB9O1xuICAgIF9wcm90by5vbkZyYWdQYXJzaW5nVXNlcmRhdGEgPSBmdW5jdGlvbiBvbkZyYWdQYXJzaW5nVXNlcmRhdGEoZXZlbnQsIGRhdGEpIHtcbiAgICAgIGlmICghdGhpcy5lbmFibGVkIHx8ICF0aGlzLmNvbmZpZy5lbmFibGVDRUE3MDhDYXB0aW9ucykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZyxcbiAgICAgICAgc2FtcGxlcyA9IGRhdGEuc2FtcGxlcztcbiAgICAgIGlmIChmcmFnLnR5cGUgPT09IFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU4gJiYgdGhpcy5jbG9zZWRDYXB0aW9uc0ZvckxldmVsKGZyYWcpID09PSAnTk9ORScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gSWYgdGhlIGV2ZW50IGNvbnRhaW5zIGNhcHRpb25zIChmb3VuZCBpbiB0aGUgYnl0ZXMgcHJvcGVydHkpLCBwdXNoIGFsbCBieXRlcyBpbnRvIHRoZSBwYXJzZXIgaW1tZWRpYXRlbHlcbiAgICAgIC8vIEl0IHdpbGwgY3JlYXRlIHRoZSBwcm9wZXIgdGltZXN0YW1wcyBiYXNlZCBvbiB0aGUgUFRTIHZhbHVlXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNhbXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNjQnl0ZXMgPSBzYW1wbGVzW2ldLmJ5dGVzO1xuICAgICAgICBpZiAoY2NCeXRlcykge1xuICAgICAgICAgIGlmICghdGhpcy5jZWE2MDhQYXJzZXIxKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRDZWE2MDhQYXJzZXJzKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjY2RhdGFzID0gdGhpcy5leHRyYWN0Q2VhNjA4RGF0YShjY0J5dGVzKTtcbiAgICAgICAgICB0aGlzLmNlYTYwOFBhcnNlcjEuYWRkRGF0YShzYW1wbGVzW2ldLnB0cywgY2NkYXRhc1swXSk7XG4gICAgICAgICAgdGhpcy5jZWE2MDhQYXJzZXIyLmFkZERhdGEoc2FtcGxlc1tpXS5wdHMsIGNjZGF0YXNbMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25CdWZmZXJGbHVzaGluZyA9IGZ1bmN0aW9uIG9uQnVmZmVyRmx1c2hpbmcoZXZlbnQsIF9yZWYyKSB7XG4gICAgICB2YXIgc3RhcnRPZmZzZXQgPSBfcmVmMi5zdGFydE9mZnNldCxcbiAgICAgICAgZW5kT2Zmc2V0ID0gX3JlZjIuZW5kT2Zmc2V0LFxuICAgICAgICBlbmRPZmZzZXRTdWJ0aXRsZXMgPSBfcmVmMi5lbmRPZmZzZXRTdWJ0aXRsZXMsXG4gICAgICAgIHR5cGUgPSBfcmVmMi50eXBlO1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIGlmICghbWVkaWEgfHwgbWVkaWEuY3VycmVudFRpbWUgPCBlbmRPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYXIgNjA4IGNhcHRpb24gY3VlcyBmcm9tIHRoZSBjYXB0aW9ucyBUZXh0VHJhY2tzIHdoZW4gdGhlIHZpZGVvIGJhY2sgYnVmZmVyIGlzIGZsdXNoZWRcbiAgICAgIC8vIEZvcndhcmQgY3VlcyBhcmUgbmV2ZXIgcmVtb3ZlZCBiZWNhdXNlIHdlIGNhbiBsb29zZSBzdHJlYW1lZCA2MDggY29udGVudCBmcm9tIHJlY2VudCBmcmFnbWVudHNcbiAgICAgIGlmICghdHlwZSB8fCB0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgIHZhciBjYXB0aW9uc1RyYWNrcyA9IHRoaXMuY2FwdGlvbnNUcmFja3M7XG4gICAgICAgIE9iamVjdC5rZXlzKGNhcHRpb25zVHJhY2tzKS5mb3JFYWNoKGZ1bmN0aW9uICh0cmFja05hbWUpIHtcbiAgICAgICAgICByZXR1cm4gcmVtb3ZlQ3Vlc0luUmFuZ2UoY2FwdGlvbnNUcmFja3NbdHJhY2tOYW1lXSwgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY29uZmlnLnJlbmRlclRleHRUcmFja3NOYXRpdmVseSkge1xuICAgICAgICAvLyBDbGVhciBWVFQvSU1TQzEgc3VidGl0bGUgY3VlcyBmcm9tIHRoZSBzdWJ0aXRsZSBUZXh0VHJhY2tzIHdoZW4gdGhlIGJhY2sgYnVmZmVyIGlzIGZsdXNoZWRcbiAgICAgICAgaWYgKHN0YXJ0T2Zmc2V0ID09PSAwICYmIGVuZE9mZnNldFN1YnRpdGxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHRleHRUcmFja3MgPSB0aGlzLnRleHRUcmFja3M7XG4gICAgICAgICAgT2JqZWN0LmtleXModGV4dFRyYWNrcykuZm9yRWFjaChmdW5jdGlvbiAodHJhY2tOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVtb3ZlQ3Vlc0luUmFuZ2UodGV4dFRyYWNrc1t0cmFja05hbWVdLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0U3VidGl0bGVzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmV4dHJhY3RDZWE2MDhEYXRhID0gZnVuY3Rpb24gZXh0cmFjdENlYTYwOERhdGEoYnl0ZUFycmF5KSB7XG4gICAgICB2YXIgYWN0dWFsQ0NCeXRlcyA9IFtbXSwgW11dO1xuICAgICAgdmFyIGNvdW50ID0gYnl0ZUFycmF5WzBdICYgMHgxZjtcbiAgICAgIHZhciBwb3NpdGlvbiA9IDI7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgdmFyIHRtcEJ5dGUgPSBieXRlQXJyYXlbcG9zaXRpb24rK107XG4gICAgICAgIHZhciBjY2J5dGUxID0gMHg3ZiAmIGJ5dGVBcnJheVtwb3NpdGlvbisrXTtcbiAgICAgICAgdmFyIGNjYnl0ZTIgPSAweDdmICYgYnl0ZUFycmF5W3Bvc2l0aW9uKytdO1xuICAgICAgICBpZiAoY2NieXRlMSA9PT0gMCAmJiBjY2J5dGUyID09PSAwKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNjVmFsaWQgPSAoMHgwNCAmIHRtcEJ5dGUpICE9PSAwOyAvLyBTdXBwb3J0IGFsbCBmb3VyIGNoYW5uZWxzXG4gICAgICAgIGlmIChjY1ZhbGlkKSB7XG4gICAgICAgICAgdmFyIGNjVHlwZSA9IDB4MDMgJiB0bXBCeXRlO1xuICAgICAgICAgIGlmICgweDAwIC8qIENFQTYwOCBmaWVsZDEqLyA9PT0gY2NUeXBlIHx8IDB4MDEgLyogQ0VBNjA4IGZpZWxkMiovID09PSBjY1R5cGUpIHtcbiAgICAgICAgICAgIC8vIEV4Y2x1ZGUgQ0VBNzA4IENDIGRhdGEuXG4gICAgICAgICAgICBhY3R1YWxDQ0J5dGVzW2NjVHlwZV0ucHVzaChjY2J5dGUxKTtcbiAgICAgICAgICAgIGFjdHVhbENDQnl0ZXNbY2NUeXBlXS5wdXNoKGNjYnl0ZTIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjdHVhbENDQnl0ZXM7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZWxpbmVDb250cm9sbGVyO1xuICB9KCk7XG4gIGZ1bmN0aW9uIGNhcHRpb25zT3JTdWJ0aXRsZXNGcm9tQ2hhcmFjdGVyaXN0aWNzKHRyYWNrKSB7XG4gICAgaWYgKHRyYWNrLmNoYXJhY3RlcmlzdGljcykge1xuICAgICAgaWYgKC90cmFuc2NyaWJlcy1zcG9rZW4tZGlhbG9nL2dpLnRlc3QodHJhY2suY2hhcmFjdGVyaXN0aWNzKSAmJiAvZGVzY3JpYmVzLW11c2ljLWFuZC1zb3VuZC9naS50ZXN0KHRyYWNrLmNoYXJhY3RlcmlzdGljcykpIHtcbiAgICAgICAgcmV0dXJuICdjYXB0aW9ucyc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnc3VidGl0bGVzJztcbiAgfVxuICBmdW5jdGlvbiBjYW5SZXVzZVZ0dFRleHRUcmFjayhpblVzZVRyYWNrLCBtYW5pZmVzdFRyYWNrKSB7XG4gICAgcmV0dXJuICEhaW5Vc2VUcmFjayAmJiBpblVzZVRyYWNrLmtpbmQgPT09IGNhcHRpb25zT3JTdWJ0aXRsZXNGcm9tQ2hhcmFjdGVyaXN0aWNzKG1hbmlmZXN0VHJhY2spICYmIHN1YnRpdGxlVHJhY2tNYXRjaGVzVGV4dFRyYWNrKG1hbmlmZXN0VHJhY2ssIGluVXNlVHJhY2spO1xuICB9XG4gIGZ1bmN0aW9uIGludGVyc2VjdGlvbih4MSwgeDIsIHkxLCB5Mikge1xuICAgIHJldHVybiBNYXRoLm1pbih4MiwgeTIpIC0gTWF0aC5tYXgoeDEsIHkxKTtcbiAgfVxuICBmdW5jdGlvbiBuZXdWVFRDQ3MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNjT2Zmc2V0OiAwLFxuICAgICAgcHJlc2VudGF0aW9uT2Zmc2V0OiAwLFxuICAgICAgMDoge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgcHJldkNDOiAtMSxcbiAgICAgICAgbmV3OiB0cnVlXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBXSElURVNQQUNFX0NIQVIgPSAvXFxzLztcbiAgdmFyIEN1ZXMgPSB7XG4gICAgbmV3Q3VlOiBmdW5jdGlvbiBuZXdDdWUodHJhY2ssIHN0YXJ0VGltZSwgZW5kVGltZSwgY2FwdGlvblNjcmVlbikge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFyIHJvdztcbiAgICAgIC8vIHRoZSB0eXBlIGRhdGEgc3RhdGVzIHRoaXMgaXMgVlRUQ3VlLCBidXQgaXQgY2FuIHBvdGVudGlhbGx5IGJlIGEgVGV4dFRyYWNrQ3VlIG9uIG9sZCBicm93c2Vyc1xuICAgICAgdmFyIGN1ZTtcbiAgICAgIHZhciBpbmRlbnRpbmc7XG4gICAgICB2YXIgaW5kZW50O1xuICAgICAgdmFyIHRleHQ7XG4gICAgICB2YXIgQ3VlID0gc2VsZi5WVFRDdWUgfHwgc2VsZi5UZXh0VHJhY2tDdWU7XG4gICAgICBmb3IgKHZhciByID0gMDsgciA8IGNhcHRpb25TY3JlZW4ucm93cy5sZW5ndGg7IHIrKykge1xuICAgICAgICByb3cgPSBjYXB0aW9uU2NyZWVuLnJvd3Nbcl07XG4gICAgICAgIGluZGVudGluZyA9IHRydWU7XG4gICAgICAgIGluZGVudCA9IDA7XG4gICAgICAgIHRleHQgPSAnJztcbiAgICAgICAgaWYgKCFyb3cuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgdmFyIF90cmFjayRjdWVzO1xuICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgcm93LmNoYXJzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBpZiAoV0hJVEVTUEFDRV9DSEFSLnRlc3Qocm93LmNoYXJzW2NdLnVjaGFyKSAmJiBpbmRlbnRpbmcpIHtcbiAgICAgICAgICAgICAgaW5kZW50Kys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0ZXh0ICs9IHJvdy5jaGFyc1tjXS51Y2hhcjtcbiAgICAgICAgICAgICAgaW5kZW50aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFRvIGJlIHVzZWQgZm9yIGNsZWFuaW5nLXVwIG9ycGhhbmVkIHJvbGwtdXAgY2FwdGlvbnNcbiAgICAgICAgICByb3cuY3VlU3RhcnRUaW1lID0gc3RhcnRUaW1lO1xuXG4gICAgICAgICAgLy8gR2l2ZSBhIHNsaWdodCBidW1wIHRvIHRoZSBlbmRUaW1lIGlmIGl0J3MgZXF1YWwgdG8gc3RhcnRUaW1lIHRvIGF2b2lkIGEgU3ludGF4RXJyb3IgaW4gSUVcbiAgICAgICAgICBpZiAoc3RhcnRUaW1lID09PSBlbmRUaW1lKSB7XG4gICAgICAgICAgICBlbmRUaW1lICs9IDAuMDAwMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGVudCA+PSAxNikge1xuICAgICAgICAgICAgaW5kZW50LS07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZGVudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY3VlVGV4dCA9IGZpeExpbmVCcmVha3ModGV4dC50cmltKCkpO1xuICAgICAgICAgIHZhciBpZCA9IGdlbmVyYXRlQ3VlSWQoc3RhcnRUaW1lLCBlbmRUaW1lLCBjdWVUZXh0KTtcblxuICAgICAgICAgIC8vIElmIHRoaXMgY3VlIGFscmVhZHkgZXhpc3RzIGluIHRoZSB0cmFjayBkbyBub3QgcHVzaCBpdFxuICAgICAgICAgIGlmICghKHRyYWNrICE9IG51bGwgJiYgKF90cmFjayRjdWVzID0gdHJhY2suY3VlcykgIT0gbnVsbCAmJiBfdHJhY2skY3Vlcy5nZXRDdWVCeUlkKGlkKSkpIHtcbiAgICAgICAgICAgIGN1ZSA9IG5ldyBDdWUoc3RhcnRUaW1lLCBlbmRUaW1lLCBjdWVUZXh0KTtcbiAgICAgICAgICAgIGN1ZS5pZCA9IGlkO1xuICAgICAgICAgICAgY3VlLmxpbmUgPSByICsgMTtcbiAgICAgICAgICAgIGN1ZS5hbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICAgIC8vIENsYW1wIHRoZSBwb3NpdGlvbiBiZXR3ZWVuIDEwIGFuZCA4MCBwZXJjZW50IChDRUEtNjA4IFBBQyBpbmRlbnQgY29kZSlcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZHZjcy53My5vcmcvaGcvdGV4dC10cmFja3MvcmF3LWZpbGUvZGVmYXVsdC82MDh0b1ZUVC82MDh0b1ZUVC5odG1sI3Bvc2l0aW9uaW5nLWluLWNlYS02MDhcbiAgICAgICAgICAgIC8vIEZpcmVmb3ggdGhyb3dzIGFuIGV4Y2VwdGlvbiBhbmQgY2FwdGlvbnMgYnJlYWsgd2l0aCBvdXQgb2YgYm91bmRzIDAtMTAwIHZhbHVlc1xuICAgICAgICAgICAgY3VlLnBvc2l0aW9uID0gMTAgKyBNYXRoLm1pbig4MCwgTWF0aC5mbG9vcihpbmRlbnQgKiA4IC8gMzIpICogMTApO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0cmFjayAmJiByZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgIC8vIFNvcnQgYm90dG9tIGN1ZXMgaW4gcmV2ZXJzZSBvcmRlciBzbyB0aGF0IHRoZXkgcmVuZGVyIGluIGxpbmUgb3JkZXIgd2hlbiBvdmVybGFwcGluZyBpbiBDaHJvbWVcbiAgICAgICAgcmVzdWx0LnNvcnQoZnVuY3Rpb24gKGN1ZUEsIGN1ZUIpIHtcbiAgICAgICAgICBpZiAoY3VlQS5saW5lID09PSAnYXV0bycgfHwgY3VlQi5saW5lID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3VlQS5saW5lID4gOCAmJiBjdWVCLmxpbmUgPiA4KSB7XG4gICAgICAgICAgICByZXR1cm4gY3VlQi5saW5lIC0gY3VlQS5saW5lO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY3VlQS5saW5lIC0gY3VlQi5saW5lO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKGN1ZSkge1xuICAgICAgICAgIHJldHVybiBhZGRDdWVUb1RyYWNrKHRyYWNrLCBjdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGZldGNoU3VwcG9ydGVkKCkge1xuICAgIGlmIChcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgc2VsZi5mZXRjaCAmJiBzZWxmLkFib3J0Q29udHJvbGxlciAmJiBzZWxmLlJlYWRhYmxlU3RyZWFtICYmIHNlbGYuUmVxdWVzdCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IHNlbGYuUmVhZGFibGVTdHJlYW0oe30pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogbm9vcCAqL1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIEJZVEVSQU5HRSA9IC8oXFxkKyktKFxcZCspXFwvKFxcZCspLztcbiAgdmFyIEZldGNoTG9hZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGZXRjaExvYWRlcihjb25maWcpIHtcbiAgICAgIHRoaXMuZmV0Y2hTZXR1cCA9IHZvaWQgMDtcbiAgICAgIHRoaXMucmVxdWVzdFRpbWVvdXQgPSB2b2lkIDA7XG4gICAgICB0aGlzLnJlcXVlc3QgPSBudWxsO1xuICAgICAgdGhpcy5yZXNwb25zZSA9IG51bGw7XG4gICAgICB0aGlzLmNvbnRyb2xsZXIgPSB2b2lkIDA7XG4gICAgICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICAgICAgdGhpcy5jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5jYWxsYmFja3MgPSBudWxsO1xuICAgICAgdGhpcy5zdGF0cyA9IHZvaWQgMDtcbiAgICAgIHRoaXMubG9hZGVyID0gbnVsbDtcbiAgICAgIHRoaXMuZmV0Y2hTZXR1cCA9IGNvbmZpZy5mZXRjaFNldHVwIHx8IGdldFJlcXVlc3Q7XG4gICAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgc2VsZi5BYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgIHRoaXMuc3RhdHMgPSBuZXcgTG9hZFN0YXRzKCk7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBGZXRjaExvYWRlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5sb2FkZXIgPSB0aGlzLmNhbGxiYWNrcyA9IHRoaXMuY29udGV4dCA9IHRoaXMuY29uZmlnID0gdGhpcy5yZXF1ZXN0ID0gbnVsbDtcbiAgICAgIHRoaXMuYWJvcnRJbnRlcm5hbCgpO1xuICAgICAgdGhpcy5yZXNwb25zZSA9IG51bGw7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLmZldGNoU2V0dXAgPSB0aGlzLmNvbnRyb2xsZXIgPSB0aGlzLnN0YXRzID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5hYm9ydEludGVybmFsID0gZnVuY3Rpb24gYWJvcnRJbnRlcm5hbCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXIgJiYgIXRoaXMuc3RhdHMubG9hZGluZy5lbmQpIHtcbiAgICAgICAgdGhpcy5zdGF0cy5hYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uYWJvcnQgPSBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgIHZhciBfdGhpcyRjYWxsYmFja3M7XG4gICAgICB0aGlzLmFib3J0SW50ZXJuYWwoKTtcbiAgICAgIGlmICgoX3RoaXMkY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3MpICE9IG51bGwgJiYgX3RoaXMkY2FsbGJhY2tzLm9uQWJvcnQpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25BYm9ydCh0aGlzLnN0YXRzLCB0aGlzLmNvbnRleHQsIHRoaXMucmVzcG9uc2UpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmxvYWQgPSBmdW5jdGlvbiBsb2FkKGNvbnRleHQsIGNvbmZpZywgY2FsbGJhY2tzKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIHN0YXRzID0gdGhpcy5zdGF0cztcbiAgICAgIGlmIChzdGF0cy5sb2FkaW5nLnN0YXJ0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTG9hZGVyIGNhbiBvbmx5IGJlIHVzZWQgb25jZS4nKTtcbiAgICAgIH1cbiAgICAgIHN0YXRzLmxvYWRpbmcuc3RhcnQgPSBzZWxmLnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgdmFyIGluaXRQYXJhbXMgPSBnZXRSZXF1ZXN0UGFyYW1ldGVycyhjb250ZXh0LCB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICAgIHZhciBpc0FycmF5QnVmZmVyID0gY29udGV4dC5yZXNwb25zZVR5cGUgPT09ICdhcnJheWJ1ZmZlcic7XG4gICAgICB2YXIgTEVOR1RIID0gaXNBcnJheUJ1ZmZlciA/ICdieXRlTGVuZ3RoJyA6ICdsZW5ndGgnO1xuICAgICAgdmFyIF9jb25maWckbG9hZFBvbGljeSA9IGNvbmZpZy5sb2FkUG9saWN5LFxuICAgICAgICBtYXhUaW1lVG9GaXJzdEJ5dGVNcyA9IF9jb25maWckbG9hZFBvbGljeS5tYXhUaW1lVG9GaXJzdEJ5dGVNcyxcbiAgICAgICAgbWF4TG9hZFRpbWVNcyA9IF9jb25maWckbG9hZFBvbGljeS5tYXhMb2FkVGltZU1zO1xuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgdGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M7XG4gICAgICB0aGlzLnJlcXVlc3QgPSB0aGlzLmZldGNoU2V0dXAoY29udGV4dCwgaW5pdFBhcmFtcyk7XG4gICAgICBzZWxmLmNsZWFyVGltZW91dCh0aGlzLnJlcXVlc3RUaW1lb3V0KTtcbiAgICAgIGNvbmZpZy50aW1lb3V0ID0gbWF4VGltZVRvRmlyc3RCeXRlTXMgJiYgaXNGaW5pdGVOdW1iZXIobWF4VGltZVRvRmlyc3RCeXRlTXMpID8gbWF4VGltZVRvRmlyc3RCeXRlTXMgOiBtYXhMb2FkVGltZU1zO1xuICAgICAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IHNlbGYuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5jYWxsYmFja3MpIHtcbiAgICAgICAgICBfdGhpcy5hYm9ydEludGVybmFsKCk7XG4gICAgICAgICAgX3RoaXMuY2FsbGJhY2tzLm9uVGltZW91dChzdGF0cywgY29udGV4dCwgX3RoaXMucmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICB9LCBjb25maWcudGltZW91dCk7XG4gICAgICB2YXIgZmV0Y2hQcm9taXNlID0gaXNQcm9taXNlKHRoaXMucmVxdWVzdCkgPyB0aGlzLnJlcXVlc3QudGhlbihzZWxmLmZldGNoKSA6IHNlbGYuZmV0Y2godGhpcy5yZXF1ZXN0KTtcbiAgICAgIGZldGNoUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICB2YXIgX3RoaXMkY2FsbGJhY2tzMjtcbiAgICAgICAgX3RoaXMucmVzcG9uc2UgPSBfdGhpcy5sb2FkZXIgPSByZXNwb25zZTtcbiAgICAgICAgdmFyIGZpcnN0ID0gTWF0aC5tYXgoc2VsZi5wZXJmb3JtYW5jZS5ub3coKSwgc3RhdHMubG9hZGluZy5zdGFydCk7XG4gICAgICAgIHNlbGYuY2xlYXJUaW1lb3V0KF90aGlzLnJlcXVlc3RUaW1lb3V0KTtcbiAgICAgICAgY29uZmlnLnRpbWVvdXQgPSBtYXhMb2FkVGltZU1zO1xuICAgICAgICBfdGhpcy5yZXF1ZXN0VGltZW91dCA9IHNlbGYuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzLmNhbGxiYWNrcykge1xuICAgICAgICAgICAgX3RoaXMuYWJvcnRJbnRlcm5hbCgpO1xuICAgICAgICAgICAgX3RoaXMuY2FsbGJhY2tzLm9uVGltZW91dChzdGF0cywgY29udGV4dCwgX3RoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgbWF4TG9hZFRpbWVNcyAtIChmaXJzdCAtIHN0YXRzLmxvYWRpbmcuc3RhcnQpKTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgIHZhciBzdGF0dXMgPSByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICBzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdHVzVGV4dDtcbiAgICAgICAgICB0aHJvdyBuZXcgRmV0Y2hFcnJvcihzdGF0dXNUZXh0IHx8ICdmZXRjaCwgYmFkIG5ldHdvcmsgcmVzcG9uc2UnLCBzdGF0dXMsIHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0cy5sb2FkaW5nLmZpcnN0ID0gZmlyc3Q7XG4gICAgICAgIHN0YXRzLnRvdGFsID0gZ2V0Q29udGVudExlbmd0aChyZXNwb25zZS5oZWFkZXJzKSB8fCBzdGF0cy50b3RhbDtcbiAgICAgICAgdmFyIG9uUHJvZ3Jlc3MgPSAoX3RoaXMkY2FsbGJhY2tzMiA9IF90aGlzLmNhbGxiYWNrcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGNhbGxiYWNrczIub25Qcm9ncmVzcztcbiAgICAgICAgaWYgKG9uUHJvZ3Jlc3MgJiYgaXNGaW5pdGVOdW1iZXIoY29uZmlnLmhpZ2hXYXRlck1hcmspKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmxvYWRQcm9ncmVzc2l2ZWx5KHJlc3BvbnNlLCBzdGF0cywgY29udGV4dCwgY29uZmlnLmhpZ2hXYXRlck1hcmssIG9uUHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQucmVzcG9uc2VUeXBlID09PSAnanNvbicpIHtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZURhdGEpIHtcbiAgICAgICAgdmFyIF90aGlzJGNhbGxiYWNrczMsIF90aGlzJGNhbGxiYWNrczQ7XG4gICAgICAgIHZhciByZXNwb25zZSA9IF90aGlzLnJlc3BvbnNlO1xuICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsb2FkZXIgZGVzdHJveWVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5jbGVhclRpbWVvdXQoX3RoaXMucmVxdWVzdFRpbWVvdXQpO1xuICAgICAgICBzdGF0cy5sb2FkaW5nLmVuZCA9IE1hdGgubWF4KHNlbGYucGVyZm9ybWFuY2Uubm93KCksIHN0YXRzLmxvYWRpbmcuZmlyc3QpO1xuICAgICAgICB2YXIgdG90YWwgPSByZXNwb25zZURhdGFbTEVOR1RIXTtcbiAgICAgICAgaWYgKHRvdGFsKSB7XG4gICAgICAgICAgc3RhdHMubG9hZGVkID0gc3RhdHMudG90YWwgPSB0b3RhbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbG9hZGVyUmVzcG9uc2UgPSB7XG4gICAgICAgICAgdXJsOiByZXNwb25zZS51cmwsXG4gICAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICAgIGNvZGU6IHJlc3BvbnNlLnN0YXR1c1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb25Qcm9ncmVzcyA9IChfdGhpcyRjYWxsYmFja3MzID0gX3RoaXMuY2FsbGJhY2tzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2FsbGJhY2tzMy5vblByb2dyZXNzO1xuICAgICAgICBpZiAob25Qcm9ncmVzcyAmJiAhaXNGaW5pdGVOdW1iZXIoY29uZmlnLmhpZ2hXYXRlck1hcmspKSB7XG4gICAgICAgICAgb25Qcm9ncmVzcyhzdGF0cywgY29udGV4dCwgcmVzcG9uc2VEYXRhLCByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgKF90aGlzJGNhbGxiYWNrczQgPSBfdGhpcy5jYWxsYmFja3MpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjYWxsYmFja3M0Lm9uU3VjY2Vzcyhsb2FkZXJSZXNwb25zZSwgc3RhdHMsIGNvbnRleHQsIHJlc3BvbnNlKTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB2YXIgX3RoaXMkY2FsbGJhY2tzNTtcbiAgICAgICAgc2VsZi5jbGVhclRpbWVvdXQoX3RoaXMucmVxdWVzdFRpbWVvdXQpO1xuICAgICAgICBpZiAoc3RhdHMuYWJvcnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBDT1JTIGVycm9ycyByZXN1bHQgaW4gYW4gdW5kZWZpbmVkIGNvZGUuIFNldCBpdCB0byAwIGhlcmUgdG8gYWxpZ24gd2l0aCBYSFIncyBiZWhhdmlvclxuICAgICAgICAvLyB3aGVuIGRlc3Ryb3lpbmcsICdlcnJvcicgaXRzZWxmIGNhbiBiZSB1bmRlZmluZWRcbiAgICAgICAgdmFyIGNvZGUgPSAhZXJyb3IgPyAwIDogZXJyb3IuY29kZSB8fCAwO1xuICAgICAgICB2YXIgdGV4dCA9ICFlcnJvciA/IG51bGwgOiBlcnJvci5tZXNzYWdlO1xuICAgICAgICAoX3RoaXMkY2FsbGJhY2tzNSA9IF90aGlzLmNhbGxiYWNrcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGNhbGxiYWNrczUub25FcnJvcih7XG4gICAgICAgICAgY29kZTogY29kZSxcbiAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgIH0sIGNvbnRleHQsIGVycm9yID8gZXJyb3IuZGV0YWlscyA6IG51bGwsIHN0YXRzKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLmdldENhY2hlQWdlID0gZnVuY3Rpb24gZ2V0Q2FjaGVBZ2UoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLnJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBhZ2VIZWFkZXIgPSB0aGlzLnJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdhZ2UnKTtcbiAgICAgICAgcmVzdWx0ID0gYWdlSGVhZGVyID8gcGFyc2VGbG9hdChhZ2VIZWFkZXIpIDogbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0UmVzcG9uc2VIZWFkZXIgPSBmdW5jdGlvbiBnZXRSZXNwb25zZUhlYWRlcihuYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNwb25zZSA/IHRoaXMucmVzcG9uc2UuaGVhZGVycy5nZXQobmFtZSkgOiBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLmxvYWRQcm9ncmVzc2l2ZWx5ID0gZnVuY3Rpb24gbG9hZFByb2dyZXNzaXZlbHkocmVzcG9uc2UsIHN0YXRzLCBjb250ZXh0LCBoaWdoV2F0ZXJNYXJrLCBvblByb2dyZXNzKSB7XG4gICAgICBpZiAoaGlnaFdhdGVyTWFyayA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGhpZ2hXYXRlck1hcmsgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIGNodW5rQ2FjaGUgPSBuZXcgQ2h1bmtDYWNoZSgpO1xuICAgICAgdmFyIHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgICB2YXIgX3B1bXAgPSBmdW5jdGlvbiBwdW1wKCkge1xuICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgaWYgKGRhdGEuZG9uZSkge1xuICAgICAgICAgICAgaWYgKGNodW5rQ2FjaGUuZGF0YUxlbmd0aCkge1xuICAgICAgICAgICAgICBvblByb2dyZXNzKHN0YXRzLCBjb250ZXh0LCBjaHVua0NhY2hlLmZsdXNoKCkuYnVmZmVyLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBBcnJheUJ1ZmZlcigwKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjaHVuayA9IGRhdGEudmFsdWU7XG4gICAgICAgICAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgICBzdGF0cy5sb2FkZWQgKz0gbGVuO1xuICAgICAgICAgIGlmIChsZW4gPCBoaWdoV2F0ZXJNYXJrIHx8IGNodW5rQ2FjaGUuZGF0YUxlbmd0aCkge1xuICAgICAgICAgICAgLy8gVGhlIGN1cnJlbnQgY2h1bmsgaXMgdG9vIHNtYWxsIHRvIHRvIGJlIGVtaXR0ZWQgb3IgdGhlIGNhY2hlIGFscmVhZHkgaGFzIGRhdGFcbiAgICAgICAgICAgIC8vIFB1c2ggaXQgdG8gdGhlIGNhY2hlXG4gICAgICAgICAgICBjaHVua0NhY2hlLnB1c2goY2h1bmspO1xuICAgICAgICAgICAgaWYgKGNodW5rQ2FjaGUuZGF0YUxlbmd0aCA+PSBoaWdoV2F0ZXJNYXJrKSB7XG4gICAgICAgICAgICAgIC8vIGZsdXNoIGluIG9yZGVyIHRvIGpvaW4gdGhlIHR5cGVkIGFycmF5c1xuICAgICAgICAgICAgICBvblByb2dyZXNzKHN0YXRzLCBjb250ZXh0LCBjaHVua0NhY2hlLmZsdXNoKCkuYnVmZmVyLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm90aGluZyBjYWNoZWQgYWxyZWFkeSwgYW5kIHRoZSBjaGFjaGUgaXMgbGFyZ2UgZW5vdWdoXG4gICAgICAgICAgICAvLyBqdXN0IGVtaXQgdGhlIHByb2dyZXNzIGV2ZW50XG4gICAgICAgICAgICBvblByb2dyZXNzKHN0YXRzLCBjb250ZXh0LCBjaHVuay5idWZmZXIsIHJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9wdW1wKCk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvKiBhYm9ydGVkICovXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfcHVtcCgpO1xuICAgIH07XG4gICAgcmV0dXJuIEZldGNoTG9hZGVyO1xuICB9KCk7XG4gIGZ1bmN0aW9uIGdldFJlcXVlc3RQYXJhbWV0ZXJzKGNvbnRleHQsIHNpZ25hbCkge1xuICAgIHZhciBpbml0UGFyYW1zID0ge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIG1vZGU6ICdjb3JzJyxcbiAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLFxuICAgICAgc2lnbmFsOiBzaWduYWwsXG4gICAgICBoZWFkZXJzOiBuZXcgc2VsZi5IZWFkZXJzKF9leHRlbmRzKHt9LCBjb250ZXh0LmhlYWRlcnMpKVxuICAgIH07XG4gICAgaWYgKGNvbnRleHQucmFuZ2VFbmQpIHtcbiAgICAgIGluaXRQYXJhbXMuaGVhZGVycy5zZXQoJ1JhbmdlJywgJ2J5dGVzPScgKyBjb250ZXh0LnJhbmdlU3RhcnQgKyAnLScgKyBTdHJpbmcoY29udGV4dC5yYW5nZUVuZCAtIDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIGluaXRQYXJhbXM7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Qnl0ZVJhbmdlTGVuZ3RoKGJ5dGVSYW5nZUhlYWRlcikge1xuICAgIHZhciByZXN1bHQgPSBCWVRFUkFOR0UuZXhlYyhieXRlUmFuZ2VIZWFkZXIpO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiBwYXJzZUludChyZXN1bHRbMl0pIC0gcGFyc2VJbnQocmVzdWx0WzFdKSArIDE7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldENvbnRlbnRMZW5ndGgoaGVhZGVycykge1xuICAgIHZhciBjb250ZW50UmFuZ2UgPSBoZWFkZXJzLmdldCgnQ29udGVudC1SYW5nZScpO1xuICAgIGlmIChjb250ZW50UmFuZ2UpIHtcbiAgICAgIHZhciBieXRlUmFuZ2VMZW5ndGggPSBnZXRCeXRlUmFuZ2VMZW5ndGgoY29udGVudFJhbmdlKTtcbiAgICAgIGlmIChpc0Zpbml0ZU51bWJlcihieXRlUmFuZ2VMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBieXRlUmFuZ2VMZW5ndGg7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjb250ZW50TGVuZ3RoID0gaGVhZGVycy5nZXQoJ0NvbnRlbnQtTGVuZ3RoJyk7XG4gICAgaWYgKGNvbnRlbnRMZW5ndGgpIHtcbiAgICAgIHJldHVybiBwYXJzZUludChjb250ZW50TGVuZ3RoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UmVxdWVzdChjb250ZXh0LCBpbml0UGFyYW1zKSB7XG4gICAgcmV0dXJuIG5ldyBzZWxmLlJlcXVlc3QoY29udGV4dC51cmwsIGluaXRQYXJhbXMpO1xuICB9XG4gIHZhciBGZXRjaEVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXJyb3IpIHtcbiAgICBmdW5jdGlvbiBGZXRjaEVycm9yKG1lc3NhZ2UsIGNvZGUsIGRldGFpbHMpIHtcbiAgICAgIHZhciBfdGhpczI7XG4gICAgICBfdGhpczIgPSBfRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLmNvZGUgPSB2b2lkIDA7XG4gICAgICBfdGhpczIuZGV0YWlscyA9IHZvaWQgMDtcbiAgICAgIF90aGlzMi5jb2RlID0gY29kZTtcbiAgICAgIF90aGlzMi5kZXRhaWxzID0gZGV0YWlscztcbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuICAgIF9pbmhlcml0c0xvb3NlKEZldGNoRXJyb3IsIF9FcnJvcik7XG4gICAgcmV0dXJuIEZldGNoRXJyb3I7XG4gIH0oLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoRXJyb3IpKTtcblxuICB2YXIgQUdFX0hFQURFUl9MSU5FX1JFR0VYID0gL15hZ2U6XFxzKltcXGQuXStcXHMqJC9pbTtcbiAgdmFyIFhockxvYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gWGhyTG9hZGVyKGNvbmZpZykge1xuICAgICAgdGhpcy54aHJTZXR1cCA9IHZvaWQgMDtcbiAgICAgIHRoaXMucmVxdWVzdFRpbWVvdXQgPSB2b2lkIDA7XG4gICAgICB0aGlzLnJldHJ5VGltZW91dCA9IHZvaWQgMDtcbiAgICAgIHRoaXMucmV0cnlEZWxheSA9IHZvaWQgMDtcbiAgICAgIHRoaXMuY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuY2FsbGJhY2tzID0gbnVsbDtcbiAgICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG4gICAgICB0aGlzLmxvYWRlciA9IG51bGw7XG4gICAgICB0aGlzLnN0YXRzID0gdm9pZCAwO1xuICAgICAgdGhpcy54aHJTZXR1cCA9IGNvbmZpZyA/IGNvbmZpZy54aHJTZXR1cCB8fCBudWxsIDogbnVsbDtcbiAgICAgIHRoaXMuc3RhdHMgPSBuZXcgTG9hZFN0YXRzKCk7XG4gICAgICB0aGlzLnJldHJ5RGVsYXkgPSAwO1xuICAgIH1cbiAgICB2YXIgX3Byb3RvID0gWGhyTG9hZGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmNhbGxiYWNrcyA9IG51bGw7XG4gICAgICB0aGlzLmFib3J0SW50ZXJuYWwoKTtcbiAgICAgIHRoaXMubG9hZGVyID0gbnVsbDtcbiAgICAgIHRoaXMuY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG4gICAgICB0aGlzLnhoclNldHVwID0gbnVsbDtcbiAgICB9O1xuICAgIF9wcm90by5hYm9ydEludGVybmFsID0gZnVuY3Rpb24gYWJvcnRJbnRlcm5hbCgpIHtcbiAgICAgIHZhciBsb2FkZXIgPSB0aGlzLmxvYWRlcjtcbiAgICAgIHNlbGYuY2xlYXJUaW1lb3V0KHRoaXMucmVxdWVzdFRpbWVvdXQpO1xuICAgICAgc2VsZi5jbGVhclRpbWVvdXQodGhpcy5yZXRyeVRpbWVvdXQpO1xuICAgICAgaWYgKGxvYWRlcikge1xuICAgICAgICBsb2FkZXIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgbG9hZGVyLm9ucHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICBpZiAobG9hZGVyLnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICB0aGlzLnN0YXRzLmFib3J0ZWQgPSB0cnVlO1xuICAgICAgICAgIGxvYWRlci5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uYWJvcnQgPSBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgIHZhciBfdGhpcyRjYWxsYmFja3M7XG4gICAgICB0aGlzLmFib3J0SW50ZXJuYWwoKTtcbiAgICAgIGlmICgoX3RoaXMkY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3MpICE9IG51bGwgJiYgX3RoaXMkY2FsbGJhY2tzLm9uQWJvcnQpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25BYm9ydCh0aGlzLnN0YXRzLCB0aGlzLmNvbnRleHQsIHRoaXMubG9hZGVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5sb2FkID0gZnVuY3Rpb24gbG9hZChjb250ZXh0LCBjb25maWcsIGNhbGxiYWNrcykge1xuICAgICAgaWYgKHRoaXMuc3RhdHMubG9hZGluZy5zdGFydCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvYWRlciBjYW4gb25seSBiZSB1c2VkIG9uY2UuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnN0YXRzLmxvYWRpbmcuc3RhcnQgPSBzZWxmLnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgdGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M7XG4gICAgICB0aGlzLmxvYWRJbnRlcm5hbCgpO1xuICAgIH07XG4gICAgX3Byb3RvLmxvYWRJbnRlcm5hbCA9IGZ1bmN0aW9uIGxvYWRJbnRlcm5hbCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICAgIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgICBpZiAoIWNvbmZpZyB8fCAhY29udGV4dCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgeGhyID0gdGhpcy5sb2FkZXIgPSBuZXcgc2VsZi5YTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgdmFyIHN0YXRzID0gdGhpcy5zdGF0cztcbiAgICAgIHN0YXRzLmxvYWRpbmcuZmlyc3QgPSAwO1xuICAgICAgc3RhdHMubG9hZGVkID0gMDtcbiAgICAgIHN0YXRzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICAgIHZhciB4aHJTZXR1cCA9IHRoaXMueGhyU2V0dXA7XG4gICAgICBpZiAoeGhyU2V0dXApIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzLmxvYWRlciAhPT0geGhyIHx8IF90aGlzLnN0YXRzLmFib3J0ZWQpIHJldHVybjtcbiAgICAgICAgICByZXR1cm4geGhyU2V0dXAoeGhyLCBjb250ZXh0LnVybCk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIGlmIChfdGhpcy5sb2FkZXIgIT09IHhociB8fCBfdGhpcy5zdGF0cy5hYm9ydGVkKSByZXR1cm47XG4gICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIGNvbnRleHQudXJsLCB0cnVlKTtcbiAgICAgICAgICByZXR1cm4geGhyU2V0dXAoeGhyLCBjb250ZXh0LnVybCk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChfdGhpcy5sb2FkZXIgIT09IHhociB8fCBfdGhpcy5zdGF0cy5hYm9ydGVkKSByZXR1cm47XG4gICAgICAgICAgX3RoaXMub3BlbkFuZFNlbmRYaHIoeGhyLCBjb250ZXh0LCBjb25maWcpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkY2FsbGJhY2tzMjtcbiAgICAgICAgICAvLyBJRTExIHRocm93cyBhbiBleGNlcHRpb24gb24geGhyLm9wZW4gaWYgYXR0ZW1wdGluZyB0byBhY2Nlc3MgYW4gSFRUUCByZXNvdXJjZSBvdmVyIEhUVFBTXG4gICAgICAgICAgKF90aGlzJGNhbGxiYWNrczIgPSBfdGhpcy5jYWxsYmFja3MpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjYWxsYmFja3MyLm9uRXJyb3Ioe1xuICAgICAgICAgICAgY29kZTogeGhyLnN0YXR1cyxcbiAgICAgICAgICAgIHRleHQ6IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICB9LCBjb250ZXh0LCB4aHIsIHN0YXRzKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcGVuQW5kU2VuZFhocih4aHIsIGNvbnRleHQsIGNvbmZpZyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub3BlbkFuZFNlbmRYaHIgPSBmdW5jdGlvbiBvcGVuQW5kU2VuZFhocih4aHIsIGNvbnRleHQsIGNvbmZpZykge1xuICAgICAgaWYgKCF4aHIucmVhZHlTdGF0ZSkge1xuICAgICAgICB4aHIub3BlbignR0VUJywgY29udGV4dC51cmwsIHRydWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhlYWRlcnMgPSBjb250ZXh0LmhlYWRlcnM7XG4gICAgICB2YXIgX2NvbmZpZyRsb2FkUG9saWN5ID0gY29uZmlnLmxvYWRQb2xpY3ksXG4gICAgICAgIG1heFRpbWVUb0ZpcnN0Qnl0ZU1zID0gX2NvbmZpZyRsb2FkUG9saWN5Lm1heFRpbWVUb0ZpcnN0Qnl0ZU1zLFxuICAgICAgICBtYXhMb2FkVGltZU1zID0gX2NvbmZpZyRsb2FkUG9saWN5Lm1heExvYWRUaW1lTXM7XG4gICAgICBpZiAoaGVhZGVycykge1xuICAgICAgICBmb3IgKHZhciBoZWFkZXIgaW4gaGVhZGVycykge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlciwgaGVhZGVyc1toZWFkZXJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbnRleHQucmFuZ2VFbmQpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1JhbmdlJywgJ2J5dGVzPScgKyBjb250ZXh0LnJhbmdlU3RhcnQgKyAnLScgKyAoY29udGV4dC5yYW5nZUVuZCAtIDEpKTtcbiAgICAgIH1cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB0aGlzLnJlYWR5c3RhdGVjaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgIHhoci5vbnByb2dyZXNzID0gdGhpcy5sb2FkcHJvZ3Jlc3MuYmluZCh0aGlzKTtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBjb250ZXh0LnJlc3BvbnNlVHlwZTtcbiAgICAgIC8vIHNldHVwIHRpbWVvdXQgYmVmb3JlIHdlIHBlcmZvcm0gcmVxdWVzdFxuICAgICAgc2VsZi5jbGVhclRpbWVvdXQodGhpcy5yZXF1ZXN0VGltZW91dCk7XG4gICAgICBjb25maWcudGltZW91dCA9IG1heFRpbWVUb0ZpcnN0Qnl0ZU1zICYmIGlzRmluaXRlTnVtYmVyKG1heFRpbWVUb0ZpcnN0Qnl0ZU1zKSA/IG1heFRpbWVUb0ZpcnN0Qnl0ZU1zIDogbWF4TG9hZFRpbWVNcztcbiAgICAgIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBzZWxmLnNldFRpbWVvdXQodGhpcy5sb2FkdGltZW91dC5iaW5kKHRoaXMpLCBjb25maWcudGltZW91dCk7XG4gICAgICB4aHIuc2VuZCgpO1xuICAgIH07XG4gICAgX3Byb3RvLnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiByZWFkeXN0YXRlY2hhbmdlKCkge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHhociA9IHRoaXMubG9hZGVyLFxuICAgICAgICBzdGF0cyA9IHRoaXMuc3RhdHM7XG4gICAgICBpZiAoIWNvbnRleHQgfHwgIXhocikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgcmVhZHlTdGF0ZSA9IHhoci5yZWFkeVN0YXRlO1xuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuXG4gICAgICAvLyBkb24ndCBwcm9jZWVkIGlmIHhociBoYXMgYmVlbiBhYm9ydGVkXG4gICAgICBpZiAoc3RhdHMuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vID49IEhFQURFUlNfUkVDRUlWRURcbiAgICAgIGlmIChyZWFkeVN0YXRlID49IDIpIHtcbiAgICAgICAgaWYgKHN0YXRzLmxvYWRpbmcuZmlyc3QgPT09IDApIHtcbiAgICAgICAgICBzdGF0cy5sb2FkaW5nLmZpcnN0ID0gTWF0aC5tYXgoc2VsZi5wZXJmb3JtYW5jZS5ub3coKSwgc3RhdHMubG9hZGluZy5zdGFydCk7XG4gICAgICAgICAgLy8gcmVhZHlTdGF0ZSA+PSAyIEFORCByZWFkeVN0YXRlICE9PTQgKHJlYWR5U3RhdGUgPSBIRUFERVJTX1JFQ0VJVkVEIHx8IExPQURJTkcpIHJlYXJtIHRpbWVvdXQgYXMgeGhyIG5vdCBmaW5pc2hlZCB5ZXRcbiAgICAgICAgICBpZiAoY29uZmlnLnRpbWVvdXQgIT09IGNvbmZpZy5sb2FkUG9saWN5Lm1heExvYWRUaW1lTXMpIHtcbiAgICAgICAgICAgIHNlbGYuY2xlYXJUaW1lb3V0KHRoaXMucmVxdWVzdFRpbWVvdXQpO1xuICAgICAgICAgICAgY29uZmlnLnRpbWVvdXQgPSBjb25maWcubG9hZFBvbGljeS5tYXhMb2FkVGltZU1zO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IHNlbGYuc2V0VGltZW91dCh0aGlzLmxvYWR0aW1lb3V0LmJpbmQodGhpcyksIGNvbmZpZy5sb2FkUG9saWN5Lm1heExvYWRUaW1lTXMgLSAoc3RhdHMubG9hZGluZy5maXJzdCAtIHN0YXRzLmxvYWRpbmcuc3RhcnQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICBzZWxmLmNsZWFyVGltZW91dCh0aGlzLnJlcXVlc3RUaW1lb3V0KTtcbiAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICB4aHIub25wcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgdmFyIF9zdGF0dXMgPSB4aHIuc3RhdHVzO1xuICAgICAgICAgIC8vIGh0dHAgc3RhdHVzIGJldHdlZW4gMjAwIHRvIDI5OSBhcmUgYWxsIHN1Y2Nlc3NmdWxcbiAgICAgICAgICB2YXIgdXNlUmVzcG9uc2VUZXh0ID0geGhyLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8geGhyLnJlc3BvbnNlVGV4dCA6IG51bGw7XG4gICAgICAgICAgaWYgKF9zdGF0dXMgPj0gMjAwICYmIF9zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gdXNlUmVzcG9uc2VUZXh0ICE9IG51bGwgPyB1c2VSZXNwb25zZVRleHQgOiB4aHIucmVzcG9uc2U7XG4gICAgICAgICAgICBpZiAoZGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHZhciBfdGhpcyRjYWxsYmFja3MzLCBfdGhpcyRjYWxsYmFja3M0O1xuICAgICAgICAgICAgICBzdGF0cy5sb2FkaW5nLmVuZCA9IE1hdGgubWF4KHNlbGYucGVyZm9ybWFuY2Uubm93KCksIHN0YXRzLmxvYWRpbmcuZmlyc3QpO1xuICAgICAgICAgICAgICB2YXIgbGVuID0geGhyLnJlc3BvbnNlVHlwZSA9PT0gJ2FycmF5YnVmZmVyJyA/IGRhdGEuYnl0ZUxlbmd0aCA6IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICBzdGF0cy5sb2FkZWQgPSBzdGF0cy50b3RhbCA9IGxlbjtcbiAgICAgICAgICAgICAgc3RhdHMuYndFc3RpbWF0ZSA9IHN0YXRzLnRvdGFsICogODAwMCAvIChzdGF0cy5sb2FkaW5nLmVuZCAtIHN0YXRzLmxvYWRpbmcuZmlyc3QpO1xuICAgICAgICAgICAgICB2YXIgb25Qcm9ncmVzcyA9IChfdGhpcyRjYWxsYmFja3MzID0gdGhpcy5jYWxsYmFja3MpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjYWxsYmFja3MzLm9uUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgIGlmIChvblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgb25Qcm9ncmVzcyhzdGF0cywgY29udGV4dCwgZGF0YSwgeGhyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgX3Jlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgIHVybDogeGhyLnJlc3BvbnNlVVJMLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgY29kZTogX3N0YXR1c1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAoX3RoaXMkY2FsbGJhY2tzNCA9IHRoaXMuY2FsbGJhY2tzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2FsbGJhY2tzNC5vblN1Y2Nlc3MoX3Jlc3BvbnNlLCBzdGF0cywgY29udGV4dCwgeGhyKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEhhbmRsZSBiYWQgc3RhdHVzIG9yIG51bGxpc2ggcmVzcG9uc2VcbiAgICAgICAgICB2YXIgcmV0cnlDb25maWcgPSBjb25maWcubG9hZFBvbGljeS5lcnJvclJldHJ5O1xuICAgICAgICAgIHZhciByZXRyeUNvdW50ID0gc3RhdHMucmV0cnk7XG4gICAgICAgICAgLy8gaWYgbWF4IG5iIG9mIHJldHJpZXMgcmVhY2hlZCBvciBpZiBodHRwIHN0YXR1cyBiZXR3ZWVuIDQwMCBhbmQgNDk5IChzdWNoIGVycm9yIGNhbm5vdCBiZSByZWNvdmVyZWQsIHJldHJ5aW5nIGlzIHVzZWxlc3MpLCByZXR1cm4gZXJyb3JcbiAgICAgICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICB1cmw6IGNvbnRleHQudXJsLFxuICAgICAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY29kZTogX3N0YXR1c1xuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKHNob3VsZFJldHJ5KHJldHJ5Q29uZmlnLCByZXRyeUNvdW50LCBmYWxzZSwgcmVzcG9uc2UpKSB7XG4gICAgICAgICAgICB0aGlzLnJldHJ5KHJldHJ5Q29uZmlnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF90aGlzJGNhbGxiYWNrczU7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoX3N0YXR1cyArIFwiIHdoaWxlIGxvYWRpbmcgXCIgKyBjb250ZXh0LnVybCk7XG4gICAgICAgICAgICAoX3RoaXMkY2FsbGJhY2tzNSA9IHRoaXMuY2FsbGJhY2tzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2FsbGJhY2tzNS5vbkVycm9yKHtcbiAgICAgICAgICAgICAgY29kZTogX3N0YXR1cyxcbiAgICAgICAgICAgICAgdGV4dDogeGhyLnN0YXR1c1RleHRcbiAgICAgICAgICAgIH0sIGNvbnRleHQsIHhociwgc3RhdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmxvYWR0aW1lb3V0ID0gZnVuY3Rpb24gbG9hZHRpbWVvdXQoKSB7XG4gICAgICBpZiAoIXRoaXMuY29uZmlnKSByZXR1cm47XG4gICAgICB2YXIgcmV0cnlDb25maWcgPSB0aGlzLmNvbmZpZy5sb2FkUG9saWN5LnRpbWVvdXRSZXRyeTtcbiAgICAgIHZhciByZXRyeUNvdW50ID0gdGhpcy5zdGF0cy5yZXRyeTtcbiAgICAgIGlmIChzaG91bGRSZXRyeShyZXRyeUNvbmZpZywgcmV0cnlDb3VudCwgdHJ1ZSkpIHtcbiAgICAgICAgdGhpcy5yZXRyeShyZXRyeUNvbmZpZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3RoaXMkY29udGV4dDtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJ0aW1lb3V0IHdoaWxlIGxvYWRpbmcgXCIgKyAoKF90aGlzJGNvbnRleHQgPSB0aGlzLmNvbnRleHQpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjb250ZXh0LnVybCkpO1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3M7XG4gICAgICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgICB0aGlzLmFib3J0SW50ZXJuYWwoKTtcbiAgICAgICAgICBjYWxsYmFja3Mub25UaW1lb3V0KHRoaXMuc3RhdHMsIHRoaXMuY29udGV4dCwgdGhpcy5sb2FkZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ucmV0cnkgPSBmdW5jdGlvbiByZXRyeShyZXRyeUNvbmZpZykge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHN0YXRzID0gdGhpcy5zdGF0cztcbiAgICAgIHRoaXMucmV0cnlEZWxheSA9IGdldFJldHJ5RGVsYXkocmV0cnlDb25maWcsIHN0YXRzLnJldHJ5KTtcbiAgICAgIHN0YXRzLnJldHJ5Kys7XG4gICAgICBsb2dnZXIud2Fybigoc3RhdHVzID8gJ0hUVFAgU3RhdHVzICcgKyBzdGF0dXMgOiAnVGltZW91dCcpICsgXCIgd2hpbGUgbG9hZGluZyBcIiArIChjb250ZXh0ID09IG51bGwgPyB2b2lkIDAgOiBjb250ZXh0LnVybCkgKyBcIiwgcmV0cnlpbmcgXCIgKyBzdGF0cy5yZXRyeSArIFwiL1wiICsgcmV0cnlDb25maWcubWF4TnVtUmV0cnkgKyBcIiBpbiBcIiArIHRoaXMucmV0cnlEZWxheSArIFwibXNcIik7XG4gICAgICAvLyBhYm9ydCBhbmQgcmVzZXQgaW50ZXJuYWwgc3RhdGVcbiAgICAgIHRoaXMuYWJvcnRJbnRlcm5hbCgpO1xuICAgICAgdGhpcy5sb2FkZXIgPSBudWxsO1xuICAgICAgLy8gc2NoZWR1bGUgcmV0cnlcbiAgICAgIHNlbGYuY2xlYXJUaW1lb3V0KHRoaXMucmV0cnlUaW1lb3V0KTtcbiAgICAgIHRoaXMucmV0cnlUaW1lb3V0ID0gc2VsZi5zZXRUaW1lb3V0KHRoaXMubG9hZEludGVybmFsLmJpbmQodGhpcyksIHRoaXMucmV0cnlEZWxheSk7XG4gICAgfTtcbiAgICBfcHJvdG8ubG9hZHByb2dyZXNzID0gZnVuY3Rpb24gbG9hZHByb2dyZXNzKGV2ZW50KSB7XG4gICAgICB2YXIgc3RhdHMgPSB0aGlzLnN0YXRzO1xuICAgICAgc3RhdHMubG9hZGVkID0gZXZlbnQubG9hZGVkO1xuICAgICAgaWYgKGV2ZW50Lmxlbmd0aENvbXB1dGFibGUpIHtcbiAgICAgICAgc3RhdHMudG90YWwgPSBldmVudC50b3RhbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5nZXRDYWNoZUFnZSA9IGZ1bmN0aW9uIGdldENhY2hlQWdlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XG4gICAgICBpZiAodGhpcy5sb2FkZXIgJiYgQUdFX0hFQURFUl9MSU5FX1JFR0VYLnRlc3QodGhpcy5sb2FkZXIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKSB7XG4gICAgICAgIHZhciBhZ2VIZWFkZXIgPSB0aGlzLmxvYWRlci5nZXRSZXNwb25zZUhlYWRlcignYWdlJyk7XG4gICAgICAgIHJlc3VsdCA9IGFnZUhlYWRlciA/IHBhcnNlRmxvYXQoYWdlSGVhZGVyKSA6IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgX3Byb3RvLmdldFJlc3BvbnNlSGVhZGVyID0gZnVuY3Rpb24gZ2V0UmVzcG9uc2VIZWFkZXIobmFtZSkge1xuICAgICAgaWYgKHRoaXMubG9hZGVyICYmIG5ldyBSZWdFeHAoXCJeXCIgKyBuYW1lICsgXCI6XFxcXHMqW1xcXFxkLl0rXFxcXHMqJFwiLCAnaW0nKS50ZXN0KHRoaXMubG9hZGVyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkZXIuZ2V0UmVzcG9uc2VIZWFkZXIobmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBYaHJMb2FkZXI7XG4gIH0oKTtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgdXNlIGZyYWdMb2FkUG9saWN5LmRlZmF1bHRcbiAgICovXG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBtYW5pZmVzdExvYWRQb2xpY3kuZGVmYXVsdCBhbmQgcGxheWxpc3RMb2FkUG9saWN5LmRlZmF1bHRcbiAgICovXG5cbiAgdmFyIGRlZmF1bHRMb2FkUG9saWN5ID0ge1xuICAgIG1heFRpbWVUb0ZpcnN0Qnl0ZU1zOiA4MDAwLFxuICAgIG1heExvYWRUaW1lTXM6IDIwMDAwLFxuICAgIHRpbWVvdXRSZXRyeTogbnVsbCxcbiAgICBlcnJvclJldHJ5OiBudWxsXG4gIH07XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogSWYgcG9zc2libGUsIGtlZXAgaGxzRGVmYXVsdENvbmZpZyBzaGFsbG93XG4gICAqIEl0IGlzIGNsb25lZCB3aGVuZXZlciBhIG5ldyBIbHMgaW5zdGFuY2UgaXMgY3JlYXRlZCwgYnkga2VlcGluZyB0aGUgY29uZmlnXG4gICAqIHNoYWxsb3cgdGhlIHByb3BlcnRpZXMgYXJlIGNsb25lZCwgYW5kIHdlIGRvbid0IGVuZCB1cCBtYW5pcHVsYXRpbmcgdGhlIGRlZmF1bHRcbiAgICovXG4gIHZhciBobHNEZWZhdWx0Q29uZmlnID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe1xuICAgIGF1dG9TdGFydExvYWQ6IHRydWUsXG4gICAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICAgIHN0YXJ0UG9zaXRpb246IC0xLFxuICAgIC8vIHVzZWQgYnkgc3RyZWFtLWNvbnRyb2xsZXJcbiAgICBkZWZhdWx0QXVkaW9Db2RlYzogdW5kZWZpbmVkLFxuICAgIC8vIHVzZWQgYnkgc3RyZWFtLWNvbnRyb2xsZXJcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgLy8gdXNlZCBieSBsb2dnZXJcbiAgICBjYXBMZXZlbE9uRlBTRHJvcDogZmFsc2UsXG4gICAgLy8gdXNlZCBieSBmcHMtY29udHJvbGxlclxuICAgIGNhcExldmVsVG9QbGF5ZXJTaXplOiBmYWxzZSxcbiAgICAvLyB1c2VkIGJ5IGNhcC1sZXZlbC1jb250cm9sbGVyXG4gICAgaWdub3JlRGV2aWNlUGl4ZWxSYXRpbzogZmFsc2UsXG4gICAgLy8gdXNlZCBieSBjYXAtbGV2ZWwtY29udHJvbGxlclxuICAgIG1heERldmljZVBpeGVsUmF0aW86IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAvLyB1c2VkIGJ5IGNhcC1sZXZlbC1jb250cm9sbGVyXG4gICAgcHJlZmVyTWFuYWdlZE1lZGlhU291cmNlOiB0cnVlLFxuICAgIGluaXRpYWxMaXZlTWFuaWZlc3RTaXplOiAxLFxuICAgIC8vIHVzZWQgYnkgc3RyZWFtLWNvbnRyb2xsZXJcbiAgICBtYXhCdWZmZXJMZW5ndGg6IDMwLFxuICAgIC8vIHVzZWQgYnkgc3RyZWFtLWNvbnRyb2xsZXJcbiAgICBiYWNrQnVmZmVyTGVuZ3RoOiBJbmZpbml0eSxcbiAgICAvLyB1c2VkIGJ5IGJ1ZmZlci1jb250cm9sbGVyXG4gICAgZnJvbnRCdWZmZXJGbHVzaFRocmVzaG9sZDogSW5maW5pdHksXG4gICAgc3RhcnRPblNlZ21lbnRCb3VuZGFyeTogZmFsc2UsXG4gICAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICAgIG1heEJ1ZmZlclNpemU6IDYwICogMTAwMCAqIDEwMDAsXG4gICAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICAgIG1heEZyYWdMb29rVXBUb2xlcmFuY2U6IDAuMjUsXG4gICAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICAgIG1heEJ1ZmZlckhvbGU6IDAuMSxcbiAgICAvLyB1c2VkIGJ5IHN0cmVhbS1jb250cm9sbGVyIGFuZCBnYXAtY29udHJvbGxlclxuICAgIGRldGVjdFN0YWxsV2l0aEN1cnJlbnRUaW1lTXM6IDEyNTAsXG4gICAgLy8gdXNlZCBieSBnYXAtY29udHJvbGxlclxuICAgIGhpZ2hCdWZmZXJXYXRjaGRvZ1BlcmlvZDogMixcbiAgICAvLyB1c2VkIGJ5IGdhcC1jb250cm9sbGVyXG4gICAgbnVkZ2VPZmZzZXQ6IDAuMSxcbiAgICAvLyB1c2VkIGJ5IGdhcC1jb250cm9sbGVyXG4gICAgbnVkZ2VNYXhSZXRyeTogMyxcbiAgICAvLyB1c2VkIGJ5IGdhcC1jb250cm9sbGVyXG4gICAgbnVkZ2VPblZpZGVvSG9sZTogdHJ1ZSxcbiAgICAvLyB1c2VkIGJ5IGdhcC1jb250cm9sbGVyXG4gICAgbGl2ZVN5bmNNb2RlOiAnZWRnZScsXG4gICAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICAgIGxpdmVTeW5jRHVyYXRpb25Db3VudDogMyxcbiAgICAvLyB1c2VkIGJ5IGxhdGVuY3ktY29udHJvbGxlclxuICAgIGxpdmVTeW5jT25TdGFsbEluY3JlYXNlOiAxLFxuICAgIC8vIHVzZWQgYnkgbGF0ZW5jeS1jb250cm9sbGVyXG4gICAgbGl2ZU1heExhdGVuY3lEdXJhdGlvbkNvdW50OiBJbmZpbml0eSxcbiAgICAvLyB1c2VkIGJ5IGxhdGVuY3ktY29udHJvbGxlclxuICAgIGxpdmVTeW5jRHVyYXRpb246IHVuZGVmaW5lZCxcbiAgICAvLyB1c2VkIGJ5IGxhdGVuY3ktY29udHJvbGxlclxuICAgIGxpdmVNYXhMYXRlbmN5RHVyYXRpb246IHVuZGVmaW5lZCxcbiAgICAvLyB1c2VkIGJ5IGxhdGVuY3ktY29udHJvbGxlclxuICAgIG1heExpdmVTeW5jUGxheWJhY2tSYXRlOiAxLFxuICAgIC8vIHVzZWQgYnkgbGF0ZW5jeS1jb250cm9sbGVyXG4gICAgbGl2ZUR1cmF0aW9uSW5maW5pdHk6IGZhbHNlLFxuICAgIC8vIHVzZWQgYnkgYnVmZmVyLWNvbnRyb2xsZXJcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYmFja0J1ZmZlckxlbmd0aFxuICAgICAqL1xuICAgIGxpdmVCYWNrQnVmZmVyTGVuZ3RoOiBudWxsLFxuICAgIC8vIHVzZWQgYnkgYnVmZmVyLWNvbnRyb2xsZXJcbiAgICBtYXhNYXhCdWZmZXJMZW5ndGg6IDYwMCxcbiAgICAvLyB1c2VkIGJ5IHN0cmVhbS1jb250cm9sbGVyXG4gICAgZW5hYmxlV29ya2VyOiB0cnVlLFxuICAgIC8vIHVzZWQgYnkgdHJhbnNtdXhlclxuICAgIHdvcmtlclBhdGg6IG51bGwsXG4gICAgLy8gdXNlZCBieSB0cmFuc211eGVyXG4gICAgZW5hYmxlU29mdHdhcmVBRVM6IHRydWUsXG4gICAgLy8gdXNlZCBieSBkZWNyeXB0ZXJcbiAgICBzdGFydExldmVsOiB1bmRlZmluZWQsXG4gICAgLy8gdXNlZCBieSBsZXZlbC1jb250cm9sbGVyXG4gICAgc3RhcnRGcmFnUHJlZmV0Y2g6IGZhbHNlLFxuICAgIC8vIHVzZWQgYnkgc3RyZWFtLWNvbnRyb2xsZXJcbiAgICBmcHNEcm9wcGVkTW9uaXRvcmluZ1BlcmlvZDogNTAwMCxcbiAgICAvLyB1c2VkIGJ5IGZwcy1jb250cm9sbGVyXG4gICAgZnBzRHJvcHBlZE1vbml0b3JpbmdUaHJlc2hvbGQ6IDAuMixcbiAgICAvLyB1c2VkIGJ5IGZwcy1jb250cm9sbGVyXG4gICAgYXBwZW5kRXJyb3JNYXhSZXRyeTogMyxcbiAgICAvLyB1c2VkIGJ5IGJ1ZmZlci1jb250cm9sbGVyXG4gICAgaWdub3JlUGxheWxpc3RQYXJzaW5nRXJyb3JzOiBmYWxzZSxcbiAgICBsb2FkZXI6IFhockxvYWRlcixcbiAgICAvLyBsb2FkZXI6IEZldGNoTG9hZGVyLFxuICAgIGZMb2FkZXI6IHVuZGVmaW5lZCxcbiAgICAvLyB1c2VkIGJ5IGZyYWdtZW50LWxvYWRlclxuICAgIHBMb2FkZXI6IHVuZGVmaW5lZCxcbiAgICAvLyB1c2VkIGJ5IHBsYXlsaXN0LWxvYWRlclxuICAgIHhoclNldHVwOiB1bmRlZmluZWQsXG4gICAgLy8gdXNlZCBieSB4aHItbG9hZGVyXG4gICAgbGljZW5zZVhoclNldHVwOiB1bmRlZmluZWQsXG4gICAgLy8gdXNlZCBieSBlbWUtY29udHJvbGxlclxuICAgIGxpY2Vuc2VSZXNwb25zZUNhbGxiYWNrOiB1bmRlZmluZWQsXG4gICAgLy8gdXNlZCBieSBlbWUtY29udHJvbGxlclxuICAgIGFickNvbnRyb2xsZXI6IEFickNvbnRyb2xsZXIsXG4gICAgYnVmZmVyQ29udHJvbGxlcjogQnVmZmVyQ29udHJvbGxlcixcbiAgICBjYXBMZXZlbENvbnRyb2xsZXI6IENhcExldmVsQ29udHJvbGxlcixcbiAgICBlcnJvckNvbnRyb2xsZXI6IEVycm9yQ29udHJvbGxlcixcbiAgICBmcHNDb250cm9sbGVyOiBGUFNDb250cm9sbGVyLFxuICAgIHN0cmV0Y2hTaG9ydFZpZGVvVHJhY2s6IGZhbHNlLFxuICAgIC8vIHVzZWQgYnkgbXA0LXJlbXV4ZXJcbiAgICBtYXhBdWRpb0ZyYW1lc0RyaWZ0OiAxLFxuICAgIC8vIHVzZWQgYnkgbXA0LXJlbXV4ZXJcbiAgICBmb3JjZUtleUZyYW1lT25EaXNjb250aW51aXR5OiB0cnVlLFxuICAgIC8vIHVzZWQgYnkgdHMtZGVtdXhlclxuICAgIGFickV3bWFGYXN0TGl2ZTogMyxcbiAgICAvLyB1c2VkIGJ5IGFici1jb250cm9sbGVyXG4gICAgYWJyRXdtYVNsb3dMaXZlOiA5LFxuICAgIC8vIHVzZWQgYnkgYWJyLWNvbnRyb2xsZXJcbiAgICBhYnJFd21hRmFzdFZvRDogMyxcbiAgICAvLyB1c2VkIGJ5IGFici1jb250cm9sbGVyXG4gICAgYWJyRXdtYVNsb3dWb0Q6IDksXG4gICAgLy8gdXNlZCBieSBhYnItY29udHJvbGxlclxuICAgIGFickV3bWFEZWZhdWx0RXN0aW1hdGU6IDVlNSxcbiAgICAvLyA1MDAga2JwcyAgLy8gdXNlZCBieSBhYnItY29udHJvbGxlclxuICAgIGFickV3bWFEZWZhdWx0RXN0aW1hdGVNYXg6IDVlNixcbiAgICAvLyA1IG1icHNcbiAgICBhYnJCYW5kV2lkdGhGYWN0b3I6IDAuOTUsXG4gICAgLy8gdXNlZCBieSBhYnItY29udHJvbGxlclxuICAgIGFickJhbmRXaWR0aFVwRmFjdG9yOiAwLjcsXG4gICAgLy8gdXNlZCBieSBhYnItY29udHJvbGxlclxuICAgIGFick1heFdpdGhSZWFsQml0cmF0ZTogZmFsc2UsXG4gICAgLy8gdXNlZCBieSBhYnItY29udHJvbGxlclxuICAgIG1heFN0YXJ2YXRpb25EZWxheTogNCxcbiAgICAvLyB1c2VkIGJ5IGFici1jb250cm9sbGVyXG4gICAgbWF4TG9hZGluZ0RlbGF5OiA0LFxuICAgIC8vIHVzZWQgYnkgYWJyLWNvbnRyb2xsZXJcbiAgICBtaW5BdXRvQml0cmF0ZTogMCxcbiAgICAvLyB1c2VkIGJ5IGhsc1xuICAgIGVtZUVuYWJsZWQ6IGZhbHNlLFxuICAgIC8vIHVzZWQgYnkgZW1lLWNvbnRyb2xsZXJcbiAgICB3aWRldmluZUxpY2Vuc2VVcmw6IHVuZGVmaW5lZCxcbiAgICAvLyB1c2VkIGJ5IGVtZS1jb250cm9sbGVyXG4gICAgZHJtU3lzdGVtczoge30sXG4gICAgLy8gdXNlZCBieSBlbWUtY29udHJvbGxlclxuICAgIGRybVN5c3RlbU9wdGlvbnM6IHt9LFxuICAgIC8vIHVzZWQgYnkgZW1lLWNvbnRyb2xsZXJcbiAgICByZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3NGdW5jOiByZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MgLFxuICAgIC8vIHVzZWQgYnkgZW1lLWNvbnRyb2xsZXJcbiAgICByZXF1aXJlS2V5U3lzdGVtQWNjZXNzT25TdGFydDogZmFsc2UsXG4gICAgLy8gdXNlZCBieSBlbWUtY29udHJvbGxlclxuICAgIHRlc3RCYW5kd2lkdGg6IHRydWUsXG4gICAgcHJvZ3Jlc3NpdmU6IGZhbHNlLFxuICAgIGxvd0xhdGVuY3lNb2RlOiB0cnVlLFxuICAgIGNtY2Q6IHVuZGVmaW5lZCxcbiAgICBlbmFibGVEYXRlUmFuZ2VNZXRhZGF0YUN1ZXM6IHRydWUsXG4gICAgZW5hYmxlRW1zZ01ldGFkYXRhQ3VlczogdHJ1ZSxcbiAgICBlbmFibGVFbXNnS0xWTWV0YWRhdGE6IGZhbHNlLFxuICAgIGVuYWJsZUlEM01ldGFkYXRhQ3VlczogdHJ1ZSxcbiAgICBlbmFibGVJbnRlcnN0aXRpYWxQbGF5YmFjazogdHJ1ZSxcbiAgICBpbnRlcnN0aXRpYWxBcHBlbmRJblBsYWNlOiB0cnVlLFxuICAgIGludGVyc3RpdGlhbExpdmVMb29rQWhlYWQ6IDEwLFxuICAgIHVzZU1lZGlhQ2FwYWJpbGl0aWVzOiB0cnVlLFxuICAgIHByZXNlcnZlTWFudWFsTGV2ZWxPbkVycm9yOiBmYWxzZSxcbiAgICBjZXJ0TG9hZFBvbGljeToge1xuICAgICAgZGVmYXVsdDogZGVmYXVsdExvYWRQb2xpY3lcbiAgICB9LFxuICAgIGtleUxvYWRQb2xpY3k6IHtcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgbWF4VGltZVRvRmlyc3RCeXRlTXM6IDgwMDAsXG4gICAgICAgIG1heExvYWRUaW1lTXM6IDIwMDAwLFxuICAgICAgICB0aW1lb3V0UmV0cnk6IHtcbiAgICAgICAgICBtYXhOdW1SZXRyeTogMSxcbiAgICAgICAgICByZXRyeURlbGF5TXM6IDEwMDAsXG4gICAgICAgICAgbWF4UmV0cnlEZWxheU1zOiAyMDAwMCxcbiAgICAgICAgICBiYWNrb2ZmOiAnbGluZWFyJ1xuICAgICAgICB9LFxuICAgICAgICBlcnJvclJldHJ5OiB7XG4gICAgICAgICAgbWF4TnVtUmV0cnk6IDgsXG4gICAgICAgICAgcmV0cnlEZWxheU1zOiAxMDAwLFxuICAgICAgICAgIG1heFJldHJ5RGVsYXlNczogMjAwMDAsXG4gICAgICAgICAgYmFja29mZjogJ2xpbmVhcidcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbWFuaWZlc3RMb2FkUG9saWN5OiB7XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIG1heFRpbWVUb0ZpcnN0Qnl0ZU1zOiBJbmZpbml0eSxcbiAgICAgICAgbWF4TG9hZFRpbWVNczogMjAwMDAsXG4gICAgICAgIHRpbWVvdXRSZXRyeToge1xuICAgICAgICAgIG1heE51bVJldHJ5OiAyLFxuICAgICAgICAgIHJldHJ5RGVsYXlNczogMCxcbiAgICAgICAgICBtYXhSZXRyeURlbGF5TXM6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JSZXRyeToge1xuICAgICAgICAgIG1heE51bVJldHJ5OiAxLFxuICAgICAgICAgIHJldHJ5RGVsYXlNczogMTAwMCxcbiAgICAgICAgICBtYXhSZXRyeURlbGF5TXM6IDgwMDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcGxheWxpc3RMb2FkUG9saWN5OiB7XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIG1heFRpbWVUb0ZpcnN0Qnl0ZU1zOiAxMDAwMCxcbiAgICAgICAgbWF4TG9hZFRpbWVNczogMjAwMDAsXG4gICAgICAgIHRpbWVvdXRSZXRyeToge1xuICAgICAgICAgIG1heE51bVJldHJ5OiAyLFxuICAgICAgICAgIHJldHJ5RGVsYXlNczogMCxcbiAgICAgICAgICBtYXhSZXRyeURlbGF5TXM6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JSZXRyeToge1xuICAgICAgICAgIG1heE51bVJldHJ5OiAyLFxuICAgICAgICAgIHJldHJ5RGVsYXlNczogMTAwMCxcbiAgICAgICAgICBtYXhSZXRyeURlbGF5TXM6IDgwMDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZnJhZ0xvYWRQb2xpY3k6IHtcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgbWF4VGltZVRvRmlyc3RCeXRlTXM6IDEwMDAwLFxuICAgICAgICBtYXhMb2FkVGltZU1zOiAxMjAwMDAsXG4gICAgICAgIHRpbWVvdXRSZXRyeToge1xuICAgICAgICAgIG1heE51bVJldHJ5OiA0LFxuICAgICAgICAgIHJldHJ5RGVsYXlNczogMCxcbiAgICAgICAgICBtYXhSZXRyeURlbGF5TXM6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JSZXRyeToge1xuICAgICAgICAgIG1heE51bVJldHJ5OiA2LFxuICAgICAgICAgIHJldHJ5RGVsYXlNczogMTAwMCxcbiAgICAgICAgICBtYXhSZXRyeURlbGF5TXM6IDgwMDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc3RlZXJpbmdNYW5pZmVzdExvYWRQb2xpY3k6IHtcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgbWF4VGltZVRvRmlyc3RCeXRlTXM6IDEwMDAwLFxuICAgICAgICBtYXhMb2FkVGltZU1zOiAyMDAwMCxcbiAgICAgICAgdGltZW91dFJldHJ5OiB7XG4gICAgICAgICAgbWF4TnVtUmV0cnk6IDIsXG4gICAgICAgICAgcmV0cnlEZWxheU1zOiAwLFxuICAgICAgICAgIG1heFJldHJ5RGVsYXlNczogMFxuICAgICAgICB9LFxuICAgICAgICBlcnJvclJldHJ5OiB7XG4gICAgICAgICAgbWF4TnVtUmV0cnk6IDEsXG4gICAgICAgICAgcmV0cnlEZWxheU1zOiAxMDAwLFxuICAgICAgICAgIG1heFJldHJ5RGVsYXlNczogODAwMFxuICAgICAgICB9XG4gICAgICB9IFxuICAgIH0sXG4gICAgaW50ZXJzdGl0aWFsQXNzZXRMaXN0TG9hZFBvbGljeToge1xuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBtYXhUaW1lVG9GaXJzdEJ5dGVNczogMTAwMDAsXG4gICAgICAgIG1heExvYWRUaW1lTXM6IDMwMDAwLFxuICAgICAgICB0aW1lb3V0UmV0cnk6IHtcbiAgICAgICAgICBtYXhOdW1SZXRyeTogMCxcbiAgICAgICAgICByZXRyeURlbGF5TXM6IDAsXG4gICAgICAgICAgbWF4UmV0cnlEZWxheU1zOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yUmV0cnk6IHtcbiAgICAgICAgICBtYXhOdW1SZXRyeTogMCxcbiAgICAgICAgICByZXRyeURlbGF5TXM6IDEwMDAsXG4gICAgICAgICAgbWF4UmV0cnlEZWxheU1zOiA4MDAwXG4gICAgICAgIH1cbiAgICAgIH0gXG4gICAgfSxcbiAgICAvLyBUaGVzZSBkZWZhdWx0IHNldHRpbmdzIGFyZSBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSBhYm92ZSBwb2xpY2llc1xuICAgIC8vIGFuZCBhcmUgbWFpbnRhaW5lZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICBtYW5pZmVzdExvYWRpbmdUaW1lT3V0OiAxMDAwMCxcbiAgICBtYW5pZmVzdExvYWRpbmdNYXhSZXRyeTogMSxcbiAgICBtYW5pZmVzdExvYWRpbmdSZXRyeURlbGF5OiAxMDAwLFxuICAgIG1hbmlmZXN0TG9hZGluZ01heFJldHJ5VGltZW91dDogNjQwMDAsXG4gICAgbGV2ZWxMb2FkaW5nVGltZU91dDogMTAwMDAsXG4gICAgbGV2ZWxMb2FkaW5nTWF4UmV0cnk6IDQsXG4gICAgbGV2ZWxMb2FkaW5nUmV0cnlEZWxheTogMTAwMCxcbiAgICBsZXZlbExvYWRpbmdNYXhSZXRyeVRpbWVvdXQ6IDY0MDAwLFxuICAgIGZyYWdMb2FkaW5nVGltZU91dDogMjAwMDAsXG4gICAgZnJhZ0xvYWRpbmdNYXhSZXRyeTogNixcbiAgICBmcmFnTG9hZGluZ1JldHJ5RGVsYXk6IDEwMDAsXG4gICAgZnJhZ0xvYWRpbmdNYXhSZXRyeVRpbWVvdXQ6IDY0MDAwXG4gIH0sIHRpbWVsaW5lQ29uZmlnKCkpLCB7fSwge1xuICAgIHN1YnRpdGxlU3RyZWFtQ29udHJvbGxlcjogU3VidGl0bGVTdHJlYW1Db250cm9sbGVyICxcbiAgICBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlcjogU3VidGl0bGVUcmFja0NvbnRyb2xsZXIgLFxuICAgIHRpbWVsaW5lQ29udHJvbGxlcjogVGltZWxpbmVDb250cm9sbGVyICxcbiAgICBhdWRpb1N0cmVhbUNvbnRyb2xsZXI6IEF1ZGlvU3RyZWFtQ29udHJvbGxlciAsXG4gICAgYXVkaW9UcmFja0NvbnRyb2xsZXI6IEF1ZGlvVHJhY2tDb250cm9sbGVyICxcbiAgICBlbWVDb250cm9sbGVyOiBFTUVDb250cm9sbGVyICxcbiAgICBjbWNkQ29udHJvbGxlcjogQ01DRENvbnRyb2xsZXIgLFxuICAgIGNvbnRlbnRTdGVlcmluZ0NvbnRyb2xsZXI6IENvbnRlbnRTdGVlcmluZ0NvbnRyb2xsZXIgLFxuICAgIGludGVyc3RpdGlhbHNDb250cm9sbGVyOiBJbnRlcnN0aXRpYWxzQ29udHJvbGxlciBcbiAgfSk7XG4gIGZ1bmN0aW9uIHRpbWVsaW5lQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjdWVIYW5kbGVyOiBDdWVzLFxuICAgICAgLy8gdXNlZCBieSB0aW1lbGluZS1jb250cm9sbGVyXG4gICAgICBlbmFibGVXZWJWVFQ6IHRydWUsXG4gICAgICAvLyB1c2VkIGJ5IHRpbWVsaW5lLWNvbnRyb2xsZXJcbiAgICAgIGVuYWJsZUlNU0MxOiB0cnVlLFxuICAgICAgLy8gdXNlZCBieSB0aW1lbGluZS1jb250cm9sbGVyXG4gICAgICBlbmFibGVDRUE3MDhDYXB0aW9uczogdHJ1ZSxcbiAgICAgIC8vIHVzZWQgYnkgdGltZWxpbmUtY29udHJvbGxlclxuICAgICAgY2FwdGlvbnNUZXh0VHJhY2sxTGFiZWw6ICdFbmdsaXNoJyxcbiAgICAgIC8vIHVzZWQgYnkgdGltZWxpbmUtY29udHJvbGxlclxuICAgICAgY2FwdGlvbnNUZXh0VHJhY2sxTGFuZ3VhZ2VDb2RlOiAnZW4nLFxuICAgICAgLy8gdXNlZCBieSB0aW1lbGluZS1jb250cm9sbGVyXG4gICAgICBjYXB0aW9uc1RleHRUcmFjazJMYWJlbDogJ1NwYW5pc2gnLFxuICAgICAgLy8gdXNlZCBieSB0aW1lbGluZS1jb250cm9sbGVyXG4gICAgICBjYXB0aW9uc1RleHRUcmFjazJMYW5ndWFnZUNvZGU6ICdlcycsXG4gICAgICAvLyB1c2VkIGJ5IHRpbWVsaW5lLWNvbnRyb2xsZXJcbiAgICAgIGNhcHRpb25zVGV4dFRyYWNrM0xhYmVsOiAnVW5rbm93biBDQycsXG4gICAgICAvLyB1c2VkIGJ5IHRpbWVsaW5lLWNvbnRyb2xsZXJcbiAgICAgIGNhcHRpb25zVGV4dFRyYWNrM0xhbmd1YWdlQ29kZTogJycsXG4gICAgICAvLyB1c2VkIGJ5IHRpbWVsaW5lLWNvbnRyb2xsZXJcbiAgICAgIGNhcHRpb25zVGV4dFRyYWNrNExhYmVsOiAnVW5rbm93biBDQycsXG4gICAgICAvLyB1c2VkIGJ5IHRpbWVsaW5lLWNvbnRyb2xsZXJcbiAgICAgIGNhcHRpb25zVGV4dFRyYWNrNExhbmd1YWdlQ29kZTogJycsXG4gICAgICAvLyB1c2VkIGJ5IHRpbWVsaW5lLWNvbnRyb2xsZXJcbiAgICAgIHJlbmRlclRleHRUcmFja3NOYXRpdmVseTogdHJ1ZVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZnVuY3Rpb24gbWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgdXNlckNvbmZpZywgbG9nZ2VyKSB7XG4gICAgaWYgKCh1c2VyQ29uZmlnLmxpdmVTeW5jRHVyYXRpb25Db3VudCB8fCB1c2VyQ29uZmlnLmxpdmVNYXhMYXRlbmN5RHVyYXRpb25Db3VudCkgJiYgKHVzZXJDb25maWcubGl2ZVN5bmNEdXJhdGlvbiB8fCB1c2VyQ29uZmlnLmxpdmVNYXhMYXRlbmN5RHVyYXRpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGhscy5qcyBjb25maWc6IGRvbid0IG1peCB1cCBsaXZlU3luY0R1cmF0aW9uQ291bnQvbGl2ZU1heExhdGVuY3lEdXJhdGlvbkNvdW50IGFuZCBsaXZlU3luY0R1cmF0aW9uL2xpdmVNYXhMYXRlbmN5RHVyYXRpb25cIik7XG4gICAgfVxuICAgIGlmICh1c2VyQ29uZmlnLmxpdmVNYXhMYXRlbmN5RHVyYXRpb25Db3VudCAhPT0gdW5kZWZpbmVkICYmICh1c2VyQ29uZmlnLmxpdmVTeW5jRHVyYXRpb25Db3VudCA9PT0gdW5kZWZpbmVkIHx8IHVzZXJDb25maWcubGl2ZU1heExhdGVuY3lEdXJhdGlvbkNvdW50IDw9IHVzZXJDb25maWcubGl2ZVN5bmNEdXJhdGlvbkNvdW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGhscy5qcyBjb25maWc6IFwibGl2ZU1heExhdGVuY3lEdXJhdGlvbkNvdW50XCIgbXVzdCBiZSBncmVhdGVyIHRoYW4gXCJsaXZlU3luY0R1cmF0aW9uQ291bnRcIicpO1xuICAgIH1cbiAgICBpZiAodXNlckNvbmZpZy5saXZlTWF4TGF0ZW5jeUR1cmF0aW9uICE9PSB1bmRlZmluZWQgJiYgKHVzZXJDb25maWcubGl2ZVN5bmNEdXJhdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHVzZXJDb25maWcubGl2ZU1heExhdGVuY3lEdXJhdGlvbiA8PSB1c2VyQ29uZmlnLmxpdmVTeW5jRHVyYXRpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgaGxzLmpzIGNvbmZpZzogXCJsaXZlTWF4TGF0ZW5jeUR1cmF0aW9uXCIgbXVzdCBiZSBncmVhdGVyIHRoYW4gXCJsaXZlU3luY0R1cmF0aW9uXCInKTtcbiAgICB9XG4gICAgdmFyIGRlZmF1bHRzQ29weSA9IGRlZXBDcHkoZGVmYXVsdENvbmZpZyk7XG5cbiAgICAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGRlcHJlY2F0ZWQgY29uZmlnIHZhbHVlc1xuICAgIHZhciBkZXByZWNhdGVkU2V0dGluZ1R5cGVzID0gWydtYW5pZmVzdCcsICdsZXZlbCcsICdmcmFnJ107XG4gICAgdmFyIGRlcHJlY2F0ZWRTZXR0aW5ncyA9IFsnVGltZU91dCcsICdNYXhSZXRyeScsICdSZXRyeURlbGF5JywgJ01heFJldHJ5VGltZW91dCddO1xuICAgIGRlcHJlY2F0ZWRTZXR0aW5nVHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdmFyIHBvbGljeU5hbWUgPSAodHlwZSA9PT0gJ2xldmVsJyA/ICdwbGF5bGlzdCcgOiB0eXBlKSArIFwiTG9hZFBvbGljeVwiO1xuICAgICAgdmFyIHBvbGljeU5vdFNldCA9IHVzZXJDb25maWdbcG9saWN5TmFtZV0gPT09IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXBvcnQgPSBbXTtcbiAgICAgIGRlcHJlY2F0ZWRTZXR0aW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChzZXR0aW5nKSB7XG4gICAgICAgIHZhciBkZXByZWNhdGVkU2V0dGluZyA9IHR5cGUgKyBcIkxvYWRpbmdcIiArIHNldHRpbmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHVzZXJDb25maWdbZGVwcmVjYXRlZFNldHRpbmddO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiBwb2xpY3lOb3RTZXQpIHtcbiAgICAgICAgICByZXBvcnQucHVzaChkZXByZWNhdGVkU2V0dGluZyk7XG4gICAgICAgICAgdmFyIHNldHRpbmdzID0gZGVmYXVsdHNDb3B5W3BvbGljeU5hbWVdLmRlZmF1bHQ7XG4gICAgICAgICAgdXNlckNvbmZpZ1twb2xpY3lOYW1lXSA9IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHNldHRpbmdzXG4gICAgICAgICAgfTtcbiAgICAgICAgICBzd2l0Y2ggKHNldHRpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgJ1RpbWVPdXQnOlxuICAgICAgICAgICAgICBzZXR0aW5ncy5tYXhMb2FkVGltZU1zID0gdmFsdWU7XG4gICAgICAgICAgICAgIHNldHRpbmdzLm1heFRpbWVUb0ZpcnN0Qnl0ZU1zID0gdmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTWF4UmV0cnknOlxuICAgICAgICAgICAgICBzZXR0aW5ncy5lcnJvclJldHJ5Lm1heE51bVJldHJ5ID0gdmFsdWU7XG4gICAgICAgICAgICAgIHNldHRpbmdzLnRpbWVvdXRSZXRyeS5tYXhOdW1SZXRyeSA9IHZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1JldHJ5RGVsYXknOlxuICAgICAgICAgICAgICBzZXR0aW5ncy5lcnJvclJldHJ5LnJldHJ5RGVsYXlNcyA9IHZhbHVlO1xuICAgICAgICAgICAgICBzZXR0aW5ncy50aW1lb3V0UmV0cnkucmV0cnlEZWxheU1zID0gdmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTWF4UmV0cnlUaW1lb3V0JzpcbiAgICAgICAgICAgICAgc2V0dGluZ3MuZXJyb3JSZXRyeS5tYXhSZXRyeURlbGF5TXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgc2V0dGluZ3MudGltZW91dFJldHJ5Lm1heFJldHJ5RGVsYXlNcyA9IHZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHJlcG9ydC5sZW5ndGgpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJobHMuanMgY29uZmlnOiBcXFwiXCIgKyByZXBvcnQuam9pbignXCIsIFwiJykgKyBcIlxcXCIgc2V0dGluZyhzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIFxcXCJcIiArIHBvbGljeU5hbWUgKyBcIlxcXCI6IFwiICsgc3RyaW5naWZ5KHVzZXJDb25maWdbcG9saWN5TmFtZV0pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGRlZmF1bHRzQ29weSksIHVzZXJDb25maWcpO1xuICB9XG4gIGZ1bmN0aW9uIGRlZXBDcHkob2JqKSB7XG4gICAgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLm1hcChkZWVwQ3B5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBkZWVwQ3B5KG9ialtrZXldKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmdW5jdGlvbiBlbmFibGVTdHJlYW1pbmdNb2RlKGNvbmZpZywgbG9nZ2VyKSB7XG4gICAgdmFyIGN1cnJlbnRMb2FkZXIgPSBjb25maWcubG9hZGVyO1xuICAgIGlmIChjdXJyZW50TG9hZGVyICE9PSBGZXRjaExvYWRlciAmJiBjdXJyZW50TG9hZGVyICE9PSBYaHJMb2FkZXIpIHtcbiAgICAgIC8vIElmIGEgZGV2ZWxvcGVyIGhhcyBjb25maWd1cmVkIHRoZWlyIG93biBsb2FkZXIsIHJlc3BlY3QgdGhhdCBjaG9pY2VcbiAgICAgIGxvZ2dlci5sb2coJ1tjb25maWddOiBDdXN0b20gbG9hZGVyIGRldGVjdGVkLCBjYW5ub3QgZW5hYmxlIHByb2dyZXNzaXZlIHN0cmVhbWluZycpO1xuICAgICAgY29uZmlnLnByb2dyZXNzaXZlID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjYW5TdHJlYW1Qcm9ncmVzc2l2ZWx5ID0gZmV0Y2hTdXBwb3J0ZWQoKTtcbiAgICAgIGlmIChjYW5TdHJlYW1Qcm9ncmVzc2l2ZWx5KSB7XG4gICAgICAgIGNvbmZpZy5sb2FkZXIgPSBGZXRjaExvYWRlcjtcbiAgICAgICAgY29uZmlnLnByb2dyZXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLmVuYWJsZVNvZnR3YXJlQUVTID0gdHJ1ZTtcbiAgICAgICAgbG9nZ2VyLmxvZygnW2NvbmZpZ106IFByb2dyZXNzaXZlIHN0cmVhbWluZyBlbmFibGVkLCB1c2luZyBGZXRjaExvYWRlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBNQVhfU1RBUlRfR0FQX0pVTVAgPSAyLjA7XG4gIHZhciBTS0lQX0JVRkZFUl9IT0xFX1NURVBfU0VDT05EUyA9IDAuMTtcbiAgdmFyIFNLSVBfQlVGRkVSX1JBTkdFX1NUQVJUID0gMC4wNTtcbiAgdmFyIFRJQ0tfSU5URVJWQUwkMSA9IDEwMDtcbiAgdmFyIEdhcENvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UYXNrTG9vcCkge1xuICAgIGZ1bmN0aW9uIEdhcENvbnRyb2xsZXIoaGxzLCBmcmFnbWVudFRyYWNrZXIpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF90aGlzID0gX1Rhc2tMb29wLmNhbGwodGhpcywgJ2dhcC1jb250cm9sbGVyJywgaGxzLmxvZ2dlcikgfHwgdGhpcztcbiAgICAgIF90aGlzLmhscyA9IG51bGw7XG4gICAgICBfdGhpcy5mcmFnbWVudFRyYWNrZXIgPSBudWxsO1xuICAgICAgX3RoaXMubWVkaWEgPSBudWxsO1xuICAgICAgX3RoaXMubWVkaWFTb3VyY2UgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5udWRnZVJldHJ5ID0gMDtcbiAgICAgIF90aGlzLnN0YWxsUmVwb3J0ZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLnN0YWxsZWQgPSBudWxsO1xuICAgICAgX3RoaXMubW92ZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLnNlZWtpbmcgPSBmYWxzZTtcbiAgICAgIF90aGlzLmJ1ZmZlcmVkID0ge307XG4gICAgICBfdGhpcy5sYXN0Q3VycmVudFRpbWUgPSAwO1xuICAgICAgX3RoaXMuZW5kZWQgPSAwO1xuICAgICAgX3RoaXMud2FpdGluZyA9IDA7XG4gICAgICBfdGhpcy5vbk1lZGlhUGxheWluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuZW5kZWQgPSAwO1xuICAgICAgICBfdGhpcy53YWl0aW5nID0gMDtcbiAgICAgIH07XG4gICAgICBfdGhpcy5vbk1lZGlhV2FpdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzJG1lZGlhO1xuICAgICAgICBpZiAoKF90aGlzJG1lZGlhID0gX3RoaXMubWVkaWEpICE9IG51bGwgJiYgX3RoaXMkbWVkaWEuc2Vla2luZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy53YWl0aW5nID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgX3RoaXMudGljaygpO1xuICAgICAgfTtcbiAgICAgIF90aGlzLm9uTWVkaWFFbmRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLmhscykge1xuICAgICAgICAgIHZhciBfdGhpcyRtZWRpYTI7XG4gICAgICAgICAgLy8gZW5kZWQgaXMgc2V0IHdoZW4gdHJpZ2dlcmluZyBNRURJQV9FTkRFRCBzbyB0aGF0IHdlIGRvIG5vdCB0cmlnZ2VyIGl0IGFnYWluIG9uIHN0YWxsIG9yIG9uIHRpY2sgd2l0aCBtZWRpYS5lbmRlZFxuICAgICAgICAgIF90aGlzLmVuZGVkID0gKChfdGhpcyRtZWRpYTIgPSBfdGhpcy5tZWRpYSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG1lZGlhMi5jdXJyZW50VGltZSkgfHwgMTtcbiAgICAgICAgICBfdGhpcy5obHMudHJpZ2dlcihFdmVudHMuTUVESUFfRU5ERUQsIHtcbiAgICAgICAgICAgIHN0YWxsZWQ6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBfdGhpcy5obHMgPSBobHM7XG4gICAgICBfdGhpcy5mcmFnbWVudFRyYWNrZXIgPSBmcmFnbWVudFRyYWNrZXI7XG4gICAgICBfdGhpcy5yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBfaW5oZXJpdHNMb29zZShHYXBDb250cm9sbGVyLCBfVGFza0xvb3ApO1xuICAgIHZhciBfcHJvdG8gPSBHYXBDb250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGlmIChobHMpIHtcbiAgICAgICAgaGxzLm9uKEV2ZW50cy5NRURJQV9BVFRBQ0hFRCwgdGhpcy5vbk1lZGlhQXR0YWNoZWQsIHRoaXMpO1xuICAgICAgICBobHMub24oRXZlbnRzLk1FRElBX0RFVEFDSElORywgdGhpcy5vbk1lZGlhRGV0YWNoaW5nLCB0aGlzKTtcbiAgICAgICAgaGxzLm9uKEV2ZW50cy5CVUZGRVJfQVBQRU5ERUQsIHRoaXMub25CdWZmZXJBcHBlbmRlZCwgdGhpcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8udW5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICBpZiAoaGxzKSB7XG4gICAgICAgIGhscy5vZmYoRXZlbnRzLk1FRElBX0FUVEFDSEVELCB0aGlzLm9uTWVkaWFBdHRhY2hlZCwgdGhpcyk7XG4gICAgICAgIGhscy5vZmYoRXZlbnRzLk1FRElBX0RFVEFDSElORywgdGhpcy5vbk1lZGlhRGV0YWNoaW5nLCB0aGlzKTtcbiAgICAgICAgaGxzLm9mZihFdmVudHMuQlVGRkVSX0FQUEVOREVELCB0aGlzLm9uQnVmZmVyQXBwZW5kZWQsIHRoaXMpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgX1Rhc2tMb29wLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICB0aGlzLnVucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMubWVkaWEgPSB0aGlzLmhscyA9IHRoaXMuZnJhZ21lbnRUcmFja2VyID0gbnVsbDtcbiAgICAgIHRoaXMubWVkaWFTb3VyY2UgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYUF0dGFjaGVkID0gZnVuY3Rpb24gb25NZWRpYUF0dGFjaGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLnNldEludGVydmFsKFRJQ0tfSU5URVJWQUwkMSk7XG4gICAgICB0aGlzLm1lZGlhU291cmNlID0gZGF0YS5tZWRpYVNvdXJjZTtcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWEgPSBkYXRhLm1lZGlhO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihtZWRpYSwgJ3BsYXlpbmcnLCB0aGlzLm9uTWVkaWFQbGF5aW5nKTtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIobWVkaWEsICd3YWl0aW5nJywgdGhpcy5vbk1lZGlhV2FpdGluZyk7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKG1lZGlhLCAnZW5kZWQnLCB0aGlzLm9uTWVkaWFFbmRlZCk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYURldGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFEZXRhY2hpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHRoaXMuY2xlYXJJbnRlcnZhbCgpO1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKG1lZGlhLCAncGxheWluZycsIHRoaXMub25NZWRpYVBsYXlpbmcpO1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKG1lZGlhLCAnd2FpdGluZycsIHRoaXMub25NZWRpYVdhaXRpbmcpO1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKG1lZGlhLCAnZW5kZWQnLCB0aGlzLm9uTWVkaWFFbmRlZCk7XG4gICAgICAgIHRoaXMubWVkaWEgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5tZWRpYVNvdXJjZSA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIF9wcm90by5vbkJ1ZmZlckFwcGVuZGVkID0gZnVuY3Rpb24gb25CdWZmZXJBcHBlbmRlZChldmVudCwgZGF0YSkge1xuICAgICAgdGhpcy5idWZmZXJlZCA9IGRhdGEudGltZVJhbmdlcztcbiAgICB9O1xuICAgIF9wcm90by50aWNrID0gZnVuY3Rpb24gdGljaygpIHtcbiAgICAgIHZhciBfdGhpcyRtZWRpYTM7XG4gICAgICBpZiAoISgoX3RoaXMkbWVkaWEzID0gdGhpcy5tZWRpYSkgIT0gbnVsbCAmJiBfdGhpcyRtZWRpYTMucmVhZHlTdGF0ZSkgfHwgIXRoaXMuaGFzQnVmZmVyZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy5tZWRpYS5jdXJyZW50VGltZTtcbiAgICAgIHRoaXMucG9sbChjdXJyZW50VGltZSwgdGhpcy5sYXN0Q3VycmVudFRpbWUpO1xuICAgICAgdGhpcy5sYXN0Q3VycmVudFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIHBsYXloZWFkIGlzIHN0dWNrIHdpdGhpbiBhIGdhcCwgYW5kIGlmIHNvLCBhdHRlbXB0cyB0byBmcmVlIGl0LlxuICAgICAqIEEgZ2FwIGlzIGFuIHVuYnVmZmVyZWQgcmFuZ2UgYmV0d2VlbiB0d28gYnVmZmVyZWQgcmFuZ2VzIChvciB0aGUgc3RhcnQgYW5kIHRoZSBmaXJzdCBidWZmZXJlZCByYW5nZSkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGFzdEN1cnJlbnRUaW1lIC0gUHJldmlvdXNseSByZWFkIHBsYXloZWFkIHBvc2l0aW9uXG4gICAgICovO1xuICAgIF9wcm90by5wb2xsID0gZnVuY3Rpb24gcG9sbChjdXJyZW50VGltZSwgbGFzdEN1cnJlbnRUaW1lKSB7XG4gICAgICB2YXIgX3RoaXMkaGxzLCBfdGhpcyRobHMyO1xuICAgICAgdmFyIGNvbmZpZyA9IChfdGhpcyRobHMgPSB0aGlzLmhscykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGhscy5jb25maWc7XG4gICAgICBpZiAoIWNvbmZpZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgICAgaWYgKCFtZWRpYSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc2Vla2luZyA9IG1lZGlhLnNlZWtpbmc7XG4gICAgICB2YXIgc2Vla2VkID0gdGhpcy5zZWVraW5nICYmICFzZWVraW5nO1xuICAgICAgdmFyIGJlZ2luU2VlayA9ICF0aGlzLnNlZWtpbmcgJiYgc2Vla2luZztcbiAgICAgIHZhciBwYXVzZWRFbmRlZE9ySGFsdGVkID0gbWVkaWEucGF1c2VkICYmICFzZWVraW5nIHx8IG1lZGlhLmVuZGVkIHx8IG1lZGlhLnBsYXliYWNrUmF0ZSA9PT0gMDtcbiAgICAgIHRoaXMuc2Vla2luZyA9IHNlZWtpbmc7XG5cbiAgICAgIC8vIFRoZSBwbGF5aGVhZCBpcyBtb3ZpbmcsIG5vLW9wXG4gICAgICBpZiAoY3VycmVudFRpbWUgIT09IGxhc3RDdXJyZW50VGltZSkge1xuICAgICAgICBpZiAobGFzdEN1cnJlbnRUaW1lKSB7XG4gICAgICAgICAgdGhpcy5lbmRlZCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb3ZlZCA9IHRydWU7XG4gICAgICAgIGlmICghc2Vla2luZykge1xuICAgICAgICAgIHRoaXMubnVkZ2VSZXRyeSA9IDA7XG4gICAgICAgICAgLy8gV2hlbiBjcm9zc2luZyBiZXR3ZWVuIGJ1ZmZlcmVkIHZpZGVvIHRpbWUgcmFuZ2VzLCBidXQgbm90IGF1ZGlvLCBmbHVzaCBwaXBlbGluZSB3aXRoIHNlZWsgKENocm9tZSlcbiAgICAgICAgICBpZiAoY29uZmlnLm51ZGdlT25WaWRlb0hvbGUgJiYgIXBhdXNlZEVuZGVkT3JIYWx0ZWQgJiYgY3VycmVudFRpbWUgPiBsYXN0Q3VycmVudFRpbWUpIHtcbiAgICAgICAgICAgIHRoaXMubnVkZ2VPblZpZGVvSG9sZShjdXJyZW50VGltZSwgbGFzdEN1cnJlbnRUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMud2FpdGluZyA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuc3RhbGxSZXNvbHZlZChjdXJyZW50VGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBDbGVhciBzdGFsbGVkIHN0YXRlIHdoZW4gYmVnaW5uaW5nIG9yIGZpbmlzaGluZyBzZWVraW5nIHNvIHRoYXQgd2UgZG9uJ3QgcmVwb3J0IHN0YWxscyBjb21pbmcgb3V0IG9mIGEgc2Vla1xuICAgICAgaWYgKGJlZ2luU2VlayB8fCBzZWVrZWQpIHtcbiAgICAgICAgaWYgKHNlZWtlZCkge1xuICAgICAgICAgIHRoaXMuc3RhbGxSZXNvbHZlZChjdXJyZW50VGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcGxheWhlYWQgc2hvdWxkIG5vdCBiZSBtb3ZpbmdcbiAgICAgIGlmIChwYXVzZWRFbmRlZE9ySGFsdGVkKSB7XG4gICAgICAgIHRoaXMubnVkZ2VSZXRyeSA9IDA7XG4gICAgICAgIHRoaXMuc3RhbGxSZXNvbHZlZChjdXJyZW50VGltZSk7XG4gICAgICAgIC8vIEZpcmUgTUVESUFfRU5ERUQgdG8gd29ya2Fyb3VuZCBldmVudCBub3QgYmVpbmcgZGlzcGF0Y2hlZCBieSBicm93c2VyXG4gICAgICAgIGlmICghdGhpcy5lbmRlZCAmJiBtZWRpYS5lbmRlZCAmJiB0aGlzLmhscykge1xuICAgICAgICAgIHRoaXMuZW5kZWQgPSBjdXJyZW50VGltZSB8fCAxO1xuICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLk1FRElBX0VOREVELCB7XG4gICAgICAgICAgICBzdGFsbGVkOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghQnVmZmVySGVscGVyLmdldEJ1ZmZlcmVkKG1lZGlhKS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5udWRnZVJldHJ5ID0gMDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXNvbHZlIHN0YWxscyBhdCBidWZmZXIgaG9sZXMgdXNpbmcgdGhlIG1haW4gYnVmZmVyLCB3aG9zZSByYW5nZXMgYXJlIHRoZSBpbnRlcnNlY3Rpb25zIG9mIHRoZSBBL1Ygc291cmNlYnVmZmVyc1xuICAgICAgdmFyIGJ1ZmZlckluZm8gPSBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyhtZWRpYSwgY3VycmVudFRpbWUsIDApO1xuICAgICAgdmFyIG5leHRTdGFydCA9IGJ1ZmZlckluZm8ubmV4dFN0YXJ0IHx8IDA7XG4gICAgICB2YXIgZnJhZ21lbnRUcmFja2VyID0gdGhpcy5mcmFnbWVudFRyYWNrZXI7XG4gICAgICBpZiAoc2Vla2luZyAmJiBmcmFnbWVudFRyYWNrZXIgJiYgdGhpcy5obHMpIHtcbiAgICAgICAgLy8gSXMgdGhlcmUgYSBmcmFnbWVudCBsb2FkaW5nL3BhcnNpbmcvYXBwZW5kaW5nIGJlZm9yZSBjdXJyZW50VGltZT9cbiAgICAgICAgdmFyIGluRmxpZ2h0RGVwZW5kZW5jeSA9IGdldEluRmxpZ2h0RGVwZW5kZW5jeSh0aGlzLmhscy5pbkZsaWdodEZyYWdtZW50cywgY3VycmVudFRpbWUpO1xuXG4gICAgICAgIC8vIFdhaXRpbmcgZm9yIHNlZWtpbmcgaW4gYSBidWZmZXJlZCByYW5nZSB0byBjb21wbGV0ZVxuICAgICAgICB2YXIgaGFzRW5vdWdoQnVmZmVyID0gYnVmZmVySW5mby5sZW4gPiBNQVhfU1RBUlRfR0FQX0pVTVA7XG4gICAgICAgIC8vIE5leHQgYnVmZmVyZWQgcmFuZ2UgaXMgdG9vIGZhciBhaGVhZCB0byBqdW1wIHRvIHdoaWxlIHN0aWxsIHNlZWtpbmdcbiAgICAgICAgdmFyIG5vQnVmZmVySG9sZSA9ICFuZXh0U3RhcnQgfHwgaW5GbGlnaHREZXBlbmRlbmN5IHx8IG5leHRTdGFydCAtIGN1cnJlbnRUaW1lID4gTUFYX1NUQVJUX0dBUF9KVU1QICYmICFmcmFnbWVudFRyYWNrZXIuZ2V0UGFydGlhbEZyYWdtZW50KGN1cnJlbnRUaW1lKTtcbiAgICAgICAgaWYgKGhhc0Vub3VnaEJ1ZmZlciB8fCBub0J1ZmZlckhvbGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzZXQgbW92ZWQgc3RhdGUgd2hlbiBzZWVraW5nIHRvIGEgcG9pbnQgaW4gb3IgYmVmb3JlIGEgZ2FwL2hvbGVcbiAgICAgICAgdGhpcy5tb3ZlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBTa2lwIHN0YXJ0IGdhcHMgaWYgd2UgaGF2ZW4ndCBwbGF5ZWQsIGJ1dCB0aGUgbGFzdCBwb2xsIGRldGVjdGVkIHRoZSBzdGFydCBvZiBhIHN0YWxsXG4gICAgICAvLyBUaGUgYWRkaXRpb24gcG9sbCBnaXZlcyB0aGUgYnJvd3NlciBhIGNoYW5jZSB0byBqdW1wIHRoZSBnYXAgZm9yIHVzXG4gICAgICB2YXIgbGV2ZWxEZXRhaWxzID0gKF90aGlzJGhsczIgPSB0aGlzLmhscykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGhsczIubGF0ZXN0TGV2ZWxEZXRhaWxzO1xuICAgICAgaWYgKCF0aGlzLm1vdmVkICYmIHRoaXMuc3RhbGxlZCAhPT0gbnVsbCAmJiBmcmFnbWVudFRyYWNrZXIpIHtcbiAgICAgICAgLy8gVGhlcmUgaXMgbm8gcGxheWFibGUgYnVmZmVyIChzZWVrZWQsIHdhaXRpbmcgZm9yIGJ1ZmZlcilcbiAgICAgICAgdmFyIGlzQnVmZmVyZWQgPSBidWZmZXJJbmZvLmxlbiA+IDA7XG4gICAgICAgIGlmICghaXNCdWZmZXJlZCAmJiAhbmV4dFN0YXJ0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEp1bXAgc3RhcnQgZ2FwcyB3aXRoaW4ganVtcCB0aHJlc2hvbGRcbiAgICAgICAgdmFyIHN0YXJ0SnVtcCA9IE1hdGgubWF4KG5leHRTdGFydCwgYnVmZmVySW5mby5zdGFydCB8fCAwKSAtIGN1cnJlbnRUaW1lO1xuXG4gICAgICAgIC8vIFdoZW4gam9pbmluZyBhIGxpdmUgc3RyZWFtIHdpdGggYXVkaW8gdHJhY2tzLCBhY2NvdW50IGZvciBsaXZlIHBsYXlsaXN0IHdpbmRvdyBzbGlkaW5nIGJ5IGFsbG93aW5nXG4gICAgICAgIC8vIGEgbGFyZ2VyIGp1bXAgb3ZlciBzdGFydCBnYXBzIGNhdXNlZCBieSB0aGUgYXVkaW8tc3RyZWFtLWNvbnRyb2xsZXIgYnVmZmVyaW5nIGEgc3RhcnQgZnJhZ21lbnRcbiAgICAgICAgLy8gdGhhdCBiZWdpbnMgb3ZlciAxIHRhcmdldCBkdXJhdGlvbiBhZnRlciB0aGUgdmlkZW8gc3RhcnQgcG9zaXRpb24uXG4gICAgICAgIHZhciBpc0xpdmUgPSAhIShsZXZlbERldGFpbHMgIT0gbnVsbCAmJiBsZXZlbERldGFpbHMubGl2ZSk7XG4gICAgICAgIHZhciBtYXhTdGFydEdhcEp1bXAgPSBpc0xpdmUgPyBsZXZlbERldGFpbHMudGFyZ2V0ZHVyYXRpb24gKiAyIDogTUFYX1NUQVJUX0dBUF9KVU1QO1xuICAgICAgICB2YXIgcGFydGlhbE9yR2FwID0gZnJhZ21lbnRUcmFja2VyLmdldFBhcnRpYWxGcmFnbWVudChjdXJyZW50VGltZSk7XG4gICAgICAgIGlmIChzdGFydEp1bXAgPiAwICYmIChzdGFydEp1bXAgPD0gbWF4U3RhcnRHYXBKdW1wIHx8IHBhcnRpYWxPckdhcCkpIHtcbiAgICAgICAgICBpZiAoIW1lZGlhLnBhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5fdHJ5U2tpcEJ1ZmZlckhvbGUocGFydGlhbE9yR2FwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFN0YXJ0IHRyYWNraW5nIHN0YWxsIHRpbWVcbiAgICAgIHZhciBkZXRlY3RTdGFsbFdpdGhDdXJyZW50VGltZU1zID0gY29uZmlnLmRldGVjdFN0YWxsV2l0aEN1cnJlbnRUaW1lTXM7XG4gICAgICB2YXIgdG5vdyA9IHNlbGYucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICB2YXIgdFdhaXRpbmcgPSB0aGlzLndhaXRpbmc7XG4gICAgICB2YXIgc3RhbGxlZCA9IHRoaXMuc3RhbGxlZDtcbiAgICAgIGlmIChzdGFsbGVkID09PSBudWxsKSB7XG4gICAgICAgIC8vIFVzZSB0aW1lIG9mIHJlY2VudCBcIndhaXRpbmdcIiBldmVudFxuICAgICAgICBpZiAodFdhaXRpbmcgPiAwICYmIHRub3cgLSB0V2FpdGluZyA8IGRldGVjdFN0YWxsV2l0aEN1cnJlbnRUaW1lTXMpIHtcbiAgICAgICAgICBzdGFsbGVkID0gdGhpcy5zdGFsbGVkID0gdFdhaXRpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zdGFsbGVkID0gdG5vdztcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBzdGFsbGVkRHVyYXRpb24gPSB0bm93IC0gc3RhbGxlZDtcbiAgICAgIGlmICghc2Vla2luZyAmJiAoc3RhbGxlZER1cmF0aW9uID49IGRldGVjdFN0YWxsV2l0aEN1cnJlbnRUaW1lTXMgfHwgdFdhaXRpbmcpICYmIHRoaXMuaGxzKSB7XG4gICAgICAgIHZhciBfdGhpcyRtZWRpYVNvdXJjZTtcbiAgICAgICAgLy8gRGlzcGF0Y2ggTUVESUFfRU5ERUQgd2hlbiBtZWRpYS5lbmRlZC9lbmRlZCBldmVudCBpcyBub3Qgc2lnbmFsbGVkIGF0IGVuZCBvZiBzdHJlYW1cbiAgICAgICAgaWYgKCgoX3RoaXMkbWVkaWFTb3VyY2UgPSB0aGlzLm1lZGlhU291cmNlKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkbWVkaWFTb3VyY2UucmVhZHlTdGF0ZSkgPT09ICdlbmRlZCcgJiYgIShsZXZlbERldGFpbHMgIT0gbnVsbCAmJiBsZXZlbERldGFpbHMubGl2ZSkgJiYgTWF0aC5hYnMoY3VycmVudFRpbWUgLSAoKGxldmVsRGV0YWlscyA9PSBudWxsID8gdm9pZCAwIDogbGV2ZWxEZXRhaWxzLmVkZ2UpIHx8IDApKSA8IDEpIHtcbiAgICAgICAgICBpZiAodGhpcy5lbmRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmVuZGVkID0gY3VycmVudFRpbWUgfHwgMTtcbiAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5NRURJQV9FTkRFRCwge1xuICAgICAgICAgICAgc3RhbGxlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXBvcnQgc3RhbGxpbmcgYWZ0ZXIgdHJ5aW5nIHRvIGZpeFxuICAgICAgICB0aGlzLl9yZXBvcnRTdGFsbChidWZmZXJJbmZvKTtcbiAgICAgICAgaWYgKCF0aGlzLm1lZGlhIHx8ICF0aGlzLmhscykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGJ1ZmZlcmVkV2l0aEhvbGVzID0gQnVmZmVySGVscGVyLmJ1ZmZlckluZm8obWVkaWEsIGN1cnJlbnRUaW1lLCBjb25maWcubWF4QnVmZmVySG9sZSk7XG4gICAgICB0aGlzLl90cnlGaXhCdWZmZXJTdGFsbChidWZmZXJlZFdpdGhIb2xlcywgc3RhbGxlZER1cmF0aW9uLCBjdXJyZW50VGltZSk7XG4gICAgfTtcbiAgICBfcHJvdG8uc3RhbGxSZXNvbHZlZCA9IGZ1bmN0aW9uIHN0YWxsUmVzb2x2ZWQoY3VycmVudFRpbWUpIHtcbiAgICAgIHZhciBzdGFsbGVkID0gdGhpcy5zdGFsbGVkO1xuICAgICAgaWYgKHN0YWxsZWQgJiYgdGhpcy5obHMpIHtcbiAgICAgICAgdGhpcy5zdGFsbGVkID0gbnVsbDtcbiAgICAgICAgLy8gVGhlIHBsYXloZWFkIGlzIG5vdyBtb3ZpbmcsIGJ1dCB3YXMgcHJldmlvdXNseSBzdGFsbGVkXG4gICAgICAgIGlmICh0aGlzLnN0YWxsUmVwb3J0ZWQpIHtcbiAgICAgICAgICB2YXIgc3RhbGxlZER1cmF0aW9uID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKSAtIHN0YWxsZWQ7XG4gICAgICAgICAgdGhpcy5sb2coXCJwbGF5YmFjayBub3Qgc3R1Y2sgYW55bW9yZSBAXCIgKyBjdXJyZW50VGltZSArIFwiLCBhZnRlciBcIiArIE1hdGgucm91bmQoc3RhbGxlZER1cmF0aW9uKSArIFwibXNcIik7XG4gICAgICAgICAgdGhpcy5zdGFsbFJlcG9ydGVkID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy53YWl0aW5nID0gMDtcbiAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5TVEFMTF9SRVNPTFZFRCwge30pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ubnVkZ2VPblZpZGVvSG9sZSA9IGZ1bmN0aW9uIG51ZGdlT25WaWRlb0hvbGUoY3VycmVudFRpbWUsIGxhc3RDdXJyZW50VGltZSkge1xuICAgICAgdmFyIF90aGlzJGJ1ZmZlcmVkJGF1ZGlvO1xuICAgICAgLy8gQ2hyb21lIHdpbGwgcGxheSBvbmUgc2Vjb25kIHBhc3QgYSBob2xlIGluIHZpZGVvIGJ1ZmZlcmVkIHRpbWUgcmFuZ2VzIHdpdGhvdXQgcmVuZGVyaW5nIGFueSB2aWRlbyBmcm9tIHRoZSBzdWJzZXF1ZW50IHJhbmdlIGFuZCB0aGVuIHN0YWxsIGFzIGxvbmcgYXMgYXVkaW8gaXMgYnVmZmVyZWQ6XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdmlkZW8tZGV2L2hscy5qcy9pc3N1ZXMvNTYzMVxuICAgICAgLy8gaHR0cHM6Ly9pc3N1ZXMuY2hyb21pdW0ub3JnL2lzc3Vlcy80MDI4MDYxMyNjb21tZW50MTBcbiAgICAgIC8vIERldGVjdCB0aGUgcG90ZW50aWFsIGZvciB0aGlzIHNpdHVhdGlvbiBhbmQgcHJvYWN0aXZlbHkgc2VlayB0byBmbHVzaCB0aGUgdmlkZW8gcGlwZWxpbmUgb25jZSB0aGUgcGxheWhlYWQgcGFzc2VzIHRoZSBzdGFydCBvZiB0aGUgdmlkZW8gaG9sZS5cbiAgICAgIC8vIFdoZW4gdGhlcmUgYXJlIGF1ZGlvIGFuZCB2aWRlbyBidWZmZXJzIGFuZCBjdXJyZW50VGltZSBpcyBwYXN0IHRoZSBlbmQgb2YgdGhlIGZpcnN0IHZpZGVvIGJ1ZmZlcmVkIHJhbmdlLi4uXG4gICAgICB2YXIgdmlkZW9Tb3VyY2VCdWZmZXJlZCA9IHRoaXMuYnVmZmVyZWQudmlkZW87XG4gICAgICBpZiAodGhpcy5obHMgJiYgdGhpcy5tZWRpYSAmJiB0aGlzLmZyYWdtZW50VHJhY2tlciAmJiAoX3RoaXMkYnVmZmVyZWQkYXVkaW8gPSB0aGlzLmJ1ZmZlcmVkLmF1ZGlvKSAhPSBudWxsICYmIF90aGlzJGJ1ZmZlcmVkJGF1ZGlvLmxlbmd0aCAmJiB2aWRlb1NvdXJjZUJ1ZmZlcmVkICYmIHZpZGVvU291cmNlQnVmZmVyZWQubGVuZ3RoID4gMSAmJiBjdXJyZW50VGltZSA+IHZpZGVvU291cmNlQnVmZmVyZWQuZW5kKDApKSB7XG4gICAgICAgIC8vIGFuZCBhdWRpbyBpcyBidWZmZXJlZCBhdCB0aGUgcGxheWhlYWRcbiAgICAgICAgdmFyIGF1ZGlvQnVmZmVySW5mbyA9IEJ1ZmZlckhlbHBlci5idWZmZXJlZEluZm8oQnVmZmVySGVscGVyLnRpbWVSYW5nZXNUb0FycmF5KHRoaXMuYnVmZmVyZWQuYXVkaW8pLCBjdXJyZW50VGltZSwgMCk7XG4gICAgICAgIGlmIChhdWRpb0J1ZmZlckluZm8ubGVuID4gMSAmJiBsYXN0Q3VycmVudFRpbWUgPj0gYXVkaW9CdWZmZXJJbmZvLnN0YXJ0KSB7XG4gICAgICAgICAgdmFyIHZpZGVvVGltZXMgPSBCdWZmZXJIZWxwZXIudGltZVJhbmdlc1RvQXJyYXkodmlkZW9Tb3VyY2VCdWZmZXJlZCk7XG4gICAgICAgICAgdmFyIGxhc3RCdWZmZXJlZEluZGV4ID0gQnVmZmVySGVscGVyLmJ1ZmZlcmVkSW5mbyh2aWRlb1RpbWVzLCBsYXN0Q3VycmVudFRpbWUsIDApLmJ1ZmZlcmVkSW5kZXg7XG4gICAgICAgICAgLy8gbnVkZ2Ugd2hlbiBjcm9zc2luZyBpbnRvIGFub3RoZXIgdmlkZW8gYnVmZmVyZWQgcmFuZ2UgKGhvbGUpLlxuICAgICAgICAgIGlmIChsYXN0QnVmZmVyZWRJbmRleCA+IC0xICYmIGxhc3RCdWZmZXJlZEluZGV4IDwgdmlkZW9UaW1lcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyZWRJbmRleCA9IEJ1ZmZlckhlbHBlci5idWZmZXJlZEluZm8odmlkZW9UaW1lcywgY3VycmVudFRpbWUsIDApLmJ1ZmZlcmVkSW5kZXg7XG4gICAgICAgICAgICB2YXIgaG9sZVN0YXJ0ID0gdmlkZW9UaW1lc1tsYXN0QnVmZmVyZWRJbmRleF0uZW5kO1xuICAgICAgICAgICAgdmFyIGhvbGVFbmQgPSB2aWRlb1RpbWVzW2xhc3RCdWZmZXJlZEluZGV4ICsgMV0uc3RhcnQ7XG4gICAgICAgICAgICBpZiAoKGJ1ZmZlcmVkSW5kZXggPT09IC0xIHx8IGJ1ZmZlcmVkSW5kZXggPiBsYXN0QnVmZmVyZWRJbmRleCkgJiYgaG9sZUVuZCAtIGhvbGVTdGFydCA8IDEgJiZcbiAgICAgICAgICAgIC8vIGBtYXhCdWZmZXJIb2xlYCBtYXkgYmUgdG9vIHNtYWxsIGFuZCBzZXR0aW5nIGl0IHRvIDAgc2hvdWxkIG5vdCBkaXNhYmxlIHRoaXMgZmVhdHVyZVxuICAgICAgICAgICAgY3VycmVudFRpbWUgLSBob2xlU3RhcnQgPCAyKSB7XG4gICAgICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIm51ZGdpbmcgcGxheWhlYWQgdG8gZmx1c2ggcGlwZWxpbmUgYWZ0ZXIgdmlkZW8gaG9sZS4gY3VycmVudFRpbWU6IFwiICsgY3VycmVudFRpbWUgKyBcIiBob2xlOiBcIiArIGhvbGVTdGFydCArIFwiIC0+IFwiICsgaG9sZUVuZCArIFwiIGJ1ZmZlcmVkIGluZGV4OiBcIiArIGJ1ZmZlcmVkSW5kZXgpO1xuICAgICAgICAgICAgICB0aGlzLndhcm4oZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgIC8vIE1hZ2ljIG51bWJlciB0byBmbHVzaCB0aGUgcGlwZWxpbmUgd2l0aG91dCBpbnRlcnVwdGlvbiB0byBhdWRpbyBwbGF5YmFjazpcbiAgICAgICAgICAgICAgdGhpcy5tZWRpYS5jdXJyZW50VGltZSArPSAwLjAwMDAwMTtcbiAgICAgICAgICAgICAgdmFyIGZyYWcgPSB0aGlzLmZyYWdtZW50VHJhY2tlci5nZXRQYXJ0aWFsRnJhZ21lbnQoY3VycmVudFRpbWUpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgdmFyIGJ1ZmZlckluZm8gPSBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyh0aGlzLm1lZGlhLCBjdXJyZW50VGltZSwgMCk7XG4gICAgICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5NRURJQV9FUlJPUixcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuQlVGRkVSX1NFRUtfT1ZFUl9IT0xFLFxuICAgICAgICAgICAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICAgICAgcmVhc29uOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgICAgICAgYnVmZmVyOiBidWZmZXJJbmZvLmxlbixcbiAgICAgICAgICAgICAgICBidWZmZXJJbmZvOiBidWZmZXJJbmZvXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVjdHMgYW5kIGF0dGVtcHRzIHRvIGZpeCBrbm93biBidWZmZXIgc3RhbGxpbmcgaXNzdWVzLlxuICAgICAqIEBwYXJhbSBidWZmZXJJbmZvIC0gVGhlIHByb3BlcnRpZXMgb2YgdGhlIGN1cnJlbnQgYnVmZmVyLlxuICAgICAqIEBwYXJhbSBzdGFsbGVkRHVyYXRpb25NcyAtIFRoZSBhbW91bnQgb2YgdGltZSBIbHMuanMgaGFzIGJlZW4gc3RhbGxpbmcgZm9yLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovO1xuICAgIF9wcm90by5fdHJ5Rml4QnVmZmVyU3RhbGwgPSBmdW5jdGlvbiBfdHJ5Rml4QnVmZmVyU3RhbGwoYnVmZmVySW5mbywgc3RhbGxlZER1cmF0aW9uTXMsIGN1cnJlbnRUaW1lKSB7XG4gICAgICB2YXIgX3RoaXMkaGxzMywgX3RoaXMkaGxzNDtcbiAgICAgIHZhciBmcmFnbWVudFRyYWNrZXIgPSB0aGlzLmZyYWdtZW50VHJhY2tlcixcbiAgICAgICAgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgICAgdmFyIGNvbmZpZyA9IChfdGhpcyRobHMzID0gdGhpcy5obHMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRobHMzLmNvbmZpZztcbiAgICAgIGlmICghbWVkaWEgfHwgIWZyYWdtZW50VHJhY2tlciB8fCAhY29uZmlnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBsZXZlbERldGFpbHMgPSAoX3RoaXMkaGxzNCA9IHRoaXMuaGxzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkaGxzNC5sYXRlc3RMZXZlbERldGFpbHM7XG4gICAgICB2YXIgcGFydGlhbCA9IGZyYWdtZW50VHJhY2tlci5nZXRQYXJ0aWFsRnJhZ21lbnQoY3VycmVudFRpbWUpO1xuICAgICAgaWYgKHBhcnRpYWwgfHwgbGV2ZWxEZXRhaWxzICE9IG51bGwgJiYgbGV2ZWxEZXRhaWxzLmxpdmUgJiYgY3VycmVudFRpbWUgPCBsZXZlbERldGFpbHMuZnJhZ21lbnRTdGFydCkge1xuICAgICAgICAvLyBUcnkgdG8gc2tpcCBvdmVyIHRoZSBidWZmZXIgaG9sZSBjYXVzZWQgYnkgYSBwYXJ0aWFsIGZyYWdtZW50XG4gICAgICAgIC8vIFRoaXMgbWV0aG9kIGlzbid0IGxpbWl0ZWQgYnkgdGhlIHNpemUgb2YgdGhlIGdhcCBiZXR3ZWVuIGJ1ZmZlcmVkIHJhbmdlc1xuICAgICAgICB2YXIgdGFyZ2V0VGltZSA9IHRoaXMuX3RyeVNraXBCdWZmZXJIb2xlKHBhcnRpYWwpO1xuICAgICAgICAvLyB3ZSByZXR1cm4gaGVyZSBpbiB0aGlzIGNhc2UsIG1lYW5pbmdcbiAgICAgICAgLy8gdGhlIGJyYW5jaCBiZWxvdyBvbmx5IGV4ZWN1dGVzIHdoZW4gd2UgaGF2ZW4ndCBzZWVrZWQgdG8gYSBuZXcgcG9zaXRpb25cbiAgICAgICAgaWYgKHRhcmdldFRpbWUgfHwgIXRoaXMubWVkaWEpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gaWYgd2UgaGF2ZW4ndCBoYWQgdG8gc2tpcCBvdmVyIGEgYnVmZmVyIGhvbGUgb2YgYSBwYXJ0aWFsIGZyYWdtZW50XG4gICAgICAvLyB3ZSBtYXkganVzdCBoYXZlIHRvIFwibnVkZ2VcIiB0aGUgcGxheWxpc3QgYXMgdGhlIGJyb3dzZXIgZGVjb2RpbmcvcmVuZGVyaW5nIGVuZ2luZVxuICAgICAgLy8gbmVlZHMgdG8gY3Jvc3Mgc29tZSBzb3J0IG9mIHRocmVzaG9sZCBjb3ZlcmluZyBhbGwgc291cmNlLWJ1ZmZlcnMgY29udGVudFxuICAgICAgLy8gdG8gc3RhcnQgcGxheWluZyBwcm9wZXJseS5cbiAgICAgIHZhciBidWZmZXJlZFJhbmdlcyA9IGJ1ZmZlckluZm8uYnVmZmVyZWQ7XG4gICAgICB2YXIgYWRqYWNlbnRUcmF2ZXJzYWwgPSB0aGlzLmFkamFjZW50VHJhdmVyc2FsKGJ1ZmZlckluZm8sIGN1cnJlbnRUaW1lKTtcbiAgICAgIGlmICgoYnVmZmVyZWRSYW5nZXMgJiYgYnVmZmVyZWRSYW5nZXMubGVuZ3RoID4gMSAmJiBidWZmZXJJbmZvLmxlbiA+IGNvbmZpZy5tYXhCdWZmZXJIb2xlIHx8IGJ1ZmZlckluZm8ubmV4dFN0YXJ0ICYmIChidWZmZXJJbmZvLm5leHRTdGFydCAtIGN1cnJlbnRUaW1lIDwgY29uZmlnLm1heEJ1ZmZlckhvbGUgfHwgYWRqYWNlbnRUcmF2ZXJzYWwpKSAmJiAoc3RhbGxlZER1cmF0aW9uTXMgPiBjb25maWcuaGlnaEJ1ZmZlcldhdGNoZG9nUGVyaW9kICogMTAwMCB8fCB0aGlzLndhaXRpbmcpKSB7XG4gICAgICAgIHRoaXMud2FybignVHJ5aW5nIHRvIG51ZGdlIHBsYXloZWFkIG92ZXIgYnVmZmVyLWhvbGUnKTtcbiAgICAgICAgLy8gVHJ5IHRvIG51ZGdlIGN1cnJlbnRUaW1lIG92ZXIgYSBidWZmZXIgaG9sZSBpZiB3ZSd2ZSBiZWVuIHN0YWxsaW5nIGZvciB0aGUgY29uZmlndXJlZCBhbW91bnQgb2Ygc2Vjb25kc1xuICAgICAgICAvLyBXZSBvbmx5IHRyeSB0byBqdW1wIHRoZSBob2xlIGlmIGl0J3MgdW5kZXIgdGhlIGNvbmZpZ3VyZWQgc2l6ZVxuICAgICAgICB0aGlzLl90cnlOdWRnZUJ1ZmZlcihidWZmZXJJbmZvKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5hZGphY2VudFRyYXZlcnNhbCA9IGZ1bmN0aW9uIGFkamFjZW50VHJhdmVyc2FsKGJ1ZmZlckluZm8sIGN1cnJlbnRUaW1lKSB7XG4gICAgICB2YXIgZnJhZ21lbnRUcmFja2VyID0gdGhpcy5mcmFnbWVudFRyYWNrZXI7XG4gICAgICB2YXIgbmV4dFN0YXJ0ID0gYnVmZmVySW5mby5uZXh0U3RhcnQ7XG4gICAgICBpZiAoZnJhZ21lbnRUcmFja2VyICYmIG5leHRTdGFydCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IGZyYWdtZW50VHJhY2tlci5nZXRGcmFnQXRQb3MoY3VycmVudFRpbWUsIFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU4pO1xuICAgICAgICB2YXIgbmV4dCA9IGZyYWdtZW50VHJhY2tlci5nZXRGcmFnQXRQb3MobmV4dFN0YXJ0LCBQbGF5bGlzdExldmVsVHlwZS5NQUlOKTtcbiAgICAgICAgaWYgKGN1cnJlbnQgJiYgbmV4dCkge1xuICAgICAgICAgIHJldHVybiBuZXh0LnNuIC0gY3VycmVudC5zbiA8IDI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VycyBhIEJVRkZFUl9TVEFMTEVEX0VSUk9SIGV2ZW50LCBidXQgb25seSBvbmNlIHBlciBzdGFsbCBwZXJpb2QuXG4gICAgICogQHBhcmFtIGJ1ZmZlckxlbiAtIFRoZSBwbGF5aGVhZCBkaXN0YW5jZSBmcm9tIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgYnVmZmVyIHNlZ21lbnQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi87XG4gICAgX3Byb3RvLl9yZXBvcnRTdGFsbCA9IGZ1bmN0aW9uIF9yZXBvcnRTdGFsbChidWZmZXJJbmZvKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHMsXG4gICAgICAgIG1lZGlhID0gdGhpcy5tZWRpYSxcbiAgICAgICAgc3RhbGxSZXBvcnRlZCA9IHRoaXMuc3RhbGxSZXBvcnRlZCxcbiAgICAgICAgc3RhbGxlZCA9IHRoaXMuc3RhbGxlZDtcbiAgICAgIGlmICghc3RhbGxSZXBvcnRlZCAmJiBzdGFsbGVkICE9PSBudWxsICYmIG1lZGlhICYmIGhscykge1xuICAgICAgICAvLyBSZXBvcnQgc3RhbGxlZCBlcnJvciBvbmNlXG4gICAgICAgIHRoaXMuc3RhbGxSZXBvcnRlZCA9IHRydWU7XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIlBsYXliYWNrIHN0YWxsaW5nIGF0IEBcIiArIG1lZGlhLmN1cnJlbnRUaW1lICsgXCIgZHVlIHRvIGxvdyBidWZmZXIgKFwiICsgc3RyaW5naWZ5KGJ1ZmZlckluZm8pICsgXCIpXCIpO1xuICAgICAgICB0aGlzLndhcm4oZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIGhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwge1xuICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTUVESUFfRVJST1IsXG4gICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLkJVRkZFUl9TVEFMTEVEX0VSUk9SLFxuICAgICAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgYnVmZmVyOiBidWZmZXJJbmZvLmxlbixcbiAgICAgICAgICBidWZmZXJJbmZvOiBidWZmZXJJbmZvLFxuICAgICAgICAgIHN0YWxsZWQ6IHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFsbGVkXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBmaXggYnVmZmVyIHN0YWxscyBieSBqdW1waW5nIG92ZXIga25vd24gZ2FwcyBjYXVzZWQgYnkgcGFydGlhbCBmcmFnbWVudHNcbiAgICAgKiBAcGFyYW0gcGFydGlhbCAtIFRoZSBwYXJ0aWFsIGZyYWdtZW50IGZvdW5kIGF0IHRoZSBjdXJyZW50IHRpbWUgKHdoZXJlIHBsYXliYWNrIGlzIHN0YWxsaW5nKS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqLztcbiAgICBfcHJvdG8uX3RyeVNraXBCdWZmZXJIb2xlID0gZnVuY3Rpb24gX3RyeVNraXBCdWZmZXJIb2xlKHBhcnRpYWwpIHtcbiAgICAgIHZhciBfdGhpcyRobHM1O1xuICAgICAgdmFyIGZyYWdtZW50VHJhY2tlciA9IHRoaXMuZnJhZ21lbnRUcmFja2VyLFxuICAgICAgICBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgICB2YXIgY29uZmlnID0gKF90aGlzJGhsczUgPSB0aGlzLmhscykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGhsczUuY29uZmlnO1xuICAgICAgaWYgKCFtZWRpYSB8fCAhZnJhZ21lbnRUcmFja2VyIHx8ICFjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGlmIGN1cnJlbnRUaW1lIGlzIGJldHdlZW4gdW5idWZmZXJlZCByZWdpb25zIG9mIHBhcnRpYWwgZnJhZ21lbnRzXG4gICAgICB2YXIgY3VycmVudFRpbWUgPSBtZWRpYS5jdXJyZW50VGltZTtcbiAgICAgIHZhciBidWZmZXJJbmZvID0gQnVmZmVySGVscGVyLmJ1ZmZlckluZm8obWVkaWEsIGN1cnJlbnRUaW1lLCAwKTtcbiAgICAgIHZhciBzdGFydFRpbWUgPSBjdXJyZW50VGltZSA8IGJ1ZmZlckluZm8uc3RhcnQgPyBidWZmZXJJbmZvLnN0YXJ0IDogYnVmZmVySW5mby5uZXh0U3RhcnQ7XG4gICAgICBpZiAoc3RhcnRUaW1lICYmIHRoaXMuaGxzKSB7XG4gICAgICAgIHZhciBidWZmZXJTdGFydmVkID0gYnVmZmVySW5mby5sZW4gPD0gY29uZmlnLm1heEJ1ZmZlckhvbGU7XG4gICAgICAgIHZhciB3YWl0aW5nID0gYnVmZmVySW5mby5sZW4gPiAwICYmIGJ1ZmZlckluZm8ubGVuIDwgMSAmJiBtZWRpYS5yZWFkeVN0YXRlIDwgMztcbiAgICAgICAgdmFyIGdhcExlbmd0aCA9IHN0YXJ0VGltZSAtIGN1cnJlbnRUaW1lO1xuICAgICAgICBpZiAoZ2FwTGVuZ3RoID4gMCAmJiAoYnVmZmVyU3RhcnZlZCB8fCB3YWl0aW5nKSkge1xuICAgICAgICAgIC8vIE9ubHkgYWxsb3cgbGFyZ2UgZ2FwcyB0byBiZSBza2lwcGVkIGlmIGl0IGlzIGEgc3RhcnQgZ2FwLCBvciBhbGwgZnJhZ21lbnRzIGluIHNraXAgcmFuZ2UgYXJlIHBhcnRpYWxcbiAgICAgICAgICBpZiAoZ2FwTGVuZ3RoID4gY29uZmlnLm1heEJ1ZmZlckhvbGUpIHtcbiAgICAgICAgICAgIHZhciBzdGFydEdhcCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lID09PSAwKSB7XG4gICAgICAgICAgICAgIHZhciBzdGFydEZyYWcgPSBmcmFnbWVudFRyYWNrZXIuZ2V0QXBwZW5kZWRGcmFnKDAsIFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU4pO1xuICAgICAgICAgICAgICBpZiAoc3RhcnRGcmFnICYmIHN0YXJ0VGltZSA8IHN0YXJ0RnJhZy5lbmQpIHtcbiAgICAgICAgICAgICAgICBzdGFydEdhcCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RhcnRHYXApIHtcbiAgICAgICAgICAgICAgdmFyIHN0YXJ0UHJvdmlzaW9uZWQgPSBwYXJ0aWFsIHx8IGZyYWdtZW50VHJhY2tlci5nZXRBcHBlbmRlZEZyYWcoY3VycmVudFRpbWUsIFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU4pO1xuICAgICAgICAgICAgICBpZiAoc3RhcnRQcm92aXNpb25lZCkge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyRobHMkbG9hZExldmVsT2I7XG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IHNlZWsgd2hlbiBzZWxlY3RlZCB2YXJpYW50IHBsYXlsaXN0IGlzIHVubG9hZGVkXG4gICAgICAgICAgICAgICAgaWYgKCEoKF90aGlzJGhscyRsb2FkTGV2ZWxPYiA9IHRoaXMuaGxzLmxvYWRMZXZlbE9iaikgIT0gbnVsbCAmJiBfdGhpcyRobHMkbG9hZExldmVsT2IuZGV0YWlscykpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBEbyBub3Qgc2VlayB3aGVuIHJlcXVpcmVkIGZyYWdtZW50cyBhcmUgaW5mbGlnaHQgb3IgYXBwZW5kaW5nXG4gICAgICAgICAgICAgICAgdmFyIGluRmxpZ2h0RGVwZW5kZW5jeSA9IGdldEluRmxpZ2h0RGVwZW5kZW5jeSh0aGlzLmhscy5pbkZsaWdodEZyYWdtZW50cywgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5GbGlnaHREZXBlbmRlbmN5KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IHNlZWsgaWYgd2UgY2FuJ3Qgd2FsayB0cmFja2VkIGZyYWdtZW50cyB0byBlbmQgb2YgZ2FwXG4gICAgICAgICAgICAgICAgdmFyIG1vcmVUb0xvYWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gc3RhcnRQcm92aXNpb25lZC5lbmQ7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHBvcyA8IHN0YXJ0VGltZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHByb3Zpc2lvbmVkID0gZnJhZ21lbnRUcmFja2VyLmdldFBhcnRpYWxGcmFnbWVudChwb3MpO1xuICAgICAgICAgICAgICAgICAgaWYgKHByb3Zpc2lvbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcyArPSBwcm92aXNpb25lZC5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1vcmVUb0xvYWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1vcmVUb0xvYWQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdGFyZ2V0VGltZSA9IE1hdGgubWF4KHN0YXJ0VGltZSArIFNLSVBfQlVGRkVSX1JBTkdFX1NUQVJULCBjdXJyZW50VGltZSArIFNLSVBfQlVGRkVSX0hPTEVfU1RFUF9TRUNPTkRTKTtcbiAgICAgICAgICB0aGlzLndhcm4oXCJza2lwcGluZyBob2xlLCBhZGp1c3RpbmcgY3VycmVudFRpbWUgZnJvbSBcIiArIGN1cnJlbnRUaW1lICsgXCIgdG8gXCIgKyB0YXJnZXRUaW1lKTtcbiAgICAgICAgICB0aGlzLm1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBtZWRpYS5jdXJyZW50VGltZSA9IHRhcmdldFRpbWU7XG4gICAgICAgICAgaWYgKCEocGFydGlhbCAhPSBudWxsICYmIHBhcnRpYWwuZ2FwKSkge1xuICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKFwiZnJhZ21lbnQgbG9hZGVkIHdpdGggYnVmZmVyIGhvbGVzLCBzZWVraW5nIGZyb20gXCIgKyBjdXJyZW50VGltZSArIFwiIHRvIFwiICsgdGFyZ2V0VGltZSk7XG4gICAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwge1xuICAgICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk1FRElBX0VSUk9SLFxuICAgICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuQlVGRkVSX1NFRUtfT1ZFUl9IT0xFLFxuICAgICAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgcmVhc29uOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICBmcmFnOiBwYXJ0aWFsIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgYnVmZmVyOiBidWZmZXJJbmZvLmxlbixcbiAgICAgICAgICAgICAgYnVmZmVySW5mbzogYnVmZmVySW5mb1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0YXJnZXRUaW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBmaXggYnVmZmVyIHN0YWxscyBieSBhZHZhbmNpbmcgdGhlIG1lZGlhRWxlbWVudCdzIGN1cnJlbnQgdGltZSBieSBhIHNtYWxsIGFtb3VudC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqLztcbiAgICBfcHJvdG8uX3RyeU51ZGdlQnVmZmVyID0gZnVuY3Rpb24gX3RyeU51ZGdlQnVmZmVyKGJ1ZmZlckluZm8pIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscyxcbiAgICAgICAgbWVkaWEgPSB0aGlzLm1lZGlhLFxuICAgICAgICBudWRnZVJldHJ5ID0gdGhpcy5udWRnZVJldHJ5O1xuICAgICAgdmFyIGNvbmZpZyA9IGhscyA9PSBudWxsID8gdm9pZCAwIDogaGxzLmNvbmZpZztcbiAgICAgIGlmICghbWVkaWEgfHwgIWNvbmZpZykge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHZhciBjdXJyZW50VGltZSA9IG1lZGlhLmN1cnJlbnRUaW1lO1xuICAgICAgdGhpcy5udWRnZVJldHJ5Kys7XG4gICAgICBpZiAobnVkZ2VSZXRyeSA8IGNvbmZpZy5udWRnZU1heFJldHJ5KSB7XG4gICAgICAgIHZhciB0YXJnZXRUaW1lID0gY3VycmVudFRpbWUgKyAobnVkZ2VSZXRyeSArIDEpICogY29uZmlnLm51ZGdlT2Zmc2V0O1xuICAgICAgICAvLyBwbGF5YmFjayBzdGFsbGVkIGluIGJ1ZmZlcmVkIGFyZWEgLi4uIGxldCdzIG51ZGdlIGN1cnJlbnRUaW1lIHRvIHRyeSB0byBvdmVyY29tZSB0aGlzXG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIk51ZGdpbmcgJ2N1cnJlbnRUaW1lJyBmcm9tIFwiICsgY3VycmVudFRpbWUgKyBcIiB0byBcIiArIHRhcmdldFRpbWUpO1xuICAgICAgICB0aGlzLndhcm4oZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIG1lZGlhLmN1cnJlbnRUaW1lID0gdGFyZ2V0VGltZTtcbiAgICAgICAgaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5NRURJQV9FUlJPUixcbiAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuQlVGRkVSX05VREdFX09OX1NUQUxMLFxuICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgYnVmZmVyOiBidWZmZXJJbmZvLmxlbixcbiAgICAgICAgICBidWZmZXJJbmZvOiBidWZmZXJJbmZvXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9lcnJvciA9IG5ldyBFcnJvcihcIlBsYXloZWFkIHN0aWxsIG5vdCBtb3Zpbmcgd2hpbGUgZW5vdWdoIGRhdGEgYnVmZmVyZWQgQFwiICsgY3VycmVudFRpbWUgKyBcIiBhZnRlciBcIiArIGNvbmZpZy5udWRnZU1heFJldHJ5ICsgXCIgbnVkZ2VzXCIpO1xuICAgICAgICB0aGlzLmVycm9yKF9lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5NRURJQV9FUlJPUixcbiAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuQlVGRkVSX1NUQUxMRURfRVJST1IsXG4gICAgICAgICAgZXJyb3I6IF9lcnJvcixcbiAgICAgICAgICBmYXRhbDogdHJ1ZSxcbiAgICAgICAgICBidWZmZXI6IGJ1ZmZlckluZm8ubGVuLFxuICAgICAgICAgIGJ1ZmZlckluZm86IGJ1ZmZlckluZm9cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKEdhcENvbnRyb2xsZXIsIFt7XG4gICAgICBrZXk6IFwiaGFzQnVmZmVyZWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5idWZmZXJlZCkubGVuZ3RoID4gMDtcbiAgICAgIH1cbiAgICB9XSk7XG4gIH0oVGFza0xvb3ApO1xuICBmdW5jdGlvbiBnZXRJbkZsaWdodERlcGVuZGVuY3koaW5GbGlnaHRGcmFnbWVudHMsIGN1cnJlbnRUaW1lKSB7XG4gICAgdmFyIG1haW4gPSBpbkZsaWdodChpbkZsaWdodEZyYWdtZW50cy5tYWluKTtcbiAgICBpZiAobWFpbiAmJiBtYWluLnN0YXJ0IDw9IGN1cnJlbnRUaW1lKSB7XG4gICAgICByZXR1cm4gbWFpbjtcbiAgICB9XG4gICAgdmFyIGF1ZGlvID0gaW5GbGlnaHQoaW5GbGlnaHRGcmFnbWVudHMuYXVkaW8pO1xuICAgIGlmIChhdWRpbyAmJiBhdWRpby5zdGFydCA8PSBjdXJyZW50VGltZSkge1xuICAgICAgcmV0dXJuIGF1ZGlvO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBpbkZsaWdodChpbkZsaWdodERhdGEpIHtcbiAgICBpZiAoIWluRmxpZ2h0RGF0YSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN3aXRjaCAoaW5GbGlnaHREYXRhLnN0YXRlKSB7XG4gICAgICBjYXNlIFN0YXRlLklETEU6XG4gICAgICBjYXNlIFN0YXRlLlNUT1BQRUQ6XG4gICAgICBjYXNlIFN0YXRlLkVOREVEOlxuICAgICAgY2FzZSBTdGF0ZS5FUlJPUjpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBpbkZsaWdodERhdGEuZnJhZztcbiAgfVxuXG4gIHZhciBNSU5fQ1VFX0RVUkFUSU9OID0gMC4yNTtcbiAgZnVuY3Rpb24gZ2V0Q3VlQ2xhc3MoKSB7XG4gICAgaWYgKHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc2VsZi5WVFRDdWUgfHwgc2VsZi5UZXh0VHJhY2tDdWU7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQ3VlV2l0aERhdGFGaWVsZHMoQ3VlLCBzdGFydFRpbWUsIGVuZFRpbWUsIGRhdGEsIHR5cGUpIHtcbiAgICB2YXIgY3VlID0gbmV3IEN1ZShzdGFydFRpbWUsIGVuZFRpbWUsICcnKTtcbiAgICB0cnkge1xuICAgICAgY3VlLnZhbHVlID0gZGF0YTtcbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIGN1ZS50eXBlID0gdHlwZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjdWUgPSBuZXcgQ3VlKHN0YXJ0VGltZSwgZW5kVGltZSwgc3RyaW5naWZ5KHR5cGUgPyBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgIHR5cGU6IHR5cGVcbiAgICAgIH0sIGRhdGEpIDogZGF0YSkpO1xuICAgIH1cbiAgICByZXR1cm4gY3VlO1xuICB9XG5cbiAgLy8gVlRUQ3VlIGxhdGVzdCBkcmFmdCBhbGxvd3MgYW4gaW5maW5pdGUgZHVyYXRpb24sIGZhbGxiYWNrXG4gIC8vIHRvIE1BWF9WQUxVRSBpZiBuZWNlc3NhcnlcbiAgdmFyIE1BWF9DVUVfRU5EVElNRSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgQ3VlID0gZ2V0Q3VlQ2xhc3MoKTtcbiAgICB0cnkge1xuICAgICAgQ3VlICYmIG5ldyBDdWUoMCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCAnJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIE51bWJlci5NQVhfVkFMVUU7XG4gICAgfVxuICAgIHJldHVybiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIH0oKTtcbiAgZnVuY3Rpb24gaGV4VG9BcnJheUJ1ZmZlcihzdHIpIHtcbiAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKHN0ci5yZXBsYWNlKC9eMHgvLCAnJykucmVwbGFjZSgvKFtcXGRhLWZBLUZdezJ9KSA/L2csICcweCQxICcpLnJlcGxhY2UoLyArJC8sICcnKS5zcGxpdCgnICcpKS5idWZmZXI7XG4gIH1cbiAgdmFyIElEM1RyYWNrQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSUQzVHJhY2tDb250cm9sbGVyKGhscykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMuaGxzID0gdm9pZCAwO1xuICAgICAgdGhpcy5pZDNUcmFjayA9IG51bGw7XG4gICAgICB0aGlzLm1lZGlhID0gbnVsbDtcbiAgICAgIHRoaXMuZGF0ZVJhbmdlQ3Vlc0FwcGVuZGVkID0ge307XG4gICAgICB0aGlzLnJlbW92ZUN1ZXMgPSB0cnVlO1xuICAgICAgdGhpcy5vbkV2ZW50Q3VlRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX3RoaXMuaGxzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5FVkVOVF9DVUVfRU5URVIsIHt9KTtcbiAgICAgIH07XG4gICAgICB0aGlzLmhscyA9IGhscztcbiAgICAgIHRoaXMuX3JlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBJRDNUcmFja0NvbnRyb2xsZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuX3VucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMuaWQzVHJhY2sgPSBudWxsO1xuICAgICAgdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgICB0aGlzLmRhdGVSYW5nZUN1ZXNBcHBlbmRlZCA9IHt9O1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5obHMgPSB0aGlzLm9uRXZlbnRDdWVFbnRlciA9IG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8uX3JlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gX3JlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NRURJQV9BVFRBQ0hJTkcsIHRoaXMub25NZWRpYUF0dGFjaGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLk1FRElBX0FUVEFDSEVELCB0aGlzLm9uTWVkaWFBdHRhY2hlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLk1FRElBX0RFVEFDSElORywgdGhpcy5vbk1lZGlhRGV0YWNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUFOSUZFU1RfTE9BRElORywgdGhpcy5vbk1hbmlmZXN0TG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkZSQUdfUEFSU0lOR19NRVRBREFUQSwgdGhpcy5vbkZyYWdQYXJzaW5nTWV0YWRhdGEsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5CVUZGRVJfRkxVU0hJTkcsIHRoaXMub25CdWZmZXJGbHVzaGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkxFVkVMX1VQREFURUQsIHRoaXMub25MZXZlbFVwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5MRVZFTF9QVFNfVVBEQVRFRCwgdGhpcy5vbkxldmVsUHRzVXBkYXRlZCwgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8uX3VucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfdW5yZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1FRElBX0FUVEFDSElORywgdGhpcy5vbk1lZGlhQXR0YWNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1FRElBX0FUVEFDSEVELCB0aGlzLm9uTWVkaWFBdHRhY2hlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NRURJQV9ERVRBQ0hJTkcsIHRoaXMub25NZWRpYURldGFjaGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkZSQUdfUEFSU0lOR19NRVRBREFUQSwgdGhpcy5vbkZyYWdQYXJzaW5nTWV0YWRhdGEsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuQlVGRkVSX0ZMVVNISU5HLCB0aGlzLm9uQnVmZmVyRmx1c2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTEVWRUxfVVBEQVRFRCwgdGhpcy5vbkxldmVsVXBkYXRlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5MRVZFTF9QVFNfVVBEQVRFRCwgdGhpcy5vbkxldmVsUHRzVXBkYXRlZCwgdGhpcyk7XG4gICAgfTtcbiAgICAvLyBBZGQgSUQzIG1ldGF0YWRhdGEgdGV4dCB0cmFjay5cbiAgICBfcHJvdG8ub25NZWRpYUF0dGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFBdHRhY2hpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfZGF0YSRvdmVycmlkZXM7XG4gICAgICB0aGlzLm1lZGlhID0gZGF0YS5tZWRpYTtcbiAgICAgIGlmICgoKF9kYXRhJG92ZXJyaWRlcyA9IGRhdGEub3ZlcnJpZGVzKSA9PSBudWxsID8gdm9pZCAwIDogX2RhdGEkb3ZlcnJpZGVzLmN1ZVJlbW92YWwpID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUN1ZXMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbk1lZGlhQXR0YWNoZWQgPSBmdW5jdGlvbiBvbk1lZGlhQXR0YWNoZWQoKSB7XG4gICAgICB2YXIgZGV0YWlscyA9IHRoaXMuaGxzLmxhdGVzdExldmVsRGV0YWlscztcbiAgICAgIGlmIChkZXRhaWxzKSB7XG4gICAgICAgIHRoaXMudXBkYXRlRGF0ZVJhbmdlQ3VlcyhkZXRhaWxzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbk1lZGlhRGV0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYURldGFjaGluZyhldmVudCwgZGF0YSkge1xuICAgICAgdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgICB2YXIgdHJhbnNmZXJyaW5nTWVkaWEgPSAhIWRhdGEudHJhbnNmZXJNZWRpYTtcbiAgICAgIGlmICh0cmFuc2ZlcnJpbmdNZWRpYSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pZDNUcmFjaykge1xuICAgICAgICBpZiAodGhpcy5yZW1vdmVDdWVzKSB7XG4gICAgICAgICAgY2xlYXJDdXJyZW50Q3Vlcyh0aGlzLmlkM1RyYWNrLCB0aGlzLm9uRXZlbnRDdWVFbnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pZDNUcmFjayA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLmRhdGVSYW5nZUN1ZXNBcHBlbmRlZCA9IHt9O1xuICAgIH07XG4gICAgX3Byb3RvLm9uTWFuaWZlc3RMb2FkaW5nID0gZnVuY3Rpb24gb25NYW5pZmVzdExvYWRpbmcoKSB7XG4gICAgICB0aGlzLmRhdGVSYW5nZUN1ZXNBcHBlbmRlZCA9IHt9O1xuICAgIH07XG4gICAgX3Byb3RvLmNyZWF0ZVRyYWNrID0gZnVuY3Rpb24gY3JlYXRlVHJhY2sobWVkaWEpIHtcbiAgICAgIHZhciB0cmFjayA9IHRoaXMuZ2V0SUQzVHJhY2sobWVkaWEudGV4dFRyYWNrcyk7XG4gICAgICB0cmFjay5tb2RlID0gJ2hpZGRlbic7XG4gICAgICByZXR1cm4gdHJhY2s7XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0SUQzVHJhY2sgPSBmdW5jdGlvbiBnZXRJRDNUcmFjayh0ZXh0VHJhY2tzKSB7XG4gICAgICBpZiAoIXRoaXMubWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0VHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0ZXh0VHJhY2sgPSB0ZXh0VHJhY2tzW2ldO1xuICAgICAgICBpZiAodGV4dFRyYWNrLmtpbmQgPT09ICdtZXRhZGF0YScgJiYgdGV4dFRyYWNrLmxhYmVsID09PSAnaWQzJykge1xuICAgICAgICAgIC8vIHNlbmQgJ2FkZHRyYWNrJyB3aGVuIHJldXNpbmcgdGhlIHRleHRUcmFjayBmb3IgbWV0YWRhdGEsXG4gICAgICAgICAgLy8gc2FtZSBhcyB3aGF0IHdlIGRvIGZvciBjYXB0aW9uc1xuICAgICAgICAgIHNlbmRBZGRUcmFja0V2ZW50KHRleHRUcmFjaywgdGhpcy5tZWRpYSk7XG4gICAgICAgICAgcmV0dXJuIHRleHRUcmFjaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWVkaWEuYWRkVGV4dFRyYWNrKCdtZXRhZGF0YScsICdpZDMnKTtcbiAgICB9O1xuICAgIF9wcm90by5vbkZyYWdQYXJzaW5nTWV0YWRhdGEgPSBmdW5jdGlvbiBvbkZyYWdQYXJzaW5nTWV0YWRhdGEoZXZlbnQsIGRhdGEpIHtcbiAgICAgIGlmICghdGhpcy5tZWRpYSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgX3RoaXMkaGxzJGNvbmZpZyA9IHRoaXMuaGxzLmNvbmZpZyxcbiAgICAgICAgZW5hYmxlRW1zZ01ldGFkYXRhQ3VlcyA9IF90aGlzJGhscyRjb25maWcuZW5hYmxlRW1zZ01ldGFkYXRhQ3VlcyxcbiAgICAgICAgZW5hYmxlSUQzTWV0YWRhdGFDdWVzID0gX3RoaXMkaGxzJGNvbmZpZy5lbmFibGVJRDNNZXRhZGF0YUN1ZXM7XG4gICAgICBpZiAoIWVuYWJsZUVtc2dNZXRhZGF0YUN1ZXMgJiYgIWVuYWJsZUlEM01ldGFkYXRhQ3Vlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc2FtcGxlcyA9IGRhdGEuc2FtcGxlcztcblxuICAgICAgLy8gY3JlYXRlIHRyYWNrIGR5bmFtaWNhbGx5XG4gICAgICBpZiAoIXRoaXMuaWQzVHJhY2spIHtcbiAgICAgICAgdGhpcy5pZDNUcmFjayA9IHRoaXMuY3JlYXRlVHJhY2sodGhpcy5tZWRpYSk7XG4gICAgICB9XG4gICAgICB2YXIgQ3VlID0gZ2V0Q3VlQ2xhc3MoKTtcbiAgICAgIGlmICghQ3VlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2FtcGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdHlwZSA9IHNhbXBsZXNbaV0udHlwZTtcbiAgICAgICAgaWYgKHR5cGUgPT09IE1ldGFkYXRhU2NoZW1hLmVtc2cgJiYgIWVuYWJsZUVtc2dNZXRhZGF0YUN1ZXMgfHwgIWVuYWJsZUlEM01ldGFkYXRhQ3Vlcykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmcmFtZXMgPSBnZXRJZDNGcmFtZXMoc2FtcGxlc1tpXS5kYXRhKTtcbiAgICAgICAgaWYgKGZyYW1lcykge1xuICAgICAgICAgIHZhciBzdGFydFRpbWUgPSBzYW1wbGVzW2ldLnB0cztcbiAgICAgICAgICB2YXIgZW5kVGltZSA9IHN0YXJ0VGltZSArIHNhbXBsZXNbaV0uZHVyYXRpb247XG4gICAgICAgICAgaWYgKGVuZFRpbWUgPiBNQVhfQ1VFX0VORFRJTUUpIHtcbiAgICAgICAgICAgIGVuZFRpbWUgPSBNQVhfQ1VFX0VORFRJTUU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB0aW1lRGlmZiA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XG4gICAgICAgICAgaWYgKHRpbWVEaWZmIDw9IDApIHtcbiAgICAgICAgICAgIGVuZFRpbWUgPSBzdGFydFRpbWUgKyBNSU5fQ1VFX0RVUkFUSU9OO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZyYW1lcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgdmFyIGZyYW1lID0gZnJhbWVzW2pdO1xuICAgICAgICAgICAgLy8gU2FmYXJpIGRvZXNuJ3QgcHV0IHRoZSB0aW1lc3RhbXAgZnJhbWUgaW4gdGhlIFRleHRUcmFja1xuICAgICAgICAgICAgaWYgKCFpc0lkM1RpbWVzdGFtcEZyYW1lKGZyYW1lKSkge1xuICAgICAgICAgICAgICAvLyBhZGQgYSBib3VuZHMgdG8gYW55IHVuYm91bmRlZCBjdWVzXG4gICAgICAgICAgICAgIHRoaXMudXBkYXRlSWQzQ3VlRW5kcyhzdGFydFRpbWUsIHR5cGUpO1xuICAgICAgICAgICAgICB2YXIgY3VlID0gY3JlYXRlQ3VlV2l0aERhdGFGaWVsZHMoQ3VlLCBzdGFydFRpbWUsIGVuZFRpbWUsIGZyYW1lLCB0eXBlKTtcbiAgICAgICAgICAgICAgaWYgKGN1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWQzVHJhY2suYWRkQ3VlKGN1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by51cGRhdGVJZDNDdWVFbmRzID0gZnVuY3Rpb24gdXBkYXRlSWQzQ3VlRW5kcyhzdGFydFRpbWUsIHR5cGUpIHtcbiAgICAgIHZhciBfdGhpcyRpZDNUcmFjaztcbiAgICAgIHZhciBjdWVzID0gKF90aGlzJGlkM1RyYWNrID0gdGhpcy5pZDNUcmFjaykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGlkM1RyYWNrLmN1ZXM7XG4gICAgICBpZiAoY3Vlcykge1xuICAgICAgICBmb3IgKHZhciBpID0gY3Vlcy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICB2YXIgY3VlID0gY3Vlc1tpXTtcbiAgICAgICAgICBpZiAoY3VlLnR5cGUgPT09IHR5cGUgJiYgY3VlLnN0YXJ0VGltZSA8IHN0YXJ0VGltZSAmJiBjdWUuZW5kVGltZSA9PT0gTUFYX0NVRV9FTkRUSU1FKSB7XG4gICAgICAgICAgICBjdWUuZW5kVGltZSA9IHN0YXJ0VGltZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkJ1ZmZlckZsdXNoaW5nID0gZnVuY3Rpb24gb25CdWZmZXJGbHVzaGluZyhldmVudCwgX3JlZikge1xuICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gX3JlZi5zdGFydE9mZnNldCxcbiAgICAgICAgZW5kT2Zmc2V0ID0gX3JlZi5lbmRPZmZzZXQsXG4gICAgICAgIHR5cGUgPSBfcmVmLnR5cGU7XG4gICAgICB2YXIgaWQzVHJhY2sgPSB0aGlzLmlkM1RyYWNrLFxuICAgICAgICBobHMgPSB0aGlzLmhscztcbiAgICAgIGlmICghaGxzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBfaGxzJGNvbmZpZyA9IGhscy5jb25maWcsXG4gICAgICAgIGVuYWJsZUVtc2dNZXRhZGF0YUN1ZXMgPSBfaGxzJGNvbmZpZy5lbmFibGVFbXNnTWV0YWRhdGFDdWVzLFxuICAgICAgICBlbmFibGVJRDNNZXRhZGF0YUN1ZXMgPSBfaGxzJGNvbmZpZy5lbmFibGVJRDNNZXRhZGF0YUN1ZXM7XG4gICAgICBpZiAoaWQzVHJhY2sgJiYgKGVuYWJsZUVtc2dNZXRhZGF0YUN1ZXMgfHwgZW5hYmxlSUQzTWV0YWRhdGFDdWVzKSkge1xuICAgICAgICB2YXIgcHJlZGljYXRlO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uIHByZWRpY2F0ZShjdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBjdWUudHlwZSA9PT0gTWV0YWRhdGFTY2hlbWEuYXVkaW9JZDMgJiYgZW5hYmxlSUQzTWV0YWRhdGFDdWVzO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uIHByZWRpY2F0ZShjdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBjdWUudHlwZSA9PT0gTWV0YWRhdGFTY2hlbWEuZW1zZyAmJiBlbmFibGVFbXNnTWV0YWRhdGFDdWVzO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24gcHJlZGljYXRlKGN1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGN1ZS50eXBlID09PSBNZXRhZGF0YVNjaGVtYS5hdWRpb0lkMyAmJiBlbmFibGVJRDNNZXRhZGF0YUN1ZXMgfHwgY3VlLnR5cGUgPT09IE1ldGFkYXRhU2NoZW1hLmVtc2cgJiYgZW5hYmxlRW1zZ01ldGFkYXRhQ3VlcztcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZUN1ZXNJblJhbmdlKGlkM1RyYWNrLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0LCBwcmVkaWNhdGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uTGV2ZWxVcGRhdGVkID0gZnVuY3Rpb24gb25MZXZlbFVwZGF0ZWQoZXZlbnQsIF9yZWYyKSB7XG4gICAgICB2YXIgZGV0YWlscyA9IF9yZWYyLmRldGFpbHM7XG4gICAgICB0aGlzLnVwZGF0ZURhdGVSYW5nZUN1ZXMoZGV0YWlscywgdHJ1ZSk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25MZXZlbFB0c1VwZGF0ZWQgPSBmdW5jdGlvbiBvbkxldmVsUHRzVXBkYXRlZChldmVudCwgZGF0YSkge1xuICAgICAgaWYgKE1hdGguYWJzKGRhdGEuZHJpZnQpID4gMC4wMSkge1xuICAgICAgICB0aGlzLnVwZGF0ZURhdGVSYW5nZUN1ZXMoZGF0YS5kZXRhaWxzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by51cGRhdGVEYXRlUmFuZ2VDdWVzID0gZnVuY3Rpb24gdXBkYXRlRGF0ZVJhbmdlQ3VlcyhkZXRhaWxzLCByZW1vdmVPbGRDdWVzKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIGlmICghdGhpcy5tZWRpYSB8fCAhZGV0YWlscy5oYXNQcm9ncmFtRGF0ZVRpbWUgfHwgIXRoaXMuaGxzLmNvbmZpZy5lbmFibGVEYXRlUmFuZ2VNZXRhZGF0YUN1ZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGlkM1RyYWNrID0gdGhpcy5pZDNUcmFjaztcbiAgICAgIHZhciBkYXRlUmFuZ2VzID0gZGV0YWlscy5kYXRlUmFuZ2VzO1xuICAgICAgdmFyIGlkcyA9IE9iamVjdC5rZXlzKGRhdGVSYW5nZXMpO1xuICAgICAgdmFyIGRhdGVSYW5nZUN1ZXNBcHBlbmRlZCA9IHRoaXMuZGF0ZVJhbmdlQ3Vlc0FwcGVuZGVkO1xuICAgICAgLy8gUmVtb3ZlIGN1ZXMgZnJvbSB0cmFjayBub3QgZm91bmQgaW4gZGV0YWlscy5kYXRlUmFuZ2VzXG4gICAgICBpZiAoaWQzVHJhY2sgJiYgcmVtb3ZlT2xkQ3Vlcykge1xuICAgICAgICB2YXIgX2lkM1RyYWNrJGN1ZXM7XG4gICAgICAgIGlmICgoX2lkM1RyYWNrJGN1ZXMgPSBpZDNUcmFjay5jdWVzKSAhPSBudWxsICYmIF9pZDNUcmFjayRjdWVzLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBpZHNUb1JlbW92ZSA9IE9iamVjdC5rZXlzKGRhdGVSYW5nZUN1ZXNBcHBlbmRlZCkuZmlsdGVyKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgcmV0dXJuICFpZHMuaW5jbHVkZXMoaWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICAgICAgICAgICAgdmFyIGlkID0gaWRzVG9SZW1vdmVbaV07XG4gICAgICAgICAgICB2YXIgY3VlcyA9IGRhdGVSYW5nZUN1ZXNBcHBlbmRlZFtpZF0uY3VlcztcbiAgICAgICAgICAgIGRlbGV0ZSBkYXRlUmFuZ2VDdWVzQXBwZW5kZWRbaWRdO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoY3VlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1ZSA9IGN1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICBjdWUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW50ZXInLCBfdGhpczIub25FdmVudEN1ZUVudGVyKTtcbiAgICAgICAgICAgICAgICBpZDNUcmFjay5yZW1vdmVDdWUoY3VlKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8qIG5vLW9wICovXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZm9yICh2YXIgaSA9IGlkc1RvUmVtb3ZlLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgX2xvb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0ZVJhbmdlQ3Vlc0FwcGVuZGVkID0gdGhpcy5kYXRlUmFuZ2VDdWVzQXBwZW5kZWQgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRXhpdCBpZiB0aGUgcGxheWxpc3QgZG9lcyBub3QgaGF2ZSBEYXRlIFJhbmdlcyBvciBkb2VzIG5vdCBoYXZlIFByb2dyYW0gRGF0ZSBUaW1lXG4gICAgICB2YXIgbGFzdEZyYWdtZW50ID0gZGV0YWlscy5mcmFnbWVudHNbZGV0YWlscy5mcmFnbWVudHMubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCB8fCAhaXNGaW5pdGVOdW1iZXIobGFzdEZyYWdtZW50ID09IG51bGwgPyB2b2lkIDAgOiBsYXN0RnJhZ21lbnQucHJvZ3JhbURhdGVUaW1lKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaWQzVHJhY2spIHtcbiAgICAgICAgdGhpcy5pZDNUcmFjayA9IHRoaXMuY3JlYXRlVHJhY2sodGhpcy5tZWRpYSk7XG4gICAgICB9XG4gICAgICB2YXIgQ3VlID0gZ2V0Q3VlQ2xhc3MoKTtcbiAgICAgIHZhciBfbG9vcDIgPSBmdW5jdGlvbiBfbG9vcDIoKSB7XG4gICAgICAgIHZhciBpZCA9IGlkc1tfaV07XG4gICAgICAgIHZhciBkYXRlUmFuZ2UgPSBkYXRlUmFuZ2VzW2lkXTtcbiAgICAgICAgdmFyIHN0YXJ0VGltZSA9IGRhdGVSYW5nZS5zdGFydFRpbWU7XG5cbiAgICAgICAgLy8gUHJvY2VzcyBEYXRlUmFuZ2VzIHRvIGRldGVybWluZSBlbmQtdGltZSAoa25vd24gRFVSQVRJT04sIEVORC1EQVRFLCBvciBFTkQtT04tTkVYVClcbiAgICAgICAgdmFyIGFwcGVuZGVkRGF0ZVJhbmdlQ3VlcyA9IGRhdGVSYW5nZUN1ZXNBcHBlbmRlZFtpZF07XG4gICAgICAgIHZhciBjdWVzID0gKGFwcGVuZGVkRGF0ZVJhbmdlQ3VlcyA9PSBudWxsID8gdm9pZCAwIDogYXBwZW5kZWREYXRlUmFuZ2VDdWVzLmN1ZXMpIHx8IHt9O1xuICAgICAgICB2YXIgZHVyYXRpb25Lbm93biA9IChhcHBlbmRlZERhdGVSYW5nZUN1ZXMgPT0gbnVsbCA/IHZvaWQgMCA6IGFwcGVuZGVkRGF0ZVJhbmdlQ3Vlcy5kdXJhdGlvbktub3duKSB8fCBmYWxzZTtcbiAgICAgICAgdmFyIGVuZFRpbWUgPSBNQVhfQ1VFX0VORFRJTUU7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGRhdGVSYW5nZS5kdXJhdGlvbixcbiAgICAgICAgICBlbmREYXRlID0gZGF0ZVJhbmdlLmVuZERhdGU7XG4gICAgICAgIGlmIChlbmREYXRlICYmIGR1cmF0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgZW5kVGltZSA9IHN0YXJ0VGltZSArIGR1cmF0aW9uO1xuICAgICAgICAgIGR1cmF0aW9uS25vd24gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGVSYW5nZS5lbmRPbk5leHQgJiYgIWR1cmF0aW9uS25vd24pIHtcbiAgICAgICAgICB2YXIgbmV4dERhdGVSYW5nZVdpdGhTYW1lQ2xhc3MgPSBpZHMucmVkdWNlKGZ1bmN0aW9uIChjYW5kaWRhdGVEYXRlUmFuZ2UsIGlkKSB7XG4gICAgICAgICAgICBpZiAoaWQgIT09IGRhdGVSYW5nZS5pZCkge1xuICAgICAgICAgICAgICB2YXIgb3RoZXJEYXRlUmFuZ2UgPSBkYXRlUmFuZ2VzW2lkXTtcbiAgICAgICAgICAgICAgaWYgKG90aGVyRGF0ZVJhbmdlLmNsYXNzID09PSBkYXRlUmFuZ2UuY2xhc3MgJiYgb3RoZXJEYXRlUmFuZ2Uuc3RhcnREYXRlID4gZGF0ZVJhbmdlLnN0YXJ0RGF0ZSAmJiAoIWNhbmRpZGF0ZURhdGVSYW5nZSB8fCBkYXRlUmFuZ2Uuc3RhcnREYXRlIDwgY2FuZGlkYXRlRGF0ZVJhbmdlLnN0YXJ0RGF0ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXJEYXRlUmFuZ2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYW5kaWRhdGVEYXRlUmFuZ2U7XG4gICAgICAgICAgfSwgbnVsbCk7XG4gICAgICAgICAgaWYgKG5leHREYXRlUmFuZ2VXaXRoU2FtZUNsYXNzKSB7XG4gICAgICAgICAgICBlbmRUaW1lID0gbmV4dERhdGVSYW5nZVdpdGhTYW1lQ2xhc3Muc3RhcnRUaW1lO1xuICAgICAgICAgICAgZHVyYXRpb25Lbm93biA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIFRleHRUcmFjayBDdWVzIGZvciBlYWNoIE1ldGFkYXRhR3JvdXAgSXRlbSAoc2VsZWN0IERhdGVSYW5nZSBhdHRyaWJ1dGUpXG4gICAgICAgIC8vIFRoaXMgaXMgdG8gZW11bGF0ZSBTYWZhcmkgSExTIHBsYXliYWNrIGhhbmRsaW5nIG9mIERhdGVSYW5nZSB0YWdzXG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoZGF0ZVJhbmdlLmF0dHIpO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0gYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICBpZiAoIWlzRGF0ZVJhbmdlQ3VlQXR0cmlidXRlKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY3VlID0gY3Vlc1trZXldO1xuICAgICAgICAgIGlmIChjdWUpIHtcbiAgICAgICAgICAgIGlmIChkdXJhdGlvbktub3duICYmICFhcHBlbmRlZERhdGVSYW5nZUN1ZXMuZHVyYXRpb25Lbm93bikge1xuICAgICAgICAgICAgICBjdWUuZW5kVGltZSA9IGVuZFRpbWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGN1ZS5zdGFydFRpbWUgLSBzdGFydFRpbWUpID4gMC4wMSkge1xuICAgICAgICAgICAgICBjdWUuc3RhcnRUaW1lID0gc3RhcnRUaW1lO1xuICAgICAgICAgICAgICBjdWUuZW5kVGltZSA9IGVuZFRpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChDdWUpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gZGF0ZVJhbmdlLmF0dHJba2V5XTtcbiAgICAgICAgICAgIGlmIChpc1NDVEUzNUF0dHJpYnV0ZShrZXkpKSB7XG4gICAgICAgICAgICAgIGRhdGEgPSBoZXhUb0FycmF5QnVmZmVyKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSB7XG4gICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIF9jdWUgPSBjcmVhdGVDdWVXaXRoRGF0YUZpZWxkcyhDdWUsIHN0YXJ0VGltZSwgZW5kVGltZSwgcGF5bG9hZCwgTWV0YWRhdGFTY2hlbWEuZGF0ZVJhbmdlKTtcbiAgICAgICAgICAgIGlmIChfY3VlKSB7XG4gICAgICAgICAgICAgIF9jdWUuaWQgPSBpZDtcbiAgICAgICAgICAgICAgX3RoaXMyLmlkM1RyYWNrLmFkZEN1ZShfY3VlKTtcbiAgICAgICAgICAgICAgY3Vlc1trZXldID0gX2N1ZTtcbiAgICAgICAgICAgICAgaWYgKF90aGlzMi5obHMuY29uZmlnLmludGVyc3RpdGlhbHNDb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ1gtQVNTRVQtTElTVCcgfHwga2V5ID09PSAnWC1BU1NFVC1VUkwnKSB7XG4gICAgICAgICAgICAgICAgICBfY3VlLmFkZEV2ZW50TGlzdGVuZXIoJ2VudGVyJywgX3RoaXMyLm9uRXZlbnRDdWVFbnRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gS2VlcCB0cmFjayBvZiBwcm9jZXNzZWQgRGF0ZVJhbmdlcyBieSBJRCBmb3IgdXBkYXRpbmcgY3VlcyB3aXRoIG5ldyBEYXRlUmFuZ2UgdGFnIGF0dHJpYnV0ZXNcbiAgICAgICAgZGF0ZVJhbmdlQ3Vlc0FwcGVuZGVkW2lkXSA9IHtcbiAgICAgICAgICBjdWVzOiBjdWVzLFxuICAgICAgICAgIGRhdGVSYW5nZTogZGF0ZVJhbmdlLFxuICAgICAgICAgIGR1cmF0aW9uS25vd246IGR1cmF0aW9uS25vd25cbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgaWRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBfbG9vcDIoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBJRDNUcmFja0NvbnRyb2xsZXI7XG4gIH0oKTtcblxuICB2YXIgTGF0ZW5jeUNvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExhdGVuY3lDb250cm9sbGVyKGhscykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMuaGxzID0gdm9pZCAwO1xuICAgICAgdGhpcy5jb25maWcgPSB2b2lkIDA7XG4gICAgICB0aGlzLm1lZGlhID0gbnVsbDtcbiAgICAgIHRoaXMuY3VycmVudFRpbWUgPSAwO1xuICAgICAgdGhpcy5zdGFsbENvdW50ID0gMDtcbiAgICAgIHRoaXMuX2xhdGVuY3kgPSBudWxsO1xuICAgICAgdGhpcy5fdGFyZ2V0TGF0ZW5jeVVwZGF0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMub25UaW1ldXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWVkaWEgPSBfdGhpcy5tZWRpYTtcbiAgICAgICAgdmFyIGxldmVsRGV0YWlscyA9IF90aGlzLmxldmVsRGV0YWlscztcbiAgICAgICAgaWYgKCFtZWRpYSB8fCAhbGV2ZWxEZXRhaWxzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmN1cnJlbnRUaW1lID0gbWVkaWEuY3VycmVudFRpbWU7XG4gICAgICAgIHZhciBsYXRlbmN5ID0gX3RoaXMuY29tcHV0ZUxhdGVuY3koKTtcbiAgICAgICAgaWYgKGxhdGVuY3kgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuX2xhdGVuY3kgPSBsYXRlbmN5O1xuXG4gICAgICAgIC8vIEFkYXB0IHBsYXliYWNrUmF0ZSB0byBtZWV0IHRhcmdldCBsYXRlbmN5IGluIGxvdy1sYXRlbmN5IG1vZGVcbiAgICAgICAgdmFyIF90aGlzJGNvbmZpZyA9IF90aGlzLmNvbmZpZyxcbiAgICAgICAgICBsb3dMYXRlbmN5TW9kZSA9IF90aGlzJGNvbmZpZy5sb3dMYXRlbmN5TW9kZSxcbiAgICAgICAgICBtYXhMaXZlU3luY1BsYXliYWNrUmF0ZSA9IF90aGlzJGNvbmZpZy5tYXhMaXZlU3luY1BsYXliYWNrUmF0ZTtcbiAgICAgICAgaWYgKCFsb3dMYXRlbmN5TW9kZSB8fCBtYXhMaXZlU3luY1BsYXliYWNrUmF0ZSA9PT0gMSB8fCAhbGV2ZWxEZXRhaWxzLmxpdmUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRhcmdldExhdGVuY3kgPSBfdGhpcy50YXJnZXRMYXRlbmN5O1xuICAgICAgICBpZiAodGFyZ2V0TGF0ZW5jeSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGlzdGFuY2VGcm9tVGFyZ2V0ID0gbGF0ZW5jeSAtIHRhcmdldExhdGVuY3k7XG4gICAgICAgIC8vIE9ubHkgYWRqdXN0IHBsYXliYWNrUmF0ZSB3aGVuIHdpdGhpbiBvbmUgdGFyZ2V0IGR1cmF0aW9uIG9mIHRhcmdldExhdGVuY3lcbiAgICAgICAgLy8gYW5kIG1vcmUgdGhhbiBvbmUgc2Vjb25kIGZyb20gdW5kZXItYnVmZmVyaW5nLlxuICAgICAgICAvLyBQbGF5YmFjayBmdXJ0aGVyIHRoYW4gb25lIHRhcmdldCBkdXJhdGlvbiBmcm9tIHRhcmdldCBjYW4gYmUgY29uc2lkZXJlZCBEVlIgcGxheWJhY2suXG4gICAgICAgIHZhciBsaXZlTWluTGF0ZW5jeUR1cmF0aW9uID0gTWF0aC5taW4oX3RoaXMubWF4TGF0ZW5jeSwgdGFyZ2V0TGF0ZW5jeSArIGxldmVsRGV0YWlscy50YXJnZXRkdXJhdGlvbik7XG4gICAgICAgIHZhciBpbkxpdmVSYW5nZSA9IGRpc3RhbmNlRnJvbVRhcmdldCA8IGxpdmVNaW5MYXRlbmN5RHVyYXRpb247XG4gICAgICAgIGlmIChpbkxpdmVSYW5nZSAmJiBkaXN0YW5jZUZyb21UYXJnZXQgPiAwLjA1ICYmIF90aGlzLmZvcndhcmRCdWZmZXJMZW5ndGggPiAxKSB7XG4gICAgICAgICAgdmFyIG1heCA9IE1hdGgubWluKDIsIE1hdGgubWF4KDEuMCwgbWF4TGl2ZVN5bmNQbGF5YmFja1JhdGUpKTtcbiAgICAgICAgICB2YXIgcmF0ZSA9IE1hdGgucm91bmQoMiAvICgxICsgTWF0aC5leHAoLTAuNzUgKiBkaXN0YW5jZUZyb21UYXJnZXQgLSBfdGhpcy5lZGdlU3RhbGxlZCkpICogMjApIC8gMjA7XG4gICAgICAgICAgdmFyIHBsYXliYWNrUmF0ZSA9IE1hdGgubWluKG1heCwgTWF0aC5tYXgoMSwgcmF0ZSkpO1xuICAgICAgICAgIF90aGlzLmNoYW5nZU1lZGlhUGxheWJhY2tSYXRlKG1lZGlhLCBwbGF5YmFja1JhdGUpO1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhLnBsYXliYWNrUmF0ZSAhPT0gMSAmJiBtZWRpYS5wbGF5YmFja1JhdGUgIT09IDApIHtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2VNZWRpYVBsYXliYWNrUmF0ZShtZWRpYSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLmhscyA9IGhscztcbiAgICAgIHRoaXMuY29uZmlnID0gaGxzLmNvbmZpZztcbiAgICAgIHRoaXMucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICB9XG4gICAgdmFyIF9wcm90byA9IExhdGVuY3lDb250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLnVucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMub25NZWRpYURldGFjaGluZygpO1xuICAgICAgdGhpcy5obHMgPSBudWxsO1xuICAgIH07XG4gICAgX3Byb3RvLnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICBpZiAoIWhscykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBobHMub24oRXZlbnRzLk1FRElBX0FUVEFDSEVELCB0aGlzLm9uTWVkaWFBdHRhY2hlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLk1FRElBX0RFVEFDSElORywgdGhpcy5vbk1lZGlhRGV0YWNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUFOSUZFU1RfTE9BRElORywgdGhpcy5vbk1hbmlmZXN0TG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkxFVkVMX1VQREFURUQsIHRoaXMub25MZXZlbFVwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5FUlJPUiwgdGhpcy5vbkVycm9yLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by51bnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGlmICghaGxzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGhscy5vZmYoRXZlbnRzLk1FRElBX0FUVEFDSEVELCB0aGlzLm9uTWVkaWFBdHRhY2hlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NRURJQV9ERVRBQ0hJTkcsIHRoaXMub25NZWRpYURldGFjaGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkxFVkVMX1VQREFURUQsIHRoaXMub25MZXZlbFVwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRVJST1IsIHRoaXMub25FcnJvciwgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NZWRpYUF0dGFjaGVkID0gZnVuY3Rpb24gb25NZWRpYUF0dGFjaGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLm1lZGlhID0gZGF0YS5tZWRpYTtcbiAgICAgIHRoaXMubWVkaWEuYWRkRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsIHRoaXMub25UaW1ldXBkYXRlKTtcbiAgICB9O1xuICAgIF9wcm90by5vbk1lZGlhRGV0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYURldGFjaGluZygpIHtcbiAgICAgIGlmICh0aGlzLm1lZGlhKSB7XG4gICAgICAgIHRoaXMubWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsIHRoaXMub25UaW1ldXBkYXRlKTtcbiAgICAgICAgdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25NYW5pZmVzdExvYWRpbmcgPSBmdW5jdGlvbiBvbk1hbmlmZXN0TG9hZGluZygpIHtcbiAgICAgIHRoaXMuX2xhdGVuY3kgPSBudWxsO1xuICAgICAgdGhpcy5zdGFsbENvdW50ID0gMDtcbiAgICB9O1xuICAgIF9wcm90by5vbkxldmVsVXBkYXRlZCA9IGZ1bmN0aW9uIG9uTGV2ZWxVcGRhdGVkKGV2ZW50LCBfcmVmKSB7XG4gICAgICB2YXIgZGV0YWlscyA9IF9yZWYuZGV0YWlscztcbiAgICAgIGlmIChkZXRhaWxzLmFkdmFuY2VkKSB7XG4gICAgICAgIHRoaXMub25UaW1ldXBkYXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoIWRldGFpbHMubGl2ZSAmJiB0aGlzLm1lZGlhKSB7XG4gICAgICAgIHRoaXMubWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsIHRoaXMub25UaW1ldXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvcihldmVudCwgZGF0YSkge1xuICAgICAgdmFyIF90aGlzJGxldmVsRGV0YWlscztcbiAgICAgIGlmIChkYXRhLmRldGFpbHMgIT09IEVycm9yRGV0YWlscy5CVUZGRVJfU1RBTExFRF9FUlJPUikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnN0YWxsQ291bnQrKztcbiAgICAgIGlmICh0aGlzLmhscyAmJiAoX3RoaXMkbGV2ZWxEZXRhaWxzID0gdGhpcy5sZXZlbERldGFpbHMpICE9IG51bGwgJiYgX3RoaXMkbGV2ZWxEZXRhaWxzLmxpdmUpIHtcbiAgICAgICAgdGhpcy5obHMubG9nZ2VyLndhcm4oJ1tsYXRlbmN5LWNvbnRyb2xsZXJdOiBTdGFsbCBkZXRlY3RlZCwgYWRqdXN0aW5nIHRhcmdldCBsYXRlbmN5Jyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uY2hhbmdlTWVkaWFQbGF5YmFja1JhdGUgPSBmdW5jdGlvbiBjaGFuZ2VNZWRpYVBsYXliYWNrUmF0ZShtZWRpYSwgcGxheWJhY2tSYXRlKSB7XG4gICAgICB2YXIgX3RoaXMkaGxzLCBfdGhpcyR0YXJnZXRMYXRlbmN5O1xuICAgICAgaWYgKG1lZGlhLnBsYXliYWNrUmF0ZSA9PT0gcGxheWJhY2tSYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIChfdGhpcyRobHMgPSB0aGlzLmhscykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGhscy5sb2dnZXIuZGVidWcoXCJbbGF0ZW5jeS1jb250cm9sbGVyXTogbGF0ZW5jeT1cIiArIHRoaXMubGF0ZW5jeS50b0ZpeGVkKDMpICsgXCIsIHRhcmdldExhdGVuY3k9XCIgKyAoKF90aGlzJHRhcmdldExhdGVuY3kgPSB0aGlzLnRhcmdldExhdGVuY3kpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyR0YXJnZXRMYXRlbmN5LnRvRml4ZWQoMykpICsgXCIsIGZvcndhcmRCdWZmZXJMZW5ndGg9XCIgKyB0aGlzLmZvcndhcmRCdWZmZXJMZW5ndGgudG9GaXhlZCgzKSArIFwiOiBhZGp1c3RpbmcgcGxheWJhY2sgcmF0ZSBmcm9tIFwiICsgbWVkaWEucGxheWJhY2tSYXRlICsgXCIgdG8gXCIgKyBwbGF5YmFja1JhdGUpO1xuICAgICAgbWVkaWEucGxheWJhY2tSYXRlID0gcGxheWJhY2tSYXRlO1xuICAgIH07XG4gICAgX3Byb3RvLmVzdGltYXRlTGl2ZUVkZ2UgPSBmdW5jdGlvbiBlc3RpbWF0ZUxpdmVFZGdlKCkge1xuICAgICAgdmFyIGxldmVsRGV0YWlscyA9IHRoaXMubGV2ZWxEZXRhaWxzO1xuICAgICAgaWYgKGxldmVsRGV0YWlscyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZXZlbERldGFpbHMuZWRnZSArIGxldmVsRGV0YWlscy5hZ2U7XG4gICAgfTtcbiAgICBfcHJvdG8uY29tcHV0ZUxhdGVuY3kgPSBmdW5jdGlvbiBjb21wdXRlTGF0ZW5jeSgpIHtcbiAgICAgIHZhciBsaXZlRWRnZSA9IHRoaXMuZXN0aW1hdGVMaXZlRWRnZSgpO1xuICAgICAgaWYgKGxpdmVFZGdlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpdmVFZGdlIC0gdGhpcy5jdXJyZW50VGltZTtcbiAgICB9O1xuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoTGF0ZW5jeUNvbnRyb2xsZXIsIFt7XG4gICAgICBrZXk6IFwibGV2ZWxEZXRhaWxzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIF90aGlzJGhsczI7XG4gICAgICAgIHJldHVybiAoKF90aGlzJGhsczIgPSB0aGlzLmhscykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGhsczIubGF0ZXN0TGV2ZWxEZXRhaWxzKSB8fCBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsYXRlbmN5XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhdGVuY3kgfHwgMDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWF4TGF0ZW5jeVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICAgICAgaWYgKGNvbmZpZy5saXZlTWF4TGF0ZW5jeUR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gY29uZmlnLmxpdmVNYXhMYXRlbmN5RHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxldmVsRGV0YWlscyA9IHRoaXMubGV2ZWxEZXRhaWxzO1xuICAgICAgICByZXR1cm4gbGV2ZWxEZXRhaWxzID8gY29uZmlnLmxpdmVNYXhMYXRlbmN5RHVyYXRpb25Db3VudCAqIGxldmVsRGV0YWlscy50YXJnZXRkdXJhdGlvbiA6IDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInRhcmdldExhdGVuY3lcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgbGV2ZWxEZXRhaWxzID0gdGhpcy5sZXZlbERldGFpbHM7XG4gICAgICAgIGlmIChsZXZlbERldGFpbHMgPT09IG51bGwgfHwgdGhpcy5obHMgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaG9sZEJhY2sgPSBsZXZlbERldGFpbHMuaG9sZEJhY2ssXG4gICAgICAgICAgcGFydEhvbGRCYWNrID0gbGV2ZWxEZXRhaWxzLnBhcnRIb2xkQmFjayxcbiAgICAgICAgICB0YXJnZXRkdXJhdGlvbiA9IGxldmVsRGV0YWlscy50YXJnZXRkdXJhdGlvbjtcbiAgICAgICAgdmFyIF90aGlzJGNvbmZpZzIgPSB0aGlzLmNvbmZpZyxcbiAgICAgICAgICBsaXZlU3luY0R1cmF0aW9uID0gX3RoaXMkY29uZmlnMi5saXZlU3luY0R1cmF0aW9uLFxuICAgICAgICAgIGxpdmVTeW5jRHVyYXRpb25Db3VudCA9IF90aGlzJGNvbmZpZzIubGl2ZVN5bmNEdXJhdGlvbkNvdW50LFxuICAgICAgICAgIGxvd0xhdGVuY3lNb2RlID0gX3RoaXMkY29uZmlnMi5sb3dMYXRlbmN5TW9kZTtcbiAgICAgICAgdmFyIHVzZXJDb25maWcgPSB0aGlzLmhscy51c2VyQ29uZmlnO1xuICAgICAgICB2YXIgdGFyZ2V0TGF0ZW5jeSA9IGxvd0xhdGVuY3lNb2RlID8gcGFydEhvbGRCYWNrIHx8IGhvbGRCYWNrIDogaG9sZEJhY2s7XG4gICAgICAgIGlmICh0aGlzLl90YXJnZXRMYXRlbmN5VXBkYXRlZCB8fCB1c2VyQ29uZmlnLmxpdmVTeW5jRHVyYXRpb24gfHwgdXNlckNvbmZpZy5saXZlU3luY0R1cmF0aW9uQ291bnQgfHwgdGFyZ2V0TGF0ZW5jeSA9PT0gMCkge1xuICAgICAgICAgIHRhcmdldExhdGVuY3kgPSBsaXZlU3luY0R1cmF0aW9uICE9PSB1bmRlZmluZWQgPyBsaXZlU3luY0R1cmF0aW9uIDogbGl2ZVN5bmNEdXJhdGlvbkNvdW50ICogdGFyZ2V0ZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1heExpdmVTeW5jT25TdGFsbEluY3JlYXNlID0gdGFyZ2V0ZHVyYXRpb247XG4gICAgICAgIHJldHVybiB0YXJnZXRMYXRlbmN5ICsgTWF0aC5taW4odGhpcy5zdGFsbENvdW50ICogdGhpcy5jb25maWcubGl2ZVN5bmNPblN0YWxsSW5jcmVhc2UsIG1heExpdmVTeW5jT25TdGFsbEluY3JlYXNlKTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChsYXRlbmN5KSB7XG4gICAgICAgIHRoaXMuc3RhbGxDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuY29uZmlnLmxpdmVTeW5jRHVyYXRpb24gPSBsYXRlbmN5O1xuICAgICAgICB0aGlzLl90YXJnZXRMYXRlbmN5VXBkYXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImxpdmVTeW5jUG9zaXRpb25cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgbGl2ZUVkZ2UgPSB0aGlzLmVzdGltYXRlTGl2ZUVkZ2UoKTtcbiAgICAgICAgdmFyIHRhcmdldExhdGVuY3kgPSB0aGlzLnRhcmdldExhdGVuY3k7XG4gICAgICAgIGlmIChsaXZlRWRnZSA9PT0gbnVsbCB8fCB0YXJnZXRMYXRlbmN5ID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxldmVsRGV0YWlscyA9IHRoaXMubGV2ZWxEZXRhaWxzO1xuICAgICAgICBpZiAobGV2ZWxEZXRhaWxzID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVkZ2UgPSBsZXZlbERldGFpbHMuZWRnZTtcbiAgICAgICAgdmFyIHN5bmNQb3NpdGlvbiA9IGxpdmVFZGdlIC0gdGFyZ2V0TGF0ZW5jeSAtIHRoaXMuZWRnZVN0YWxsZWQ7XG4gICAgICAgIHZhciBtaW4gPSBlZGdlIC0gbGV2ZWxEZXRhaWxzLnRvdGFsZHVyYXRpb247XG4gICAgICAgIHZhciBtYXggPSBlZGdlIC0gKHRoaXMuY29uZmlnLmxvd0xhdGVuY3lNb2RlICYmIGxldmVsRGV0YWlscy5wYXJ0VGFyZ2V0IHx8IGxldmVsRGV0YWlscy50YXJnZXRkdXJhdGlvbik7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIHN5bmNQb3NpdGlvbiksIG1heCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRyaWZ0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGxldmVsRGV0YWlscyA9IHRoaXMubGV2ZWxEZXRhaWxzO1xuICAgICAgICBpZiAobGV2ZWxEZXRhaWxzID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxldmVsRGV0YWlscy5kcmlmdDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZWRnZVN0YWxsZWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgbGV2ZWxEZXRhaWxzID0gdGhpcy5sZXZlbERldGFpbHM7XG4gICAgICAgIGlmIChsZXZlbERldGFpbHMgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWF4TGV2ZWxVcGRhdGVBZ2UgPSAodGhpcy5jb25maWcubG93TGF0ZW5jeU1vZGUgJiYgbGV2ZWxEZXRhaWxzLnBhcnRUYXJnZXQgfHwgbGV2ZWxEZXRhaWxzLnRhcmdldGR1cmF0aW9uKSAqIDM7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChsZXZlbERldGFpbHMuYWdlIC0gbWF4TGV2ZWxVcGRhdGVBZ2UsIDApO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmb3J3YXJkQnVmZmVyTGVuZ3RoXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgICAgdmFyIGxldmVsRGV0YWlscyA9IHRoaXMubGV2ZWxEZXRhaWxzO1xuICAgICAgICBpZiAoIW1lZGlhIHx8ICFsZXZlbERldGFpbHMpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYnVmZmVyZWRSYW5nZXMgPSBtZWRpYS5idWZmZXJlZC5sZW5ndGg7XG4gICAgICAgIHJldHVybiAoYnVmZmVyZWRSYW5nZXMgPyBtZWRpYS5idWZmZXJlZC5lbmQoYnVmZmVyZWRSYW5nZXMgLSAxKSA6IGxldmVsRGV0YWlscy5lZGdlKSAtIHRoaXMuY3VycmVudFRpbWU7XG4gICAgICB9XG4gICAgfV0pO1xuICB9KCk7XG5cbiAgdmFyIExldmVsQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VQbGF5bGlzdENvbnRyb2xsKSB7XG4gICAgZnVuY3Rpb24gTGV2ZWxDb250cm9sbGVyKGhscywgY29udGVudFN0ZWVyaW5nQ29udHJvbGxlcikge1xuICAgICAgdmFyIF90aGlzO1xuICAgICAgX3RoaXMgPSBfQmFzZVBsYXlsaXN0Q29udHJvbGwuY2FsbCh0aGlzLCBobHMsICdsZXZlbC1jb250cm9sbGVyJykgfHwgdGhpcztcbiAgICAgIF90aGlzLl9sZXZlbHMgPSBbXTtcbiAgICAgIF90aGlzLl9maXJzdExldmVsID0gLTE7XG4gICAgICBfdGhpcy5fbWF4QXV0b0xldmVsID0gLTE7XG4gICAgICBfdGhpcy5fc3RhcnRMZXZlbCA9IHZvaWQgMDtcbiAgICAgIF90aGlzLmN1cnJlbnRMZXZlbCA9IG51bGw7XG4gICAgICBfdGhpcy5jdXJyZW50TGV2ZWxJbmRleCA9IC0xO1xuICAgICAgX3RoaXMubWFudWFsTGV2ZWxJbmRleCA9IC0xO1xuICAgICAgX3RoaXMuc3RlZXJpbmcgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5vblBhcnNlZENvbXBsZXRlID0gdm9pZCAwO1xuICAgICAgX3RoaXMuc3RlZXJpbmcgPSBjb250ZW50U3RlZXJpbmdDb250cm9sbGVyO1xuICAgICAgX3RoaXMuX3JlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIF9pbmhlcml0c0xvb3NlKExldmVsQ29udHJvbGxlciwgX0Jhc2VQbGF5bGlzdENvbnRyb2xsKTtcbiAgICB2YXIgX3Byb3RvID0gTGV2ZWxDb250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8uX3JlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gX3JlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9uKEV2ZW50cy5NQU5JRkVTVF9MT0FESU5HLCB0aGlzLm9uTWFuaWZlc3RMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTUFOSUZFU1RfTE9BREVELCB0aGlzLm9uTWFuaWZlc3RMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5MRVZFTF9MT0FERUQsIHRoaXMub25MZXZlbExvYWRlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkxFVkVMU19VUERBVEVELCB0aGlzLm9uTGV2ZWxzVXBkYXRlZCwgdGhpcyk7XG4gICAgICBobHMub24oRXZlbnRzLkZSQUdfQlVGRkVSRUQsIHRoaXMub25GcmFnQnVmZmVyZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5FUlJPUiwgdGhpcy5vbkVycm9yLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by5fdW5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIF91bnJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUFOSUZFU1RfTE9BRElORywgdGhpcy5vbk1hbmlmZXN0TG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5NQU5JRkVTVF9MT0FERUQsIHRoaXMub25NYW5pZmVzdExvYWRlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5MRVZFTF9MT0FERUQsIHRoaXMub25MZXZlbExvYWRlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5MRVZFTFNfVVBEQVRFRCwgdGhpcy5vbkxldmVsc1VwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRlJBR19CVUZGRVJFRCwgdGhpcy5vbkZyYWdCdWZmZXJlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5FUlJPUiwgdGhpcy5vbkVycm9yLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuX3VucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMuc3RlZXJpbmcgPSBudWxsO1xuICAgICAgdGhpcy5yZXNldExldmVscygpO1xuICAgICAgX0Jhc2VQbGF5bGlzdENvbnRyb2xsLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8uc3RvcExvYWQgPSBmdW5jdGlvbiBzdG9wTG9hZCgpIHtcbiAgICAgIHZhciBsZXZlbHMgPSB0aGlzLl9sZXZlbHM7XG5cbiAgICAgIC8vIGNsZWFuIHVwIGxpdmUgbGV2ZWwgZGV0YWlscyB0byBmb3JjZSByZWxvYWQgdGhlbSwgYW5kIHJlc2V0IGxvYWQgZXJyb3JzXG4gICAgICBsZXZlbHMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgbGV2ZWwubG9hZEVycm9yID0gMDtcbiAgICAgICAgbGV2ZWwuZnJhZ21lbnRFcnJvciA9IDA7XG4gICAgICB9KTtcbiAgICAgIF9CYXNlUGxheWxpc3RDb250cm9sbC5wcm90b3R5cGUuc3RvcExvYWQuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by5yZXNldExldmVscyA9IGZ1bmN0aW9uIHJlc2V0TGV2ZWxzKCkge1xuICAgICAgdGhpcy5fc3RhcnRMZXZlbCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMubWFudWFsTGV2ZWxJbmRleCA9IC0xO1xuICAgICAgdGhpcy5jdXJyZW50TGV2ZWxJbmRleCA9IC0xO1xuICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBudWxsO1xuICAgICAgdGhpcy5fbGV2ZWxzID0gW107XG4gICAgICB0aGlzLl9tYXhBdXRvTGV2ZWwgPSAtMTtcbiAgICB9O1xuICAgIF9wcm90by5vbk1hbmlmZXN0TG9hZGluZyA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkaW5nKGV2ZW50LCBkYXRhKSB7XG4gICAgICB0aGlzLnJlc2V0TGV2ZWxzKCk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NYW5pZmVzdExvYWRlZCA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIHByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSA9IHRoaXMuaGxzLmNvbmZpZy5wcmVmZXJNYW5hZ2VkTWVkaWFTb3VyY2U7XG4gICAgICB2YXIgbGV2ZWxzID0gW107XG4gICAgICB2YXIgcmVkdW5kYW50U2V0ID0ge307XG4gICAgICB2YXIgZ2VuZXJhdGVQYXRod2F5U2V0ID0ge307XG4gICAgICB2YXIgcmVzb2x1dGlvbkZvdW5kID0gZmFsc2U7XG4gICAgICB2YXIgdmlkZW9Db2RlY0ZvdW5kID0gZmFsc2U7XG4gICAgICB2YXIgYXVkaW9Db2RlY0ZvdW5kID0gZmFsc2U7XG4gICAgICBkYXRhLmxldmVscy5mb3JFYWNoKGZ1bmN0aW9uIChsZXZlbFBhcnNlZCkge1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IGxldmVsUGFyc2VkLmF0dHJzO1xuICAgICAgICB2YXIgYXVkaW9Db2RlYyA9IGxldmVsUGFyc2VkLmF1ZGlvQ29kZWMsXG4gICAgICAgICAgdmlkZW9Db2RlYyA9IGxldmVsUGFyc2VkLnZpZGVvQ29kZWM7XG4gICAgICAgIGlmIChhdWRpb0NvZGVjKSB7XG4gICAgICAgICAgLy8gUmV0dXJucyBlbXB0eSBhbmQgc2V0IHRvIHVuZGVmaW5lZCBmb3IgJ21wNGEuNDAuMzQnIHdpdGggZmFsbGJhY2sgdG8gJ2F1ZGlvL21wZWcnIFNvdXJjZUJ1ZmZlclxuICAgICAgICAgIGxldmVsUGFyc2VkLmF1ZGlvQ29kZWMgPSBhdWRpb0NvZGVjID0gZ2V0Q29kZWNDb21wYXRpYmxlTmFtZShhdWRpb0NvZGVjLCBwcmVmZXJNYW5hZ2VkTWVkaWFTb3VyY2UpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlkZW9Db2RlYykge1xuICAgICAgICAgIHZpZGVvQ29kZWMgPSBsZXZlbFBhcnNlZC52aWRlb0NvZGVjID0gY29udmVydEFWQzFUb0FWQ09USSh2aWRlb0NvZGVjKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9ubHkga2VlcCBsZXZlbHMgd2l0aCBzdXBwb3J0ZWQgYXVkaW8vdmlkZW8gY29kZWNzXG4gICAgICAgIHZhciB3aWR0aCA9IGxldmVsUGFyc2VkLndpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IGxldmVsUGFyc2VkLmhlaWdodCxcbiAgICAgICAgICB1bmtub3duQ29kZWNzID0gbGV2ZWxQYXJzZWQudW5rbm93bkNvZGVjcztcbiAgICAgICAgdmFyIHVua25vd25VbnN1cHBvcnRlZENvZGVjQ291bnQgPSB1bmtub3duQ29kZWNzID8gdW5rbm93bkNvZGVjcy5sZW5ndGggOiAwO1xuICAgICAgICBpZiAodW5rbm93bkNvZGVjcykge1xuICAgICAgICAgIC8vIFRyZWF0IHVua25vd24gY29kZWMgYXMgYXVkaW8gb3IgdmlkZW8gY29kZWMgYmFzZWQgb24gcGFzc2luZyBgaXNUeXBlU3VwcG9ydGVkYCBjaGVja1xuICAgICAgICAgIC8vIChhbGxvd3MgZm9yIHBsYXliYWNrIG9mIGFueSBzdXBwb3J0ZWQgY29kZWMgZXZlbiBpZiBub3QgaW5kZXhlZCBpbiB1dGlscy9jb2RlY3MpXG4gICAgICAgICAgZm9yICh2YXIgaSA9IHVua25vd25VbnN1cHBvcnRlZENvZGVjQ291bnQ7IGktLTspIHtcbiAgICAgICAgICAgIHZhciB1bmtub3duQ29kZWMgPSB1bmtub3duQ29kZWNzW2ldO1xuICAgICAgICAgICAgaWYgKF90aGlzMi5pc0F1ZGlvU3VwcG9ydGVkKHVua25vd25Db2RlYykpIHtcbiAgICAgICAgICAgICAgbGV2ZWxQYXJzZWQuYXVkaW9Db2RlYyA9IGF1ZGlvQ29kZWMgPSBhdWRpb0NvZGVjID8gYXVkaW9Db2RlYyArIFwiLFwiICsgdW5rbm93bkNvZGVjIDogdW5rbm93bkNvZGVjO1xuICAgICAgICAgICAgICB1bmtub3duVW5zdXBwb3J0ZWRDb2RlY0NvdW50LS07XG4gICAgICAgICAgICAgIHNhbXBsZUVudHJ5Q29kZXNJU08uYXVkaW9bYXVkaW9Db2RlYy5zdWJzdHJpbmcoMCwgNCldID0gMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMyLmlzVmlkZW9TdXBwb3J0ZWQodW5rbm93bkNvZGVjKSkge1xuICAgICAgICAgICAgICBsZXZlbFBhcnNlZC52aWRlb0NvZGVjID0gdmlkZW9Db2RlYyA9IHZpZGVvQ29kZWMgPyB2aWRlb0NvZGVjICsgXCIsXCIgKyB1bmtub3duQ29kZWMgOiB1bmtub3duQ29kZWM7XG4gICAgICAgICAgICAgIHVua25vd25VbnN1cHBvcnRlZENvZGVjQ291bnQtLTtcbiAgICAgICAgICAgICAgc2FtcGxlRW50cnlDb2Rlc0lTTy52aWRlb1t2aWRlb0NvZGVjLnN1YnN0cmluZygwLCA0KV0gPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXNvbHV0aW9uRm91bmQgfHwgKHJlc29sdXRpb25Gb3VuZCA9ICEhKHdpZHRoICYmIGhlaWdodCkpO1xuICAgICAgICB2aWRlb0NvZGVjRm91bmQgfHwgKHZpZGVvQ29kZWNGb3VuZCA9ICEhdmlkZW9Db2RlYyk7XG4gICAgICAgIGF1ZGlvQ29kZWNGb3VuZCB8fCAoYXVkaW9Db2RlY0ZvdW5kID0gISFhdWRpb0NvZGVjKTtcbiAgICAgICAgaWYgKHVua25vd25VbnN1cHBvcnRlZENvZGVjQ291bnQgfHwgYXVkaW9Db2RlYyAmJiAhX3RoaXMyLmlzQXVkaW9TdXBwb3J0ZWQoYXVkaW9Db2RlYykgfHwgdmlkZW9Db2RlYyAmJiAhX3RoaXMyLmlzVmlkZW9TdXBwb3J0ZWQodmlkZW9Db2RlYykpIHtcbiAgICAgICAgICBfdGhpczIubG9nKFwiU29tZSBvciBhbGwgQ09ERUNTIG5vdCBzdXBwb3J0ZWQgXFxcIlwiICsgYXR0cmlidXRlcy5DT0RFQ1MgKyBcIlxcXCJcIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBDT0RFQ1MgPSBhdHRyaWJ1dGVzLkNPREVDUyxcbiAgICAgICAgICBGUkFNRVJBVEUgPSBhdHRyaWJ1dGVzWydGUkFNRS1SQVRFJ10sXG4gICAgICAgICAgSERDUCA9IGF0dHJpYnV0ZXNbJ0hEQ1AtTEVWRUwnXSxcbiAgICAgICAgICBQQVRIV0FZID0gYXR0cmlidXRlc1snUEFUSFdBWS1JRCddLFxuICAgICAgICAgIFJFU09MVVRJT04gPSBhdHRyaWJ1dGVzLlJFU09MVVRJT04sXG4gICAgICAgICAgVklERU9fUkFOR0UgPSBhdHRyaWJ1dGVzWydWSURFTy1SQU5HRSddO1xuICAgICAgICB2YXIgY29udGVudFN0ZWVyaW5nUHJlZml4ID0gKFBBVEhXQVkgfHwgJy4nKSArIFwiLVwiO1xuICAgICAgICB2YXIgbGV2ZWxLZXkgPSBcIlwiICsgY29udGVudFN0ZWVyaW5nUHJlZml4ICsgbGV2ZWxQYXJzZWQuYml0cmF0ZSArIFwiLVwiICsgUkVTT0xVVElPTiArIFwiLVwiICsgRlJBTUVSQVRFICsgXCItXCIgKyBDT0RFQ1MgKyBcIi1cIiArIFZJREVPX1JBTkdFICsgXCItXCIgKyBIRENQO1xuICAgICAgICBpZiAoIXJlZHVuZGFudFNldFtsZXZlbEtleV0pIHtcbiAgICAgICAgICB2YXIgbGV2ZWwgPSBfdGhpczIuY3JlYXRlTGV2ZWwobGV2ZWxQYXJzZWQpO1xuICAgICAgICAgIHJlZHVuZGFudFNldFtsZXZlbEtleV0gPSBsZXZlbDtcbiAgICAgICAgICBnZW5lcmF0ZVBhdGh3YXlTZXRbbGV2ZWxLZXldID0gMTtcbiAgICAgICAgICBsZXZlbHMucHVzaChsZXZlbCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVkdW5kYW50U2V0W2xldmVsS2V5XS51cmkgIT09IGxldmVsUGFyc2VkLnVybCAmJiAhbGV2ZWxQYXJzZWQuYXR0cnNbJ1BBVEhXQVktSUQnXSkge1xuICAgICAgICAgIC8vIEFzc2lnbiBQYXRod2F5IElEcyB0byBSZWR1bmRhbnQgU3RyZWFtcyAoZGVmYXVsdCBQYXRod2F5cyBpcyBcIi5cIi4gUmVkdW5kYW50IFN0cmVhbXMgXCIuLlwiLCBcIi4uLlwiLCBhbmQgc28gb24uKVxuICAgICAgICAgIC8vIENvbnRlbnQgU3RlZXJpbmcgY29udHJvbGxlciB0byBoYW5kbGVzIFBhdGh3YXkgZmFsbGJhY2sgb24gZXJyb3JcbiAgICAgICAgICB2YXIgcGF0aHdheUNvdW50ID0gZ2VuZXJhdGVQYXRod2F5U2V0W2xldmVsS2V5XSArPSAxO1xuICAgICAgICAgIGxldmVsUGFyc2VkLmF0dHJzWydQQVRIV0FZLUlEJ10gPSBuZXcgQXJyYXkocGF0aHdheUNvdW50ICsgMSkuam9pbignLicpO1xuICAgICAgICAgIHZhciBfbGV2ZWwgPSBfdGhpczIuY3JlYXRlTGV2ZWwobGV2ZWxQYXJzZWQpO1xuICAgICAgICAgIHJlZHVuZGFudFNldFtsZXZlbEtleV0gPSBfbGV2ZWw7XG4gICAgICAgICAgbGV2ZWxzLnB1c2goX2xldmVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWR1bmRhbnRTZXRbbGV2ZWxLZXldLmFkZEdyb3VwSWQoJ2F1ZGlvJywgYXR0cmlidXRlcy5BVURJTyk7XG4gICAgICAgICAgcmVkdW5kYW50U2V0W2xldmVsS2V5XS5hZGRHcm91cElkKCd0ZXh0JywgYXR0cmlidXRlcy5TVUJUSVRMRVMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZmlsdGVyQW5kU29ydE1lZGlhT3B0aW9ucyhsZXZlbHMsIGRhdGEsIHJlc29sdXRpb25Gb3VuZCwgdmlkZW9Db2RlY0ZvdW5kLCBhdWRpb0NvZGVjRm91bmQpO1xuICAgIH07XG4gICAgX3Byb3RvLmNyZWF0ZUxldmVsID0gZnVuY3Rpb24gY3JlYXRlTGV2ZWwobGV2ZWxQYXJzZWQpIHtcbiAgICAgIHZhciBsZXZlbCA9IG5ldyBMZXZlbChsZXZlbFBhcnNlZCk7XG4gICAgICB2YXIgc3VwcGxlbWVudGFsID0gbGV2ZWxQYXJzZWQuc3VwcGxlbWVudGFsO1xuICAgICAgaWYgKHN1cHBsZW1lbnRhbCAhPSBudWxsICYmIHN1cHBsZW1lbnRhbC52aWRlb0NvZGVjICYmICF0aGlzLmlzVmlkZW9TdXBwb3J0ZWQoc3VwcGxlbWVudGFsLnZpZGVvQ29kZWMpKSB7XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIlNVUFBMRU1FTlRBTC1DT0RFQ1Mgbm90IHN1cHBvcnRlZCBcXFwiXCIgKyBzdXBwbGVtZW50YWwudmlkZW9Db2RlYyArIFwiXFxcIlwiKTtcbiAgICAgICAgdGhpcy5sb2coZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIGxldmVsLnN1cHBvcnRlZFJlc3VsdCA9IGdldFVuc3VwcG9ydGVkUmVzdWx0KGVycm9yLCBbXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGV2ZWw7XG4gICAgfTtcbiAgICBfcHJvdG8uaXNBdWRpb1N1cHBvcnRlZCA9IGZ1bmN0aW9uIGlzQXVkaW9TdXBwb3J0ZWQoY29kZWMpIHtcbiAgICAgIHJldHVybiBhcmVDb2RlY3NNZWRpYVNvdXJjZVN1cHBvcnRlZChjb2RlYywgJ2F1ZGlvJywgdGhpcy5obHMuY29uZmlnLnByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSk7XG4gICAgfTtcbiAgICBfcHJvdG8uaXNWaWRlb1N1cHBvcnRlZCA9IGZ1bmN0aW9uIGlzVmlkZW9TdXBwb3J0ZWQoY29kZWMpIHtcbiAgICAgIHJldHVybiBhcmVDb2RlY3NNZWRpYVNvdXJjZVN1cHBvcnRlZChjb2RlYywgJ3ZpZGVvJywgdGhpcy5obHMuY29uZmlnLnByZWZlck1hbmFnZWRNZWRpYVNvdXJjZSk7XG4gICAgfTtcbiAgICBfcHJvdG8uZmlsdGVyQW5kU29ydE1lZGlhT3B0aW9ucyA9IGZ1bmN0aW9uIGZpbHRlckFuZFNvcnRNZWRpYU9wdGlvbnMoZmlsdGVyZWRMZXZlbHMsIGRhdGEsIHJlc29sdXRpb25Gb3VuZCwgdmlkZW9Db2RlY0ZvdW5kLCBhdWRpb0NvZGVjRm91bmQpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgdmFyIGF1ZGlvVHJhY2tzID0gW107XG4gICAgICB2YXIgc3VidGl0bGVUcmFja3MgPSBbXTtcbiAgICAgIHZhciBsZXZlbHMgPSBmaWx0ZXJlZExldmVscztcblxuICAgICAgLy8gcmVtb3ZlIGF1ZGlvLW9ubHkgYW5kIGludmFsaWQgdmlkZW8tcmFuZ2UgbGV2ZWxzIGlmIHdlIGFsc28gaGF2ZSBsZXZlbHMgd2l0aCB2aWRlbyBjb2RlY3Mgb3IgUkVTT0xVVElPTiBzaWduYWxsZWRcbiAgICAgIGlmICgocmVzb2x1dGlvbkZvdW5kIHx8IHZpZGVvQ29kZWNGb3VuZCkgJiYgYXVkaW9Db2RlY0ZvdW5kKSB7XG4gICAgICAgIGxldmVscyA9IGxldmVscy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICB2YXIgdmlkZW9Db2RlYyA9IF9yZWYudmlkZW9Db2RlYyxcbiAgICAgICAgICAgIHZpZGVvUmFuZ2UgPSBfcmVmLnZpZGVvUmFuZ2UsXG4gICAgICAgICAgICB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcbiAgICAgICAgICByZXR1cm4gKCEhdmlkZW9Db2RlYyB8fCAhISh3aWR0aCAmJiBoZWlnaHQpKSAmJiBpc1ZpZGVvUmFuZ2UodmlkZW9SYW5nZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGxldmVscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gRGlzcGF0Y2ggZXJyb3IgYWZ0ZXIgTUFOSUZFU1RfTE9BREVEIGlzIGRvbmUgcHJvcGFnYXRpbmdcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzMy5obHMpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gJ25vIGxldmVsIHdpdGggY29tcGF0aWJsZSBjb2RlY3MgZm91bmQgaW4gbWFuaWZlc3QnO1xuICAgICAgICAgICAgdmFyIHJlYXNvbiA9IG1lc3NhZ2U7XG4gICAgICAgICAgICBpZiAoZGF0YS5sZXZlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJlYXNvbiA9IFwib25lIG9yIG1vcmUgQ09ERUNTIGluIHZhcmlhbnQgbm90IHN1cHBvcnRlZDogXCIgKyBzdHJpbmdpZnkoZGF0YS5sZXZlbHMubWFwKGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsZXZlbC5hdHRycy5DT0RFQ1M7XG4gICAgICAgICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheS5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgX3RoaXMzLndhcm4ocmVhc29uKTtcbiAgICAgICAgICAgICAgbWVzc2FnZSArPSBcIiAoXCIgKyByZWFzb24gKyBcIilcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgIF90aGlzMy5obHMudHJpZ2dlcihFdmVudHMuRVJST1IsIHtcbiAgICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5NRURJQV9FUlJPUixcbiAgICAgICAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLk1BTklGRVNUX0lOQ09NUEFUSUJMRV9DT0RFQ1NfRVJST1IsXG4gICAgICAgICAgICAgIGZhdGFsOiB0cnVlLFxuICAgICAgICAgICAgICB1cmw6IGRhdGEudXJsLFxuICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICAgIHJlYXNvbjogcmVhc29uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5hdWRpb1RyYWNrcykge1xuICAgICAgICBhdWRpb1RyYWNrcyA9IGRhdGEuYXVkaW9UcmFja3MuZmlsdGVyKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgICAgIHJldHVybiAhdHJhY2suYXVkaW9Db2RlYyB8fCBfdGhpczMuaXNBdWRpb1N1cHBvcnRlZCh0cmFjay5hdWRpb0NvZGVjKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFzc2lnbiBpZHMgYWZ0ZXIgZmlsdGVyaW5nIGFzIGFycmF5IGluZGljZXMgYnkgZ3JvdXAtaWRcbiAgICAgICAgYXNzaWduVHJhY2tJZHNCeUdyb3VwKGF1ZGlvVHJhY2tzKTtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLnN1YnRpdGxlcykge1xuICAgICAgICBzdWJ0aXRsZVRyYWNrcyA9IGRhdGEuc3VidGl0bGVzO1xuICAgICAgICBhc3NpZ25UcmFja0lkc0J5R3JvdXAoc3VidGl0bGVUcmFja3MpO1xuICAgICAgfVxuICAgICAgLy8gc3RhcnQgYml0cmF0ZSBpcyB0aGUgZmlyc3QgYml0cmF0ZSBvZiB0aGUgbWFuaWZlc3RcbiAgICAgIHZhciB1bnNvcnRlZExldmVscyA9IGxldmVscy5zbGljZSgwKTtcbiAgICAgIC8vIHNvcnQgbGV2ZWxzIGZyb20gbG93ZXN0IHRvIGhpZ2hlc3RcbiAgICAgIGxldmVscy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGlmIChhLmF0dHJzWydIRENQLUxFVkVMJ10gIT09IGIuYXR0cnNbJ0hEQ1AtTEVWRUwnXSkge1xuICAgICAgICAgIHJldHVybiAoYS5hdHRyc1snSERDUC1MRVZFTCddIHx8ICcnKSA+IChiLmF0dHJzWydIRENQLUxFVkVMJ10gfHwgJycpID8gMSA6IC0xO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNvcnQgb24gaGVpZ2h0IGJlZm9yZSBiaXRyYXRlIGZvciBjYXAtbGV2ZWwtY29udHJvbGxlclxuICAgICAgICBpZiAocmVzb2x1dGlvbkZvdW5kICYmIGEuaGVpZ2h0ICE9PSBiLmhlaWdodCkge1xuICAgICAgICAgIHJldHVybiBhLmhlaWdodCAtIGIuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChhLmZyYW1lUmF0ZSAhPT0gYi5mcmFtZVJhdGUpIHtcbiAgICAgICAgICByZXR1cm4gYS5mcmFtZVJhdGUgLSBiLmZyYW1lUmF0ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS52aWRlb1JhbmdlICE9PSBiLnZpZGVvUmFuZ2UpIHtcbiAgICAgICAgICByZXR1cm4gVmlkZW9SYW5nZVZhbHVlcy5pbmRleE9mKGEudmlkZW9SYW5nZSkgLSBWaWRlb1JhbmdlVmFsdWVzLmluZGV4T2YoYi52aWRlb1JhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS52aWRlb0NvZGVjICE9PSBiLnZpZGVvQ29kZWMpIHtcbiAgICAgICAgICB2YXIgdmFsdWVBID0gdmlkZW9Db2RlY1ByZWZlcmVuY2VWYWx1ZShhLnZpZGVvQ29kZWMpO1xuICAgICAgICAgIHZhciB2YWx1ZUIgPSB2aWRlb0NvZGVjUHJlZmVyZW5jZVZhbHVlKGIudmlkZW9Db2RlYyk7XG4gICAgICAgICAgaWYgKHZhbHVlQSAhPT0gdmFsdWVCKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVCIC0gdmFsdWVBO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYS51cmkgPT09IGIudXJpICYmIGEuY29kZWNTZXQgIT09IGIuY29kZWNTZXQpIHtcbiAgICAgICAgICB2YXIgX3ZhbHVlQSA9IGNvZGVjc1NldFNlbGVjdGlvblByZWZlcmVuY2VWYWx1ZShhLmNvZGVjU2V0KTtcbiAgICAgICAgICB2YXIgX3ZhbHVlQiA9IGNvZGVjc1NldFNlbGVjdGlvblByZWZlcmVuY2VWYWx1ZShiLmNvZGVjU2V0KTtcbiAgICAgICAgICBpZiAoX3ZhbHVlQSAhPT0gX3ZhbHVlQikge1xuICAgICAgICAgICAgcmV0dXJuIF92YWx1ZUIgLSBfdmFsdWVBO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYS5hdmVyYWdlQml0cmF0ZSAhPT0gYi5hdmVyYWdlQml0cmF0ZSkge1xuICAgICAgICAgIHJldHVybiBhLmF2ZXJhZ2VCaXRyYXRlIC0gYi5hdmVyYWdlQml0cmF0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0pO1xuICAgICAgdmFyIGZpcnN0TGV2ZWxJblBsYXlsaXN0ID0gdW5zb3J0ZWRMZXZlbHNbMF07XG4gICAgICBpZiAodGhpcy5zdGVlcmluZykge1xuICAgICAgICBsZXZlbHMgPSB0aGlzLnN0ZWVyaW5nLmZpbHRlclBhcnNlZExldmVscyhsZXZlbHMpO1xuICAgICAgICBpZiAobGV2ZWxzLmxlbmd0aCAhPT0gdW5zb3J0ZWRMZXZlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bnNvcnRlZExldmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHVuc29ydGVkTGV2ZWxzW2ldLnBhdGh3YXlJZCA9PT0gbGV2ZWxzWzBdLnBhdGh3YXlJZCkge1xuICAgICAgICAgICAgICBmaXJzdExldmVsSW5QbGF5bGlzdCA9IHVuc29ydGVkTGV2ZWxzW2ldO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2xldmVscyA9IGxldmVscztcblxuICAgICAgLy8gZmluZCBpbmRleCBvZiBmaXJzdCBsZXZlbCBpbiBzb3J0ZWQgbGV2ZWxzXG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGV2ZWxzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBpZiAobGV2ZWxzW19pXSA9PT0gZmlyc3RMZXZlbEluUGxheWxpc3QpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkaGxzJHVzZXJDb25maWc7XG4gICAgICAgICAgdGhpcy5fZmlyc3RMZXZlbCA9IF9pO1xuICAgICAgICAgIHZhciBmaXJzdExldmVsQml0cmF0ZSA9IGZpcnN0TGV2ZWxJblBsYXlsaXN0LmJpdHJhdGU7XG4gICAgICAgICAgdmFyIGJhbmR3aWR0aEVzdGltYXRlID0gdGhpcy5obHMuYmFuZHdpZHRoRXN0aW1hdGU7XG4gICAgICAgICAgdGhpcy5sb2coXCJtYW5pZmVzdCBsb2FkZWQsIFwiICsgbGV2ZWxzLmxlbmd0aCArIFwiIGxldmVsKHMpIGZvdW5kLCBmaXJzdCBiaXRyYXRlOiBcIiArIGZpcnN0TGV2ZWxCaXRyYXRlKTtcbiAgICAgICAgICAvLyBVcGRhdGUgZGVmYXVsdCBid2UgdG8gZmlyc3QgdmFyaWFudCBiaXRyYXRlIGFzIGxvbmcgaXQgaGFzIG5vdCBiZWVuIGNvbmZpZ3VyZWQgb3Igc2V0XG4gICAgICAgICAgaWYgKCgoX3RoaXMkaGxzJHVzZXJDb25maWcgPSB0aGlzLmhscy51c2VyQ29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkaGxzJHVzZXJDb25maWcuYWJyRXdtYURlZmF1bHRFc3RpbWF0ZSkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0aW5nQndFc3RpbWF0ZSA9IE1hdGgubWluKGZpcnN0TGV2ZWxCaXRyYXRlLCB0aGlzLmhscy5jb25maWcuYWJyRXdtYURlZmF1bHRFc3RpbWF0ZU1heCk7XG4gICAgICAgICAgICBpZiAoc3RhcnRpbmdCd0VzdGltYXRlID4gYmFuZHdpZHRoRXN0aW1hdGUgJiYgYmFuZHdpZHRoRXN0aW1hdGUgPT09IHRoaXMuaGxzLmFickV3bWFEZWZhdWx0RXN0aW1hdGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5obHMuYmFuZHdpZHRoRXN0aW1hdGUgPSBzdGFydGluZ0J3RXN0aW1hdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEF1ZGlvIGlzIG9ubHkgYWx0ZXJuYXRlIGlmIG1hbmlmZXN0IGluY2x1ZGUgYSBVUkkgYWxvbmcgd2l0aCB0aGUgYXVkaW8gZ3JvdXAgdGFnLFxuICAgICAgLy8gYW5kIHRoaXMgaXMgbm90IGFuIGF1ZGlvLW9ubHkgc3RyZWFtIHdoZXJlIGxldmVscyBjb250YWluIGF1ZGlvLW9ubHlcbiAgICAgIHZhciBhdWRpb09ubHkgPSBhdWRpb0NvZGVjRm91bmQgJiYgIXZpZGVvQ29kZWNGb3VuZDtcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLmhscy5jb25maWc7XG4gICAgICB2YXIgYWx0QXVkaW9FbmFibGVkID0gISEoY29uZmlnLmF1ZGlvU3RyZWFtQ29udHJvbGxlciAmJiBjb25maWcuYXVkaW9UcmFja0NvbnRyb2xsZXIpO1xuICAgICAgdmFyIGVkYXRhID0ge1xuICAgICAgICBsZXZlbHM6IGxldmVscyxcbiAgICAgICAgYXVkaW9UcmFja3M6IGF1ZGlvVHJhY2tzLFxuICAgICAgICBzdWJ0aXRsZVRyYWNrczogc3VidGl0bGVUcmFja3MsXG4gICAgICAgIHNlc3Npb25EYXRhOiBkYXRhLnNlc3Npb25EYXRhLFxuICAgICAgICBzZXNzaW9uS2V5czogZGF0YS5zZXNzaW9uS2V5cyxcbiAgICAgICAgZmlyc3RMZXZlbDogdGhpcy5fZmlyc3RMZXZlbCxcbiAgICAgICAgc3RhdHM6IGRhdGEuc3RhdHMsXG4gICAgICAgIGF1ZGlvOiBhdWRpb0NvZGVjRm91bmQsXG4gICAgICAgIHZpZGVvOiB2aWRlb0NvZGVjRm91bmQsXG4gICAgICAgIGFsdEF1ZGlvOiBhbHRBdWRpb0VuYWJsZWQgJiYgIWF1ZGlvT25seSAmJiBhdWRpb1RyYWNrcy5zb21lKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuICEhdC51cmw7XG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuTUFOSUZFU1RfUEFSU0VELCBlZGF0YSk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZXZlbnQsIGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLmZhdGFsIHx8ICFkYXRhLmNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEuY29udGV4dC50eXBlID09PSBQbGF5bGlzdENvbnRleHRUeXBlLkxFVkVMICYmIGRhdGEuY29udGV4dC5sZXZlbCA9PT0gdGhpcy5sZXZlbCkge1xuICAgICAgICB0aGlzLmNoZWNrUmV0cnkoZGF0YSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgZXJyb3JzIG9uIHRoZSBzdWNjZXNzZnVsIGxvYWQgb2YgYSBmcmFnbWVudFxuICAgIDtcbiAgICBfcHJvdG8ub25GcmFnQnVmZmVyZWQgPSBmdW5jdGlvbiBvbkZyYWdCdWZmZXJlZChldmVudCwgX3JlZjIpIHtcbiAgICAgIHZhciBmcmFnID0gX3JlZjIuZnJhZztcbiAgICAgIGlmIChmcmFnICE9PSB1bmRlZmluZWQgJiYgZnJhZy50eXBlID09PSBQbGF5bGlzdExldmVsVHlwZS5NQUlOKSB7XG4gICAgICAgIHZhciBlbCA9IGZyYWcuZWxlbWVudGFyeVN0cmVhbXM7XG4gICAgICAgIGlmICghT2JqZWN0LmtleXMoZWwpLnNvbWUoZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gISFlbFt0eXBlXTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxldmVsID0gdGhpcy5fbGV2ZWxzW2ZyYWcubGV2ZWxdO1xuICAgICAgICBpZiAobGV2ZWwgIT0gbnVsbCAmJiBsZXZlbC5sb2FkRXJyb3IpIHtcbiAgICAgICAgICB0aGlzLmxvZyhcIlJlc2V0dGluZyBsZXZlbCBlcnJvciBjb3VudCBvZiBcIiArIGxldmVsLmxvYWRFcnJvciArIFwiIG9uIGZyYWcgYnVmZmVyZWRcIik7XG4gICAgICAgICAgbGV2ZWwubG9hZEVycm9yID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uTGV2ZWxMb2FkZWQgPSBmdW5jdGlvbiBvbkxldmVsTG9hZGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgX2RhdGEkZGVsaXZlcnlEaXJlY3RpMjtcbiAgICAgIHZhciBsZXZlbCA9IGRhdGEubGV2ZWwsXG4gICAgICAgIGRldGFpbHMgPSBkYXRhLmRldGFpbHM7XG4gICAgICB2YXIgY3VyTGV2ZWwgPSBkYXRhLmxldmVsSW5mbztcbiAgICAgIGlmICghY3VyTGV2ZWwpIHtcbiAgICAgICAgdmFyIF9kYXRhJGRlbGl2ZXJ5RGlyZWN0aTtcbiAgICAgICAgdGhpcy53YXJuKFwiSW52YWxpZCBsZXZlbCBpbmRleCBcIiArIGxldmVsKTtcbiAgICAgICAgaWYgKChfZGF0YSRkZWxpdmVyeURpcmVjdGkgPSBkYXRhLmRlbGl2ZXJ5RGlyZWN0aXZlcykgIT0gbnVsbCAmJiBfZGF0YSRkZWxpdmVyeURpcmVjdGkuc2tpcCkge1xuICAgICAgICAgIGRldGFpbHMuZGVsdGFVcGRhdGVGYWlsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gb25seSBwcm9jZXNzIGxldmVsIGxvYWRlZCBldmVudHMgbWF0Y2hpbmcgd2l0aCBleHBlY3RlZCBsZXZlbCBvciBwcmlvciB0byBzd2l0Y2ggd2hlbiBtZWRpYSBwbGF5bGlzdCBpcyBsb2FkZWQgZGlyZWN0bHlcbiAgICAgIGlmIChjdXJMZXZlbCA9PT0gdGhpcy5jdXJyZW50TGV2ZWwgfHwgZGF0YS53aXRob3V0TXVsdGlWYXJpYW50KSB7XG4gICAgICAgIC8vIHJlc2V0IGxldmVsIGxvYWQgZXJyb3IgY291bnRlciBvbiBzdWNjZXNzZnVsIGxldmVsIGxvYWRlZCBvbmx5IGlmIHRoZXJlIGlzIG5vIGlzc3VlcyB3aXRoIGZyYWdtZW50c1xuICAgICAgICBpZiAoY3VyTGV2ZWwuZnJhZ21lbnRFcnJvciA9PT0gMCkge1xuICAgICAgICAgIGN1ckxldmVsLmxvYWRFcnJvciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWdub3JlIG1hdGNoaW5nIGRldGFpbHMgcG9wdWxhdGVkIGJ5IGxvYWRpbmcgYSBNZWRpYSBQbGF5bGlzdCBkaXJlY3RseVxuICAgICAgICB2YXIgcHJldmlvdXNEZXRhaWxzID0gY3VyTGV2ZWwuZGV0YWlscztcbiAgICAgICAgaWYgKHByZXZpb3VzRGV0YWlscyA9PT0gZGF0YS5kZXRhaWxzICYmIHByZXZpb3VzRGV0YWlscy5hZHZhbmNlZCkge1xuICAgICAgICAgIHByZXZpb3VzRGV0YWlscyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBsYXlsaXN0TG9hZGVkKGxldmVsLCBkYXRhLCBwcmV2aW91c0RldGFpbHMpO1xuICAgICAgfSBlbHNlIGlmICgoX2RhdGEkZGVsaXZlcnlEaXJlY3RpMiA9IGRhdGEuZGVsaXZlcnlEaXJlY3RpdmVzKSAhPSBudWxsICYmIF9kYXRhJGRlbGl2ZXJ5RGlyZWN0aTIuc2tpcCkge1xuICAgICAgICAvLyByZWNlaXZlZCBhIGRlbHRhIHBsYXlsaXN0IHVwZGF0ZSB0aGF0IGNhbm5vdCBiZSBtZXJnZWRcbiAgICAgICAgZGV0YWlscy5kZWx0YVVwZGF0ZUZhaWxlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ubG9hZFBsYXlsaXN0ID0gZnVuY3Rpb24gbG9hZFBsYXlsaXN0KGhsc1VybFBhcmFtZXRlcnMpIHtcbiAgICAgIF9CYXNlUGxheWxpc3RDb250cm9sbC5wcm90b3R5cGUubG9hZFBsYXlsaXN0LmNhbGwodGhpcyk7XG4gICAgICBpZiAodGhpcy5zaG91bGRMb2FkUGxheWxpc3QodGhpcy5jdXJyZW50TGV2ZWwpKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVMb2FkaW5nKHRoaXMuY3VycmVudExldmVsLCBobHNVcmxQYXJhbWV0ZXJzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5sb2FkaW5nUGxheWxpc3QgPSBmdW5jdGlvbiBsb2FkaW5nUGxheWxpc3QoY3VycmVudExldmVsLCBobHNVcmxQYXJhbWV0ZXJzKSB7XG4gICAgICBfQmFzZVBsYXlsaXN0Q29udHJvbGwucHJvdG90eXBlLmxvYWRpbmdQbGF5bGlzdC5jYWxsKHRoaXMsIGN1cnJlbnRMZXZlbCwgaGxzVXJsUGFyYW1ldGVycyk7XG4gICAgICB2YXIgdXJsID0gdGhpcy5nZXRVcmxXaXRoRGlyZWN0aXZlcyhjdXJyZW50TGV2ZWwudXJpLCBobHNVcmxQYXJhbWV0ZXJzKTtcbiAgICAgIHZhciBjdXJyZW50TGV2ZWxJbmRleCA9IHRoaXMuY3VycmVudExldmVsSW5kZXg7XG4gICAgICB2YXIgcGF0aHdheUlkID0gY3VycmVudExldmVsLmF0dHJzWydQQVRIV0FZLUlEJ107XG4gICAgICB2YXIgZGV0YWlscyA9IGN1cnJlbnRMZXZlbC5kZXRhaWxzO1xuICAgICAgdmFyIGFnZSA9IGRldGFpbHMgPT0gbnVsbCA/IHZvaWQgMCA6IGRldGFpbHMuYWdlO1xuICAgICAgdGhpcy5sb2coXCJMb2FkaW5nIGxldmVsIGluZGV4IFwiICsgY3VycmVudExldmVsSW5kZXggKyAoKGhsc1VybFBhcmFtZXRlcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGhsc1VybFBhcmFtZXRlcnMubXNuKSAhPT0gdW5kZWZpbmVkID8gJyBhdCBzbiAnICsgaGxzVXJsUGFyYW1ldGVycy5tc24gKyAnIHBhcnQgJyArIGhsc1VybFBhcmFtZXRlcnMucGFydCA6ICcnKSArIChwYXRod2F5SWQgPyAnIFBhdGh3YXkgJyArIHBhdGh3YXlJZCA6ICcnKSArIChhZ2UgJiYgZGV0YWlscy5saXZlID8gJyBhZ2UgJyArIGFnZS50b0ZpeGVkKDEpICsgKGRldGFpbHMudHlwZSA/ICcgJyArIGRldGFpbHMudHlwZSB8fCAnJyA6ICcnKSA6ICcnKSArIFwiIFwiICsgdXJsKTtcbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkxFVkVMX0xPQURJTkcsIHtcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGxldmVsOiBjdXJyZW50TGV2ZWxJbmRleCxcbiAgICAgICAgbGV2ZWxJbmZvOiBjdXJyZW50TGV2ZWwsXG4gICAgICAgIHBhdGh3YXlJZDogY3VycmVudExldmVsLmF0dHJzWydQQVRIV0FZLUlEJ10sXG4gICAgICAgIGlkOiAwLFxuICAgICAgICAvLyBEZXByZWNhdGVkIExldmVsIHVybElkXG4gICAgICAgIGRlbGl2ZXJ5RGlyZWN0aXZlczogaGxzVXJsUGFyYW1ldGVycyB8fCBudWxsXG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5yZW1vdmVMZXZlbCA9IGZ1bmN0aW9uIHJlbW92ZUxldmVsKGxldmVsSW5kZXgpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzLFxuICAgICAgICBfdGhpcyRjdXJyZW50TGV2ZWw7XG4gICAgICBpZiAodGhpcy5fbGV2ZWxzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbGV2ZWxzID0gdGhpcy5fbGV2ZWxzLmZpbHRlcihmdW5jdGlvbiAobGV2ZWwsIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCAhPT0gbGV2ZWxJbmRleCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpczQuc3RlZXJpbmcpIHtcbiAgICAgICAgICBfdGhpczQuc3RlZXJpbmcucmVtb3ZlTGV2ZWwobGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZXZlbCA9PT0gX3RoaXM0LmN1cnJlbnRMZXZlbCkge1xuICAgICAgICAgIF90aGlzNC5jdXJyZW50TGV2ZWwgPSBudWxsO1xuICAgICAgICAgIF90aGlzNC5jdXJyZW50TGV2ZWxJbmRleCA9IC0xO1xuICAgICAgICAgIGlmIChsZXZlbC5kZXRhaWxzKSB7XG4gICAgICAgICAgICBsZXZlbC5kZXRhaWxzLmZyYWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmLmxldmVsID0gLTE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgICByZWFzc2lnbkZyYWdtZW50TGV2ZWxJbmRleGVzKGxldmVscyk7XG4gICAgICB0aGlzLl9sZXZlbHMgPSBsZXZlbHM7XG4gICAgICBpZiAodGhpcy5jdXJyZW50TGV2ZWxJbmRleCA+IC0xICYmIChfdGhpcyRjdXJyZW50TGV2ZWwgPSB0aGlzLmN1cnJlbnRMZXZlbCkgIT0gbnVsbCAmJiBfdGhpcyRjdXJyZW50TGV2ZWwuZGV0YWlscykge1xuICAgICAgICB0aGlzLmN1cnJlbnRMZXZlbEluZGV4ID0gdGhpcy5jdXJyZW50TGV2ZWwuZGV0YWlscy5mcmFnbWVudHNbMF0ubGV2ZWw7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tYW51YWxMZXZlbEluZGV4ID4gLTEpIHtcbiAgICAgICAgdGhpcy5tYW51YWxMZXZlbEluZGV4ID0gdGhpcy5jdXJyZW50TGV2ZWxJbmRleDtcbiAgICAgIH1cbiAgICAgIHZhciBtYXhMZXZlbCA9IGxldmVscy5sZW5ndGggLSAxO1xuICAgICAgdGhpcy5fZmlyc3RMZXZlbCA9IE1hdGgubWluKHRoaXMuX2ZpcnN0TGV2ZWwsIG1heExldmVsKTtcbiAgICAgIGlmICh0aGlzLl9zdGFydExldmVsKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0TGV2ZWwgPSBNYXRoLm1pbih0aGlzLl9zdGFydExldmVsLCBtYXhMZXZlbCk7XG4gICAgICB9XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5MRVZFTFNfVVBEQVRFRCwge1xuICAgICAgICBsZXZlbHM6IGxldmVsc1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25MZXZlbHNVcGRhdGVkID0gZnVuY3Rpb24gb25MZXZlbHNVcGRhdGVkKGV2ZW50LCBfcmVmMykge1xuICAgICAgdmFyIGxldmVscyA9IF9yZWYzLmxldmVscztcbiAgICAgIHRoaXMuX2xldmVscyA9IGxldmVscztcbiAgICB9O1xuICAgIF9wcm90by5jaGVja01heEF1dG9VcGRhdGVkID0gZnVuY3Rpb24gY2hlY2tNYXhBdXRvVXBkYXRlZCgpIHtcbiAgICAgIHZhciBfdGhpcyRobHMgPSB0aGlzLmhscyxcbiAgICAgICAgYXV0b0xldmVsQ2FwcGluZyA9IF90aGlzJGhscy5hdXRvTGV2ZWxDYXBwaW5nLFxuICAgICAgICBtYXhBdXRvTGV2ZWwgPSBfdGhpcyRobHMubWF4QXV0b0xldmVsLFxuICAgICAgICBtYXhIZGNwTGV2ZWwgPSBfdGhpcyRobHMubWF4SGRjcExldmVsO1xuICAgICAgaWYgKHRoaXMuX21heEF1dG9MZXZlbCAhPT0gbWF4QXV0b0xldmVsKSB7XG4gICAgICAgIHRoaXMuX21heEF1dG9MZXZlbCA9IG1heEF1dG9MZXZlbDtcbiAgICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuTUFYX0FVVE9fTEVWRUxfVVBEQVRFRCwge1xuICAgICAgICAgIGF1dG9MZXZlbENhcHBpbmc6IGF1dG9MZXZlbENhcHBpbmcsXG4gICAgICAgICAgbGV2ZWxzOiB0aGlzLmxldmVscyxcbiAgICAgICAgICBtYXhBdXRvTGV2ZWw6IG1heEF1dG9MZXZlbCxcbiAgICAgICAgICBtaW5BdXRvTGV2ZWw6IHRoaXMuaGxzLm1pbkF1dG9MZXZlbCxcbiAgICAgICAgICBtYXhIZGNwTGV2ZWw6IG1heEhkY3BMZXZlbFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoTGV2ZWxDb250cm9sbGVyLCBbe1xuICAgICAga2V5OiBcImxldmVsc1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9sZXZlbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xldmVscztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibG9hZExldmVsT2JqXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudExldmVsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsZXZlbFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRMZXZlbEluZGV4O1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld0xldmVsKSB7XG4gICAgICAgIHZhciBsZXZlbHMgPSB0aGlzLl9sZXZlbHM7XG4gICAgICAgIGlmIChsZXZlbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNoZWNrIGlmIGxldmVsIGlkeCBpcyB2YWxpZFxuICAgICAgICBpZiAobmV3TGV2ZWwgPCAwIHx8IG5ld0xldmVsID49IGxldmVscy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBpbnZhbGlkIGxldmVsIGlkIGdpdmVuLCB0cmlnZ2VyIGVycm9yXG4gICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdpbnZhbGlkIGxldmVsIGlkeCcpO1xuICAgICAgICAgIHZhciBmYXRhbCA9IG5ld0xldmVsIDwgMDtcbiAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwge1xuICAgICAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5PVEhFUl9FUlJPUixcbiAgICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5MRVZFTF9TV0lUQ0hfRVJST1IsXG4gICAgICAgICAgICBsZXZlbDogbmV3TGV2ZWwsXG4gICAgICAgICAgICBmYXRhbDogZmF0YWwsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICByZWFzb246IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoZmF0YWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3TGV2ZWwgPSBNYXRoLm1pbihuZXdMZXZlbCwgbGV2ZWxzLmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsYXN0TGV2ZWxJbmRleCA9IHRoaXMuY3VycmVudExldmVsSW5kZXg7XG4gICAgICAgIHZhciBsYXN0TGV2ZWwgPSB0aGlzLmN1cnJlbnRMZXZlbDtcbiAgICAgICAgdmFyIGxhc3RQYXRod2F5SWQgPSBsYXN0TGV2ZWwgPyBsYXN0TGV2ZWwuYXR0cnNbJ1BBVEhXQVktSUQnXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGxldmVsID0gbGV2ZWxzW25ld0xldmVsXTtcbiAgICAgICAgdmFyIHBhdGh3YXlJZCA9IGxldmVsLmF0dHJzWydQQVRIV0FZLUlEJ107XG4gICAgICAgIHRoaXMuY3VycmVudExldmVsSW5kZXggPSBuZXdMZXZlbDtcbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgaWYgKGxhc3RMZXZlbEluZGV4ID09PSBuZXdMZXZlbCAmJiBsYXN0TGV2ZWwgJiYgbGFzdFBhdGh3YXlJZCA9PT0gcGF0aHdheUlkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nKFwiU3dpdGNoaW5nIHRvIGxldmVsIFwiICsgbmV3TGV2ZWwgKyBcIiAoXCIgKyAobGV2ZWwuaGVpZ2h0ID8gbGV2ZWwuaGVpZ2h0ICsgJ3AgJyA6ICcnKSArIChsZXZlbC52aWRlb1JhbmdlID8gbGV2ZWwudmlkZW9SYW5nZSArICcgJyA6ICcnKSArIChsZXZlbC5jb2RlY1NldCA/IGxldmVsLmNvZGVjU2V0ICsgJyAnIDogJycpICsgXCJAXCIgKyBsZXZlbC5iaXRyYXRlICsgXCIpXCIgKyAocGF0aHdheUlkID8gJyB3aXRoIFBhdGh3YXkgJyArIHBhdGh3YXlJZCA6ICcnKSArIFwiIGZyb20gbGV2ZWwgXCIgKyBsYXN0TGV2ZWxJbmRleCArIChsYXN0UGF0aHdheUlkID8gJyB3aXRoIFBhdGh3YXkgJyArIGxhc3RQYXRod2F5SWQgOiAnJykpO1xuICAgICAgICB2YXIgbGV2ZWxTd2l0Y2hpbmdEYXRhID0ge1xuICAgICAgICAgIGxldmVsOiBuZXdMZXZlbCxcbiAgICAgICAgICBhdHRyczogbGV2ZWwuYXR0cnMsXG4gICAgICAgICAgZGV0YWlsczogbGV2ZWwuZGV0YWlscyxcbiAgICAgICAgICBiaXRyYXRlOiBsZXZlbC5iaXRyYXRlLFxuICAgICAgICAgIGF2ZXJhZ2VCaXRyYXRlOiBsZXZlbC5hdmVyYWdlQml0cmF0ZSxcbiAgICAgICAgICBtYXhCaXRyYXRlOiBsZXZlbC5tYXhCaXRyYXRlLFxuICAgICAgICAgIHJlYWxCaXRyYXRlOiBsZXZlbC5yZWFsQml0cmF0ZSxcbiAgICAgICAgICB3aWR0aDogbGV2ZWwud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBsZXZlbC5oZWlnaHQsXG4gICAgICAgICAgY29kZWNTZXQ6IGxldmVsLmNvZGVjU2V0LFxuICAgICAgICAgIGF1ZGlvQ29kZWM6IGxldmVsLmF1ZGlvQ29kZWMsXG4gICAgICAgICAgdmlkZW9Db2RlYzogbGV2ZWwudmlkZW9Db2RlYyxcbiAgICAgICAgICBhdWRpb0dyb3VwczogbGV2ZWwuYXVkaW9Hcm91cHMsXG4gICAgICAgICAgc3VidGl0bGVHcm91cHM6IGxldmVsLnN1YnRpdGxlR3JvdXBzLFxuICAgICAgICAgIGxvYWRlZDogbGV2ZWwubG9hZGVkLFxuICAgICAgICAgIGxvYWRFcnJvcjogbGV2ZWwubG9hZEVycm9yLFxuICAgICAgICAgIGZyYWdtZW50RXJyb3I6IGxldmVsLmZyYWdtZW50RXJyb3IsXG4gICAgICAgICAgbmFtZTogbGV2ZWwubmFtZSxcbiAgICAgICAgICBpZDogbGV2ZWwuaWQsXG4gICAgICAgICAgdXJpOiBsZXZlbC51cmksXG4gICAgICAgICAgdXJsOiBsZXZlbC51cmwsXG4gICAgICAgICAgdXJsSWQ6IDAsXG4gICAgICAgICAgYXVkaW9Hcm91cElkczogbGV2ZWwuYXVkaW9Hcm91cElkcyxcbiAgICAgICAgICB0ZXh0R3JvdXBJZHM6IGxldmVsLnRleHRHcm91cElkc1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5MRVZFTF9TV0lUQ0hJTkcsIGxldmVsU3dpdGNoaW5nRGF0YSk7XG4gICAgICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gbG9hZCBwbGF5bGlzdCBmb3IgdGhpcyBsZXZlbFxuICAgICAgICB2YXIgbGV2ZWxEZXRhaWxzID0gbGV2ZWwuZGV0YWlscztcbiAgICAgICAgaWYgKCFsZXZlbERldGFpbHMgfHwgbGV2ZWxEZXRhaWxzLmxpdmUpIHtcbiAgICAgICAgICAvLyBsZXZlbCBub3QgcmV0cmlldmVkIHlldCwgb3IgbGl2ZSBwbGF5bGlzdCB3ZSBuZWVkIHRvIChyZSlsb2FkIGl0XG4gICAgICAgICAgdmFyIGhsc1VybFBhcmFtZXRlcnMgPSB0aGlzLnN3aXRjaFBhcmFtcyhsZXZlbC51cmksIGxhc3RMZXZlbCA9PSBudWxsID8gdm9pZCAwIDogbGFzdExldmVsLmRldGFpbHMsIGxldmVsRGV0YWlscyk7XG4gICAgICAgICAgdGhpcy5sb2FkUGxheWxpc3QoaGxzVXJsUGFyYW1ldGVycyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWFudWFsTGV2ZWxcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYW51YWxMZXZlbEluZGV4O1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld0xldmVsKSB7XG4gICAgICAgIHRoaXMubWFudWFsTGV2ZWxJbmRleCA9IG5ld0xldmVsO1xuICAgICAgICBpZiAodGhpcy5fc3RhcnRMZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5fc3RhcnRMZXZlbCA9IG5ld0xldmVsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdMZXZlbCAhPT0gLTEpIHtcbiAgICAgICAgICB0aGlzLmxldmVsID0gbmV3TGV2ZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZmlyc3RMZXZlbFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maXJzdExldmVsO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld0xldmVsKSB7XG4gICAgICAgIHRoaXMuX2ZpcnN0TGV2ZWwgPSBuZXdMZXZlbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RhcnRMZXZlbFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIC8vIFNldHRpbmcgaGxzLnN0YXJ0TGV2ZWwgKHRoaXMuX3N0YXJ0TGV2ZWwpIG92ZXJyaWRlcyBjb25maWcuc3RhcnRMZXZlbFxuICAgICAgICBpZiAodGhpcy5fc3RhcnRMZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIGNvbmZpZ1N0YXJ0TGV2ZWwgPSB0aGlzLmhscy5jb25maWcuc3RhcnRMZXZlbDtcbiAgICAgICAgICBpZiAoY29uZmlnU3RhcnRMZXZlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnU3RhcnRMZXZlbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaGxzLmZpcnN0QXV0b0xldmVsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFydExldmVsO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld0xldmVsKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0TGV2ZWwgPSBuZXdMZXZlbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGF0aHdheXNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5zdGVlcmluZykge1xuICAgICAgICAgIHJldHVybiB0aGlzLnN0ZWVyaW5nLnBhdGh3YXlzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwYXRod2F5UHJpb3JpdHlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5zdGVlcmluZykge1xuICAgICAgICAgIHJldHVybiB0aGlzLnN0ZWVyaW5nLnBhdGh3YXlQcmlvcml0eTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChwYXRod2F5UHJpb3JpdHkpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RlZXJpbmcpIHtcbiAgICAgICAgICB2YXIgcGF0aHdheXNMaXN0ID0gdGhpcy5zdGVlcmluZy5wYXRod2F5cygpO1xuICAgICAgICAgIHZhciBmaWx0ZXJlZFBhdGh3YXlQcmlvcml0eSA9IHBhdGh3YXlQcmlvcml0eS5maWx0ZXIoZnVuY3Rpb24gKHBhdGh3YXlJZCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGh3YXlzTGlzdC5pbmRleE9mKHBhdGh3YXlJZCkgIT09IC0xO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChwYXRod2F5UHJpb3JpdHkubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgdGhpcy53YXJuKFwicGF0aHdheVByaW9yaXR5IFwiICsgcGF0aHdheVByaW9yaXR5ICsgXCIgc2hvdWxkIGNvbnRhaW4gYXQgbGVhc3Qgb25lIHBhdGh3YXkgZnJvbSBsaXN0OiBcIiArIHBhdGh3YXlzTGlzdCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc3RlZXJpbmcucGF0aHdheVByaW9yaXR5ID0gZmlsdGVyZWRQYXRod2F5UHJpb3JpdHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibmV4dExvYWRMZXZlbFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLm1hbnVhbExldmVsSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWFudWFsTGV2ZWxJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5obHMubmV4dEF1dG9MZXZlbDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5leHRMZXZlbCkge1xuICAgICAgICB0aGlzLmxldmVsID0gbmV4dExldmVsO1xuICAgICAgICBpZiAodGhpcy5tYW51YWxMZXZlbEluZGV4ID09PSAtMSkge1xuICAgICAgICAgIHRoaXMuaGxzLm5leHRBdXRvTGV2ZWwgPSBuZXh0TGV2ZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG4gIH0oQmFzZVBsYXlsaXN0Q29udHJvbGxlcik7XG4gIGZ1bmN0aW9uIGFzc2lnblRyYWNrSWRzQnlHcm91cCh0cmFja3MpIHtcbiAgICB2YXIgZ3JvdXBzID0ge307XG4gICAgdHJhY2tzLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICB2YXIgZ3JvdXBJZCA9IHRyYWNrLmdyb3VwSWQgfHwgJyc7XG4gICAgICB0cmFjay5pZCA9IGdyb3Vwc1tncm91cElkXSA9IGdyb3Vwc1tncm91cElkXSB8fCAwO1xuICAgICAgZ3JvdXBzW2dyb3VwSWRdKys7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTb3VyY2VCdWZmZXIoKSB7XG4gICAgcmV0dXJuIHNlbGYuU291cmNlQnVmZmVyIHx8IHNlbGYuV2ViS2l0U291cmNlQnVmZmVyO1xuICB9XG4gIGZ1bmN0aW9uIGlzTVNFU3VwcG9ydGVkKCkge1xuICAgIHZhciBtZWRpYVNvdXJjZSA9IGdldE1lZGlhU291cmNlKCk7XG4gICAgaWYgKCFtZWRpYVNvdXJjZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGlmIFNvdXJjZUJ1ZmZlciBpcyBleHBvc2VkIGVuc3VyZSBpdHMgQVBJIGlzIHZhbGlkXG4gICAgLy8gT2xkZXIgYnJvd3NlcnMgZG8gbm90IGV4cG9zZSBTb3VyY2VCdWZmZXIgZ2xvYmFsbHkgc28gY2hlY2tpbmcgU291cmNlQnVmZmVyLnByb3RvdHlwZSBpcyBpbXBvc3NpYmxlXG4gICAgdmFyIHNvdXJjZUJ1ZmZlciA9IGdldFNvdXJjZUJ1ZmZlcigpO1xuICAgIHJldHVybiAhc291cmNlQnVmZmVyIHx8IHNvdXJjZUJ1ZmZlci5wcm90b3R5cGUgJiYgdHlwZW9mIHNvdXJjZUJ1ZmZlci5wcm90b3R5cGUuYXBwZW5kQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzb3VyY2VCdWZmZXIucHJvdG90eXBlLnJlbW92ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuICBmdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcbiAgICBpZiAoIWlzTVNFU3VwcG9ydGVkKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIG1lZGlhU291cmNlID0gZ2V0TWVkaWFTb3VyY2UoKTtcbiAgICByZXR1cm4gdHlwZW9mIChtZWRpYVNvdXJjZSA9PSBudWxsID8gdm9pZCAwIDogbWVkaWFTb3VyY2UuaXNUeXBlU3VwcG9ydGVkKSA9PT0gJ2Z1bmN0aW9uJyAmJiAoWydhdmMxLjQyRTAxRSxtcDRhLjQwLjInLCAnYXYwMS4wLjAxTS4wOCcsICd2cDA5LjAwLjUwLjA4J10uc29tZShmdW5jdGlvbiAoY29kZWNzRm9yVmlkZW9Db250YWluZXIpIHtcbiAgICAgIHJldHVybiBtZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQobWltZVR5cGVGb3JDb2RlYyhjb2RlY3NGb3JWaWRlb0NvbnRhaW5lciwgJ3ZpZGVvJykpO1xuICAgIH0pIHx8IFsnbXA0YS40MC4yJywgJ2ZMYUMnXS5zb21lKGZ1bmN0aW9uIChjb2RlY0ZvckF1ZGlvQ29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gbWVkaWFTb3VyY2UuaXNUeXBlU3VwcG9ydGVkKG1pbWVUeXBlRm9yQ29kZWMoY29kZWNGb3JBdWRpb0NvbnRhaW5lciwgJ2F1ZGlvJykpO1xuICAgIH0pKTtcbiAgfVxuICBmdW5jdGlvbiBjaGFuZ2VUeXBlU3VwcG9ydGVkKCkge1xuICAgIHZhciBfc291cmNlQnVmZmVyJHByb3RvdHk7XG4gICAgdmFyIHNvdXJjZUJ1ZmZlciA9IGdldFNvdXJjZUJ1ZmZlcigpO1xuICAgIHJldHVybiB0eXBlb2YgKHNvdXJjZUJ1ZmZlciA9PSBudWxsID8gdm9pZCAwIDogKF9zb3VyY2VCdWZmZXIkcHJvdG90eSA9IHNvdXJjZUJ1ZmZlci5wcm90b3R5cGUpID09IG51bGwgPyB2b2lkIDAgOiBfc291cmNlQnVmZmVyJHByb3RvdHkuY2hhbmdlVHlwZSkgPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICB2YXIgVElDS19JTlRFUlZBTCA9IDEwMDsgLy8gaG93IG9mdGVuIHRvIHRpY2sgaW4gbXNcbiAgdmFyIFN0cmVhbUNvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlU3RyZWFtQ29udHJvbGxlcikge1xuICAgIGZ1bmN0aW9uIFN0cmVhbUNvbnRyb2xsZXIoaGxzLCBmcmFnbWVudFRyYWNrZXIsIGtleUxvYWRlcikge1xuICAgICAgdmFyIF90aGlzO1xuICAgICAgX3RoaXMgPSBfQmFzZVN0cmVhbUNvbnRyb2xsZXIuY2FsbCh0aGlzLCBobHMsIGZyYWdtZW50VHJhY2tlciwga2V5TG9hZGVyLCAnc3RyZWFtLWNvbnRyb2xsZXInLCBQbGF5bGlzdExldmVsVHlwZS5NQUlOKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuYXVkaW9Db2RlY1N3YXAgPSBmYWxzZTtcbiAgICAgIF90aGlzLmxldmVsID0gLTE7XG4gICAgICBfdGhpcy5fZm9yY2VTdGFydExvYWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLl9oYXNFbm91Z2hUb1N0YXJ0ID0gZmFsc2U7XG4gICAgICBfdGhpcy5hbHRBdWRpbyA9IDA7XG4gICAgICBfdGhpcy5hdWRpb09ubHkgPSBmYWxzZTtcbiAgICAgIF90aGlzLmZyYWdQbGF5aW5nID0gbnVsbDtcbiAgICAgIF90aGlzLmZyYWdMYXN0S2JwcyA9IDA7XG4gICAgICBfdGhpcy5jb3VsZEJhY2t0cmFjayA9IGZhbHNlO1xuICAgICAgX3RoaXMuYmFja3RyYWNrRnJhZ21lbnQgPSBudWxsO1xuICAgICAgX3RoaXMuYXVkaW9Db2RlY1N3aXRjaCA9IGZhbHNlO1xuICAgICAgX3RoaXMudmlkZW9CdWZmZXIgPSBudWxsO1xuICAgICAgX3RoaXMub25NZWRpYVBsYXlpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHRpY2sgdG8gc3BlZWQgdXAgRlJBR19DSEFOR0VEIHRyaWdnZXJpbmdcbiAgICAgICAgX3RoaXMudGljaygpO1xuICAgICAgfTtcbiAgICAgIF90aGlzLm9uTWVkaWFTZWVrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtZWRpYSA9IF90aGlzLm1lZGlhO1xuICAgICAgICB2YXIgY3VycmVudFRpbWUgPSBtZWRpYSA/IG1lZGlhLmN1cnJlbnRUaW1lIDogbnVsbDtcbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lID09PSBudWxsIHx8ICFpc0Zpbml0ZU51bWJlcihjdXJyZW50VGltZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMubG9nKFwiTWVkaWEgc2Vla2VkIHRvIFwiICsgY3VycmVudFRpbWUudG9GaXhlZCgzKSk7XG5cbiAgICAgICAgLy8gSWYgc2Vla2VkIHdhcyBpc3N1ZWQgYmVmb3JlIGJ1ZmZlciB3YXMgYXBwZW5kZWQgZG8gbm90IHRpY2sgaW1tZWRpYXRlbHlcbiAgICAgICAgaWYgKCFfdGhpcy5nZXRCdWZmZXJlZEZyYWcoY3VycmVudFRpbWUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBidWZmZXJJbmZvID0gX3RoaXMuZ2V0RndkQnVmZmVySW5mb0F0UG9zKG1lZGlhLCBjdXJyZW50VGltZSwgUGxheWxpc3RMZXZlbFR5cGUuTUFJTiwgMCk7XG4gICAgICAgIGlmIChidWZmZXJJbmZvID09PSBudWxsIHx8IGJ1ZmZlckluZm8ubGVuID09PSAwKSB7XG4gICAgICAgICAgX3RoaXMud2FybihcIk1haW4gZm9yd2FyZCBidWZmZXIgbGVuZ3RoIGF0IFwiICsgY3VycmVudFRpbWUgKyBcIiBvbiBcXFwic2Vla2VkXFxcIiBldmVudCBcIiArIChidWZmZXJJbmZvID8gYnVmZmVySW5mby5sZW4gOiAnZW1wdHknKSArIFwiKVwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aWNrIHRvIHNwZWVkIHVwIEZSQUdfQ0hBTkdFRCB0cmlnZ2VyaW5nXG4gICAgICAgIF90aGlzLnRpY2soKTtcbiAgICAgIH07XG4gICAgICBfdGhpcy5yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBfaW5oZXJpdHNMb29zZShTdHJlYW1Db250cm9sbGVyLCBfQmFzZVN0cmVhbUNvbnRyb2xsZXIpO1xuICAgIHZhciBfcHJvdG8gPSBTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZTtcbiAgICBfcHJvdG8ucmVnaXN0ZXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUucmVnaXN0ZXJMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGhscy5vbihFdmVudHMuTUFOSUZFU1RfUEFSU0VELCB0aGlzLm9uTWFuaWZlc3RQYXJzZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5MRVZFTF9MT0FESU5HLCB0aGlzLm9uTGV2ZWxMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTEVWRUxfTE9BREVELCB0aGlzLm9uTGV2ZWxMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5GUkFHX0xPQURfRU1FUkdFTkNZX0FCT1JURUQsIHRoaXMub25GcmFnTG9hZEVtZXJnZW5jeUFib3J0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5BVURJT19UUkFDS19TV0lUQ0hJTkcsIHRoaXMub25BdWRpb1RyYWNrU3dpdGNoaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuQVVESU9fVFJBQ0tfU1dJVENIRUQsIHRoaXMub25BdWRpb1RyYWNrU3dpdGNoZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5CVUZGRVJfQ1JFQVRFRCwgdGhpcy5vbkJ1ZmZlckNyZWF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5CVUZGRVJfRkxVU0hFRCwgdGhpcy5vbkJ1ZmZlckZsdXNoZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5MRVZFTFNfVVBEQVRFRCwgdGhpcy5vbkxldmVsc1VwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5GUkFHX0JVRkZFUkVELCB0aGlzLm9uRnJhZ0J1ZmZlcmVkLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by51bnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUudW5yZWdpc3Rlckxpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgaGxzLm9mZihFdmVudHMuTUFOSUZFU1RfUEFSU0VELCB0aGlzLm9uTWFuaWZlc3RQYXJzZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTEVWRUxfTE9BREVELCB0aGlzLm9uTGV2ZWxMb2FkZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRlJBR19MT0FEX0VNRVJHRU5DWV9BQk9SVEVELCB0aGlzLm9uRnJhZ0xvYWRFbWVyZ2VuY3lBYm9ydGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkFVRElPX1RSQUNLX1NXSVRDSElORywgdGhpcy5vbkF1ZGlvVHJhY2tTd2l0Y2hpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuQVVESU9fVFJBQ0tfU1dJVENIRUQsIHRoaXMub25BdWRpb1RyYWNrU3dpdGNoZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuQlVGRkVSX0NSRUFURUQsIHRoaXMub25CdWZmZXJDcmVhdGVkLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkJVRkZFUl9GTFVTSEVELCB0aGlzLm9uQnVmZmVyRmx1c2hlZCwgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5MRVZFTFNfVVBEQVRFRCwgdGhpcy5vbkxldmVsc1VwZGF0ZWQsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuRlJBR19CVUZGRVJFRCwgdGhpcy5vbkZyYWdCdWZmZXJlZCwgdGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25IYW5kbGVyRGVzdHJveWluZyA9IGZ1bmN0aW9uIG9uSGFuZGxlckRlc3Ryb3lpbmcoKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLm9uTWVkaWFQbGF5aW5nID0gdGhpcy5vbk1lZGlhU2Vla2VkID0gbnVsbDtcbiAgICAgIHRoaXMudW5yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgICAgX0Jhc2VTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5vbkhhbmRsZXJEZXN0cm95aW5nLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBfcHJvdG8uc3RhcnRMb2FkID0gZnVuY3Rpb24gc3RhcnRMb2FkKHN0YXJ0UG9zaXRpb24sIHNraXBTZWVrVG9TdGFydFBvc2l0aW9uKSB7XG4gICAgICBpZiAodGhpcy5sZXZlbHMpIHtcbiAgICAgICAgdmFyIGxhc3RDdXJyZW50VGltZSA9IHRoaXMubGFzdEN1cnJlbnRUaW1lLFxuICAgICAgICAgIGhscyA9IHRoaXMuaGxzO1xuICAgICAgICB0aGlzLnN0b3BMb2FkKCk7XG4gICAgICAgIHRoaXMuc2V0SW50ZXJ2YWwoVElDS19JTlRFUlZBTCk7XG4gICAgICAgIHRoaXMubGV2ZWwgPSAtMTtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCkge1xuICAgICAgICAgIC8vIGRldGVybWluZSBsb2FkIGxldmVsXG4gICAgICAgICAgdmFyIHN0YXJ0TGV2ZWwgPSBobHMuc3RhcnRMZXZlbDtcbiAgICAgICAgICBpZiAoc3RhcnRMZXZlbCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChobHMuY29uZmlnLnRlc3RCYW5kd2lkdGggJiYgdGhpcy5sZXZlbHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAvLyAtMSA6IGd1ZXNzIHN0YXJ0IExldmVsIGJ5IGRvaW5nIGEgYml0cmF0ZSB0ZXN0IGJ5IGxvYWRpbmcgZmlyc3QgZnJhZ21lbnQgb2YgbG93ZXN0IHF1YWxpdHkgbGV2ZWxcbiAgICAgICAgICAgICAgc3RhcnRMZXZlbCA9IDA7XG4gICAgICAgICAgICAgIHRoaXMuYml0cmF0ZVRlc3QgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RhcnRMZXZlbCA9IGhscy5maXJzdEF1dG9MZXZlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gc2V0IG5ldyBsZXZlbCB0byBwbGF5bGlzdCBsb2FkZXIgOiB0aGlzIHdpbGwgdHJpZ2dlciBzdGFydCBsZXZlbCBsb2FkXG4gICAgICAgICAgLy8gaGxzLm5leHRMb2FkTGV2ZWwgcmVtYWlucyB1bnRpbCBpdCBpcyBzZXQgdG8gYSBuZXcgdmFsdWUgb3IgdW50aWwgYSBuZXcgZnJhZyBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkXG4gICAgICAgICAgaGxzLm5leHRMb2FkTGV2ZWwgPSBzdGFydExldmVsO1xuICAgICAgICAgIHRoaXMubGV2ZWwgPSBobHMubG9hZExldmVsO1xuICAgICAgICAgIHRoaXMuX2hhc0Vub3VnaFRvU3RhcnQgPSAhIXNraXBTZWVrVG9TdGFydFBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHN0YXJ0UG9zaXRpb24gdW5kZWZpbmVkIGJ1dCBsYXN0Q3VycmVudFRpbWUgc2V0LCBzZXQgc3RhcnRQb3NpdGlvbiB0byBsYXN0IGN1cnJlbnRUaW1lXG4gICAgICAgIGlmIChsYXN0Q3VycmVudFRpbWUgPiAwICYmIHN0YXJ0UG9zaXRpb24gPT09IC0xICYmICFza2lwU2Vla1RvU3RhcnRQb3NpdGlvbikge1xuICAgICAgICAgIHRoaXMubG9nKFwiT3ZlcnJpZGUgc3RhcnRQb3NpdGlvbiB3aXRoIGxhc3RDdXJyZW50VGltZSBAXCIgKyBsYXN0Q3VycmVudFRpbWUudG9GaXhlZCgzKSk7XG4gICAgICAgICAgc3RhcnRQb3NpdGlvbiA9IGxhc3RDdXJyZW50VGltZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gdGhpcy5sYXN0Q3VycmVudFRpbWUgPSBzdGFydFBvc2l0aW9uICsgdGhpcy50aW1lbGluZU9mZnNldDtcbiAgICAgICAgdGhpcy5zdGFydFBvc2l0aW9uID0gc2tpcFNlZWtUb1N0YXJ0UG9zaXRpb24gPyAtMSA6IHN0YXJ0UG9zaXRpb247XG4gICAgICAgIHRoaXMudGljaygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZm9yY2VTdGFydExvYWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU1RPUFBFRDtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5zdG9wTG9hZCA9IGZ1bmN0aW9uIHN0b3BMb2FkKCkge1xuICAgICAgdGhpcy5fZm9yY2VTdGFydExvYWQgPSBmYWxzZTtcbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUuc3RvcExvYWQuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by5kb1RpY2sgPSBmdW5jdGlvbiBkb1RpY2soKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgY2FzZSBTdGF0ZS5XQUlUSU5HX0xFVkVMOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBsZXZlbHMgPSB0aGlzLmxldmVscyxcbiAgICAgICAgICAgICAgbGV2ZWwgPSB0aGlzLmxldmVsO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRMZXZlbCA9IGxldmVscyA9PSBudWxsID8gdm9pZCAwIDogbGV2ZWxzW2xldmVsXTtcbiAgICAgICAgICAgIHZhciBkZXRhaWxzID0gY3VycmVudExldmVsID09IG51bGwgPyB2b2lkIDAgOiBjdXJyZW50TGV2ZWwuZGV0YWlscztcbiAgICAgICAgICAgIGlmIChkZXRhaWxzICYmICghZGV0YWlscy5saXZlIHx8IHRoaXMubGV2ZWxMYXN0TG9hZGVkID09PSBjdXJyZW50TGV2ZWwgJiYgIXRoaXMud2FpdEZvckxpdmUoY3VycmVudExldmVsKSkpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMud2FpdEZvckNkblR1bmVJbihkZXRhaWxzKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5obHMubmV4dExvYWRMZXZlbCAhPT0gdGhpcy5sZXZlbCkge1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgU3RhdGUuRlJBR19MT0FESU5HX1dBSVRJTkdfUkVUUlk6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF90aGlzJG1lZGlhO1xuICAgICAgICAgICAgdmFyIG5vdyA9IHNlbGYucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICB2YXIgcmV0cnlEYXRlID0gdGhpcy5yZXRyeURhdGU7XG4gICAgICAgICAgICAvLyBpZiBjdXJyZW50IHRpbWUgaXMgZ3QgdGhhbiByZXRyeURhdGUsIG9yIGlmIG1lZGlhIHNlZWtpbmcgbGV0J3Mgc3dpdGNoIHRvIElETEUgc3RhdGUgdG8gcmV0cnkgbG9hZGluZ1xuICAgICAgICAgICAgaWYgKCFyZXRyeURhdGUgfHwgbm93ID49IHJldHJ5RGF0ZSB8fCAoX3RoaXMkbWVkaWEgPSB0aGlzLm1lZGlhKSAhPSBudWxsICYmIF90aGlzJG1lZGlhLnNlZWtpbmcpIHtcbiAgICAgICAgICAgICAgdmFyIF9sZXZlbHMgPSB0aGlzLmxldmVscyxcbiAgICAgICAgICAgICAgICBfbGV2ZWwgPSB0aGlzLmxldmVsO1xuICAgICAgICAgICAgICB2YXIgX2N1cnJlbnRMZXZlbCA9IF9sZXZlbHMgPT0gbnVsbCA/IHZvaWQgMCA6IF9sZXZlbHNbX2xldmVsXTtcbiAgICAgICAgICAgICAgdGhpcy5yZXNldFN0YXJ0V2hlbk5vdExvYWRlZChfY3VycmVudExldmVsIHx8IG51bGwpO1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuSURMRSkge1xuICAgICAgICB0aGlzLmRvVGlja0lkbGUoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub25UaWNrRW5kKCk7XG4gICAgfTtcbiAgICBfcHJvdG8ub25UaWNrRW5kID0gZnVuY3Rpb24gb25UaWNrRW5kKCkge1xuICAgICAgdmFyIF90aGlzJG1lZGlhMjtcbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUub25UaWNrRW5kLmNhbGwodGhpcyk7XG4gICAgICBpZiAoKF90aGlzJG1lZGlhMiA9IHRoaXMubWVkaWEpICE9IG51bGwgJiYgX3RoaXMkbWVkaWEyLnJlYWR5U3RhdGUgJiYgdGhpcy5tZWRpYS5zZWVraW5nID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmxhc3RDdXJyZW50VGltZSA9IHRoaXMubWVkaWEuY3VycmVudFRpbWU7XG4gICAgICB9XG4gICAgICB0aGlzLmNoZWNrRnJhZ21lbnRDaGFuZ2VkKCk7XG4gICAgfTtcbiAgICBfcHJvdG8uZG9UaWNrSWRsZSA9IGZ1bmN0aW9uIGRvVGlja0lkbGUoKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHMsXG4gICAgICAgIGxldmVsTGFzdExvYWRlZCA9IHRoaXMubGV2ZWxMYXN0TG9hZGVkLFxuICAgICAgICBsZXZlbHMgPSB0aGlzLmxldmVscyxcbiAgICAgICAgbWVkaWEgPSB0aGlzLm1lZGlhO1xuXG4gICAgICAvLyBpZiBzdGFydCBsZXZlbCBub3QgcGFyc2VkIHlldCBPUlxuICAgICAgLy8gaWYgdmlkZW8gbm90IGF0dGFjaGVkIEFORCBzdGFydCBmcmFnbWVudCBhbHJlYWR5IHJlcXVlc3RlZCBPUiBzdGFydCBmcmFnIHByZWZldGNoIG5vdCBlbmFibGVkXG4gICAgICAvLyBleGl0IGxvb3AsIGFzIHdlIGVpdGhlciBuZWVkIG1vcmUgaW5mbyAobGV2ZWwgbm90IHBhcnNlZCkgb3Igd2UgbmVlZCBtZWRpYSB0byBiZSBhdHRhY2hlZCB0byBsb2FkIG5ldyBmcmFnbWVudFxuICAgICAgaWYgKGxldmVsTGFzdExvYWRlZCA9PT0gbnVsbCB8fCAhbWVkaWEgJiYgIXRoaXMucHJpbWFyeVByZWZldGNoICYmICh0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCB8fCAhaGxzLmNvbmZpZy5zdGFydEZyYWdQcmVmZXRjaCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgXCJtYWluXCIgbGV2ZWwgaXMgYXVkaW8tb25seSBidXQgd2UgYXJlIGxvYWRpbmcgYW4gYWx0ZXJuYXRlIHRyYWNrIGluIHRoZSBzYW1lIGdyb3VwLCBkbyBub3QgbG9hZCBhbnl0aGluZ1xuICAgICAgaWYgKHRoaXMuYWx0QXVkaW8gJiYgdGhpcy5hdWRpb09ubHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGxldmVsID0gdGhpcy5idWZmZXJpbmcgPyBobHMubmV4dExvYWRMZXZlbCA6IGhscy5sb2FkTGV2ZWw7XG4gICAgICBpZiAoIShsZXZlbHMgIT0gbnVsbCAmJiBsZXZlbHNbbGV2ZWxdKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbGV2ZWxJbmZvID0gbGV2ZWxzW2xldmVsXTtcblxuICAgICAgLy8gaWYgYnVmZmVyIGxlbmd0aCBpcyBsZXNzIHRoYW4gbWF4QnVmTGVuIHRyeSB0byBsb2FkIGEgbmV3IGZyYWdtZW50XG5cbiAgICAgIHZhciBidWZmZXJJbmZvID0gdGhpcy5nZXRNYWluRndkQnVmZmVySW5mbygpO1xuICAgICAgaWYgKGJ1ZmZlckluZm8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3REZXRhaWxzID0gdGhpcy5nZXRMZXZlbERldGFpbHMoKTtcbiAgICAgIGlmIChsYXN0RGV0YWlscyAmJiB0aGlzLl9zdHJlYW1FbmRlZChidWZmZXJJbmZvLCBsYXN0RGV0YWlscykpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICAgICAgaWYgKHRoaXMuYWx0QXVkaW8gPT09IDIpIHtcbiAgICAgICAgICBkYXRhLnR5cGUgPSAndmlkZW8nO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkJVRkZFUl9FT1MsIGRhdGEpO1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRU5ERUQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5idWZmZXJpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBzZXQgbmV4dCBsb2FkIGxldmVsIDogdGhpcyB3aWxsIHRyaWdnZXIgYSBwbGF5bGlzdCBsb2FkIGlmIG5lZWRlZFxuICAgICAgaWYgKGhscy5sb2FkTGV2ZWwgIT09IGxldmVsICYmIGhscy5tYW51YWxMZXZlbCA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5sb2coXCJBZGFwdGluZyB0byBsZXZlbCBcIiArIGxldmVsICsgXCIgZnJvbSBsZXZlbCBcIiArIHRoaXMubGV2ZWwpO1xuICAgICAgfVxuICAgICAgdGhpcy5sZXZlbCA9IGhscy5uZXh0TG9hZExldmVsID0gbGV2ZWw7XG4gICAgICB2YXIgbGV2ZWxEZXRhaWxzID0gbGV2ZWxJbmZvLmRldGFpbHM7XG4gICAgICAvLyBpZiBsZXZlbCBpbmZvIG5vdCByZXRyaWV2ZWQgeWV0LCBzd2l0Y2ggc3RhdGUgYW5kIHdhaXQgZm9yIGxldmVsIHJldHJpZXZhbFxuICAgICAgLy8gaWYgbGl2ZSBwbGF5bGlzdCwgZW5zdXJlIHRoYXQgbmV3IHBsYXlsaXN0IGhhcyBiZWVuIHJlZnJlc2hlZCB0byBhdm9pZCBsb2FkaW5nL3RyeSB0byBsb2FkXG4gICAgICAvLyBhIHVzZWxlc3MgYW5kIG91dGRhdGVkIGZyYWdtZW50ICh0aGF0IG1pZ2h0IGV2ZW4gaW50cm9kdWNlIGxvYWQgZXJyb3IgaWYgaXQgaXMgYWxyZWFkeSBvdXQgb2YgdGhlIGxpdmUgcGxheWxpc3QpXG4gICAgICBpZiAoIWxldmVsRGV0YWlscyB8fCB0aGlzLnN0YXRlID09PSBTdGF0ZS5XQUlUSU5HX0xFVkVMIHx8IHRoaXMud2FpdEZvckxpdmUobGV2ZWxJbmZvKSkge1xuICAgICAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5XQUlUSU5HX0xFVkVMO1xuICAgICAgICB0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgYnVmZmVyTGVuID0gYnVmZmVySW5mby5sZW47XG5cbiAgICAgIC8vIGNvbXB1dGUgbWF4IEJ1ZmZlciBMZW5ndGggdGhhdCB3ZSBjb3VsZCBnZXQgZnJvbSB0aGlzIGxvYWQgbGV2ZWwsIGJhc2VkIG9uIGxldmVsIGJpdHJhdGUuIGRvbid0IGJ1ZmZlciBtb3JlIHRoYW4gNjAgTUIgYW5kIG1vcmUgdGhhbiAzMHNcbiAgICAgIHZhciBtYXhCdWZMZW4gPSB0aGlzLmdldE1heEJ1ZmZlckxlbmd0aChsZXZlbEluZm8ubWF4Qml0cmF0ZSk7XG5cbiAgICAgIC8vIFN0YXkgaWRsZSBpZiB3ZSBhcmUgc3RpbGwgd2l0aCBidWZmZXIgbWFyZ2luc1xuICAgICAgaWYgKGJ1ZmZlckxlbiA+PSBtYXhCdWZMZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYmFja3RyYWNrRnJhZ21lbnQgJiYgdGhpcy5iYWNrdHJhY2tGcmFnbWVudC5zdGFydCA+IGJ1ZmZlckluZm8uZW5kKSB7XG4gICAgICAgIHRoaXMuYmFja3RyYWNrRnJhZ21lbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHRhcmdldEJ1ZmZlclRpbWUgPSB0aGlzLmJhY2t0cmFja0ZyYWdtZW50ID8gdGhpcy5iYWNrdHJhY2tGcmFnbWVudC5zdGFydCA6IGJ1ZmZlckluZm8uZW5kO1xuICAgICAgdmFyIGZyYWcgPSB0aGlzLmdldE5leHRGcmFnbWVudCh0YXJnZXRCdWZmZXJUaW1lLCBsZXZlbERldGFpbHMpO1xuICAgICAgLy8gQXZvaWQgYmFja3RyYWNraW5nIGJ5IGxvYWRpbmcgYW4gZWFybGllciBzZWdtZW50IGluIHN0cmVhbXMgd2l0aCBzZWdtZW50cyB0aGF0IGRvIG5vdCBzdGFydCB3aXRoIGEga2V5IGZyYW1lIChmbGFnZ2VkIGJ5IGBjb3VsZEJhY2t0cmFja2ApXG4gICAgICBpZiAodGhpcy5jb3VsZEJhY2t0cmFjayAmJiAhdGhpcy5mcmFnUHJldmlvdXMgJiYgZnJhZyAmJiBpc01lZGlhRnJhZ21lbnQoZnJhZykgJiYgdGhpcy5mcmFnbWVudFRyYWNrZXIuZ2V0U3RhdGUoZnJhZykgIT09IEZyYWdtZW50U3RhdGUuT0spIHtcbiAgICAgICAgdmFyIF90aGlzJGJhY2t0cmFja0ZyYWdtZTtcbiAgICAgICAgdmFyIGJhY2t0cmFja1NuID0gKChfdGhpcyRiYWNrdHJhY2tGcmFnbWUgPSB0aGlzLmJhY2t0cmFja0ZyYWdtZW50KSAhPSBudWxsID8gX3RoaXMkYmFja3RyYWNrRnJhZ21lIDogZnJhZykuc247XG4gICAgICAgIHZhciBmcmFnSWR4ID0gYmFja3RyYWNrU24gLSBsZXZlbERldGFpbHMuc3RhcnRTTjtcbiAgICAgICAgdmFyIGJhY2t0cmFja0ZyYWcgPSBsZXZlbERldGFpbHMuZnJhZ21lbnRzW2ZyYWdJZHggLSAxXTtcbiAgICAgICAgaWYgKGJhY2t0cmFja0ZyYWcgJiYgZnJhZy5jYyA9PT0gYmFja3RyYWNrRnJhZy5jYykge1xuICAgICAgICAgIGZyYWcgPSBiYWNrdHJhY2tGcmFnO1xuICAgICAgICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLnJlbW92ZUZyYWdtZW50KGJhY2t0cmFja0ZyYWcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYmFja3RyYWNrRnJhZ21lbnQgJiYgYnVmZmVySW5mby5sZW4pIHtcbiAgICAgICAgdGhpcy5iYWNrdHJhY2tGcmFnbWVudCA9IG51bGw7XG4gICAgICB9XG4gICAgICAvLyBBdm9pZCBsb29wIGxvYWRpbmcgYnkgdXNpbmcgbmV4dExvYWRQb3NpdGlvbiBzZXQgZm9yIGJhY2t0cmFja2luZyBhbmQgc2tpcHBpbmcgY29uc2VjdXRpdmUgR0FQIHRhZ3NcbiAgICAgIGlmIChmcmFnICYmIHRoaXMuaXNMb29wTG9hZGluZyhmcmFnLCB0YXJnZXRCdWZmZXJUaW1lKSkge1xuICAgICAgICB2YXIgZ2FwU3RhcnQgPSBmcmFnLmdhcDtcbiAgICAgICAgaWYgKCFnYXBTdGFydCkge1xuICAgICAgICAgIC8vIENsZWFudXAgdGhlIGZyYWdtZW50IHRyYWNrZXIgYmVmb3JlIHRyeWluZyB0byBmaW5kIHRoZSBuZXh0IHVuYnVmZmVyZWQgZnJhZ21lbnRcbiAgICAgICAgICB2YXIgdHlwZSA9IHRoaXMuYXVkaW9Pbmx5ICYmICF0aGlzLmFsdEF1ZGlvID8gRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPIDogRWxlbWVudGFyeVN0cmVhbVR5cGVzLlZJREVPO1xuICAgICAgICAgIHZhciBtZWRpYUJ1ZmZlciA9ICh0eXBlID09PSBFbGVtZW50YXJ5U3RyZWFtVHlwZXMuVklERU8gPyB0aGlzLnZpZGVvQnVmZmVyIDogdGhpcy5tZWRpYUJ1ZmZlcikgfHwgdGhpcy5tZWRpYTtcbiAgICAgICAgICBpZiAobWVkaWFCdWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJCdWZmZXJGbHVzaGVkKG1lZGlhQnVmZmVyLCB0eXBlLCBQbGF5bGlzdExldmVsVHlwZS5NQUlOKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnJhZyA9IHRoaXMuZ2V0TmV4dEZyYWdtZW50TG9vcExvYWRpbmcoZnJhZywgbGV2ZWxEZXRhaWxzLCBidWZmZXJJbmZvLCBQbGF5bGlzdExldmVsVHlwZS5NQUlOLCBtYXhCdWZMZW4pO1xuICAgICAgfVxuICAgICAgaWYgKCFmcmFnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChmcmFnLmluaXRTZWdtZW50ICYmICFmcmFnLmluaXRTZWdtZW50LmRhdGEgJiYgIXRoaXMuYml0cmF0ZVRlc3QpIHtcbiAgICAgICAgZnJhZyA9IGZyYWcuaW5pdFNlZ21lbnQ7XG4gICAgICB9XG4gICAgICB0aGlzLmxvYWRGcmFnbWVudChmcmFnLCBsZXZlbEluZm8sIHRhcmdldEJ1ZmZlclRpbWUpO1xuICAgIH07XG4gICAgX3Byb3RvLmxvYWRGcmFnbWVudCA9IGZ1bmN0aW9uIGxvYWRGcmFnbWVudChmcmFnLCBsZXZlbCwgdGFyZ2V0QnVmZmVyVGltZSkge1xuICAgICAgLy8gQ2hlY2sgaWYgZnJhZ21lbnQgaXMgbm90IGxvYWRlZFxuICAgICAgdmFyIGZyYWdTdGF0ZSA9IHRoaXMuZnJhZ21lbnRUcmFja2VyLmdldFN0YXRlKGZyYWcpO1xuICAgICAgaWYgKGZyYWdTdGF0ZSA9PT0gRnJhZ21lbnRTdGF0ZS5OT1RfTE9BREVEIHx8IGZyYWdTdGF0ZSA9PT0gRnJhZ21lbnRTdGF0ZS5QQVJUSUFMKSB7XG4gICAgICAgIGlmICghaXNNZWRpYUZyYWdtZW50KGZyYWcpKSB7XG4gICAgICAgICAgdGhpcy5fbG9hZEluaXRTZWdtZW50KGZyYWcsIGxldmVsKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmJpdHJhdGVUZXN0KSB7XG4gICAgICAgICAgdGhpcy5sb2coXCJGcmFnbWVudCBcIiArIGZyYWcuc24gKyBcIiBvZiBsZXZlbCBcIiArIGZyYWcubGV2ZWwgKyBcIiBpcyBiZWluZyBkb3dubG9hZGVkIHRvIHRlc3QgYml0cmF0ZSBhbmQgd2lsbCBub3QgYmUgYnVmZmVyZWRcIik7XG4gICAgICAgICAgdGhpcy5fbG9hZEJpdHJhdGVUZXN0RnJhZyhmcmFnLCBsZXZlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX0Jhc2VTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5sb2FkRnJhZ21lbnQuY2FsbCh0aGlzLCBmcmFnLCBsZXZlbCwgdGFyZ2V0QnVmZmVyVGltZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2xlYXJUcmFja2VySWZOZWVkZWQoZnJhZyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uZ2V0QnVmZmVyZWRGcmFnID0gZnVuY3Rpb24gZ2V0QnVmZmVyZWRGcmFnKHBvc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5mcmFnbWVudFRyYWNrZXIuZ2V0QnVmZmVyZWRGcmFnKHBvc2l0aW9uLCBQbGF5bGlzdExldmVsVHlwZS5NQUlOKTtcbiAgICB9O1xuICAgIF9wcm90by5mb2xsb3dpbmdCdWZmZXJlZEZyYWcgPSBmdW5jdGlvbiBmb2xsb3dpbmdCdWZmZXJlZEZyYWcoZnJhZykge1xuICAgICAgaWYgKGZyYWcpIHtcbiAgICAgICAgLy8gdHJ5IHRvIGdldCByYW5nZSBvZiBuZXh0IGZyYWdtZW50ICg1MDBtcyBhZnRlciB0aGlzIHJhbmdlKVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXJlZEZyYWcoZnJhZy5lbmQgKyAwLjUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLypcbiAgICAgIG9uIGltbWVkaWF0ZSBsZXZlbCBzd2l0Y2ggOlxuICAgICAgIC0gcGF1c2UgcGxheWJhY2sgaWYgcGxheWluZ1xuICAgICAgIC0gY2FuY2VsIGFueSBwZW5kaW5nIGxvYWQgcmVxdWVzdFxuICAgICAgIC0gYW5kIHRyaWdnZXIgYSBidWZmZXIgZmx1c2hcbiAgICAqLztcbiAgICBfcHJvdG8uaW1tZWRpYXRlTGV2ZWxTd2l0Y2ggPSBmdW5jdGlvbiBpbW1lZGlhdGVMZXZlbFN3aXRjaCgpIHtcbiAgICAgIHRoaXMuYWJvcnRDdXJyZW50RnJhZygpO1xuICAgICAgdGhpcy5mbHVzaE1haW5CdWZmZXIoMCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0cnkgdG8gc3dpdGNoIEFTQVAgd2l0aG91dCBicmVha2luZyB2aWRlbyBwbGF5YmFjazpcbiAgICAgKiBpbiBvcmRlciB0byBlbnN1cmUgc21vb3RoIGJ1dCBxdWljayBsZXZlbCBzd2l0Y2hpbmcsXG4gICAgICogd2UgbmVlZCB0byBmaW5kIHRoZSBuZXh0IGZsdXNoYWJsZSBidWZmZXIgcmFuZ2VcbiAgICAgKiB3ZSBzaG91bGQgdGFrZSBpbnRvIGFjY291bnQgbmV3IHNlZ21lbnQgZmV0Y2ggdGltZVxuICAgICAqLztcbiAgICBfcHJvdG8ubmV4dExldmVsU3dpdGNoID0gZnVuY3Rpb24gbmV4dExldmVsU3dpdGNoKCkge1xuICAgICAgdmFyIGxldmVscyA9IHRoaXMubGV2ZWxzLFxuICAgICAgICBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgICAvLyBlbnN1cmUgdGhhdCBtZWRpYSBpcyBkZWZpbmVkIGFuZCB0aGF0IG1ldGFkYXRhIGFyZSBhdmFpbGFibGUgKHRvIHJldHJpZXZlIGN1cnJlbnRUaW1lKVxuICAgICAgaWYgKG1lZGlhICE9IG51bGwgJiYgbWVkaWEucmVhZHlTdGF0ZSkge1xuICAgICAgICB2YXIgZmV0Y2hkZWxheTtcbiAgICAgICAgdmFyIGZyYWdQbGF5aW5nQ3VycmVudCA9IHRoaXMuZ2V0QXBwZW5kZWRGcmFnKG1lZGlhLmN1cnJlbnRUaW1lKTtcbiAgICAgICAgaWYgKGZyYWdQbGF5aW5nQ3VycmVudCAmJiBmcmFnUGxheWluZ0N1cnJlbnQuc3RhcnQgPiAxKSB7XG4gICAgICAgICAgLy8gZmx1c2ggYnVmZmVyIHByZWNlZGluZyBjdXJyZW50IGZyYWdtZW50IChmbHVzaCB1bnRpbCBjdXJyZW50IGZyYWdtZW50IHN0YXJ0IG9mZnNldClcbiAgICAgICAgICAvLyBtaW51cyAxcyB0byBhdm9pZCB2aWRlbyBmcmVlemluZywgdGhhdCBjb3VsZCBoYXBwZW4gaWYgd2UgZmx1c2gga2V5ZnJhbWUgb2YgY3VycmVudCB2aWRlbyAuLi5cbiAgICAgICAgICB0aGlzLmZsdXNoTWFpbkJ1ZmZlcigwLCBmcmFnUGxheWluZ0N1cnJlbnQuc3RhcnQgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGV2ZWxEZXRhaWxzID0gdGhpcy5nZXRMZXZlbERldGFpbHMoKTtcbiAgICAgICAgaWYgKGxldmVsRGV0YWlscyAhPSBudWxsICYmIGxldmVsRGV0YWlscy5saXZlKSB7XG4gICAgICAgICAgdmFyIGJ1ZmZlckluZm8gPSB0aGlzLmdldE1haW5Gd2RCdWZmZXJJbmZvKCk7XG4gICAgICAgICAgLy8gRG8gbm90IGZsdXNoIGluIGxpdmUgc3RyZWFtIHdpdGggbG93IGJ1ZmZlclxuICAgICAgICAgIGlmICghYnVmZmVySW5mbyB8fCBidWZmZXJJbmZvLmxlbiA8IGxldmVsRGV0YWlscy50YXJnZXRkdXJhdGlvbiAqIDIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtZWRpYS5wYXVzZWQgJiYgbGV2ZWxzKSB7XG4gICAgICAgICAgLy8gYWRkIGEgc2FmZXR5IGRlbGF5IG9mIDFzXG4gICAgICAgICAgdmFyIG5leHRMZXZlbElkID0gdGhpcy5obHMubmV4dExvYWRMZXZlbDtcbiAgICAgICAgICB2YXIgbmV4dExldmVsID0gbGV2ZWxzW25leHRMZXZlbElkXTtcbiAgICAgICAgICB2YXIgZnJhZ0xhc3RLYnBzID0gdGhpcy5mcmFnTGFzdEticHM7XG4gICAgICAgICAgaWYgKGZyYWdMYXN0S2JwcyAmJiB0aGlzLmZyYWdDdXJyZW50KSB7XG4gICAgICAgICAgICBmZXRjaGRlbGF5ID0gdGhpcy5mcmFnQ3VycmVudC5kdXJhdGlvbiAqIG5leHRMZXZlbC5tYXhCaXRyYXRlIC8gKDEwMDAgKiBmcmFnTGFzdEticHMpICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmV0Y2hkZWxheSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZldGNoZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMubG9nKCdmZXRjaGRlbGF5OicrZmV0Y2hkZWxheSk7XG4gICAgICAgIC8vIGZpbmQgYnVmZmVyIHJhbmdlIHRoYXQgd2lsbCBiZSByZWFjaGVkIG9uY2UgbmV3IGZyYWdtZW50IHdpbGwgYmUgZmV0Y2hlZFxuICAgICAgICB2YXIgYnVmZmVyZWRGcmFnID0gdGhpcy5nZXRCdWZmZXJlZEZyYWcobWVkaWEuY3VycmVudFRpbWUgKyBmZXRjaGRlbGF5KTtcbiAgICAgICAgaWYgKGJ1ZmZlcmVkRnJhZykge1xuICAgICAgICAgIC8vIHdlIGNhbiBmbHVzaCBidWZmZXIgcmFuZ2UgZm9sbG93aW5nIHRoaXMgb25lIHdpdGhvdXQgc3RhbGxpbmcgcGxheWJhY2tcbiAgICAgICAgICB2YXIgbmV4dEJ1ZmZlcmVkRnJhZyA9IHRoaXMuZm9sbG93aW5nQnVmZmVyZWRGcmFnKGJ1ZmZlcmVkRnJhZyk7XG4gICAgICAgICAgaWYgKG5leHRCdWZmZXJlZEZyYWcpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGFyZSBoZXJlLCB3ZSBjYW4gYWxzbyBjYW5jZWwgYW55IGxvYWRpbmcvZGVtdXhpbmcgaW4gcHJvZ3Jlc3MsIGFzIHRoZXkgYXJlIHVzZWxlc3NcbiAgICAgICAgICAgIHRoaXMuYWJvcnRDdXJyZW50RnJhZygpO1xuICAgICAgICAgICAgLy8gc3RhcnQgZmx1c2ggcG9zaXRpb24gaXMgaW4gbmV4dCBidWZmZXJlZCBmcmFnLiBMZWF2ZSBzb21lIHBhZGRpbmcgZm9yIG5vbi1pbmRlcGVuZGVudCBzZWdtZW50cyBhbmQgc21vb3RoZXIgcGxheWJhY2suXG4gICAgICAgICAgICB2YXIgbWF4U3RhcnQgPSBuZXh0QnVmZmVyZWRGcmFnLm1heFN0YXJ0UFRTID8gbmV4dEJ1ZmZlcmVkRnJhZy5tYXhTdGFydFBUUyA6IG5leHRCdWZmZXJlZEZyYWcuc3RhcnQ7XG4gICAgICAgICAgICB2YXIgZnJhZ0R1cmF0aW9uID0gbmV4dEJ1ZmZlcmVkRnJhZy5kdXJhdGlvbjtcbiAgICAgICAgICAgIHZhciBzdGFydFB0cyA9IE1hdGgubWF4KGJ1ZmZlcmVkRnJhZy5lbmQsIG1heFN0YXJ0ICsgTWF0aC5taW4oTWF0aC5tYXgoZnJhZ0R1cmF0aW9uIC0gdGhpcy5jb25maWcubWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSwgZnJhZ0R1cmF0aW9uICogKHRoaXMuY291bGRCYWNrdHJhY2sgPyAwLjUgOiAwLjEyNSkpLCBmcmFnRHVyYXRpb24gKiAodGhpcy5jb3VsZEJhY2t0cmFjayA/IDAuNzUgOiAwLjI1KSkpO1xuICAgICAgICAgICAgdGhpcy5mbHVzaE1haW5CdWZmZXIoc3RhcnRQdHMsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uYWJvcnRDdXJyZW50RnJhZyA9IGZ1bmN0aW9uIGFib3J0Q3VycmVudEZyYWcoKSB7XG4gICAgICB2YXIgZnJhZ0N1cnJlbnQgPSB0aGlzLmZyYWdDdXJyZW50O1xuICAgICAgdGhpcy5mcmFnQ3VycmVudCA9IG51bGw7XG4gICAgICB0aGlzLmJhY2t0cmFja0ZyYWdtZW50ID0gbnVsbDtcbiAgICAgIGlmIChmcmFnQ3VycmVudCkge1xuICAgICAgICBmcmFnQ3VycmVudC5hYm9ydFJlcXVlc3RzKCk7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLnJlbW92ZUZyYWdtZW50KGZyYWdDdXJyZW50KTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xuICAgICAgICBjYXNlIFN0YXRlLktFWV9MT0FESU5HOlxuICAgICAgICBjYXNlIFN0YXRlLkZSQUdfTE9BRElORzpcbiAgICAgICAgY2FzZSBTdGF0ZS5GUkFHX0xPQURJTkdfV0FJVElOR19SRVRSWTpcbiAgICAgICAgY2FzZSBTdGF0ZS5QQVJTSU5HOlxuICAgICAgICBjYXNlIFN0YXRlLlBBUlNFRDpcbiAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMubmV4dExvYWRQb3NpdGlvbiA9IHRoaXMuZ2V0TG9hZFBvc2l0aW9uKCk7XG4gICAgfTtcbiAgICBfcHJvdG8uZmx1c2hNYWluQnVmZmVyID0gZnVuY3Rpb24gZmx1c2hNYWluQnVmZmVyKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpIHtcbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUuZmx1c2hNYWluQnVmZmVyLmNhbGwodGhpcywgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCwgdGhpcy5hbHRBdWRpbyA9PT0gMiA/ICd2aWRlbycgOiBudWxsKTtcbiAgICB9O1xuICAgIF9wcm90by5vbk1lZGlhQXR0YWNoZWQgPSBmdW5jdGlvbiBvbk1lZGlhQXR0YWNoZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUub25NZWRpYUF0dGFjaGVkLmNhbGwodGhpcywgZXZlbnQsIGRhdGEpO1xuICAgICAgdmFyIG1lZGlhID0gZGF0YS5tZWRpYTtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIobWVkaWEsICdwbGF5aW5nJywgdGhpcy5vbk1lZGlhUGxheWluZyk7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKG1lZGlhLCAnc2Vla2VkJywgdGhpcy5vbk1lZGlhU2Vla2VkKTtcbiAgICB9O1xuICAgIF9wcm90by5vbk1lZGlhRGV0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYURldGFjaGluZyhldmVudCwgZGF0YSkge1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKG1lZGlhLCAncGxheWluZycsIHRoaXMub25NZWRpYVBsYXlpbmcpO1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKG1lZGlhLCAnc2Vla2VkJywgdGhpcy5vbk1lZGlhU2Vla2VkKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudmlkZW9CdWZmZXIgPSBudWxsO1xuICAgICAgdGhpcy5mcmFnUGxheWluZyA9IG51bGw7XG4gICAgICBfQmFzZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLm9uTWVkaWFEZXRhY2hpbmcuY2FsbCh0aGlzLCBldmVudCwgZGF0YSk7XG4gICAgICB2YXIgdHJhbnNmZXJyaW5nTWVkaWEgPSAhIWRhdGEudHJhbnNmZXJNZWRpYTtcbiAgICAgIGlmICh0cmFuc2ZlcnJpbmdNZWRpYSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9oYXNFbm91Z2hUb1N0YXJ0ID0gZmFsc2U7XG4gICAgfTtcbiAgICBfcHJvdG8ub25NYW5pZmVzdExvYWRpbmcgPSBmdW5jdGlvbiBvbk1hbmlmZXN0TG9hZGluZygpIHtcbiAgICAgIF9CYXNlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUub25NYW5pZmVzdExvYWRpbmcuY2FsbCh0aGlzKTtcbiAgICAgIC8vIHJlc2V0IGJ1ZmZlciBvbiBtYW5pZmVzdCBsb2FkaW5nXG4gICAgICB0aGlzLmxvZygnVHJpZ2dlciBCVUZGRVJfUkVTRVQnKTtcbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkJVRkZFUl9SRVNFVCwgdW5kZWZpbmVkKTtcbiAgICAgIHRoaXMuY291bGRCYWNrdHJhY2sgPSBmYWxzZTtcbiAgICAgIHRoaXMuZnJhZ0xhc3RLYnBzID0gMDtcbiAgICAgIHRoaXMuZnJhZ1BsYXlpbmcgPSB0aGlzLmJhY2t0cmFja0ZyYWdtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuYWx0QXVkaW8gPSAwO1xuICAgICAgdGhpcy5hdWRpb09ubHkgPSBmYWxzZTtcbiAgICB9O1xuICAgIF9wcm90by5vbk1hbmlmZXN0UGFyc2VkID0gZnVuY3Rpb24gb25NYW5pZmVzdFBhcnNlZChldmVudCwgZGF0YSkge1xuICAgICAgLy8gZGV0ZWN0IGlmIHdlIGhhdmUgZGlmZmVyZW50IGtpbmQgb2YgYXVkaW8gY29kZWNzIHVzZWQgYW1vbmdzdCBwbGF5bGlzdHNcbiAgICAgIHZhciBhYWMgPSBmYWxzZTtcbiAgICAgIHZhciBoZWFhYyA9IGZhbHNlO1xuICAgICAgZGF0YS5sZXZlbHMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgdmFyIGNvZGVjID0gbGV2ZWwuYXVkaW9Db2RlYztcbiAgICAgICAgaWYgKGNvZGVjKSB7XG4gICAgICAgICAgYWFjID0gYWFjIHx8IGNvZGVjLmluZGV4T2YoJ21wNGEuNDAuMicpICE9PSAtMTtcbiAgICAgICAgICBoZWFhYyA9IGhlYWFjIHx8IGNvZGVjLmluZGV4T2YoJ21wNGEuNDAuNScpICE9PSAtMTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmF1ZGlvQ29kZWNTd2l0Y2ggPSBhYWMgJiYgaGVhYWMgJiYgIWNoYW5nZVR5cGVTdXBwb3J0ZWQoKTtcbiAgICAgIGlmICh0aGlzLmF1ZGlvQ29kZWNTd2l0Y2gpIHtcbiAgICAgICAgdGhpcy5sb2coJ0JvdGggQUFDL0hFLUFBQyBhdWRpbyBmb3VuZCBpbiBsZXZlbHM7IGRlY2xhcmluZyBsZXZlbCBjb2RlYyBhcyBIRS1BQUMnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubGV2ZWxzID0gZGF0YS5sZXZlbHM7XG4gICAgICB0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTGV2ZWxMb2FkaW5nID0gZnVuY3Rpb24gb25MZXZlbExvYWRpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBsZXZlbHMgPSB0aGlzLmxldmVscztcbiAgICAgIGlmICghbGV2ZWxzIHx8IHRoaXMuc3RhdGUgIT09IFN0YXRlLklETEUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGxldmVsID0gZGF0YS5sZXZlbEluZm87XG4gICAgICBpZiAoIWxldmVsLmRldGFpbHMgfHwgbGV2ZWwuZGV0YWlscy5saXZlICYmICh0aGlzLmxldmVsTGFzdExvYWRlZCAhPT0gbGV2ZWwgfHwgbGV2ZWwuZGV0YWlscy5leHBpcmVkKSB8fCB0aGlzLndhaXRGb3JDZG5UdW5lSW4obGV2ZWwuZGV0YWlscykpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLldBSVRJTkdfTEVWRUw7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25MZXZlbExvYWRlZCA9IGZ1bmN0aW9uIG9uTGV2ZWxMb2FkZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfY3VyTGV2ZWwkZGV0YWlscztcbiAgICAgIHZhciBsZXZlbHMgPSB0aGlzLmxldmVscyxcbiAgICAgICAgc3RhcnRGcmFnUmVxdWVzdGVkID0gdGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQ7XG4gICAgICB2YXIgbmV3TGV2ZWxJZCA9IGRhdGEubGV2ZWw7XG4gICAgICB2YXIgbmV3RGV0YWlscyA9IGRhdGEuZGV0YWlscztcbiAgICAgIHZhciBkdXJhdGlvbiA9IG5ld0RldGFpbHMudG90YWxkdXJhdGlvbjtcbiAgICAgIGlmICghbGV2ZWxzKSB7XG4gICAgICAgIHRoaXMud2FybihcIkxldmVscyB3ZXJlIHJlc2V0IHdoaWxlIGxvYWRpbmcgbGV2ZWwgXCIgKyBuZXdMZXZlbElkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2coXCJMZXZlbCBcIiArIG5ld0xldmVsSWQgKyBcIiBsb2FkZWQgW1wiICsgbmV3RGV0YWlscy5zdGFydFNOICsgXCIsXCIgKyBuZXdEZXRhaWxzLmVuZFNOICsgXCJdXCIgKyAobmV3RGV0YWlscy5sYXN0UGFydFNuID8gXCJbcGFydC1cIiArIG5ld0RldGFpbHMubGFzdFBhcnRTbiArIFwiLVwiICsgbmV3RGV0YWlscy5sYXN0UGFydEluZGV4ICsgXCJdXCIgOiAnJykgKyBcIiwgY2MgW1wiICsgbmV3RGV0YWlscy5zdGFydENDICsgXCIsIFwiICsgbmV3RGV0YWlscy5lbmRDQyArIFwiXSBkdXJhdGlvbjpcIiArIGR1cmF0aW9uKTtcbiAgICAgIHZhciBjdXJMZXZlbCA9IGRhdGEubGV2ZWxJbmZvO1xuICAgICAgdmFyIGZyYWdDdXJyZW50ID0gdGhpcy5mcmFnQ3VycmVudDtcbiAgICAgIGlmIChmcmFnQ3VycmVudCAmJiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuRlJBR19MT0FESU5HIHx8IHRoaXMuc3RhdGUgPT09IFN0YXRlLkZSQUdfTE9BRElOR19XQUlUSU5HX1JFVFJZKSkge1xuICAgICAgICBpZiAoZnJhZ0N1cnJlbnQubGV2ZWwgIT09IGRhdGEubGV2ZWwgJiYgZnJhZ0N1cnJlbnQubG9hZGVyKSB7XG4gICAgICAgICAgdGhpcy5hYm9ydEN1cnJlbnRGcmFnKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBzbGlkaW5nID0gMDtcbiAgICAgIGlmIChuZXdEZXRhaWxzLmxpdmUgfHwgKF9jdXJMZXZlbCRkZXRhaWxzID0gY3VyTGV2ZWwuZGV0YWlscykgIT0gbnVsbCAmJiBfY3VyTGV2ZWwkZGV0YWlscy5saXZlKSB7XG4gICAgICAgIHZhciBfdGhpcyRsZXZlbExhc3RMb2FkZWQ7XG4gICAgICAgIHRoaXMuY2hlY2tMaXZlVXBkYXRlKG5ld0RldGFpbHMpO1xuICAgICAgICBpZiAobmV3RGV0YWlscy5kZWx0YVVwZGF0ZUZhaWxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzbGlkaW5nID0gdGhpcy5hbGlnblBsYXlsaXN0cyhuZXdEZXRhaWxzLCBjdXJMZXZlbC5kZXRhaWxzLCAoX3RoaXMkbGV2ZWxMYXN0TG9hZGVkID0gdGhpcy5sZXZlbExhc3RMb2FkZWQpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRsZXZlbExhc3RMb2FkZWQuZGV0YWlscyk7XG4gICAgICB9XG4gICAgICAvLyBvdmVycmlkZSBsZXZlbCBpbmZvXG4gICAgICBjdXJMZXZlbC5kZXRhaWxzID0gbmV3RGV0YWlscztcbiAgICAgIHRoaXMubGV2ZWxMYXN0TG9hZGVkID0gY3VyTGV2ZWw7XG4gICAgICBpZiAoIXN0YXJ0RnJhZ1JlcXVlc3RlZCkge1xuICAgICAgICB0aGlzLnNldFN0YXJ0UG9zaXRpb24obmV3RGV0YWlscywgc2xpZGluZyk7XG4gICAgICB9XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5MRVZFTF9VUERBVEVELCB7XG4gICAgICAgIGRldGFpbHM6IG5ld0RldGFpbHMsXG4gICAgICAgIGxldmVsOiBuZXdMZXZlbElkXG4gICAgICB9KTtcblxuICAgICAgLy8gb25seSBzd2l0Y2ggYmFjayB0byBJRExFIHN0YXRlIGlmIHdlIHdlcmUgd2FpdGluZyBmb3IgbGV2ZWwgdG8gc3RhcnQgZG93bmxvYWRpbmcgYSBuZXcgZnJhZ21lbnRcbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5XQUlUSU5HX0xFVkVMKSB7XG4gICAgICAgIGlmICh0aGlzLndhaXRGb3JDZG5UdW5lSW4obmV3RGV0YWlscykpIHtcbiAgICAgICAgICAvLyBXYWl0IGZvciBMb3ctTGF0ZW5jeSBDRE4gVHVuZS1pblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydEZyYWdSZXF1ZXN0ZWQgJiYgbmV3RGV0YWlscy5saXZlKSB7XG4gICAgICAgIHRoaXMuc3luY2hyb25pemVUb0xpdmVFZGdlKG5ld0RldGFpbHMpO1xuICAgICAgfVxuXG4gICAgICAvLyB0cmlnZ2VyIGhhbmRsZXIgcmlnaHQgbm93XG4gICAgICB0aGlzLnRpY2soKTtcbiAgICB9O1xuICAgIF9wcm90by5zeW5jaHJvbml6ZVRvTGl2ZUVkZ2UgPSBmdW5jdGlvbiBzeW5jaHJvbml6ZVRvTGl2ZUVkZ2UobGV2ZWxEZXRhaWxzKSB7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICAgIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIGlmICghbWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGxpdmVTeW5jUG9zaXRpb24gPSB0aGlzLmhscy5saXZlU3luY1Bvc2l0aW9uO1xuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy5nZXRMb2FkUG9zaXRpb24oKTtcbiAgICAgIHZhciBzdGFydCA9IGxldmVsRGV0YWlscy5mcmFnbWVudFN0YXJ0O1xuICAgICAgdmFyIGVuZCA9IGxldmVsRGV0YWlscy5lZGdlO1xuICAgICAgdmFyIHdpdGhpblNsaWRpbmdXaW5kb3cgPSBjdXJyZW50VGltZSA+PSBzdGFydCAtIGNvbmZpZy5tYXhGcmFnTG9va1VwVG9sZXJhbmNlICYmIGN1cnJlbnRUaW1lIDw9IGVuZDtcbiAgICAgIC8vIENvbnRpbnVlIGlmIHdlIGNhbiBzZWVrIGZvcndhcmQgdG8gc3luYyBwb3NpdGlvbiBvciBpZiBjdXJyZW50IHRpbWUgaXMgb3V0c2lkZSBvZiBzbGlkaW5nIHdpbmRvd1xuICAgICAgaWYgKGxpdmVTeW5jUG9zaXRpb24gIT09IG51bGwgJiYgbWVkaWEuZHVyYXRpb24gPiBsaXZlU3luY1Bvc2l0aW9uICYmIChjdXJyZW50VGltZSA8IGxpdmVTeW5jUG9zaXRpb24gfHwgIXdpdGhpblNsaWRpbmdXaW5kb3cpKSB7XG4gICAgICAgIC8vIENvbnRpbnVlIGlmIGJ1ZmZlciBpcyBzdGFydmluZyBvciBpZiBjdXJyZW50IHRpbWUgaXMgYmVoaW5kIG1heCBsYXRlbmN5XG4gICAgICAgIHZhciBtYXhMYXRlbmN5ID0gY29uZmlnLmxpdmVNYXhMYXRlbmN5RHVyYXRpb24gIT09IHVuZGVmaW5lZCA/IGNvbmZpZy5saXZlTWF4TGF0ZW5jeUR1cmF0aW9uIDogY29uZmlnLmxpdmVNYXhMYXRlbmN5RHVyYXRpb25Db3VudCAqIGxldmVsRGV0YWlscy50YXJnZXRkdXJhdGlvbjtcbiAgICAgICAgaWYgKCF3aXRoaW5TbGlkaW5nV2luZG93ICYmIG1lZGlhLnJlYWR5U3RhdGUgPCA0IHx8IGN1cnJlbnRUaW1lIDwgZW5kIC0gbWF4TGF0ZW5jeSkge1xuICAgICAgICAgIGlmICghdGhpcy5faGFzRW5vdWdoVG9TdGFydCkge1xuICAgICAgICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gbGl2ZVN5bmNQb3NpdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gT25seSBzZWVrIGlmIHJlYWR5IGFuZCB0aGVyZSBpcyBub3QgYSBzaWduaWZpY2FudCBmb3J3YXJkIGJ1ZmZlciBhdmFpbGFibGUgZm9yIHBsYXliYWNrXG4gICAgICAgICAgaWYgKG1lZGlhLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMud2FybihcIlBsYXliYWNrOiBcIiArIGN1cnJlbnRUaW1lLnRvRml4ZWQoMykgKyBcIiBpcyBsb2NhdGVkIHRvbyBmYXIgZnJvbSB0aGUgZW5kIG9mIGxpdmUgc2xpZGluZyBwbGF5bGlzdDogXCIgKyBlbmQgKyBcIiwgcmVzZXQgY3VycmVudFRpbWUgdG8gOiBcIiArIGxpdmVTeW5jUG9zaXRpb24udG9GaXhlZCgzKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWcubGl2ZVN5bmNNb2RlID09PSAnYnVmZmVyZWQnKSB7XG4gICAgICAgICAgICAgIHZhciBfYnVmZmVySW5mbyRidWZmZXJlZDtcbiAgICAgICAgICAgICAgdmFyIGJ1ZmZlckluZm8gPSBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyhtZWRpYSwgbGl2ZVN5bmNQb3NpdGlvbiwgMCk7XG4gICAgICAgICAgICAgIGlmICghKGJ1ZmZlckluZm8gIT0gbnVsbCAmJiAoX2J1ZmZlckluZm8kYnVmZmVyZWQgPSBidWZmZXJJbmZvLmJ1ZmZlcmVkKSAhPSBudWxsICYmIF9idWZmZXJJbmZvJGJ1ZmZlcmVkLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBtZWRpYS5jdXJyZW50VGltZSA9IGxpdmVTeW5jUG9zaXRpb247XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBpc0xpdmVTeW5jSW5CdWZmZXIgPSBidWZmZXJJbmZvLnN0YXJ0IDw9IGN1cnJlbnRUaW1lO1xuICAgICAgICAgICAgICBpZiAoaXNMaXZlU3luY0luQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgbWVkaWEuY3VycmVudFRpbWUgPSBsaXZlU3luY1Bvc2l0aW9uO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgX0J1ZmZlckhlbHBlciRidWZmZXJlID0gQnVmZmVySGVscGVyLmJ1ZmZlcmVkSW5mbyhidWZmZXJJbmZvLmJ1ZmZlcmVkLCBjdXJyZW50VGltZSwgMCksXG4gICAgICAgICAgICAgICAgbmV4dFN0YXJ0ID0gX0J1ZmZlckhlbHBlciRidWZmZXJlLm5leHRTdGFydDtcbiAgICAgICAgICAgICAgaWYgKG5leHRTdGFydCkge1xuICAgICAgICAgICAgICAgIG1lZGlhLmN1cnJlbnRUaW1lID0gbmV4dFN0YXJ0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtZWRpYS5jdXJyZW50VGltZSA9IGxpdmVTeW5jUG9zaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uX2hhbmRsZUZyYWdtZW50TG9hZFByb2dyZXNzID0gZnVuY3Rpb24gX2hhbmRsZUZyYWdtZW50TG9hZFByb2dyZXNzKGRhdGEpIHtcbiAgICAgIHZhciBfZnJhZyRpbml0U2VnbWVudDtcbiAgICAgIHZhciBmcmFnID0gZGF0YS5mcmFnO1xuICAgICAgdmFyIHBhcnQgPSBkYXRhLnBhcnQsXG4gICAgICAgIHBheWxvYWQgPSBkYXRhLnBheWxvYWQ7XG4gICAgICB2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG4gICAgICBpZiAoIWxldmVscykge1xuICAgICAgICB0aGlzLndhcm4oXCJMZXZlbHMgd2VyZSByZXNldCB3aGlsZSBmcmFnbWVudCBsb2FkIHdhcyBpbiBwcm9ncmVzcy4gRnJhZ21lbnQgXCIgKyBmcmFnLnNuICsgXCIgb2YgbGV2ZWwgXCIgKyBmcmFnLmxldmVsICsgXCIgd2lsbCBub3QgYmUgYnVmZmVyZWRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBjdXJyZW50TGV2ZWwgPSBsZXZlbHNbZnJhZy5sZXZlbF07XG4gICAgICBpZiAoIWN1cnJlbnRMZXZlbCkge1xuICAgICAgICB0aGlzLndhcm4oXCJMZXZlbCBcIiArIGZyYWcubGV2ZWwgKyBcIiBub3QgZm91bmQgb24gcHJvZ3Jlc3NcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBkZXRhaWxzID0gY3VycmVudExldmVsLmRldGFpbHM7XG4gICAgICBpZiAoIWRldGFpbHMpIHtcbiAgICAgICAgdGhpcy53YXJuKFwiRHJvcHBpbmcgZnJhZ21lbnQgXCIgKyBmcmFnLnNuICsgXCIgb2YgbGV2ZWwgXCIgKyBmcmFnLmxldmVsICsgXCIgYWZ0ZXIgbGV2ZWwgZGV0YWlscyB3ZXJlIHJlc2V0XCIpO1xuICAgICAgICB0aGlzLmZyYWdtZW50VHJhY2tlci5yZW1vdmVGcmFnbWVudChmcmFnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHZpZGVvQ29kZWMgPSBjdXJyZW50TGV2ZWwudmlkZW9Db2RlYztcblxuICAgICAgLy8gdGltZSBPZmZzZXQgaXMgYWNjdXJhdGUgaWYgbGV2ZWwgUFRTIGlzIGtub3duLCBvciBpZiBwbGF5bGlzdCBpcyBub3Qgc2xpZGluZyAobm90IGxpdmUpXG4gICAgICB2YXIgYWNjdXJhdGVUaW1lT2Zmc2V0ID0gZGV0YWlscy5QVFNLbm93biB8fCAhZGV0YWlscy5saXZlO1xuICAgICAgdmFyIGluaXRTZWdtZW50RGF0YSA9IChfZnJhZyRpbml0U2VnbWVudCA9IGZyYWcuaW5pdFNlZ21lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZnJhZyRpbml0U2VnbWVudC5kYXRhO1xuICAgICAgdmFyIGF1ZGlvQ29kZWMgPSB0aGlzLl9nZXRBdWRpb0NvZGVjKGN1cnJlbnRMZXZlbCk7XG5cbiAgICAgIC8vIHRyYW5zbXV4IHRoZSBNUEVHLVRTIGRhdGEgdG8gSVNPLUJNRkYgc2VnbWVudHNcbiAgICAgIC8vIHRoaXMubG9nKGBUcmFuc211eGluZyAke2ZyYWcuc259IG9mIFske2RldGFpbHMuc3RhcnRTTn0gLCR7ZGV0YWlscy5lbmRTTn1dLGxldmVsICR7ZnJhZy5sZXZlbH0sIGNjICR7ZnJhZy5jY31gKTtcbiAgICAgIHZhciB0cmFuc211eGVyID0gdGhpcy50cmFuc211eGVyID0gdGhpcy50cmFuc211eGVyIHx8IG5ldyBUcmFuc211eGVySW50ZXJmYWNlKHRoaXMuaGxzLCBQbGF5bGlzdExldmVsVHlwZS5NQUlOLCB0aGlzLl9oYW5kbGVUcmFuc211eENvbXBsZXRlLmJpbmQodGhpcyksIHRoaXMuX2hhbmRsZVRyYW5zbXV4ZXJGbHVzaC5iaW5kKHRoaXMpKTtcbiAgICAgIHZhciBwYXJ0SW5kZXggPSBwYXJ0ID8gcGFydC5pbmRleCA6IC0xO1xuICAgICAgdmFyIHBhcnRpYWwgPSBwYXJ0SW5kZXggIT09IC0xO1xuICAgICAgdmFyIGNodW5rTWV0YSA9IG5ldyBDaHVua01ldGFkYXRhKGZyYWcubGV2ZWwsIGZyYWcuc24sIGZyYWcuc3RhdHMuY2h1bmtDb3VudCwgcGF5bG9hZC5ieXRlTGVuZ3RoLCBwYXJ0SW5kZXgsIHBhcnRpYWwpO1xuICAgICAgdmFyIGluaXRQVFMgPSB0aGlzLmluaXRQVFNbZnJhZy5jY107XG4gICAgICB0cmFuc211eGVyLnB1c2gocGF5bG9hZCwgaW5pdFNlZ21lbnREYXRhLCBhdWRpb0NvZGVjLCB2aWRlb0NvZGVjLCBmcmFnLCBwYXJ0LCBkZXRhaWxzLnRvdGFsZHVyYXRpb24sIGFjY3VyYXRlVGltZU9mZnNldCwgY2h1bmtNZXRhLCBpbml0UFRTKTtcbiAgICB9O1xuICAgIF9wcm90by5vbkF1ZGlvVHJhY2tTd2l0Y2hpbmcgPSBmdW5jdGlvbiBvbkF1ZGlvVHJhY2tTd2l0Y2hpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgLy8gaWYgYW55IFVSTCBmb3VuZCBvbiBuZXcgYXVkaW8gdHJhY2ssIGl0IGlzIGFuIGFsdGVybmF0ZSBhdWRpbyB0cmFja1xuICAgICAgdmFyIGZyb21BbHRBdWRpbyA9IHRoaXMuYWx0QXVkaW8gPT09IDI7XG4gICAgICB2YXIgYWx0QXVkaW8gPSB1c2VBbHRlcm5hdGVBdWRpbyhkYXRhLnVybCwgaGxzKTtcbiAgICAgIC8vIGlmIHdlIHN3aXRjaCBvbiBtYWluIGF1ZGlvLCBlbnN1cmUgdGhhdCBtYWluIGZyYWdtZW50IHNjaGVkdWxpbmcgaXMgc3luY2VkIHdpdGggbWVkaWEuYnVmZmVyZWRcbiAgICAgIC8vIGRvbid0IGRvIGFueXRoaW5nIGlmIHdlIHN3aXRjaCB0byBhbHQgYXVkaW86IGF1ZGlvIHN0cmVhbSBjb250cm9sbGVyIGlzIGhhbmRsaW5nIGl0LlxuICAgICAgLy8gd2Ugd2lsbCBqdXN0IGhhdmUgdG8gY2hhbmdlIGJ1ZmZlciBzY2hlZHVsaW5nIG9uIGF1ZGlvVHJhY2tTd2l0Y2hlZFxuICAgICAgaWYgKCFhbHRBdWRpbykge1xuICAgICAgICBpZiAodGhpcy5tZWRpYUJ1ZmZlciAhPT0gdGhpcy5tZWRpYSkge1xuICAgICAgICAgIHRoaXMubG9nKCdTd2l0Y2hpbmcgb24gbWFpbiBhdWRpbywgdXNlIG1lZGlhLmJ1ZmZlcmVkIHRvIHNjaGVkdWxlIG1haW4gZnJhZ21lbnQgbG9hZGluZycpO1xuICAgICAgICAgIHRoaXMubWVkaWFCdWZmZXIgPSB0aGlzLm1lZGlhO1xuICAgICAgICAgIHZhciBmcmFnQ3VycmVudCA9IHRoaXMuZnJhZ0N1cnJlbnQ7XG4gICAgICAgICAgLy8gd2UgbmVlZCB0byByZWZpbGwgYXVkaW8gYnVmZmVyIGZyb20gbWFpbjogY2FuY2VsIGFueSBmcmFnIGxvYWRpbmcgdG8gc3BlZWQgdXAgYXVkaW8gc3dpdGNoXG4gICAgICAgICAgaWYgKGZyYWdDdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLmxvZygnU3dpdGNoaW5nIHRvIG1haW4gYXVkaW8gdHJhY2ssIGNhbmNlbCBtYWluIGZyYWdtZW50IGxvYWQnKTtcbiAgICAgICAgICAgIGZyYWdDdXJyZW50LmFib3J0UmVxdWVzdHMoKTtcbiAgICAgICAgICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLnJlbW92ZUZyYWdtZW50KGZyYWdDdXJyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZGVzdHJveSB0cmFuc211eGVyIHRvIGZvcmNlIGluaXQgc2VnbWVudCBnZW5lcmF0aW9uIChmb2xsb3dpbmcgYXVkaW8gc3dpdGNoKVxuICAgICAgICAgIHRoaXMucmVzZXRUcmFuc211eGVyKCk7XG4gICAgICAgICAgLy8gc3dpdGNoIHRvIElETEUgc3RhdGUgdG8gbG9hZCBuZXcgZnJhZ21lbnRcbiAgICAgICAgICB0aGlzLnJlc2V0TG9hZGluZ1N0YXRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hdWRpb09ubHkpIHtcbiAgICAgICAgICAvLyBSZXNldCBhdWRpbyB0cmFuc211eGVyIHNvIHdoZW4gc3dpdGNoaW5nIGJhY2sgdG8gbWFpbiBhdWRpbyB3ZSdyZSBub3Qgc3RpbGwgYXBwZW5kaW5nIHdoZXJlIHdlIGxlZnQgb2ZmXG4gICAgICAgICAgdGhpcy5yZXNldFRyYW5zbXV4ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBzd2l0Y2hpbmcgZnJvbSBhbHQgdG8gbWFpbiBhdWRpbywgZmx1c2ggYWxsIGF1ZGlvIGFuZCB0cmlnZ2VyIHRyYWNrIHN3aXRjaGVkXG4gICAgICAgIGlmIChmcm9tQWx0QXVkaW8pIHtcbiAgICAgICAgICB0aGlzLmZyYWdtZW50VHJhY2tlci5yZW1vdmVBbGxGcmFnbWVudHMoKTtcbiAgICAgICAgICBobHMub25jZShFdmVudHMuQlVGRkVSX0ZMVVNIRUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIkaGxzO1xuICAgICAgICAgICAgKF90aGlzMiRobHMgPSBfdGhpczIuaGxzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMyJGhscy50cmlnZ2VyKEV2ZW50cy5BVURJT19UUkFDS19TV0lUQ0hFRCwgZGF0YSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaGxzLnRyaWdnZXIoRXZlbnRzLkJVRkZFUl9GTFVTSElORywge1xuICAgICAgICAgICAgc3RhcnRPZmZzZXQ6IDAsXG4gICAgICAgICAgICBlbmRPZmZzZXQ6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgICAgICAgIHR5cGU6IG51bGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaGxzLnRyaWdnZXIoRXZlbnRzLkFVRElPX1RSQUNLX1NXSVRDSEVELCBkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWx0QXVkaW8gPSAxO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLm9uQXVkaW9UcmFja1N3aXRjaGVkID0gZnVuY3Rpb24gb25BdWRpb1RyYWNrU3dpdGNoZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBhbHRBdWRpbyA9IHVzZUFsdGVybmF0ZUF1ZGlvKGRhdGEudXJsLCB0aGlzLmhscyk7XG4gICAgICBpZiAoYWx0QXVkaW8pIHtcbiAgICAgICAgdmFyIHZpZGVvQnVmZmVyID0gdGhpcy52aWRlb0J1ZmZlcjtcbiAgICAgICAgLy8gaWYgd2Ugc3dpdGNoZWQgb24gYWx0ZXJuYXRlIGF1ZGlvLCBlbnN1cmUgdGhhdCBtYWluIGZyYWdtZW50IHNjaGVkdWxpbmcgaXMgc3luY2VkIHdpdGggdmlkZW8gc291cmNlYnVmZmVyIGJ1ZmZlcmVkXG4gICAgICAgIGlmICh2aWRlb0J1ZmZlciAmJiB0aGlzLm1lZGlhQnVmZmVyICE9PSB2aWRlb0J1ZmZlcikge1xuICAgICAgICAgIHRoaXMubG9nKCdTd2l0Y2hpbmcgb24gYWx0ZXJuYXRlIGF1ZGlvLCB1c2UgdmlkZW8uYnVmZmVyZWQgdG8gc2NoZWR1bGUgbWFpbiBmcmFnbWVudCBsb2FkaW5nJyk7XG4gICAgICAgICAgdGhpcy5tZWRpYUJ1ZmZlciA9IHZpZGVvQnVmZmVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmFsdEF1ZGlvID0gYWx0QXVkaW8gPyAyIDogMDtcbiAgICAgIHRoaXMudGljaygpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uQnVmZmVyQ3JlYXRlZCA9IGZ1bmN0aW9uIG9uQnVmZmVyQ3JlYXRlZChldmVudCwgZGF0YSkge1xuICAgICAgdmFyIHRyYWNrcyA9IGRhdGEudHJhY2tzO1xuICAgICAgdmFyIG1lZGlhVHJhY2s7XG4gICAgICB2YXIgbmFtZTtcbiAgICAgIHZhciBhbHRlcm5hdGUgPSBmYWxzZTtcbiAgICAgIGZvciAodmFyIHR5cGUgaW4gdHJhY2tzKSB7XG4gICAgICAgIHZhciB0cmFjayA9IHRyYWNrc1t0eXBlXTtcbiAgICAgICAgaWYgKHRyYWNrLmlkID09PSAnbWFpbicpIHtcbiAgICAgICAgICBuYW1lID0gdHlwZTtcbiAgICAgICAgICBtZWRpYVRyYWNrID0gdHJhY2s7XG4gICAgICAgICAgLy8ga2VlcCB2aWRlbyBzb3VyY2UgYnVmZmVyIHJlZmVyZW5jZVxuICAgICAgICAgIGlmICh0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICB2YXIgdmlkZW9UcmFjayA9IHRyYWNrc1t0eXBlXTtcbiAgICAgICAgICAgIGlmICh2aWRlb1RyYWNrKSB7XG4gICAgICAgICAgICAgIHRoaXMudmlkZW9CdWZmZXIgPSB2aWRlb1RyYWNrLmJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWx0ZXJuYXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFsdGVybmF0ZSAmJiBtZWRpYVRyYWNrKSB7XG4gICAgICAgIHRoaXMubG9nKFwiQWx0ZXJuYXRlIHRyYWNrIGZvdW5kLCB1c2UgXCIgKyBuYW1lICsgXCIuYnVmZmVyZWQgdG8gc2NoZWR1bGUgbWFpbiBmcmFnbWVudCBsb2FkaW5nXCIpO1xuICAgICAgICB0aGlzLm1lZGlhQnVmZmVyID0gbWVkaWFUcmFjay5idWZmZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1lZGlhQnVmZmVyID0gdGhpcy5tZWRpYTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5vbkZyYWdCdWZmZXJlZCA9IGZ1bmN0aW9uIG9uRnJhZ0J1ZmZlcmVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZyxcbiAgICAgICAgcGFydCA9IGRhdGEucGFydDtcbiAgICAgIHZhciBidWZmZXJlZE1haW5GcmFnbWVudCA9IGZyYWcudHlwZSA9PT0gUGxheWxpc3RMZXZlbFR5cGUuTUFJTjtcbiAgICAgIGlmIChidWZmZXJlZE1haW5GcmFnbWVudCkge1xuICAgICAgICBpZiAodGhpcy5mcmFnQ29udGV4dENoYW5nZWQoZnJhZykpIHtcbiAgICAgICAgICAvLyBJZiBhIGxldmVsIHN3aXRjaCB3YXMgcmVxdWVzdGVkIHdoaWxlIGEgZnJhZ21lbnQgd2FzIGJ1ZmZlcmluZywgaXQgd2lsbCBlbWl0IHRoZSBGUkFHX0JVRkZFUkVEIGV2ZW50IHVwb24gY29tcGxldGlvblxuICAgICAgICAgIC8vIEF2b2lkIHNldHRpbmcgc3RhdGUgYmFjayB0byBJRExFLCBzaW5jZSB0aGF0IHdpbGwgaW50ZXJmZXJlIHdpdGggYSBsZXZlbCBzd2l0Y2hcbiAgICAgICAgICB0aGlzLndhcm4oXCJGcmFnbWVudCBcIiArIGZyYWcuc24gKyAocGFydCA/ICcgcDogJyArIHBhcnQuaW5kZXggOiAnJykgKyBcIiBvZiBsZXZlbCBcIiArIGZyYWcubGV2ZWwgKyBcIiBmaW5pc2hlZCBidWZmZXJpbmcsIGJ1dCB3YXMgYWJvcnRlZC4gc3RhdGU6IFwiICsgdGhpcy5zdGF0ZSk7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLlBBUlNFRCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RhdHMgPSBwYXJ0ID8gcGFydC5zdGF0cyA6IGZyYWcuc3RhdHM7XG4gICAgICAgIHRoaXMuZnJhZ0xhc3RLYnBzID0gTWF0aC5yb3VuZCg4ICogc3RhdHMudG90YWwgLyAoc3RhdHMuYnVmZmVyaW5nLmVuZCAtIHN0YXRzLmxvYWRpbmcuZmlyc3QpKTtcbiAgICAgICAgaWYgKGlzTWVkaWFGcmFnbWVudChmcmFnKSkge1xuICAgICAgICAgIHRoaXMuZnJhZ1ByZXZpb3VzID0gZnJhZztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZyYWdCdWZmZXJlZENvbXBsZXRlKGZyYWcsIHBhcnQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIGlmICghbWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLl9oYXNFbm91Z2hUb1N0YXJ0ICYmIEJ1ZmZlckhlbHBlci5nZXRCdWZmZXJlZChtZWRpYSkubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX2hhc0Vub3VnaFRvU3RhcnQgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlZWtUb1N0YXJ0UG9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoYnVmZmVyZWRNYWluRnJhZ21lbnQpIHtcbiAgICAgICAgdGhpcy50aWNrKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBfZGF0YSRjb250ZXh0O1xuICAgICAgaWYgKGRhdGEuZmF0YWwpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkVSUk9SO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGRhdGEuZGV0YWlscykge1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5GUkFHX0dBUDpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuRlJBR19QQVJTSU5HX0VSUk9SOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5GUkFHX0RFQ1JZUFRfRVJST1I6XG4gICAgICAgIGNhc2UgRXJyb3JEZXRhaWxzLkZSQUdfTE9BRF9FUlJPUjpcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuRlJBR19MT0FEX1RJTUVPVVQ6XG4gICAgICAgIGNhc2UgRXJyb3JEZXRhaWxzLktFWV9MT0FEX0VSUk9SOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5LRVlfTE9BRF9USU1FT1VUOlxuICAgICAgICAgIHRoaXMub25GcmFnbWVudE9yS2V5TG9hZEVycm9yKFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU4sIGRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5MRVZFTF9MT0FEX0VSUk9SOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5MRVZFTF9MT0FEX1RJTUVPVVQ6XG4gICAgICAgIGNhc2UgRXJyb3JEZXRhaWxzLkxFVkVMX1BBUlNJTkdfRVJST1I6XG4gICAgICAgICAgLy8gaW4gY2FzZSBvZiBub24gZmF0YWwgZXJyb3Igd2hpbGUgbG9hZGluZyBsZXZlbCwgaWYgbGV2ZWwgY29udHJvbGxlciBpcyBub3QgcmV0cnlpbmcgdG8gbG9hZCBsZXZlbCwgc3dpdGNoIGJhY2sgdG8gSURMRVxuICAgICAgICAgIGlmICghZGF0YS5sZXZlbFJldHJ5ICYmIHRoaXMuc3RhdGUgPT09IFN0YXRlLldBSVRJTkdfTEVWRUwgJiYgKChfZGF0YSRjb250ZXh0ID0gZGF0YS5jb250ZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX2RhdGEkY29udGV4dC50eXBlKSA9PT0gUGxheWxpc3RDb250ZXh0VHlwZS5MRVZFTCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5CVUZGRVJfQUREX0NPREVDX0VSUk9SOlxuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5CVUZGRVJfQVBQRU5EX0VSUk9SOlxuICAgICAgICAgIGlmIChkYXRhLnBhcmVudCAhPT0gJ21haW4nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucmVzZXRMb2FkaW5nU3RhdGUoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFcnJvckRldGFpbHMuQlVGRkVSX0ZVTExfRVJST1I6XG4gICAgICAgICAgaWYgKGRhdGEucGFyZW50ICE9PSAnbWFpbicpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMucmVkdWNlTGVuZ3RoQW5kRmx1c2hCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICAgIHRoaXMuZmx1c2hNYWluQnVmZmVyKDAsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVycm9yRGV0YWlscy5JTlRFUk5BTF9FWENFUFRJT046XG4gICAgICAgICAgdGhpcy5yZWNvdmVyV29ya2VyRXJyb3IoZGF0YSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25GcmFnTG9hZEVtZXJnZW5jeUFib3J0ZWQgPSBmdW5jdGlvbiBvbkZyYWdMb2FkRW1lcmdlbmN5QWJvcnRlZCgpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgLy8gaWYgbG9hZGVkbWV0YWRhdGEgaXMgbm90IHNldCwgaXQgbWVhbnMgdGhhdCB3ZSBhcmUgZW1lcmdlbmN5IHN3aXRjaCBkb3duIG9uIGZpcnN0IGZyYWdcbiAgICAgIC8vIGluIHRoYXQgY2FzZSwgcmVzZXQgc3RhcnRGcmFnUmVxdWVzdGVkIGZsYWdcbiAgICAgIGlmICghdGhpcy5faGFzRW5vdWdoVG9TdGFydCkge1xuICAgICAgICB0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5leHRMb2FkUG9zaXRpb24gPSB0aGlzLmxhc3RDdXJyZW50VGltZTtcbiAgICAgIH1cbiAgICAgIHRoaXMudGlja0ltbWVkaWF0ZSgpO1xuICAgIH07XG4gICAgX3Byb3RvLm9uQnVmZmVyRmx1c2hlZCA9IGZ1bmN0aW9uIG9uQnVmZmVyRmx1c2hlZChldmVudCwgX3JlZikge1xuICAgICAgdmFyIHR5cGUgPSBfcmVmLnR5cGU7XG4gICAgICBpZiAodHlwZSAhPT0gRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPIHx8ICF0aGlzLmFsdEF1ZGlvKSB7XG4gICAgICAgIHZhciBtZWRpYUJ1ZmZlciA9ICh0eXBlID09PSBFbGVtZW50YXJ5U3RyZWFtVHlwZXMuVklERU8gPyB0aGlzLnZpZGVvQnVmZmVyIDogdGhpcy5tZWRpYUJ1ZmZlcikgfHwgdGhpcy5tZWRpYTtcbiAgICAgICAgaWYgKG1lZGlhQnVmZmVyKSB7XG4gICAgICAgICAgdGhpcy5hZnRlckJ1ZmZlckZsdXNoZWQobWVkaWFCdWZmZXIsIHR5cGUsIFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU4pO1xuICAgICAgICAgIHRoaXMudGljaygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ub25MZXZlbHNVcGRhdGVkID0gZnVuY3Rpb24gb25MZXZlbHNVcGRhdGVkKGV2ZW50LCBkYXRhKSB7XG4gICAgICBpZiAodGhpcy5sZXZlbCA+IC0xICYmIHRoaXMuZnJhZ0N1cnJlbnQpIHtcbiAgICAgICAgdGhpcy5sZXZlbCA9IHRoaXMuZnJhZ0N1cnJlbnQubGV2ZWw7XG4gICAgICAgIGlmICh0aGlzLmxldmVsID09PSAtMSkge1xuICAgICAgICAgIHRoaXMucmVzZXRXaGVuTWlzc2luZ0NvbnRleHQodGhpcy5mcmFnQ3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMubGV2ZWxzID0gZGF0YS5sZXZlbHM7XG4gICAgfTtcbiAgICBfcHJvdG8uc3dhcEF1ZGlvQ29kZWMgPSBmdW5jdGlvbiBzd2FwQXVkaW9Db2RlYygpIHtcbiAgICAgIHRoaXMuYXVkaW9Db2RlY1N3YXAgPSAhdGhpcy5hdWRpb0NvZGVjU3dhcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWVrcyB0byB0aGUgc2V0IHN0YXJ0UG9zaXRpb24gaWYgbm90IGVxdWFsIHRvIHRoZSBtZWRpYUVsZW1lbnQncyBjdXJyZW50IHRpbWUuXG4gICAgICovO1xuICAgIF9wcm90by5zZWVrVG9TdGFydFBvcyA9IGZ1bmN0aW9uIHNlZWtUb1N0YXJ0UG9zKCkge1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIGlmICghbWVkaWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gbWVkaWEuY3VycmVudFRpbWU7XG4gICAgICB2YXIgc3RhcnRQb3NpdGlvbiA9IHRoaXMuc3RhcnRQb3NpdGlvbjtcbiAgICAgIC8vIG9ubHkgYWRqdXN0IGN1cnJlbnRUaW1lIGlmIGRpZmZlcmVudCBmcm9tIHN0YXJ0UG9zaXRpb24gb3IgaWYgc3RhcnRQb3NpdGlvbiBub3QgYnVmZmVyZWRcbiAgICAgIC8vIGF0IHRoYXQgc3RhZ2UsIHRoZXJlIHNob3VsZCBiZSBvbmx5IG9uZSBidWZmZXJlZCByYW5nZSwgYXMgd2UgcmVhY2ggdGhhdCBjb2RlIGFmdGVyIGZpcnN0IGZyYWdtZW50IGhhcyBiZWVuIGJ1ZmZlcmVkXG4gICAgICBpZiAoc3RhcnRQb3NpdGlvbiA+PSAwICYmIGN1cnJlbnRUaW1lIDwgc3RhcnRQb3NpdGlvbikge1xuICAgICAgICBpZiAobWVkaWEuc2Vla2luZykge1xuICAgICAgICAgIHRoaXMubG9nKFwiY291bGQgbm90IHNlZWsgdG8gXCIgKyBzdGFydFBvc2l0aW9uICsgXCIsIGFscmVhZHkgc2Vla2luZyBhdCBcIiArIGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPZmZzZXQgc3RhcnQgcG9zaXRpb24gYnkgdGltZWxpbmUgb2Zmc2V0XG4gICAgICAgIHZhciB0aW1lbGluZU9mZnNldCA9IHRoaXMudGltZWxpbmVPZmZzZXQ7XG4gICAgICAgIGlmICh0aW1lbGluZU9mZnNldCAmJiBzdGFydFBvc2l0aW9uKSB7XG4gICAgICAgICAgc3RhcnRQb3NpdGlvbiArPSB0aW1lbGluZU9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGV0YWlscyA9IHRoaXMuZ2V0TGV2ZWxEZXRhaWxzKCk7XG4gICAgICAgIHZhciBidWZmZXJlZCA9IEJ1ZmZlckhlbHBlci5nZXRCdWZmZXJlZChtZWRpYSk7XG4gICAgICAgIHZhciBidWZmZXJTdGFydCA9IGJ1ZmZlcmVkLmxlbmd0aCA/IGJ1ZmZlcmVkLnN0YXJ0KDApIDogMDtcbiAgICAgICAgdmFyIGRlbHRhID0gYnVmZmVyU3RhcnQgLSBzdGFydFBvc2l0aW9uO1xuICAgICAgICB2YXIgc2tpcFRvbGVyYW5jZSA9IE1hdGgubWF4KHRoaXMuY29uZmlnLm1heEJ1ZmZlckhvbGUsIHRoaXMuY29uZmlnLm1heEZyYWdMb29rVXBUb2xlcmFuY2UpO1xuICAgICAgICBpZiAodGhpcy5jb25maWcuc3RhcnRPblNlZ21lbnRCb3VuZGFyeSB8fCBkZWx0YSA+IDAgJiYgKGRlbHRhIDwgc2tpcFRvbGVyYW5jZSB8fCB0aGlzLmxvYWRpbmdQYXJ0cyAmJiBkZWx0YSA8IDIgKiAoKGRldGFpbHMgPT0gbnVsbCA/IHZvaWQgMCA6IGRldGFpbHMucGFydFRhcmdldCkgfHwgMCkpKSB7XG4gICAgICAgICAgdGhpcy5sb2coXCJhZGp1c3Rpbmcgc3RhcnQgcG9zaXRpb24gYnkgXCIgKyBkZWx0YSArIFwiIHRvIG1hdGNoIGJ1ZmZlciBzdGFydFwiKTtcbiAgICAgICAgICBzdGFydFBvc2l0aW9uICs9IGRlbHRhO1xuICAgICAgICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IHN0YXJ0UG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lIDwgc3RhcnRQb3NpdGlvbikge1xuICAgICAgICAgIHRoaXMubG9nKFwic2VlayB0byB0YXJnZXQgc3RhcnQgcG9zaXRpb24gXCIgKyBzdGFydFBvc2l0aW9uICsgXCIgZnJvbSBjdXJyZW50IHRpbWUgXCIgKyBjdXJyZW50VGltZSArIFwiIGJ1ZmZlciBzdGFydCBcIiArIGJ1ZmZlclN0YXJ0KTtcbiAgICAgICAgICBtZWRpYS5jdXJyZW50VGltZSA9IHN0YXJ0UG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9wcm90by5fZ2V0QXVkaW9Db2RlYyA9IGZ1bmN0aW9uIF9nZXRBdWRpb0NvZGVjKGN1cnJlbnRMZXZlbCkge1xuICAgICAgdmFyIGF1ZGlvQ29kZWMgPSB0aGlzLmNvbmZpZy5kZWZhdWx0QXVkaW9Db2RlYyB8fCBjdXJyZW50TGV2ZWwuYXVkaW9Db2RlYztcbiAgICAgIGlmICh0aGlzLmF1ZGlvQ29kZWNTd2FwICYmIGF1ZGlvQ29kZWMpIHtcbiAgICAgICAgdGhpcy5sb2coJ1N3YXBwaW5nIGF1ZGlvIGNvZGVjJyk7XG4gICAgICAgIGlmIChhdWRpb0NvZGVjLmluZGV4T2YoJ21wNGEuNDAuNScpICE9PSAtMSkge1xuICAgICAgICAgIGF1ZGlvQ29kZWMgPSAnbXA0YS40MC4yJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdWRpb0NvZGVjID0gJ21wNGEuNDAuNSc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhdWRpb0NvZGVjO1xuICAgIH07XG4gICAgX3Byb3RvLl9sb2FkQml0cmF0ZVRlc3RGcmFnID0gZnVuY3Rpb24gX2xvYWRCaXRyYXRlVGVzdEZyYWcoZnJhZ21lbnQsIGxldmVsKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIGZyYWdtZW50LmJpdHJhdGVUZXN0ID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2RvRnJhZ0xvYWQoZnJhZ21lbnQsIGxldmVsKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBobHMgPSBfdGhpczMuaGxzO1xuICAgICAgICB2YXIgZnJhZyA9IGRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGEuZnJhZztcbiAgICAgICAgaWYgKCFmcmFnIHx8IF90aGlzMy5mcmFnQ29udGV4dENoYW5nZWQoZnJhZykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV2ZWwuZnJhZ21lbnRFcnJvciA9IDA7XG4gICAgICAgIF90aGlzMy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICAgIF90aGlzMy5zdGFydEZyYWdSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMzLmJpdHJhdGVUZXN0ID0gZmFsc2U7XG4gICAgICAgIHZhciBzdGF0cyA9IGZyYWcuc3RhdHM7XG4gICAgICAgIC8vIEJpdHJhdGUgdGVzdHMgZnJhZ21lbnRzIGFyZSBuZWl0aGVyIHBhcnNlZCBub3IgYnVmZmVyZWRcbiAgICAgICAgc3RhdHMucGFyc2luZy5zdGFydCA9IHN0YXRzLnBhcnNpbmcuZW5kID0gc3RhdHMuYnVmZmVyaW5nLnN0YXJ0ID0gc3RhdHMuYnVmZmVyaW5nLmVuZCA9IHNlbGYucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIGhscy50cmlnZ2VyKEV2ZW50cy5GUkFHX0xPQURFRCwgZGF0YSk7XG4gICAgICAgIGZyYWcuYml0cmF0ZVRlc3QgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLl9oYW5kbGVUcmFuc211eENvbXBsZXRlID0gZnVuY3Rpb24gX2hhbmRsZVRyYW5zbXV4Q29tcGxldGUodHJhbnNtdXhSZXN1bHQpIHtcbiAgICAgIHZhciBfaWQzJHNhbXBsZXM7XG4gICAgICB2YXIgaWQgPSB0aGlzLnBsYXlsaXN0VHlwZTtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIHZhciByZW11eFJlc3VsdCA9IHRyYW5zbXV4UmVzdWx0LnJlbXV4UmVzdWx0LFxuICAgICAgICBjaHVua01ldGEgPSB0cmFuc211eFJlc3VsdC5jaHVua01ldGE7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMuZ2V0Q3VycmVudENvbnRleHQoY2h1bmtNZXRhKTtcbiAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICB0aGlzLnJlc2V0V2hlbk1pc3NpbmdDb250ZXh0KGNodW5rTWV0YSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBmcmFnID0gY29udGV4dC5mcmFnLFxuICAgICAgICBwYXJ0ID0gY29udGV4dC5wYXJ0LFxuICAgICAgICBsZXZlbCA9IGNvbnRleHQubGV2ZWw7XG4gICAgICB2YXIgdmlkZW8gPSByZW11eFJlc3VsdC52aWRlbyxcbiAgICAgICAgdGV4dCA9IHJlbXV4UmVzdWx0LnRleHQsXG4gICAgICAgIGlkMyA9IHJlbXV4UmVzdWx0LmlkMyxcbiAgICAgICAgaW5pdFNlZ21lbnQgPSByZW11eFJlc3VsdC5pbml0U2VnbWVudDtcbiAgICAgIHZhciBkZXRhaWxzID0gbGV2ZWwuZGV0YWlscztcbiAgICAgIC8vIFRoZSBhdWRpby1zdHJlYW0tY29udHJvbGxlciBoYW5kbGVzIGF1ZGlvIGJ1ZmZlcmluZyBpZiBIbHMuanMgaXMgcGxheWluZyBhbiBhbHRlcm5hdGUgYXVkaW8gdHJhY2tcbiAgICAgIHZhciBhdWRpbyA9IHRoaXMuYWx0QXVkaW8gPyB1bmRlZmluZWQgOiByZW11eFJlc3VsdC5hdWRpbztcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgZnJhZ21lbnQgaGFzIGJlZW4gYWJvcnRlZC4gV2UgY2hlY2sgdGhpcyBieSBmaXJzdCBzZWVpbmcgaWYgd2UncmUgc3RpbGwgcGxheWluZyB0aGUgY3VycmVudCBsZXZlbC5cbiAgICAgIC8vIElmIHdlIGFyZSwgc3Vic2VxdWVudGx5IGNoZWNrIGlmIHRoZSBjdXJyZW50bHkgbG9hZGluZyBmcmFnbWVudCAoZnJhZ0N1cnJlbnQpIGhhcyBjaGFuZ2VkLlxuICAgICAgaWYgKHRoaXMuZnJhZ0NvbnRleHRDaGFuZ2VkKGZyYWcpKSB7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLnJlbW92ZUZyYWdtZW50KGZyYWcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnN0YXRlID0gU3RhdGUuUEFSU0lORztcbiAgICAgIGlmIChpbml0U2VnbWVudCkge1xuICAgICAgICBpZiAoaW5pdFNlZ21lbnQgIT0gbnVsbCAmJiBpbml0U2VnbWVudC50cmFja3MpIHtcbiAgICAgICAgICB2YXIgbWFwRnJhZ21lbnQgPSBmcmFnLmluaXRTZWdtZW50IHx8IGZyYWc7XG4gICAgICAgICAgdGhpcy5fYnVmZmVySW5pdFNlZ21lbnQobGV2ZWwsIGluaXRTZWdtZW50LnRyYWNrcywgbWFwRnJhZ21lbnQsIGNodW5rTWV0YSk7XG4gICAgICAgICAgaGxzLnRyaWdnZXIoRXZlbnRzLkZSQUdfUEFSU0lOR19JTklUX1NFR01FTlQsIHtcbiAgICAgICAgICAgIGZyYWc6IG1hcEZyYWdtZW50LFxuICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgdHJhY2tzOiBpbml0U2VnbWVudC50cmFja3NcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoaXMgd291bGQgYmUgbmljZSBpZiBOdW1iZXIuaXNGaW5pdGUgYWN0ZWQgYXMgYSB0eXBlZ3VhcmQsIGJ1dCBpdCBkb2Vzbid0LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTAwMzhcbiAgICAgICAgdmFyIGluaXRQVFMgPSBpbml0U2VnbWVudC5pbml0UFRTO1xuICAgICAgICB2YXIgdGltZXNjYWxlID0gaW5pdFNlZ21lbnQudGltZXNjYWxlO1xuICAgICAgICBpZiAoaXNGaW5pdGVOdW1iZXIoaW5pdFBUUykpIHtcbiAgICAgICAgICB0aGlzLmluaXRQVFNbZnJhZy5jY10gPSB7XG4gICAgICAgICAgICBiYXNlVGltZTogaW5pdFBUUyxcbiAgICAgICAgICAgIHRpbWVzY2FsZTogdGltZXNjYWxlXG4gICAgICAgICAgfTtcbiAgICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuSU5JVF9QVFNfRk9VTkQsIHtcbiAgICAgICAgICAgIGZyYWc6IGZyYWcsXG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICBpbml0UFRTOiBpbml0UFRTLFxuICAgICAgICAgICAgdGltZXNjYWxlOiB0aW1lc2NhbGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBdm9pZCBidWZmZXJpbmcgaWYgYmFja3RyYWNraW5nIHRoaXMgZnJhZ21lbnRcbiAgICAgIGlmICh2aWRlbyAmJiBkZXRhaWxzKSB7XG4gICAgICAgIGlmIChhdWRpbyAmJiB2aWRlby50eXBlID09PSAnYXVkaW92aWRlbycpIHtcbiAgICAgICAgICB0aGlzLmxvZ011eGVkRXJyKGZyYWcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2RnJhZyA9IGRldGFpbHMuZnJhZ21lbnRzW2ZyYWcuc24gLSAxIC0gZGV0YWlscy5zdGFydFNOXTtcbiAgICAgICAgdmFyIGlzRmlyc3RGcmFnbWVudCA9IGZyYWcuc24gPT09IGRldGFpbHMuc3RhcnRTTjtcbiAgICAgICAgdmFyIGlzRmlyc3RJbkRpc2NvbnRpbnVpdHkgPSAhcHJldkZyYWcgfHwgZnJhZy5jYyA+IHByZXZGcmFnLmNjO1xuICAgICAgICBpZiAocmVtdXhSZXN1bHQuaW5kZXBlbmRlbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgdmFyIHN0YXJ0UFRTID0gdmlkZW8uc3RhcnRQVFMsXG4gICAgICAgICAgICBlbmRQVFMgPSB2aWRlby5lbmRQVFMsXG4gICAgICAgICAgICBzdGFydERUUyA9IHZpZGVvLnN0YXJ0RFRTLFxuICAgICAgICAgICAgZW5kRFRTID0gdmlkZW8uZW5kRFRTO1xuICAgICAgICAgIGlmIChwYXJ0KSB7XG4gICAgICAgICAgICBwYXJ0LmVsZW1lbnRhcnlTdHJlYW1zW3ZpZGVvLnR5cGVdID0ge1xuICAgICAgICAgICAgICBzdGFydFBUUzogc3RhcnRQVFMsXG4gICAgICAgICAgICAgIGVuZFBUUzogZW5kUFRTLFxuICAgICAgICAgICAgICBzdGFydERUUzogc3RhcnREVFMsXG4gICAgICAgICAgICAgIGVuZERUUzogZW5kRFRTXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodmlkZW8uZmlyc3RLZXlGcmFtZSAmJiB2aWRlby5pbmRlcGVuZGVudCAmJiBjaHVua01ldGEuaWQgPT09IDEgJiYgIWlzRmlyc3RJbkRpc2NvbnRpbnVpdHkpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb3VsZEJhY2t0cmFjayA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmlkZW8uZHJvcHBlZCAmJiB2aWRlby5pbmRlcGVuZGVudCkge1xuICAgICAgICAgICAgICAvLyBCYWNrdHJhY2sgaWYgZHJvcHBlZCBmcmFtZXMgY3JlYXRlIGEgZ2FwIGFmdGVyIGN1cnJlbnRUaW1lXG5cbiAgICAgICAgICAgICAgdmFyIGJ1ZmZlckluZm8gPSB0aGlzLmdldE1haW5Gd2RCdWZmZXJJbmZvKCk7XG4gICAgICAgICAgICAgIHZhciB0YXJnZXRCdWZmZXJUaW1lID0gKGJ1ZmZlckluZm8gPyBidWZmZXJJbmZvLmVuZCA6IHRoaXMuZ2V0TG9hZFBvc2l0aW9uKCkpICsgdGhpcy5jb25maWcubWF4QnVmZmVySG9sZTtcbiAgICAgICAgICAgICAgdmFyIHN0YXJ0VGltZSA9IHZpZGVvLmZpcnN0S2V5RnJhbWVQVFMgPyB2aWRlby5maXJzdEtleUZyYW1lUFRTIDogc3RhcnRQVFM7XG4gICAgICAgICAgICAgIGlmICghaXNGaXJzdEZyYWdtZW50ICYmIHRhcmdldEJ1ZmZlclRpbWUgPCBzdGFydFRpbWUgLSB0aGlzLmNvbmZpZy5tYXhCdWZmZXJIb2xlICYmICFpc0ZpcnN0SW5EaXNjb250aW51aXR5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYWNrdHJhY2soZnJhZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzRmlyc3RJbkRpc2NvbnRpbnVpdHkpIHtcbiAgICAgICAgICAgICAgICAvLyBNYXJrIHNlZ21lbnQgd2l0aCBhIGdhcCB0byBhdm9pZCBsb29wIGxvYWRpbmdcbiAgICAgICAgICAgICAgICBmcmFnLmdhcCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gU2V0IHZpZGVvIHN0cmVhbSBzdGFydCB0byBmcmFnbWVudCBzdGFydCBzbyB0aGF0IHRydW5jYXRlZCBzYW1wbGVzIGRvIG5vdCBkaXN0b3J0IHRoZSB0aW1lbGluZSwgYW5kIG1hcmsgaXQgcGFydGlhbFxuICAgICAgICAgICAgICBmcmFnLnNldEVsZW1lbnRhcnlTdHJlYW1JbmZvKHZpZGVvLnR5cGUsIGZyYWcuc3RhcnQsIGVuZFBUUywgZnJhZy5zdGFydCwgZW5kRFRTLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNGaXJzdEZyYWdtZW50ICYmIHN0YXJ0UFRTIC0gKGRldGFpbHMuYXBwbGllZFRpbWVsaW5lT2Zmc2V0IHx8IDApID4gTUFYX1NUQVJUX0dBUF9KVU1QKSB7XG4gICAgICAgICAgICAgIC8vIE1hcmsgc2VnbWVudCB3aXRoIGEgZ2FwIHRvIHNraXAgbGFyZ2Ugc3RhcnQgZ2FwXG4gICAgICAgICAgICAgIGZyYWcuZ2FwID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZnJhZy5zZXRFbGVtZW50YXJ5U3RyZWFtSW5mbyh2aWRlby50eXBlLCBzdGFydFBUUywgZW5kUFRTLCBzdGFydERUUywgZW5kRFRTKTtcbiAgICAgICAgICBpZiAodGhpcy5iYWNrdHJhY2tGcmFnbWVudCkge1xuICAgICAgICAgICAgdGhpcy5iYWNrdHJhY2tGcmFnbWVudCA9IGZyYWc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYnVmZmVyRnJhZ21lbnREYXRhKHZpZGVvLCBmcmFnLCBwYXJ0LCBjaHVua01ldGEsIGlzRmlyc3RGcmFnbWVudCB8fCBpc0ZpcnN0SW5EaXNjb250aW51aXR5KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZpcnN0RnJhZ21lbnQgfHwgaXNGaXJzdEluRGlzY29udGludWl0eSkge1xuICAgICAgICAgIC8vIE1hcmsgc2VnbWVudCB3aXRoIGEgZ2FwIHRvIGF2b2lkIGxvb3AgbG9hZGluZ1xuICAgICAgICAgIGZyYWcuZ2FwID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmJhY2t0cmFjayhmcmFnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhdWRpbykge1xuICAgICAgICB2YXIgX3N0YXJ0UFRTID0gYXVkaW8uc3RhcnRQVFMsXG4gICAgICAgICAgX2VuZFBUUyA9IGF1ZGlvLmVuZFBUUyxcbiAgICAgICAgICBfc3RhcnREVFMgPSBhdWRpby5zdGFydERUUyxcbiAgICAgICAgICBfZW5kRFRTID0gYXVkaW8uZW5kRFRTO1xuICAgICAgICBpZiAocGFydCkge1xuICAgICAgICAgIHBhcnQuZWxlbWVudGFyeVN0cmVhbXNbRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPXSA9IHtcbiAgICAgICAgICAgIHN0YXJ0UFRTOiBfc3RhcnRQVFMsXG4gICAgICAgICAgICBlbmRQVFM6IF9lbmRQVFMsXG4gICAgICAgICAgICBzdGFydERUUzogX3N0YXJ0RFRTLFxuICAgICAgICAgICAgZW5kRFRTOiBfZW5kRFRTXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmcmFnLnNldEVsZW1lbnRhcnlTdHJlYW1JbmZvKEVsZW1lbnRhcnlTdHJlYW1UeXBlcy5BVURJTywgX3N0YXJ0UFRTLCBfZW5kUFRTLCBfc3RhcnREVFMsIF9lbmREVFMpO1xuICAgICAgICB0aGlzLmJ1ZmZlckZyYWdtZW50RGF0YShhdWRpbywgZnJhZywgcGFydCwgY2h1bmtNZXRhKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZXRhaWxzICYmIGlkMyAhPSBudWxsICYmIChfaWQzJHNhbXBsZXMgPSBpZDMuc2FtcGxlcykgIT0gbnVsbCAmJiBfaWQzJHNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbWl0dGVkSUQzID0ge1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgIGRldGFpbHM6IGRldGFpbHMsXG4gICAgICAgICAgc2FtcGxlczogaWQzLnNhbXBsZXNcbiAgICAgICAgfTtcbiAgICAgICAgaGxzLnRyaWdnZXIoRXZlbnRzLkZSQUdfUEFSU0lOR19NRVRBREFUQSwgZW1pdHRlZElEMyk7XG4gICAgICB9XG4gICAgICBpZiAoZGV0YWlscyAmJiB0ZXh0KSB7XG4gICAgICAgIHZhciBlbWl0dGVkVGV4dCA9IHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICBkZXRhaWxzOiBkZXRhaWxzLFxuICAgICAgICAgIHNhbXBsZXM6IHRleHQuc2FtcGxlc1xuICAgICAgICB9O1xuICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuRlJBR19QQVJTSU5HX1VTRVJEQVRBLCBlbWl0dGVkVGV4dCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8ubG9nTXV4ZWRFcnIgPSBmdW5jdGlvbiBsb2dNdXhlZEVycihmcmFnKSB7XG4gICAgICB0aGlzLndhcm4oKGlzTWVkaWFGcmFnbWVudChmcmFnKSA/ICdNZWRpYScgOiAnSW5pdCcpICsgXCIgc2VnbWVudCB3aXRoIG11eGVkIGF1ZGlvdmlkZW8gd2hlcmUgb25seSB2aWRlbyBleHBlY3RlZDogXCIgKyBmcmFnLnVybCk7XG4gICAgfTtcbiAgICBfcHJvdG8uX2J1ZmZlckluaXRTZWdtZW50ID0gZnVuY3Rpb24gX2J1ZmZlckluaXRTZWdtZW50KGN1cnJlbnRMZXZlbCwgdHJhY2tzLCBmcmFnLCBjaHVua01ldGEpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IFN0YXRlLlBBUlNJTkcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5hdWRpb09ubHkgPSAhIXRyYWNrcy5hdWRpbyAmJiAhdHJhY2tzLnZpZGVvO1xuXG4gICAgICAvLyBpZiBhdWRpbyB0cmFjayBpcyBleHBlY3RlZCB0byBjb21lIGZyb20gYXVkaW8gc3RyZWFtIGNvbnRyb2xsZXIsIGRpc2NhcmQgYW55IGNvbWluZyBmcm9tIG1haW5cbiAgICAgIGlmICh0aGlzLmFsdEF1ZGlvICYmICF0aGlzLmF1ZGlvT25seSkge1xuICAgICAgICBkZWxldGUgdHJhY2tzLmF1ZGlvO1xuICAgICAgICBpZiAodHJhY2tzLmF1ZGlvdmlkZW8pIHtcbiAgICAgICAgICB0aGlzLmxvZ011eGVkRXJyKGZyYWcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBpbmNsdWRlIGxldmVsQ29kZWMgaW4gYXVkaW8gYW5kIHZpZGVvIHRyYWNrc1xuICAgICAgdmFyIGF1ZGlvID0gdHJhY2tzLmF1ZGlvLFxuICAgICAgICB2aWRlbyA9IHRyYWNrcy52aWRlbyxcbiAgICAgICAgYXVkaW92aWRlbyA9IHRyYWNrcy5hdWRpb3ZpZGVvO1xuICAgICAgaWYgKGF1ZGlvKSB7XG4gICAgICAgIHZhciBhdWRpb0NvZGVjID0gcGlja01vc3RDb21wbGV0ZUNvZGVjTmFtZShhdWRpby5jb2RlYywgY3VycmVudExldmVsLmF1ZGlvQ29kZWMpO1xuICAgICAgICAvLyBBZGQgbGV2ZWwgYW5kIHByb2ZpbGUgdG8gbWFrZSB1cCBmb3IgcGFzc3Rocm91Z2gtcmVtdXhlciBub3QgYmVpbmcgYWJsZSB0byBwYXJzZSBmdWxsIGNvZGVjXG4gICAgICAgIC8vIChsb2dnZXIgd2FybmluZyBcIlVuaGFuZGxlZCBhdWRpbyBjb2RlYy4uLlwiKVxuICAgICAgICBpZiAoYXVkaW9Db2RlYyA9PT0gJ21wNGEnKSB7XG4gICAgICAgICAgYXVkaW9Db2RlYyA9ICdtcDRhLjQwLjUnO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsZSBgYXVkaW9Db2RlY1N3aXRjaGBcbiAgICAgICAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodGhpcy5hdWRpb0NvZGVjU3dpdGNoKSB7XG4gICAgICAgICAgaWYgKGF1ZGlvQ29kZWMpIHtcbiAgICAgICAgICAgIGlmIChhdWRpb0NvZGVjLmluZGV4T2YoJ21wNGEuNDAuNScpICE9PSAtMSkge1xuICAgICAgICAgICAgICBhdWRpb0NvZGVjID0gJ21wNGEuNDAuMic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhdWRpb0NvZGVjID0gJ21wNGEuNDAuNSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEluIHRoZSBjYXNlIHRoYXQgQUFDIGFuZCBIRS1BQUMgYXVkaW8gY29kZWNzIGFyZSBzaWduYWxsZWQgaW4gbWFuaWZlc3QsXG4gICAgICAgICAgLy8gZm9yY2UgSEUtQUFDLCBhcyBpdCBzZWVtcyB0aGF0IG1vc3QgYnJvd3NlcnMgcHJlZmVycyBpdC5cbiAgICAgICAgICAvLyBkb24ndCBmb3JjZSBIRS1BQUMgaWYgbW9ubyBzdHJlYW0sIG9yIGluIEZpcmVmb3hcbiAgICAgICAgICB2YXIgYXVkaW9NZXRhZGF0YSA9IGF1ZGlvLm1ldGFkYXRhO1xuICAgICAgICAgIGlmIChhdWRpb01ldGFkYXRhICYmICdjaGFubmVsQ291bnQnIGluIGF1ZGlvTWV0YWRhdGEgJiYgKGF1ZGlvTWV0YWRhdGEuY2hhbm5lbENvdW50IHx8IDEpICE9PSAxICYmIHVhLmluZGV4T2YoJ2ZpcmVmb3gnKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGF1ZGlvQ29kZWMgPSAnbXA0YS40MC41JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSEUtQUFDIGlzIGJyb2tlbiBvbiBBbmRyb2lkLCBhbHdheXMgc2lnbmFsIGF1ZGlvIGNvZGVjIGFzIEFBQyBldmVuIGlmIHZhcmlhbnQgbWFuaWZlc3Qgc3RhdGVzIG90aGVyd2lzZVxuICAgICAgICBpZiAoYXVkaW9Db2RlYyAmJiBhdWRpb0NvZGVjLmluZGV4T2YoJ21wNGEuNDAuNScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgIT09IC0xICYmIGF1ZGlvLmNvbnRhaW5lciAhPT0gJ2F1ZGlvL21wZWcnKSB7XG4gICAgICAgICAgLy8gRXhjbHVkZSBtcGVnIGF1ZGlvXG4gICAgICAgICAgYXVkaW9Db2RlYyA9ICdtcDRhLjQwLjInO1xuICAgICAgICAgIHRoaXMubG9nKFwiQW5kcm9pZDogZm9yY2UgYXVkaW8gY29kZWMgdG8gXCIgKyBhdWRpb0NvZGVjKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudExldmVsLmF1ZGlvQ29kZWMgJiYgY3VycmVudExldmVsLmF1ZGlvQ29kZWMgIT09IGF1ZGlvQ29kZWMpIHtcbiAgICAgICAgICB0aGlzLmxvZyhcIlN3YXBwaW5nIG1hbmlmZXN0IGF1ZGlvIGNvZGVjIFxcXCJcIiArIGN1cnJlbnRMZXZlbC5hdWRpb0NvZGVjICsgXCJcXFwiIGZvciBcXFwiXCIgKyBhdWRpb0NvZGVjICsgXCJcXFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIGF1ZGlvLmxldmVsQ29kZWMgPSBhdWRpb0NvZGVjO1xuICAgICAgICBhdWRpby5pZCA9IFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU47XG4gICAgICAgIHRoaXMubG9nKFwiSW5pdCBhdWRpbyBidWZmZXIsIGNvbnRhaW5lcjpcIiArIGF1ZGlvLmNvbnRhaW5lciArIFwiLCBjb2RlY3Nbc2VsZWN0ZWQvbGV2ZWwvcGFyc2VkXT1bXCIgKyAoYXVkaW9Db2RlYyB8fCAnJykgKyBcIi9cIiArIChjdXJyZW50TGV2ZWwuYXVkaW9Db2RlYyB8fCAnJykgKyBcIi9cIiArIGF1ZGlvLmNvZGVjICsgXCJdXCIpO1xuICAgICAgICBkZWxldGUgdHJhY2tzLmF1ZGlvdmlkZW87XG4gICAgICB9XG4gICAgICBpZiAodmlkZW8pIHtcbiAgICAgICAgdmlkZW8ubGV2ZWxDb2RlYyA9IGN1cnJlbnRMZXZlbC52aWRlb0NvZGVjO1xuICAgICAgICB2aWRlby5pZCA9IFBsYXlsaXN0TGV2ZWxUeXBlLk1BSU47XG4gICAgICAgIHZhciBwYXJzZWRWaWRlb0NvZGVjID0gdmlkZW8uY29kZWM7XG4gICAgICAgIGlmICgocGFyc2VkVmlkZW9Db2RlYyA9PSBudWxsID8gdm9pZCAwIDogcGFyc2VkVmlkZW9Db2RlYy5sZW5ndGgpID09PSA0KSB7XG4gICAgICAgICAgLy8gTWFrZSB1cCBmb3IgcGFzc3Rocm91Z2gtcmVtdXhlciBub3QgYmVpbmcgYWJsZSB0byBwYXJzZSBmdWxsIGNvZGVjXG4gICAgICAgICAgLy8gKGxvZ2dlciB3YXJuaW5nIFwiVW5oYW5kbGVkIHZpZGVvIGNvZGVjLi4uXCIpXG4gICAgICAgICAgc3dpdGNoIChwYXJzZWRWaWRlb0NvZGVjKSB7XG4gICAgICAgICAgICBjYXNlICdodmMxJzpcbiAgICAgICAgICAgIGNhc2UgJ2hldjEnOlxuICAgICAgICAgICAgICB2aWRlby5jb2RlYyA9ICdodmMxLjEuNi5MMTIwLjkwJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhdjAxJzpcbiAgICAgICAgICAgICAgdmlkZW8uY29kZWMgPSAnYXYwMS4wLjA0TS4wOCc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYXZjMSc6XG4gICAgICAgICAgICAgIHZpZGVvLmNvZGVjID0gJ2F2YzEuNDJlMDFlJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nKFwiSW5pdCB2aWRlbyBidWZmZXIsIGNvbnRhaW5lcjpcIiArIHZpZGVvLmNvbnRhaW5lciArIFwiLCBjb2RlY3NbbGV2ZWwvcGFyc2VkXT1bXCIgKyAoY3VycmVudExldmVsLnZpZGVvQ29kZWMgfHwgJycpICsgXCIvXCIgKyBwYXJzZWRWaWRlb0NvZGVjICsgXCJdXCIgKyAodmlkZW8uY29kZWMgIT09IHBhcnNlZFZpZGVvQ29kZWMgPyAnIHBhcnNlZC1jb3JyZWN0ZWQ9JyArIHZpZGVvLmNvZGVjIDogJycpICsgKHZpZGVvLnN1cHBsZW1lbnRhbCA/ICcgc3VwcGxlbWVudGFsPScgKyB2aWRlby5zdXBwbGVtZW50YWwgOiAnJykpO1xuICAgICAgICBkZWxldGUgdHJhY2tzLmF1ZGlvdmlkZW87XG4gICAgICB9XG4gICAgICBpZiAoYXVkaW92aWRlbykge1xuICAgICAgICB0aGlzLmxvZyhcIkluaXQgYXVkaW92aWRlbyBidWZmZXIsIGNvbnRhaW5lcjpcIiArIGF1ZGlvdmlkZW8uY29udGFpbmVyICsgXCIsIGNvZGVjc1tsZXZlbC9wYXJzZWRdPVtcIiArIGN1cnJlbnRMZXZlbC5jb2RlY3MgKyBcIi9cIiArIGF1ZGlvdmlkZW8uY29kZWMgKyBcIl1cIik7XG4gICAgICAgIGRlbGV0ZSB0cmFja3MudmlkZW87XG4gICAgICAgIGRlbGV0ZSB0cmFja3MuYXVkaW87XG4gICAgICB9XG4gICAgICB2YXIgdHJhY2tUeXBlcyA9IE9iamVjdC5rZXlzKHRyYWNrcyk7XG4gICAgICBpZiAodHJhY2tUeXBlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuQlVGRkVSX0NPREVDUywgdHJhY2tzKTtcbiAgICAgICAgaWYgKCF0aGlzLmhscykge1xuICAgICAgICAgIC8vIEV4aXQgYWZ0ZXIgZmF0YWwgdHJhY2tzIGVycm9yXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0cmFja3MgdGhhdCBhcmUgZ29pbmcgdG8gYmUgcHJvdmlkZWQgdG8gYnVmZmVyQ29udHJvbGxlclxuICAgICAgICB0cmFja1R5cGVzLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrTmFtZSkge1xuICAgICAgICAgIHZhciB0cmFjayA9IHRyYWNrc1t0cmFja05hbWVdO1xuICAgICAgICAgIHZhciBpbml0U2VnbWVudCA9IHRyYWNrLmluaXRTZWdtZW50O1xuICAgICAgICAgIGlmIChpbml0U2VnbWVudCAhPSBudWxsICYmIGluaXRTZWdtZW50LmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIF90aGlzNC5obHMudHJpZ2dlcihFdmVudHMuQlVGRkVSX0FQUEVORElORywge1xuICAgICAgICAgICAgICB0eXBlOiB0cmFja05hbWUsXG4gICAgICAgICAgICAgIGRhdGE6IGluaXRTZWdtZW50LFxuICAgICAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgICAgICBwYXJ0OiBudWxsLFxuICAgICAgICAgICAgICBjaHVua01ldGE6IGNodW5rTWV0YSxcbiAgICAgICAgICAgICAgcGFyZW50OiBmcmFnLnR5cGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyB0cmlnZ2VyIGhhbmRsZXIgcmlnaHQgbm93XG4gICAgICB0aGlzLnRpY2tJbW1lZGlhdGUoKTtcbiAgICB9O1xuICAgIF9wcm90by5nZXRNYWluRndkQnVmZmVySW5mbyA9IGZ1bmN0aW9uIGdldE1haW5Gd2RCdWZmZXJJbmZvKCkge1xuICAgICAgLy8gT2JzZXJ2ZSB2aWRlbyBTb3VyY2VCdWZmZXIgKHRoaXMubWVkaWFCdWZmZXIpIG9ubHkgd2hlbiBhbHQtYXVkaW8gaXMgdXNlZCwgb3RoZXJ3aXNlIG9ic2VydmUgY29tYmluZWQgbWVkaWEgYnVmZmVyXG4gICAgICB2YXIgYnVmZmVyT3V0cHV0ID0gdGhpcy5tZWRpYUJ1ZmZlciAmJiB0aGlzLmFsdEF1ZGlvID09PSAyID8gdGhpcy5tZWRpYUJ1ZmZlciA6IHRoaXMubWVkaWE7XG4gICAgICByZXR1cm4gdGhpcy5nZXRGd2RCdWZmZXJJbmZvKGJ1ZmZlck91dHB1dCwgUGxheWxpc3RMZXZlbFR5cGUuTUFJTik7XG4gICAgfTtcbiAgICBfcHJvdG8uYmFja3RyYWNrID0gZnVuY3Rpb24gYmFja3RyYWNrKGZyYWcpIHtcbiAgICAgIHRoaXMuY291bGRCYWNrdHJhY2sgPSB0cnVlO1xuICAgICAgLy8gQ2F1c2VzIGZpbmRGcmFnbWVudHMgdG8gYmFja3RyYWNrIHRocm91Z2ggZnJhZ21lbnRzIHRvIGZpbmQgdGhlIGtleWZyYW1lXG4gICAgICB0aGlzLmJhY2t0cmFja0ZyYWdtZW50ID0gZnJhZztcbiAgICAgIHRoaXMucmVzZXRUcmFuc211eGVyKCk7XG4gICAgICB0aGlzLmZsdXNoQnVmZmVyR2FwKGZyYWcpO1xuICAgICAgdGhpcy5mcmFnbWVudFRyYWNrZXIucmVtb3ZlRnJhZ21lbnQoZnJhZyk7XG4gICAgICB0aGlzLmZyYWdQcmV2aW91cyA9IG51bGw7XG4gICAgICB0aGlzLm5leHRMb2FkUG9zaXRpb24gPSBmcmFnLnN0YXJ0O1xuICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgfTtcbiAgICBfcHJvdG8uY2hlY2tGcmFnbWVudENoYW5nZWQgPSBmdW5jdGlvbiBjaGVja0ZyYWdtZW50Q2hhbmdlZCgpIHtcbiAgICAgIHZhciB2aWRlbyA9IHRoaXMubWVkaWE7XG4gICAgICB2YXIgZnJhZ1BsYXlpbmdDdXJyZW50ID0gbnVsbDtcbiAgICAgIGlmICh2aWRlbyAmJiB2aWRlby5yZWFkeVN0YXRlID4gMSAmJiB2aWRlby5zZWVraW5nID09PSBmYWxzZSkge1xuICAgICAgICB2YXIgY3VycmVudFRpbWUgPSB2aWRlby5jdXJyZW50VGltZTtcbiAgICAgICAgLyogaWYgdmlkZW8gZWxlbWVudCBpcyBpbiBzZWVrZWQgc3RhdGUsIGN1cnJlbnRUaW1lIGNhbiBvbmx5IGluY3JlYXNlLlxuICAgICAgICAgIChhc3N1bWluZyB0aGF0IHBsYXliYWNrIHJhdGUgaXMgcG9zaXRpdmUgLi4uKVxuICAgICAgICAgIEFzIHNvbWV0aW1lcyBjdXJyZW50VGltZSBqdW1wcyBiYWNrIHRvIHplcm8gYWZ0ZXIgYVxuICAgICAgICAgIG1lZGlhIGRlY29kZSBlcnJvciwgY2hlY2sgdGhpcywgdG8gYXZvaWQgc2Vla2luZyBiYWNrIHRvXG4gICAgICAgICAgd3JvbmcgcG9zaXRpb24gYWZ0ZXIgYSBtZWRpYSBkZWNvZGUgZXJyb3JcbiAgICAgICAgKi9cblxuICAgICAgICBpZiAoQnVmZmVySGVscGVyLmlzQnVmZmVyZWQodmlkZW8sIGN1cnJlbnRUaW1lKSkge1xuICAgICAgICAgIGZyYWdQbGF5aW5nQ3VycmVudCA9IHRoaXMuZ2V0QXBwZW5kZWRGcmFnKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgfSBlbHNlIGlmIChCdWZmZXJIZWxwZXIuaXNCdWZmZXJlZCh2aWRlbywgY3VycmVudFRpbWUgKyAwLjEpKSB7XG4gICAgICAgICAgLyogZW5zdXJlIHRoYXQgRlJBR19DSEFOR0VEIGV2ZW50IGlzIHRyaWdnZXJlZCBhdCBzdGFydHVwLFxuICAgICAgICAgICAgd2hlbiBmaXJzdCB2aWRlbyBmcmFtZSBpcyBkaXNwbGF5ZWQgYW5kIHBsYXliYWNrIGlzIHBhdXNlZC5cbiAgICAgICAgICAgIGFkZCBhIHRvbGVyYW5jZSBvZiAxMDBtcywgaW4gY2FzZSBjdXJyZW50IHBvc2l0aW9uIGlzIG5vdCBidWZmZXJlZCxcbiAgICAgICAgICAgIGNoZWNrIGlmIGN1cnJlbnQgcG9zKzEwMG1zIGlzIGJ1ZmZlcmVkIGFuZCB1c2UgdGhhdCBidWZmZXIgcmFuZ2VcbiAgICAgICAgICAgIGZvciBGUkFHX0NIQU5HRUQgZXZlbnQgcmVwb3J0aW5nICovXG4gICAgICAgICAgZnJhZ1BsYXlpbmdDdXJyZW50ID0gdGhpcy5nZXRBcHBlbmRlZEZyYWcoY3VycmVudFRpbWUgKyAwLjEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmcmFnUGxheWluZ0N1cnJlbnQpIHtcbiAgICAgICAgICB0aGlzLmJhY2t0cmFja0ZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgICB2YXIgZnJhZ1BsYXlpbmcgPSB0aGlzLmZyYWdQbGF5aW5nO1xuICAgICAgICAgIHZhciBmcmFnQ3VycmVudExldmVsID0gZnJhZ1BsYXlpbmdDdXJyZW50LmxldmVsO1xuICAgICAgICAgIGlmICghZnJhZ1BsYXlpbmcgfHwgZnJhZ1BsYXlpbmdDdXJyZW50LnNuICE9PSBmcmFnUGxheWluZy5zbiB8fCBmcmFnUGxheWluZy5sZXZlbCAhPT0gZnJhZ0N1cnJlbnRMZXZlbCkge1xuICAgICAgICAgICAgdGhpcy5mcmFnUGxheWluZyA9IGZyYWdQbGF5aW5nQ3VycmVudDtcbiAgICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkZSQUdfQ0hBTkdFRCwge1xuICAgICAgICAgICAgICBmcmFnOiBmcmFnUGxheWluZ0N1cnJlbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFmcmFnUGxheWluZyB8fCBmcmFnUGxheWluZy5sZXZlbCAhPT0gZnJhZ0N1cnJlbnRMZXZlbCkge1xuICAgICAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKEV2ZW50cy5MRVZFTF9TV0lUQ0hFRCwge1xuICAgICAgICAgICAgICAgIGxldmVsOiBmcmFnQ3VycmVudExldmVsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhTdHJlYW1Db250cm9sbGVyLCBbe1xuICAgICAga2V5OiBcImhhc0Vub3VnaFRvU3RhcnRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzRW5vdWdoVG9TdGFydDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWF4QnVmZmVyTGVuZ3RoXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGxldmVscyA9IHRoaXMubGV2ZWxzLFxuICAgICAgICAgIGxldmVsID0gdGhpcy5sZXZlbDtcbiAgICAgICAgdmFyIGxldmVsSW5mbyA9IGxldmVscyA9PSBudWxsID8gdm9pZCAwIDogbGV2ZWxzW2xldmVsXTtcbiAgICAgICAgaWYgKCFsZXZlbEluZm8pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcubWF4QnVmZmVyTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1heEJ1ZmZlckxlbmd0aChsZXZlbEluZm8ubWF4Qml0cmF0ZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm5leHRMZXZlbFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBmcmFnID0gdGhpcy5uZXh0QnVmZmVyZWRGcmFnO1xuICAgICAgICBpZiAoZnJhZykge1xuICAgICAgICAgIHJldHVybiBmcmFnLmxldmVsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY3VycmVudEZyYWdcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMkbWVkaWEzO1xuICAgICAgICBpZiAodGhpcy5mcmFnUGxheWluZykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZyYWdQbGF5aW5nO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJyZW50VGltZSA9ICgoX3RoaXMkbWVkaWEzID0gdGhpcy5tZWRpYSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG1lZGlhMy5jdXJyZW50VGltZSkgfHwgdGhpcy5sYXN0Q3VycmVudFRpbWU7XG4gICAgICAgIGlmIChpc0Zpbml0ZU51bWJlcihjdXJyZW50VGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRBcHBlbmRlZEZyYWcoY3VycmVudFRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjdXJyZW50UHJvZ3JhbURhdGVUaW1lXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIF90aGlzJG1lZGlhNDtcbiAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gKChfdGhpcyRtZWRpYTQgPSB0aGlzLm1lZGlhKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkbWVkaWE0LmN1cnJlbnRUaW1lKSB8fCB0aGlzLmxhc3RDdXJyZW50VGltZTtcbiAgICAgICAgaWYgKGlzRmluaXRlTnVtYmVyKGN1cnJlbnRUaW1lKSkge1xuICAgICAgICAgIHZhciBkZXRhaWxzID0gdGhpcy5nZXRMZXZlbERldGFpbHMoKTtcbiAgICAgICAgICB2YXIgZnJhZyA9IHRoaXMuY3VycmVudEZyYWcgfHwgKGRldGFpbHMgPyBmaW5kRnJhZ21lbnRCeVBUUyhudWxsLCBkZXRhaWxzLmZyYWdtZW50cywgY3VycmVudFRpbWUpIDogbnVsbCk7XG4gICAgICAgICAgaWYgKGZyYWcpIHtcbiAgICAgICAgICAgIHZhciBwcm9ncmFtRGF0ZVRpbWUgPSBmcmFnLnByb2dyYW1EYXRlVGltZTtcbiAgICAgICAgICAgIGlmIChwcm9ncmFtRGF0ZVRpbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdmFyIGVwb2NNcyA9IHByb2dyYW1EYXRlVGltZSArIChjdXJyZW50VGltZSAtIGZyYWcuc3RhcnQpICogMTAwMDtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGVwb2NNcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjdXJyZW50TGV2ZWxcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgZnJhZyA9IHRoaXMuY3VycmVudEZyYWc7XG4gICAgICAgIGlmIChmcmFnKSB7XG4gICAgICAgICAgcmV0dXJuIGZyYWcubGV2ZWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJuZXh0QnVmZmVyZWRGcmFnXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGZyYWcgPSB0aGlzLmN1cnJlbnRGcmFnO1xuICAgICAgICBpZiAoZnJhZykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZvbGxvd2luZ0J1ZmZlcmVkRnJhZyhmcmFnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZm9yY2VTdGFydExvYWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9yY2VTdGFydExvYWQ7XG4gICAgICB9XG4gICAgfV0pO1xuICB9KEJhc2VTdHJlYW1Db250cm9sbGVyKTtcblxuICB2YXIgS2V5TG9hZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZXlMb2FkZXIoY29uZmlnKSB7XG4gICAgICB0aGlzLmNvbmZpZyA9IHZvaWQgMDtcbiAgICAgIHRoaXMua2V5VXJpVG9LZXlJbmZvID0ge307XG4gICAgICB0aGlzLmVtZUNvbnRyb2xsZXIgPSBudWxsO1xuICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBLZXlMb2FkZXIucHJvdG90eXBlO1xuICAgIF9wcm90by5hYm9ydCA9IGZ1bmN0aW9uIGFib3J0KHR5cGUpIHtcbiAgICAgIGZvciAodmFyIHVyaSBpbiB0aGlzLmtleVVyaVRvS2V5SW5mbykge1xuICAgICAgICB2YXIgbG9hZGVyID0gdGhpcy5rZXlVcmlUb0tleUluZm9bdXJpXS5sb2FkZXI7XG4gICAgICAgIGlmIChsb2FkZXIpIHtcbiAgICAgICAgICB2YXIgX2xvYWRlciRjb250ZXh0O1xuICAgICAgICAgIGlmICh0eXBlICYmIHR5cGUgIT09ICgoX2xvYWRlciRjb250ZXh0ID0gbG9hZGVyLmNvbnRleHQpID09IG51bGwgPyB2b2lkIDAgOiBfbG9hZGVyJGNvbnRleHQuZnJhZy50eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsb2FkZXIuYWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICAgIGZvciAodmFyIHVyaSBpbiB0aGlzLmtleVVyaVRvS2V5SW5mbykge1xuICAgICAgICB2YXIga2V5SW5mbyA9IHRoaXMua2V5VXJpVG9LZXlJbmZvW3VyaV07XG4gICAgICAgIC8vIFJlbW92ZSBjYWNoZWQgRU1FIGtleXMgb24gZGV0YWNoXG4gICAgICAgIGlmIChrZXlJbmZvLm1lZGlhS2V5U2Vzc2lvbkNvbnRleHQgfHwga2V5SW5mby5kZWNyeXB0ZGF0YS5pc0NvbW1vbkVuY3J5cHRpb24pIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5rZXlVcmlUb0tleUluZm9bdXJpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5kZXRhY2goKTtcbiAgICAgIGZvciAodmFyIHVyaSBpbiB0aGlzLmtleVVyaVRvS2V5SW5mbykge1xuICAgICAgICB2YXIgbG9hZGVyID0gdGhpcy5rZXlVcmlUb0tleUluZm9bdXJpXS5sb2FkZXI7XG4gICAgICAgIGlmIChsb2FkZXIpIHtcbiAgICAgICAgICBsb2FkZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmtleVVyaVRvS2V5SW5mbyA9IHt9O1xuICAgIH07XG4gICAgX3Byb3RvLmNyZWF0ZUtleUxvYWRFcnJvciA9IGZ1bmN0aW9uIGNyZWF0ZUtleUxvYWRFcnJvcihmcmFnLCBkZXRhaWxzLCBlcnJvciwgbmV0d29ya0RldGFpbHMsIHJlc3BvbnNlKSB7XG4gICAgICBpZiAoZGV0YWlscyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGRldGFpbHMgPSBFcnJvckRldGFpbHMuS0VZX0xPQURfRVJST1I7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvYWRFcnJvcih7XG4gICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTkVUV09SS19FUlJPUixcbiAgICAgICAgZGV0YWlsczogZGV0YWlscyxcbiAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICByZXNwb25zZTogcmVzcG9uc2UsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgbmV0d29ya0RldGFpbHM6IG5ldHdvcmtEZXRhaWxzXG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5sb2FkQ2xlYXIgPSBmdW5jdGlvbiBsb2FkQ2xlYXIobG9hZGluZ0ZyYWcsIGVuY3J5cHRlZEZyYWdtZW50cykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGlmICh0aGlzLmVtZUNvbnRyb2xsZXIgJiYgdGhpcy5jb25maWcuZW1lRW5hYmxlZCAmJiAhdGhpcy5lbWVDb250cm9sbGVyLmdldFNlbGVjdGVkS2V5U3lzdGVtRm9ybWF0cygpLmxlbmd0aCkge1xuICAgICAgICAvLyBhY2Nlc3Mga2V5LXN5c3RlbSB3aXRoIG5lYXJlc3Qga2V5IG9uIHN0YXJ0IChsb2FkaW5nIGZyYWcgaXMgdW5lbmNyeXB0ZWQpXG4gICAgICAgIGlmIChlbmNyeXB0ZWRGcmFnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNuID0gbG9hZGluZ0ZyYWcuc24sXG4gICAgICAgICAgICBjYyA9IGxvYWRpbmdGcmFnLmNjO1xuICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICAgICAgICAgICAgICB2YXIgZnJhZyA9IGVuY3J5cHRlZEZyYWdtZW50c1tpXTtcbiAgICAgICAgICAgICAgaWYgKGNjIDw9IGZyYWcuY2MgJiYgKHNuID09PSAnaW5pdFNlZ21lbnQnIHx8IGZyYWcuc24gPT09ICdpbml0U2VnbWVudCcgfHwgc24gPCBmcmFnLnNuKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICB2OiBfdGhpcy5lbWVDb250cm9sbGVyLnNlbGVjdEtleVN5c3RlbUZvcm1hdChmcmFnKS50aGVuKGZ1bmN0aW9uIChrZXlTeXN0ZW1Gb3JtYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJhZy5zZXRLZXlGb3JtYXQoa2V5U3lzdGVtRm9ybWF0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmVtZUNvbnRyb2xsZXIgJiYgX3RoaXMuY29uZmlnLnJlcXVpcmVLZXlTeXN0ZW1BY2Nlc3NPblN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGtleVN5c3RlbSA9IGtleVN5c3RlbUZvcm1hdFRvS2V5U3lzdGVtRG9tYWluKGtleVN5c3RlbUZvcm1hdCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGtleVN5c3RlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmVtZUNvbnRyb2xsZXIuZ2V0S2V5U3lzdGVtQWNjZXNzKFtrZXlTeXN0ZW1dKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9yZXQ7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNyeXB0ZWRGcmFnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIF9yZXQgPSBfbG9vcCgpO1xuICAgICAgICAgICAgaWYgKF9yZXQpIHJldHVybiBfcmV0LnY7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29uZmlnLnJlcXVpcmVLZXlTeXN0ZW1BY2Nlc3NPblN0YXJ0KSB7XG4gICAgICAgICAgdmFyIGtleVN5c3RlbXNJbkNvbmZpZyA9IGdldEtleVN5c3RlbXNGb3JDb25maWcodGhpcy5jb25maWcpO1xuICAgICAgICAgIGlmIChrZXlTeXN0ZW1zSW5Db25maWcubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbWVDb250cm9sbGVyLmdldEtleVN5c3RlbUFjY2VzcyhrZXlTeXN0ZW1zSW5Db25maWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBfcHJvdG8ubG9hZCA9IGZ1bmN0aW9uIGxvYWQoZnJhZykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICBpZiAoIWZyYWcuZGVjcnlwdGRhdGEgJiYgZnJhZy5lbmNyeXB0ZWQgJiYgdGhpcy5lbWVDb250cm9sbGVyICYmIHRoaXMuY29uZmlnLmVtZUVuYWJsZWQpIHtcbiAgICAgICAgLy8gTXVsdGlwbGUga2V5cywgYnV0IG5vbmUgc2VsZWN0ZWQsIHJlc29sdmUgaW4gZW1lLWNvbnRyb2xsZXJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1lQ29udHJvbGxlci5zZWxlY3RLZXlTeXN0ZW1Gb3JtYXQoZnJhZykudGhlbihmdW5jdGlvbiAoa2V5U3lzdGVtRm9ybWF0KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5sb2FkSW50ZXJuYWwoZnJhZywga2V5U3lzdGVtRm9ybWF0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5sb2FkSW50ZXJuYWwoZnJhZyk7XG4gICAgfTtcbiAgICBfcHJvdG8ubG9hZEludGVybmFsID0gZnVuY3Rpb24gbG9hZEludGVybmFsKGZyYWcsIGtleVN5c3RlbUZvcm1hdCkge1xuICAgICAgdmFyIF9rZXlJbmZvLCBfa2V5SW5mbzI7XG4gICAgICBpZiAoa2V5U3lzdGVtRm9ybWF0KSB7XG4gICAgICAgIGZyYWcuc2V0S2V5Rm9ybWF0KGtleVN5c3RlbUZvcm1hdCk7XG4gICAgICB9XG4gICAgICB2YXIgZGVjcnlwdGRhdGEgPSBmcmFnLmRlY3J5cHRkYXRhO1xuICAgICAgaWYgKCFkZWNyeXB0ZGF0YSkge1xuICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3Ioa2V5U3lzdGVtRm9ybWF0ID8gXCJFeHBlY3RlZCBmcmFnLmRlY3J5cHRkYXRhIHRvIGJlIGRlZmluZWQgYWZ0ZXIgc2V0dGluZyBmb3JtYXQgXCIgKyBrZXlTeXN0ZW1Gb3JtYXQgOiAnTWlzc2luZyBkZWNyeXB0aW9uIGRhdGEgb24gZnJhZ21lbnQgaW4gb25LZXlMb2FkaW5nJyk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh0aGlzLmNyZWF0ZUtleUxvYWRFcnJvcihmcmFnLCBFcnJvckRldGFpbHMuS0VZX0xPQURfRVJST1IsIGVycm9yKSk7XG4gICAgICB9XG4gICAgICB2YXIgdXJpID0gZGVjcnlwdGRhdGEudXJpO1xuICAgICAgaWYgKCF1cmkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHRoaXMuY3JlYXRlS2V5TG9hZEVycm9yKGZyYWcsIEVycm9yRGV0YWlscy5LRVlfTE9BRF9FUlJPUiwgbmV3IEVycm9yKFwiSW52YWxpZCBrZXkgVVJJOiBcXFwiXCIgKyB1cmkgKyBcIlxcXCJcIikpKTtcbiAgICAgIH1cbiAgICAgIHZhciBrZXlJbmZvID0gdGhpcy5rZXlVcmlUb0tleUluZm9bdXJpXTtcbiAgICAgIGlmICgoX2tleUluZm8gPSBrZXlJbmZvKSAhPSBudWxsICYmIF9rZXlJbmZvLmRlY3J5cHRkYXRhLmtleSkge1xuICAgICAgICBkZWNyeXB0ZGF0YS5rZXkgPSBrZXlJbmZvLmRlY3J5cHRkYXRhLmtleTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICBrZXlJbmZvOiBrZXlJbmZvXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gUmV0dXJuIGtleSBsb2FkIHByb21pc2UgYXMgbG9uZyBhcyBpdCBkb2VzIG5vdCBoYXZlIGEgbWVkaWFrZXkgc2Vzc2lvbiB3aXRoIGFuIHVudXNhYmxlIGtleSBzdGF0dXNcbiAgICAgIGlmICgoX2tleUluZm8yID0ga2V5SW5mbykgIT0gbnVsbCAmJiBfa2V5SW5mbzIua2V5TG9hZFByb21pc2UpIHtcbiAgICAgICAgdmFyIF9rZXlJbmZvJG1lZGlhS2V5U2VzcztcbiAgICAgICAgc3dpdGNoICgoX2tleUluZm8kbWVkaWFLZXlTZXNzID0ga2V5SW5mby5tZWRpYUtleVNlc3Npb25Db250ZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX2tleUluZm8kbWVkaWFLZXlTZXNzLmtleVN0YXR1cykge1xuICAgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgIGNhc2UgJ3N0YXR1cy1wZW5kaW5nJzpcbiAgICAgICAgICBjYXNlICd1c2FibGUnOlxuICAgICAgICAgIGNhc2UgJ3VzYWJsZS1pbi1mdXR1cmUnOlxuICAgICAgICAgICAgcmV0dXJuIGtleUluZm8ua2V5TG9hZFByb21pc2UudGhlbihmdW5jdGlvbiAoa2V5TG9hZGVkRGF0YSkge1xuICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGNvcnJlY3QgZnJhZ21lbnQgd2l0aCB1cGRhdGVkIGRlY3J5cHRkYXRhIGtleSBhbmQgbG9hZGVkIGtleUluZm9cbiAgICAgICAgICAgICAgZGVjcnlwdGRhdGEua2V5ID0ga2V5TG9hZGVkRGF0YS5rZXlJbmZvLmRlY3J5cHRkYXRhLmtleTtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgICAgICAgIGtleUluZm86IGtleUluZm9cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBrZXkgc2Vzc2lvbiBhbmQgc3RhdHVzIGFuZCBpdCBpcyBub3QgcGVuZGluZyBvciB1c2FibGUsIGNvbnRpbnVlXG4gICAgICAgIC8vIFRoaXMgd2lsbCBnbyBiYWNrIHRvIHRoZSBlbWUtY29udHJvbGxlciBmb3IgZXhwaXJlZCBrZXlzIHRvIGdldCBhIG5ldyBrZXlMb2FkUHJvbWlzZVxuICAgICAgfVxuXG4gICAgICAvLyBMb2FkIHRoZSBrZXkgb3IgcmV0dXJuIHRoZSBsb2FkaW5nIHByb21pc2VcbiAgICAgIGtleUluZm8gPSB0aGlzLmtleVVyaVRvS2V5SW5mb1t1cmldID0ge1xuICAgICAgICBkZWNyeXB0ZGF0YTogZGVjcnlwdGRhdGEsXG4gICAgICAgIGtleUxvYWRQcm9taXNlOiBudWxsLFxuICAgICAgICBsb2FkZXI6IG51bGwsXG4gICAgICAgIG1lZGlhS2V5U2Vzc2lvbkNvbnRleHQ6IG51bGxcbiAgICAgIH07XG4gICAgICBzd2l0Y2ggKGRlY3J5cHRkYXRhLm1ldGhvZCkge1xuICAgICAgICBjYXNlICdJU08tMjMwMDEtNyc6XG4gICAgICAgIGNhc2UgJ1NBTVBMRS1BRVMnOlxuICAgICAgICBjYXNlICdTQU1QTEUtQUVTLUNFTkMnOlxuICAgICAgICBjYXNlICdTQU1QTEUtQUVTLUNUUic6XG4gICAgICAgICAgaWYgKGRlY3J5cHRkYXRhLmtleUZvcm1hdCA9PT0gJ2lkZW50aXR5Jykge1xuICAgICAgICAgICAgLy8gbG9hZEtleUhUVFAgaGFuZGxlcyBodHRwKHMpIGFuZCBkYXRhIFVSTHNcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRLZXlIVFRQKGtleUluZm8sIGZyYWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkS2V5RU1FKGtleUluZm8sIGZyYWcpO1xuICAgICAgICBjYXNlICdBRVMtMTI4JzpcbiAgICAgICAgY2FzZSAnQUVTLTI1Nic6XG4gICAgICAgIGNhc2UgJ0FFUy0yNTYtQ1RSJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkS2V5SFRUUChrZXlJbmZvLCBmcmFnKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodGhpcy5jcmVhdGVLZXlMb2FkRXJyb3IoZnJhZywgRXJyb3JEZXRhaWxzLktFWV9MT0FEX0VSUk9SLCBuZXcgRXJyb3IoXCJLZXkgc3VwcGxpZWQgd2l0aCB1bnN1cHBvcnRlZCBNRVRIT0Q6IFxcXCJcIiArIGRlY3J5cHRkYXRhLm1ldGhvZCArIFwiXFxcIlwiKSkpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmxvYWRLZXlFTUUgPSBmdW5jdGlvbiBsb2FkS2V5RU1FKGtleUluZm8sIGZyYWcpIHtcbiAgICAgIHZhciBrZXlMb2FkZWREYXRhID0ge1xuICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICBrZXlJbmZvOiBrZXlJbmZvXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuZW1lQ29udHJvbGxlciAmJiB0aGlzLmNvbmZpZy5lbWVFbmFibGVkKSB7XG4gICAgICAgIHZhciBrZXlTZXNzaW9uQ29udGV4dFByb21pc2UgPSB0aGlzLmVtZUNvbnRyb2xsZXIubG9hZEtleShrZXlMb2FkZWREYXRhKTtcbiAgICAgICAgaWYgKGtleVNlc3Npb25Db250ZXh0UHJvbWlzZSkge1xuICAgICAgICAgIHJldHVybiAoa2V5SW5mby5rZXlMb2FkUHJvbWlzZSA9IGtleVNlc3Npb25Db250ZXh0UHJvbWlzZS50aGVuKGZ1bmN0aW9uIChrZXlTZXNzaW9uQ29udGV4dCkge1xuICAgICAgICAgICAga2V5SW5mby5tZWRpYUtleVNlc3Npb25Db250ZXh0ID0ga2V5U2Vzc2lvbkNvbnRleHQ7XG4gICAgICAgICAgICByZXR1cm4ga2V5TG9hZGVkRGF0YTtcbiAgICAgICAgICB9KSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgcHJvbWlzZSBmb3IgbGljZW5zZSByZW5ld2FsIG9yIHJldHJ5XG4gICAgICAgICAgICBrZXlJbmZvLmtleUxvYWRQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGtleUxvYWRlZERhdGEpO1xuICAgIH07XG4gICAgX3Byb3RvLmxvYWRLZXlIVFRQID0gZnVuY3Rpb24gbG9hZEtleUhUVFAoa2V5SW5mbywgZnJhZykge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgICB2YXIgTG9hZGVyID0gY29uZmlnLmxvYWRlcjtcbiAgICAgIHZhciBrZXlMb2FkZXIgPSBuZXcgTG9hZGVyKGNvbmZpZyk7XG4gICAgICBmcmFnLmtleUxvYWRlciA9IGtleUluZm8ubG9hZGVyID0ga2V5TG9hZGVyO1xuICAgICAgcmV0dXJuIGtleUluZm8ua2V5TG9hZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBsb2FkZXJDb250ZXh0ID0ge1xuICAgICAgICAgIGtleUluZm86IGtleUluZm8sXG4gICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicsXG4gICAgICAgICAgdXJsOiBrZXlJbmZvLmRlY3J5cHRkYXRhLnVyaVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIG1heFJldHJ5IGlzIDAgc28gdGhhdCBpbnN0ZWFkIG9mIHJldHJ5aW5nIHRoZSBzYW1lIGtleSBvbiB0aGUgc2FtZSB2YXJpYW50IG11bHRpcGxlIHRpbWVzLFxuICAgICAgICAvLyBrZXktbG9hZGVyIHdpbGwgdHJpZ2dlciBhbiBlcnJvciBhbmQgcmVseSBvbiBzdHJlYW0tY29udHJvbGxlciB0byBoYW5kbGUgcmV0cnkgbG9naWMuXG4gICAgICAgIC8vIHRoaXMgd2lsbCBhbHNvIGFsaWduIHJldHJ5IGxvZ2ljIHdpdGggZnJhZ21lbnQtbG9hZGVyXG4gICAgICAgIHZhciBsb2FkUG9saWN5ID0gY29uZmlnLmtleUxvYWRQb2xpY3kuZGVmYXVsdDtcbiAgICAgICAgdmFyIGxvYWRlckNvbmZpZyA9IHtcbiAgICAgICAgICBsb2FkUG9saWN5OiBsb2FkUG9saWN5LFxuICAgICAgICAgIHRpbWVvdXQ6IGxvYWRQb2xpY3kubWF4TG9hZFRpbWVNcyxcbiAgICAgICAgICBtYXhSZXRyeTogMCxcbiAgICAgICAgICByZXRyeURlbGF5OiAwLFxuICAgICAgICAgIG1heFJldHJ5RGVsYXk6IDBcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGxvYWRlckNhbGxiYWNrcyA9IHtcbiAgICAgICAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uIG9uU3VjY2VzcyhyZXNwb25zZSwgc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgICAgICAgICB2YXIgZnJhZyA9IGNvbnRleHQuZnJhZyxcbiAgICAgICAgICAgICAga2V5SW5mbyA9IGNvbnRleHQua2V5SW5mbyxcbiAgICAgICAgICAgICAgdXJpID0gY29udGV4dC51cmw7XG4gICAgICAgICAgICBpZiAoIWZyYWcuZGVjcnlwdGRhdGEgfHwga2V5SW5mbyAhPT0gX3RoaXMzLmtleVVyaVRvS2V5SW5mb1t1cmldKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QoX3RoaXMzLmNyZWF0ZUtleUxvYWRFcnJvcihmcmFnLCBFcnJvckRldGFpbHMuS0VZX0xPQURfRVJST1IsIG5ldyBFcnJvcignYWZ0ZXIga2V5IGxvYWQsIGRlY3J5cHRkYXRhIHVuc2V0IG9yIGNoYW5nZWQnKSwgbmV0d29ya0RldGFpbHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleUluZm8uZGVjcnlwdGRhdGEua2V5ID0gZnJhZy5kZWNyeXB0ZGF0YS5rZXkgPSBuZXcgVWludDhBcnJheShyZXNwb25zZS5kYXRhKTtcblxuICAgICAgICAgICAgLy8gZGV0YWNoIGZyYWdtZW50IGtleSBsb2FkZXIgb24gbG9hZCBzdWNjZXNzXG4gICAgICAgICAgICBmcmFnLmtleUxvYWRlciA9IG51bGw7XG4gICAgICAgICAgICBrZXlJbmZvLmxvYWRlciA9IG51bGw7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICAgICAga2V5SW5mbzoga2V5SW5mb1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKHJlc3BvbnNlLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscywgc3RhdHMpIHtcbiAgICAgICAgICAgIF90aGlzMy5yZXNldExvYWRlcihjb250ZXh0KTtcbiAgICAgICAgICAgIHJlamVjdChfdGhpczMuY3JlYXRlS2V5TG9hZEVycm9yKGZyYWcsIEVycm9yRGV0YWlscy5LRVlfTE9BRF9FUlJPUiwgbmV3IEVycm9yKFwiSFRUUCBFcnJvciBcIiArIHJlc3BvbnNlLmNvZGUgKyBcIiBsb2FkaW5nIGtleSBcIiArIHJlc3BvbnNlLnRleHQpLCBuZXR3b3JrRGV0YWlscywgX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgICAgICB1cmw6IGxvYWRlckNvbnRleHQudXJsLFxuICAgICAgICAgICAgICBkYXRhOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH0sIHJlc3BvbnNlKSkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25UaW1lb3V0OiBmdW5jdGlvbiBvblRpbWVvdXQoc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgICAgICAgICBfdGhpczMucmVzZXRMb2FkZXIoY29udGV4dCk7XG4gICAgICAgICAgICByZWplY3QoX3RoaXMzLmNyZWF0ZUtleUxvYWRFcnJvcihmcmFnLCBFcnJvckRldGFpbHMuS0VZX0xPQURfVElNRU9VVCwgbmV3IEVycm9yKCdrZXkgbG9hZGluZyB0aW1lZCBvdXQnKSwgbmV0d29ya0RldGFpbHMpKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uQWJvcnQ6IGZ1bmN0aW9uIG9uQWJvcnQoc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgICAgICAgICBfdGhpczMucmVzZXRMb2FkZXIoY29udGV4dCk7XG4gICAgICAgICAgICByZWplY3QoX3RoaXMzLmNyZWF0ZUtleUxvYWRFcnJvcihmcmFnLCBFcnJvckRldGFpbHMuSU5URVJOQUxfQUJPUlRFRCwgbmV3IEVycm9yKCdrZXkgbG9hZGluZyBhYm9ydGVkJyksIG5ldHdvcmtEZXRhaWxzKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBrZXlMb2FkZXIubG9hZChsb2FkZXJDb250ZXh0LCBsb2FkZXJDb25maWcsIGxvYWRlckNhbGxiYWNrcyk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5yZXNldExvYWRlciA9IGZ1bmN0aW9uIHJlc2V0TG9hZGVyKGNvbnRleHQpIHtcbiAgICAgIHZhciBmcmFnID0gY29udGV4dC5mcmFnLFxuICAgICAgICBrZXlJbmZvID0gY29udGV4dC5rZXlJbmZvLFxuICAgICAgICB1cmkgPSBjb250ZXh0LnVybDtcbiAgICAgIHZhciBsb2FkZXIgPSBrZXlJbmZvLmxvYWRlcjtcbiAgICAgIGlmIChmcmFnLmtleUxvYWRlciA9PT0gbG9hZGVyKSB7XG4gICAgICAgIGZyYWcua2V5TG9hZGVyID0gbnVsbDtcbiAgICAgICAga2V5SW5mby5sb2FkZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgZGVsZXRlIHRoaXMua2V5VXJpVG9LZXlJbmZvW3VyaV07XG4gICAgICBpZiAobG9hZGVyKSB7XG4gICAgICAgIGxvYWRlci5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gS2V5TG9hZGVyO1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gbWFwQ29udGV4dFRvTGV2ZWxUeXBlKGNvbnRleHQpIHtcbiAgICB2YXIgdHlwZSA9IGNvbnRleHQudHlwZTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgUGxheWxpc3RDb250ZXh0VHlwZS5BVURJT19UUkFDSzpcbiAgICAgICAgcmV0dXJuIFBsYXlsaXN0TGV2ZWxUeXBlLkFVRElPO1xuICAgICAgY2FzZSBQbGF5bGlzdENvbnRleHRUeXBlLlNVQlRJVExFX1RSQUNLOlxuICAgICAgICByZXR1cm4gUGxheWxpc3RMZXZlbFR5cGUuU1VCVElUTEU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gUGxheWxpc3RMZXZlbFR5cGUuTUFJTjtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UmVzcG9uc2VVcmwocmVzcG9uc2UsIGNvbnRleHQpIHtcbiAgICB2YXIgdXJsID0gcmVzcG9uc2UudXJsO1xuICAgIC8vIHJlc3BvbnNlVVJMIG5vdCBzdXBwb3J0ZWQgb24gc29tZSBicm93c2VycyAoaXQgaXMgdXNlZCB0byBkZXRlY3QgVVJMIHJlZGlyZWN0aW9uKVxuICAgIC8vIGRhdGEtdXJpIG1vZGUgYWxzbyBub3Qgc3VwcG9ydGVkIChidXQgbm8gbmVlZCB0byBkZXRlY3QgcmVkaXJlY3Rpb24pXG4gICAgaWYgKHVybCA9PT0gdW5kZWZpbmVkIHx8IHVybC5pbmRleE9mKCdkYXRhOicpID09PSAwKSB7XG4gICAgICAvLyBmYWxsYmFjayB0byBpbml0aWFsIFVSTFxuICAgICAgdXJsID0gY29udGV4dC51cmw7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgdmFyIFBsYXlsaXN0TG9hZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQbGF5bGlzdExvYWRlcihobHMpIHtcbiAgICAgIHRoaXMuaGxzID0gdm9pZCAwO1xuICAgICAgdGhpcy5sb2FkZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHRoaXMudmFyaWFibGVMaXN0ID0gbnVsbDtcbiAgICAgIHRoaXMub25NYW5pZmVzdExvYWRlZCA9IHRoaXMuY2hlY2tBdXRvc3RhcnRMb2FkO1xuICAgICAgdGhpcy5obHMgPSBobHM7XG4gICAgICB0aGlzLnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgfVxuICAgIHZhciBfcHJvdG8gPSBQbGF5bGlzdExvYWRlci5wcm90b3R5cGU7XG4gICAgX3Byb3RvLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uIHN0YXJ0TG9hZChzdGFydFBvc2l0aW9uKSB7fTtcbiAgICBfcHJvdG8uc3RvcExvYWQgPSBmdW5jdGlvbiBzdG9wTG9hZCgpIHtcbiAgICAgIHRoaXMuZGVzdHJveUludGVybmFsTG9hZGVycygpO1xuICAgIH07XG4gICAgX3Byb3RvLnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICBobHMub24oRXZlbnRzLk1BTklGRVNUX0xPQURJTkcsIHRoaXMub25NYW5pZmVzdExvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9uKEV2ZW50cy5MRVZFTF9MT0FESU5HLCB0aGlzLm9uTGV2ZWxMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuQVVESU9fVFJBQ0tfTE9BRElORywgdGhpcy5vbkF1ZGlvVHJhY2tMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuU1VCVElUTEVfVFJBQ0tfTE9BRElORywgdGhpcy5vblN1YnRpdGxlVHJhY2tMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vbihFdmVudHMuTEVWRUxTX1VQREFURUQsIHRoaXMub25MZXZlbHNVcGRhdGVkLCB0aGlzKTtcbiAgICB9O1xuICAgIF9wcm90by51bnJlZ2lzdGVyTGlzdGVuZXJzID0gZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgIHZhciBobHMgPSB0aGlzLmhscztcbiAgICAgIGhscy5vZmYoRXZlbnRzLk1BTklGRVNUX0xPQURJTkcsIHRoaXMub25NYW5pZmVzdExvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuTEVWRUxfTE9BRElORywgdGhpcy5vbkxldmVsTG9hZGluZywgdGhpcyk7XG4gICAgICBobHMub2ZmKEV2ZW50cy5BVURJT19UUkFDS19MT0FESU5HLCB0aGlzLm9uQXVkaW9UcmFja0xvYWRpbmcsIHRoaXMpO1xuICAgICAgaGxzLm9mZihFdmVudHMuU1VCVElUTEVfVFJBQ0tfTE9BRElORywgdGhpcy5vblN1YnRpdGxlVHJhY2tMb2FkaW5nLCB0aGlzKTtcbiAgICAgIGhscy5vZmYoRXZlbnRzLkxFVkVMU19VUERBVEVELCB0aGlzLm9uTGV2ZWxzVXBkYXRlZCwgdGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBkZWZhdWx0cyBvciBjb25maWd1cmVkIGxvYWRlci10eXBlIG92ZXJsb2FkcyAocExvYWRlciBhbmQgbG9hZGVyIGNvbmZpZyBwYXJhbXMpXG4gICAgICovO1xuICAgIF9wcm90by5jcmVhdGVJbnRlcm5hbExvYWRlciA9IGZ1bmN0aW9uIGNyZWF0ZUludGVybmFsTG9hZGVyKGNvbnRleHQpIHtcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLmhscy5jb25maWc7XG4gICAgICB2YXIgUExvYWRlciA9IGNvbmZpZy5wTG9hZGVyO1xuICAgICAgdmFyIExvYWRlciA9IGNvbmZpZy5sb2FkZXI7XG4gICAgICB2YXIgSW50ZXJuYWxMb2FkZXIgPSBQTG9hZGVyIHx8IExvYWRlcjtcbiAgICAgIHZhciBsb2FkZXIgPSBuZXcgSW50ZXJuYWxMb2FkZXIoY29uZmlnKTtcbiAgICAgIHRoaXMubG9hZGVyc1tjb250ZXh0LnR5cGVdID0gbG9hZGVyO1xuICAgICAgcmV0dXJuIGxvYWRlcjtcbiAgICB9O1xuICAgIF9wcm90by5nZXRJbnRlcm5hbExvYWRlciA9IGZ1bmN0aW9uIGdldEludGVybmFsTG9hZGVyKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmxvYWRlcnNbY29udGV4dC50eXBlXTtcbiAgICB9O1xuICAgIF9wcm90by5yZXNldEludGVybmFsTG9hZGVyID0gZnVuY3Rpb24gcmVzZXRJbnRlcm5hbExvYWRlcihjb250ZXh0VHlwZSkge1xuICAgICAgaWYgKHRoaXMubG9hZGVyc1tjb250ZXh0VHlwZV0pIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubG9hZGVyc1tjb250ZXh0VHlwZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCBgZGVzdHJveWAgb24gYWxsIGludGVybmFsIGxvYWRlciBpbnN0YW5jZXMgbWFwcGVkIChvbmUgcGVyIGNvbnRleHQgdHlwZSlcbiAgICAgKi87XG4gICAgX3Byb3RvLmRlc3Ryb3lJbnRlcm5hbExvYWRlcnMgPSBmdW5jdGlvbiBkZXN0cm95SW50ZXJuYWxMb2FkZXJzKCkge1xuICAgICAgZm9yICh2YXIgY29udGV4dFR5cGUgaW4gdGhpcy5sb2FkZXJzKSB7XG4gICAgICAgIHZhciBsb2FkZXIgPSB0aGlzLmxvYWRlcnNbY29udGV4dFR5cGVdO1xuICAgICAgICBpZiAobG9hZGVyKSB7XG4gICAgICAgICAgbG9hZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc2V0SW50ZXJuYWxMb2FkZXIoY29udGV4dFR5cGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy52YXJpYWJsZUxpc3QgPSBudWxsO1xuICAgICAgdGhpcy51bnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLmRlc3Ryb3lJbnRlcm5hbExvYWRlcnMoKTtcbiAgICB9O1xuICAgIF9wcm90by5vbk1hbmlmZXN0TG9hZGluZyA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkaW5nKGV2ZW50LCBkYXRhKSB7XG4gICAgICB2YXIgdXJsID0gZGF0YS51cmw7XG4gICAgICB0aGlzLnZhcmlhYmxlTGlzdCA9IG51bGw7XG4gICAgICB0aGlzLmxvYWQoe1xuICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgbGV2ZWw6IDAsXG4gICAgICAgIHJlc3BvbnNlVHlwZTogJ3RleHQnLFxuICAgICAgICB0eXBlOiBQbGF5bGlzdENvbnRleHRUeXBlLk1BTklGRVNULFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgZGVsaXZlcnlEaXJlY3RpdmVzOiBudWxsLFxuICAgICAgICBsZXZlbE9yVHJhY2s6IG51bGxcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLm9uTGV2ZWxMb2FkaW5nID0gZnVuY3Rpb24gb25MZXZlbExvYWRpbmcoZXZlbnQsIGRhdGEpIHtcbiAgICAgIHZhciBpZCA9IGRhdGEuaWQsXG4gICAgICAgIGxldmVsID0gZGF0YS5sZXZlbCxcbiAgICAgICAgcGF0aHdheUlkID0gZGF0YS5wYXRod2F5SWQsXG4gICAgICAgIHVybCA9IGRhdGEudXJsLFxuICAgICAgICBkZWxpdmVyeURpcmVjdGl2ZXMgPSBkYXRhLmRlbGl2ZXJ5RGlyZWN0aXZlcyxcbiAgICAgICAgbGV2ZWxJbmZvID0gZGF0YS5sZXZlbEluZm87XG4gICAgICB0aGlzLmxvYWQoe1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIGxldmVsOiBsZXZlbCxcbiAgICAgICAgcGF0aHdheUlkOiBwYXRod2F5SWQsXG4gICAgICAgIHJlc3BvbnNlVHlwZTogJ3RleHQnLFxuICAgICAgICB0eXBlOiBQbGF5bGlzdENvbnRleHRUeXBlLkxFVkVMLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgZGVsaXZlcnlEaXJlY3RpdmVzOiBkZWxpdmVyeURpcmVjdGl2ZXMsXG4gICAgICAgIGxldmVsT3JUcmFjazogbGV2ZWxJbmZvXG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5vbkF1ZGlvVHJhY2tMb2FkaW5nID0gZnVuY3Rpb24gb25BdWRpb1RyYWNrTG9hZGluZyhldmVudCwgZGF0YSkge1xuICAgICAgdmFyIGlkID0gZGF0YS5pZCxcbiAgICAgICAgZ3JvdXBJZCA9IGRhdGEuZ3JvdXBJZCxcbiAgICAgICAgdXJsID0gZGF0YS51cmwsXG4gICAgICAgIGRlbGl2ZXJ5RGlyZWN0aXZlcyA9IGRhdGEuZGVsaXZlcnlEaXJlY3RpdmVzLFxuICAgICAgICB0cmFjayA9IGRhdGEudHJhY2s7XG4gICAgICB0aGlzLmxvYWQoe1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIGdyb3VwSWQ6IGdyb3VwSWQsXG4gICAgICAgIGxldmVsOiBudWxsLFxuICAgICAgICByZXNwb25zZVR5cGU6ICd0ZXh0JyxcbiAgICAgICAgdHlwZTogUGxheWxpc3RDb250ZXh0VHlwZS5BVURJT19UUkFDSyxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGRlbGl2ZXJ5RGlyZWN0aXZlczogZGVsaXZlcnlEaXJlY3RpdmVzLFxuICAgICAgICBsZXZlbE9yVHJhY2s6IHRyYWNrXG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5vblN1YnRpdGxlVHJhY2tMb2FkaW5nID0gZnVuY3Rpb24gb25TdWJ0aXRsZVRyYWNrTG9hZGluZyhldmVudCwgZGF0YSkge1xuICAgICAgdmFyIGlkID0gZGF0YS5pZCxcbiAgICAgICAgZ3JvdXBJZCA9IGRhdGEuZ3JvdXBJZCxcbiAgICAgICAgdXJsID0gZGF0YS51cmwsXG4gICAgICAgIGRlbGl2ZXJ5RGlyZWN0aXZlcyA9IGRhdGEuZGVsaXZlcnlEaXJlY3RpdmVzLFxuICAgICAgICB0cmFjayA9IGRhdGEudHJhY2s7XG4gICAgICB0aGlzLmxvYWQoe1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIGdyb3VwSWQ6IGdyb3VwSWQsXG4gICAgICAgIGxldmVsOiBudWxsLFxuICAgICAgICByZXNwb25zZVR5cGU6ICd0ZXh0JyxcbiAgICAgICAgdHlwZTogUGxheWxpc3RDb250ZXh0VHlwZS5TVUJUSVRMRV9UUkFDSyxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGRlbGl2ZXJ5RGlyZWN0aXZlczogZGVsaXZlcnlEaXJlY3RpdmVzLFxuICAgICAgICBsZXZlbE9yVHJhY2s6IHRyYWNrXG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm90by5vbkxldmVsc1VwZGF0ZWQgPSBmdW5jdGlvbiBvbkxldmVsc1VwZGF0ZWQoZXZlbnQsIGRhdGEpIHtcbiAgICAgIC8vIGFib3J0IGFuZCBkZWxldGUgbG9hZGVyIG9mIHJlbW92ZWQgbGV2ZWxzXG4gICAgICB2YXIgbG9hZGVyID0gdGhpcy5sb2FkZXJzW1BsYXlsaXN0Q29udGV4dFR5cGUuTEVWRUxdO1xuICAgICAgaWYgKGxvYWRlcikge1xuICAgICAgICB2YXIgY29udGV4dCA9IGxvYWRlci5jb250ZXh0O1xuICAgICAgICBpZiAoY29udGV4dCAmJiAhZGF0YS5sZXZlbHMuc29tZShmdW5jdGlvbiAobHZsKSB7XG4gICAgICAgICAgcmV0dXJuIGx2bCA9PT0gY29udGV4dC5sZXZlbE9yVHJhY2s7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgbG9hZGVyLmFib3J0KCk7XG4gICAgICAgICAgZGVsZXRlIHRoaXMubG9hZGVyc1tQbGF5bGlzdENvbnRleHRUeXBlLkxFVkVMXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLmxvYWQgPSBmdW5jdGlvbiBsb2FkKGNvbnRleHQpIHtcbiAgICAgIHZhciBfY29udGV4dCRkZWxpdmVyeURpcmUsXG4gICAgICAgIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLmhscy5jb25maWc7XG5cbiAgICAgIC8vIGxvZ2dlci5kZWJ1ZyhgW3BsYXlsaXN0LWxvYWRlcl06IExvYWRpbmcgcGxheWxpc3Qgb2YgdHlwZSAke2NvbnRleHQudHlwZX0sIGxldmVsOiAke2NvbnRleHQubGV2ZWx9LCBpZDogJHtjb250ZXh0LmlkfWApO1xuXG4gICAgICAvLyBDaGVjayBpZiBhIGxvYWRlciBmb3IgdGhpcyBjb250ZXh0IGFscmVhZHkgZXhpc3RzXG4gICAgICB2YXIgbG9hZGVyID0gdGhpcy5nZXRJbnRlcm5hbExvYWRlcihjb250ZXh0KTtcbiAgICAgIGlmIChsb2FkZXIpIHtcbiAgICAgICAgdmFyIGxvZ2dlciA9IHRoaXMuaGxzLmxvZ2dlcjtcbiAgICAgICAgdmFyIGxvYWRlckNvbnRleHQgPSBsb2FkZXIuY29udGV4dDtcbiAgICAgICAgaWYgKGxvYWRlckNvbnRleHQgJiYgbG9hZGVyQ29udGV4dC5sZXZlbE9yVHJhY2sgPT09IGNvbnRleHQubGV2ZWxPclRyYWNrICYmIChsb2FkZXJDb250ZXh0LnVybCA9PT0gY29udGV4dC51cmwgfHwgbG9hZGVyQ29udGV4dC5kZWxpdmVyeURpcmVjdGl2ZXMgJiYgIWNvbnRleHQuZGVsaXZlcnlEaXJlY3RpdmVzKSkge1xuICAgICAgICAgIC8vIHNhbWUgVVJMIGNhbid0IG92ZXJsYXAsIG9yIHdhaXQgZm9yIGJsb2NraW5nIHJlcXVlc3RcbiAgICAgICAgICBpZiAobG9hZGVyQ29udGV4dC51cmwgPT09IGNvbnRleHQudXJsKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiW3BsYXlsaXN0LWxvYWRlcl06IGlnbm9yZSBcIiArIGNvbnRleHQudXJsICsgXCIgb25nb2luZyByZXF1ZXN0XCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiW3BsYXlsaXN0LWxvYWRlcl06IGlnbm9yZSBcIiArIGNvbnRleHQudXJsICsgXCIgaW4gZmF2b3Igb2YgXCIgKyBsb2FkZXJDb250ZXh0LnVybCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIubG9nKFwiW3BsYXlsaXN0LWxvYWRlcl06IGFib3J0aW5nIHByZXZpb3VzIGxvYWRlciBmb3IgdHlwZTogXCIgKyBjb250ZXh0LnR5cGUpO1xuICAgICAgICBsb2FkZXIuYWJvcnQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgZGlmZmVyZW50IGNvbmZpZ3MgZm9yIHJldHJpZXMgZGVwZW5kaW5nIG9uXG4gICAgICAvLyBjb250ZXh0IChtYW5pZmVzdCwgbGV2ZWwsIGF1ZGlvL3N1YnMgcGxheWxpc3QpXG4gICAgICB2YXIgbG9hZFBvbGljeTtcbiAgICAgIGlmIChjb250ZXh0LnR5cGUgPT09IFBsYXlsaXN0Q29udGV4dFR5cGUuTUFOSUZFU1QpIHtcbiAgICAgICAgbG9hZFBvbGljeSA9IGNvbmZpZy5tYW5pZmVzdExvYWRQb2xpY3kuZGVmYXVsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRQb2xpY3kgPSBfZXh0ZW5kcyh7fSwgY29uZmlnLnBsYXlsaXN0TG9hZFBvbGljeS5kZWZhdWx0LCB7XG4gICAgICAgICAgdGltZW91dFJldHJ5OiBudWxsLFxuICAgICAgICAgIGVycm9yUmV0cnk6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsb2FkZXIgPSB0aGlzLmNyZWF0ZUludGVybmFsTG9hZGVyKGNvbnRleHQpO1xuXG4gICAgICAvLyBPdmVycmlkZSBsZXZlbC90cmFjayB0aW1lb3V0IGZvciBMTC1ITFMgcmVxdWVzdHNcbiAgICAgIC8vICh0aGUgZGVmYXVsdCBvZiAxMDAwMG1zIGlzIGNvdW50ZXIgcHJvZHVjdGl2ZSB0byBibG9ja2luZyBwbGF5bGlzdCByZWxvYWQgcmVxdWVzdHMpXG4gICAgICBpZiAoaXNGaW5pdGVOdW1iZXIoKF9jb250ZXh0JGRlbGl2ZXJ5RGlyZSA9IGNvbnRleHQuZGVsaXZlcnlEaXJlY3RpdmVzKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbnRleHQkZGVsaXZlcnlEaXJlLnBhcnQpKSB7XG4gICAgICAgIHZhciBsZXZlbERldGFpbHM7XG4gICAgICAgIGlmIChjb250ZXh0LnR5cGUgPT09IFBsYXlsaXN0Q29udGV4dFR5cGUuTEVWRUwgJiYgY29udGV4dC5sZXZlbCAhPT0gbnVsbCkge1xuICAgICAgICAgIGxldmVsRGV0YWlscyA9IHRoaXMuaGxzLmxldmVsc1tjb250ZXh0LmxldmVsXS5kZXRhaWxzO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQudHlwZSA9PT0gUGxheWxpc3RDb250ZXh0VHlwZS5BVURJT19UUkFDSyAmJiBjb250ZXh0LmlkICE9PSBudWxsKSB7XG4gICAgICAgICAgbGV2ZWxEZXRhaWxzID0gdGhpcy5obHMuYXVkaW9UcmFja3NbY29udGV4dC5pZF0uZGV0YWlscztcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0LnR5cGUgPT09IFBsYXlsaXN0Q29udGV4dFR5cGUuU1VCVElUTEVfVFJBQ0sgJiYgY29udGV4dC5pZCAhPT0gbnVsbCkge1xuICAgICAgICAgIGxldmVsRGV0YWlscyA9IHRoaXMuaGxzLnN1YnRpdGxlVHJhY2tzW2NvbnRleHQuaWRdLmRldGFpbHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxldmVsRGV0YWlscykge1xuICAgICAgICAgIHZhciBwYXJ0VGFyZ2V0ID0gbGV2ZWxEZXRhaWxzLnBhcnRUYXJnZXQ7XG4gICAgICAgICAgdmFyIHRhcmdldER1cmF0aW9uID0gbGV2ZWxEZXRhaWxzLnRhcmdldGR1cmF0aW9uO1xuICAgICAgICAgIGlmIChwYXJ0VGFyZ2V0ICYmIHRhcmdldER1cmF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgbWF4TG93TGF0ZW5jeVBsYXlsaXN0UmVmcmVzaCA9IE1hdGgubWF4KHBhcnRUYXJnZXQgKiAzLCB0YXJnZXREdXJhdGlvbiAqIDAuOCkgKiAxMDAwO1xuICAgICAgICAgICAgbG9hZFBvbGljeSA9IF9leHRlbmRzKHt9LCBsb2FkUG9saWN5LCB7XG4gICAgICAgICAgICAgIG1heFRpbWVUb0ZpcnN0Qnl0ZU1zOiBNYXRoLm1pbihtYXhMb3dMYXRlbmN5UGxheWxpc3RSZWZyZXNoLCBsb2FkUG9saWN5Lm1heFRpbWVUb0ZpcnN0Qnl0ZU1zKSxcbiAgICAgICAgICAgICAgbWF4TG9hZFRpbWVNczogTWF0aC5taW4obWF4TG93TGF0ZW5jeVBsYXlsaXN0UmVmcmVzaCwgbG9hZFBvbGljeS5tYXhUaW1lVG9GaXJzdEJ5dGVNcylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGxlZ2FjeVJldHJ5Q29tcGF0aWJpbGl0eSA9IGxvYWRQb2xpY3kuZXJyb3JSZXRyeSB8fCBsb2FkUG9saWN5LnRpbWVvdXRSZXRyeSB8fCB7fTtcbiAgICAgIHZhciBsb2FkZXJDb25maWcgPSB7XG4gICAgICAgIGxvYWRQb2xpY3k6IGxvYWRQb2xpY3ksXG4gICAgICAgIHRpbWVvdXQ6IGxvYWRQb2xpY3kubWF4TG9hZFRpbWVNcyxcbiAgICAgICAgbWF4UmV0cnk6IGxlZ2FjeVJldHJ5Q29tcGF0aWJpbGl0eS5tYXhOdW1SZXRyeSB8fCAwLFxuICAgICAgICByZXRyeURlbGF5OiBsZWdhY3lSZXRyeUNvbXBhdGliaWxpdHkucmV0cnlEZWxheU1zIHx8IDAsXG4gICAgICAgIG1heFJldHJ5RGVsYXk6IGxlZ2FjeVJldHJ5Q29tcGF0aWJpbGl0eS5tYXhSZXRyeURlbGF5TXMgfHwgMFxuICAgICAgfTtcbiAgICAgIHZhciBsb2FkZXJDYWxsYmFja3MgPSB7XG4gICAgICAgIG9uU3VjY2VzczogZnVuY3Rpb24gb25TdWNjZXNzKHJlc3BvbnNlLCBzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMpIHtcbiAgICAgICAgICB2YXIgbG9hZGVyID0gX3RoaXMuZ2V0SW50ZXJuYWxMb2FkZXIoY29udGV4dCk7XG4gICAgICAgICAgX3RoaXMucmVzZXRJbnRlcm5hbExvYWRlcihjb250ZXh0LnR5cGUpO1xuICAgICAgICAgIHZhciBzdHJpbmcgPSByZXNwb25zZS5kYXRhO1xuXG4gICAgICAgICAgLy8gVmFsaWRhdGUgaWYgaXQgaXMgYW4gTTNVOCBhdCBhbGxcbiAgICAgICAgICBpZiAoc3RyaW5nLmluZGV4T2YoJyNFWFRNM1UnKSAhPT0gMCkge1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlTWFuaWZlc3RQYXJzaW5nRXJyb3IocmVzcG9uc2UsIGNvbnRleHQsIG5ldyBFcnJvcignbm8gRVhUTTNVIGRlbGltaXRlcicpLCBuZXR3b3JrRGV0YWlscyB8fCBudWxsLCBzdGF0cyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRzLnBhcnNpbmcuc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICBpZiAoTTNVOFBhcnNlci5pc01lZGlhUGxheWxpc3Qoc3RyaW5nKSB8fCBjb250ZXh0LnR5cGUgIT09IFBsYXlsaXN0Q29udGV4dFR5cGUuTUFOSUZFU1QpIHtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVRyYWNrT3JMZXZlbFBsYXlsaXN0KHJlc3BvbnNlLCBzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMgfHwgbnVsbCwgbG9hZGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlTWFzdGVyUGxheWxpc3QocmVzcG9uc2UsIHN0YXRzLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKHJlc3BvbnNlLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscywgc3RhdHMpIHtcbiAgICAgICAgICBfdGhpcy5oYW5kbGVOZXR3b3JrRXJyb3IoY29udGV4dCwgbmV0d29ya0RldGFpbHMsIGZhbHNlLCByZXNwb25zZSwgc3RhdHMpO1xuICAgICAgICB9LFxuICAgICAgICBvblRpbWVvdXQ6IGZ1bmN0aW9uIG9uVGltZW91dChzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMpIHtcbiAgICAgICAgICBfdGhpcy5oYW5kbGVOZXR3b3JrRXJyb3IoY29udGV4dCwgbmV0d29ya0RldGFpbHMsIHRydWUsIHVuZGVmaW5lZCwgc3RhdHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyBsb2dnZXIuZGVidWcoYFtwbGF5bGlzdC1sb2FkZXJdOiBDYWxsaW5nIGludGVybmFsIGxvYWRlciBkZWxlZ2F0ZSBmb3IgVVJMOiAke2NvbnRleHQudXJsfWApO1xuXG4gICAgICBsb2FkZXIubG9hZChjb250ZXh0LCBsb2FkZXJDb25maWcsIGxvYWRlckNhbGxiYWNrcyk7XG4gICAgfTtcbiAgICBfcHJvdG8uY2hlY2tBdXRvc3RhcnRMb2FkID0gZnVuY3Rpb24gY2hlY2tBdXRvc3RhcnRMb2FkKCkge1xuICAgICAgaWYgKCF0aGlzLmhscykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgX3RoaXMkaGxzID0gdGhpcy5obHMsXG4gICAgICAgIF90aGlzJGhscyRjb25maWcgPSBfdGhpcyRobHMuY29uZmlnLFxuICAgICAgICBhdXRvU3RhcnRMb2FkID0gX3RoaXMkaGxzJGNvbmZpZy5hdXRvU3RhcnRMb2FkLFxuICAgICAgICBzdGFydFBvc2l0aW9uID0gX3RoaXMkaGxzJGNvbmZpZy5zdGFydFBvc2l0aW9uLFxuICAgICAgICBmb3JjZVN0YXJ0TG9hZCA9IF90aGlzJGhscy5mb3JjZVN0YXJ0TG9hZDtcbiAgICAgIGlmIChhdXRvU3RhcnRMb2FkIHx8IGZvcmNlU3RhcnRMb2FkKSB7XG4gICAgICAgIHRoaXMuaGxzLmxvZ2dlci5sb2coKGF1dG9TdGFydExvYWQgPyAnYXV0bycgOiAnZm9yY2UnKSArIFwiIHN0YXJ0TG9hZCB3aXRoIGNvbmZpZ3VyZWQgc3RhcnRQb3NpdGlvbiBcIiArIHN0YXJ0UG9zaXRpb24pO1xuICAgICAgICB0aGlzLmhscy5zdGFydExvYWQoc3RhcnRQb3NpdGlvbik7XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJvdG8uaGFuZGxlTWFzdGVyUGxheWxpc3QgPSBmdW5jdGlvbiBoYW5kbGVNYXN0ZXJQbGF5bGlzdChyZXNwb25zZSwgc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICB2YXIgc3RyaW5nID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgIHZhciB1cmwgPSBnZXRSZXNwb25zZVVybChyZXNwb25zZSwgY29udGV4dCk7XG4gICAgICB2YXIgcGFyc2VkUmVzdWx0ID0gTTNVOFBhcnNlci5wYXJzZU1hc3RlclBsYXlsaXN0KHN0cmluZywgdXJsKTtcbiAgICAgIGlmIChwYXJzZWRSZXN1bHQucGxheWxpc3RQYXJzaW5nRXJyb3IpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVNYW5pZmVzdFBhcnNpbmdFcnJvcihyZXNwb25zZSwgY29udGV4dCwgcGFyc2VkUmVzdWx0LnBsYXlsaXN0UGFyc2luZ0Vycm9yLCBuZXR3b3JrRGV0YWlscywgc3RhdHMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY29udGVudFN0ZWVyaW5nID0gcGFyc2VkUmVzdWx0LmNvbnRlbnRTdGVlcmluZyxcbiAgICAgICAgbGV2ZWxzID0gcGFyc2VkUmVzdWx0LmxldmVscyxcbiAgICAgICAgc2Vzc2lvbkRhdGEgPSBwYXJzZWRSZXN1bHQuc2Vzc2lvbkRhdGEsXG4gICAgICAgIHNlc3Npb25LZXlzID0gcGFyc2VkUmVzdWx0LnNlc3Npb25LZXlzLFxuICAgICAgICBzdGFydFRpbWVPZmZzZXQgPSBwYXJzZWRSZXN1bHQuc3RhcnRUaW1lT2Zmc2V0LFxuICAgICAgICB2YXJpYWJsZUxpc3QgPSBwYXJzZWRSZXN1bHQudmFyaWFibGVMaXN0O1xuICAgICAgdGhpcy52YXJpYWJsZUxpc3QgPSB2YXJpYWJsZUxpc3Q7XG4gICAgICB2YXIgX00zVThQYXJzZXIkcGFyc2VNYXN0ID0gTTNVOFBhcnNlci5wYXJzZU1hc3RlclBsYXlsaXN0TWVkaWEoc3RyaW5nLCB1cmwsIHBhcnNlZFJlc3VsdCksXG4gICAgICAgIF9NM1U4UGFyc2VyJHBhcnNlTWFzdDIgPSBfTTNVOFBhcnNlciRwYXJzZU1hc3QuQVVESU8sXG4gICAgICAgIGF1ZGlvVHJhY2tzID0gX00zVThQYXJzZXIkcGFyc2VNYXN0MiA9PT0gdm9pZCAwID8gW10gOiBfTTNVOFBhcnNlciRwYXJzZU1hc3QyLFxuICAgICAgICBzdWJ0aXRsZXMgPSBfTTNVOFBhcnNlciRwYXJzZU1hc3QuU1VCVElUTEVTLFxuICAgICAgICBjYXB0aW9ucyA9IF9NM1U4UGFyc2VyJHBhcnNlTWFzdFsnQ0xPU0VELUNBUFRJT05TJ107XG4gICAgICBpZiAoYXVkaW9UcmFja3MubGVuZ3RoKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgZm91bmQgYW4gYXVkaW8gdHJhY2sgZW1iZWRkZWQgaW4gbWFpbiBwbGF5bGlzdCAoYXVkaW8gdHJhY2sgd2l0aG91dCBVUkkgYXR0cmlidXRlKVxuICAgICAgICB2YXIgZW1iZWRkZWRBdWRpb0ZvdW5kID0gYXVkaW9UcmFja3Muc29tZShmdW5jdGlvbiAoYXVkaW9UcmFjaykge1xuICAgICAgICAgIHJldHVybiAhYXVkaW9UcmFjay51cmw7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGlmIG5vIGVtYmVkZGVkIGF1ZGlvIHRyYWNrIGRlZmluZWQsIGJ1dCBhdWRpbyBjb2RlYyBzaWduYWxlZCBpbiBxdWFsaXR5IGxldmVsLFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHNpZ25hbCB0aGlzIG1haW4gYXVkaW8gdHJhY2sgdGhpcyBjb3VsZCBoYXBwZW4gd2l0aCBwbGF5bGlzdHMgd2l0aFxuICAgICAgICAvLyBhbHQgYXVkaW8gcmVuZGl0aW9uIGluIHdoaWNoIHF1YWxpdHkgbGV2ZWxzIChtYWluKVxuICAgICAgICAvLyBjb250YWlucyBib3RoIGF1ZGlvK3ZpZGVvLiBidXQgd2l0aCBtaXhlZCBhdWRpbyB0cmFjayBub3Qgc2lnbmFsZWRcbiAgICAgICAgaWYgKCFlbWJlZGRlZEF1ZGlvRm91bmQgJiYgbGV2ZWxzWzBdLmF1ZGlvQ29kZWMgJiYgIWxldmVsc1swXS5hdHRycy5BVURJTykge1xuICAgICAgICAgIHRoaXMuaGxzLmxvZ2dlci5sb2coJ1twbGF5bGlzdC1sb2FkZXJdOiBhdWRpbyBjb2RlYyBzaWduYWxlZCBpbiBxdWFsaXR5IGxldmVsLCBidXQgbm8gZW1iZWRkZWQgYXVkaW8gdHJhY2sgc2lnbmFsZWQsIGNyZWF0ZSBvbmUnKTtcbiAgICAgICAgICBhdWRpb1RyYWNrcy51bnNoaWZ0KHtcbiAgICAgICAgICAgIHR5cGU6ICdtYWluJyxcbiAgICAgICAgICAgIG5hbWU6ICdtYWluJyxcbiAgICAgICAgICAgIGdyb3VwSWQ6ICdtYWluJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgYXV0b3NlbGVjdDogZmFsc2UsXG4gICAgICAgICAgICBmb3JjZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaWQ6IC0xLFxuICAgICAgICAgICAgYXR0cnM6IG5ldyBBdHRyTGlzdCh7fSksXG4gICAgICAgICAgICBiaXRyYXRlOiAwLFxuICAgICAgICAgICAgdXJsOiAnJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBobHMudHJpZ2dlcihFdmVudHMuTUFOSUZFU1RfTE9BREVELCB7XG4gICAgICAgIGxldmVsczogbGV2ZWxzLFxuICAgICAgICBhdWRpb1RyYWNrczogYXVkaW9UcmFja3MsXG4gICAgICAgIHN1YnRpdGxlczogc3VidGl0bGVzLFxuICAgICAgICBjYXB0aW9uczogY2FwdGlvbnMsXG4gICAgICAgIGNvbnRlbnRTdGVlcmluZzogY29udGVudFN0ZWVyaW5nLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgc3RhdHM6IHN0YXRzLFxuICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHMsXG4gICAgICAgIHNlc3Npb25EYXRhOiBzZXNzaW9uRGF0YSxcbiAgICAgICAgc2Vzc2lvbktleXM6IHNlc3Npb25LZXlzLFxuICAgICAgICBzdGFydFRpbWVPZmZzZXQ6IHN0YXJ0VGltZU9mZnNldCxcbiAgICAgICAgdmFyaWFibGVMaXN0OiB2YXJpYWJsZUxpc3RcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3Byb3RvLmhhbmRsZVRyYWNrT3JMZXZlbFBsYXlsaXN0ID0gZnVuY3Rpb24gaGFuZGxlVHJhY2tPckxldmVsUGxheWxpc3QocmVzcG9uc2UsIHN0YXRzLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscywgbG9hZGVyKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICB2YXIgaWQgPSBjb250ZXh0LmlkLFxuICAgICAgICBsZXZlbCA9IGNvbnRleHQubGV2ZWwsXG4gICAgICAgIHR5cGUgPSBjb250ZXh0LnR5cGU7XG4gICAgICB2YXIgdXJsID0gZ2V0UmVzcG9uc2VVcmwocmVzcG9uc2UsIGNvbnRleHQpO1xuICAgICAgdmFyIGxldmVsSWQgPSBpc0Zpbml0ZU51bWJlcihsZXZlbCkgPyBsZXZlbCA6IGlzRmluaXRlTnVtYmVyKGlkKSA/IGlkIDogMDtcbiAgICAgIHZhciBsZXZlbFR5cGUgPSBtYXBDb250ZXh0VG9MZXZlbFR5cGUoY29udGV4dCk7XG4gICAgICB2YXIgbGV2ZWxEZXRhaWxzID0gTTNVOFBhcnNlci5wYXJzZUxldmVsUGxheWxpc3QocmVzcG9uc2UuZGF0YSwgdXJsLCBsZXZlbElkLCBsZXZlbFR5cGUsIDAsIHRoaXMudmFyaWFibGVMaXN0KTtcblxuICAgICAgLy8gV2UgaGF2ZSBkb25lIG91ciBmaXJzdCByZXF1ZXN0IChNYW5pZmVzdC10eXBlKSBhbmQgcmVjZWl2ZVxuICAgICAgLy8gbm90IGEgbWFzdGVyIHBsYXlsaXN0IGJ1dCBhIGNodW5rLWxpc3QgKHRyYWNrL2xldmVsKVxuICAgICAgLy8gV2UgZmlyZSB0aGUgbWFuaWZlc3QtbG9hZGVkIGV2ZW50IGFueXdheSB3aXRoIHRoZSBwYXJzZWQgbGV2ZWwtZGV0YWlsc1xuICAgICAgLy8gYnkgY3JlYXRpbmcgYSBzaW5nbGUtbGV2ZWwgc3RydWN0dXJlIGZvciBpdC5cbiAgICAgIGlmICh0eXBlID09PSBQbGF5bGlzdENvbnRleHRUeXBlLk1BTklGRVNUKSB7XG4gICAgICAgIHZhciBzaW5nbGVMZXZlbCA9IHtcbiAgICAgICAgICBhdHRyczogbmV3IEF0dHJMaXN0KHt9KSxcbiAgICAgICAgICBiaXRyYXRlOiAwLFxuICAgICAgICAgIGRldGFpbHM6IGxldmVsRGV0YWlscyxcbiAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgICB1cmw6IHVybFxuICAgICAgICB9O1xuICAgICAgICBsZXZlbERldGFpbHMucmVxdWVzdFNjaGVkdWxlZCA9IHN0YXRzLmxvYWRpbmcuc3RhcnQgKyBjb21wdXRlUmVsb2FkSW50ZXJ2YWwobGV2ZWxEZXRhaWxzLCAwKTtcbiAgICAgICAgaGxzLnRyaWdnZXIoRXZlbnRzLk1BTklGRVNUX0xPQURFRCwge1xuICAgICAgICAgIGxldmVsczogW3NpbmdsZUxldmVsXSxcbiAgICAgICAgICBhdWRpb1RyYWNrczogW10sXG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgc3RhdHM6IHN0YXRzLFxuICAgICAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlscyxcbiAgICAgICAgICBzZXNzaW9uRGF0YTogbnVsbCxcbiAgICAgICAgICBzZXNzaW9uS2V5czogbnVsbCxcbiAgICAgICAgICBjb250ZW50U3RlZXJpbmc6IG51bGwsXG4gICAgICAgICAgc3RhcnRUaW1lT2Zmc2V0OiBudWxsLFxuICAgICAgICAgIHZhcmlhYmxlTGlzdDogbnVsbFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gc2F2ZSBwYXJzaW5nIHRpbWVcbiAgICAgIHN0YXRzLnBhcnNpbmcuZW5kID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICAgIC8vIGV4dGVuZCB0aGUgY29udGV4dCB3aXRoIHRoZSBuZXcgbGV2ZWxEZXRhaWxzIHByb3BlcnR5XG4gICAgICBjb250ZXh0LmxldmVsRGV0YWlscyA9IGxldmVsRGV0YWlscztcbiAgICAgIHRoaXMuaGFuZGxlUGxheWxpc3RMb2FkZWQobGV2ZWxEZXRhaWxzLCByZXNwb25zZSwgc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzLCBsb2FkZXIpO1xuICAgIH07XG4gICAgX3Byb3RvLmhhbmRsZU1hbmlmZXN0UGFyc2luZ0Vycm9yID0gZnVuY3Rpb24gaGFuZGxlTWFuaWZlc3RQYXJzaW5nRXJyb3IocmVzcG9uc2UsIGNvbnRleHQsIGVycm9yLCBuZXR3b3JrRGV0YWlscywgc3RhdHMpIHtcbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTkVUV09SS19FUlJPUixcbiAgICAgICAgZGV0YWlsczogRXJyb3JEZXRhaWxzLk1BTklGRVNUX1BBUlNJTkdfRVJST1IsXG4gICAgICAgIGZhdGFsOiBjb250ZXh0LnR5cGUgPT09IFBsYXlsaXN0Q29udGV4dFR5cGUuTUFOSUZFU1QsXG4gICAgICAgIHVybDogcmVzcG9uc2UudXJsLFxuICAgICAgICBlcnI6IGVycm9yLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIHJlYXNvbjogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlLFxuICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHMsXG4gICAgICAgIHN0YXRzOiBzdGF0c1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJvdG8uaGFuZGxlTmV0d29ya0Vycm9yID0gZnVuY3Rpb24gaGFuZGxlTmV0d29ya0Vycm9yKGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzLCB0aW1lb3V0LCByZXNwb25zZSwgc3RhdHMpIHtcbiAgICAgIGlmICh0aW1lb3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgdGltZW91dCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIG1lc3NhZ2UgPSBcIkEgbmV0d29yayBcIiArICh0aW1lb3V0ID8gJ3RpbWVvdXQnIDogJ2Vycm9yJyArIChyZXNwb25zZSA/ICcgKHN0YXR1cyAnICsgcmVzcG9uc2UuY29kZSArICcpJyA6ICcnKSkgKyBcIiBvY2N1cnJlZCB3aGlsZSBsb2FkaW5nIFwiICsgY29udGV4dC50eXBlO1xuICAgICAgaWYgKGNvbnRleHQudHlwZSA9PT0gUGxheWxpc3RDb250ZXh0VHlwZS5MRVZFTCkge1xuICAgICAgICBtZXNzYWdlICs9IFwiOiBcIiArIGNvbnRleHQubGV2ZWwgKyBcIiBpZDogXCIgKyBjb250ZXh0LmlkO1xuICAgICAgfSBlbHNlIGlmIChjb250ZXh0LnR5cGUgPT09IFBsYXlsaXN0Q29udGV4dFR5cGUuQVVESU9fVFJBQ0sgfHwgY29udGV4dC50eXBlID09PSBQbGF5bGlzdENvbnRleHRUeXBlLlNVQlRJVExFX1RSQUNLKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gXCIgaWQ6IFwiICsgY29udGV4dC5pZCArIFwiIGdyb3VwLWlkOiBcXFwiXCIgKyBjb250ZXh0Lmdyb3VwSWQgKyBcIlxcXCJcIjtcbiAgICAgIH1cbiAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIHRoaXMuaGxzLmxvZ2dlci53YXJuKFwiW3BsYXlsaXN0LWxvYWRlcl06IFwiICsgbWVzc2FnZSk7XG4gICAgICB2YXIgZGV0YWlscyA9IEVycm9yRGV0YWlscy5VTktOT1dOO1xuICAgICAgdmFyIGZhdGFsID0gZmFsc2U7XG4gICAgICB2YXIgbG9hZGVyID0gdGhpcy5nZXRJbnRlcm5hbExvYWRlcihjb250ZXh0KTtcbiAgICAgIHN3aXRjaCAoY29udGV4dC50eXBlKSB7XG4gICAgICAgIGNhc2UgUGxheWxpc3RDb250ZXh0VHlwZS5NQU5JRkVTVDpcbiAgICAgICAgICBkZXRhaWxzID0gdGltZW91dCA/IEVycm9yRGV0YWlscy5NQU5JRkVTVF9MT0FEX1RJTUVPVVQgOiBFcnJvckRldGFpbHMuTUFOSUZFU1RfTE9BRF9FUlJPUjtcbiAgICAgICAgICBmYXRhbCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUGxheWxpc3RDb250ZXh0VHlwZS5MRVZFTDpcbiAgICAgICAgICBkZXRhaWxzID0gdGltZW91dCA/IEVycm9yRGV0YWlscy5MRVZFTF9MT0FEX1RJTUVPVVQgOiBFcnJvckRldGFpbHMuTEVWRUxfTE9BRF9FUlJPUjtcbiAgICAgICAgICBmYXRhbCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFBsYXlsaXN0Q29udGV4dFR5cGUuQVVESU9fVFJBQ0s6XG4gICAgICAgICAgZGV0YWlscyA9IHRpbWVvdXQgPyBFcnJvckRldGFpbHMuQVVESU9fVFJBQ0tfTE9BRF9USU1FT1VUIDogRXJyb3JEZXRhaWxzLkFVRElPX1RSQUNLX0xPQURfRVJST1I7XG4gICAgICAgICAgZmF0YWwgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBQbGF5bGlzdENvbnRleHRUeXBlLlNVQlRJVExFX1RSQUNLOlxuICAgICAgICAgIGRldGFpbHMgPSB0aW1lb3V0ID8gRXJyb3JEZXRhaWxzLlNVQlRJVExFX1RSQUNLX0xPQURfVElNRU9VVCA6IEVycm9yRGV0YWlscy5TVUJUSVRMRV9MT0FEX0VSUk9SO1xuICAgICAgICAgIGZhdGFsID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAobG9hZGVyKSB7XG4gICAgICAgIHRoaXMucmVzZXRJbnRlcm5hbExvYWRlcihjb250ZXh0LnR5cGUpO1xuICAgICAgfVxuICAgICAgdmFyIGVycm9yRGF0YSA9IHtcbiAgICAgICAgdHlwZTogRXJyb3JUeXBlcy5ORVRXT1JLX0VSUk9SLFxuICAgICAgICBkZXRhaWxzOiBkZXRhaWxzLFxuICAgICAgICBmYXRhbDogZmF0YWwsXG4gICAgICAgIHVybDogY29udGV4dC51cmwsXG4gICAgICAgIGxvYWRlcjogbG9hZGVyLFxuICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlscyxcbiAgICAgICAgc3RhdHM6IHN0YXRzXG4gICAgICB9O1xuICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciB1cmwgPSAobmV0d29ya0RldGFpbHMgPT0gbnVsbCA/IHZvaWQgMCA6IG5ldHdvcmtEZXRhaWxzLnVybCkgfHwgY29udGV4dC51cmw7XG4gICAgICAgIGVycm9yRGF0YS5yZXNwb25zZSA9IF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICBkYXRhOiB1bmRlZmluZWRcbiAgICAgICAgfSwgcmVzcG9uc2UpO1xuICAgICAgfVxuICAgICAgdGhpcy5obHMudHJpZ2dlcihFdmVudHMuRVJST1IsIGVycm9yRGF0YSk7XG4gICAgfTtcbiAgICBfcHJvdG8uaGFuZGxlUGxheWxpc3RMb2FkZWQgPSBmdW5jdGlvbiBoYW5kbGVQbGF5bGlzdExvYWRlZChsZXZlbERldGFpbHMsIHJlc3BvbnNlLCBzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMsIGxvYWRlcikge1xuICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgdmFyIHR5cGUgPSBjb250ZXh0LnR5cGUsXG4gICAgICAgIGxldmVsID0gY29udGV4dC5sZXZlbCxcbiAgICAgICAgaWQgPSBjb250ZXh0LmlkLFxuICAgICAgICBncm91cElkID0gY29udGV4dC5ncm91cElkLFxuICAgICAgICBkZWxpdmVyeURpcmVjdGl2ZXMgPSBjb250ZXh0LmRlbGl2ZXJ5RGlyZWN0aXZlcztcbiAgICAgIHZhciB1cmwgPSBnZXRSZXNwb25zZVVybChyZXNwb25zZSwgY29udGV4dCk7XG4gICAgICB2YXIgcGFyZW50ID0gbWFwQ29udGV4dFRvTGV2ZWxUeXBlKGNvbnRleHQpO1xuICAgICAgdmFyIGxldmVsSW5kZXggPSB0eXBlb2YgY29udGV4dC5sZXZlbCA9PT0gJ251bWJlcicgJiYgcGFyZW50ID09PSBQbGF5bGlzdExldmVsVHlwZS5NQUlOID8gbGV2ZWwgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoIWxldmVsRGV0YWlscy5mcmFnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBfZXJyb3IgPSBsZXZlbERldGFpbHMucGxheWxpc3RQYXJzaW5nRXJyb3IgPSBuZXcgRXJyb3IoJ05vIFNlZ21lbnRzIGZvdW5kIGluIFBsYXlsaXN0Jyk7XG4gICAgICAgIGhscy50cmlnZ2VyKEV2ZW50cy5FUlJPUiwge1xuICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuTkVUV09SS19FUlJPUixcbiAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuTEVWRUxfRU1QVFlfRVJST1IsXG4gICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIGVycm9yOiBfZXJyb3IsXG4gICAgICAgICAgcmVhc29uOiBfZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2UsXG4gICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICBsZXZlbDogbGV2ZWxJbmRleCxcbiAgICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHMsXG4gICAgICAgICAgc3RhdHM6IHN0YXRzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIWxldmVsRGV0YWlscy50YXJnZXRkdXJhdGlvbikge1xuICAgICAgICBsZXZlbERldGFpbHMucGxheWxpc3RQYXJzaW5nRXJyb3IgPSBuZXcgRXJyb3IoJ01pc3NpbmcgVGFyZ2V0IER1cmF0aW9uJyk7XG4gICAgICB9XG4gICAgICB2YXIgZXJyb3IgPSBsZXZlbERldGFpbHMucGxheWxpc3RQYXJzaW5nRXJyb3I7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5obHMubG9nZ2VyLndhcm4oZXJyb3IpO1xuICAgICAgICBpZiAoIWhscy5jb25maWcuaWdub3JlUGxheWxpc3RQYXJzaW5nRXJyb3JzKSB7XG4gICAgICAgICAgaGxzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk5FVFdPUktfRVJST1IsXG4gICAgICAgICAgICBkZXRhaWxzOiBFcnJvckRldGFpbHMuTEVWRUxfUEFSU0lOR19FUlJPUixcbiAgICAgICAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgcmVhc29uOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlLFxuICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICAgIGxldmVsOiBsZXZlbEluZGV4LFxuICAgICAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHMsXG4gICAgICAgICAgICBzdGF0czogc3RhdHNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV2ZWxEZXRhaWxzLnBsYXlsaXN0UGFyc2luZ0Vycm9yID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChsZXZlbERldGFpbHMubGl2ZSAmJiBsb2FkZXIpIHtcbiAgICAgICAgaWYgKGxvYWRlci5nZXRDYWNoZUFnZSkge1xuICAgICAgICAgIGxldmVsRGV0YWlscy5hZ2VIZWFkZXIgPSBsb2FkZXIuZ2V0Q2FjaGVBZ2UoKSB8fCAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbG9hZGVyLmdldENhY2hlQWdlIHx8IGlzTmFOKGxldmVsRGV0YWlscy5hZ2VIZWFkZXIpKSB7XG4gICAgICAgICAgbGV2ZWxEZXRhaWxzLmFnZUhlYWRlciA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFBsYXlsaXN0Q29udGV4dFR5cGUuTUFOSUZFU1Q6XG4gICAgICAgIGNhc2UgUGxheWxpc3RDb250ZXh0VHlwZS5MRVZFTDpcbiAgICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuTEVWRUxfTE9BREVELCB7XG4gICAgICAgICAgICBkZXRhaWxzOiBsZXZlbERldGFpbHMsXG4gICAgICAgICAgICBsZXZlbEluZm86IGNvbnRleHQubGV2ZWxPclRyYWNrIHx8IGhscy5sZXZlbHNbMF0sXG4gICAgICAgICAgICBsZXZlbDogbGV2ZWxJbmRleCB8fCAwLFxuICAgICAgICAgICAgaWQ6IGlkIHx8IDAsXG4gICAgICAgICAgICBzdGF0czogc3RhdHMsXG4gICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHMsXG4gICAgICAgICAgICBkZWxpdmVyeURpcmVjdGl2ZXM6IGRlbGl2ZXJ5RGlyZWN0aXZlcyxcbiAgICAgICAgICAgIHdpdGhvdXRNdWx0aVZhcmlhbnQ6IHR5cGUgPT09IFBsYXlsaXN0Q29udGV4dFR5cGUuTUFOSUZFU1RcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBQbGF5bGlzdENvbnRleHRUeXBlLkFVRElPX1RSQUNLOlxuICAgICAgICAgIGhscy50cmlnZ2VyKEV2ZW50cy5BVURJT19UUkFDS19MT0FERUQsIHtcbiAgICAgICAgICAgIGRldGFpbHM6IGxldmVsRGV0YWlscyxcbiAgICAgICAgICAgIHRyYWNrOiBjb250ZXh0LmxldmVsT3JUcmFjayxcbiAgICAgICAgICAgIGlkOiBpZCB8fCAwLFxuICAgICAgICAgICAgZ3JvdXBJZDogZ3JvdXBJZCB8fCAnJyxcbiAgICAgICAgICAgIHN0YXRzOiBzdGF0cyxcbiAgICAgICAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlscyxcbiAgICAgICAgICAgIGRlbGl2ZXJ5RGlyZWN0aXZlczogZGVsaXZlcnlEaXJlY3RpdmVzXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUGxheWxpc3RDb250ZXh0VHlwZS5TVUJUSVRMRV9UUkFDSzpcbiAgICAgICAgICBobHMudHJpZ2dlcihFdmVudHMuU1VCVElUTEVfVFJBQ0tfTE9BREVELCB7XG4gICAgICAgICAgICBkZXRhaWxzOiBsZXZlbERldGFpbHMsXG4gICAgICAgICAgICB0cmFjazogY29udGV4dC5sZXZlbE9yVHJhY2ssXG4gICAgICAgICAgICBpZDogaWQgfHwgMCxcbiAgICAgICAgICAgIGdyb3VwSWQ6IGdyb3VwSWQgfHwgJycsXG4gICAgICAgICAgICBzdGF0czogc3RhdHMsXG4gICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHMsXG4gICAgICAgICAgICBkZWxpdmVyeURpcmVjdGl2ZXM6IGRlbGl2ZXJ5RGlyZWN0aXZlc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFBsYXlsaXN0TG9hZGVyO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIFRoZSBgSGxzYCBjbGFzcyBpcyB0aGUgY29yZSBvZiB0aGUgSExTLmpzIGxpYnJhcnkgdXNlZCB0byBpbnN0YW50aWF0ZSBwbGF5ZXIgaW5zdGFuY2VzLlxuICAgKiBAcHVibGljXG4gICAqL1xuICB2YXIgSGxzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGFuIEhMUyBjbGllbnQgdGhhdCBjYW4gYXR0YWNoIHRvIGV4YWN0bHkgb25lIGBIVE1MTWVkaWFFbGVtZW50YC5cbiAgICAgKiBAcGFyYW0gdXNlckNvbmZpZyAtIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBhcHBsaWVkIG92ZXIgYEhscy5EZWZhdWx0Q29uZmlnYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhscyh1c2VyQ29uZmlnKSB7XG4gICAgICBpZiAodXNlckNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHVzZXJDb25maWcgPSB7fTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbiB1c2VkIGJ5IHRoZSBwbGF5ZXIuIEF0IGluc3RhbnRpYXRpb24gdGhpcyBpcyBjb21iaW5hdGlvbiBvZiBgaGxzLnVzZXJDb25maWdgIG1lcmdlZCBvdmVyIGBIbHMuRGVmYXVsdENvbmZpZ2AuXG4gICAgICAgKi9cbiAgICAgIHRoaXMuY29uZmlnID0gdm9pZCAwO1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgcHJvdmlkZWQgb24gcGxheWVyIGluc3RhbnRpYXRpb24uXG4gICAgICAgKi9cbiAgICAgIHRoaXMudXNlckNvbmZpZyA9IHZvaWQgMDtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGxvZ2dlciBmdW5jdGlvbnMgdXNlZCBieSB0aGlzIHBsYXllciBpbnN0YW5jZSwgY29uZmlndXJlZCBvbiBwbGF5ZXIgaW5zdGFudGlhdGlvbi5cbiAgICAgICAqL1xuICAgICAgdGhpcy5sb2dnZXIgPSB2b2lkIDA7XG4gICAgICB0aGlzLmNvcmVDb21wb25lbnRzID0gdm9pZCAwO1xuICAgICAgdGhpcy5uZXR3b3JrQ29udHJvbGxlcnMgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgdGhpcy5fYXV0b0xldmVsQ2FwcGluZyA9IC0xO1xuICAgICAgdGhpcy5fbWF4SGRjcExldmVsID0gbnVsbDtcbiAgICAgIHRoaXMuYWJyQ29udHJvbGxlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMuYnVmZmVyQ29udHJvbGxlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMuY2FwTGV2ZWxDb250cm9sbGVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5sYXRlbmN5Q29udHJvbGxlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMubGV2ZWxDb250cm9sbGVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5hdWRpb1N0cmVhbUNvbnRyb2xsZXIgPSB2b2lkIDA7XG4gICAgICB0aGlzLnN1YnRpdGl0bGVTdHJlYW1Db250cm9sbGVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5hdWRpb1RyYWNrQ29udHJvbGxlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMuc3VidGl0bGVUcmFja0NvbnRyb2xsZXIgPSB2b2lkIDA7XG4gICAgICB0aGlzLmludGVyc3RpdGlhbHNDb250cm9sbGVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5nYXBDb250cm9sbGVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5lbWVDb250cm9sbGVyID0gdm9pZCAwO1xuICAgICAgdGhpcy5jbWNkQ29udHJvbGxlciA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX21lZGlhID0gbnVsbDtcbiAgICAgIHRoaXMuX3VybCA9IG51bGw7XG4gICAgICB0aGlzLl9zZXNzaW9uSWQgPSB2b2lkIDA7XG4gICAgICB0aGlzLnRyaWdnZXJpbmdFeGNlcHRpb24gPSB2b2lkIDA7XG4gICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHZhciBsb2dnZXIgPSB0aGlzLmxvZ2dlciA9IGVuYWJsZUxvZ3ModXNlckNvbmZpZy5kZWJ1ZyB8fCBmYWxzZSwgJ0hscyBpbnN0YW5jZScsIHVzZXJDb25maWcuYXNzZXRQbGF5ZXJJZCk7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWcgPSBtZXJnZUNvbmZpZyhIbHMuRGVmYXVsdENvbmZpZywgdXNlckNvbmZpZywgbG9nZ2VyKTtcbiAgICAgIHRoaXMudXNlckNvbmZpZyA9IHVzZXJDb25maWc7XG4gICAgICBpZiAoY29uZmlnLnByb2dyZXNzaXZlKSB7XG4gICAgICAgIGVuYWJsZVN0cmVhbWluZ01vZGUoY29uZmlnLCBsb2dnZXIpO1xuICAgICAgfVxuXG4gICAgICAvLyBjb3JlIGNvbnRyb2xsZXJzIGFuZCBuZXR3b3JrIGxvYWRlcnNcbiAgICAgIHZhciBfQWJyQ29udHJvbGxlciA9IGNvbmZpZy5hYnJDb250cm9sbGVyLFxuICAgICAgICBfQnVmZmVyQ29udHJvbGxlciA9IGNvbmZpZy5idWZmZXJDb250cm9sbGVyLFxuICAgICAgICBfQ2FwTGV2ZWxDb250cm9sbGVyID0gY29uZmlnLmNhcExldmVsQ29udHJvbGxlcixcbiAgICAgICAgX0Vycm9yQ29udHJvbGxlciA9IGNvbmZpZy5lcnJvckNvbnRyb2xsZXIsXG4gICAgICAgIF9GcHNDb250cm9sbGVyID0gY29uZmlnLmZwc0NvbnRyb2xsZXI7XG4gICAgICB2YXIgZXJyb3JDb250cm9sbGVyID0gbmV3IF9FcnJvckNvbnRyb2xsZXIodGhpcyk7XG4gICAgICB2YXIgYWJyQ29udHJvbGxlciA9IHRoaXMuYWJyQ29udHJvbGxlciA9IG5ldyBfQWJyQ29udHJvbGxlcih0aGlzKTtcbiAgICAgIC8vIEZyYWdtZW50VHJhY2tlciBtdXN0IGJlIGRlZmluZWQgYmVmb3JlIFN0cmVhbUNvbnRyb2xsZXIgYmVjYXVzZSB0aGUgb3JkZXIgb2YgZXZlbnQgaGFuZGxpbmcgaXMgaW1wb3J0YW50XG4gICAgICB2YXIgZnJhZ21lbnRUcmFja2VyID0gbmV3IEZyYWdtZW50VHJhY2tlcih0aGlzKTtcbiAgICAgIHZhciBfSW50ZXJzdGl0aWFsc0NvbnRyb2xsZXIgPSBjb25maWcuaW50ZXJzdGl0aWFsc0NvbnRyb2xsZXI7XG4gICAgICB2YXIgaW50ZXJzdGl0aWFsc0NvbnRyb2xsZXIgPSBfSW50ZXJzdGl0aWFsc0NvbnRyb2xsZXIgPyB0aGlzLmludGVyc3RpdGlhbHNDb250cm9sbGVyID0gbmV3IF9JbnRlcnN0aXRpYWxzQ29udHJvbGxlcih0aGlzLCBIbHMpIDogbnVsbDtcbiAgICAgIHZhciBidWZmZXJDb250cm9sbGVyID0gdGhpcy5idWZmZXJDb250cm9sbGVyID0gbmV3IF9CdWZmZXJDb250cm9sbGVyKHRoaXMsIGZyYWdtZW50VHJhY2tlcik7XG4gICAgICB2YXIgY2FwTGV2ZWxDb250cm9sbGVyID0gdGhpcy5jYXBMZXZlbENvbnRyb2xsZXIgPSBuZXcgX0NhcExldmVsQ29udHJvbGxlcih0aGlzKTtcbiAgICAgIHZhciBmcHNDb250cm9sbGVyID0gbmV3IF9GcHNDb250cm9sbGVyKHRoaXMpO1xuICAgICAgdmFyIHBsYXlMaXN0TG9hZGVyID0gbmV3IFBsYXlsaXN0TG9hZGVyKHRoaXMpO1xuICAgICAgdmFyIF9Db250ZW50U3RlZXJpbmdDb250cm9sbGVyID0gY29uZmlnLmNvbnRlbnRTdGVlcmluZ0NvbnRyb2xsZXI7XG4gICAgICAvLyBJbnN0YW50aWF0ZSBDb25lbnRTdGVlcmluZ0NvbnRyb2xsZXIgYmVmb3JlIExldmVsQ29udHJvbGxlciB0byByZWNlaXZlIE11bHRpdmFyaWFudCBQbGF5bGlzdCBldmVudHMgZmlyc3RcbiAgICAgIHZhciBjb250ZW50U3RlZXJpbmcgPSBfQ29udGVudFN0ZWVyaW5nQ29udHJvbGxlciA/IG5ldyBfQ29udGVudFN0ZWVyaW5nQ29udHJvbGxlcih0aGlzKSA6IG51bGw7XG4gICAgICB2YXIgbGV2ZWxDb250cm9sbGVyID0gdGhpcy5sZXZlbENvbnRyb2xsZXIgPSBuZXcgTGV2ZWxDb250cm9sbGVyKHRoaXMsIGNvbnRlbnRTdGVlcmluZyk7XG4gICAgICB2YXIgaWQzVHJhY2tDb250cm9sbGVyID0gbmV3IElEM1RyYWNrQ29udHJvbGxlcih0aGlzKTtcbiAgICAgIHZhciBrZXlMb2FkZXIgPSBuZXcgS2V5TG9hZGVyKHRoaXMuY29uZmlnKTtcbiAgICAgIHZhciBzdHJlYW1Db250cm9sbGVyID0gdGhpcy5zdHJlYW1Db250cm9sbGVyID0gbmV3IFN0cmVhbUNvbnRyb2xsZXIodGhpcywgZnJhZ21lbnRUcmFja2VyLCBrZXlMb2FkZXIpO1xuICAgICAgdmFyIGdhcENvbnRyb2xsZXIgPSB0aGlzLmdhcENvbnRyb2xsZXIgPSBuZXcgR2FwQ29udHJvbGxlcih0aGlzLCBmcmFnbWVudFRyYWNrZXIpO1xuXG4gICAgICAvLyBDYXAgbGV2ZWwgY29udHJvbGxlciB1c2VzIHN0cmVhbUNvbnRyb2xsZXIgdG8gZmx1c2ggdGhlIGJ1ZmZlclxuICAgICAgY2FwTGV2ZWxDb250cm9sbGVyLnNldFN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtQ29udHJvbGxlcik7XG4gICAgICAvLyBmcHNDb250cm9sbGVyIHVzZXMgc3RyZWFtQ29udHJvbGxlciB0byBzd2l0Y2ggd2hlbiBmcmFtZXMgYXJlIGJlaW5nIGRyb3BwZWRcbiAgICAgIGZwc0NvbnRyb2xsZXIuc2V0U3RyZWFtQ29udHJvbGxlcihzdHJlYW1Db250cm9sbGVyKTtcbiAgICAgIHZhciBuZXR3b3JrQ29udHJvbGxlcnMgPSBbcGxheUxpc3RMb2FkZXIsIGxldmVsQ29udHJvbGxlciwgc3RyZWFtQ29udHJvbGxlcl07XG4gICAgICBpZiAoaW50ZXJzdGl0aWFsc0NvbnRyb2xsZXIpIHtcbiAgICAgICAgbmV0d29ya0NvbnRyb2xsZXJzLnNwbGljZSgxLCAwLCBpbnRlcnN0aXRpYWxzQ29udHJvbGxlcik7XG4gICAgICB9XG4gICAgICBpZiAoY29udGVudFN0ZWVyaW5nKSB7XG4gICAgICAgIG5ldHdvcmtDb250cm9sbGVycy5zcGxpY2UoMSwgMCwgY29udGVudFN0ZWVyaW5nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubmV0d29ya0NvbnRyb2xsZXJzID0gbmV0d29ya0NvbnRyb2xsZXJzO1xuICAgICAgdmFyIGNvcmVDb21wb25lbnRzID0gW2FickNvbnRyb2xsZXIsIGJ1ZmZlckNvbnRyb2xsZXIsIGdhcENvbnRyb2xsZXIsIGNhcExldmVsQ29udHJvbGxlciwgZnBzQ29udHJvbGxlciwgaWQzVHJhY2tDb250cm9sbGVyLCBmcmFnbWVudFRyYWNrZXJdO1xuICAgICAgdGhpcy5hdWRpb1RyYWNrQ29udHJvbGxlciA9IHRoaXMuY3JlYXRlQ29udHJvbGxlcihjb25maWcuYXVkaW9UcmFja0NvbnRyb2xsZXIsIG5ldHdvcmtDb250cm9sbGVycyk7XG4gICAgICB2YXIgQXVkaW9TdHJlYW1Db250cm9sbGVyQ2xhc3MgPSBjb25maWcuYXVkaW9TdHJlYW1Db250cm9sbGVyO1xuICAgICAgaWYgKEF1ZGlvU3RyZWFtQ29udHJvbGxlckNsYXNzKSB7XG4gICAgICAgIG5ldHdvcmtDb250cm9sbGVycy5wdXNoKHRoaXMuYXVkaW9TdHJlYW1Db250cm9sbGVyID0gbmV3IEF1ZGlvU3RyZWFtQ29udHJvbGxlckNsYXNzKHRoaXMsIGZyYWdtZW50VHJhY2tlciwga2V5TG9hZGVyKSk7XG4gICAgICB9XG4gICAgICAvLyBJbnN0YW50aWF0ZSBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlciBiZWZvcmUgU3VidGl0bGVTdHJlYW1Db250cm9sbGVyIHRvIHJlY2VpdmUgbGV2ZWwgZXZlbnRzIGZpcnN0XG4gICAgICB0aGlzLnN1YnRpdGxlVHJhY2tDb250cm9sbGVyID0gdGhpcy5jcmVhdGVDb250cm9sbGVyKGNvbmZpZy5zdWJ0aXRsZVRyYWNrQ29udHJvbGxlciwgbmV0d29ya0NvbnRyb2xsZXJzKTtcbiAgICAgIHZhciBTdWJ0aXRsZVN0cmVhbUNvbnRyb2xsZXJDbGFzcyA9IGNvbmZpZy5zdWJ0aXRsZVN0cmVhbUNvbnRyb2xsZXI7XG4gICAgICBpZiAoU3VidGl0bGVTdHJlYW1Db250cm9sbGVyQ2xhc3MpIHtcbiAgICAgICAgbmV0d29ya0NvbnRyb2xsZXJzLnB1c2godGhpcy5zdWJ0aXRpdGxlU3RyZWFtQ29udHJvbGxlciA9IG5ldyBTdWJ0aXRsZVN0cmVhbUNvbnRyb2xsZXJDbGFzcyh0aGlzLCBmcmFnbWVudFRyYWNrZXIsIGtleUxvYWRlcikpO1xuICAgICAgfVxuICAgICAgdGhpcy5jcmVhdGVDb250cm9sbGVyKGNvbmZpZy50aW1lbGluZUNvbnRyb2xsZXIsIGNvcmVDb21wb25lbnRzKTtcbiAgICAgIGtleUxvYWRlci5lbWVDb250cm9sbGVyID0gdGhpcy5lbWVDb250cm9sbGVyID0gdGhpcy5jcmVhdGVDb250cm9sbGVyKGNvbmZpZy5lbWVDb250cm9sbGVyLCBjb3JlQ29tcG9uZW50cyk7XG4gICAgICB0aGlzLmNtY2RDb250cm9sbGVyID0gdGhpcy5jcmVhdGVDb250cm9sbGVyKGNvbmZpZy5jbWNkQ29udHJvbGxlciwgY29yZUNvbXBvbmVudHMpO1xuICAgICAgdGhpcy5sYXRlbmN5Q29udHJvbGxlciA9IHRoaXMuY3JlYXRlQ29udHJvbGxlcihMYXRlbmN5Q29udHJvbGxlciwgY29yZUNvbXBvbmVudHMpO1xuICAgICAgdGhpcy5jb3JlQ29tcG9uZW50cyA9IGNvcmVDb21wb25lbnRzO1xuXG4gICAgICAvLyBFcnJvciBjb250cm9sbGVyIGhhbmRsZXMgZXJyb3JzIGJlZm9yZSBhbmQgYWZ0ZXIgYWxsIG90aGVyIGNvbnRyb2xsZXJzXG4gICAgICAvLyBUaGlzIGxpc3RlbmVyIHdpbGwgYmUgaW52b2tlZCBhZnRlciBhbGwgb3RoZXIgY29udHJvbGxlcnMgZXJyb3IgbGlzdGVuZXJzXG4gICAgICBuZXR3b3JrQ29udHJvbGxlcnMucHVzaChlcnJvckNvbnRyb2xsZXIpO1xuICAgICAgdmFyIG9uRXJyb3JPdXQgPSBlcnJvckNvbnRyb2xsZXIub25FcnJvck91dDtcbiAgICAgIGlmICh0eXBlb2Ygb25FcnJvck91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLm9uKEV2ZW50cy5FUlJPUiwgb25FcnJvck91dCwgZXJyb3JDb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICAgIC8vIEF1dG9zdGFydCBsb2FkIGhhbmRsZXJcbiAgICAgIHRoaXMub24oRXZlbnRzLk1BTklGRVNUX0xPQURFRCwgcGxheUxpc3RMb2FkZXIub25NYW5pZmVzdExvYWRlZCwgcGxheUxpc3RMb2FkZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgcmVxdWlyZWQgTWVkaWFTb3VyY2UgRXh0ZW5zaW9ucyBhcmUgYXZhaWxhYmxlLlxuICAgICAqL1xuICAgIEhscy5pc01TRVN1cHBvcnRlZCA9IGZ1bmN0aW9uIGlzTVNFU3VwcG9ydGVkJDEoKSB7XG4gICAgICByZXR1cm4gaXNNU0VTdXBwb3J0ZWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBNZWRpYVNvdXJjZSBFeHRlbnNpb25zIGFyZSBhdmFpbGFibGUgYW5kIGlzVHlwZVN1cHBvcnRlZCBjaGVja3MgcGFzcyBmb3IgYW55IGJhc2VsaW5lIGNvZGVjcy5cbiAgICAgKi87XG4gICAgSGxzLmlzU3VwcG9ydGVkID0gZnVuY3Rpb24gaXNTdXBwb3J0ZWQkMSgpIHtcbiAgICAgIHJldHVybiBpc1N1cHBvcnRlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgTWVkaWFTb3VyY2UgZ2xvYmFsIHVzZWQgZm9yIE1TRSBwbGF5YmFjayAoTWFuYWdlZE1lZGlhU291cmNlLCBNZWRpYVNvdXJjZSwgb3IgV2ViS2l0TWVkaWFTb3VyY2UpLlxuICAgICAqLztcbiAgICBIbHMuZ2V0TWVkaWFTb3VyY2UgPSBmdW5jdGlvbiBnZXRNZWRpYVNvdXJjZSQxKCkge1xuICAgICAgcmV0dXJuIGdldE1lZGlhU291cmNlKCk7XG4gICAgfTtcbiAgICB2YXIgX3Byb3RvID0gSGxzLnByb3RvdHlwZTtcbiAgICBfcHJvdG8uY3JlYXRlQ29udHJvbGxlciA9IGZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xsZXIoQ29udHJvbGxlckNsYXNzLCBjb21wb25lbnRzKSB7XG4gICAgICBpZiAoQ29udHJvbGxlckNsYXNzKSB7XG4gICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSBuZXcgQ29udHJvbGxlckNsYXNzKHRoaXMpO1xuICAgICAgICBpZiAoY29tcG9uZW50cykge1xuICAgICAgICAgIGNvbXBvbmVudHMucHVzaChjb250cm9sbGVySW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250cm9sbGVySW5zdGFuY2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBEZWxlZ2F0ZSB0aGUgRXZlbnRFbWl0dGVyIHRocm91Z2ggdGhlIHB1YmxpYyBBUEkgb2YgSGxzLmpzXG4gICAgO1xuICAgIF9wcm90by5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBsaXN0ZW5lciwgY29udGV4dCkge1xuICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIH1cbiAgICAgIHRoaXMuX2VtaXR0ZXIub24oZXZlbnQsIGxpc3RlbmVyLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIF9wcm90by5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgbGlzdGVuZXIsIGNvbnRleHQpIHtcbiAgICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICB9XG4gICAgICB0aGlzLl9lbWl0dGVyLm9uY2UoZXZlbnQsIGxpc3RlbmVyLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIF9wcm90by5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgICAgIHRoaXMuX2VtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KTtcbiAgICB9O1xuICAgIF9wcm90by5vZmYgPSBmdW5jdGlvbiBvZmYoZXZlbnQsIGxpc3RlbmVyLCBjb250ZXh0LCBvbmNlKSB7XG4gICAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgfVxuICAgICAgdGhpcy5fZW1pdHRlci5vZmYoZXZlbnQsIGxpc3RlbmVyLCBjb250ZXh0LCBvbmNlKTtcbiAgICB9O1xuICAgIF9wcm90by5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lbWl0dGVyLmxpc3RlbmVycyhldmVudCk7XG4gICAgfTtcbiAgICBfcHJvdG8uZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIG5hbWUsIGV2ZW50T2JqZWN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5lbWl0KGV2ZW50LCBuYW1lLCBldmVudE9iamVjdCk7XG4gICAgfTtcbiAgICBfcHJvdG8udHJpZ2dlciA9IGZ1bmN0aW9uIHRyaWdnZXIoZXZlbnQsIGV2ZW50T2JqZWN0KSB7XG4gICAgICBpZiAodGhpcy5jb25maWcuZGVidWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChldmVudCwgZXZlbnQsIGV2ZW50T2JqZWN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChldmVudCwgZXZlbnQsIGV2ZW50T2JqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcignQW4gaW50ZXJuYWwgZXJyb3IgaGFwcGVuZWQgd2hpbGUgaGFuZGxpbmcgZXZlbnQgJyArIGV2ZW50ICsgJy4gRXJyb3IgbWVzc2FnZTogXCInICsgZXJyb3IubWVzc2FnZSArICdcIi4gSGVyZSBpcyBhIHN0YWNrdHJhY2U6JywgZXJyb3IpO1xuICAgICAgICAgIC8vIFByZXZlbnQgcmVjdXJzaW9uIGluIGVycm9yIGV2ZW50IGhhbmRsZXJzIHRoYXQgdGhyb3cgIzU0OTdcbiAgICAgICAgICBpZiAoIXRoaXMudHJpZ2dlcmluZ0V4Y2VwdGlvbikge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyaW5nRXhjZXB0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBmYXRhbCA9IGV2ZW50ID09PSBFdmVudHMuRVJST1I7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoRXZlbnRzLkVSUk9SLCB7XG4gICAgICAgICAgICAgIHR5cGU6IEVycm9yVHlwZXMuT1RIRVJfRVJST1IsXG4gICAgICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5JTlRFUk5BTF9FWENFUFRJT04sXG4gICAgICAgICAgICAgIGZhdGFsOiBmYXRhbCxcbiAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyaW5nRXhjZXB0aW9uID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBfcHJvdG8ubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIGxpc3RlbmVyQ291bnQoZXZlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lbWl0dGVyLmxpc3RlbmVyQ291bnQoZXZlbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc3Bvc2Ugb2YgdGhlIGluc3RhbmNlXG4gICAgICovO1xuICAgIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygnZGVzdHJveScpO1xuICAgICAgdGhpcy50cmlnZ2VyKEV2ZW50cy5ERVNUUk9ZSU5HLCB1bmRlZmluZWQpO1xuICAgICAgdGhpcy5kZXRhY2hNZWRpYSgpO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMuX2F1dG9MZXZlbENhcHBpbmcgPSAtMTtcbiAgICAgIHRoaXMuX3VybCA9IG51bGw7XG4gICAgICB0aGlzLm5ldHdvcmtDb250cm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubmV0d29ya0NvbnRyb2xsZXJzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLmNvcmVDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50LmRlc3Ryb3koKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jb3JlQ29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgICAgLy8gUmVtb3ZlIGFueSByZWZlcmVuY2VzIHRoYXQgY291bGQgYmUgaGVsZCBpbiBjb25maWcgb3B0aW9ucyBvciBjYWxsYmFja3NcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICAgIGNvbmZpZy54aHJTZXR1cCA9IGNvbmZpZy5mZXRjaFNldHVwID0gdW5kZWZpbmVkO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy51c2VyQ29uZmlnID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBIbHMuanMgdG8gYSBtZWRpYSBlbGVtZW50XG4gICAgICovO1xuICAgIF9wcm90by5hdHRhY2hNZWRpYSA9IGZ1bmN0aW9uIGF0dGFjaE1lZGlhKGRhdGEpIHtcbiAgICAgIGlmICghZGF0YSB8fCAnbWVkaWEnIGluIGRhdGEgJiYgIWRhdGEubWVkaWEpIHtcbiAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKFwiYXR0YWNoTWVkaWEgZmFpbGVkOiBpbnZhbGlkIGFyZ3VtZW50IChcIiArIGRhdGEgKyBcIilcIik7XG4gICAgICAgIHRoaXMudHJpZ2dlcihFdmVudHMuRVJST1IsIHtcbiAgICAgICAgICB0eXBlOiBFcnJvclR5cGVzLk9USEVSX0VSUk9SLFxuICAgICAgICAgIGRldGFpbHM6IEVycm9yRGV0YWlscy5BVFRBQ0hfTUVESUFfRVJST1IsXG4gICAgICAgICAgZmF0YWw6IHRydWUsXG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmxvZ2dlci5sb2coXCJhdHRhY2hNZWRpYVwiKTtcbiAgICAgIGlmICh0aGlzLl9tZWRpYSkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFwibWVkaWEgbXVzdCBiZSBkZXRhY2hlZCBiZWZvcmUgYXR0YWNoaW5nXCIpO1xuICAgICAgICB0aGlzLmRldGFjaE1lZGlhKCk7XG4gICAgICB9XG4gICAgICB2YXIgYXR0YWNoTWVkaWFTb3VyY2UgPSAnbWVkaWEnIGluIGRhdGE7XG4gICAgICB2YXIgbWVkaWEgPSBhdHRhY2hNZWRpYVNvdXJjZSA/IGRhdGEubWVkaWEgOiBkYXRhO1xuICAgICAgdmFyIGF0dGFjaGluZ0RhdGEgPSBhdHRhY2hNZWRpYVNvdXJjZSA/IGRhdGEgOiB7XG4gICAgICAgIG1lZGlhOiBtZWRpYVxuICAgICAgfTtcbiAgICAgIHRoaXMuX21lZGlhID0gbWVkaWE7XG4gICAgICB0aGlzLnRyaWdnZXIoRXZlbnRzLk1FRElBX0FUVEFDSElORywgYXR0YWNoaW5nRGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0YWNoIEhscy5qcyBmcm9tIHRoZSBtZWRpYVxuICAgICAqLztcbiAgICBfcHJvdG8uZGV0YWNoTWVkaWEgPSBmdW5jdGlvbiBkZXRhY2hNZWRpYSgpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygnZGV0YWNoTWVkaWEnKTtcbiAgICAgIHRoaXMudHJpZ2dlcihFdmVudHMuTUVESUFfREVUQUNISU5HLCB7fSk7XG4gICAgICB0aGlzLl9tZWRpYSA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0YWNoIEhUTUxNZWRpYUVsZW1lbnQsIE1lZGlhU291cmNlLCBhbmQgU291cmNlQnVmZmVycyB3aXRob3V0IHJlc2V0LCBmb3IgYXR0YWNoaW5nIHRvIGFub3RoZXIgaW5zdGFuY2VcbiAgICAgKi87XG4gICAgX3Byb3RvLnRyYW5zZmVyTWVkaWEgPSBmdW5jdGlvbiB0cmFuc2Zlck1lZGlhKCkge1xuICAgICAgdGhpcy5fbWVkaWEgPSBudWxsO1xuICAgICAgdmFyIHRyYW5zZmVyTWVkaWEgPSB0aGlzLmJ1ZmZlckNvbnRyb2xsZXIudHJhbnNmZXJNZWRpYSgpO1xuICAgICAgdGhpcy50cmlnZ2VyKEV2ZW50cy5NRURJQV9ERVRBQ0hJTkcsIHtcbiAgICAgICAgdHJhbnNmZXJNZWRpYTogdHJhbnNmZXJNZWRpYVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJhbnNmZXJNZWRpYTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNvdXJjZSBVUkwuIENhbiBiZSByZWxhdGl2ZSBvciBhYnNvbHV0ZS5cbiAgICAgKi87XG4gICAgX3Byb3RvLmxvYWRTb3VyY2UgPSBmdW5jdGlvbiBsb2FkU291cmNlKHVybCkge1xuICAgICAgdGhpcy5zdG9wTG9hZCgpO1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICAgIHZhciBsb2FkZWRTb3VyY2UgPSB0aGlzLl91cmw7XG4gICAgICB2YXIgbG9hZGluZ1NvdXJjZSA9IHRoaXMuX3VybCA9IHVybFRvb2xraXRFeHBvcnRzLmJ1aWxkQWJzb2x1dGVVUkwoc2VsZi5sb2NhdGlvbi5ocmVmLCB1cmwsIHtcbiAgICAgICAgYWx3YXlzTm9ybWFsaXplOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2F1dG9MZXZlbENhcHBpbmcgPSAtMTtcbiAgICAgIHRoaXMuX21heEhkY3BMZXZlbCA9IG51bGw7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coXCJsb2FkU291cmNlOlwiICsgbG9hZGluZ1NvdXJjZSk7XG4gICAgICBpZiAobWVkaWEgJiYgbG9hZGVkU291cmNlICYmIChsb2FkZWRTb3VyY2UgIT09IGxvYWRpbmdTb3VyY2UgfHwgdGhpcy5idWZmZXJDb250cm9sbGVyLmhhc1NvdXJjZVR5cGVzKCkpKSB7XG4gICAgICAgIC8vIFJlbW92ZSBhbmQgcmUtY3JlYXRlIE1lZGlhU291cmNlXG4gICAgICAgIHRoaXMuZGV0YWNoTWVkaWEoKTtcbiAgICAgICAgdGhpcy5hdHRhY2hNZWRpYShtZWRpYSk7XG4gICAgICB9XG4gICAgICAvLyB3aGVuIGF0dGFjaGluZyB0byBhIHNvdXJjZSBVUkwsIHRyaWdnZXIgYSBwbGF5bGlzdCBsb2FkXG4gICAgICB0aGlzLnRyaWdnZXIoRXZlbnRzLk1BTklGRVNUX0xPQURJTkcsIHtcbiAgICAgICAgdXJsOiB1cmxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnRseSBsb2FkZWQgVVJMXG4gICAgICovO1xuICAgIC8qKlxuICAgICAqIFN0YXJ0IGxvYWRpbmcgZGF0YSBmcm9tIHRoZSBzdHJlYW0gc291cmNlLlxuICAgICAqIERlcGVuZGluZyBvbiBkZWZhdWx0IGNvbmZpZywgY2xpZW50IHN0YXJ0cyBsb2FkaW5nIGF1dG9tYXRpY2FsbHkgd2hlbiBhIHNvdXJjZSBpcyBzZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhcnRQb3NpdGlvbiAtIFNldCB0aGUgc3RhcnQgcG9zaXRpb24gdG8gc3RyZWFtIGZyb20uXG4gICAgICogRGVmYXVsdHMgdG8gLTEgKE5vbmU6IHN0YXJ0cyBmcm9tIGVhcmxpZXN0IHBvaW50KVxuICAgICAqL1xuICAgIF9wcm90by5zdGFydExvYWQgPSBmdW5jdGlvbiBzdGFydExvYWQoc3RhcnRQb3NpdGlvbiwgc2tpcFNlZWtUb1N0YXJ0UG9zaXRpb24pIHtcbiAgICAgIGlmIChzdGFydFBvc2l0aW9uID09PSB2b2lkIDApIHtcbiAgICAgICAgc3RhcnRQb3NpdGlvbiA9IC0xO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2dnZXIubG9nKFwic3RhcnRMb2FkKFwiICsgKHN0YXJ0UG9zaXRpb24gKyAoc2tpcFNlZWtUb1N0YXJ0UG9zaXRpb24gPyAnLCA8c2tpcCBzZWVrIHRvIHN0YXJ0PicgOiAnJykpICsgXCIpXCIpO1xuICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVzdW1lQnVmZmVyaW5nKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubmV0d29ya0NvbnRyb2xsZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMubmV0d29ya0NvbnRyb2xsZXJzW2ldLnN0YXJ0TG9hZChzdGFydFBvc2l0aW9uLCBza2lwU2Vla1RvU3RhcnRQb3NpdGlvbik7XG4gICAgICAgIGlmICghdGhpcy5zdGFydGVkIHx8ICF0aGlzLm5ldHdvcmtDb250cm9sbGVycykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcCBsb2FkaW5nIG9mIGFueSBzdHJlYW0gZGF0YS5cbiAgICAgKi87XG4gICAgX3Byb3RvLnN0b3BMb2FkID0gZnVuY3Rpb24gc3RvcExvYWQoKSB7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coJ3N0b3BMb2FkJyk7XG4gICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5uZXR3b3JrQ29udHJvbGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5uZXR3b3JrQ29udHJvbGxlcnNbaV0uc3RvcExvYWQoKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRlZCB8fCAhdGhpcy5uZXR3b3JrQ29udHJvbGxlcnMpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciBsb2FkaW5nLCB0b2dnbGVkIHdpdGggYHN0YXJ0TG9hZCgpYCBhbmQgYHN0b3BMb2FkKClgLCBpcyBhY3RpdmUgb3Igbm90YC5cbiAgICAgKi87XG4gICAgLyoqXG4gICAgICogUmVzdW1lcyBzdHJlYW0gY29udHJvbGxlciBzZWdtZW50IGxvYWRpbmcgYWZ0ZXIgYHBhdXNlQnVmZmVyaW5nYCBoYXMgYmVlbiBjYWxsZWQuXG4gICAgICovXG4gICAgX3Byb3RvLnJlc3VtZUJ1ZmZlcmluZyA9IGZ1bmN0aW9uIHJlc3VtZUJ1ZmZlcmluZygpIHtcbiAgICAgIGlmICghdGhpcy5idWZmZXJpbmdFbmFibGVkKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhcInJlc3VtZSBidWZmZXJpbmdcIik7XG4gICAgICAgIHRoaXMubmV0d29ya0NvbnRyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBpZiAoY29udHJvbGxlci5yZXN1bWVCdWZmZXJpbmcpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIucmVzdW1lQnVmZmVyaW5nKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50cyBzdHJlYW0gY29udHJvbGxlciBmcm9tIGxvYWRpbmcgbmV3IHNlZ21lbnRzIHVudGlsIGByZXN1bWVCdWZmZXJpbmdgIGlzIGNhbGxlZC5cbiAgICAgKiBUaGlzIGFsbG93cyBmb3IgbWVkaWEgYnVmZmVyaW5nIHRvIGJlIHBhdXNlZCB3aXRob3V0IGludGVydXB0aW5nIHBsYXlsaXN0IGxvYWRpbmcuXG4gICAgICovO1xuICAgIF9wcm90by5wYXVzZUJ1ZmZlcmluZyA9IGZ1bmN0aW9uIHBhdXNlQnVmZmVyaW5nKCkge1xuICAgICAgaWYgKHRoaXMuYnVmZmVyaW5nRW5hYmxlZCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coXCJwYXVzZSBidWZmZXJpbmdcIik7XG4gICAgICAgIHRoaXMubmV0d29ya0NvbnRyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBpZiAoY29udHJvbGxlci5wYXVzZUJ1ZmZlcmluZykge1xuICAgICAgICAgICAgY29udHJvbGxlci5wYXVzZUJ1ZmZlcmluZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTd2FwIHRocm91Z2ggcG9zc2libGUgYXVkaW8gY29kZWNzIGluIHRoZSBzdHJlYW0gKGZvciBleGFtcGxlIHRvIHN3aXRjaCBmcm9tIHN0ZXJlbyB0byA1LjEpXG4gICAgICovXG4gICAgX3Byb3RvLnN3YXBBdWRpb0NvZGVjID0gZnVuY3Rpb24gc3dhcEF1ZGlvQ29kZWMoKSB7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coJ3N3YXBBdWRpb0NvZGVjJyk7XG4gICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXIuc3dhcEF1ZGlvQ29kZWMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBtZWRpYS1lbGVtZW50IGZhaWxzLCB0aGlzIGFsbG93cyB0byBkZXRhY2ggYW5kIHRoZW4gcmUtYXR0YWNoIGl0XG4gICAgICogYXMgb25lIGNhbGwgKGNvbnZlbmllbmNlIG1ldGhvZCkuXG4gICAgICpcbiAgICAgKiBBdXRvbWF0aWMgcmVjb3Zlcnkgb2YgbWVkaWEtZXJyb3JzIGJ5IHRoaXMgcHJvY2VzcyBpcyBjb25maWd1cmFibGUuXG4gICAgICovO1xuICAgIF9wcm90by5yZWNvdmVyTWVkaWFFcnJvciA9IGZ1bmN0aW9uIHJlY292ZXJNZWRpYUVycm9yKCkge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKCdyZWNvdmVyTWVkaWFFcnJvcicpO1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5fbWVkaWE7XG4gICAgICB2YXIgdGltZSA9IG1lZGlhID09IG51bGwgPyB2b2lkIDAgOiBtZWRpYS5jdXJyZW50VGltZTtcbiAgICAgIHRoaXMuZGV0YWNoTWVkaWEoKTtcbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICB0aGlzLmF0dGFjaE1lZGlhKG1lZGlhKTtcbiAgICAgICAgaWYgKHRpbWUpIHtcbiAgICAgICAgICB0aGlzLnN0YXJ0TG9hZCh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgX3Byb3RvLnJlbW92ZUxldmVsID0gZnVuY3Rpb24gcmVtb3ZlTGV2ZWwobGV2ZWxJbmRleCkge1xuICAgICAgdGhpcy5sZXZlbENvbnRyb2xsZXIucmVtb3ZlTGV2ZWwobGV2ZWxJbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYSBVVUlEIGZvciB0aGlzIHBsYXllciBpbnN0YW5jZVxuICAgICAqLztcbiAgICAvKipcbiAgICAgKiBGaW5kIGFuZCBzZWxlY3QgdGhlIGJlc3QgbWF0Y2hpbmcgYXVkaW8gdHJhY2ssIG1ha2luZyBhIGxldmVsIHN3aXRjaCB3aGVuIGEgR3JvdXAgY2hhbmdlIGlzIG5lY2Vzc2FyeS5cbiAgICAgKiBVcGRhdGVzIGBobHMuY29uZmlnLmF1ZGlvUHJlZmVyZW5jZWAuIFJldHVybnMgdGhlIHNlbGVjdGVkIHRyYWNrLCBvciBudWxsIHdoZW4gbm8gbWF0Y2hpbmcgdHJhY2sgaXMgZm91bmQuXG4gICAgICovXG4gICAgX3Byb3RvLnNldEF1ZGlvT3B0aW9uID0gZnVuY3Rpb24gc2V0QXVkaW9PcHRpb24oYXVkaW9PcHRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRhdWRpb1RyYWNrQ29udHI7XG4gICAgICByZXR1cm4gKChfdGhpcyRhdWRpb1RyYWNrQ29udHIgPSB0aGlzLmF1ZGlvVHJhY2tDb250cm9sbGVyKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkYXVkaW9UcmFja0NvbnRyLnNldEF1ZGlvT3B0aW9uKGF1ZGlvT3B0aW9uKSkgfHwgbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCBhbmQgc2VsZWN0IHRoZSBiZXN0IG1hdGNoaW5nIHN1YnRpdGxlIHRyYWNrLCBtYWtpbmcgYSBsZXZlbCBzd2l0Y2ggd2hlbiBhIEdyb3VwIGNoYW5nZSBpcyBuZWNlc3NhcnkuXG4gICAgICogVXBkYXRlcyBgaGxzLmNvbmZpZy5zdWJ0aXRsZVByZWZlcmVuY2VgLiBSZXR1cm5zIHRoZSBzZWxlY3RlZCB0cmFjaywgb3IgbnVsbCB3aGVuIG5vIG1hdGNoaW5nIHRyYWNrIGlzIGZvdW5kLlxuICAgICAqLztcbiAgICBfcHJvdG8uc2V0U3VidGl0bGVPcHRpb24gPSBmdW5jdGlvbiBzZXRTdWJ0aXRsZU9wdGlvbihzdWJ0aXRsZU9wdGlvbikge1xuICAgICAgdmFyIF90aGlzJHN1YnRpdGxlVHJhY2tDbztcbiAgICAgIHJldHVybiAoKF90aGlzJHN1YnRpdGxlVHJhY2tDbyA9IHRoaXMuc3VidGl0bGVUcmFja0NvbnRyb2xsZXIpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRzdWJ0aXRsZVRyYWNrQ28uc2V0U3VidGl0bGVPcHRpb24oc3VidGl0bGVPcHRpb24pKSB8fCBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY29tcGxldGUgbGlzdCBvZiBhdWRpbyB0cmFja3MgYWNyb3NzIGFsbCBtZWRpYSBncm91cHNcbiAgICAgKi87XG4gICAgLyoqXG4gICAgICogcmV0dXJucyBtZWRpYUNhcGFiaWxpdGllcy5kZWNvZGluZ0luZm8gZm9yIGEgdmFyaWFudC9yZW5kaXRpb25cbiAgICAgKi9cbiAgICBfcHJvdG8uZ2V0TWVkaWFEZWNvZGluZ0luZm8gPSBmdW5jdGlvbiBnZXRNZWRpYURlY29kaW5nSW5mbyhsZXZlbCwgYXVkaW9UcmFja3MpIHtcbiAgICAgIGlmIChhdWRpb1RyYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGF1ZGlvVHJhY2tzID0gdGhpcy5hbGxBdWRpb1RyYWNrcztcbiAgICAgIH1cbiAgICAgIHZhciBhdWRpb1RyYWNrc0J5R3JvdXAgPSBnZXRBdWRpb1RyYWNrc0J5R3JvdXAoYXVkaW9UcmFja3MpO1xuICAgICAgcmV0dXJuIGdldE1lZGlhRGVjb2RpbmdJbmZvUHJvbWlzZShsZXZlbCwgYXVkaW9UcmFja3NCeUdyb3VwLCBuYXZpZ2F0b3IubWVkaWFDYXBhYmlsaXRpZXMpO1xuICAgIH07XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhIbHMsIFt7XG4gICAgICBrZXk6IFwidXJsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VybDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBXaGV0aGVyIG9yIG5vdCBlbm91Z2ggaGFzIGJlZW4gYnVmZmVyZWQgdG8gc2VlayB0byBzdGFydCBwb3NpdGlvbiBvciB1c2UgYG1lZGlhLmN1cnJlbnRUaW1lYCB0byBkZXRlcm1pbmUgbmV4dCBsb2FkIHBvc2l0aW9uXG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGFzRW5vdWdoVG9TdGFydFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNvbnRyb2xsZXIuaGFzRW5vdWdoVG9TdGFydDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgdGhlIHN0YXJ0UG9zaXRpb24gc2V0IG9uIHN0YXJ0TG9hZChwb3NpdGlvbikgb3Igb24gYXV0b3N0YXJ0IHdpdGggY29uZmlnLnN0YXJ0UG9zaXRpb25cbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJzdGFydFBvc2l0aW9uXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ29udHJvbGxlci5zdGFydFBvc2l0aW9uVmFsdWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImxvYWRpbmdFbmFibGVkXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRlZDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHN0YXRlIG9mIGZyYWdtZW50IGxvYWRpbmcgdG9nZ2xlZCBieSBjYWxsaW5nIGBwYXVzZUJ1ZmZlcmluZygpYCBhbmQgYHJlc3VtZUJ1ZmZlcmluZygpYC5cbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJidWZmZXJpbmdFbmFibGVkXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ29udHJvbGxlci5idWZmZXJpbmdFbmFibGVkO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpbkZsaWdodEZyYWdtZW50c1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfaW5GbGlnaHREYXRhO1xuICAgICAgICB2YXIgaW5GbGlnaHREYXRhID0gKF9pbkZsaWdodERhdGEgPSB7fSwgX2luRmxpZ2h0RGF0YVtQbGF5bGlzdExldmVsVHlwZS5NQUlOXSA9IHRoaXMuc3RyZWFtQ29udHJvbGxlci5pbkZsaWdodEZyYWcsIF9pbkZsaWdodERhdGEpO1xuICAgICAgICBpZiAodGhpcy5hdWRpb1N0cmVhbUNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBpbkZsaWdodERhdGFbUGxheWxpc3RMZXZlbFR5cGUuQVVESU9dID0gdGhpcy5hdWRpb1N0cmVhbUNvbnRyb2xsZXIuaW5GbGlnaHRGcmFnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN1YnRpdGl0bGVTdHJlYW1Db250cm9sbGVyKSB7XG4gICAgICAgICAgaW5GbGlnaHREYXRhW1BsYXlsaXN0TGV2ZWxUeXBlLlNVQlRJVExFXSA9IHRoaXMuc3VidGl0aXRsZVN0cmVhbUNvbnRyb2xsZXIuaW5GbGlnaHRGcmFnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbkZsaWdodERhdGE7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNlc3Npb25JZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBfc2Vzc2lvbklkID0gdGhpcy5fc2Vzc2lvbklkO1xuICAgICAgICBpZiAoIV9zZXNzaW9uSWQpIHtcbiAgICAgICAgICBfc2Vzc2lvbklkID0gdGhpcy5fc2Vzc2lvbklkID0gdXVpZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc2Vzc2lvbklkO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEByZXR1cm5zIGFuIGFycmF5IG9mIGxldmVscyAodmFyaWFudHMpIHNvcnRlZCBieSBIRENQLUxFVkVMLCBSRVNPTFVUSU9OIChoZWlnaHQpLCBGUkFNRS1SQVRFLCBDT0RFQ1MsIFZJREVPLVJBTkdFLCBhbmQgQkFORFdJRFRIXG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibGV2ZWxzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGxldmVscyA9IHRoaXMubGV2ZWxDb250cm9sbGVyLmxldmVscztcbiAgICAgICAgcmV0dXJuIGxldmVscyA/IGxldmVscyA6IFtdO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEByZXR1cm5zIExldmVsRGV0YWlscyBvZiBsYXN0IGxvYWRlZCBsZXZlbCAodmFyaWFudCkgb3IgYG51bGxgIHByaW9yIHRvIGxvYWRpbmcgYSBtZWRpYSBwbGF5bGlzdC5cbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJsYXRlc3RMZXZlbERldGFpbHNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1Db250cm9sbGVyLmdldExldmVsRGV0YWlscygpIHx8IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybnMgTGV2ZWwgb2JqZWN0IG9mIHNlbGVjdGVkIGxldmVsICh2YXJpYW50KSBvciBgbnVsbGAgcHJpb3IgdG8gc2VsZWN0aW5nIGEgbGV2ZWwgb3Igb25jZSB0aGUgbGV2ZWwgaXMgcmVtb3ZlZC5cbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJsb2FkTGV2ZWxPYmpcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZXZlbENvbnRyb2xsZXIubG9hZExldmVsT2JqO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEluZGV4IG9mIHF1YWxpdHkgbGV2ZWwgKHZhcmlhbnQpIGN1cnJlbnRseSBwbGF5ZWRcbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJjdXJyZW50TGV2ZWxcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1Db250cm9sbGVyLmN1cnJlbnRMZXZlbDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgcXVhbGl0eSBsZXZlbCBpbmRleCBpbW1lZGlhdGVseS4gVGhpcyB3aWxsIGZsdXNoIHRoZSBjdXJyZW50IGJ1ZmZlciB0byByZXBsYWNlIHRoZSBxdWFsaXR5IGFzYXAuIFRoYXQgbWVhbnMgcGxheWJhY2sgd2lsbCBpbnRlcnJ1cHQgYXQgbGVhc3Qgc2hvcnRseSB0byByZS1idWZmZXIgYW5kIHJlLXN5bmMgZXZlbnR1YWxseS4gU2V0IHRvIC0xIGZvciBhdXRvbWF0aWMgbGV2ZWwgc2VsZWN0aW9uLlxuICAgICAgICovLFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3TGV2ZWwpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKFwic2V0IGN1cnJlbnRMZXZlbDpcIiArIG5ld0xldmVsKTtcbiAgICAgICAgdGhpcy5sZXZlbENvbnRyb2xsZXIubWFudWFsTGV2ZWwgPSBuZXdMZXZlbDtcbiAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyLmltbWVkaWF0ZUxldmVsU3dpdGNoKCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogSW5kZXggb2YgbmV4dCBxdWFsaXR5IGxldmVsIGxvYWRlZCBhcyBzY2hlZHVsZWQgYnkgc3RyZWFtIGNvbnRyb2xsZXIuXG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibmV4dExldmVsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ29udHJvbGxlci5uZXh0TGV2ZWw7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0IHF1YWxpdHkgbGV2ZWwgaW5kZXggZm9yIG5leHQgbG9hZGVkIGRhdGEuXG4gICAgICAgKiBUaGlzIHdpbGwgc3dpdGNoIHRoZSB2aWRlbyBxdWFsaXR5IGFzYXAsIHdpdGhvdXQgaW50ZXJydXB0aW5nIHBsYXliYWNrLlxuICAgICAgICogTWF5IGFib3J0IGN1cnJlbnQgbG9hZGluZyBvZiBkYXRhLCBhbmQgZmx1c2ggcGFydHMgb2YgYnVmZmVyIChvdXRzaWRlIGN1cnJlbnRseSBwbGF5ZWQgZnJhZ21lbnQgcmVnaW9uKS5cbiAgICAgICAqIEBwYXJhbSBuZXdMZXZlbCAtIFBhc3MgLTEgZm9yIGF1dG9tYXRpYyBsZXZlbCBzZWxlY3Rpb25cbiAgICAgICAqLyxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld0xldmVsKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhcInNldCBuZXh0TGV2ZWw6XCIgKyBuZXdMZXZlbCk7XG4gICAgICAgIHRoaXMubGV2ZWxDb250cm9sbGVyLm1hbnVhbExldmVsID0gbmV3TGV2ZWw7XG4gICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlci5uZXh0TGV2ZWxTd2l0Y2goKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm4gdGhlIHF1YWxpdHkgbGV2ZWwgb2YgdGhlIGN1cnJlbnRseSBvciBsYXN0IChvZiBub25lIGlzIGxvYWRlZCBjdXJyZW50bHkpIHNlZ21lbnRcbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJsb2FkTGV2ZWxcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZXZlbENvbnRyb2xsZXIubGV2ZWw7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0IHF1YWxpdHkgbGV2ZWwgaW5kZXggZm9yIG5leHQgbG9hZGVkIGRhdGEgaW4gYSBjb25zZXJ2YXRpdmUgd2F5LlxuICAgICAgICogVGhpcyB3aWxsIHN3aXRjaCB0aGUgcXVhbGl0eSB3aXRob3V0IGZsdXNoaW5nLCBidXQgaW50ZXJydXB0IGN1cnJlbnQgbG9hZGluZy5cbiAgICAgICAqIFRodXMgdGhlIG1vbWVudCB3aGVuIHRoZSBxdWFsaXR5IHN3aXRjaCB3aWxsIGFwcGVhciBpbiBlZmZlY3Qgd2lsbCBvbmx5IGJlIGFmdGVyIHRoZSBhbHJlYWR5IGV4aXN0aW5nIGJ1ZmZlci5cbiAgICAgICAqIEBwYXJhbSBuZXdMZXZlbCAtIFBhc3MgLTEgZm9yIGF1dG9tYXRpYyBsZXZlbCBzZWxlY3Rpb25cbiAgICAgICAqLyxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld0xldmVsKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhcInNldCBsb2FkTGV2ZWw6XCIgKyBuZXdMZXZlbCk7XG4gICAgICAgIHRoaXMubGV2ZWxDb250cm9sbGVyLm1hbnVhbExldmVsID0gbmV3TGV2ZWw7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogZ2V0IG5leHQgcXVhbGl0eSBsZXZlbCBsb2FkZWRcbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJuZXh0TG9hZExldmVsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxDb250cm9sbGVyLm5leHRMb2FkTGV2ZWw7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0IHF1YWxpdHkgbGV2ZWwgb2YgbmV4dCBsb2FkZWQgc2VnbWVudCBpbiBhIGZ1bGx5IFwibm9uLWRlc3RydWN0aXZlXCIgd2F5LlxuICAgICAgICogU2FtZSBhcyBgbG9hZExldmVsYCBidXQgd2lsbCB3YWl0IGZvciBuZXh0IHN3aXRjaCAodW50aWwgY3VycmVudCBsb2FkaW5nIGlzIGRvbmUpLlxuICAgICAgICovLFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQobGV2ZWwpIHtcbiAgICAgICAgdGhpcy5sZXZlbENvbnRyb2xsZXIubmV4dExvYWRMZXZlbCA9IGxldmVsO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybiBcImZpcnN0IGxldmVsXCI6IGxpa2UgYSBkZWZhdWx0IGxldmVsLCBpZiBub3Qgc2V0LFxuICAgICAgICogZmFsbHMgYmFjayB0byBpbmRleCBvZiBmaXJzdCBsZXZlbCByZWZlcmVuY2VkIGluIG1hbmlmZXN0XG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZmlyc3RMZXZlbFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLmxldmVsQ29udHJvbGxlci5maXJzdExldmVsLCB0aGlzLm1pbkF1dG9MZXZlbCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyBcImZpcnN0LWxldmVsXCIsIHNlZSBnZXR0ZXIuXG4gICAgICAgKi8sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdMZXZlbCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coXCJzZXQgZmlyc3RMZXZlbDpcIiArIG5ld0xldmVsKTtcbiAgICAgICAgdGhpcy5sZXZlbENvbnRyb2xsZXIuZmlyc3RMZXZlbCA9IG5ld0xldmVsO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybiB0aGUgZGVzaXJlZCBzdGFydCBsZXZlbCBmb3IgdGhlIGZpcnN0IGZyYWdtZW50IHRoYXQgd2lsbCBiZSBsb2FkZWQuXG4gICAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBvZiAtMSBpbmRpY2F0ZXMgYXV0b21hdGljIHN0YXJ0IGxldmVsIHNlbGVjdGlvbi5cbiAgICAgICAqIFNldHRpbmcgaGxzLm5leHRBdXRvTGV2ZWwgd2l0aG91dCBzZXR0aW5nIGEgc3RhcnRMZXZlbCB3aWxsIHJlc3VsdCBpblxuICAgICAgICogdGhlIG5leHRBdXRvTGV2ZWwgdmFsdWUgYmVpbmcgdXNlZCBmb3Igb25lIGZyYWdtZW50IGxvYWQuXG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RhcnRMZXZlbFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBzdGFydExldmVsID0gdGhpcy5sZXZlbENvbnRyb2xsZXIuc3RhcnRMZXZlbDtcbiAgICAgICAgaWYgKHN0YXJ0TGV2ZWwgPT09IC0xICYmIHRoaXMuYWJyQ29udHJvbGxlci5mb3JjZWRBdXRvTGV2ZWwgPiAtMSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmFickNvbnRyb2xsZXIuZm9yY2VkQXV0b0xldmVsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFydExldmVsO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIHNldCAgc3RhcnQgbGV2ZWwgKGxldmVsIG9mIGZpcnN0IGZyYWdtZW50IHRoYXQgd2lsbCBiZSBwbGF5ZWQgYmFjaylcbiAgICAgICAqIGlmIG5vdCBvdmVycmlkZWQgYnkgdXNlciwgZmlyc3QgbGV2ZWwgYXBwZWFyaW5nIGluIG1hbmlmZXN0IHdpbGwgYmUgdXNlZCBhcyBzdGFydCBsZXZlbFxuICAgICAgICogaWYgLTEgOiBhdXRvbWF0aWMgc3RhcnQgbGV2ZWwgc2VsZWN0aW9uLCBwbGF5YmFjayB3aWxsIHN0YXJ0IGZyb20gbGV2ZWwgbWF0Y2hpbmcgZG93bmxvYWQgYmFuZHdpZHRoXG4gICAgICAgKiAoZGV0ZXJtaW5lZCBmcm9tIGRvd25sb2FkIG9mIGZpcnN0IHNlZ21lbnQpXG4gICAgICAgKi8sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdMZXZlbCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coXCJzZXQgc3RhcnRMZXZlbDpcIiArIG5ld0xldmVsKTtcbiAgICAgICAgLy8gaWYgbm90IGluIGF1dG9tYXRpYyBzdGFydCBsZXZlbCBkZXRlY3Rpb24sIGVuc3VyZSBzdGFydExldmVsIGlzIGdyZWF0ZXIgdGhhbiBtaW5BdXRvTGV2ZWxcbiAgICAgICAgaWYgKG5ld0xldmVsICE9PSAtMSkge1xuICAgICAgICAgIG5ld0xldmVsID0gTWF0aC5tYXgobmV3TGV2ZWwsIHRoaXMubWluQXV0b0xldmVsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxldmVsQ29udHJvbGxlci5zdGFydExldmVsID0gbmV3TGV2ZWw7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogV2hldGhlciBsZXZlbCBjYXBwaW5nIGlzIGVuYWJsZWQuXG4gICAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIHNldCB2aWEgYGNvbmZpZy5jYXBMZXZlbFRvUGxheWVyU2l6ZWAuXG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2FwTGV2ZWxUb1BsYXllclNpemVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuY2FwTGV2ZWxUb1BsYXllclNpemU7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRW5hYmxlcyBvciBkaXNhYmxlcyBsZXZlbCBjYXBwaW5nLiBJZiBkaXNhYmxlZCBhZnRlciBwcmV2aW91c2x5IGVuYWJsZWQsIGBuZXh0TGV2ZWxTd2l0Y2hgIHdpbGwgYmUgaW1tZWRpYXRlbHkgY2FsbGVkLlxuICAgICAgICovLFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoc2hvdWxkU3RhcnRDYXBwaW5nKSB7XG4gICAgICAgIHZhciBuZXdDYXBMZXZlbFRvUGxheWVyU2l6ZSA9ICEhc2hvdWxkU3RhcnRDYXBwaW5nO1xuICAgICAgICBpZiAobmV3Q2FwTGV2ZWxUb1BsYXllclNpemUgIT09IHRoaXMuY29uZmlnLmNhcExldmVsVG9QbGF5ZXJTaXplKSB7XG4gICAgICAgICAgaWYgKG5ld0NhcExldmVsVG9QbGF5ZXJTaXplKSB7XG4gICAgICAgICAgICB0aGlzLmNhcExldmVsQ29udHJvbGxlci5zdGFydENhcHBpbmcoKTsgLy8gSWYgY2FwcGluZyBvY2N1cnMsIG5leHRMZXZlbFN3aXRjaCB3aWxsIGhhcHBlbiBiYXNlZCBvbiBzaXplLlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhcExldmVsQ29udHJvbGxlci5zdG9wQ2FwcGluZygpO1xuICAgICAgICAgICAgdGhpcy5hdXRvTGV2ZWxDYXBwaW5nID0gLTE7XG4gICAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXIubmV4dExldmVsU3dpdGNoKCk7IC8vIE5vdyB3ZSdyZSB1bmNhcHBlZCwgZ2V0IHRoZSBuZXh0IGxldmVsIGFzYXAuXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuY29uZmlnLmNhcExldmVsVG9QbGF5ZXJTaXplID0gbmV3Q2FwTGV2ZWxUb1BsYXllclNpemU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDYXBwaW5nL21heCBsZXZlbCB2YWx1ZSB0aGF0IHNob3VsZCBiZSB1c2VkIGJ5IGF1dG9tYXRpYyBsZXZlbCBzZWxlY3Rpb24gYWxnb3JpdGhtIChgQUJSQ29udHJvbGxlcmApXG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYXV0b0xldmVsQ2FwcGluZ1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRvTGV2ZWxDYXBwaW5nO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgYmFuZHdpZHRoIGVzdGltYXRlIGluIGJpdHMgcGVyIHNlY29uZCwgd2hlbiBhdmFpbGFibGUuIE90aGVyd2lzZSwgYE5hTmAgaXMgcmV0dXJuZWQuXG4gICAgICAgKi8sXG4gICAgICBzZXQ6XG4gICAgICAvKipcbiAgICAgICAqIENhcHBpbmcvbWF4IGxldmVsIHZhbHVlIHRoYXQgc2hvdWxkIGJlIHVzZWQgYnkgYXV0b21hdGljIGxldmVsIHNlbGVjdGlvbiBhbGdvcml0aG0gKGBBQlJDb250cm9sbGVyYClcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gc2V0KG5ld0xldmVsKSB7XG4gICAgICAgIGlmICh0aGlzLl9hdXRvTGV2ZWxDYXBwaW5nICE9PSBuZXdMZXZlbCkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhcInNldCBhdXRvTGV2ZWxDYXBwaW5nOlwiICsgbmV3TGV2ZWwpO1xuICAgICAgICAgIHRoaXMuX2F1dG9MZXZlbENhcHBpbmcgPSBuZXdMZXZlbDtcbiAgICAgICAgICB0aGlzLmxldmVsQ29udHJvbGxlci5jaGVja01heEF1dG9VcGRhdGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmFuZHdpZHRoRXN0aW1hdGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgYndFc3RpbWF0b3IgPSB0aGlzLmFickNvbnRyb2xsZXIuYndFc3RpbWF0b3I7XG4gICAgICAgIGlmICghYndFc3RpbWF0b3IpIHtcbiAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBid0VzdGltYXRvci5nZXRFc3RpbWF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGFickV3bWFEZWZhdWx0RXN0aW1hdGUpIHtcbiAgICAgICAgdGhpcy5hYnJDb250cm9sbGVyLnJlc2V0RXN0aW1hdG9yKGFickV3bWFEZWZhdWx0RXN0aW1hdGUpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhYnJFd21hRGVmYXVsdEVzdGltYXRlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGJ3RXN0aW1hdG9yID0gdGhpcy5hYnJDb250cm9sbGVyLmJ3RXN0aW1hdG9yO1xuICAgICAgICBpZiAoIWJ3RXN0aW1hdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYndFc3RpbWF0b3IuZGVmYXVsdEVzdGltYXRlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIGdldCB0aW1lIHRvIGZpcnN0IGJ5dGUgZXN0aW1hdGVcbiAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidHRmYkVzdGltYXRlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGJ3RXN0aW1hdG9yID0gdGhpcy5hYnJDb250cm9sbGVyLmJ3RXN0aW1hdG9yO1xuICAgICAgICBpZiAoIWJ3RXN0aW1hdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYndFc3RpbWF0b3IuZ2V0RXN0aW1hdGVUVEZCKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm1heEhkY3BMZXZlbFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXhIZGNwTGV2ZWw7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKGlzSGRjcExldmVsKHZhbHVlKSAmJiB0aGlzLl9tYXhIZGNwTGV2ZWwgIT09IHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5fbWF4SGRjcExldmVsID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5sZXZlbENvbnRyb2xsZXIuY2hlY2tNYXhBdXRvVXBkYXRlZCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogVHJ1ZSB3aGVuIGF1dG9tYXRpYyBsZXZlbCBzZWxlY3Rpb24gZW5hYmxlZFxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcImF1dG9MZXZlbEVuYWJsZWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZXZlbENvbnRyb2xsZXIubWFudWFsTGV2ZWwgPT09IC0xO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExldmVsIHNldCBtYW51YWxseSAoaWYgYW55KVxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcIm1hbnVhbExldmVsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxDb250cm9sbGVyLm1hbnVhbExldmVsO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIG1pbiBsZXZlbCBzZWxlY3RhYmxlIGluIGF1dG8gbW9kZSBhY2NvcmRpbmcgdG8gY29uZmlnLm1pbkF1dG9CaXRyYXRlXG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWluQXV0b0xldmVsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGxldmVscyA9IHRoaXMubGV2ZWxzLFxuICAgICAgICAgIG1pbkF1dG9CaXRyYXRlID0gdGhpcy5jb25maWcubWluQXV0b0JpdHJhdGU7XG4gICAgICAgIGlmICghbGV2ZWxzKSByZXR1cm4gMDtcbiAgICAgICAgdmFyIGxlbiA9IGxldmVscy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpZiAobGV2ZWxzW2ldLm1heEJpdHJhdGUgPj0gbWluQXV0b0JpdHJhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBtYXggbGV2ZWwgc2VsZWN0YWJsZSBpbiBhdXRvIG1vZGUgYWNjb3JkaW5nIHRvIGF1dG9MZXZlbENhcHBpbmdcbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJtYXhBdXRvTGV2ZWxcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHMsXG4gICAgICAgICAgYXV0b0xldmVsQ2FwcGluZyA9IHRoaXMuYXV0b0xldmVsQ2FwcGluZyxcbiAgICAgICAgICBtYXhIZGNwTGV2ZWwgPSB0aGlzLm1heEhkY3BMZXZlbDtcbiAgICAgICAgdmFyIG1heEF1dG9MZXZlbDtcbiAgICAgICAgaWYgKGF1dG9MZXZlbENhcHBpbmcgPT09IC0xICYmIGxldmVscyAhPSBudWxsICYmIGxldmVscy5sZW5ndGgpIHtcbiAgICAgICAgICBtYXhBdXRvTGV2ZWwgPSBsZXZlbHMubGVuZ3RoIC0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXhBdXRvTGV2ZWwgPSBhdXRvTGV2ZWxDYXBwaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhIZGNwTGV2ZWwpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gbWF4QXV0b0xldmVsOyBpLS07KSB7XG4gICAgICAgICAgICB2YXIgaGRjcExldmVsID0gbGV2ZWxzW2ldLmF0dHJzWydIRENQLUxFVkVMJ107XG4gICAgICAgICAgICBpZiAoaGRjcExldmVsICYmIGhkY3BMZXZlbCA8PSBtYXhIZGNwTGV2ZWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXhBdXRvTGV2ZWw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImZpcnN0QXV0b0xldmVsXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWJyQ29udHJvbGxlci5maXJzdEF1dG9MZXZlbDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBuZXh0IGF1dG9tYXRpY2FsbHkgc2VsZWN0ZWQgcXVhbGl0eSBsZXZlbFxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcIm5leHRBdXRvTGV2ZWxcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hYnJDb250cm9sbGVyLm5leHRBdXRvTGV2ZWw7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogdGhpcyBzZXR0ZXIgaXMgdXNlZCB0byBmb3JjZSBuZXh0IGF1dG8gbGV2ZWwuXG4gICAgICAgKiB0aGlzIGlzIHVzZWZ1bCB0byBmb3JjZSBhIHN3aXRjaCBkb3duIGluIGF1dG8gbW9kZTpcbiAgICAgICAqIGluIGNhc2Ugb2YgbG9hZCBlcnJvciBvbiBsZXZlbCBOLCBobHMuanMgY2FuIHNldCBuZXh0QXV0b0xldmVsIHRvIE4tMSBmb3IgZXhhbXBsZSlcbiAgICAgICAqIGZvcmNlZCB2YWx1ZSBpcyB2YWxpZCBmb3Igb25lIGZyYWdtZW50LiB1cG9uIHN1Y2Nlc3NmdWwgZnJhZyBsb2FkaW5nIGF0IGZvcmNlZCBsZXZlbCxcbiAgICAgICAqIHRoaXMgdmFsdWUgd2lsbCBiZSByZXNldHRlZCB0byAtMSBieSBBQlIgY29udHJvbGxlci5cbiAgICAgICAqLyxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5leHRMZXZlbCkge1xuICAgICAgICB0aGlzLmFickNvbnRyb2xsZXIubmV4dEF1dG9MZXZlbCA9IG5leHRMZXZlbDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBnZXQgdGhlIGRhdGV0aW1lIHZhbHVlIHJlbGF0aXZlIHRvIG1lZGlhLmN1cnJlbnRUaW1lIGZvciB0aGUgYWN0aXZlIGxldmVsIFByb2dyYW0gRGF0ZSBUaW1lIGlmIHByZXNlbnRcbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJwbGF5aW5nRGF0ZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNvbnRyb2xsZXIuY3VycmVudFByb2dyYW1EYXRlVGltZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWFpbkZvcndhcmRCdWZmZXJJbmZvXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ29udHJvbGxlci5nZXRNYWluRndkQnVmZmVySW5mbygpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtYXhCdWZmZXJMZW5ndGhcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1Db250cm9sbGVyLm1heEJ1ZmZlckxlbmd0aDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYWxsQXVkaW9UcmFja3NcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgYXVkaW9UcmFja0NvbnRyb2xsZXIgPSB0aGlzLmF1ZGlvVHJhY2tDb250cm9sbGVyO1xuICAgICAgICByZXR1cm4gYXVkaW9UcmFja0NvbnRyb2xsZXIgPyBhdWRpb1RyYWNrQ29udHJvbGxlci5hbGxBdWRpb1RyYWNrcyA6IFtdO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCB0aGUgbGlzdCBvZiBzZWxlY3RhYmxlIGF1ZGlvIHRyYWNrc1xuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcImF1ZGlvVHJhY2tzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGF1ZGlvVHJhY2tDb250cm9sbGVyID0gdGhpcy5hdWRpb1RyYWNrQ29udHJvbGxlcjtcbiAgICAgICAgcmV0dXJuIGF1ZGlvVHJhY2tDb250cm9sbGVyID8gYXVkaW9UcmFja0NvbnRyb2xsZXIuYXVkaW9UcmFja3MgOiBbXTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBpbmRleCBvZiB0aGUgc2VsZWN0ZWQgYXVkaW8gdHJhY2sgKGluZGV4IGluIGF1ZGlvIHRyYWNrIGxpc3RzKVxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcImF1ZGlvVHJhY2tcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgYXVkaW9UcmFja0NvbnRyb2xsZXIgPSB0aGlzLmF1ZGlvVHJhY2tDb250cm9sbGVyO1xuICAgICAgICByZXR1cm4gYXVkaW9UcmFja0NvbnRyb2xsZXIgPyBhdWRpb1RyYWNrQ29udHJvbGxlci5hdWRpb1RyYWNrIDogLTE7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogc2VsZWN0cyBhbiBhdWRpbyB0cmFjaywgYmFzZWQgb24gaXRzIGluZGV4IGluIGF1ZGlvIHRyYWNrIGxpc3RzXG4gICAgICAgKi8sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChhdWRpb1RyYWNrSWQpIHtcbiAgICAgICAgdmFyIGF1ZGlvVHJhY2tDb250cm9sbGVyID0gdGhpcy5hdWRpb1RyYWNrQ29udHJvbGxlcjtcbiAgICAgICAgaWYgKGF1ZGlvVHJhY2tDb250cm9sbGVyKSB7XG4gICAgICAgICAgYXVkaW9UcmFja0NvbnRyb2xsZXIuYXVkaW9UcmFjayA9IGF1ZGlvVHJhY2tJZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIGdldCB0aGUgY29tcGxldGUgbGlzdCBvZiBzdWJ0aXRsZSB0cmFja3MgYWNyb3NzIGFsbCBtZWRpYSBncm91cHNcbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJhbGxTdWJ0aXRsZVRyYWNrc1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlciA9IHRoaXMuc3VidGl0bGVUcmFja0NvbnRyb2xsZXI7XG4gICAgICAgIHJldHVybiBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlciA/IHN1YnRpdGxlVHJhY2tDb250cm9sbGVyLmFsbFN1YnRpdGxlVHJhY2tzIDogW107XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogZ2V0IGFsdGVybmF0ZSBzdWJ0aXRsZSB0cmFja3MgbGlzdCBmcm9tIHBsYXlsaXN0XG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3VidGl0bGVUcmFja3NcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgc3VidGl0bGVUcmFja0NvbnRyb2xsZXIgPSB0aGlzLnN1YnRpdGxlVHJhY2tDb250cm9sbGVyO1xuICAgICAgICByZXR1cm4gc3VidGl0bGVUcmFja0NvbnRyb2xsZXIgPyBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlci5zdWJ0aXRsZVRyYWNrcyA6IFtdO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIGluZGV4IG9mIHRoZSBzZWxlY3RlZCBzdWJ0aXRsZSB0cmFjayAoaW5kZXggaW4gc3VidGl0bGUgdHJhY2sgbGlzdHMpXG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3VidGl0bGVUcmFja1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlciA9IHRoaXMuc3VidGl0bGVUcmFja0NvbnRyb2xsZXI7XG4gICAgICAgIHJldHVybiBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlciA/IHN1YnRpdGxlVHJhY2tDb250cm9sbGVyLnN1YnRpdGxlVHJhY2sgOiAtMTtcbiAgICAgIH0sXG4gICAgICBzZXQ6XG4gICAgICAvKipcbiAgICAgICAqIHNlbGVjdCBhbiBzdWJ0aXRsZSB0cmFjaywgYmFzZWQgb24gaXRzIGluZGV4IGluIHN1YnRpdGxlIHRyYWNrIGxpc3RzXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHNldChzdWJ0aXRsZVRyYWNrSWQpIHtcbiAgICAgICAgdmFyIHN1YnRpdGxlVHJhY2tDb250cm9sbGVyID0gdGhpcy5zdWJ0aXRsZVRyYWNrQ29udHJvbGxlcjtcbiAgICAgICAgaWYgKHN1YnRpdGxlVHJhY2tDb250cm9sbGVyKSB7XG4gICAgICAgICAgc3VidGl0bGVUcmFja0NvbnRyb2xsZXIuc3VidGl0bGVUcmFjayA9IHN1YnRpdGxlVHJhY2tJZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFdoZXRoZXIgc3VidGl0bGUgZGlzcGxheSBpcyBlbmFibGVkIG9yIG5vdFxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcIm1lZGlhXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21lZGlhO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzdWJ0aXRsZURpc3BsYXlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgc3VidGl0bGVUcmFja0NvbnRyb2xsZXIgPSB0aGlzLnN1YnRpdGxlVHJhY2tDb250cm9sbGVyO1xuICAgICAgICByZXR1cm4gc3VidGl0bGVUcmFja0NvbnRyb2xsZXIgPyBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlci5zdWJ0aXRsZURpc3BsYXkgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFbmFibGUvZGlzYWJsZSBzdWJ0aXRsZSBkaXNwbGF5IHJlbmRlcmluZ1xuICAgICAgICovLFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdmFyIHN1YnRpdGxlVHJhY2tDb250cm9sbGVyID0gdGhpcy5zdWJ0aXRsZVRyYWNrQ29udHJvbGxlcjtcbiAgICAgICAgaWYgKHN1YnRpdGxlVHJhY2tDb250cm9sbGVyKSB7XG4gICAgICAgICAgc3VidGl0bGVUcmFja0NvbnRyb2xsZXIuc3VidGl0bGVEaXNwbGF5ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBnZXQgbW9kZSBmb3IgTG93LUxhdGVuY3kgSExTIGxvYWRpbmdcbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJsb3dMYXRlbmN5TW9kZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5sb3dMYXRlbmN5TW9kZTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFbmFibGUvZGlzYWJsZSBMb3ctTGF0ZW5jeSBITFMgcGFydCBwbGF5bGlzdCBhbmQgc2VnbWVudCBsb2FkaW5nLCBhbmQgc3RhcnQgbGl2ZSBzdHJlYW1zIGF0IHBsYXlsaXN0IFBBUlQtSE9MRC1CQUNLIHJhdGhlciB0aGFuIEhPTEQtQkFDSy5cbiAgICAgICAqLyxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG1vZGUpIHtcbiAgICAgICAgdGhpcy5jb25maWcubG93TGF0ZW5jeU1vZGUgPSBtb2RlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFBvc2l0aW9uIChpbiBzZWNvbmRzKSBvZiBsaXZlIHN5bmMgcG9pbnQgKGllIGVkZ2Ugb2YgbGl2ZSBwb3NpdGlvbiBtaW51cyBzYWZldHkgZGVsYXkgZGVmaW5lZCBieSBgYGBobHMuY29uZmlnLmxpdmVTeW5jRHVyYXRpb25gYGApXG4gICAgICAgKiBAcmV0dXJucyBudWxsIHByaW9yIHRvIGxvYWRpbmcgbGl2ZSBQbGF5bGlzdFxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcImxpdmVTeW5jUG9zaXRpb25cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXRlbmN5Q29udHJvbGxlci5saXZlU3luY1Bvc2l0aW9uO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEVzdGltYXRlZCBwb3NpdGlvbiAoaW4gc2Vjb25kcykgb2YgbGl2ZSBlZGdlIChpZSBlZGdlIG9mIGxpdmUgcGxheWxpc3QgcGx1cyB0aW1lIHN5bmMgcGxheWxpc3QgYWR2YW5jZWQpXG4gICAgICAgKiBAcmV0dXJucyAwIGJlZm9yZSBmaXJzdCBwbGF5bGlzdCBpcyBsb2FkZWRcbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJsYXRlbmN5XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF0ZW5jeUNvbnRyb2xsZXIubGF0ZW5jeTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBtYXhpbXVtIGRpc3RhbmNlIGZyb20gdGhlIGVkZ2UgYmVmb3JlIHRoZSBwbGF5ZXIgc2Vla3MgZm9yd2FyZCB0byBgYGBobHMubGl2ZVN5bmNQb3NpdGlvbmBgYFxuICAgICAgICogY29uZmlndXJlZCB1c2luZyBgYGBsaXZlTWF4TGF0ZW5jeUR1cmF0aW9uQ291bnRgYGAgKG11bHRpcGxlIG9mIHRhcmdldCBkdXJhdGlvbikgb3IgYGBgbGl2ZU1heExhdGVuY3lEdXJhdGlvbmBgYFxuICAgICAgICogQHJldHVybnMgMCBiZWZvcmUgZmlyc3QgcGxheWxpc3QgaXMgbG9hZGVkXG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWF4TGF0ZW5jeVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhdGVuY3lDb250cm9sbGVyLm1heExhdGVuY3k7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogdGFyZ2V0IGRpc3RhbmNlIGZyb20gdGhlIGVkZ2UgYXMgY2FsY3VsYXRlZCBieSB0aGUgbGF0ZW5jeSBjb250cm9sbGVyXG4gICAgICAgKi9cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidGFyZ2V0TGF0ZW5jeVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhdGVuY3lDb250cm9sbGVyLnRhcmdldExhdGVuY3k7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQobGF0ZW5jeSkge1xuICAgICAgICB0aGlzLmxhdGVuY3lDb250cm9sbGVyLnRhcmdldExhdGVuY3kgPSBsYXRlbmN5O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIHRoZSByYXRlIGF0IHdoaWNoIHRoZSBlZGdlIG9mIHRoZSBjdXJyZW50IGxpdmUgcGxheWxpc3QgaXMgYWR2YW5jaW5nIG9yIDEgaWYgdGhlcmUgaXMgbm9uZVxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcImRyaWZ0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF0ZW5jeUNvbnRyb2xsZXIuZHJpZnQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogc2V0IHRvIHRydWUgd2hlbiBzdGFydExvYWQgaXMgY2FsbGVkIGJlZm9yZSBNQU5JRkVTVF9QQVJTRUQgZXZlbnRcbiAgICAgICAqL1xuICAgIH0sIHtcbiAgICAgIGtleTogXCJmb3JjZVN0YXJ0TG9hZFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNvbnRyb2xsZXIuZm9yY2VTdGFydExvYWQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29udGVudFN0ZWVyaW5nIHBhdGh3YXlzIGdldHRlclxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcInBhdGh3YXlzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxDb250cm9sbGVyLnBhdGh3YXlzO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENvbnRlbnRTdGVlcmluZyBwYXRod2F5UHJpb3JpdHkgZ2V0dGVyL3NldHRlclxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcInBhdGh3YXlQcmlvcml0eVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxldmVsQ29udHJvbGxlci5wYXRod2F5UHJpb3JpdHk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQocGF0aHdheVByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMubGV2ZWxDb250cm9sbGVyLnBhdGh3YXlQcmlvcml0eSA9IHBhdGh3YXlQcmlvcml0eTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiByZXR1cm5zIHRydWUgd2hlbiBhbGwgU291cmNlQnVmZmVycyBhcmUgYnVmZmVyZWQgdG8gdGhlIGVuZFxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcImJ1ZmZlcmVkVG9FbmRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMkYnVmZmVyQ29udHJvbGxlO1xuICAgICAgICByZXR1cm4gISEoKF90aGlzJGJ1ZmZlckNvbnRyb2xsZSA9IHRoaXMuYnVmZmVyQ29udHJvbGxlcikgIT0gbnVsbCAmJiBfdGhpcyRidWZmZXJDb250cm9sbGUuYnVmZmVyZWRUb0VuZCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogcmV0dXJucyBJbnRlcnN0aXRpYWxzIFByb2dyYW0gTWFuYWdlclxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcImludGVyc3RpdGlhbHNNYW5hZ2VyXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIF90aGlzJGludGVyc3RpdGlhbHNDbztcbiAgICAgICAgcmV0dXJuICgoX3RoaXMkaW50ZXJzdGl0aWFsc0NvID0gdGhpcy5pbnRlcnN0aXRpYWxzQ29udHJvbGxlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGludGVyc3RpdGlhbHNDby5pbnRlcnN0aXRpYWxzTWFuYWdlcikgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgIGtleTogXCJ2ZXJzaW9uXCIsXG4gICAgICBnZXQ6XG4gICAgICAvKipcbiAgICAgICAqIEdldCB0aGUgdmlkZW8tZGV2L2hscy5qcyBwYWNrYWdlIHZlcnNpb24uXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkV2ZW50c1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFdmVudHM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk1ldGFkYXRhU2NoZW1hXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE1ldGFkYXRhU2NoZW1hO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFcnJvclR5cGVzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEVycm9yVHlwZXM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkVycm9yRGV0YWlsc1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFcnJvckRldGFpbHM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gYXBwbGllZCB0byBuZXcgaW5zdGFuY2VzLlxuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRDb25maWdcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAoIUhscy5kZWZhdWx0Q29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuIGhsc0RlZmF1bHRDb25maWc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEhscy5kZWZhdWx0Q29uZmlnO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJlcGxhY2UgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBhcHBsaWVkIHRvIG5ldyBpbnN0YW5jZXMuXG4gICAgICAgKi8sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChkZWZhdWx0Q29uZmlnKSB7XG4gICAgICAgIEhscy5kZWZhdWx0Q29uZmlnID0gZGVmYXVsdENvbmZpZztcbiAgICAgIH1cbiAgICB9XSk7XG4gIH0oKTtcbiAgSGxzLmRlZmF1bHRDb25maWcgPSB2b2lkIDA7XG5cbiAgcmV0dXJuIEhscztcblxufSkpO1xufSkoZmFsc2UpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hls.js/dist/hls.js\n");

/***/ })

};
;